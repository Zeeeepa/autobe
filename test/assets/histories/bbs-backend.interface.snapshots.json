[{"event":{"type":"interfaceStart","created_at":"2025-07-22T13:33:10.034Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceEndpoints","endpoints":[{"path":"/discussionboard/sections","method":"patch"},{"path":"/discussionboard/sections/{id}","method":"get"},{"path":"/discussionboard/sections","method":"post"},{"path":"/discussionboard/sections/{id}","method":"put"},{"path":"/discussionboard/sections/{id}","method":"delete"},{"path":"/discussionboard/boards","method":"patch"},{"path":"/discussionboard/boards/{id}","method":"get"},{"path":"/discussionboard/boards","method":"post"},{"path":"/discussionboard/boards/{id}","method":"put"},{"path":"/discussionboard/boards/{id}","method":"delete"},{"path":"/discussionboard/tags","method":"patch"},{"path":"/discussionboard/tags/{id}","method":"get"},{"path":"/discussionboard/tags","method":"post"},{"path":"/discussionboard/tags/{id}","method":"put"},{"path":"/discussionboard/tags/{id}","method":"delete"},{"path":"/discussionboard/boardSubscriptions","method":"patch"},{"path":"/discussionboard/boardSubscriptions/{id}","method":"get"},{"path":"/discussionboard/boardSubscriptions","method":"post"},{"path":"/discussionboard/boardSubscriptions/{id}","method":"put"},{"path":"/discussionboard/boardSubscriptions/{id}","method":"delete"},{"path":"/discussionboard/boardSettings","method":"patch"},{"path":"/discussionboard/boardSettings/{id}","method":"get"},{"path":"/discussionboard/boardSettings","method":"post"},{"path":"/discussionboard/boardSettings/{id}","method":"put"},{"path":"/discussionboard/boardSettings/{id}","method":"delete"},{"path":"/discussionboard/notificationSettings","method":"patch"},{"path":"/discussionboard/notificationSettings/{id}","method":"get"},{"path":"/discussionboard/notificationSettings","method":"post"},{"path":"/discussionboard/notificationSettings/{id}","method":"put"},{"path":"/discussionboard/notificationSettings/{id}","method":"delete"},{"path":"/discussionboard/admins","method":"patch"},{"path":"/discussionboard/admins/{id}","method":"get"},{"path":"/discussionboard/admins","method":"post"},{"path":"/discussionboard/admins/{id}","method":"put"},{"path":"/discussionboard/admins/{id}","method":"delete"},{"path":"/discussionboard/moderators","method":"patch"},{"path":"/discussionboard/moderators/{id}","method":"get"},{"path":"/discussionboard/moderators","method":"post"},{"path":"/discussionboard/moderators/{id}","method":"put"},{"path":"/discussionboard/moderators/{id}","method":"delete"},{"path":"/discussionboard/members","method":"patch"},{"path":"/discussionboard/members/{id}","method":"get"},{"path":"/discussionboard/members","method":"post"},{"path":"/discussionboard/members/{id}","method":"put"},{"path":"/discussionboard/members/{id}","method":"delete"},{"path":"/discussionboard/guests","method":"patch"},{"path":"/discussionboard/guests/{id}","method":"get"},{"path":"/discussionboard/guests","method":"post"},{"path":"/discussionboard/guests/{id}","method":"put"},{"path":"/discussionboard/guests/{id}","method":"delete"},{"path":"/discussionboard/userProfiles","method":"patch"},{"path":"/discussionboard/userProfiles/{id}","method":"get"},{"path":"/discussionboard/userProfiles","method":"post"},{"path":"/discussionboard/userProfiles/{id}","method":"put"},{"path":"/discussionboard/userProfiles/{id}","method":"delete"},{"path":"/discussionboard/userEmails","method":"patch"},{"path":"/discussionboard/userEmails/{id}","method":"get"},{"path":"/discussionboard/userEmails","method":"post"},{"path":"/discussionboard/userEmails/{id}","method":"put"},{"path":"/discussionboard/userEmails/{id}","method":"delete"},{"path":"/discussionboard/userAuths","method":"patch"},{"path":"/discussionboard/userAuths/{id}","method":"get"},{"path":"/discussionboard/userAuths","method":"post"},{"path":"/discussionboard/userAuths/{id}","method":"put"},{"path":"/discussionboard/userAuths/{id}","method":"delete"},{"path":"/discussionboard/userSessions","method":"patch"},{"path":"/discussionboard/userSessions/{id}","method":"get"},{"path":"/discussionboard/userSessions","method":"post"},{"path":"/discussionboard/userSessions/{id}","method":"put"},{"path":"/discussionboard/userSessions/{id}","method":"delete"},{"path":"/discussionboard/posts","method":"patch"},{"path":"/discussionboard/posts/{id}","method":"get"},{"path":"/discussionboard/posts","method":"post"},{"path":"/discussionboard/posts/{id}","method":"put"},{"path":"/discussionboard/posts/{id}","method":"delete"},{"path":"/discussionboard/postEdits","method":"patch"},{"path":"/discussionboard/postEdits/{id}","method":"get"},{"path":"/discussionboard/postEdits","method":"post"},{"path":"/discussionboard/postEdits/{id}","method":"put"},{"path":"/discussionboard/postEdits/{id}","method":"delete"},{"path":"/discussionboard/postLikes","method":"patch"},{"path":"/discussionboard/postLikes/{id}","method":"get"},{"path":"/discussionboard/postLikes","method":"post"},{"path":"/discussionboard/postLikes/{id}","method":"put"},{"path":"/discussionboard/postLikes/{id}","method":"delete"},{"path":"/discussionboard/postViews","method":"patch"},{"path":"/discussionboard/postViews/{id}","method":"get"},{"path":"/discussionboard/postViews","method":"post"},{"path":"/discussionboard/postViews/{id}","method":"put"},{"path":"/discussionboard/postViews/{id}","method":"delete"},{"path":"/discussionboard/comments","method":"patch"},{"path":"/discussionboard/comments/{id}","method":"get"},{"path":"/discussionboard/comments","method":"post"},{"path":"/discussionboard/comments/{id}","method":"put"},{"path":"/discussionboard/comments/{id}","method":"delete"},{"path":"/discussionboard/commentLikes","method":"patch"},{"path":"/discussionboard/commentLikes/{id}","method":"get"},{"path":"/discussionboard/commentLikes","method":"post"},{"path":"/discussionboard/commentLikes/{id}","method":"put"},{"path":"/discussionboard/commentLikes/{id}","method":"delete"},{"path":"/discussionboard/commentEdits","method":"patch"},{"path":"/discussionboard/commentEdits/{id}","method":"get"},{"path":"/discussionboard/commentEdits","method":"post"},{"path":"/discussionboard/commentEdits/{id}","method":"put"},{"path":"/discussionboard/commentEdits/{id}","method":"delete"},{"path":"/discussionboard/commentViews","method":"patch"},{"path":"/discussionboard/commentViews/{id}","method":"get"},{"path":"/discussionboard/commentViews","method":"post"},{"path":"/discussionboard/commentViews/{id}","method":"put"},{"path":"/discussionboard/commentViews/{id}","method":"delete"},{"path":"/discussionboard/reports","method":"patch"},{"path":"/discussionboard/reports/{id}","method":"get"},{"path":"/discussionboard/reports","method":"post"},{"path":"/discussionboard/reports/{id}","method":"put"},{"path":"/discussionboard/reports/{id}","method":"delete"},{"path":"/discussionboard/moderationActions","method":"patch"},{"path":"/discussionboard/moderationActions/{id}","method":"get"},{"path":"/discussionboard/moderationActions","method":"post"},{"path":"/discussionboard/moderationActions/{id}","method":"put"},{"path":"/discussionboard/moderationActions/{id}","method":"delete"},{"path":"/discussionboard/bans","method":"patch"},{"path":"/discussionboard/bans/{id}","method":"get"},{"path":"/discussionboard/bans","method":"post"},{"path":"/discussionboard/bans/{id}","method":"put"},{"path":"/discussionboard/bans/{id}","method":"delete"},{"path":"/discussionboard/warnings","method":"patch"},{"path":"/discussionboard/warnings/{id}","method":"get"},{"path":"/discussionboard/warnings","method":"post"},{"path":"/discussionboard/warnings/{id}","method":"put"},{"path":"/discussionboard/warnings/{id}","method":"delete"},{"path":"/discussionboard/auditLogs","method":"patch"},{"path":"/discussionboard/auditLogs/{id}","method":"get"},{"path":"/discussionboard/auditLogs","method":"post"},{"path":"/discussionboard/auditLogs/{id}","method":"put"},{"path":"/discussionboard/auditLogs/{id}","method":"delete"},{"path":"/discussionboard/communityGuidelines","method":"patch"},{"path":"/discussionboard/communityGuidelines/{id}","method":"get"},{"path":"/discussionboard/communityGuidelines","method":"post"},{"path":"/discussionboard/communityGuidelines/{id}","method":"put"},{"path":"/discussionboard/communityGuidelines/{id}","method":"delete"},{"path":"/discussionboard/contentPolicies","method":"patch"},{"path":"/discussionboard/contentPolicies/{id}","method":"get"},{"path":"/discussionboard/contentPolicies","method":"post"},{"path":"/discussionboard/contentPolicies/{id}","method":"put"},{"path":"/discussionboard/contentPolicies/{id}","method":"delete"},{"path":"/discussionboard/profanityFilters","method":"patch"},{"path":"/discussionboard/profanityFilters/{id}","method":"get"},{"path":"/discussionboard/profanityFilters","method":"post"},{"path":"/discussionboard/profanityFilters/{id}","method":"put"},{"path":"/discussionboard/profanityFilters/{id}","method":"delete"},{"path":"/discussionboard/automatedSpamRules","method":"patch"},{"path":"/discussionboard/automatedSpamRules/{id}","method":"get"},{"path":"/discussionboard/automatedSpamRules","method":"post"},{"path":"/discussionboard/automatedSpamRules/{id}","method":"put"},{"path":"/discussionboard/automatedSpamRules/{id}","method":"delete"},{"path":"/discussionboard/notifications","method":"patch"},{"path":"/discussionboard/notifications/{id}","method":"get"},{"path":"/discussionboard/notifications","method":"post"},{"path":"/discussionboard/notifications/{id}","method":"put"},{"path":"/discussionboard/notifications/{id}","method":"delete"},{"path":"/discussionboard/alertPreferences","method":"patch"},{"path":"/discussionboard/alertPreferences/{id}","method":"get"},{"path":"/discussionboard/alertPreferences","method":"post"},{"path":"/discussionboard/alertPreferences/{id}","method":"put"},{"path":"/discussionboard/alertPreferences/{id}","method":"delete"},{"path":"/discussionboard/actionLogs","method":"patch"},{"path":"/discussionboard/actionLogs/{id}","method":"get"},{"path":"/discussionboard/actionLogs","method":"post"},{"path":"/discussionboard/actionLogs/{id}","method":"put"},{"path":"/discussionboard/actionLogs/{id}","method":"delete"},{"path":"/discussionboard/errorLogs","method":"patch"},{"path":"/discussionboard/errorLogs/{id}","method":"get"},{"path":"/discussionboard/errorLogs","method":"post"},{"path":"/discussionboard/errorLogs/{id}","method":"put"},{"path":"/discussionboard/errorLogs/{id}","method":"delete"},{"path":"/discussionboard/apiAccessLogs","method":"patch"},{"path":"/discussionboard/apiAccessLogs/{id}","method":"get"},{"path":"/discussionboard/apiAccessLogs","method":"post"},{"path":"/discussionboard/apiAccessLogs/{id}","method":"put"},{"path":"/discussionboard/apiAccessLogs/{id}","method":"delete"}],"created_at":"2025-07-22T13:33:10.034Z","step":0},"tokenUsage":{"facade":{"aggregate":{"total":39244,"input":{"total":36660,"cached":0},"output":{"total":2584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":39244,"input":{"total":36660,"cached":0},"output":{"total":2584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":39244,"input":{"total":36660,"cached":0},"output":{"total":2584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":39244,"input":{"total":36660,"cached":0},"output":{"total":2584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new discussion board post. Maps to the discussionboard_posts table. Required fields: board_id (the board under which the post appears), author_id (user creating the post), title, body. Must enforce RBAC: only authenticated members (and above) may post. Timestamp fields (created_at, updated_at) are set automatically and should not be set by API caller. Returns the full post record upon creation.","description":"This endpoint allows a registered member to create a new post in a specified board. The post is associated with a board (by board_id) and the authoring user (by author_id), and must include a title and body. Permissions checks ensure that only logged-in members, moderators, or admins can create posts. The API will record creation and modification timestamps, and may apply business rules such as profanity filtering and content policy checks before saving. The response includes the created post details. Related: Users may later edit or delete their posts via separate endpoints; moderation tools may restrict or remove posts post-creation.","summary":"Create a new post in discussionboard_posts.","parameters":[],"requestBody":{"description":"Data for creating a new post.","typeName":"IDiscussionboardPost.ICreate"},"responseBody":{"description":"The created post record.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/posts","method":"post"},{"specification":"Update details of a single post by its unique id in discussionboard_posts. Allows editing title and body, tracks editor (author or elevated role). RBAC: members can edit their posts, moderators/admins any. This corresponds to in-place updating; all previous versions are recorded in post_edits table for audit.","description":"This API allows a member (owner), moderator, or admin to update an existing post. The endpoint enforces RBAC: members can only edit their own posts while moderators/admins can edit any. All edit actions are tracked in the discussionboard_post_edits table for auditability. Business rules such as moderation policies, profanity checks, and content policies may be applied before updating. If the post is soft-deleted, further edits may be prevented. Responds with the updated post content.","summary":"Update a specific post in discussionboard_posts by id.","parameters":[{"name":"id","description":"UUID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the post.","typeName":"IDiscussionboardPost.IUpdate"},"responseBody":{"description":"The updated post object.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/posts/{id}","method":"put"},{"specification":"Delete a post (soft-delete) from discussionboard_posts by id. Records deletion event for audit trail. Only the post owner, moderator, or admin may delete. Related comments and likes remain but may be hidden; deletion is soft (deleted_at set).","description":"This endpoint allows a member (if owner), moderator, or admin to delete (soft-delete) a post by its unique identifier. Soft deletion marks the record as deleted but retains it in the DB for auditability and potential restoration. All deletions are tracked for audit logs. RBAC enforced by checking user role and ownership. Associated comments remain, but post is not shown in default queries. Deletion may trigger notifications to post followers or prior commenters.","summary":"Soft-delete a post in discussionboard_posts by id.","parameters":[{"name":"id","description":"UUID of the post to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion, typically the deleted post object with deleted_at set.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/posts/{id}","method":"delete"},{"specification":"List post edit log entries for posts, supporting filtering (by post id, editor, edit date) and pagination. Returns paginated list of discussionboard_post_edits records. Useful for moderation and audit.","description":"Retrieve a paginated and filterable list of post edit entries from the discussionboard_post_edits table. This enables members (for their own content), and moderators/admins (for any post) to view the edit history for posts. Useful for auditing and moderation (transparency of edit trail). Query supports filters such as post_id, editor_id, edit_summary, edited_at range, and sort order. Related endpoints: detailed retrieval by edit id, create a new edit record during update, and update or remove an edit log for correction or moderation.","summary":"List/filter post edit log entries (discussionboard_post_edits).","parameters":[],"requestBody":{"description":"Search and pagination for post edit log.","typeName":"IDiscussionboardPostEdit.IRequest"},"responseBody":{"description":"Paginated list of post edit entries.","typeName":"IPageIDiscussionboardPostEdit"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postEdits","method":"patch"},{"specification":"Retrieve a single post edit entry by its unique id from discussionboard_post_edits. Used for viewing specific edit audit information.","description":"Fetch details of a specific post edit event by id. Returns full information about the edit (editor, timestamp, edit summary, etc.) for auditability. Accessible to the post author (who can view the full edit history on their content), moderators, and admins. Often linked from editing/audit UIs and moderation views. Related: Listing edit logs and creating new edit records.","summary":"Get a specific post edit entry by id (discussionboard_post_edits).","parameters":[{"name":"id","description":"UUID of the post edit entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the post edit entry.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postEdits/{id}","method":"get"},{"specification":"Create a new post edit entry (manual or in response to update) in discussionboard_post_edits. Used when tracking manual/auditor edits, corrections, or moderator/admin interventions. Timestamps and editor identity must be stored.","description":"Add a new entry recording an edit event for a post. Used for manual audit trail extension or tracking changes by moderators (not just inline via /posts update). May be used by automated workflows as well. Requires the edited post id, editor id, edit summary (optional), and edited_at timestamp. The new edit log is stored for future traceability. Related: retrieval (list/get) and update (for correction). RBAC: only members, moderators, admins permitted; all edit actions must be auditable.","summary":"Create new post edit entry (discussionboard_post_edits).","parameters":[],"requestBody":{"description":"Data for creating a post edit entry.","typeName":"IDiscussionboardPostEdit.ICreate"},"responseBody":{"description":"The created post edit record.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postEdits","method":"post"},{"specification":"Update a post edit entry (discussionboard_post_edits) by its id. Typically allows updating the edit summary or correct editor reference for audit purposes. Only moderators, admins, and (in rare cases) the original editor may update. Full traceability required.","description":"Modify an existing post edit log entry. Used for correction of edit summary/note or fixing editor attribution (with appropriate permissions). RBAC rules: only permitted for the original editor or users with elevated privileges. Editing edit logs is tightly controlled for security/audit. All changes audit-logged. Related endpoints: list, get, delete edit logs.","summary":"Update a specific post edit entry by id (discussionboard_post_edits).","parameters":[{"name":"id","description":"UUID of the post edit entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the post edit entry.","typeName":"IDiscussionboardPostEdit.IUpdate"},"responseBody":{"description":"The updated post edit entry.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/postEdits/{id}","method":"put"},{"specification":"Delete (remove from audit log) a post edit entry in discussionboard_post_edits by id. Rare, typically only for moderation correction or legal compliance. Most audit logs should remain in place. Only admins or authorized moderators may delete edit logs.","description":"This endpoint removes a post edit log entry from the audit trail. Used rarely, for correcting audit history due to legal, privacy, or moderator error. Soft/hard deletion determined by policy; RBAC strictly enforced. All deletions are themselves audit-logged. Related endpoints: get, list, update edit logs. Deletions should be traceable and reversible if required by compliance.","summary":"Delete a post edit entry by id (discussionboard_post_edits).","parameters":[{"name":"id","description":"UUID of the post edit entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and detail of deleted log entry.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["admin"],"path":"/discussionboard/postEdits/{id}","method":"delete"},{"specification":"Retrieve a list of post like/dislike records (discussionboard_post_likes), supporting filtering (by post id, user id, etc.) and pagination. Used for analytics, engagement stats, or anti-abuse checks.","description":"Returns a paginated, optionally filtered list of post like/dislike entries. Supports filtering by post id, user id, like status, or date. Used for engagement UIs, moderation, and abuse pattern detection. Pagination supported. Related endpoints: create like/dislike, retrieve, update like/dislike, delete (by separate endpoint if required).","summary":"List/filter like/dislike entries for posts (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Search and pagination for post like entries.","typeName":"IDiscussionboardPostLike.IRequest"},"responseBody":{"description":"Paginated list of like/dislike entries.","typeName":"IPageIDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes","method":"patch"},{"specification":"Retrieve a single post like/dislike record by id from discussionboard_post_likes. Used for checking user's own reaction or for moderation purposes.","description":"Fetches the like/dislike entry for a post based on its unique id. Used by members, moderators, or admins to check if a reaction has already been made and to review its details (such as whether it is a like/dislike, who made it, and when).","summary":"Get a specific like/dislike entry by id (discussionboard_post_likes).","parameters":[{"name":"id","description":"UUID of the post like/dislike entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the like/dislike entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes/{id}","method":"get"},{"specification":"Create a new like/dislike entry for a post in discussionboard_post_likes. One per (post_id, user_id).","description":"Allows a member, moderator, or admin to register a like or dislike for a post. The API ensures only a single like/dislike per user per post (enforced in the DB). Used for social engagement, activity feeds, and abuse prevention. After creation, total reactions are recalculated by aggregates.","summary":"Create a new like/dislike entry for a post (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Data for new like/dislike entry.","typeName":"IDiscussionboardPostLike.ICreate"},"responseBody":{"description":"The created like/dislike entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes","method":"post"},{"specification":"Update an existing like/dislike entry by id in discussionboard_post_likes. Allows changing from like to dislike or vice versa, metadata, etc. Only the owner or moderators/admins can update.","description":"Updates a like/dislike record for a post. Permitted if performed by the record owner or moderator/admin. Typical use: changing a 'like' to a 'dislike' or vice versa. RBAC: owner, moderators, admins. RBAC and audit logging/traceability required for all changes.","summary":"Update a specific like/dislike entry by id (discussionboard_post_likes).","parameters":[{"name":"id","description":"UUID of the post like/dislike entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for like/dislike entry.","typeName":"IDiscussionboardPostLike.IUpdate"},"responseBody":{"description":"The updated like/dislike entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes/{id}","method":"put"}],"completed":12,"total":180,"step":0,"created_at":"2025-07-22T13:34:26.117Z"},"tokenUsage":{"facade":{"aggregate":{"total":81616,"input":{"total":76203,"cached":0},"output":{"total":5413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":81616,"input":{"total":76203,"cached":0},"output":{"total":5413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":81616,"input":{"total":76203,"cached":0},"output":{"total":5413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":81616,"input":{"total":76203,"cached":0},"output":{"total":5413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Delete a single board settings record by ID. This endpoint is associated with the discussionboard_board_settings table in the Prisma schema and is intended for administrative actions, such as removing obsolete settings for a specific board.","description":"This API allows administrators to delete a board settings entry identified by its unique ID from the discussionboard_board_settings table. Board settings globally control options such as image upload permissions and moderation requirements for their linked board. When called, the API will permanently remove the specified settings, after checking for dependents and enforcing database referential integrity. This operation is restricted to admin roles as settings can impact board-wide feature toggles, and must log all deletions for audit trail compliance. If the board settings do not exist, the API must return a not-found error. Related settings references in dependent systems or cache should be invalidated on successful deletion. Note that deleted settings cannot be restored except through re-creation.","summary":"Delete a DiscussionBoardBoardSettings record by ID (discussionboard_board_settings).","parameters":[{"name":"id","description":"Target board settings record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings/{id}","method":"delete"},{"specification":"Patch (search/filter/list) notification setting records for the discussion board. This endpoint is associated with the discussionboard_notification_settings table and is used to list or search notification settings with optional filters or pagination.","description":"This operation provides a way to retrieve a list of notification settings, potentially filtered by member ID, notification preferences, or pagination options from the discussionboard_notification_settings table. Only users with necessary permissions (typically admins, possibly members for their own settings) can access this endpoint. The results include each setting's notification preferences for board and mention events. This API supports paging, sorting, and filtering according to query parameters, and should return results wrapped with pagination metadata. If a member requests their own settings, the permissions checks should limit exposure to only their record; admins can access all records.","summary":"List/search notification settings (discussionboard_notification_settings).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for notification settings list.","typeName":"IDiscussionboardNotificationSettings.IRequest"},"responseBody":{"description":"Paginated notification settings list result.","typeName":"IPageIDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings","method":"patch"},{"specification":"Get a single notification settings record by ID. Associated with the discussionboard_notification_settings table, this operation retrieves the detailed notification preference of a user or administrator for board events and mentions.","description":"Given a unique ID corresponding to a notification setting record, this API fetches and returns the full detail of the notification settings as stored in the discussionboard_notification_settings table. These preferences dictate how and when the member receives notifications about board activity or mentions. The operation enforces permission checks so that users can only see their own settings unless they are granted elevated permissions (admin/moderator). Returns a 404 error if the settings record does not exist or is unauthorized. All accesses should be auditable for compliance.","summary":"Get a single notification settings record by ID (discussionboard_notification_settings).","parameters":[{"name":"id","description":"Target notification settings record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification settings record.","typeName":"IDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings/{id}","method":"get"},{"specification":"Create a new discussion board notification settings record. This is mapped to the discussionboard_notification_settings table. Only one notification settings record may exist per member; attempting to create a duplicate must result in an error.","description":"This API allows authenticated members to create a new set of notification settings specifying their preferences for board notifications and mentions. Upon creation, the API must enforce uniqueness per-member (each user may have only one notification settings record). It should validate input (such as presence of boolean flags) and ensure referential integrity with the member table. If successful, the API returns the full created notification settings record. If a record already exists, a conflict error is returned. Logging is required for audit trails.","summary":"Create notification settings (discussionboard_notification_settings).","parameters":[],"requestBody":{"description":"Notification settings creation data.","typeName":"IDiscussionboardNotificationSettings.ICreate"},"responseBody":{"description":"Created notification settings record.","typeName":"IDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings","method":"post"},{"specification":"Update a notification settings record by ID. Applies to the discussionboard_notification_settings table; used by members to change existing notification preferences for board and mention events.","description":"This API updates notification settings identified by a unique ID in the discussionboard_notification_settings table. It allows updating preference flags such as whether to receive notifications for board activity or mentions. The operation validates that the ID belongs to the requester (unless admin), and that only allowed fields are changed. On success, the API returns the full, updated notification settings. If the record is not found, or not owned by the user, a 404 error is returned. All update events should generate an audit log entry for compliance.","summary":"Update notification settings by ID (discussionboard_notification_settings).","parameters":[{"name":"id","description":"Target notification settings record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification settings changes.","typeName":"IDiscussionboardNotificationSettings.IUpdate"},"responseBody":{"description":"Updated notification settings record.","typeName":"IDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings/{id}","method":"put"},{"specification":"Delete a notification settings record by ID. Associated with discussionboard_notification_settings, this is used to remove a member's notification preferences record, typically as part of account management or deactivation.","description":"Given an ID, this API deletes the corresponding notification settings record from the discussionboard_notification_settings table. Deletion is permanent and should only be allowed by the record owner (member) or administrators. If the record does not exist, or is not permitted for deletion by the caller, a 404 or forbidden error should be returned. Success responses acknowledge the deletion; log the event for audit compliance.","summary":"Delete notification settings by ID (discussionboard_notification_settings).","parameters":[{"name":"id","description":"Target notification settings record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/notificationSettings/{id}","method":"delete"},{"specification":"List or search admin role records for the discussion board. This is tied to the discussionboard_admins table; lists admins, supports filtering by member, grant/revoke status, and paginated querying for admin/oversight use.","description":"Retrieves a paginated, filterable list of admin assignments in the discussionboard_admins table. Filters can include member ID, status (active/revoked), or grant timestamp. Should support pagination, sorting, and optional text search. Only admin users may access the full list. All accesses and queries should be auditable for compliance and privilege monitoring.","summary":"List/search admin role assignments (discussionboard_admins).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for admin assignments listing.","typeName":"IDiscussionboardAdmins.IRequest"},"responseBody":{"description":"Paginated admin role assignment results.","typeName":"IPageIDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins","method":"patch"},{"specification":"Get details of a single admin role assignment by its ID. Associated with the discussionboard_admins table, this returns all available information about a specific admin assignment event or status.","description":"Given an ID, retrieve all details about an admin role assignment, including member reference, grant/revoke status, and timestamp, from the discussionboard_admins table. Only privileged users may request any record; all direct accesses should be logged for auditability. If the record does not exist, return a 404 error. Permissions must be enforced.","summary":"Get admin assignment record by ID (discussionboard_admins).","parameters":[{"name":"id","description":"Target admin role assignment record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Admin role assignment record.","typeName":"IDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins/{id}","method":"get"},{"specification":"Create a new admin assignment (grant admin privileges to a member). Associated with the discussionboard_admins table; only privileged existing admins can create new admin role assignments.","description":"Allows the creation of a new admin role assignment for a member, i.e., promoting a member to admin status. The request must reference an existing member by ID and enforce single-admin-per-member uniqueness. Only privileged operators (current admins) may perform this operation. Created records must be returned in full, and all promotions logged for audit compliance.","summary":"Create admin assignment (discussionboard_admins).","parameters":[],"requestBody":{"description":"Admin assignment creation data.","typeName":"IDiscussionboardAdmins.ICreate"},"responseBody":{"description":"Created admin assignment record.","typeName":"IDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins","method":"post"},{"specification":"Update an existing admin assignment record by ID. Mapped to discussionboard_admins; mainly used to record role revocations, changes in status, or audit field updates.","description":"This API updates an admin assignment in the discussionboard_admins table, typically to revoke admin status (set revoked_at), update metadata, or correct assignment details. Only other admins may invoke this action. Success returns the updated assignment record. Permissions, audit logging, and referential integrity must be strictly enforced.","summary":"Update admin assignment by ID (discussionboard_admins).","parameters":[{"name":"id","description":"Target admin assignment record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in admin assignment.","typeName":"IDiscussionboardAdmins.IUpdate"},"responseBody":{"description":"Updated admin assignment record.","typeName":"IDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins/{id}","method":"put"},{"specification":"Delete an admin role assignment, revoking admin privileges from a member by assignment record ID. Associated with discussionboard_admins; restricted to privileged role operators (admins).","description":"Removes (revokes) an admin assignment record, hence removing admin privileges for the referenced member. Only other admins may call this. Idempotent: deleting a non-existent assignment returns success or a not found error (as per application policy). Revocation timestamp must be set and all deletions logged for auditability.","summary":"Delete admin assignment by ID (discussionboard_admins).","parameters":[{"name":"id","description":"Target admin assignment record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/admins/{id}","method":"delete"},{"specification":"List or search moderator role assignments for the discussion board. This operation is related to the discussionboard_moderators table; lists assignments, supports filter/search, paging, for admin/oversight tasks.","description":"Retrieves paginated and optionally filtered moderator assignments from the discussionboard_moderators table. Filters can include member ID, grant/revoke status, etc. Only admins (and possibly moderators) can list all moderator assignments. All accesses are auditable for compliance. Should include relevant metadata, paging, and query parameter support.","summary":"List/search moderator role assignments (discussionboard_moderators).","parameters":[],"requestBody":{"description":"Search, filter, and pagination for moderator assignment list.","typeName":"IDiscussionboardModerators.IRequest"},"responseBody":{"description":"Paginated moderator assignments list result.","typeName":"IPageIDiscussionboardModerators"},"authorizationRoles":["admin"],"path":"/discussionboard/moderators","method":"patch"}],"completed":24,"total":180,"step":0,"created_at":"2025-07-22T13:34:28.851Z"},"tokenUsage":{"facade":{"aggregate":{"total":123946,"input":{"total":115751,"cached":21120},"output":{"total":8195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":123946,"input":{"total":115751,"cached":21120},"output":{"total":8195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":123946,"input":{"total":115751,"cached":21120},"output":{"total":8195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":123946,"input":{"total":115751,"cached":21120},"output":{"total":8195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This API retrieves detailed information about a specific discussion board moderator by their unique ID. It is directly associated with the `discussionboard_moderators` table, which records moderation assignments for user accounts. The returned data should include moderator assignment fields, the linked member ID, granted/revoked timestamps, and any associated audit references. This endpoint supports permission checks: only admins or the moderator themselves may access this data. The response will provide all normalized moderator attributes, 3NF compliance, and role-relevant identifiers.","description":"Retrieves all properties for a single moderator from the `discussionboard_moderators` table, including moderator status, assigned member, assignment and revocation dates, and related audit information. The endpoint enforces permissions based on the requesting user's role, ensuring that only authorized actors (admins or the moderator) can access sensitive moderation information. This is essential for RBAC enforcement and supports administrative workflows and member transparency on moderator status. Error handling will reflect authorization or missing record.","summary":"Get detailed information for one moderator (discussionboard_moderators table).","parameters":[{"name":"id","description":"Unique ID of the moderator assignment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment details and audit fields.","typeName":"IDiscussionboardModerator"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderators/{id}","method":"get"},{"specification":"This endpoint creates a new discussion board moderator entry. It requires admin permission and is linked to the `discussionboard_moderators` table, capturing the assignment of the moderator role to a specified member. The request body must include the member’s user ID. Business rules include verifying the member exists, has not already been assigned as moderator, and updating the assignment audit trail. 3NF is preserved as only the assignment is stored here, not member profile data. On success, it returns the new moderator assignment details.","description":"Creates a new moderator assignment in the `discussionboard_moderators` table. The request must provide the target member's unique ID and optional metadata. Only admins may call this endpoint. The operation checks for assignment eligibility, prevents duplicate assignments, and records the assignment grant timestamp. On success, the new moderator record is returned for display or continued application flow. Error handling must address conflicts and permission violations.","summary":"Assign moderator role to a member (discussionboard_moderators table).","parameters":[],"requestBody":{"description":"Moderator assignment creation information: target member ID.","typeName":"IDiscussionboardModerator.ICreate"},"responseBody":{"description":"Moderator assignment record created.","typeName":"IDiscussionboardModerator"},"authorizationRoles":["admin"],"path":"/discussionboard/moderators","method":"post"},{"specification":"Updates the moderator assignment for a specific moderator (by unique ID). Associated with `discussionboard_moderators`, this endpoint is used for revoking or changing the moderator status (e.g., update timestamps, note revocation, etc). Only admins have access. Business logic includes permission enforcement, updating audit trail, and maintaining 3NF by only modifying normalized moderator fields.","description":"Allows admin users to update assignment status, revoke the moderator role, or edit moderator comment/metadata for audit in the `discussionboard_moderators` table. The request requires the moderator ID, the intended updated fields, and will record changes in assignment history for regulatory or compliance visibility. Changes are reflected in the returned moderator record. Errors include missing record or permission errors.","summary":"Update a moderator assignment (discussionboard_moderators table).","parameters":[{"name":"id","description":"Unique ID of moderator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment update fields (status, revocation, notes, etc).","typeName":"IDiscussionboardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment record.","typeName":"IDiscussionboardModerator"},"authorizationRoles":["admin"],"path":"/discussionboard/moderators/{id}","method":"put"},{"specification":"Removes a moderator assignment, revoking moderator privileges from the target user. This links to the `discussionboard_moderators` table and is only accessible to admins. Removes the normalized assignment record and triggers deletion (or soft-deletion for audit) for the moderator role. 3NF is maintained as only the mapping/assignment is deleted, not the user or related artifacts. Permissions, referential integrity, and audit logging are enforced.","description":"Deletes a moderator assignment from the `discussionboard_moderators` table, revoking moderator privileges of the targeted member. Admins only. This operation removes the assignment by ID and records the event for audit trail and compliance. All moderator-permission APIs must be immediately revoked for the affected user. Error responses include not found, unauthorized, or integrity constraint violations.","summary":"Delete (revoke) a moderator assignment (discussionboard_moderators table).","parameters":[{"name":"id","description":"ID of moderator assignment to delete/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderators/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of discussion board members. Maps to `discussionboard_members` table. Incorporates advanced search, sorting, and filter criteria in the request body (such as username, registration date, status). Supports role-based restrictions (e.g., only admins/moderators can see deactivated/banned users). Returns paginated member summary data objects compliant with 3NF, never denormalized. Used for admin user management panels and member search features.","description":"Returns a paginated, filtered set of member summary records from `discussionboard_members` that match search criteria (such as username query, created_at range, activation status). Supports sort and page controls. Used for admin moderation and user directory queries. May include active/deactivated status, registration date, and search highlights. Permission checks determine if restricted users are included in the result set. Errors include permission or bad search parameter syntax.","summary":"List/search members with advanced filters (discussionboard_members).","parameters":[],"requestBody":{"description":"Advanced search and pagination controls for member listing.","typeName":"IDiscussionboardMember.IRequest"},"responseBody":{"description":"Paginated member summary results.","typeName":"IPageIDiscussionboardMemberSummary"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/members","method":"patch"},{"specification":"Retrieve all detailed member data for a specific member by ID. Associated with `discussionboard_members` table. Used for member profile management, audits, or advanced admin workflows. Enforces RBAC: only the member, moderator, or admin can access details. Returns all direct member fields as per 3NF, without joined/denormalized data from related tables (profile, emails, sessions are obtained separately).","description":"Gets all normalized fields for a single member from `discussionboard_members` identified by ID. The data includes username, registration/activation/deactivation timestamps, and membership status. This supports profile self-service and admin/member directory use cases. Permissions restrict to the user or authorized staff. Detailed error reporting provides not found, forbidden, or compliance error signals.","summary":"Get one member's full account detail (discussionboard_members).","parameters":[{"name":"id","description":"ID of member to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member account data.","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/members/{id}","method":"get"},{"specification":"Creates a new member account (registration). Writes to `discussionboard_members` table. Handles user sign-up scenarios including collection of username and hashed password (see requirements analysis for verification and onboarding flows). Does not create profile, email, or session entries (handled via separate APIs). 3NF is enforced by capturing only direct member data. Returns full new member record on success. RBAC/settings may restrict who can register new members.","description":"Registers a new discussion board member by writing a record to `discussionboard_members`. The request contains registration fields (username, password hash, timestamp). Profile, verification, and sessions are managed through other APIs. This endpoint validates uniqueness (username) and data format. On success, returns the full normalized member object. Errors include duplicate username, invalid data, and system restrictions.","summary":"Register (create) a new member (discussionboard_members table).","parameters":[],"requestBody":{"description":"Member registration details (username, password hash, timestamp).","typeName":"IDiscussionboardMember.ICreate"},"responseBody":{"description":"Newly created member object.","typeName":"IDiscussionboardMember"},"authorizationRoles":null,"path":"/discussionboard/members","method":"post"},{"specification":"Updates the member account fields for a specific member. Writes to `discussionboard_members` by ID. Covers updates to core member data (not profile or emails, which are separate endpoints). RBAC: only the member or admin/moderator can update. 3NF maintained. Returns updated member record on success, with full field-level audit. Supports account changes, activation/deactivation, and admin/member initiated modification flows.","description":"Allows a member (or admin/moderator) to update normalized fields in their account record in `discussionboard_members`. Only core ID fields are allowed (other components - profile, sessions, email - have dedicated APIs). The request may update username, password (re-hash), or status fields. Uniqueness and permission checks apply. Successful calls return the updated account object; errors detail format, conflict, or unauthorized access.","summary":"Update member account details (discussionboard_members table).","parameters":[{"name":"id","description":"ID of member account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in member account. Only normalized member table fields permitted.","typeName":"IDiscussionboardMember.IUpdate"},"responseBody":{"description":"Updated member account (direct fields only).","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/members/{id}","method":"put"},{"specification":"Deletes or deactivates a member account by ID. Maps to `discussionboard_members` table. Typically a soft delete for compliance/log audit reasons. RBAC enforced: only admins can delete members, and typically not themselves. Application must ensure removal cascades to sessions, subscriptions, but maintains audit logs as required. Returns no body on success, errors on forbidden or not found.","description":"Deletes (or deactivates per business logic) the target member's account in `discussionboard_members`. Cascades user session termination, board subscription removal, but preserves audit trail for member actions. Only available to admins. This supports compliance with user removal flows, retention policies, and RBAC enforcement. On success, no content is returned. Errors are returned for forbidden, not found, or failed cascade events.","summary":"Delete/deactivate a member account (discussionboard_members table).","parameters":[{"name":"id","description":"ID of member account to delete/deactivate.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/members/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of discussion board guest sessions, fulfilling analytics and onboarding tracking requirements. Maps to `discussionboard_guests` table. Allows filtering by token, session start, and supports pagination and advanced analytics for platform analysis. Only accessible to admins for auditing/marketing.","description":"Returns paginated, filtered record set for guest user sessions from `discussionboard_guests` according to query/pagination controls supplied in request body. Returns summary guest session objects (session token, ID, created_at). Used for marketing analytics, guest-to-member conversion tracking, and admin oversight. Business logic restricts viewing to admins.","summary":"List/search guest sessions (discussionboard_guests table).","parameters":[],"requestBody":{"description":"Advanced search and pagination controls for guest session listing.","typeName":"IDiscussionboardGuest.IRequest"},"responseBody":{"description":"Paginated guest session summaries.","typeName":"IPageIDiscussionboardGuestSummary"},"authorizationRoles":["admin"],"path":"/discussionboard/guests","method":"patch"},{"specification":"Retrieves details for a specific guest session by ID. Directly connected to the `discussionboard_guests` table. Used in session analytics, guest conversion, and admin auditing. Enforces RBAC: only admins may retrieve guest session details. Returns only normalized provided fields for the guest session. Used in session management analytics and guest tracking.","description":"Fetches normalized details for a guest session in `discussionboard_guests` identified by the session's unique ID. Data includes session token and timestamp. Used to monitor guest usage patterns and for compliance analytics. Permission errors are returned if unauthorized or not found.","summary":"Get one guest session detail (discussionboard_guests table).","parameters":[{"name":"id","description":"ID of guest session to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Normalized guest session object.","typeName":"IDiscussionboardGuest"},"authorizationRoles":["admin"],"path":"/discussionboard/guests/{id}","method":"get"},{"specification":"Creates a new guest session record, fulfilling guest user onboarding requirements. Maps to the `discussionboard_guests` table. Used to track anonymous sessions for analytics, session management, and up-selling conversion. The request body contains the information about the guest session (token, creation timestamp). Only available to onboarding service or non-auth guests.","description":"Registers a new guest session in `discussionboard_guests`. Request must include valid session token and creation timestamp. Used to track anonymous visitors on the discussion board, supporting conversion and analytics. On success, returns full, normalized, created guest session details. Error handling covers invalid tokens or data.","summary":"Register (create) new guest session (discussionboard_guests table).","parameters":[],"requestBody":{"description":"Guest session object creation details (token, created_at).","typeName":"IDiscussionboardGuest.ICreate"},"responseBody":{"description":"Created guest session object.","typeName":"IDiscussionboardGuest"},"authorizationRoles":null,"path":"/discussionboard/guests","method":"post"}],"completed":36,"total":180,"step":0,"created_at":"2025-07-22T13:34:33.026Z"},"tokenUsage":{"facade":{"aggregate":{"total":166544,"input":{"total":155299,"cached":21120},"output":{"total":11245,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":166544,"input":{"total":155299,"cached":21120},"output":{"total":11245,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":166544,"input":{"total":155299,"cached":21120},"output":{"total":11245,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":166544,"input":{"total":155299,"cached":21120},"output":{"total":11245,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Get a single comment like/dislike by its unique identifier. This operation fetches full information for a specific like or dislike event by id. The entity is based on the discussionboard_comment_likes table in the Prisma schema, which stores every like or dislike event for a comment, keyed by a UUID. This is useful for getting a user's reaction to a particular comment, analytics, or for moderation reviews.\n\nSecurity and authorization: Access control rules should be enforced based on role (e.g., only the acting user/admin/moderator can view details of a reaction in certain moderation contexts). Tied to logging requirements for audit trails in moderation.\n\nThe related table (discussionboard_comment_likes) is fully normalized for auditing and anti-abuse checks. This endpoint is essential for inspecting the like/dislike state, user, and timestamp for analytics, abuse detection, or moderation review. If the like/dislike identified by {id} does not exist, returns 404. Errors are returned in standard API error format.","description":"Get a single comment like/dislike by its unique ID. This endpoint directly leverages the discussionboard_comment_likes table, which applies to individual user reactions (like/dislike) to comments. Only atomic per-event data is stored; no aggregated or calculated fields are included. Access is typically restricted to the user performing the like or platform moderators/admins in audit/abuse review scenarios. Returns all attributes of the comment like/dislike event, including the type (like/dislike), timestamp, and user identifiers. Associated for audit and reporting in moderation workflows. Related APIs: POST, PUT, DELETE for comment like/dislike management.","summary":"Get a comment like/dislike event by its ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Target comment like/dislike's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the comment like/dislike event for given id.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/commentLikes/{id}","method":"get"},{"specification":"Create a like or dislike for a comment. This operation records an engagement event (like or dislike) by a user on a specific comment, by inserting a row into the discussionboard_comment_likes table. It is based on the requirements for engagement analytics, abuse prevention, and audit logging. Each like/dislike is atomic; only one like/dislike per user per comment is allowed (enforced by unique key). \n\nSecurity and validation: Must check authentication, ensure user is allowed to react to the comment, and enforce anti-abuse (rate limiting, duplicate detection). On success, returns the newly created reaction event. On conflict (attempt to react multiple times), returns standard error. Write events may be logged for moderation/audit, in alignment with audit/trail requirements. Related to like/dislike aggregate recalculation routines.","description":"Create a new like or dislike event associated with a comment. Uses the discussionboard_comment_likes table to ensure normalized event capture for engagement analytics and anti-abuse. Must validate the user has permission and hasn't already reacted to the target comment. Typical errors: duplicate entry, unauthorized, comment not found. Auditable; logged for abuse review. Returns the created entity including event id, type, user, and timestamp.","summary":"Create a like/dislike for a comment (discussionboard_comment_likes).","parameters":[],"requestBody":{"description":"Data for creating comment like/dislike (user, comment id, is_like).","typeName":"IDiscussionboardCommentLike.ICreate"},"responseBody":{"description":"Created comment like/dislike event info.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/commentLikes","method":"post"},{"specification":"Update an existing like/dislike event for a comment by event id. This allows correcting or toggling a reaction (e.g., turning a like into a dislike) by updating the discussionboard_comment_likes record. Based on the auditability and engagement analytics needs: sometimes, users may be able to change their reaction, or admins/moderators update a reaction for abuse review/resolution. \n\nSecurity: Only the owner (reacting user) or privileged roles (mod/admin) can update. Must audit all changes in logs. Fails with 404 if id not found; errors for forbidden operations are returned.\n\nBusiness logic: Only is_like can typically be changed. All updates logged for compliance.","description":"Update an existing comment like/dislike event. Reflection of changes (e.g., toggling like/dislike or updating by admin) is stored in the discussionboard_comment_likes table. Only atomic (per-event) data is modified. Access is typically restricted to original user, mods, or admins for compliance/audit. Event is logged. Access and error handling follow platform RBAC policies.","summary":"Update a comment like/dislike event by id (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Target comment like/dislike's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for comment like/dislike event (only permitted fields modifiable).","typeName":"IDiscussionboardCommentLike.IUpdate"},"responseBody":{"description":"Updated comment like/dislike event record.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/commentLikes/{id}","method":"put"},{"specification":"Delete a like or dislike event for a comment by its unique identifier. This operation allows a user (or an admin/moderator) to remove an existing like/dislike for a specific comment, deleting the record in the discussionboard_comment_likes table.\n\nBusiness logic: A user can only have one reaction per comment; deleting means they neither like nor dislike it. Action is also available to moderators/admins for abuse mitigation. Deletions are logged for audit purposes; may affect aggregate tallies. Fails with 404 if record doesn't exist. Returns success confirmation or error.","description":"Remove a comment like/dislike event. Deletion is performed on the discussionboard_comment_likes table, which maintains normalized engagement data for analytics, abuse, and moderation. All delete events are logged for auditing and compliance. Only the owner or platform staff can perform the operation. Related operations: POST (create), GET (fetch), PUT (update).","summary":"Delete a comment like/dislike event by id (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Target comment like/dislike's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion for comment like/dislike event.","typeName":"IDiscussionboardCommentLike.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/commentLikes/{id}","method":"delete"},{"specification":"List and search through comment edit events. Supports filtering by editor, comment id, date range, and pagination. Implements the auditability and edit log requirements for comments: every time a comment is edited, an event is recorded in discussionboard_comment_edits, detailing the editor, edit summary, and timestamp. This endpoint is essential for moderation workflows, transparency, and user edit histories.\n\nBusiness logic includes permission checks (e.g., only show user's own edits unless admin/moderator). Returns paginated edit events matching filters. Related to GET/POST/PUT/DELETE endpoints for individual comment edit logs.","description":"Retrieve a paginated list of comment edit log events, using filters for editor, comment, date/time, and pagination. Information comes from discussionboard_comment_edits, which holds normalized edit trail events for each comment. Audit logs are important for moderation, transparency, and user accountability. Pagination and search parameters are required for scalability. Related endpoints: GET/PUT/POST/DELETE for individual comment edit logs.","summary":"Search and paginate comment edit log events (discussionboard_comment_edits).","parameters":[],"requestBody":{"description":"Search/filter and paging parameters for comment edits list.","typeName":"IDiscussionboardCommentEdit.IRequest"},"responseBody":{"description":"Paginated and filtered comment edit log results.","typeName":"IPageIDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits","method":"patch"},{"specification":"Get a single comment edit event by its unique identifier. This fetches the full audit trail event (who edited which comment, summary/reason, and edit time) for specific review or moderation review scenarios. Based on the requirements for transparency and full edit trails for accountability. Used in moderation UIs and when seeing comment edit history.\n\nRBAC: Only authorized users can fetch details (editor, admins/moderators).\n\nReturns 404 if not found.","description":"Retrieve a specific comment edit log event by event id. The discussionboard_comment_edits table provides full audit log for comment edits, supporting moderation, dispute resolution, and user-initiated edit history queries.","summary":"Get a comment edit event by id (discussionboard_comment_edits).","parameters":[{"name":"id","description":"Target comment edit's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment edit log event details.","typeName":"IDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits/{id}","method":"get"},{"specification":"Create a comment edit log event. Implements the auditability requirement by explicitly recording every edit to a comment, including summary, who performed the edit, and timestamp. Each row in discussionboard_comment_edits is an immutable record of that edit event. Typically triggered when a user or moderator edits a comment (not an in-place update of the comment body).\n\nSecurity: Only the editor (user/mod/admin) can create; event is added to audit logs.\n\nThis endpoint supports compliance with edit history requirements, transparency, and moderation accountability. Related endpoints are PATCH (list), GET/PUT/DELETE (individual event management).","description":"Record a comment edit event (user/mod/admin performed). This creates a new row in the discussionboard_comment_edits table, which is a normalized per-edit event log. Only legitimate edits should trigger this endpoint (application logic must ensure this). The event records the comment, who edited, timestamp, and edit reason/summary (if provided).","summary":"Create a comment edit log event (discussionboard_comment_edits).","parameters":[],"requestBody":{"description":"Data for new comment edit event (comment, editor, timestamp, etc).","typeName":"IDiscussionboardCommentEdit.ICreate"},"responseBody":{"description":"Created comment edit event log.","typeName":"IDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits","method":"post"},{"specification":"Update a comment edit log event. Rarely used; in typical audit models, edits to edit events are not allowed, but exceptions may be made for admin correction (e.g., updating a mistaken summary) or regulatory compliance. Supports changing permitted fields only (e.g., edit_summary). Based on discussionboard_comment_edits. All changes should be logged for traceability.\n\nRBAC: Only privileged users may update historical edit logs.\n\nReturns 404 if not found.","description":"Update a comment edit log event (e.g., correct summary or annotation). Modifies a record in discussionboard_comment_edits; only a restricted set of fields are modifiable. Full trace of change must be recorded in audit logs as per compliance. Not used for main comment body edits, only for log event updates.","summary":"Update a comment edit event by id (discussionboard_comment_edits).","parameters":[{"name":"id","description":"Target comment edit's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Corrections for edit log event (permitted fields only).","typeName":"IDiscussionboardCommentEdit.IUpdate"},"responseBody":{"description":"Updated comment edit event log.","typeName":"IDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits/{id}","method":"put"},{"specification":"Delete a comment edit log event for rollback or audit correction. In most models, edit logs should not be deleted except in rare moderation or compliance-driven workflows (e.g., content removal for legal reasons). Business logic must restrict who can perform deletions. Deletion is tracked in moderation logs per auditing requirements. Related to discussionboard_comment_edits table.\n\nReturns success or error (e.g., not found, forbidden).","description":"Remove a comment edit event from the audit log (typically only for privileged roles in rare cases). Deletion occurs in the discussionboard_comment_edits table; all such actions must be logged for audit and compliance. Related endpoints: PATCH (list), GET/POST/PUT (event management).","summary":"Delete a comment edit event by id (discussionboard_comment_edits).","parameters":[{"name":"id","description":"Target comment edit's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of comment edit event deletion.","typeName":"IDiscussionboardCommentEdit.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/commentEdits/{id}","method":"delete"},{"specification":"List and search through comment view tracking events for analytics, anti-abuse, and audit. Important for reporting unique viewers, detecting engagement trends, and supporting rate-limit/abuse enforcement. Implements comment views analytic requirements: each time a comment is viewed, a row is recorded in discussionboard_comment_views, referencing comment, user, session, and time. This endpoint supports pagination, filtering, and search (e.g., by comment id, user id, date, etc). Result is used especially by moderation and analytics dashboards.\n\nBusiness logic requires validation and rate-limiting of access. Pagination for scalability. Related to GET/POST/PUT/DELETE endpoints for individual view records.","description":"Retrieve a paginated/searchable list of comment view tracking events through discussionboard_comment_views. Supports filtering by comment, user/session, time, and is essential for anti-abuse measures, analytics, and engagement reporting. Permission rules may limit access to owner, mod, or admin. Returns paged view events. Related endpoints: GET, POST, PUT, DELETE for individual records.","summary":"Search and paginate comment view tracking events (discussionboard_comment_views).","parameters":[],"requestBody":{"description":"Search/filter and paging parameters for comment views list.","typeName":"IDiscussionboardCommentView.IRequest"},"responseBody":{"description":"Paginated and filtered comment view tracking events.","typeName":"IPageIDiscussionboardCommentView"},"authorizationRoles":null,"path":"/discussionboard/commentViews","method":"patch"},{"specification":"Get a single comment view tracking event by its unique identifier for analytics, abuse detection, and detailed audit/workflow review. Fetches an atomic view record from discussionboard_comment_views, returning viewer, comment, session, and timestamp. Key for engagement analysis and dispute resolution.\n\nRBAC rules may control data access; expect 404 if not found or forbidden if unauthorized.\n\nLinked to analytics and analytics/detail dashboards for moderation and reporting.","description":"Get a single comment view tracking event by id from discussionboard_comment_views. All tracking information is atomic (per-viewer per-comment per-session per-timestamp), supporting compliance, analytics, and moderation. Returns view event details or error if not found.","summary":"Get a comment view tracking event by id (discussionboard_comment_views).","parameters":[{"name":"id","description":"Target comment view's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment view event tracking details.","typeName":"IDiscussionboardCommentView"},"authorizationRoles":null,"path":"/discussionboard/commentViews/{id}","method":"get"},{"specification":"Create a comment view tracking event - atomically records that a user (or guest/session) has viewed a specific comment. Engages the discussionboard_comment_views table for analytics, abuse prevention, and engagement tracking as per requirements. Payload specifies comment id, user/session, and view time. Rate limiting and permission checks should be enforced (e.g., prevent abuse/scripted traffic). Returns the atomic tracking event for confirmation. Related endpoints: PATCH (list), GET/PUT/DELETE (single-record operations); creation is idempotent per (user/session, comment, time).","description":"Create an atomic record of a comment view event for analytics and anti-abuse. Uses discussionboard_comment_views to track unique views by user/session/time, supporting dashboards and audit workflows. Payload specifies commenting context, viewer identity, and meta as needed. Permission and abuse checks required. Related to searching/listing endpoints for aggregation.","summary":"Create a comment view tracking event (discussionboard_comment_views).","parameters":[],"requestBody":{"description":"Data for creating comment view event (comment id, user id/session, timestamp).","typeName":"IDiscussionboardCommentView.ICreate"},"responseBody":{"description":"Created comment view event record.","typeName":"IDiscussionboardCommentView"},"authorizationRoles":null,"path":"/discussionboard/commentViews","method":"post"}],"completed":48,"total":180,"step":0,"created_at":"2025-07-22T13:34:33.920Z"},"tokenUsage":{"facade":{"aggregate":{"total":209718,"input":{"total":194845,"cached":21120},"output":{"total":14873,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":209718,"input":{"total":194845,"cached":21120},"output":{"total":14873,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":209718,"input":{"total":194845,"cached":21120},"output":{"total":14873,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":209718,"input":{"total":194845,"cached":21120},"output":{"total":14873,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Lists and searches external authentication associations for users. This endpoint allows for retrieval of multiple userAuths records based on complex criteria. Supports searching by user, provider, and date ranges. Implements RBAC restrictions for access based on user context. Prisma DB table: discussionboard_user_auths.","description":"The PATCH /discussionboard/userAuths endpoint enables advanced searching and listing of external authentication (federated login, SSO) records linked to member accounts. It supports searching on user ID, auth provider, and various date/time filters, with pagination and sorting options for administrative or user audit views. Security is enforced via RBAC: members may only query their own auth records; admins may query any. The endpoint is essential for security audits, SSO account management, and user profile integration. Error handling includes permission denials for unauthorized access and detailed validation of search parameters. This endpoint is logically paired with create, update, and delete operations for full CRUD coverage of discussionboard_user_auths records.","summary":"Lists and searches userAuths (discussionboard_user_auths table) records using filters with pagination.","parameters":[],"requestBody":{"description":"Filter, search, and pagination input for querying userAuths.","typeName":"IDiscussionboardUserAuth.IRequest"},"responseBody":{"description":"Paginated userAuths search results.","typeName":"IPageIDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths","method":"patch"},{"specification":"Gets a single user external authentication (SSO, OAuth) record by its unique ID. Used across login flows and for account linking/unlinking. Prisma DB: discussionboard_user_auths.","description":"The GET /discussionboard/userAuths/{id} endpoint retrieves detailed information about a particular external authentication association for a user. It is typically used to review SSO/OAuth connection details or when automating account linking/unlinking procedures. Security enforcement ensures that only the authenticated user or trusted admin/moderator may retrieve details. Returns full details per the discussionboard_user_auths schema. Relevant validation errors include not found and unauthorized access. Often used in conjunction with create, update, or delete userAuth operations for federation management.","summary":"Retrieves a single userAuths (discussionboard_user_auths table) by ID.","parameters":[{"name":"id","description":"Target userAuth record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed userAuth record info.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths/{id}","method":"get"},{"specification":"Creates a new external authentication (SSO, OAuth, etc) record for a member account. Used during federated login linking or new account creation. Prisma DB: discussionboard_user_auths.","description":"The POST /discussionboard/userAuths endpoint is called when a member account wishes to link a new external authentication (such as Google, Facebook, or SSO). It securely creates a new record relating the member and external provider, requiring all relevant provider identification details and adhering to RBAC (member may only link to own account). This endpoint strictly validates uniqueness and required fields (e.g., provider, provider_user_id). Error responses cover duplicate prevention and invalid provider scenarios. Successful execution results in the new userAuth record for the member. Closely related to unlink and list endpoints for account federation management.","summary":"Creates a new userAuth (discussionboard_user_auths table) record.","parameters":[],"requestBody":{"description":"Creation information for new userAuth.","typeName":"IDiscussionboardUserAuth.ICreate"},"responseBody":{"description":"Created userAuth record.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths","method":"post"},{"specification":"Updates an existing external authentication association (SSO/OAuth record) for a user. Supports fields such as revocation. Prisma DB: discussionboard_user_auths.","description":"The PUT /discussionboard/userAuths/{id} endpoint allows for updating information associated with a federated login (external auth) record for a member account. Common use cases include revoking a linked external login, updating linked provider metadata, or syncing provider identity details. Enforces ownership and admin RBAC, requiring full update body as per discussionboard_user_auths schema. Validates ID and input; handles not found and unauthorized scenarios. Typically paired with list, create, and delete endpoints in auth management flows.","summary":"Updates an existing userAuths (discussionboard_user_auths table) record by ID.","parameters":[{"name":"id","description":"Target userAuth record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for userAuth record.","typeName":"IDiscussionboardUserAuth.IUpdate"},"responseBody":{"description":"Updated userAuth record.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths/{id}","method":"put"},{"specification":"Deletes (revokes/unlinks) an external authentication (SSO, OAuth, etc) for a given user. Used for un-linking federated logins. Prisma DB: discussionboard_user_auths.","description":"The DELETE /discussionboard/userAuths/{id} endpoint unlinks or permanently removes an external authentication provider association from a member account. Enforces permissions such that only the owner member or privileged admin can perform the operation. Returns information about the deleted userAuth record, or an error if the record doesn’t exist or permission is denied. Used in account management and security workflows. Often paired with creation and listing endpoints for account federation tasks.","summary":"Deletes/unlinks a userAuths (discussionboard_user_auths table) record by ID.","parameters":[{"name":"id","description":"Target userAuth record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted userAuth record info.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths/{id}","method":"delete"},{"specification":"Lists and searches login sessions for members. Enables access review and session management. Prisma DB: discussionboard_user_sessions.","description":"The PATCH /discussionboard/userSessions endpoint allows members and admins to search, list, and audit active and historical login sessions. Provides robust filtering options such as user ID, session creation, last activity, and revoked status. Enforces RBAC: normal members can only list their own sessions, admins can audit all. Used for session management/security functions and audit trails, in conjunction with create/revoke endpoints.","summary":"Lists and searches userSessions (discussionboard_user_sessions table) records with pagination/filtering.","parameters":[],"requestBody":{"description":"Request body containing filters and search parameters for session querying.","typeName":"IDiscussionboardUserSession.IRequest"},"responseBody":{"description":"Paginated userSessions results.","typeName":"IPageIDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions","method":"patch"},{"specification":"Retrieves the details of a login session for a member. Used by session managers and security routines. Prisma DB: discussionboard_user_sessions.","description":"The GET /discussionboard/userSessions/{id} endpoint retrieves information about a single session record, including timestamps, token, and revocation status. RBAC is strictly enforced to allow only owners or admins to retrieve sessions. Used for client device lists, logout management, or security monitoring. Returns the complete session object as per schema or error if not found/authorized.","summary":"Retrieves a single userSession (discussionboard_user_sessions table) by ID.","parameters":[{"name":"id","description":"Session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed userSession info.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions/{id}","method":"get"},{"specification":"Creates a new login session record. Used on successful authentication. Prisma DB: discussionboard_user_sessions.","description":"The POST /discussionboard/userSessions endpoint registers a new session for a user, upon successful authentication (login). It securely links the new session to the user ID, creates session credentials (token), timestamps, and expiry attributes. RBAC/validation ensure only sessions for authenticated users can be created. Returns the created session info, or validation error for incorrect/duplicate details. This operation is foundational for login systems and session management flows.","summary":"Creates a new userSession (discussionboard_user_sessions table) record.","parameters":[],"requestBody":{"description":"Session creation info upon login.","typeName":"IDiscussionboardUserSession.ICreate"},"responseBody":{"description":"Created session record.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions","method":"post"},{"specification":"Updates an existing session record (e.g., extend expiry, revoke). Used by session management logic. Prisma DB: discussionboard_user_sessions.","description":"The PUT /discussionboard/userSessions/{id} endpoint allows updating properties of a login session—most commonly, expiring/revoking tokens, updating expiry times, or altering session metadata. Only session owners or admins may update sessions. Ensures input data follows request schema and session ownership. Returns the updated session state or error. Typically part of login/logout and device/session control workflows.","summary":"Updates an existing userSession (discussionboard_user_sessions table) by ID.","parameters":[{"name":"id","description":"Session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update on the session record.","typeName":"IDiscussionboardUserSession.IUpdate"},"responseBody":{"description":"Updated session record.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions/{id}","method":"put"},{"specification":"Deletes/revokes a session entry (force logout, end session). Used by security and member logout flows. Prisma DB: discussionboard_user_sessions.","description":"The DELETE /discussionboard/userSessions/{id} endpoint terminates an active login session, typically used for forced logouts or security policy enforcement. RBAC ensures only the session owner or privileged admin can delete a session. The session record is deleted or flagged as revoked, and info about the terminated session is returned. Used in conjunction with create/list endpoints for full session lifecycle management.","summary":"Deletes (ends) a userSession (discussionboard_user_sessions table) by ID.","parameters":[{"name":"id","description":"Session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted session record info.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions/{id}","method":"delete"},{"specification":"Lists and searches discussion board posts with advanced filters, pagination, and sorting (by board, author, date, etc). Prisma DB: discussionboard_posts.","description":"The PATCH /discussionboard/posts endpoint retrieves a list of discussion board posts with support for advanced filtering (by board, author, keyword, date range), full pagination, and flexible sorting. It is optimized for UI post feeds and admin moderation panels. Security and RBAC allow public post listing for all users, while detailed controls may restrict hidden/archived content. Validation ensures robust filtering and prevents resource exhaustion on large queries. Closely related to create, update, delete, and detail post endpoints for comprehensive board functionality.","summary":"Lists and searches posts (discussionboard_posts table) records with filtering and paging.","parameters":[],"requestBody":{"description":"Filtering and search request body for posts listing.","typeName":"IDiscussionboardPost.IRequest"},"responseBody":{"description":"Paginated list of post objects and associated paging info.","typeName":"IPageIDiscussionboardPost"},"authorizationRoles":null,"path":"/discussionboard/posts","method":"patch"},{"specification":"Retrieves a single post, including full content and associated metadata. Used for post view, detail page rendering. Prisma DB: discussionboard_posts.","description":"The GET /discussionboard/posts/{id} endpoint fetches all information for a single post, including title, body, author, timestamps, and potentially related engagement metrics (likes, views). Access is granted for public posts, or via RBAC for private/archived posts. Ensures not found and permission errors are handled according to content policy. Tightly coupled to comment retrieval, edit history, and moderation endpoints for holistic post management.","summary":"Retrieves a single post (discussionboard_posts table) by ID.","parameters":[{"name":"id","description":"Post record UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post object and metadata.","typeName":"IDiscussionboardPost"},"authorizationRoles":null,"path":"/discussionboard/posts/{id}","method":"get"}],"completed":60,"total":180,"step":0,"created_at":"2025-07-22T13:34:34.291Z"},"tokenUsage":{"facade":{"aggregate":{"total":252012,"input":{"total":234389,"cached":21120},"output":{"total":17623,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":252012,"input":{"total":234389,"cached":21120},"output":{"total":17623,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":252012,"input":{"total":234389,"cached":21120},"output":{"total":17623,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":252012,"input":{"total":234389,"cached":21120},"output":{"total":17623,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This operation updates the details of a specific guest session record in the discussion board platform. It targets the 'discussionboard_guests' table, which logs guest user sessions for analytics and restrictions. The API allows for the management or alteration of guest session information such as session tokens, creation timestamps, or for linking guests to member records if relevant. Use cases include enforcing guest session expiry, analytics updates, or administrative adjustments. The endpoint is intended for admin or system actions, not general public use.","description":"This API call updates a specific guest session record in the 'discussionboard_guests' table by its unique ID. The endpoint is primarily for administrative or backend use, as guest sessions are typically managed automatically.\n\nGuest session management is essential for accurate tracking and compliance with platform security standards. The record includes data such as session tokens and creation timestamps. It helps manage guest-to-member upgrade flows and identifies when a guest browses the platform. This endpoint may be involved during guest-to-member conversion (e.g., upon registration) or when cleaning up expired guest sessions.\n\nValidation ensures the ID is a valid UUID and that only fields permissible for update are altered. Attempting to update a guest that does not exist or where the session is already expired should return an appropriate error. Proper logging and permission checks are required, and only authorized staff or automated processes should be allowed to access this endpoint.","summary":"Updates a guest session record by ID in the discussionboard_guests table.","parameters":[{"name":"id","description":"Target guest's unique session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the guest session. Only fields such as session_token or session expiry are typically altered.","typeName":"IDiscussionboardGuest.IUpdate"},"responseBody":{"description":"The updated guest session record.","typeName":"IDiscussionboardGuest"},"authorizationRoles":["admin"],"path":"/discussionboard/guests/{id}","method":"put"},{"specification":"This operation deletes a specific guest session record from the 'discussionboard_guests' table using its unique ID. It supports administrative actions such as cleaning up expired sessions, enforcing privacy regulations, or disabling guest tracking as required. Only authorized personnel or backend services should execute this. The operation impacts analytics and security tracking.","description":"This API call removes a guest session record based on its ID in the 'discussionboard_guests' table, fulfilling the need for session cleanup and compliance with data retention policies.\n\nDeleting a guest session is typically reserved for administrative scenarios, such as purging old sessions, GDPR compliance, or as part of a guest-to-member lifecycle management. The call ensures the specified session exists and is eligible for deletion; attempts to delete non-existent or active sessions must be handled gracefully. Only users with elevated privileges (administrators or automated system services) are allowed to perform this operation, and action logs must be maintained for audit and traceability.","summary":"Deletes a guest session record by ID from the discussionboard_guests table.","parameters":[{"name":"id","description":"Target guest's unique session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful guest session deletion.","typeName":"IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/guests/{id}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of user profiles from 'discussionboard_user_profiles'. Used for admin/member searches, filtering by display name or attributes. Supports role-based access - member listing own, admin finding any profile.","description":"This PATCH endpoint fetches a list of user profiles with support for pagination, filtering, and search—implementing requirements for discoverability and profile management. The endpoint operates on the 'discussionboard_user_profiles' table, which separates users’ extended details from core member records.\n\nAdmins and moderators may search all user profiles by display name, registration date, or other metadata. Members may only search or list their own profile. The endpoint handles access control and ensures only allowed data is returned respecting privacy and user permissions. Relevant validations include authorized query parameters, page size limits, and security audits for bulk access.","summary":"Retrieves a filtered or paginated list of user profiles from 'discussionboard_user_profiles'.","parameters":[],"requestBody":{"description":"Filtering, pagination, and search criteria for user profiles.","typeName":"IPageDiscussionboardUserProfile.IRequest"},"responseBody":{"description":"Paginated list of user profiles.","typeName":"IPageDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles","method":"patch"},{"specification":"Retrieves public or private details of a specific user profile, such as display name, bio, avatar, etc. Implements user journey requirements and privacy controls, operates on 'discussionboard_user_profiles'. Access may be restricted depending on the querying member’s role.","description":"This GET endpoint returns the details for the specified user profile by profile ID, addressing the need for user customization and discoverability. The operation pulls from 'discussionboard_user_profiles', returning bio, display name, avatar, and timestamps.\n\nAdmins can query any user profile for moderation or support; members and guests may only access profiles that are public or belong to themselves, depending on platform privacy settings.\n\nProper access control ensures privacy restrictions are upheld according to platform policies and user preferences. Error handling detects invalid or unauthorized access, nonexistent profile IDs, and logs all access for audit/security purposes.","summary":"Gets details of a user profile by ID from 'discussionboard_user_profiles'.","parameters":[{"name":"id","description":"User profile's unique ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Fetched user profile details.","typeName":"IDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles/{id}","method":"get"},{"specification":"Creates a new user profile record in 'discussionboard_user_profiles'. This enables members to customize their visibility with display names, bios, or avatars. Typically used at initial member registration or during onboarding.","description":"This POST endpoint allows the creation of a new user profile, writing to 'discussionboard_user_profiles'. Members can set optional display names, biographical text, and avatars distinct from their registration username, allowing more expressive social presence.\n\nPlatform rules constrain profile creation: each member may have only one profile. Fields are validated for appropriate length, allowed image formats, etc. Admins and moderators may create profiles for onboarding or support flows. Sensitive actions are logged for security, and attempts to create multiple profiles for the same member are rejected.\n\nProfile creation is required during self-registration but may also be performed by administrators for automation or account recovery.","summary":"Creates a new user profile record in 'discussionboard_user_profiles'.","parameters":[],"requestBody":{"description":"Data for creating a user profile (display name, bio, avatar URI, etc.).","typeName":"IDiscussionboardUserProfile.ICreate"},"responseBody":{"description":"The new user profile record created.","typeName":"IDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles","method":"post"},{"specification":"Updates details for a specific user profile in 'discussionboard_user_profiles', such as changing display name, bio, or avatar. Supports user self-customization and admin moderation functionality.","description":"This PUT endpoint updates a user profile by its ID, writing changes to 'discussionboard_user_profiles'. Members may edit their own profile; admins and moderators may change any profile for moderation/support.\n\nRequires authorization and validation to ensure only permitted fields are modified and members cannot edit others’ profiles unless privileged. Fields such as display name, bio, and avatar_uri are accepted. Platform limits and business rules regarding unique display names, allowed content, and privacy are enforced. Proper audit trail maintained for all changes.","summary":"Updates a user profile by ID in 'discussionboard_user_profiles'.","parameters":[{"name":"id","description":"Unique ID of the user profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user profile.","typeName":"IDiscussionboardUserProfile.IUpdate"},"responseBody":{"description":"Updated user profile details.","typeName":"IDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles/{id}","method":"put"},{"specification":"Deletes a user profile from 'discussionboard_user_profiles' by profile ID. Implements moderation and account termination requirements, ensuring profile information is removed or anonymized upon request or policy.","description":"This DELETE endpoint removes a user profile by its ID, affecting the 'discussionboard_user_profiles' table. The primary use-case is member-requested profile deletion (account closure) or as a moderation penalty.\n\nAppropriate access control ensures only profile owners or platform administrators (for moderation/compliance) can perform deletions. The cascade/cleanup of profile-associated data and implications for privacy policies are managed transparently. Soft-deletion, anonymization, or hard-deletion strategies will be used based on platform rules and compliance needs. Success is reported with confirmation.","summary":"Deletes a user profile by ID from 'discussionboard_user_profiles'.","parameters":[{"name":"id","description":"Unique ID of the user profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of user profile deletion.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/userProfiles/{id}","method":"delete"},{"specification":"Returns a filtered, paginated list of user emails from 'discussionboard_user_emails'. Enables admins to review, search, or audit registered emails or for members to view their email records. Filtering may include verification status, member ID, or date added.","description":"This PATCH endpoint queries user emails in the 'discussionboard_user_emails' table with support for advanced search and pagination, supporting platform requirements for user management and compliance.\n\nAdmins use this for email management, audit, notification targeting, or communication compliance. Filtering by member ID, verification status, email string, or add date is supported. Members may only fetch their own records. Protects sensitive data by limiting exposures and requires strict role-based access and property selection based on privacy policies.","summary":"Retrieves a paginated or filtered list of user emails from 'discussionboard_user_emails'.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination options for listing user emails.","typeName":"IPageDiscussionboardUserEmail.IRequest"},"responseBody":{"description":"Paginated user email list.","typeName":"IPageDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails","method":"patch"},{"specification":"Fetches the details of a specific email record in 'discussionboard_user_emails', such as for audit, verification, or user notification management. Includes privacy and access enforcement.","description":"This GET endpoint retrieves a user email record by its unique ID from 'discussionboard_user_emails'. Use-cases include email verification status checks, audit traces, or support for notification delivery troubleshooting. Only admins or the email owner may access sensitive information; access checks are mandatory.\n\nResponse includes email address, verification flags, association with user account, timestamps for when added and (if applicable) verified. Errors for access denial or record not found are handled according to platform security policies and audit is maintained for all such queries.","summary":"Gets details of a user email record by ID from 'discussionboard_user_emails'.","parameters":[{"name":"id","description":"Unique ID of the email record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The user email record details.","typeName":"IDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails/{id}","method":"get"},{"specification":"Creates a new user email record for a member in 'discussionboard_user_emails', as used in registration, verification, or for adding recovery/notification contacts. Supports single or multiple emails per account (per policy).","description":"This POST endpoint creates a user email record in 'discussionboard_user_emails', fulfilling registration, notification, or secondary contact addition requirements.\n\nMembers may register multiple emails for account recovery and communication flexibility, subject to a maximum (enforced by extra validation). Email format validation, uniqueness, and anti-abuse checks are implemented. After creation, the verification workflow typically starts. Platform also supports admins adding or correcting user emails as required for account recovery or audit. Attempting to add a duplicate or malformed email should fail with clear validation errors.","summary":"Creates a user email record for a member in 'discussionboard_user_emails'.","parameters":[],"requestBody":{"description":"User email data (email string, member reference, is_primary/verified flags).","typeName":"IDiscussionboardUserEmail.ICreate"},"responseBody":{"description":"The created user email record.","typeName":"IDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails","method":"post"},{"specification":"Updates a user email record by ID in 'discussionboard_user_emails'. Enables changing verification status or updating associated metadata per policy, for audit, notification or admin support.","description":"This PUT endpoint updates a user email record by ID, typically modifying verification, primary state, or email string correction (when allowed). It serves both self-service (changing contact) and admin-driven update scenarios.\n\nProper validation and access control are required, including constraint checks on duplicates, allowed updates, and ownership. Actions are logged for audit. Unverified emails may be corrected; verified emails may require stricter update policies per platform rules. Failure for ownership or validation triggers error responses.","summary":"Updates a user email record by ID in 'discussionboard_user_emails'.","parameters":[{"name":"id","description":"Unique ID of the user email record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user email record.","typeName":"IDiscussionboardUserEmail.IUpdate"},"responseBody":{"description":"Updated email record details.","typeName":"IDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails/{id}","method":"put"},{"specification":"Deletes a user email record by ID from 'discussionboard_user_emails'. Used for removing contact information, complying with user privacy requests, or admin-driven cleanup during account deactivation.","description":"This DELETE endpoint deletes a user email record from 'discussionboard_user_emails' by its unique ID. The operation is needed for account privacy management, email rotation, or regulatory compliance.\n\nThe member or platform admin may request deletion. Rules ensuring at least one verified contact remains may apply. Deletion is logged with action metadata. Soft or hard deletion behavior is determined by platform policy; confirmation or error upon completion is always returned.","summary":"Deletes a user email record by ID from 'discussionboard_user_emails'.","parameters":[{"name":"id","description":"Unique ID of the email record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of user email record deletion.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/userEmails/{id}","method":"delete"}],"completed":72,"total":180,"step":0,"created_at":"2025-07-22T13:34:35.199Z"},"tokenUsage":{"facade":{"aggregate":{"total":294783,"input":{"total":273934,"cached":21120},"output":{"total":20849,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":294783,"input":{"total":273934,"cached":21120},"output":{"total":20849,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":294783,"input":{"total":273934,"cached":21120},"output":{"total":20849,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":294783,"input":{"total":273934,"cached":21120},"output":{"total":20849,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements the removal of a like/dislike entry for a discussion board post by its unique identifier. This operation is used by members and moderators to revoke their reaction to a post. The operation enforces permissions so only the user who originally set the like/dislike or an admin/moderator with appropriate authority may remove it. A successful call deletes the corresponding record from the 'discussionboard_post_likes' table. If the entry does not exist, a 404 should be returned. Follows 3NF, does not affect aggregated counts directly (those are handled elsewhere).","description":"Deletes a like or dislike associated with a post from the 'discussionboard_post_likes' schema. \n\nThe endpoint requires the like/dislike's unique ID as a path parameter and will verify whether the current user has permission to delete the record (either as the original creator or with elevated administrative rights). Only existing post-like records may be deleted; deleting a non-existent ID returns a 404 Not Found.\n\nThis implements the feature where users can retract a like/dislike, as well as allowing moderators/admins to clear reactions as part of user moderation or abuse mitigation. The operation does not recalculate aggregate like/dislike counts immediately but triggers downstream updates by event. Audit trails are automatically created via separate logging.\n\nError handling will return 403 Forbidden if a user without correct permissions attempts deletion, and 422 if provided ID is not a valid UUID.\n\nSee also: POST for like/dislike creation, PATCH for like/dislike search/filtering.\n","summary":"Remove a like/dislike for a post (discussionboard_post_likes) by ID.","parameters":[{"name":"id","description":"Unique identifier of the like/dislike entry to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/postLikes/{id}","method":"delete"},{"specification":"Fetches a paginated and optionally filtered list of post view records from the 'discussionboard_post_views' table. Used by admins and analysts to audit or analyze post viewership and engagement. Supports searching by post, user, session, or viewed_at window. Typically restricted to admin-level or analytics endpoints due to sensitive user/session data.","description":"Queries the discussionboard_post_views entities, returning a paginated list with filter and search capabilities. \n\nAccepted filters may include post_id, user_id (optionally null for guests), session_id, and viewed_at datetime window. Supports search, sort, and pagination to allow detailed audit and reporting scenarios. The endpoint is used in analytics dashboards, administrative monitoring, or to trace suspicious access patterns by IP/session.\n\nPermission is typically restricted to admin-level users due to privacy concerns, and care must be taken to ensure search results do not leak personally identifiable information (PII) to unauthorized users. Returns paginated result structure defined in IPageDiscussionboardPostViews.","summary":"List/query post view audit records (discussionboard_post_views) with search/pagination.","parameters":[],"requestBody":{"description":"Optional filters and pagination information for querying post views.","typeName":"IDiscussionboardPostViews.IRequest"},"responseBody":{"description":"Paginated list of post view audit entries.","typeName":"IPageDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews","method":"patch"},{"specification":"Retrieves a specific post view audit record from the 'discussionboard_post_views' table by its unique ID. Used for detailed examination of a single view event, often as part of an admin audit or analytics workflow. Permission is typically limited to admins or analysts.","description":"Fetches a single discussionboard_post_views entity by its primary key. \n\nThe endpoint supports viewing all details tracked in the audit record, including post_id, user_id (if authenticated), session_id (if applicable), and viewed_at datetime. Used for incident investigation, traffic tracing, or compliance audit review.\n\nPermissioned for use by administrators and trusted analytics roles only, since it may expose sensitive information about platform usage patterns.","summary":"Get audit details of a specific post view event (discussionboard_post_views) by ID.","parameters":[{"name":"id","description":"Primary key of the discussionboard_post_views record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of a single post view audit event.","typeName":"IDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews/{id}","method":"get"},{"specification":"Adds a new post view event into the 'discussionboard_post_views' audit table. This occurs upon user or guest viewing a post, and records atomic view with optionally provided user_id (authenticated), session_id (for guests/analytics), and timestamp. Used for traffic, analytics, and anti-abuse measures. Does not update aggregated post view counters directly.","description":"Creates a new record in the discussionboard_post_views table when a post is viewed. \n\nRequest body must include the required fields (post_id, viewer identifier(s), viewed_at time). Authenticated user_id is provided when a member is logged in; session_id is used for guest views or deeper analytics instrumentation. The endpoint only records individual view events and does not aggregate data at insert time.\n\nThis operation supports audit and platform analytics features, and forms the basis for detailed engagement reporting.","summary":"Record a new post view event (discussionboard_post_views).","parameters":[],"requestBody":{"description":"Atomic view event info for the new record.","typeName":"IDiscussionboardPostViews.ICreate"},"responseBody":{"description":"The created post view record.","typeName":"IDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews","method":"post"},{"specification":"Updates details of a specific post view event in the 'discussionboard_post_views' table by its unique ID. Used for correcting or annotating analytic records post-hoc, typically an admin/analyst-only function. General users do not have permission to update audit logs.","description":"Updates a post view record by unique identifier, permitting correction of analytic data (such as view attribution or session fixups). \n\nPrimarily intended for administrative or analytic troubleshooting; not generally exposed to end users. Request body specifies the updatable fields, following the canonical post view record schema. Any change is itself auditable and should trigger entry into platform action logs for compliance.","summary":"Update a specific post view audit record by ID (discussionboard_post_views).","parameters":[{"name":"id","description":"Unique identifier of the post view record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post view record.","typeName":"IDiscussionboardPostViews.IUpdate"},"responseBody":{"description":"Updated post view record.","typeName":"IDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews/{id}","method":"put"},{"specification":"Deletes a post view audit record from the 'discussionboard_post_views' table by its unique ID. Used for data correction or removal of erroneously tracked analytics events. Requires admin/analyst-level permissions due to audit impact. Operation is fully traceable in audit logs for compliance.","description":"Removes a single discussionboard_post_views audit entry by primary key.\n\nThe operation supports GDPR/right-to-be-forgotten or incident-driven cleanup scenarios. Only users with elevated permissions may perform deletions to avoid accidental or malicious tampering with system audit data. Returns 204 No Content on success; 404 if record does not exist.","summary":"Remove a post view audit record by ID (discussionboard_post_views).","parameters":[{"name":"id","description":"The unique ID of the post view entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/postViews/{id}","method":"delete"},{"specification":"Lists or searches comments for posts in the discussion board. Filters by post_id, author_id, or parent_id (for threaded replies), fully supports paginated responses and sort options. Implements primary comment browsing interface for members and guests, referenced in post detail views and discussion pages.","description":"Returns a paginated, optionally filtered list of comments (discussionboard_comments), supporting searches by post_id (all comments for a post), parent_id (for nesting/replies), or author_id (for user histories).\n\nThis endpoint is used for both main-thread comment listings in post detail pages, and for reply chains in discussion UX. Pagination and robust filtering ensure scalability, and results are sorted ascending/descending by created_at per client request. Returns summary data for each comment, excluding soft-deleted ones unless user is admin/moderator.","summary":"List/search comments with filtering by post/parent/author (discussionboard_comments).","parameters":[],"requestBody":{"description":"Comment query filters and pagination info.","typeName":"IDiscussionboardComments.IRequest"},"responseBody":{"description":"Paginated comment list result matching filters.","typeName":"IPageDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments","method":"patch"},{"specification":"Fetches a single comment record from the 'discussionboard_comments' entity by its unique identifier. Used for post details, reply chains, and moderation, providing full comment metadata including author, nesting relation, timestamps, and body. Permissioned for members, guests, moderators, and admins.","description":"Retrieves the details of a single comment by ID from discussionboard_comments. \n\nUsed in comment thread navigation, moderation detail dialogs, and post detail pages. Provides all atomic comment data (including parent reference for reply threads), as well as author and created_at/updated_at fields.\n\nDoes not return soft-deleted comments unless access is admin or moderator. Includes related metadata for full transparency in moderation views.","summary":"Get details of a comment by its ID (discussionboard_comments).","parameters":[{"name":"id","description":"Unique identifier for the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data for the requested comment, including threaded reply fields.","typeName":"IDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments/{id}","method":"get"},{"specification":"Creates a new comment or reply under a post. Accepts body, post_id, author_id, and optional parent_id for reply threading. Enforces permission on author (must be authenticated member/mod/admin), validation on content (no profanity per content policy), and relates the new comment in the thread. Triggers notification and audit subsystems post-insert.","description":"Accepts a new comment (root or reply) for a post. \n\nReceives minimal body including comment content, target post, and author details, plus optional parent_id to form a threaded reply. Content is automatically profanity-checked and spam-filtered per active policies. The operation triggers notification(s) to participants (authors, mentions) and logs the event for moderation purposes.\n\nErrors returned for invalid/abusive content, or non-existent posts/parent comments. Follows notification, logging, and audit requirements described in the requirements analysis.","summary":"Create a new comment or threaded reply for a post (discussionboard_comments).","parameters":[],"requestBody":{"description":"Comment creation information (body, post, author, parent/reply reference).","typeName":"IDiscussionboardComments.ICreate"},"responseBody":{"description":"Created comment data including parent/query info.","typeName":"IDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments","method":"post"},{"specification":"Updates a comment or reply under a post by ID. Accepts partial updates to editable fields (body, updated_at, possibly parent_id for moving thread), and enforces that only the original author or an admin/moderator can perform updates. All edits are tracked in the discussionboard_comment_edits table for audit/log compliance.","description":"Partially or fully updates a comment by ID. \n\nRestrictions: Only editable fields are allowed (body change, updated_at, moving replies), and original author or site staff must be the acting user. All changes are logged to the comment edit log for compliance and transparency. Profanity and spam filters are run on new body text prior to accepting changes.\n\nUsed both for regular user comment editing and for moderator/admin content corrections. Returns updated comment record with all metadata. Error if not found or unauthorized.","summary":"Update an existing comment (or reply) by ID (discussionboard_comments).","parameters":[{"name":"id","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the comment to update.","typeName":"IDiscussionboardComments.IUpdate"},"responseBody":{"description":"Updated comment record.","typeName":"IDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments/{id}","method":"put"},{"specification":"Deletes a comment by its unique ID, supporting both soft and hard deletes per application policy. Only the comment's author or an admin/moderator may delete. Soft-deletes are preferred (flag deleted_at) but hard remove supported for irreversible moderation/compliance cases. Triggers notification and moderation/audit logging subsystems.","description":"Removes a comment or reply from discussionboard_comments by unique identifier.\n\nThe operation first attempts a soft delete (setting deleted_at) for general cases, unless hard deletion is requested/allowed per moderation policy. Users may only delete their own comments unless elevated permissions; audit logs are updated for every delete, with moderation reason for non-self-removal. Notifies affected users and updates affected threads/aggregation if necessary.","summary":"Delete (soft or hard) a comment or reply by ID (discussionboard_comments).","parameters":[{"name":"id","description":"Unique identifier of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/comments/{id}","method":"delete"},{"specification":"Lists or searches comment likes/dislikes by various filters (comment_id, user_id, is_like, created_at window). Primarily used by admins to audit reaction distribution, by users to see their reactions, and by analytics/dashboard features. Supports pagination, search, and secure access control.","description":"Returns a paginated list of discussionboard_comment_likes entries, supporting searching/filtering by comment, user, like/dislike state, and date window (created_at). Results support analytics dashboards, profile like-history, moderation review of suspect users, and abuse pattern recognition. \n\nMembers can query their own likes/dislikes, admins/mods can access broader data. Enforces pagination and privacy safeguards appropriate to the querying user role. Returns paginated result structure defined by IPageDiscussionboardCommentLikes.","summary":"List/search likes/dislikes on comments (discussionboard_comment_likes) with filters/pagination.","parameters":[],"requestBody":{"description":"Search criteria and pagination info for comment like records.","typeName":"IDiscussionboardCommentLikes.IRequest"},"responseBody":{"description":"Paginated query result for comment likes/dislikes.","typeName":"IPageDiscussionboardCommentLikes"},"authorizationRoles":null,"path":"/discussionboard/commentLikes","method":"patch"}],"completed":84,"total":180,"step":0,"created_at":"2025-07-22T13:34:35.720Z"},"tokenUsage":{"facade":{"aggregate":{"total":337544,"input":{"total":313470,"cached":24064},"output":{"total":24074,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":337544,"input":{"total":313470,"cached":24064},"output":{"total":24074,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":337544,"input":{"total":313470,"cached":24064},"output":{"total":24074,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":337544,"input":{"total":313470,"cached":24064},"output":{"total":24074,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements retrieval of a paginated or filtered list of board sections for the political/economic discussion board. This operation fetches all sections (such as 'Politics', 'Economy') which are used for organizing sets of boards. Follows list/read/search pattern and supports possible query, pagination, or filter data to be supplied in request body. Based on table: discussionboard_sections.","description":"This API provides a way to retrieve a filtered and/or paginated list of discussion board sections. Each section organizes boards under broad themes (e.g., politics, economy). Only atomic data from the discussionboard_sections table is returned: section id, name, description, sort_order, created_at, updated_at. The operation may support searching by name, filtering by activity, and specifies pagination parameters such as page size and page index in the request body.\n\nAccess to the endpoint requires a role with section-listing privileges (admin, moderator, member, or guest for public sections). The operation enforces data integrity and follows the 3NF atomic data rule as in schema. Any soft-deleted or inactive sections may be filtered as defined in business logic. Related data such as boards are not included by default and require explicit queries.\n\nValidation includes ensuring valid filters/search params in request body. Associated error handling for empty results, invalid request parameters, or permission denial is required. This endpoint is commonly used in combination with /boards and UI filtering components.","summary":"Retrieve a paginated or filtered list of board sections (discussionboard_sections table).","parameters":[],"requestBody":{"description":"Filtering, searching, and pagination params for board section list query.","typeName":"IDiscussionboardSection.IRequest"},"responseBody":{"description":"Paginated result containing basic info for each board section.","typeName":"IPageIDiscussionboardSection"},"authorizationRoles":null,"path":"/discussionboard/sections","method":"patch"},{"specification":"Retrieves a single board section by its unique identifier from the discussionboard_sections table. Used for looking up properties of a specific section (e.g., in admin or configuration UIs).","description":"Fetch the full record of a single board section using its unique ID. Returns section metadata such as name, description, sorting order, creation, and update times. Only non-derived, atomic section data from the 3NF schema is returned.\n\nUsed in admin interfaces, board creation workflows, and configuration editors. Security/authorization is enforced—admins, moderators, or members with configuration privileges may access this detail. Not intended to return related boards or nested data, though follow-up queries may use the returned ID.\n\nHandles errors for not-found (404), permission-denied, and invalid UUID input. Related APIs: section list (PATCH /discussionboard/sections), create/update/delete section.","summary":"Get metadata for a board section by ID (discussionboard_sections table).","parameters":[{"name":"id","description":"Unique identifier of the board section to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete board section record for the requested section ID.","typeName":"IDiscussionboardSection"},"authorizationRoles":null,"path":"/discussionboard/sections/{id}","method":"get"},{"specification":"Creates a new discussion board section, representing a high-level grouping in the forum (e.g., 'Politics', 'Economy'). CRUD for discussionboard_sections table. Only admins or roles with permissions may create sections.","description":"Allows admin (or authorized roles) to create a new logical section for organizing boards within the platform. The request body supplies section name, description, and desired display order. This maintains 3NF compliance—no denormalized or aggregate data.\n\nValidates uniqueness of section name and proper order index, and enforces required fields. On success, returns the new section record. Handles duplicate name error, invalid input, or insufficient permission.\n\nCreates only a section entry; boards must be added using the boards endpoint. Sections may subsequently be updated or deleted. Related endpoints: update/delete section, list sections.","summary":"Create a new board section (discussionboard_sections table).","parameters":[],"requestBody":{"description":"New section information including name, description, and sort_order.","typeName":"IDiscussionboardSection.ICreate"},"responseBody":{"description":"Full record of the newly created board section.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"path":"/discussionboard/sections","method":"post"},{"specification":"Updates an existing board section’s properties (name, description, sort order, etc.), as required in discussionboard_sections table. Only admins or permitted moderators may use this operation. Follows full update semantics (PUT).","description":"Accepts an explicit update payload for the target board section, identified by its section ID. Permits updates to atomic fields such as name, description, and sort_order, but not to related boards or other entities. Ensures section name uniqueness, valid sort index, and compliance with business logic (e.g., cannot rename to an existing section name).\n\nRoles with configuration privileges (typically admin) are authorized. Audit trail is enforced per data retention rules. Reports errors for missing section, invalid update values, or authorization failure. Related to: get section, create section, delete section.","summary":"Update an existing board section by ID (discussionboard_sections table).","parameters":[{"name":"id","description":"Unique identifier of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for a board section (name, description, sort_order, etc.).","typeName":"IDiscussionboardSection.IUpdate"},"responseBody":{"description":"Updated section record after applying changes.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"path":"/discussionboard/sections/{id}","method":"put"},{"specification":"Removes (deletes) a board section from the discussionboard_sections table. Only admin-level users may perform this operation. Deletion is restricted if boards are still assigned to the section.","description":"Permanently deletes a board section given its unique ID, after checking for dependencies (such as no boards assigned to this section). Section removal is strictly administrative; must check for safe-deletion conditions (i.e., no boards under this section).\n\nOperation requires admin privileges. Performs referential integrity validation. Returns success/failure status and may return the deleted section’s metadata for confirmation. Handles not-found, permission-denied, and dependency errors. Related endpoints: create/list/update section.","summary":"Delete a board section by ID, enforcing referential integrity (discussionboard_sections table).","parameters":[{"name":"id","description":"ID of section to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Metadata or confirmation of the deleted section, or an empty body if not required.","typeName":"IDiscussionboardSection.IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/sections/{id}","method":"delete"},{"specification":"Retrieves paginated or filtered list of boards under all sections for browsing and discovery. Implements board list/read/search operation per requirements using the discussionboard_boards table.","description":"List and search all boards in the platform, returning properties such as board ID, section ID, name, description, rules, activity flag, and timestamps. Filtering/searching on board name, section, active status, or related tags is supported via the request body.\n\nPublic sections/boards may be visible to all roles, but sensitive fields or inactive boards may be filtered depending on privilege. Enforces data integrity—only 3NF, atomic properties per the schema. Pagination attributes (page, size, etc.) and sorting are required in request body. Errors reported for invalid query or filter values.\n\nRelated endpoints: board detail, board CRUD, section list.","summary":"Retrieve paginated/searchable list of boards (discussionboard_boards table).","parameters":[],"requestBody":{"description":"Request filtering/search criteria and pagination for board listing.","typeName":"IDiscussionboardBoard.IRequest"},"responseBody":{"description":"Paginated, filtered list of board entries (with section references, basic fields only).","typeName":"IPageIDiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards","method":"patch"},{"specification":"Retrieves a single board’s details from the discussionboard_boards table, used for board display, editing, or assigning topics. Board ID is path parameter. 3NF atomic data only.","description":"Returns the full record for a specific board including ID, section, name, description, rules, active/inactive flag, and audit timestamps. Board ID must be provided as path parameter. Public access may be allowed for board display, while extra fields may be privilege-restricted.\n\nValidates the given board ID is a valid UUID and exists. Errors for not-found, permissions. Supports administrative review, board configuration, and linking boards to topics.\n\nRelated operations: list/search boards, create/update/delete board.","summary":"Get details for one discussion board by ID (discussionboard_boards table).","parameters":[{"name":"id","description":"Unique identifier of board to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Atomic, full record for board specified by ID.","typeName":"IDiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards/{id}","method":"get"},{"specification":"Creates a new board in the forum under an existing section, as per CRUD requirements and discussionboard_boards schema. Admin privilege enforced.","description":"Posts new board record with details including target section ID, name, description, rules, and active flag. Validates referenced section exists, enforces unique board name, and checks required fields. 3NF normalization—no joined data or derived fields in request or response.\n\nAdmins (or roles granted privilege in RBAC) may create boards. Errors handled for invalid input, duplicate board name, permission denied, or section not found. Related endpoints: section detail, board update/delete.","summary":"Create a new discussion board associated to a section (discussionboard_boards table).","parameters":[],"requestBody":{"description":"Payload to define the new board (section ID, name, description, rules, is_active).","typeName":"IDiscussionboardBoard.ICreate"},"responseBody":{"description":"Created board record with atomic fields only.","typeName":"IDiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards","method":"post"},{"specification":"Updates full details for an existing board, using the discussionboard_boards table. Only admin or authorized moderator may update. PUT semantics (replace atomics).","description":"Updates atomic attributes for a board including name, description, rules markdown, activity flag, etc. Board identified by ID in path parameter; updated fields supplied in request body. Validates name uniqueness and business rules. No updates to related posts or sections in this operation.\n\nAdmin (or other RBAC role) authorization enforced. Reports errors for missing board, unique constraint errors, or invalid data.\n\nRelated operations: get/create/delete board.","summary":"Update a discussion board by ID (discussionboard_boards table).","parameters":[{"name":"id","description":"Unique ID of the board to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload with board attributes to set.","typeName":"IDiscussionboardBoard.IUpdate"},"responseBody":{"description":"Board record after changes applied (atomic fields only).","typeName":"IDiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/{id}","method":"put"},{"specification":"Deletes a discussion board given its ID, as defined in discussionboard_boards table. Admin access required. Must verify safety (e.g., no critical content).","description":"Removes a board by its unique identifier, validating business conditions (such as if safe to delete—may check for posts or settings). 3NF atomic operation: board identified by ID, cascade or restrict as enforced by schema.\n\nRestricted to admin roles due to risk of data loss. Returns success/confirmation, possibly deleted metadata. Handles errors for not-found, permission-denied, or dependency. Related: section/board CRUD and list.","summary":"Delete a board by ID with referential validation (discussionboard_boards table).","parameters":[{"name":"id","description":"ID of the board to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation or metadata of the deleted board record.","typeName":"IDiscussionboardBoard.IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/{id}","method":"delete"},{"specification":"Retrieves paginated or filtered list of tags for board/topic navigation. Implements board/discussion tag search pattern, using discussionboard_tags table. Used for filtering, discovery, and tagging features.","description":"List all tags used for organizing boards or posts, with search/filter and pagination support. Returns tag ID, tag string, description, and audit timestamps. Request body allows filters such as tag substring, category, or is_active status if relevant. Strict 3NF atomicity—no joined/denormalized info.\n\nAll roles may view tags for filtering and tagging purposes. Handles invalid filter/query, empty result, pagination controls. Related endpoints: tag detail, board create/update (for tag assignment).","summary":"Retrieve (searchable) list of tags for board/post filtering (discussionboard_tags table).","parameters":[],"requestBody":{"description":"Tag search and pagination criteria.","typeName":"IDiscussionboardTag.IRequest"},"responseBody":{"description":"Paginated/filtered set of tag records for navigation.","typeName":"IPageIDiscussionboardTag"},"authorizationRoles":null,"path":"/discussionboard/tags","method":"patch"},{"specification":"Retrieves details for a single tag by its ID for filtering or UI display. Implements the tag look-up for discussionboard_tags table.","description":"Fetch record for a single tag using tag ID, returning atomic properties (tag value, description, created/updated times). Used for tag display UIs, tag assignment logic, and navigation. Path parameter is tag ID.\n\nAll roles may view. Validates input and not-found cases. Related endpoints: list/search tags.","summary":"Get atomic detail for a tag by ID (discussionboard_tags table).","parameters":[{"name":"id","description":"ID of the tag to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Atomic tag record matching the requested ID.","typeName":"IDiscussionboardTag"},"authorizationRoles":null,"path":"/discussionboard/tags/{id}","method":"get"}],"completed":96,"total":180,"step":0,"created_at":"2025-07-22T13:34:42.187Z"},"tokenUsage":{"facade":{"aggregate":{"total":380211,"input":{"total":353011,"cached":24064},"output":{"total":27200,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":380211,"input":{"total":353011,"cached":24064},"output":{"total":27200,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":380211,"input":{"total":353011,"cached":24064},"output":{"total":27200,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":380211,"input":{"total":353011,"cached":24064},"output":{"total":27200,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Delete a specific content policy by its unique identifier. Associated with the discussionboard_content_policies table, this endpoint allows administrators to permanently remove a single content policy entry, such as a rule/documentation for moderation or content checking. The operation enforces referential integrity and ensures only authorized users (typically admins) can delete policies. It is critical for maintaining up-to-date policy documentation and aligning enforcement with current guidelines.","description":"This operation deletes a single content policy record from the discussionboard_content_policies table, identified by the provided policy ID. Only authorized administrators can perform this deletion, enforcing permission checks and audit trails as per system requirements. The endpoint ensures that no referential or business rule violations occur when a policy is deleted (e.g., in-use policies may be restricted or logged). Upon successful deletion, the API will return a confirmation or an empty response. Errors such as invalid ID or unauthorized access are handled per platform standards.","summary":"Delete a specific content policy from discussionboard_content_policies by ID.","parameters":[{"name":"id","description":"Target content policy's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/contentPolicies/{id}","method":"delete"},{"specification":"Retrieve a paginated, searchable, and sortable list of profanity filter entries from the discussionboard_profanity_filters table. This endpoint implements content moderation requirements, allowing admins to review, filter, and manage the list of profane words/phrases actively enforced. Supports filtering by activation status, creation/update date, and textual search. Intended for administrative moderation panels or tools.","description":"Returns a list of profanity filter entries for the discussionboard_profanity_filters table. The operation supports advanced query options such as text search, enabling review or update of filtered words by administrators. It implements pagination, keyword search, and multiple sort criteria to handle large filter lists efficiently. The endpoint enforces permission checks, so only users with adequate moderator or admin privileges can retrieve and manage the profanity filter dictionaries. Errors in query parameters or authorization are handled with transparent error responses per system policy.","summary":"List and search profanity filters in discussionboard_profanity_filters with pagination.","parameters":[],"requestBody":{"description":"Request parameters for searching, filtering, and paginating profanity filters.","typeName":"IDiscussionboardProfanityFilter.IRequest"},"responseBody":{"description":"Paginated list of profanity filter entries.","typeName":"IPageIDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters","method":"patch"},{"specification":"Retrieve a single profanity filter entry by its unique ID from the discussionboard_profanity_filters table. Implements the requirement to allow detailed inspection or display of profanity word/phrase entries for administrative moderation purposes. Supports audit, update, or review workflows.","description":"Fetches detailed information about a specific profanity filter entry by its ID. Only users with admin or moderator privileges can access the full details of filter terms. Error handling covers not found, unauthorized access, or invalid ID scenarios. The result includes all atomic details about the filter entry, such as word, activation status, and audit timestamps.","summary":"Get detailed information about a single profanity filter entry in discussionboard_profanity_filters.","parameters":[{"name":"id","description":"Target profanity filter entry's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified profanity filter entry.","typeName":"IDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters/{id}","method":"get"},{"specification":"Create a new profanity filter record in the discussionboard_profanity_filters table. This endpoint enables administrators or moderators to add new words or phrases to the profanity filter list, supporting platform content safety policies. Validation rules enforce uniqueness and ensure data integrity when onboarding new filter entries.","description":"Accepts a request body containing all data necessary to define a new profanity filter. This includes the word or phrase, activation status, and any required audit/thematic meta. On successful creation, returns the created profanity filter entry. The endpoint restricts access to roles with content moderation responsibilities. Error handling includes duplicate word protection, field validation, and unauthorized actions, following the requirements’ security model.","summary":"Create a new profanity filter entry in discussionboard_profanity_filters.","parameters":[],"requestBody":{"description":"Data required to create a new profanity filter entry.","typeName":"IDiscussionboardProfanityFilter.ICreate"},"responseBody":{"description":"Details of the newly created profanity filter entry.","typeName":"IDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters","method":"post"},{"specification":"Update an existing profanity filter entry by ID in the discussionboard_profanity_filters table. Implements the ability for admins or moderators to revise, activate/deactivate, or otherwise alter a filter word/phrase, supporting evolving platform policies and moderation feedback. Requires validation and careful audit of changes.","description":"Updates a profanity filter record identified by its ID using values supplied in the request body. The endpoint allows editing the word/phrase, activation state, and associated metadata. All modification operations are subject to permission checks, audit trails, and uniqueness constraints. Admins and moderators may use this endpoint to adjust filter policies in response to changing community needs or error correction. Standard error responses include ID not found, bad parameters, or lack of authorization.","summary":"Update a specific profanity filter entry in discussionboard_profanity_filters by ID.","parameters":[{"name":"id","description":"ID of the profanity filter entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the specified profanity filter entry.","typeName":"IDiscussionboardProfanityFilter.IUpdate"},"responseBody":{"description":"Updated profanity filter entry details.","typeName":"IDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters/{id}","method":"put"},{"specification":"Delete a specific profanity filter entry from the discussionboard_profanity_filters table by its unique ID. Enables platform admins or moderators to remove entries (words/phrases) that are no longer appropriate for automated filtering. Supports audit and permission checks, with system logs for all deletion events.","description":"Removes a profanity filter record specified by its ID, after enforcing relevant permission and audit requirements. The deletion may be soft or hard per business rules, but for API purposes, the record is no longer active or accessible. Standard error handling includes not found, access denied, or data integrity violation (e.g., if the entry is referenced elsewhere in moderation history).","summary":"Delete a specific profanity filter entry by ID from discussionboard_profanity_filters.","parameters":[{"name":"id","description":"ID of the profanity filter entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters/{id}","method":"delete"},{"specification":"Retrieve a paginated, searchable, and sortable list of automated spam rule entries from the discussionboard_automated_spam_rules table. Implements the platform’s automated content filtering requirements, supporting anti-spam review, diagnostics, and administrative configuration. Enables review and management of regex or pattern-based spam detection rules.","description":"Returns a list of automated spam rule entries from discussionboard_automated_spam_rules for review or batch management. The operation is accessible only to authorized admins and moderators and supports complex query parameters such as regex pattern search, active/inactive filtering, and pagination/sorting. Handles large rule sets efficiently and supports diagnostic and security panel use cases. Errors in access or search syntax are handled according to standard response patterns.","summary":"List and search automated spam rules in discussionboard_automated_spam_rules with pagination.","parameters":[],"requestBody":{"description":"Request parameters for searching and paginating automated spam rules.","typeName":"IDiscussionboardAutomatedSpamRule.IRequest"},"responseBody":{"description":"Paginated list of automated spam rule entries.","typeName":"IPageIDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules","method":"patch"},{"specification":"Get a single automated spam rule entry by its unique ID from the discussionboard_automated_spam_rules table. This endpoint is needed for viewing rule details, auditing configuration, and updating complex spam rule settings.","description":"Fetches and returns detailed information about a given automated spam rule entry, identified by its ID. Information includes rule pattern (e.g., regex), description, activation status, and timestamps. Access is limited to admins or moderators. Handles not-found and permission errors as defined in platform requirements.","summary":"Get detailed information about a single automated spam rule entry from discussionboard_automated_spam_rules.","parameters":[{"name":"id","description":"Target automated spam rule entry's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules/{id}","method":"get"},{"specification":"Create a new automated spam rule entry in the discussionboard_automated_spam_rules table. Used for adding new programmable patterns (such as regex or keywords) for automated content moderation. Enables administrators and moderators to expand anti-spam coverage in the discussion board system.","description":"Accepts all required creation information for a new spam rule in the request body and records this into the database. Fields may include regex/pattern, description, activation indicator, and audit timestamps. Returned value is the created record. Enforces uniqueness for rule patterns and permission/method constraints. Errors arise from unique constraint violations, input validation failures, or insufficient permissions. The endpoint is critical for keeping up with evolving abuse tactics.","summary":"Create a new automated spam rule entry in discussionboard_automated_spam_rules.","parameters":[],"requestBody":{"description":"Data required to create a new automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule.ICreate"},"responseBody":{"description":"Details of the newly created automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules","method":"post"},{"specification":"Update an existing automated spam rule entry by its unique ID in the discussionboard_automated_spam_rules table. Enables authorized admins or moderators to edit spam detection patterns as community abuse vectors evolve. Supports change tracking and audit logging for security compliance.","description":"Updates a specified automated spam rule entry, by ID, with new pattern settings, descriptions, or activation changes from the request body. Restricted to admin and moderator roles. Ensures auditability and rollback by logging all update operations, with failure responses for not found, validation, or permission issues. Critical for fast, secure updates as spam patterns shift.","summary":"Update a specific automated spam rule entry in discussionboard_automated_spam_rules by ID.","parameters":[{"name":"id","description":"Automated spam rule entry's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the specified automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule.IUpdate"},"responseBody":{"description":"Updated automated spam rule entry details.","typeName":"IDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules/{id}","method":"put"},{"specification":"Delete a specific automated spam rule entry by its unique ID from the discussionboard_automated_spam_rules table. Supports platform requirements for maintainable, up-to-date anti-spam configuration, subject to authorization, audit, and error handling.","description":"Deletes the automated spam rule identified by its unique identifier from the discussionboard_automated_spam_rules table. Only users with admin or moderator privileges can delete spam rules. Operation is subject to audit-logging and error reporting for not found, integrity issues, or authorization failures. Success returns a confirmation or empty body, consistent with API norms.","summary":"Delete a specific automated spam rule entry by ID from discussionboard_automated_spam_rules.","parameters":[{"name":"id","description":"ID of the automated spam rule entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules/{id}","method":"delete"},{"specification":"Retrieve a paginated, filterable list of notification records from the discussionboard_notifications table. This endpoint implements Notification System requirements for administrative review or recipient self-management, allowing filtering by type, status (read/unread), recipient, timeframe, and supports advanced search criteria. For user-facing interfaces and admin moderation tools.","description":"Returns a filterable and paginated list of notifications present in the discussionboard_notifications table. The endpoint enables users (and admins, with elevated rights) to search or filter by notification type, delivery/read status, date range, and related event. Advanced query options are supported via the request body, and results are paginated and sorted according to client needs. Strict permission checks enforce that users can only view their own notifications unless they are admins or moderators. Errors in permission, filter parameters, or search criteria are returned with informative messages, in line with platform API standards.","summary":"List and search notifications in discussionboard_notifications with pagination and filtering.","parameters":[],"requestBody":{"description":"Request parameters for querying and paginating notification records.","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification entries matching filter/search criteria.","typeName":"IPageIDiscussionboardNotification"},"authorizationRoles":null,"path":"/discussionboard/notifications","method":"patch"}],"completed":108,"total":180,"step":0,"created_at":"2025-07-22T13:34:46.349Z"},"tokenUsage":{"facade":{"aggregate":{"total":422732,"input":{"total":392577,"cached":25856},"output":{"total":30155,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":422732,"input":{"total":392577,"cached":25856},"output":{"total":30155,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":422732,"input":{"total":392577,"cached":25856},"output":{"total":30155,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":422732,"input":{"total":392577,"cached":25856},"output":{"total":30155,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Get a single notification by its unique ID. This operation retrieves the details of one notification (such as reply, like, mention, or moderation action) belonging to a specific user of the discussionboard domain. It is used for displaying in-app or push notifications to the user and can be referenced for marking as read, showing contextual information, or linking to related content. Permissions must ensure users can only view their own notifications. Prisma table: discussionboard_notifications.","description":"This operation fetches a single notification entity from the discussionboard_notifications table based on its unique identifier. It supports the audit trail and notification system requirements by providing all the contextual details needed for an in-app UI or when a user clicks on a notification. The returned object includes information about delivery, read status, notification message content, and optional references to related entities (such as posts, comments, or moderation actions).\n\nSecurity note: Only the recipient or authorized role can access a notification's full details; others will receive an authorization error. Requests must enforce that the authenticated user matches the notification's recipient.\n\nIf the notification belongs to another user, or if it cannot be found, a 404 or 403 error is returned. Sensitive metadata (such as internal notes or related moderation action details) are protected based on user role. The ID must be a valid UUID from the Prisma schema's notifications table, and an error is returned for any malformed requests. This endpoint is often used together with the notification list endpoint to provide detail views.","summary":"Get notification details by ID (discussionboard_notifications).","parameters":[{"name":"id","description":"Unique notification ID to retrieve (UUID from discussionboard_notifications).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification details response providing notification content, type, read status, and contextual entity references.","typeName":"Idiscussionboard_notifications"},"authorizationRoles":null,"path":"/discussionboard/notifications/{id}","method":"get"},{"specification":"Create a new notification in the discussionboard system. Used for adding a system-generated notification event for a user (e.g., reply, like, moderation action). References the discussionboard_notifications Prisma table. Typical use cases include system processes or admin APIs creating notifications after certain triggers/events.","description":"This endpoint inserts a new notification record into the discussionboard_notifications table. It receives required notification properties including recipient user, type, main content, and can specify related entity context (such as for post replies, comment mentions, or moderation actions). The operation implements audit and notification delivery requirements, generating an in-app notification for the targeted user.\n\nThe request body must include all necessary information for notification creation. Validates that the discussionboard_member_id (recipient) exists; related_entity_id and related_entity_type are optional but may be used for deep linking or context in the frontend. The operation checks permission to create notifications (typically restricted to system/background/admin actions, not end users). It responds with the created notification entity or a relevant error if input is invalid or permission denied.","summary":"Create a notification (discussionboard_notifications).","parameters":[],"requestBody":{"description":"Payload for creating a new notification event (target member, type, content, optional contextual refs).","typeName":"Idiscussionboard_notifications.ICreate"},"responseBody":{"description":"Created notification entity (full details).","typeName":"Idiscussionboard_notifications"},"authorizationRoles":null,"path":"/discussionboard/notifications","method":"post"},{"specification":"Update an existing notification by its unique ID in the discussionboard domain. This usually supports changes like marking the notification as read/unread or updating the expiry for a scheduled alert. References the discussionboard_notifications Prisma table.","description":"This endpoint allows an authorized client (typically internal system logic or the notification owner) to update notification metadata, such as read status (is_read), expiry, or content. For example, when a user reads a notification, a PATCH or PUT request could set is_read=true. Business logic enforces ownership (only the notification recipient or authorized role can update).\n\nIt validates the notification's existence, input shape, and user permissions. The request body must follow the Idiscussionboard_notifications.IUpdate schema. The response returns the updated entity or an error if the notification does not exist or input is invalid.","summary":"Update notification by ID (discussionboard_notifications).","parameters":[{"name":"id","description":"Unique notification ID to update (UUID from discussionboard_notifications).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for notification fields such as is_read, content, or expires_at.","typeName":"Idiscussionboard_notifications.IUpdate"},"responseBody":{"description":"Updated notification entity details.","typeName":"Idiscussionboard_notifications"},"authorizationRoles":null,"path":"/discussionboard/notifications/{id}","method":"put"},{"specification":"Delete a notification by its ID in the discussionboard system. Used for removing a notification record, possibly in response to user dismissal or system cleanup. References the discussionboard_notifications Prisma table.","description":"This operation deletes a notification entity from the discussionboard_notifications table identified by its unique ID. It can be used when a user manually dismisses a notification or when notifications are purged for expired/obsolete entries. Only the recipient or an authorized role can delete; attempts by unauthorized users return a 403 error.\n\nOn a successful delete, an empty response or confirmation message is returned. Permission and ID validity checks are enforced. If the notification does not exist, a 404 is returned. This action also ensures compliance with user data management and notification retention rules.","summary":"Delete notification by ID (discussionboard_notifications).","parameters":[{"name":"id","description":"Unique notification ID to delete (UUID from discussionboard_notifications).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted notification confirmation or status.","typeName":"Idiscussionboard_notifications.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/notifications/{id}","method":"delete"},{"specification":"List or search alert preferences for the authenticated user or specified filter. Implements the notification preferences list API for the discussionboard domain. Results are paginated and filterable by member and notification type. Prisma table: discussionboard_alert_preferences.","description":"Provides a paginated/searchable list of alert preferences for a user or a set of users (for admin views). Retrieves configuration for notification delivery channels (in-app, email, etc) by notification type. Useful for rendering user settings pages or administration panels.\n\nFiltering options support member ID, notification type, etc. Standard RBAC applies: members can see their own preferences; admins/moderators may list system-wide settings. Pagination/sorting/query params managed via Idiscussionboard_alert_preferences.IRequest.","summary":"List alert preferences (discussionboard_alert_preferences).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for alert preferences.","typeName":"Idiscussionboard_alert_preferences.IRequest"},"responseBody":{"description":"Paginated list of alert preference entities.","typeName":"IPageIdiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences","method":"patch"},{"specification":"Get a specific alert preference record by ID from the discussionboard_alert_preferences table. Used to view the user's notification delivery configuration for a given event type.","description":"Fetches one alert preference record (for a specific notification type and member) from the alert preferences table by its unique identifier. Returns the user's chosen delivery channel for a notification type (in-app, email, disabled, etc).\n\nEnforces RBAC: Only the owner, or authorized roles, can fetch details for preferences. If the ID does not exist (or permissions denied), returns error codes. Used in account settings UI and notification customization workflows.","summary":"Get alert preference by ID (discussionboard_alert_preferences).","parameters":[{"name":"id","description":"Unique alert preference ID to fetch (UUID from discussionboard_alert_preferences).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Alert preference settings entity details.","typeName":"Idiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences/{id}","method":"get"},{"specification":"Create a new alert preference record for a user in the discussionboard domain. Used when a user changes notification settings or initial preferences are set up. References the discussionboard_alert_preferences Prisma table.","description":"Inserts a new alert preference for a user and notification type, specifying delivery channel (in-app, email, etc). Payload must include member ID, notification type, and delivery channel. The operation enforces uniqueness (each member/type combo only once).\n\nTypically called by user-initiated settings update or on registration. Returns the created preference entity or error if the combination exists or input is invalid.","summary":"Create alert preference (discussionboard_alert_preferences).","parameters":[],"requestBody":{"description":"Alert preference creation payload (user, notif type, delivery channel).","typeName":"Idiscussionboard_alert_preferences.ICreate"},"responseBody":{"description":"Created alert preference entity details.","typeName":"Idiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences","method":"post"},{"specification":"Update an existing alert preference by its ID for the discussionboard_alert_preferences table. Used to change delivery channels or notification type prefs.","description":"Updates a specific alert preference entity in the alert preferences table, such as for changing from email to in-app notifications on reply events. Body payload includes allowed modifiable fields. Only the owner or authorized role may update.\n\nOn success, updates the preference and returns the modified entity. Performs checks for permission, payload validity, and record existence. Errors returned for failures. Used in settings UI and admin controls.","summary":"Update alert preference by ID (discussionboard_alert_preferences).","parameters":[{"name":"id","description":"Alert preference ID to update (UUID from discussionboard_alert_preferences).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for alert preferences (delivery channel, notification type, etc).","typeName":"Idiscussionboard_alert_preferences.IUpdate"},"responseBody":{"description":"Updated alert preference entity details.","typeName":"Idiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences/{id}","method":"put"},{"specification":"Delete (remove) a specific alert preference by its ID. References the alert preferences table in discussionboard domain. Used for user opt-out or admin settings removal.","description":"Removes an alert preference record identified by its unique ID from the Prisma alert preferences table. Only authorized users (the owner or admin) can delete. Used to stop notifications for certain channels or event types.\n\nEnforces permission and validity checks. Upon successful deletion, returns confirmation/status. Returns error codes for record not found or permission denied. Used in user settings or admin dashboard.","summary":"Delete alert preference by ID (discussionboard_alert_preferences).","parameters":[{"name":"id","description":"Unique alert preference ID to delete (UUID from discussionboard_alert_preferences).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted alert preference confirmation or status.","typeName":"Idiscussionboard_alert_preferences.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences/{id}","method":"delete"},{"specification":"List or search discussionboard_action_logs in a paginated fashion. Implements the audit and action logging search API for the discussionboard domain. Prisma table: discussionboard_action_logs.","description":"Fetches a paginated list or search result of action log entities, supporting filtering by actor, event type, event target, and time. Used for compliance reporting, admin or moderator audit, and incident review. Only authorized roles (admins/moderators) can access broad queries; a member may fetch their own logs for transparency.\n\nQuery params are bundled in the request body per Idiscussionboard_action_logs.IRequest schema (includes paging, search, and filter capability). Results include full log context as defined by the Prisma schema.","summary":"List/search action logs (discussionboard_action_logs).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for action log listing.","typeName":"Idiscussionboard_action_logs.IRequest"},"responseBody":{"description":"Paginated result (logs and pagination meta).","typeName":"IPageIdiscussionboard_action_logs"},"authorizationRoles":null,"path":"/discussionboard/actionLogs","method":"patch"},{"specification":"Get a specific action log record by its unique ID. Used for detailed event review, moderation transparency, or compliance. Prisma table: discussionboard_action_logs.","description":"Retrieves a single action log entry from the action logs table by its unique ID. Returns full detail on the action event, including actor, target, metadata, event type, and event time. Security checks ensure user can only see logs they are authorized for (admins/mods or the actor themselves).\n\nReturns error for not found or forbidden actions. Used for drill-down in admin/mod/audit UI.","summary":"Get action log by ID (discussionboard_action_logs).","parameters":[{"name":"id","description":"Unique action log ID to fetch (UUID from discussionboard_action_logs).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Action log entity details.","typeName":"Idiscussionboard_action_logs"},"authorizationRoles":null,"path":"/discussionboard/actionLogs/{id}","method":"get"},{"specification":"Create a new action log entry for the action log/audit system in discussionboard domain. Used for recording critical user, admin, or system events. Prisma table: discussionboard_action_logs.","description":"Inserts a new action log record into the action logs table. Records information such as actor ID, event type, event target, and metadata. Used by backend logic for important events (role changes, moderation, sensitive API calls). Replay and analytics on logs ensure compliance and support root cause investigations.\n\nRequires validated input per Idiscussionboard_action_logs.ICreate payload. Only system, admin, or elevated backends can write logs. On success, returns the log entry created.","summary":"Create action log (discussionboard_action_logs).","parameters":[],"requestBody":{"description":"Create payload for action log entry (actor, event type, target, metadata).","typeName":"Idiscussionboard_action_logs.ICreate"},"responseBody":{"description":"Created action log entity details.","typeName":"Idiscussionboard_action_logs"},"authorizationRoles":null,"path":"/discussionboard/actionLogs","method":"post"}],"completed":120,"total":180,"step":0,"created_at":"2025-07-22T13:34:55.006Z"},"tokenUsage":{"facade":{"aggregate":{"total":465351,"input":{"total":432123,"cached":25856},"output":{"total":33228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":465351,"input":{"total":432123,"cached":25856},"output":{"total":33228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":465351,"input":{"total":432123,"cached":25856},"output":{"total":33228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":465351,"input":{"total":432123,"cached":25856},"output":{"total":33228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update a specific comment view record in the discussion board system. This operation targets the discussionboard_comment_views table, which logs each individual view of a comment, either from a known user or an anonymous session. The update operation is typically performed for correcting analytics, updating view state, or associating additional metadata with a specific view event for auditing or application enhancement. Only privileged system actors or administrators should use this operation; standard members typically do not update view events manually.","description":"This API endpoint updates an existing comment view record in the discussionboard_comment_views entity. The comment views table tracks unique views of comments for purposes such as analytics, engagement statistics, and policy enforcement. A comment view entry is created whenever a user (authenticated or guest via session token) reads a comment. This endpoint allows administrative updates to that record (such as correcting timestamps, updating viewer linkage on user login, or recording anomalies in audit situations).\n\nSecurity: Only accessible to system administrators or backend systems; users cannot update view records directly for anti-abuse and integrity. The endpoint requires validation that the specified ID exists and is modifiable.\n\nIt references the Prisma schema comments on how views are logged and maintained. This operation is useful for compliance corrections, session-user merges, or correcting view record integrity following audits or incident response. If the record being updated does not exist, an error is returned.\n\nRelated APIs include creating new view logs (when a comment is viewed), deletion (removing corrupt view logs), and batch analytics retrieval endpoints (not in this operation set).","summary":"Update a comment view record in discussionboard_comment_views.","parameters":[{"name":"id","description":"Unique identifier of the comment view record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update for the target comment view record.","typeName":"IDiscussionboardCommentView.IUpdate"},"responseBody":{"description":"Updated comment view record.","typeName":"IDiscussionboardCommentView"},"authorizationRoles":["admin"],"path":"/discussionboard/commentViews/{id}","method":"put"},{"specification":"Delete a specific comment view record from the discussionboard_comment_views table. The comment views table is used for engagement tracking and site analytics, as required by business and audit specifications. Deletion is a privileged operation, primarily for data correction or legal compliance, since such records underpin analytic and reporting needs.","description":"This API endpoint deletes a specific comment view record in the discussionboard_comment_views entity, as identified by the unique record ID. The comment views table contains atomically one view record per combination of comment, user/session, and view occurrence. This API supports privileged administrative deletion of a view event—such as for correcting anomalous user behavior, honoring legal removal requests, or cleaning up corrupt/incomplete data from the analytics dataset.\n\nSecurity: Accessible only to platform admins or backend services with audit logging. Normal users are not permitted to erase analytics/view events, to ensure reliable reporting and anti-abuse detection.\n\nPrior to deletion, the endpoint validates the existence of the comment view record with the given ID. If the record is not found, a suitable error is returned. This operation is accompanied by other endpoints for batch analytics retrieval and view state corrections.","summary":"Delete a comment view record from discussionboard_comment_views.","parameters":[{"name":"id","description":"Unique identifier of the comment view record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/commentViews/{id}","method":"delete"},{"specification":"Retrieve a paginated and searchable list of content reports submitted by users for moderation or audit in the discussionboard_reports table. This is central to compliance, moderation workflow, and system health monitoring. Includes status, timestamps, reporter, content type, and cross-links to related moderation actions. Implements the report-listing requirements from the moderation and compliance sections of the requirements analysis.","description":"This API endpoint lists reports submitted by users regarding posts or comments, referencing the discussionboard_reports entity. Each report includes details on the reporting user, content (post/comment), report reason, status, timestamps, and potential cross-links to resolved actions (such as moderation, warnings, or bans). Provides search and filtering on status, date, reason, reporter, and related content, allowing batch export or paginated browsing by moderators or admins. This is necessary for moderation team triage, policy enforcement, and systematic reporting on content health.\n\nSecurity: Only accessible to moderators and admins. The endpoint is protected with role-based access controls and audit logging. Query options include pagination controls, search strings, status filtering, and date range selectors.\n\nValidation: Ensures parameters are valid, returns filtered list with metadata for reporting and workflow management. Related endpoints include single report detail, report creation (by member), and related action retrievals.","summary":"List and search user content reports in discussionboard_reports.","parameters":[],"requestBody":{"description":"Search, filter, and pagination info for retrieving reports.","typeName":"IPageIDiscussionboardReport.IRequest"},"responseBody":{"description":"Paginated result of content reports in discussionboard_reports.","typeName":"IPageIDiscussionboardReport"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports","method":"patch"},{"specification":"Retrieve detailed information for a specific user-submitted content report from the discussionboard_reports table. This is a critical endpoint for moderation review, compliance checking, and report tracking workflows. Each report details the reported content, reporter, reason, and related status information.","description":"This API endpoint retrieves a detailed report entry from the discussionboard_reports entity by its unique ID. The reports table tracks flagged content submitted by users for moderator/admin attention, including target post/comment, report reason, status (pending, resolved, etc.), timestamps, reporter details, and related moderation notes. The endpoint returns all normalized details, links to related moderation actions, and status history. It is used by moderators and admins to review, track, or update flagged content throughout the moderation lifecycle.\n\nSecurity: Role-based restriction—allowed for moderators and admins only, with audit logging of access. Querying the report populates details for moderation dashboards, appeals workflows, or compliance documentation.\n\nHandles not found and reference errors, aligns with report listing/search and report action endpoints.","summary":"Get details of a content report from discussionboard_reports by ID.","parameters":[{"name":"id","description":"Unique identifier of the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed report entry from discussionboard_reports.","typeName":"IDiscussionboardReport"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports/{id}","method":"get"},{"specification":"Submit a new content report to the discussionboard_reports table. Enables members to flag inappropriate, abusive, or off-topic posts/comments for moderator review, fulfilling moderation and community health requirements.","description":"This API endpoint allows an authenticated member to report a post or comment for moderation. Submitting a report creates a new row in the discussionboard_reports entity, recording the reporting member, content link (post or comment ID), report reason (e.g., hate speech, spam), and initializes status and audit fields. Required for real-time user-driven moderation and escalations, this endpoint is the main entry for community self-moderation and flagging workflows.\n\nSecurity: Member authentication required. Restrictions prevent duplicate open reports from the same member on the same content. Related endpoints exist for report review, moderation action, and status updates.\n\nValidates request payload, links report to both the content and reporting user, and integrates with notification systems for moderator alerting. Handles content nonexistence and reference errors according to normalized schema constraints.","summary":"Create a new user content report in discussionboard_reports.","parameters":[],"requestBody":{"description":"Report creation parameters (target content, reason, etc).","typeName":"IDiscussionboardReport.ICreate"},"responseBody":{"description":"The newly created content report entry.","typeName":"IDiscussionboardReport"},"authorizationRoles":["member"],"path":"/discussionboard/reports","method":"post"},{"specification":"Update/resolve a specific user content report in the discussionboard_reports table. Used for processing moderation outcomes, updating statuses/notes, or implementing appeals workflows. Authorized for moderators and admins only.","description":"This API endpoint updates a content report in the discussionboard_reports entity by its unique ID. Typical uses include moderation responses such as resolving, rejecting, or adding moderation notes/comments to a submitted report following review. The operation integrates with action/audit logs and status management features, as required for full compliance and workflow handling. Only accessible to moderators or admins, with all operations logged for audit compliance.\n\nRequest must specify updated fields, such as status (e.g., resolved, rejected), moderation notes, or associated moderation actions. All updates validate referential integrity; errors are returned if the report is not found or is already finalized/locked. Related endpoints include single report retrieval, moderation action APIs, and batch listing/search endpoints.","summary":"Update or resolve a user content report in discussionboard_reports.","parameters":[{"name":"id","description":"Unique identifier of the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the selected content report (e.g., status, notes).","typeName":"IDiscussionboardReport.IUpdate"},"responseBody":{"description":"Updated report entry in discussionboard_reports.","typeName":"IDiscussionboardReport"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports/{id}","method":"put"},{"specification":"Delete a specific content report from discussionboard_reports, supporting moderation correction, legal compliance, or data retention workflows. Only privileged actors may access this endpoint to ensure moderation integrity and auditability.","description":"This API endpoint deletes (removes) a report from the discussionboard_reports entity based on its unique ID. Content reports are created any time a member flags a post or comment. Deletion is permitted only for system admins or moderators, supporting legal removal, retention policy cleanup, or administrative corrections. The endpoint checks for existence before deletion and ensures all related moderation records are handled according to compliance policy.\n\nSecurity: Accessible only to privileged roles (admin/moderator), cannot be called by the original reporting member. All deletion/correction actions are logged for compliance, and errors are returned for constraint violations or non-existent IDs. Related endpoints enable creation, update, and retrieval for moderation workflows.","summary":"Delete a content report from discussionboard_reports.","parameters":[{"name":"id","description":"Unique identifier of the content report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports/{id}","method":"delete"},{"specification":"Retrieve a paginated, filterable list of moderation actions from the discussionboard_moderation_actions table. Enables comprehensive review of historical and current actions taken by moderators/admins for compliance, transparency, and reporting.","description":"This API endpoint retrieves a batch list of moderation actions taken on the platform, referencing the discussionboard_moderation_actions entity. Each action entry includes details about the actor (admin, moderator, member), related reports or content, action type, rationale, and event timestamps. Critical for moderation dashboards, compliance audits, incident investigations, and analytics reporting.\n\nSupports search, filter, and pagination by actor, action type, date, and affected content. Usage is restricted to authorized roles (admin/moderator), with all accesses logged for compliance. Returns paginated results and supports workflow integration with report, ban, warning and audit logs. Validation ensures filter criteria are syntactically and semantically valid.","summary":"List and search moderation actions in discussionboard_moderation_actions.","parameters":[],"requestBody":{"description":"Search and filter criteria for moderation actions listing.","typeName":"IPageIDiscussionboardModerationAction.IRequest"},"responseBody":{"description":"Paginated result of moderation actions.","typeName":"IPageIDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions","method":"patch"},{"specification":"Retrieve details of a specific moderation action from the discussionboard_moderation_actions table, supporting transparency, auditing, or dispute resolution.","description":"This API endpoint fetches details of a particular moderation action in the discussionboard_moderation_actions entity by ID. Actions may include post removals, user bans, warnings, status updates, and so on—all tracked for platform compliance and user-appealable transparency. Returns all normalized fields including actor information, related report or content, type and reason of action, and timestamps. Used in moderation dashboards, audit trails, reports, and appeals interfaces.\n\nAccess is restricted to admins/moderators. Audit logs are updated with every access to this endpoint. Handles not-found and permission errors according to compliance requirements. Related endpoints include batch action listing, creation, and update.","summary":"Get moderation action details from discussionboard_moderation_actions by ID.","parameters":[{"name":"id","description":"Unique identifier of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation action entry.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions/{id}","method":"get"},{"specification":"Create a new moderation action entry in the discussionboard_moderation_actions table. Used by admins and moderators to log interventions or resolutions during moderation and audit workflows.","description":"This API endpoint allows platform admins or moderators to log a new moderation action within discussionboard_moderation_actions. Each action includes details on the acting user/role (admin/mod/member), the related report or affected content, action type (e.g., 'warn', 'ban', 'delete content'), rationale, and event timestamp. Used to formally record workflow steps in moderation dashboards, support adherence to compliance, and power audit reporting.\n\nValidates payload structure, role permissions, and referential integrity with content and actor information. Usage is restricted to authorized roles, all activity is logged, and related APIs permit further audit, review, and management of user-generated actions.","summary":"Create a new moderation action in discussionboard_moderation_actions.","parameters":[],"requestBody":{"description":"Details for the new moderation action (actor, target, type, reason, etc).","typeName":"IDiscussionboardModerationAction.ICreate"},"responseBody":{"description":"The newly created moderation action entry.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions","method":"post"},{"specification":"Update a specific moderation action in the discussionboard_moderation_actions table to correct, supplement, or annotate moderation record history. Only for admin/moderator use, enforced via RBAC and audit logging.","description":"This API endpoint updates an existing moderation action by ID in the discussionboard_moderation_actions entity. Permits updates to action reason, notes, or certain allowed fields for record correction or transparency improvements. Only privileged staff may use this endpoint; role and audit controls apply. The endpoint checks the record exists, validates update fields, and ensures referential and workflow integrity. Linked to audit log for immutable trace of changes.\n\nRelated operations include action creation, retrieval, and listing endpoints. Use this endpoint for tracking policy changes, addenda, or resolution corrections to past moderation activities.","summary":"Update a moderation action in discussionboard_moderation_actions by ID.","parameters":[{"name":"id","description":"Unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the moderation action record.","typeName":"IDiscussionboardModerationAction.IUpdate"},"responseBody":{"description":"Updated moderation action entry.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions/{id}","method":"put"},{"specification":"Delete a specific moderation action record from the discussionboard_moderation_actions table. Used for administrative corrections or compliance with legal retention requirements. Highly restricted.","description":"This API endpoint deletes a moderation action record in the discussionboard_moderation_actions entity, by unique ID. Removal of moderation records is rare and only permitted for administrators, such as in case of erroneous logging, sensitive data leakage, or legal obligation to redact moderation history. The operation requires record existence and will update audit logs with detailed reason for deletion/correction. Deletions are logged for compliance tracking, and will cascade/warn on related downstream references depending on database settings.\n\nAccess is role-protected (admin only, typically with internal escalation procedures) and all actions are audited. Related endpoints manage action creation, inspection, and updates. Not available to standard users or moderators without additional privilege.","summary":"Delete a moderation action in discussionboard_moderation_actions.","parameters":[{"name":"id","description":"Unique identifier of the moderation action to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderationActions/{id}","method":"delete"}],"completed":132,"total":180,"step":0,"created_at":"2025-07-22T13:35:01.062Z"},"tokenUsage":{"facade":{"aggregate":{"total":508533,"input":{"total":471676,"cached":25856},"output":{"total":36857,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":508533,"input":{"total":471676,"cached":25856},"output":{"total":36857,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":508533,"input":{"total":471676,"cached":25856},"output":{"total":36857,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":508533,"input":{"total":471676,"cached":25856},"output":{"total":36857,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new tag in the discussion board. This endpoint is responsible for adding new tags that can be attached to boards or posts, as defined by the 'discussionboard_tags' Prisma table. The Prisma comments state that this entity is for tag definitions, including label, description, and uniqueness maintenance. The request will contain atomic tag data such as the tag string, optional description, and timestamps will be set by the server. Only admins or moderators should have access to this endpoint, enforcing RBAC on writes to tag definitions. Related endpoints include PATCH for lists and PUT/DELETE for tag update or removal. Responds with the newly created tag object including its unique ID and all fields.","description":"This operation creates a new tag in the discussionboard_tags table. It requires the user to provide a tag string (unique), an optional description, and potentially other relevant fields from the schema. Upon successful creation, the server responds with the tag object including its assigned database ID and creation/update timestamps. Only authorized users (admins/moderators) may write tag definitions. Validation ensures tag uniqueness and non-empty value. In case of violation or duplicate, a corresponding error is returned. The tag model is referenced by the Prisma schema as a definition-only table. Timestamps and additional metadata are handled by the server. This operation is typically one of a suite of tag management endpoints, together supporting CRUD for tag definitions.","summary":"Create a new tag (discussionboard_tags table)","parameters":[],"requestBody":{"description":"Data for the new tag to be created.","typeName":"IDiscussionboardTag.ICreate"},"responseBody":{"description":"Details of the created tag, including unique ID, tag value, description, and timestamps.","typeName":"IDiscussionboardTag"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/tags","method":"post"},{"specification":"Update an existing tag in the discussion board. This endpoint facilitates updating tag label or description as defined by the 'discussionboard_tags' Prisma table. Applies to cases where a tag label must be corrected or clarified. The tag is uniquely identified by its ID (a UUID) in the path. Write access must be restricted to admins and moderators, and uniqueness should be enforced at the application or DB level. The request body allows updating of the tag string and description according to business rules. The response contains the updated tag record. Related endpoints are POST for tag creation and DELETE for removal. The endpoint maintains data integrity and ensures historical accuracy via timestamps.","description":"This endpoint updates an existing tag, uniquely identified by path parameter {id}, in the discussionboard_tags table. Supported updates include changing the tag string or its description. Incoming values are validated for uniqueness, nonempty tag string, and completeness against business logic. Only admins and moderators are permitted to perform this update. The server updates the fields as requested and returns the complete tag object post-update. Errors are returned if the tag does not exist or constraint violations occur (duplicates, etc). Descriptions reference the Prisma schema which ensures normalized, atomic storage of tag metadata and related behaviors described in requirements analysis.","summary":"Update an existing tag (discussionboard_tags table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the tag, including label or description.","typeName":"IDiscussionboardTag.IUpdate"},"responseBody":{"description":"The updated tag object with all its properties.","typeName":"IDiscussionboardTag"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/tags/{id}","method":"put"},{"specification":"Delete a tag from the discussion board. This endpoint implements DELETE functionality for tag definitions, directly aligned with the 'discussionboard_tags' Prisma table. Tag to be deleted is uniquely identified by its ID (UUID) in the URL path. Only admin or moderator roles can perform this operation. This endpoint ensures referential integrity and that no business logic (e.g., tag in-use checks) is violated prior to actual deletion. The endpoint responds with the deleted tag's data for audit purposes or a confirmation message on success. Related endpoints are POST for creation and PUT/PATCH for update of tags.","description":"This operation deletes an existing tag from the discussionboard_tags table. The tag to be deleted is specified by its unique ID, passed as a path parameter. Role-based access control ensures only admins or moderators can delete tags. Server-side logic must confirm the tag exists and is not in protected use, responding with appropriate errors otherwise. Deletion updates are logged and referenced in audit trails. The Prisma schema guarantees that each tag is atomic, and this operation allows for the removal or retirement of obsolete, erroneous, or inappropriate tags as part of system and admin requirements.","summary":"Delete an existing tag (discussionboard_tags table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the tag to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Information about the deleted tag or confirmation of deletion.","typeName":"IDiscussionboardTag"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/tags/{id}","method":"delete"},{"specification":"Retrieve a paginated and searchable list of board subscriptions for discussion board. Implements listing and query/search of 'discussionboard_board_subscriptions' as described in the requirements for notification and board following features. Supports advanced filtering such as by member or board ID, creation date, and sorts for audit/logging purposes. RBAC is typically enforced so only the owner, or an admin/moderator, can see all records. The endpoint takes request body with filters, pagination, search term, and returns a paged list of subscription objects. References the Prisma schema and business need to display/manage board subscriptions interactively in user settings or admin dashboards.","description":"Returns a paged list of board subscriptions. Can be filtered or searched by board, member, created date, or other criteria. The request body allows for arbitrary search and pagination per platform policy. Results include full subscription objects with references to board and user, and audit timestamp. Only relevant users (owners/admins/mods) can view or list all board subscriptions, per RBAC. Errors may occur if user not authenticated or requested filters are invalid. Based on 'discussionboard_board_subscriptions' as defined in the Prisma and requirements documentation.","summary":"Search and list board subscriptions (discussionboard_board_subscriptions table)","parameters":[],"requestBody":{"description":"Request parameters for pagination, filtering, or searching the list of board subscriptions.","typeName":"IDiscussionboardBoardSubscription.IRequest"},"responseBody":{"description":"Paginated list of board subscriptions matching search and filter criteria.","typeName":"IPageIDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions","method":"patch"},{"specification":"Retrieve details for a specific board subscription. This GET endpoint allows a user, admin, or moderator to fetch detailed information about a particular subscription, as defined in 'discussionboard_board_subscriptions' Prisma comments. The subscription record is uniquely identified using a UUID path parameter. Access control may restrict viewing to the owner/subscriber themselves, or admin/moderator users as with all board subscription data. Result contains all record fields including foreign key references, user/board IDs, and timestamp. Typically used in settings or notification feature UIs.","description":"Fetch a board subscription by its unique ID. The endpoint returns the explicit subscription object, including subscriber and board references, and audit created timestamp. Only the relevant user or privileged platform roles can access a given board subscription. Nonexistent IDs or unauthorized access lead to error responses. The endpoint is defined for 'discussionboard_board_subscriptions' main entity and aligns with standard resource-centric API patterns. All data returned complies with audit, retention, and search/display requirements.","summary":"Get details of board subscription (discussionboard_board_subscriptions table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the board subscription to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Board subscription details.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions/{id}","method":"get"},{"specification":"Create a new board subscription. This endpoint implements creation for user subscription to a board feature, as required for notifications and personalized content feeds. Aligned to 'discussionboard_board_subscriptions' Prisma comments, it receives details of the board and member, checks validity and uniqueness, then writes new normalized record. Only authenticated members (possibly admins/mods on behalf of others) may create a subscription. Validation ensures a user cannot subscribe to the same board multiple times. The response includes the newly created subscription with foreign keys, timestamps, and all associated properties.","description":"This operation creates a new subscription linking a member to a board, as described by discussionboard_board_subscriptions. Only authenticated users or authorized roles are permitted to perform this action. The request body must contain the board ID, user/member ID, and any required creation parameters. The server validates constraints and either inserts or rejects the record with appropriate error messages. Upon success, the result is the full board subscription object. This endpoint supports the personalized notification and board tracking features outlined in requirements and the Prisma schema.","summary":"Create a board subscription (discussionboard_board_subscriptions table)","parameters":[],"requestBody":{"description":"Information about the new subscription (board ID, member ID, etc).","typeName":"IDiscussionboardBoardSubscription.ICreate"},"responseBody":{"description":"Details of the created subscription record.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions","method":"post"},{"specification":"Update a specific board subscription. This endpoint applies updates to an existing board subscription record identified by its unique ID (UUID), as defined in 'discussionboard_board_subscriptions' Prisma schema. Allows changing of properties specified as mutable in business logic, typically owner or board link in error correction. Only permitted for owner/member themselves or admin/moderator. The request body contains the fields to update; server validates and applies, then returns the modified record. Used in settings or for correcting problems with subscription links. RBAC enforced as per resource ownership and role descriptions.","description":"Given an existing board subscription identified by {id}, this endpoint performs updates per the request body provided. Usually invoked to fix or adjust user-board linkages. Only the owner (member) or privileged roles (admin, moderator) are allowed to update. If resource does not exist, or changes violate uniqueness or foreign key constraints, errors are returned. Responds with updated subscription object and all current fields, referenced in audit logs as required by compliance policies.","summary":"Update a board subscription (discussionboard_board_subscriptions table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the board subscription record.","typeName":"IDiscussionboardBoardSubscription.IUpdate"},"responseBody":{"description":"Updated board subscription record.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions/{id}","method":"put"},{"specification":"Delete a specific board subscription entry. Implements the removal (unsubscribe) logic as outlined for user notification and board tracking features in the requirements and 'discussionboard_board_subscriptions' Prisma definition. Uniquely identifies the record using the {id} path variable (UUID). RBAC restricts the action to subscription owners or platform staff (admin/moderator) as appropriate. Server validates existence and legitimacy of unsubscribe action, then deletes and returns the deleted record (for audit/undo/log). This endpoint complements POST (subscribe) and PATCH (list) entrypoints.","description":"Remove (unsubscribe) an existing board subscription by ID. This endpoint is used when a member no longer wishes to follow a board, or admin/moderator removes an invalid subscription. Only the subscription owner (or privileged staff) is allowed to perform the operation. The process checks RBAC, confirms the record's existence and validity, and deletes if all checks pass. Response details are provided for compliance/audit, as logged in the discussionboard_board_subscriptions table. Returns the deleted object or a confirmation message.","summary":"Delete a board subscription (discussionboard_board_subscriptions table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the subscription to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Information about the deleted subscription record or confirmation.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions/{id}","method":"delete"},{"specification":"Retrieve a searchable and paginated list of board settings. Implements advanced filtering, searching, and paging over the board settings entity for discussion boards as described by 'discussionboard_board_settings' in the Prisma and requirements doc. Used for admin management of board feature toggles, approvals, and other per-board settings. RBAC restricts write/update operations, but read/list may be open or restricted depending on sensitivity. The endpoint expects a request body with search terms, filters, sort, and pagination info. The response is a list of settings records with full schema properties as defined. Related endpoints include POST, PUT, and DELETE for board settings management.","description":"Lists board settings with search and filtering. The request may specify filters such as board, approval flag, or image setting, and standard pagination params. Useful for admin UIs, reporting, or troubleshooting per-board configuration. Returns a paged result set conforming to the schema's properties, used elsewhere for feature toggling or display in management UI. Errors may indicate authentication/authorization failures, malformed requests, or search constraints not met. Complies with requirements for admin/privileged access and UI-driven management.","summary":"Search and list board settings (discussionboard_board_settings table)","parameters":[],"requestBody":{"description":"Search and pagination information for board settings listing.","typeName":"IDiscussionboardBoardSetting.IRequest"},"responseBody":{"description":"Paginated list of board settings matching the criteria.","typeName":"IPageIDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings","method":"patch"},{"specification":"Get details of a single board's settings. This GET endpoint fetches settings for a particular board, used for toggling features like image posting or required approval, as described in 'discussionboard_board_settings' Prisma comments. Uniquely identified by a UUID path parameter (the settings ID, which may also be the board ID due to 1:1 mapping). Only admins may access to update or view, enforcing RBAC. The response contains the full set of settings for the given board, suitable for admin settings UIs. Related endpoints enable creation (POST), update (PUT), and deletion as needed per business logic.","description":"Retrieve a board setting by unique ID. Outcome includes all settings fields, such as allow_images and require_moderator_approval, with timestamps for audit. Only authorized platform roles (admins) may access this data. If the specified record does not exist, returns an appropriate error or empty response. Based on atomic 1:1 structure in discussionboard_board_settings per Prisma and requirements. Used for detailed configuration views in admin console.","summary":"Get board setting (discussionboard_board_settings table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the board setting to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Board setting object with all relevant properties.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings/{id}","method":"get"},{"specification":"Create a new board setting entry. Implements creation of per-board settings, such as feature toggles and moderator flag requirements, for the discussion boards. This operation follows the 'discussionboard_board_settings' model and requirements for admin-driven customization and RBAC. Requires admin privileges. The request provides all necessary properties (board ID, flags, etc) to set up the associated settings. The response returns the new settings object with all fields as defined in the schema, including the generated ID, references, and timestamps. Relates to PATCH for list/search, PUT for update, and DELETE for removal.","description":"Accepts creation data for a new board settings record. Admin user must specify board (by ID) and feature flags, such as allow_images or require_moderator_approval. Upon validation and insertion, the full settings object is returned, including all schema fields. Only admins are permitted to create/update board-level settings. Violations in input or referential integrity are met with informative errors. Reference is to 'discussionboard_board_settings' in Prisma schema and business requirements analysis.","summary":"Create board setting (discussionboard_board_settings table)","parameters":[],"requestBody":{"description":"Data needed to create the board settings entry (board ID, feature flags, etc).","typeName":"IDiscussionboardBoardSetting.ICreate"},"responseBody":{"description":"Newly created board setting object with all parameters.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings","method":"post"},{"specification":"Update board setting details for a specific board. Implements update/mutation of per-board configuration per 'discussionboard_board_settings' table. Used by admins to enable/disable image posting, require approval, and other custom settings. Target settings record is identified by path parameter (unique ID, UUID). Requires admin authority; input validated by business logic. Response is updated board settings object reflecting the changes. Related endpoints support list/search (PATCH), create (POST), and delete as needed per business policy and platform design.","description":"With a given settings record ID in the path, this endpoint updates board settings fields per provided request body. Usually invoked from admin management UI. Only admins have permission. Fields such as allow_images and require_moderator_approval are mutable. Errors include not found, integrity conflicts, or policy rule violations. Changes are logged as required for audit. Uses 'discussionboard_board_settings' as defined by Prisma schema, referencing all model properties and RBAC enforcement. The update result contains the full board settings object.","summary":"Update board setting (discussionboard_board_settings table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the board setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the board setting object.","typeName":"IDiscussionboardBoardSetting.IUpdate"},"responseBody":{"description":"Updated board setting object with all parameters.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings/{id}","method":"put"}],"completed":144,"total":180,"step":0,"created_at":"2025-07-22T13:35:10.258Z"},"tokenUsage":{"facade":{"aggregate":{"total":552036,"input":{"total":511226,"cached":25856},"output":{"total":40810,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":552036,"input":{"total":511226,"cached":25856},"output":{"total":40810,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":552036,"input":{"total":511226,"cached":25856},"output":{"total":40810,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":552036,"input":{"total":511226,"cached":25856},"output":{"total":40810,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new audit log entry for significant events related to moderation, access, or system actions in the Discussion Board platform. This endpoint is primarily used to store immutable audit records for actions taken by admins, moderators, or system processes. It references the 'discussionboard_audit_logs' table, which records who performed the action, event type, detail, and contextual entity references per requirement 2.6 in moderation and compliance mandates. Only allowed for system/integration/admin operations - regular members are not permitted to arbitrarily create logs. Data must be immutable after creation (except for structured compliance adjustments) to support regulatory and incident root-cause analysis.","description":"This API operation creates a new entry in the 'discussionboard_audit_logs' table to record a system-level, moderation, or user action. Each record contains information about the actor (admin, moderator, member), the nature of the event (such as permission elevation, report status update, ban imposition), optional references to related moderation/report actions, and a detailed log of what transpired. Actions recorded include but are not limited to: moderator actions on reports, warnings, bans, permission changes, and audit-relevant configuration changes. \n\nThe audit log maintains strict 3NF normalization: all fields are atomic and must reference existing entities by foreign key where needed. Log entries are immutable, created at the moment of the event for traceability. Only platform/internal logic or admin users with explicit permission should access this endpoint.\n\nReturned values include the new audit log entry as persisted in the DB. Error states include invalid/unauthorized creation attempts, missing references, or DB constraints violations.","summary":"Create a new audit log entry in discussionboard_audit_logs table for platform accountability.","parameters":[],"requestBody":{"description":"Audit log details to create a new system or moderation action log entry.","typeName":"IDiscussionboardAuditLogs.ICreate"},"responseBody":{"description":"Full persisted audit log entry after creation.","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/auditLogs","method":"post"},{"specification":"Update an existing audit log entry in the 'discussionboard_audit_logs' table. This is only permitted for explicit compliance or regulatory reasons, not for arbitrary log edits (logs are generally immutable after creation). This endpoint allows authorized compliance administrators to fix or annotate log data for legal purposes (example: append regulatory disclosure note without changing original event detail). References the 'discussionboard_audit_logs' table and enforces strict audit trail throughout all updates. Used only in rare, controlled circumstances.","description":"This API operation updates an existing entry in 'discussionboard_audit_logs' by its unique ID. It is locked down for use exclusively by compliance owners: regular admins, moderators, and members cannot update audit logs. Allowable changes are generally restricted to annotating logs with compliance notes, not changing the recorded actor/event/core detail. Business logic must ensure immutability except for pre-approved audit/compliance fields. \n\nStrict validation and logging are required for any update attempt, and a secondary audit entry must be created for each allowed update to preserve change history. Errors are returned for unauthorized or invalid update attempts.","summary":"Update specific fields of an audit log for compliance (rare) in discussionboard_audit_logs table.","parameters":[{"name":"id","description":"Target audit log's ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this audit log entry (compliance-allowed only).","typeName":"IDiscussionboardAuditLogs.IUpdate"},"responseBody":{"description":"Updated audit log entry, reflecting compliance change.","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/auditLogs/{id}","method":"put"},{"specification":"Delete an audit log entry by ID (soft delete or compliance erase only). This is an extraordinary operation, not allowed for routine admin or moderator work, and should only occur for legal compliance (such as right-to-be-forgotten or regulatory purge events). Directly references the 'discussionboard_audit_logs' table. Deletion is soft (a flag or timestamp field is updated) to maintain audit integrity unless hard erasure is required by law.","description":"This operation marks an audit log entry as deleted or purges it for compliance purposes. Only compliance or privacy officers with explicit high-level authorization may perform this operation; logs should never be deleted by ordinary members, moderators, or standard admins. Upon deletion, the entry is either flagged as deleted (soft delete) for traceability or truly erased if required by compliance laws. Must log the deletion action in a separate, privileged audit log.\n\nAPI does not return the deleted record but may include a status confirming deletion and timestamp. Errors cover unauthorized attempts, ID not found, or integrity policy violations.","summary":"Delete (soft or compliance erase) an audit log entry from discussionboard_audit_logs by ID.","parameters":[{"name":"id","description":"Target audit log entry's ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of soft/hard deletion or compliance erase.","typeName":"IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/auditLogs/{id}","method":"delete"},{"specification":"Retrieve a paginated/filterable list of all community guideline entries in the 'discussionboard_community_guidelines' table. This endpoint is primarily used for admin audits, guideline display in settings, and moderation enforcement interfaces. Returned list supports filtering by status/keyword and is ordered as per 'order_index'. References 'discussionboard_community_guidelines', enabling management of all community guidelines for the platform.","description":"This API retrieves a paginated and optionally filtered list of all active and inactive community guideline entries stored in 'discussionboard_community_guidelines'. Returned fields include guideline ID, title, body text, display order, status (active/inactive), and audit timestamps. Filtering parameters may be supported in request body for keyword, status, or ordering, to help administrators audit and moderate policies. All records are normalized and order_index is used to display the guidelines in intended sequence.\n\nThe endpoint is used by admin panels, moderation dashboards, and user/community FAQ viewers. Error cases handle filter validation and DB access issues.","summary":"Get paginated/filterable community guideline list from discussionboard_community_guidelines.","parameters":[],"requestBody":{"description":"Optional filters and pagination for retrieving guideline list.","typeName":"IDiscussionboardCommunityGuidelines.IRequest"},"responseBody":{"description":"Paginated list of guidelines per filter params.","typeName":"IPageIDiscussionboardCommunityGuidelines"},"authorizationRoles":null,"path":"/discussionboard/communityGuidelines","method":"patch"},{"specification":"Retrieve a single community guideline entry by its unique ID from the 'discussionboard_community_guidelines' table. Used for admin guideline management, moderation policy reference, or user display of policy detail. Supports audit-compliance as required by the requirements document. Returns all fields for this guideline record.","description":"This operation returns a specific guideline's full record, given the guideline's unique database ID. The returned record includes all relevant information: ID, title, body, order index, active/inactive status, and audit fields such as created and updated timestamps. Only system admins and moderators may modify records, but this endpoint can be public if guidelines are to be displayed to end users.\n\nError conditions include not found (invalid ID), unauthorized access for private records, or DB errors.","summary":"Get a single community guideline entry from discussionboard_community_guidelines by ID.","parameters":[{"name":"id","description":"Target community guideline's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full guideline record for the given ID.","typeName":"IDiscussionboardCommunityGuidelines"},"authorizationRoles":null,"path":"/discussionboard/communityGuidelines/{id}","method":"get"},{"specification":"Create a new community guideline entry to be enforced platform-wide in 'discussionboard_community_guidelines'. This endpoint is used exclusively by admins to add or change formal community standards as described in the guidelines requirements. Result is persisted for audit/reference and appears in platform guideline listings.","description":"This API operation enables an admin to add new community guideline records to the normalized guidelines table. Input must provide at least title and full guideline body, plus display order and initial status (active). New entries are immediately available for user onboarding, FAQ, or moderation enforcement.\n\nValidation ensures uniqueness and compliance of titles/order_index, full audit fields are automatically set, and changes are logged for compliance. Any error covers duplicate titles/order index, missing fields, or policy violation attempts.","summary":"Create a new guideline record in discussionboard_community_guidelines (admin only).","parameters":[],"requestBody":{"description":"Fields for the new community guideline entry.","typeName":"IDiscussionboardCommunityGuidelines.ICreate"},"responseBody":{"description":"Full persisted guideline entry after creation.","typeName":"IDiscussionboardCommunityGuidelines"},"authorizationRoles":["admin"],"path":"/discussionboard/communityGuidelines","method":"post"},{"specification":"Update or overwrite an existing community guideline entry in 'discussionboard_community_guidelines' by unique ID. This is for guideline revisions or policy updates, not soft deletes. Used by system admins for formal content changes. Modifies title, body, order_index, or is_active status. Compliance audits are mandatory for this endpoint. All changes are tracked.","description":"This API operation updates an existing guideline record by unique ID, allowing system admins to change the policy title, full body, display order, or activation status. All fields in the existing record may be modified following validation. Each change must be audit-logged, and appropriate consistency checks enforced (e.g., unique title/order_index, non-empty required fields). \n\nError cases cover record not found, invalid data, title/order index collisions, or unauthorized update attempts. Changes are visible instantly in admin user/FAQ displays.","summary":"Update an existing guideline by ID in discussionboard_community_guidelines (admin only).","parameters":[{"name":"id","description":"Guideline record's ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated guideline fields.","typeName":"IDiscussionboardCommunityGuidelines.IUpdate"},"responseBody":{"description":"Guideline record as updated.","typeName":"IDiscussionboardCommunityGuidelines"},"authorizationRoles":["admin"],"path":"/discussionboard/communityGuidelines/{id}","method":"put"},{"specification":"Delete a community guideline entry by ID (soft delete or hard erase). Referenced from 'discussionboard_community_guidelines'. Only system admins or compliance officers are allowed to use this endpoint, and audit records must be written for each deletion. Routine admin or moderator users generally should not delete guidelines unless authorized. May be soft delete with a flag or timestamp, or fully deleted if required by policy.","description":"This operation deletes a guideline entry by unique ID from 'discussionboard_community_guidelines'. Only high-privilege admins or compliance leads may delete guidelines (soft delete strongly preferred for traceability, except for hard compliance erase scenarios). Each deletion must also trigger a new audit log entry describing the reason, time, and actor for the deletion. The endpoint returns confirmation and timestamp but not the deleted record details.\n\nErrors returned include unauthorized attempt, guideline not found, or integrity policy violation (e.g., trying to delete guideline in use by another component).","summary":"Delete a community guideline entry by ID from discussionboard_community_guidelines.","parameters":[{"name":"id","description":"ID of the guideline to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of guideline deletion (soft/hard) with time.","typeName":"IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/communityGuidelines/{id}","method":"delete"},{"specification":"Retrieve a paginated/filterable list of all content policy records in 'discussionboard_content_policies'. Used for policy review, moderation configuration, onboarding, and admin audits. Supports keyword/status/category filtering. Returns normalized record data for all platform content policies in the current version.","description":"This endpoint retrieves a paginated/filtered list of content policies, including active/inactive (by is_active flag), policy_code, description, and category fields. Policy admins and moderation UIs use this endpoint to review policies, edit enforcement, and maintain up-to-date documentation. Filtering and pagination may use request body parameters for keyword search, active status, category, or order.\n\nErrors include validation of filters, access control checks, and DB issues. Output includes relevant pagination metadata per platform's list formats.","summary":"Get paginated/filterable content policy list from discussionboard_content_policies.","parameters":[],"requestBody":{"description":"Optional filters and pagination for policy listing.","typeName":"IDiscussionboardContentPolicies.IRequest"},"responseBody":{"description":"Paginated list of content policies per filters.","typeName":"IPageIDiscussionboardContentPolicies"},"authorizationRoles":null,"path":"/discussionboard/contentPolicies","method":"patch"},{"specification":"Retrieve a specific content policy record from 'discussionboard_content_policies' by unique ID. Used for policy configuration, onboarding, and live moderator/content violation checks. Supports public reading if needed, but only admins can modify records. Returns all record fields, normalized per schema.","description":"This API returns a single content policy by its unique database ID, reporting all fields including policy_code, description, category, is_active status, and audit timestamps (created_at, updated_at). Admins and policy managers use it to display/edit rules; users may read it for compliance info.\n\nError conditions return for not found, DB errors, or unauthorized access for restricted records.","summary":"Get a specific content policy entry by ID from discussionboard_content_policies.","parameters":[{"name":"id","description":"Target policy ID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full content policy record.","typeName":"IDiscussionboardContentPolicies"},"authorizationRoles":null,"path":"/discussionboard/contentPolicies/{id}","method":"get"},{"specification":"Create a new content policy entry in 'discussionboard_content_policies' to be enforced platform-wide. Only system admins may create policy records. Entry includes code, category, long-form description, and sets initial status (is_active). Used to document and enforce content rules described in requirements document.","description":"This operation creates a new content policy record for moderation and compliance, adding new enforced policies/platform rules. Administrative users must provide at least policy code (unique), description, category, and initial is_active flag. All changes are fully audited, and new records become available immediately for moderation/onboarding. The API replies with persisted record details, normalized.\n\nError states include invalid input, duplicate policy_code or category, and constraint violations. Audit logging is mandatory for every create action.","summary":"Create a new content policy entry as policy admin in discussionboard_content_policies.","parameters":[],"requestBody":{"description":"New content policy record fields to add.","typeName":"IDiscussionboardContentPolicies.ICreate"},"responseBody":{"description":"Full persisted policy record after creation.","typeName":"IDiscussionboardContentPolicies"},"authorizationRoles":["admin"],"path":"/discussionboard/contentPolicies","method":"post"},{"specification":"Update an existing content policy entry in 'discussionboard_content_policies' by unique ID. Allows admins to edit policy_code, description, category, or is_active fields as necessary for policy evolution/compliance. Full audit log required for all changes. Used to revise content moderation rules or respond to regulatory changes.","description":"This endpoint updates an existing content policy record by unique ID, changing any of the permitted fields as needed - mainly description, active status, code, or category. Validations enforce uniqueness and audit trail (e.g., duplicate code/category not allowed). Each update is logged for compliance with requirement 2.6. \n\nError cases include not found, input validation, or access control violations.","summary":"Update a content policy record by ID in discussionboard_content_policies (admin only).","parameters":[{"name":"id","description":"Policy ID of the content policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in content policy record.","typeName":"IDiscussionboardContentPolicies.IUpdate"},"responseBody":{"description":"Updated content policy record.","typeName":"IDiscussionboardContentPolicies"},"authorizationRoles":["admin"],"path":"/discussionboard/contentPolicies/{id}","method":"put"}],"completed":156,"total":180,"step":0,"created_at":"2025-07-22T13:35:14.209Z"},"tokenUsage":{"facade":{"aggregate":{"total":595078,"input":{"total":550775,"cached":25856},"output":{"total":44303,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":595078,"input":{"total":550775,"cached":25856},"output":{"total":44303,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":595078,"input":{"total":550775,"cached":25856},"output":{"total":44303,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":595078,"input":{"total":550775,"cached":25856},"output":{"total":44303,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements paginated list retrieval for bans imposed on admins, moderators, or members in the discussion board system. Supports searching, filtering, paging, and sorting by ban status, target, actor, and timespan. Related to the 'discussionboard_bans' table, which stores user bans as described in the Prisma schema and requirements. Exposes auditability and allows RBAC enforcement based on user role. Used by admin/moderator dashboards to monitor bans, discover recent suspensions, or review punishment history.","description":"This API operation provides a paginated and filterable list of all user bans within the discussion board. As described in the Prisma schema for \"discussionboard_bans,\" each ban record captures the target (admin, moderator, or member), actor (admin or moderator), ban reason, period, status, audit timestamps, and relationships to involved users. \n\nThe endpoint enables authorized administrators and moderators to search bans by status (active, expired, lifted), target type (role), ban reason, or time frame. It supports compliance audits and allows investigation of enforcement trends by surfacing date ranges or actors who issued bans. \n\nFilters should be applied server-side to honor performance and data privacy requirements. Sorting can be applied by start/end dates or creation time to track the most recent actions. RBAC checks must restrict access to appropriate roles (e.g., only moderators and admins may use this API). \n\nThis is a critical operation for moderation dashboards, daily reports, and incident investigations. Provides server-side pagination and can accept search keywords. \n\nReturned data references only normalized ban data, never exposing denormalized user content. Enforcement of data privacy for user IDs and ban details must be handled per organizational policies.","summary":"List and search bans from the discussionboard_bans table with pagination and filters.","parameters":[],"requestBody":{"description":"Search and filter criteria for ban list retrieval, including paging, filtering, and sorting.","typeName":"IDiscussionboardBan.IRequest"},"responseBody":{"description":"Paginated data and ban records matching the query criteria.","typeName":"IPageIDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans","method":"patch"},{"specification":"Retrieve a single ban record by its unique identifier (UUID). This operation exposes detailed data for the specified ban as stored in the 'discussionboard_bans' table, including target user, actor, reason, period, status, and audit history. Only accessible to admins and moderators. Used for detailed moderation review or ban status updates.","description":"Fetch the details of a specific ban using its unique UUID. The 'discussionboard_bans' schema entry links each ban to a specific admin, moderator, or member as the target and tracks ban metadata, including actor, rationale, time range, status, and timestamps. All relations and cross-entity references (e.g., actor/target role resolution) are normalized and must not expose sensitive data beyond what is authorized.\n\nInput validation must ensure the ID is a valid UUID, and access controls are enforced by role. Returned data delivers all ban detail fields and related IDs but requires the client to resolve user role mapping. Used in moderation review modals, ban status checks, and compliance audits.\n\nErrors are returned for invalid ID or if the ban does not exist. Only those with appropriate permissions may access detailed ban records.","summary":"Get detailed information for a single ban from discussionboard_bans by its ID.","parameters":[{"name":"id","description":"Target ban's ID (UUID) to retrieve details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed ban record for the specified UUID.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans/{id}","method":"get"},{"specification":"Create a new user ban (admin/moderator/member) in the discussion board system. This endpoint accepts a payload defining the ban's target, actor, reason, start/end date, and initial status. Relates to the 'discussionboard_bans' table and fulfills moderation workflow and compliance requirements. Available to admins and moderators only.","description":"This endpoint allows creation of a new ban record as defined in the 'discussionboard_bans' model. The request body must specify the user role/type being banned (admin, moderator, or member), the actor (admin/moderator) imposing the ban, the reason, time period (start/end datetimes), and status (active, scheduled, etc). Upon successful creation, the server returns the complete ban record with all generated fields (including UUID, creation time, etc).\n\nOnly administrators and moderators may invoke this endpoint, with all input validated for references and compliance with business rules. Cross-role relationships and foreign keys are checked to ensure the correct target/actor mappings.\n\nOn error (e.g., attempt to double-ban, self-ban, invalid actors), validation errors or forbidden status is returned. The ban is auditable and triggers moderation logs.","summary":"Create a new ban for a user (admin, moderator, or member) in discussionboard_bans.","parameters":[],"requestBody":{"description":"Ban creation request, specifying target, actor, reason, duration, and initial status.","typeName":"IDiscussionboardBan.ICreate"},"responseBody":{"description":"The created ban record with all associated fields.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans","method":"post"},{"specification":"Update an existing ban record by its UUID in the discussionboard_bans table. Used to change ban status, edit time period, or revise reason/actor for active or scheduled bans. Supports moderation workflows requiring retroactive clean-up or escalation. Only accessible to admins and moderators.","description":"This API operation updates an existing ban record as defined in the Prisma 'discussionboard_bans' schema. Input body specifies the changes to be made, referencing status, time range, reason, or actor. The endpoint enforces all business constraints, handles RBAC, and checks for valid actor/target linkages. If the ban is not active, error responses may be returned for forbidden modifications.\n\nBan records serve compliance, audit, and progressive moderation policies. Modifications are audit-logged, and change history may be made available to compliance officers or technical admins. Ban status transitions must follow business logic, and status field accepts controlled enum values: active, expired, lifted, scheduled, etc.\n\nErrors returned for missing ID, permission issues, or invalid update values. Only admins and moderators may use this operation.","summary":"Update details of an existing ban by ID in discussionboard_bans.","parameters":[{"name":"id","description":"Target ban's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the specified ban, including fields to change.","typeName":"IDiscussionboardBan.IUpdate"},"responseBody":{"description":"Updated ban record reflecting all changes.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans/{id}","method":"put"},{"specification":"Delete a ban record by its UUID from the discussionboard_bans table. Used by moderation tools to revoke, remove, or purge historic bans. Only for admin/moderator usage. This operation is auditable and reversible only by further endpoint logic.","description":"Deletes the specified ban record in the Prisma 'discussionboard_bans' table, identified by its UUID. This action removes the ban entirely from active records; application logic should provide checks to prevent invalid deletions (such as for active/pending bans still in force).\n\nOnly administrative and moderation accounts can perform this action. Input validation ensures the ID exists, otherwise a not found error is returned. The deletion is audit-logged for compliance tracking.\n\nMay return forbidden for attempts to delete bans without sufficient permissions or for attempting to delete non-removable bans (such as those under legal review). Used by admin panels and audit clean-up utilities.","summary":"Delete a ban by its ID from discussionboard_bans.","parameters":[{"name":"id","description":"Target ban's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (may be empty body or deletion status).","typeName":"IDiscussionboardBan.IDeleteResponse"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans/{id}","method":"delete"},{"specification":"List and search warnings issued to users (admins, moderators, or members) with pagination and filters. Implements reporting and investigation for warning policies/discipline, and relates to the Prisma 'discussionboard_warnings' table. Exposes audit, follow-up, and trends for progressive moderation enforcement.","description":"This operation provides a paginated, searchable listing of all warnings given to users (across admin, moderator, and member populations). As per the 'discussionboard_warnings' schema, each warning is linked to a specific target, actor, infraction reason, and event time. Lists may be filtered or sorted by date, target, actor, or reason.\n\nSupports compliance, follow-up action, and moderation policy review by surfacing patterns (e.g., repeated warnings, warning-to-ban escalations). Data privacy and RBAC must permit only authorized users (moderators and admins) to access this information. Responses include paginated results and summary stats for reporting dashboards.","summary":"List and search warnings from the discussionboard_warnings table with pagination and filters.","parameters":[],"requestBody":{"description":"Criteria for filtering and retrieving warnings, includes paging and sorting fields.","typeName":"IDiscussionboardWarning.IRequest"},"responseBody":{"description":"Paginated warning records and relevant summary information.","typeName":"IPageIDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings","method":"patch"},{"specification":"Retrieve a single warning record by its UUID from the 'discussionboard_warnings' table. Used for detailed incident review by moderators and admins, or for display in user infraction history views.","description":"Fetch the details of a specific warning using its UUID, returning all normalized fields per the 'discussionboard_warnings' Prisma schema. Each warning is issued to a specific user (admin, moderator, or member), references the actor who imposed it, infraction details, and mapping to any related report. Only moderators and admins, or the warned user (with restrictions), may access this endpoint.\n\nInput is validated for existence and RBAC/role permissions. Returns all warning details and references to linked moderation actions if applicable. Used by moderation review screens, audit trails, and warning escalation checks.","summary":"Get detailed information for a single warning from discussionboard_warnings by its ID.","parameters":[{"name":"id","description":"Target warning's ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Warning record for the specified ID.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings/{id}","method":"get"},{"specification":"Create a new warning (for admin, moderator, or member) in the discussion board. Accepts payload specifying target, actor, reason, and linked report if present. Relates to moderation workflow and discipline review as represented by the 'discussionboard_warnings' table.","description":"This operation enables an authorized moderator or admin to issue a warning to a platform user. The payload, validated to the 'IDiscussionboardWarning.ICreate' schema, defines the role/type of the user being warned, the actor, report linkage, and infraction reason. All references must be valid.\n\nCreated warnings are tracked in the system for progressive discipline policies and are displayed in moderation screens. Unique constraints and escalation flows are handled by application logic. May trigger notification to the warned user.\n\nReturns the new warning object reflecting all generated and supplied fields. Errors for invalid input or relationship failures (e.g., attempt to self-warn or warn a non-existent user).","summary":"Create a new warning for a user (admin, moderator, or member) in discussionboard_warnings.","parameters":[],"requestBody":{"description":"Warning creation data including target, actor, reason, and optional report linkage.","typeName":"IDiscussionboardWarning.ICreate"},"responseBody":{"description":"Created warning record with all normalized data.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings","method":"post"},{"specification":"Update an existing warning record by its UUID, modifying reason, actor, or report linkage as allowed by moderation policy. Used in follow-up reviews or incident investigations. Only permitted for moderator/admin access. Relates to 'discussionboard_warnings' table.","description":"This endpoint updates an existing warning, by UUID, as modeled in the 'discussionboard_warnings' Prisma table. The request may revise infraction reason, change metadata, or reassociate actors or report references. RBAC is strictly enforced. Updated warnings are audit-logged, and relationship consistency is required.\n\nThe operation is used in moderation follow-up reports, warning history corrections, and disciplinary escalation. Input must validate all relationships, enforce unique/one-at-a-time warnings per user/report, and reject unauthorized updates. Returns the full updated record.\n\nErrors for not found, RBAC violation, or failed reference validation. All update events are tracked for audit purposes.","summary":"Update details for an existing warning by ID in discussionboard_warnings.","parameters":[{"name":"id","description":"UUID of the warning record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and data to update on the target warning record.","typeName":"IDiscussionboardWarning.IUpdate"},"responseBody":{"description":"Updated warning with current field values after modification.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings/{id}","method":"put"},{"specification":"Delete a warning record by UUID from the 'discussionboard_warnings' table. Used by moderation tools to clean up, revoke, or reverse infraction actions. Only permitted to authorized roles, with full audit logging.","description":"Deletes a specified warning record using its unique identifier. The record, defined in the Prisma 'discussionboard_warnings' schema, references the user warned, the actor, potential related reports, and all discipline data. Input validation checks UUID existence and integrity.\n\nOnly moderators and admins with appropriate RBAC may call this operation. Data is removed from the active warning set, but audit logs/scarcity traces remain per compliance. Applied mainly in moderation UIs, review panels, and incident post-mortem workflows.\n\nErrors are returned if the warning is not found, or if permission constraints are violated. Audit log is created for each deletion event.","summary":"Delete a warning by its ID from discussionboard_warnings.","parameters":[{"name":"id","description":"UUID of warning to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deletion confirmation (may include status/message or empty body).","typeName":"IDiscussionboardWarning.IDeleteResponse"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings/{id}","method":"delete"},{"specification":"List and paginate audit logs for moderation, role, or compliance tracking. Provides a filterable/reportable trace of moderation and discipline actions executed in the platform. Relates to the Prisma 'discussionboard_audit_logs' table, which tracks every key moderation or user access event, linking to actors, reports, and moderation actions.","description":"Fetches a paginated, filterable list of moderation and compliance audit log records as defined in the 'discussionboard_audit_logs' Prisma schema. Each log links to the acting admin/mod/member, event type, associated report or moderation action, details string, and timestamp. Used for platform audits, role reviews, and root-cause investigations. Data privacy, RBAC, and field visibility checks restrict sensitive log/event types to authorized users. \n\nSupports keyword search, type filters, and paging to allow large-scale querying. Used in compliance dashboards and incident analysis.","summary":"List/filter audit logs from discussionboard_audit_logs with pagination and search.","parameters":[],"requestBody":{"description":"Request parameters for audit log search, including filters and paging.","typeName":"IDiscussionboardAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit logs and related data.","typeName":"IPageIDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/auditLogs","method":"patch"},{"specification":"Retrieve an individual audit log entry by its UUID for incident review, compliance investigation, or platform oversight. Returns all event fields and association data per the Prisma 'discussionboard_audit_logs' table. Only accessible to authorized moderation/admin staff.","description":"Returns the full field set for a given audit log record, as normalized in the 'discussionboard_audit_logs' schema. UUID input is RBAC-checked and validated. Output includes event type, detail, actor relations, report/action relations, and full datestamps.\n\nPrimarily used for audit review, compliance panels, and in-depth incident traces. May surface actor or target relationships for context-building. Errors are returned for RBAC violation, not found, or invalid identifier.","summary":"Get details of an individual audit log by ID from discussionboard_audit_logs.","parameters":[{"name":"id","description":"UUID of the audit log record to lookup.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record detail for the specified UUID.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/auditLogs/{id}","method":"get"}],"completed":168,"total":180,"step":0,"created_at":"2025-07-22T13:35:17.809Z"},"tokenUsage":{"facade":{"aggregate":{"total":638400,"input":{"total":590318,"cached":25856},"output":{"total":48082,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":638400,"input":{"total":590318,"cached":25856},"output":{"total":48082,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":638400,"input":{"total":590318,"cached":25856},"output":{"total":48082,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":638400,"input":{"total":590318,"cached":25856},"output":{"total":48082,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"The PUT /discussionboard/actionLogs/{id} endpoint allows administrators to update an existing action log entry in the discussionboard_action_logs table. Each action log captures platform-critical audit information such as actor, event type, target, metadata, and timestamp. Updating a log is a rare and privileged operation, suitable only for highly controlled environments such as regulatory correction or internal compliance workflows. Typically, only mutable fields can be changed (e.g. metadata), while primary keys and critical timestamps remain immutable. This endpoint strictly enforces admin-only authorization, performs input validation, and all modifications themselves are audit-logged. Error handling includes 404 for non-existent log and 403 for insufficient permissions. The operation ensures proper referential and structural integrity for audit/compliance requirements.","description":"Allows an authorized administrator to update selected, permitted fields of an action log entry in discussionboard_action_logs. Audit log entries are normally append-only, but this operation is reserved for exceptional cases (correcting metadata, clarifying action context, or compliance-mandated updates). The record is located by its unique ID, and only updateable fields are accepted in the request. All changes are fully audit-traced. Only users with admin role are authorized to perform this operation, and violations result in error responses. Related endpoints: POST (create), GET (read), DELETE (remove), PATCH (search logs).","summary":"Update a specific action log entry (discussionboard_action_logs table).","parameters":[{"name":"id","description":"ID of the action log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the action log entry. Only mutable fields may be supplied.","typeName":"IDiscussionboardActionLog.IUpdate"},"responseBody":{"description":"The updated action log entry resource.","typeName":"IDiscussionboardActionLog"},"authorizationRoles":["admin"],"path":"/discussionboard/actionLogs/{id}","method":"put"},{"specification":"The DELETE /discussionboard/actionLogs/{id} endpoint allows administrators to remove a specific action log entry from the discussionboard_action_logs table. Action logs are core compliance records and are generally not deleted except under exceptional circumstances, such as legal/regulatory request or data minimization policy. This endpoint is accessible only to admins. Deletion is irrecoverable and is itself audit-logged for transparency and compliance. The operation checks for the existence of the log (404 on missing), verifies admin permissions (403 on denial), and enforces referential integrity. Use is restricted to highly controlled operational contexts.","description":"Enables the permanent deletion of an action log entry from the discussionboard_action_logs table, subject to strict admin-only authorization. Deletion is allowed only as permitted by platform policy (e.g., legal requirements, compliance audits) and is fully audit-traced. Affected references may be cleaned up as necessary by system logic. On success, returns a confirmation; on failure, returns error codes as appropriate. Related endpoints: POST (create), PUT (update), PATCH (search), GET (retrieve log).","summary":"Delete a specific action log entry (discussionboard_action_logs table).","parameters":[{"name":"id","description":"ID of the action log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actionLogs/{id}","method":"delete"},{"specification":"The PATCH /discussionboard/errorLogs endpoint provides robust, flexible search capabilities for error log records stored in the discussionboard_error_logs table. This operation supports complex queries, including full-text search, filtering by error code, date range, and context, with pagination and sorting options. It is designed for administrators to efficiently diagnose, monitor, and investigate system/application errors. The endpoint may support search by error message substrings, sorting by created_at, and filtering by error type, stack trace presence, or related context_id. Search result sets are paginated and include metadata. All queries are subject to permission controls and rate limiting to prevent abuse. This endpoint is critical for operational monitoring, incident response, and technical audits.","description":"Allows authorized admin users to perform a filtered and paginated search of error log entries in the discussionboard_error_logs table. Examples include searching by error code, full-text message, status, or date range. The body contains filters, search criteria, pagination information, and ordering directives. Results are paginated to prevent large resource consumption. Only admin role may use this endpoint. Related endpoints: POST (create error logs), GET (details), PUT/DELETE (manage entries), PATCH (batch queries).","summary":"Search and paginate error logs (discussionboard_error_logs table).","parameters":[],"requestBody":{"description":"Search filters, query string, pagination, and ordering for error log entries.","typeName":"IPageIDiscussionboardErrorLog.IRequest"},"responseBody":{"description":"Paginated search result of error log entries.","typeName":"IPageIDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs","method":"patch"},{"specification":"The GET /discussionboard/errorLogs/{id} endpoint retrieves the detailed information of a specific error log record from the discussionboard_error_logs table by its unique identifier. This operation is essential for system administrators investigating the root cause and potential impact of error incidents. The response includes error code, message, stack trace, context ID, and creation timestamp. Permission enforcement ensures only admins can access sensitive error details. The endpoint supports forensics, troubleshooting, and reliability reviews. If the specified ID does not exist, 404 is returned.","description":"Fetches the full details of an error log entry by its unique ID for platform administrators investigating errors. Returned information includes all structure tracked for error logs (error code, message, stack trace, context). Read-only access – no modification is performed. Related endpoints: PATCH (search), POST (create), PUT/DELETE (update/remove), audit endpoints for compliance. Permissions strictly enforced. Returns 404 if not found.","summary":"Retrieve details of a specific error log (discussionboard_error_logs table).","parameters":[{"name":"id","description":"ID of the error log entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The error log record resource.","typeName":"IDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs/{id}","method":"get"},{"specification":"The POST /discussionboard/errorLogs endpoint creates a new error log record in the discussionboard_error_logs table. This is used by the platform, monitoring components, or system services when an error or exception is detected. The request body must include error code, error message, and optional stack trace, context ID. Upon success, the newly created error log record is returned, including its generated unique identifier. Only admin may invoke this endpoint. This endpoint supports platform observability and diagnostics.","description":"Creates a new error log entry for server, application, or monitoring systems detecting an error event. Consumers are system services or administrators. Provides error code, message, and contextual details. Returns the created log entry for confirmation. Related endpoints: PATCH (search logs), GET (individual logs), PUT/DELETE (update/delete), and audit endpoints. Input is validated strictly. Creations are audit-traced.","summary":"Create a new error log (discussionboard_error_logs table).","parameters":[],"requestBody":{"description":"Information comprising the error event to log.","typeName":"IDiscussionboardErrorLog.ICreate"},"responseBody":{"description":"The newly created error log entry resource.","typeName":"IDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs","method":"post"},{"specification":"The PUT /discussionboard/errorLogs/{id} endpoint updates an existing error log record in the discussionboard_error_logs table. Allows an admin to update fields such as stack trace or context, while preserving immutable fields (timestamps, primary keys). All modifications are tracked and permission enforced. Accepts corrections and annotations, returns the updated entity. 404 for missing records, 403 for insufficient authorization. Related endpoints: GET (retrieve), POST (create), DELETE (remove), PATCH (search logs).","description":"Allows admin technical staff to update allowed fields in an error log entry (by ID). Only mutable fields may be changed. All changes are audited and only authorized (admin) users may update logs. Returns updated log, or error if unauthorized. Edits are transparent and fully traceable for compliance. Related endpoints are strictly role-checked.","summary":"Update an existing error log record (discussionboard_error_logs table).","parameters":[{"name":"id","description":"ID of the error log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the error log entry. Only allowed fields may be updated.","typeName":"IDiscussionboardErrorLog.IUpdate"},"responseBody":{"description":"The updated error log record resource.","typeName":"IDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs/{id}","method":"put"},{"specification":"The DELETE /discussionboard/errorLogs/{id} endpoint deletes a specific error log record from the discussionboard_error_logs table. Deletion is limited to admins, usually for maintenance, retention, or cleanup policies. Checks for record existence before removal and ensures audits of deletion are logged. Unauthorized attempts are rejected. Endpoint is used for data minimization, privacy, and operational maintenance, subject to strict admin-only authorization. Related endpoints handle creation, retrieval, update, and batch queries.","description":"Allows deletion of an error log record with sufficient admin privilege per established policy. All deletions are permanent. Attempted deletion of non-existent records returns 404, unauthorized requests result in 403. Each successful delete is logged for audit and compliance. Related endpoints handle management and review of error logs. Deletion is strictly role-protected.","summary":"Delete a specific error log (discussionboard_error_logs table).","parameters":[{"name":"id","description":"ID of the error log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs/{id}","method":"delete"},{"specification":"The PATCH /discussionboard/apiAccessLogs endpoint enables filtered, paginated search of API access log records in the discussionboard_api_access_logs table. Supports filtering by actor ID, endpoint route, HTTP method, status code, time range, and full-text search. Paginated results include metadata on page, size, total matches. Privilege-checked to allow only admin access. Used for traffic analysis, security review, and abuse detection. Rate limiting and strict permission controls are enforced.","description":"Admins use this endpoint for searching/logging API access events. Accepts flexible filter, ordering, and paging. Access is audited for security. Pagination prevents overloading system. Related endpoints: POST (create access log), GET (details), PUT/DELETE (manage entries), PATCH (batch search). Only admins may access this endpoint.","summary":"Search and paginate API access logs (discussionboard_api_access_logs table).","parameters":[],"requestBody":{"description":"Search filters, pagination, and ordering instructions for access log entries.","typeName":"IPageIDiscussionboardApiAccessLog.IRequest"},"responseBody":{"description":"Paginated search result of API access log records.","typeName":"IPageIDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs","method":"patch"},{"specification":"The GET /discussionboard/apiAccessLogs/{id} endpoint fetches detailed information about a specific API access log event from the discussionboard_api_access_logs table by its unique ID. Serves admins investigating access patterns, debugging issues, or monitoring system security. Returns all fields for a given access log event. Returns 404 on not found. Only admins are allowed.","description":"Retrieves full details of an API access log record for auditing or debugging by admin. Read-only. Related endpoints: PATCH (search), POST (create), PUT/DELETE (update/delete). Permission strictly checked. Error codes returned for unauthorized/missing records.","summary":"Retrieve details of a specific API access log entry (discussionboard_api_access_logs table).","parameters":[{"name":"id","description":"ID of the API access log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The API access log record resource.","typeName":"IDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs/{id}","method":"get"},{"specification":"The POST /discussionboard/apiAccessLogs endpoint creates a new API access log entry in the discussionboard_api_access_logs table. Invoked by the platform or admins to record API access events, this operation requires method, endpoint, status code, IP address, actor (if authenticated), response time, etc. On success, returns the new log entry. Only admins are authorized. All creates are strictly validated and audit-logged for compliance and operational analysis.","description":"Creates a new API access log record upon API endpoint invocation. Provides details for audit trail, analytics, and compliance. Input and output are strictly schema-validated. Only admin role permitted. Created logs can be further queried and managed with related endpoints.","summary":"Create a new API access log entry (discussionboard_api_access_logs table).","parameters":[],"requestBody":{"description":"Data required to create a new API access log entry.","typeName":"IDiscussionboardApiAccessLog.ICreate"},"responseBody":{"description":"The newly created API access log entry resource.","typeName":"IDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs","method":"post"},{"specification":"The PUT /discussionboard/apiAccessLogs/{id} endpoint updates an existing API access log record in the discussionboard_api_access_logs table. Admins can edit mutable fields (e.g., metadata, user agent). All updates are audit-logged and strictly permission-checked. On success, returns the updated record. Immutable fields such as endpoint, actor, status, created_at remain fixed. Error 404 for not found. Related endpoints: GET (details), POST (new), PATCH (search), DELETE (delete). Only admins are allowed to update access logs.","description":"Update permitted fields in an API access log entry by ID. Admin-only. Audited for traceability and compliance. All input is schema-validated; immutable fields cannot be altered. Associated logs are referenced. Related management endpoints. Error 404/403 codes returned on failure.","summary":"Update an API access log entry (discussionboard_api_access_logs table).","parameters":[{"name":"id","description":"ID of the API access log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the API access log entry. Only allowed fields may be updated.","typeName":"IDiscussionboardApiAccessLog.IUpdate"},"responseBody":{"description":"The updated API access log entry resource.","typeName":"IDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs/{id}","method":"put"},{"specification":"The DELETE /discussionboard/apiAccessLogs/{id} endpoint removes a specific API access log entry from the discussionboard_api_access_logs table. Admin-only. Used for retention compliance, data minimization or operational cleanup. Deletes are permanent and audit-logged. 404 for missing records. Related endpoints handle CRUD and query. Permission strictly enforced.","description":"Permanently deletes an API access log entry by unique ID, provided the requestor is an admin. Removes the record, logs the event, and confirms outcome. Part of data lifecycle compliance. Related endpoints (CRUD, batch search) are strictly admin-only. All operations are role-audited.","summary":"Delete an API access log entry (discussionboard_api_access_logs table).","parameters":[{"name":"id","description":"ID of the API access log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs/{id}","method":"delete"}],"completed":180,"total":180,"step":0,"created_at":"2025-07-22T13:36:24.401Z"},"tokenUsage":{"facade":{"aggregate":{"total":739393,"input":{"total":683381,"cached":25856},"output":{"total":56012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":739393,"input":{"total":683381,"cached":25856},"output":{"total":56012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":739393,"input":{"total":683381,"cached":25856},"output":{"total":56012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":739393,"input":{"total":683381,"cached":25856},"output":{"total":56012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardSection.IRequest":{"type":"object","properties":{"filter":{"type":"object","description":"Filtering criteria for searching board sections.\n\nPossible properties include name (partial or full match), is_active (if present), or created_at/updated_at range. Used by UI filter components and listing endpoints. Aligns with section list requirements for API flexibility.","properties":{},"additionalProperties":true,"required":[]},"sort":{"type":"string","description":"Field by which to sort the results. For example: 'name', 'created_at'. Aligns with UI/UX needs for interactive sorting of section lists."},"page":{"type":"integer","description":"Page number for pagination. Zero-based index in paginated queries. For example: page=0 is the first page.","minimum":0},"limit":{"type":"integer","description":"Limit of records per page. For example, 'limit=25' for 25 items per page. Required by paginated APIs for scalable UI."}},"description":"Type for request body when listing or searching discussionboard_sections.\n\nImplements flexible, paginated board section search per requirements (section list API), with filter, sort, and paging controls as standard for all search/list endpoints.","required":["filter","sort","page","limit"]},"IPageIDiscussionboardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSection"},"description":"Array of board section entries satisfying query/filter page."}},"required":["pagination","data"],"description":"A paginated list wrapper for IDiscussionboardSection entities, returned from section list/search endpoints.\n\nContains result data plus page info, for scalable/efficient frontend rendering."},"IDiscussionboardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for section. Maps to discussionboard_sections.id in DB. Enforces logical grouping semantics and required for all section API operations."},"name":{"type":"string","description":"Human-readable name of the section (e.g., 'Politics').\n\nFrom discussionboard_sections.name. Required. Used in UI and for logical organization."},"description":{"oneOf":[{"type":"string","description":"Optional text description of what this section contains/focuses on. From discussionboard_sections.description.\n\nUsed for filtering and UI tooltips. Supports null."},{"type":"null"}],"description":"Optional text description of what this section contains/focuses on. From discussionboard_sections.description.\n\nUsed for filtering and UI tooltips. Supports null."},"sort_order":{"type":"integer","description":"Explicit UI sort order for section, as provided by admin. Controls display sequence. Maps to discussionboard_sections.sort_order."},"created_at":{"type":"string","format":"date-time","description":"Section creation timestamp in ISO 8601 format. Maps to discussionboard_sections.created_at. Used for sorting and audits."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the section. Maps to discussionboard_sections.updated_at. Used for audits and change detection."}},"required":["id","name","sort_order","created_at","updated_at"],"description":"Represents a board section/grouping such as 'Politics' or 'Economy'.\n\nImplements the top-level category for sets of boards, supporting logical organization, discovery, and admin configuration. Aligns with discussionboard_sections schema and all requirements for board grouping/section navigation."},"IDiscussionboardSection.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Section name (human-friendly, unique).\n\nRequired at creation. Taken from discussionboard_sections.name."},"description":{"oneOf":[{"type":"string","description":"Short text description for UI or filtering. Optional at create. From discussionboard_sections.description."},{"type":"null"}],"description":"Short text description for UI or filtering. Optional at create. From discussionboard_sections.description."},"sort_order":{"type":"integer","description":"Numeric order for display (admin-defined). Required for insert. From discussionboard_sections.sort_order."}},"required":["name","sort_order"],"description":"Input for creation of a new board section, referenced by admin endpoints onboarding new logical groupings for boards.\n\nComplies with atomic 3NF schema and business flows."},"IDiscussionboardSection.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Section name, new value if updating section name. Must remain unique platform-wide."},"description":{"oneOf":[{"type":"string","description":"New description, if updating. Null to clear. Fulfills auditability and flexibility in business requirements."},{"type":"null"}],"description":"New description, if updating. Null to clear. Fulfills auditability and flexibility in business requirements."},"sort_order":{"type":"integer","description":"Optional new UI/display order. Allows for explicit reordering of section list."}},"description":"Payload for updating existing discussionboard_sections entry by ID.\n\nUsed in admin UI and API, supports PATCH/PUT semantics for atomic updates. Properties are optional (partial update supported).","required":[]},"IDiscussionboardSection.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the deleted section. Retained for audit and confirmation in result object."},"deleted":{"type":"boolean","description":"Boolean status for successful deletion. True if deleted, false otherwise."}},"required":["id","deleted"],"description":"Result payload for deleting a board section, confirming removal by ID.\n\nEnforces auditability, business rules, and displays confirmation in admin UI. Simple true/false mechanism."},"IDiscussionboardBoard.IRequest":{"type":"object","properties":{"filter":{"type":"object","description":"Filtering criteria for board list/search API. Keys may include name, section_id, is_active, created_at, etc. Flexible, supporting extensibility for various filter combinations.\n\nProvided in UI filter panels, aligns with business rules.","properties":{},"required":[]},"sort":{"type":"string","description":"Sort field for results. E.g., 'name', 'created_at'. Used for UI table sorting and meets requirement for admin/admin panel flexibility."},"page":{"type":"integer","description":"Pagination: page number (zero-based). Standard paging property. Required in all paged list endpoints."},"limit":{"type":"integer","description":"Pagination: number of results per page. Used to manage large datasets for UI and performance. Required."}},"required":["filter","sort","page","limit"],"description":"Paging/filtering/sorting request payload for boards listing/search endpoint."},"IPageIDiscussionboardBoard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoard"},"description":"Array of board entries. Per filtered/paged request."}},"required":["pagination","data"],"description":"Paginated list/result set of board (IDiscussionboardBoard) entries for admin/member board list APIs."},"IDiscussionboardBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this board. Maps to discussionboard_boards.id. Used in all routing/UI navigation."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"ID of the section/group this board is under. Foreign key in DB (discussionboard_boards.discussionboard_section_id). Used in filtering, navigation, and enforcing referential integrity."},"name":{"type":"string","description":"Display name of the board, e.g., 'Elections 2025'.\n\nFrom DB name field. Required; must be unique platform-wide. Used for human search, navigation, and UI presentation."},"description":{"oneOf":[{"type":"string","description":"Short, optional description of board topic, per UI/tooltip requirements. Optional in DB schema. Used for filter/navigation enhancements."},{"type":"null"}],"description":"Short, optional description of board topic, per UI/tooltip requirements. Optional in DB schema. Used for filter/navigation enhancements."},"rules":{"oneOf":[{"type":"string","description":"Optional Markdown or plain-text rules for the board. Null if default or not set. Used in UI and onboard/board view."},{"type":"null"}],"description":"Optional Markdown or plain-text rules for the board. Null if default or not set. Used in UI and onboard/board view."},"is_active":{"type":"boolean","description":"Is this board currently accepting content, i.e., not archived or hidden? Set by admin controls. From discussionboard_boards.is_active. Affects visibility in UI/search."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO8601, UTC). For audit and sorting. Maps to discussionboard_boards.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp, for audit/change-tracing. From DB updated_at."}},"required":["id","discussionboard_section_id","name","is_active","created_at","updated_at"],"description":"Single board entity, representing a discrete discussion topic group.\n\nImplements requirements for board definition, navigation, settings, and membership per discussionboard_boards table and associated business logic."},"IDiscussionboardBoard.ICreate":{"type":"object","properties":{"discussionboard_section_id":{"type":"string","format":"uuid","description":"Section ID for placement. Mandatory, must be a valid section in DB."},"name":{"type":"string","description":"Board name, must be unique and human-friendly. Required."},"description":{"oneOf":[{"type":"string","description":"Optional summary of board focus. Used for UI, navigation, search/discovery panels."},{"type":"null"}],"description":"Optional summary of board focus. Used for UI, navigation, search/discovery panels."},"rules":{"oneOf":[{"type":"string","description":"Optional board-specific rules, Markdown/plain-text. Null for defaults (optional at create time)."},{"type":"null"}],"description":"Optional board-specific rules, Markdown/plain-text. Null for defaults (optional at create time)."},"is_active":{"type":"boolean","description":"Whether the board is active/live or hidden/archived. Enforced at create time. Required."}},"required":["discussionboard_section_id","name","is_active"],"description":"Input body for board creation (by admin, or onboarding wizard). All mandatory board properties required at creation. Nullable for optional fields like description and rules."},"IDiscussionboardBoard.IUpdate":{"type":"object","properties":{"discussionboard_section_id":{"type":"string","format":"uuid","description":"Change board's parent section (if allowed). Enforced by business logic, referential integrity checked on update."},"name":{"type":"string","description":"Update name/title of board. Platform-wide uniqueness enforced per requirements."},"description":{"oneOf":[{"type":"string","description":"Update board descriptive text. Null to clear."},{"type":"null"}],"description":"Update board descriptive text. Null to clear."},"rules":{"oneOf":[{"type":"string","description":"Update/overwrite board rules (Markdown/plain-text) or clear with null."},{"type":"null"}],"description":"Update/overwrite board rules (Markdown/plain-text) or clear with null."},"is_active":{"type":"boolean","description":"Update flag: activate/deactivate board."}},"description":"Payload for updating one or more board fields/properties. PATCH or PUT supported.\n\nAll fields optional (partial update allowed). Maps to update semantics of discussionboard_boards table.","required":[]},"IDiscussionboardBoard.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the deleted board. Used for audit and confirmation in result response."},"deleted":{"type":"boolean","description":"True if successfully deleted. For admin UI and audit trails."}},"required":["id","deleted"],"description":"Confirmation result for deleting a board, for audits and UI handling."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number, zero-based. Integral for paginated UI views. For example, page 0 = first page. Used by all paged resources. Marked uint32 for alignment with standard IPage structure."},"limit":{"type":"integer","description":"Record limit per page (default 100). Used for UI, API, and automated retrieval of data sets."},"records":{"type":"integer","description":"Total number of records matching filter. For UI count, analytics, and pagination logic."},"pages":{"type":"integer","description":"Total number of pages available for the query (computed as records/limit ceiling). For navigation and paging controls."}},"required":["current","limit","records","pages"],"description":"Paging metadata returned with all IPage wrappers, for scalable and user-friendly navigation of large/filtered result sets."}}},"completed":12,"total":191,"step":0,"created_at":"2025-07-22T13:37:11.034Z"},"tokenUsage":{"facade":{"aggregate":{"total":824808,"input":{"total":766317,"cached":25856},"output":{"total":58491,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":824808,"input":{"total":766317,"cached":25856},"output":{"total":58491,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":824808,"input":{"total":766317,"cached":25856},"output":{"total":58491,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":824808,"input":{"total":766317,"cached":25856},"output":{"total":58491,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this settings record. References the primary key of discussionboard_board_settings.\n\nAtomic. Used when retrieving/updating settings."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board id these settings apply to. Must match an existing board. Enforces 1:1 mapping.\n\nReferenced from board CRUD and settings management."},"allow_images":{"type":"boolean","description":"Toggles whether this board allows image uploads in posts or comments.\n\nSet true to permit image content, false to disallow."},"require_moderator_approval":{"type":"boolean","description":"If true, new posts require moderator approval before becoming public on this board.\n\nImplements stricter moderation workflows for sensitive boards."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this board settings record was created.\n\nImmutable. Used for audit/trace/history."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this settings record was last updated.\n\nEnables audit trails and last-change UIs."}},"required":["id","discussionboard_board_id","allow_images","require_moderator_approval","created_at","updated_at"],"description":"Board settings entity describing all adjustable, board-specific configuration options.\n\nImplements customization, moderation policy, and extensible feature toggles mapped 1:1 to board records. Every field aligns with 3NF compliance and is directly referenced from the source table (see Prisma schema for discussionboard_board_settings).\n\nIncludes creation/update timestamps for audit."},"IDiscussionboardBoardSetting.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board id to attach these settings to. Must be a valid board id and unused in other settings."},"allow_images":{"type":"boolean","description":"Initial setting for enabling images in posts/comments on this board."},"require_moderator_approval":{"type":"boolean","description":"Initial moderator approval setting for the board. True means every new post requires review."}},"required":["discussionboard_board_id","allow_images","require_moderator_approval"],"description":"Payload for creating new settings for a board. All fields are atomic, 3NF, and must align with board's actual id.\n\nNo timestamps (set by server). Used in admin console."},"IDiscussionboardBoardSetting.IUpdate":{"type":"object","properties":{"allow_images":{"type":"boolean","description":"Updated value for image posting. Optional, but at least one field must be set."},"require_moderator_approval":{"type":"boolean","description":"Updated value for moderator approval flag. Optional, but at least one field must be set."}},"required":[],"description":"Payload to update existing settings for a board. Only mutable fields (feature toggles) should be present.\n\nUsed by admin when changing per-board options."},"IDiscussionboardNotificationSettings.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optional filter: Only list settings records for the specified member id."},"receive_board_notifications":{"type":"boolean","description":"Optional filter: only list settings with this value for board notification preference."},"receive_mention_notifications":{"type":"boolean","description":"Optional filter: only list settings with this value for mention notification preference."},"page":{"type":"integer","description":"Page number requested (for pagination). Optional."},"limit":{"type":"integer","description":"Number of records per page (pagination). Optional."}},"required":[],"description":"Payload for listing/filtering notification settings. Supports all indexed/filtered fields in the table: member id, notification toggles, and standard paging controls."},"IPageIDiscussionboardNotificationSettings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging information, including page number, size, total records, and page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationSettings"},"description":"List of notification settings objects (one per member, if filtered, or all in system with pagination)."}},"required":["pagination","data"],"description":"Standard page format for notification settings results, following business convention IPage<T>.\n\nSee audit log and paging requirements for more detail."},"IDiscussionboardNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique notification setting record id for this member.\n\n @db.Uuid"},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Which member the settings belong to (reference to discussionboard_members.id)."},"receive_board_notifications":{"type":"boolean","description":"Toggles whether member receives notifications for new posts on boards they subscribe to."},"receive_mention_notifications":{"type":"boolean","description":"Toggles whether member receives notifications when they are mentioned in a post or comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when these settings were created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when these settings were last updated."}},"required":["id","discussionboard_member_id","receive_board_notifications","receive_mention_notifications","created_at","updated_at"],"description":"Represents a member's preferences regarding notification delivery for boards and mentions.\n\nDirectly matched to the notification_settings table (see Prisma schema). All attributes atomic/3NF."},"IDiscussionboardNotificationSettings.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member for whom these settings are being created."},"receive_board_notifications":{"type":"boolean","description":"Initial preference for board-related notifications."},"receive_mention_notifications":{"type":"boolean","description":"Initial preference for mention notifications."}},"required":["discussionboard_member_id","receive_board_notifications","receive_mention_notifications"],"description":"Payload for creating new notification settings for a member. Timestamps set by server."},"IDiscussionboardNotificationSettings.IUpdate":{"type":"object","properties":{"receive_board_notifications":{"type":"boolean","description":"Updated value (optional) for board notification preference."},"receive_mention_notifications":{"type":"boolean","description":"Updated value (optional) for mention notification preference."}},"required":[],"description":"Update form for notification settings, allows either or both toggles to be changed by member or admin."},"IDiscussionboardAdmins.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optional: filter admin assignments by specific member id."},"active_only":{"type":"boolean","description":"If true, only returns currently-active admin role assignments (not revoked ones)."},"page":{"type":"integer","description":"Optional: page number for pagination."},"limit":{"type":"integer","description":"Optional: number of records to return per page (pagination)."}},"required":[],"description":"Request parameters for listing or searching admin assignments, with filters for member, activity, and page."},"IPageIDiscussionboardAdmins":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging and count information for the admin assignment query."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAdmins"},"description":"List of admin assignments from the search/pagination results."}},"required":["pagination","data"],"description":"Page result for admin assignments. Standard page wrapper with IPage.IPagination and array of admin assignment objects."},"IDiscussionboardAdmins":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this admin assignment record (@discussionboard_admins.id).\n\nSet by the DB at creation."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member to whom admin privilege is assigned. FK to discussionboard_members."},"granted_at":{"type":"string","format":"date-time","description":"When the admin role was granted to this member."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If admin status is revoked, timestamp of revocation. Otherwise, null if still active."},{"type":"null","format":"date-time","description":"If admin status is revoked, timestamp of revocation. Otherwise, null if still active."}],"description":"If admin status is revoked, timestamp of revocation. Otherwise, null if still active."}},"required":["id","discussionboard_member_id","granted_at"],"description":"Assignment of admin role to a member. Reflects both active and revoked admin records. Follows requirement for 3NF, audit, and RBAC."},"IDiscussionboardAdmins.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member being promoted to admin."}},"required":["discussionboard_member_id"],"description":"Payload for promoting a member to admin role. Only member id is needed (system sets grant time and id)."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page index (1-based)."},"limit":{"type":"integer","description":"Maximum number of records per page (default 100)."},"records":{"type":"integer","description":"Total number of records matching the query."},"pages":{"type":"integer","description":"Total number of pages based on records and limit."}},"required":["current","limit","records","pages"],"description":"Standard page information object, see business IPage<T>."}}},"completed":24,"total":191,"step":0,"created_at":"2025-07-22T13:37:14.360Z"},"tokenUsage":{"facade":{"aggregate":{"total":909752,"input":{"total":849255,"cached":25856},"output":{"total":60497,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":909752,"input":{"total":849255,"cached":25856},"output":{"total":60497,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":909752,"input":{"total":849255,"cached":25856},"output":{"total":60497,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":909752,"input":{"total":849255,"cached":25856},"output":{"total":60497,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardAdmins.IUpdate":{"type":"object","properties":{"revoked_at":{"type":"string","format":"date-time","description":"Timestamp of when admin role was revoked for this member. Null if admin role is still active. Correlates with role demotion, account changes, or audit requirements. Sourced from the 'discussionboard_admins' Prisma model column comment. Used to mark admins as no longer active for permissions and RBAC purposes."}},"required":["revoked_at"],"description":"Update type for the admin assignment entity in the discussionboard domain, as per business requirements for role demotion or administrative change. Used for updating the approval status or deactivating the admin at a specific timestamp."},"IDiscussionboardModerators.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Optional filter by member's unique UUID. Used to fetch moderation assignment records for a specific user."},"is_active":{"type":"boolean","description":"Optional flag to filter currently active moderators from those who have been demoted or revoked."},"page":{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination; defines which result window to return."},"limit":{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"How many items are returned on one page (default 20, maximum 100)."},"sort":{"oneOf":[{"const":"granted_at","description":"Sort order field. Can be granted_at (when moderator role assigned) or revoked_at (if demoted)."},{"const":"revoked_at","description":"Sort order field. Can be granted_at (when moderator role assigned) or revoked_at (if demoted)."}],"description":"Sort order field. Can be granted_at (when moderator role assigned) or revoked_at (if demoted)."}},"required":["page","limit"],"description":"Request schema for searching or filtering moderator assignment records, as shown in admin dashboards or search APIs. Includes support for paging, sorting, and advanced filtering."},"IPageIDiscussionboardModerators":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerator"},"description":"Paginated list of moderator assignments."}},"required":["pagination","data"],"description":"Paginated result container listing moderator assignment entities and containing paging metadata. Used as the response body for queries against moderator records."},"IDiscussionboardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for moderator assignment record. Unique identifier (UUID) corresponding to the discussionboard_moderators row. Fulfills source of truth requirements for role-based API logic, audit logs, and admin dashboards."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member assigned moderator privileges. Foreign key link to member/user record. As described in discussionboard_moderators schema, supports audit, lookup, and permission assignment."},"granted_at":{"type":"string","format":"date-time","description":"Datetime when moderator privileges were granted. Implements assignment time tracking and supports search/sort for moderation analytics and dashboard reporting."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime moderator role was revoked/demoted. Null if active. Fulfills RBAC audit and supports filtering for active/expired moderator records."},{"type":"null"}],"description":"Datetime moderator role was revoked/demoted. Null if active. Fulfills RBAC audit and supports filtering for active/expired moderator records."}},"required":["id","discussionboard_member_id","granted_at"],"description":"Main entity type for moderator assignment in the discussionboard domain. Represents assignment state for a user as a moderator, tracks grant/revoke status, and audit trail. Directly mirrors the discussionboard_moderators schema definition."},"IDiscussionboardModerator.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the existing member to be granted moderator status. Must refer to a valid and active user record. Sourced from the discussionboard_moderators Prisma model: supporting clear role elevation flows."}},"required":["discussionboard_member_id"],"description":"Request schema for creating a new moderator assignment. Supplies the member (user) to be promoted as moderator, in strict RBAC business flows."},"IDiscussionboardModerator.IUpdate":{"type":"object","properties":{"revoked_at":{"type":"string","format":"date-time","description":"Timestamp marking the demotion or removal of moderator rights. Used to transition user from moderator back to member, for audit or compliance. Sourced directly from discussionboard_moderators Prisma model column notes."}},"required":["revoked_at"],"description":"Update type for moderator assignment role; used to mark role revocation or administrative status change, reflecting compliance and audit requirements."},"IDiscussionboardMember.IRequest":{"type":"object","properties":{"username":{"type":"string","description":"Optional filter for usernames (exact or partial). Used for user search in admin or moderation dashboards."},"created_from":{"type":"string","format":"date-time","description":"Search filter for member accounts created after this date."},"created_to":{"type":"string","format":"date-time","description":"Search filter for member accounts created before this date."},"is_active":{"type":"boolean","description":"Search filter: return active (not deactivated) users only."},"page":{"type":"integer","format":"int32","minimum":1,"description":"Page number for search result pagination."},"limit":{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"Number of results per page, default 20, max 100."}},"required":["page","limit"],"description":"Request schema for searching and paginating member accounts in the discussion board system. Primary filters include username search, creation date range, and active status, with standard pagination fields."},"IPageIDiscussionboardMemberSummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMemberSummary"},"description":"List of member summary response objects on this page."}},"required":["pagination","data"],"description":"Paginated container type for summary member account records. Used for listing members in search/admin views with basic metadata."},"IDiscussionboardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for member account. UUID assigned upon registration. Referenced for authentication, audit logs, and API lookups. Sourced from the discussionboard_members Prisma table as main identifier."},"username":{"type":"string","description":"Unique login handle for the member account. Not case-sensitive; serves as logical platform identity in logins, display, and audit."},"password_hash":{"type":"string","description":"Secure hash of member's password (bcrypt, Argon2, etc.), never storing clear text. Implements security policy and fulfills authentication business requirement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of member registration. Used for platform analytics, search, and audit log sequencing."},"activated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when registration completed/verified. Null until confirmed by email or workflow."},{"type":"null"}],"description":"Datetime when registration completed/verified. Null until confirmed by email or workflow."},"deactivated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime for soft-deactivation (account suspension/deletion). Null if account is currently active."},{"type":"null"}],"description":"Datetime for soft-deactivation (account suspension/deletion). Null if account is currently active."}},"required":["id","username","password_hash","created_at"],"description":"Full member account entity type for discussionboard. Used for authenticated platform access and RBAC, with all non-derived atomic fields as described in Prisma. Directly aligns to core authentication/security flows."},"IDiscussionboardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"Username to register for new member account. Must be unique across all registered members, not case-sensitive. Used as primary login and display name."},"password_hash":{"type":"string","description":"Pre-hashed password for authentication storage. Never plain text; pass a secure hash (bcrypt, Argon2, etc.). Fulfills security and compliance requirements. Sourced from discussionboard_members schema business rules."}},"required":["username","password_hash"],"description":"Request schema for registering a new discussionboard member. Accepts minimum platform credential info. Used in registration flows and admin onboarding."},"IDiscussionboardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"Update for member's username. Must remain unique and compliant with platform requirements."},"password_hash":{"type":"string","description":"Update for authentication hash. Supplies new password hash upon reset/change, per security protocols."},"activated_at":{"type":"string","format":"date-time","description":"Datetime for account activation (email/registration confirmation, used in admin actions as described in requirements analysis)."},"deactivated_at":{"type":"string","format":"date-time","description":"Soft-deletion timestamp; null or set for deactivation/expunge as described in business policy flows."}},"description":"Update payload type for member records, supporting admin/member username or password change, activation, and soft-deletion.","required":[]},"IDiscussionboardGuest.IRequest":{"type":"object","properties":{"created_from":{"type":"string","format":"date-time","description":"Return guest sessions created after this timestamp. Used for session analytics and marketing."},"created_to":{"type":"string","format":"date-time","description":"Return guest sessions created before this timestamp."},"page":{"type":"integer","format":"int32","description":"Pagination: which page of results."},"limit":{"type":"integer","format":"int32","description":"Results per page, limits pagination windows."}},"required":["page","limit"],"description":"Request schema for searching, paginating, or filtering guest sessions in the discussion board, supporting analytics, onboarding, and compliance visibility."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Max records per page."},"records":{"type":"integer","format":"uint32","description":"Total number of records."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages."}},"required":["current","limit","records","pages"],"description":"Paging metadata for paginated APIs, included in every page result for consistent navigation and reporting as described in the standard IPage API paradigm."},"IDiscussionboardMemberSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Member account UUID. Used to identify user in responses/search."},"username":{"type":"string","description":"Member login handle/display name. Serves as summary identity for list views."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp. Used in member directory and sorting."},"activated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when member verified their registration. Null if not yet confirmed."},{"type":"null"}],"description":"Datetime when member verified their registration. Null if not yet confirmed."}},"required":["id","username","created_at"],"description":"Summary type for member account, used in paginated list search results and admin dashboards to display member identities/creation dates without sensitive details."}}},"completed":36,"total":191,"step":0,"created_at":"2025-07-22T13:37:15.870Z"},"tokenUsage":{"facade":{"aggregate":{"total":995044,"input":{"total":932190,"cached":33536},"output":{"total":62854,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":995044,"input":{"total":932190,"cached":33536},"output":{"total":62854,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":995044,"input":{"total":932190,"cached":33536},"output":{"total":62854,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":995044,"input":{"total":932190,"cached":33536},"output":{"total":62854,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardUserEmail":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"유저 이메일 엔티티의 기본 키입니다.\n\nPrisma schema의 'id' 컬럼에 해당하며, 각 이메일 레코드를 고유하게 식별합니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"이메일이 속한 Discussionboard 멤버의 고유 식별자입니다.\n\nPrisma의 discussionboard_members 테이블의 'id'와 연결된 외래키입니다."},"email":{"type":"string","format":"email","description":"이 계정에 연결된 이메일 주소입니다.\n\n회원 가입, 알림 전송, 계정 복구 등을 위해 사용됩니다."},"is_verified":{"type":"boolean","description":"이 이메일이 인증(verification)되었는지 여부를 나타내는 플래그입니다.\n\n이 필드는 non-functional requirement 및 인증 플로우 구현에 필수적입니다."},"is_primary":{"type":"boolean","description":"이 멤버의 기본/주 이메일인지 식별하는 플래그입니다.\n\n계정 로그인, 주요 알림, 패스워드 재설정 등에 사용됩니다."},"added_at":{"type":"string","format":"date-time","description":"이 이메일 정보가 DB에 추가(연결)된 시간입니다.\n\n접속 기록, 변경/추적, 관리 목적 등으로 활용되며, 3NF 정규화 원칙에 따라 저장됩니다."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"이메일 인증이 완료된 시간입니다. 인증되지 않은 경우 null입니다.\n\n인증 플로우/이력 추적 등에 사용되며, 3NF 원칙을 따릅니다."},{"type":"null"}],"description":"이메일 인증이 완료된 시간입니다. 인증되지 않은 경우 null입니다.\n\n인증 플로우/이력 추적 등에 사용되며, 3NF 원칙을 따릅니다."}},"required":["id","discussionboard_member_id","email","is_verified","is_primary","added_at"],"description":"유저 이메일 엔티티 스키마입니다.\n\nPrisma의 discussionboard_user_emails 테이블에 근거하며, 각 이메일에 대한 식별, 회원과의 연결, 인증 정보 및 관리 정보를 포함합니다.\n복수 이메일 지원, 인증 및 기본 이메일 구분 등 비즈니스 요구를 모두 구현합니다.\n"},"IDiscussionboardUserEmail.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"이메일을 연결할 Discussionboard 멤버의 고유 식별자(UUID)입니다."},"email":{"type":"string","format":"email","description":"신규 추가할 이메일 주소입니다. 이메일 형식 및 유효성 체크가 필요합니다."},"is_primary":{"type":"boolean","description":"이 이메일을 기본 메일로 등록할지 여부를 결정합니다."}},"required":["discussionboard_member_id","email","is_primary"],"description":"이메일 주소를 신규 등록하는 데 사용되는 요청 본문 타입입니다.\n\n회원 가입, 추가 이메일, 알림 수단 신규등록 등 요구사항에서 정의된 이메일 생성 흐름에 사용되며, 기본/보조 이메일 여부와 연결 멤버를 지정합니다.\n"},"IDiscussionboardUserEmail.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"수정할 이메일 주소입니다(선택적). 이미 등록된 값을 변경할 경우에 사용합니다."},"is_primary":{"type":"boolean","description":"이메일 주소의 기본 여부를 변경할 때 사용됩니다."},"is_verified":{"type":"boolean","description":"이 메일의 인증 완료 여부로 true/false 값입니다."}},"description":"회원 보유 이메일 정보를 수정하기 위한 요청 바디 타입입니다.\n\n이메일 주소 수정, 인증 상태 변경, 기본/보조 전환 등에 사용됩니다. 변경 가능한 각 필드는 선택적으로 입력할 수 있습니다.\n","required":[]},"IDiscussionboardUserAuth.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"조회/검색하고자 하는 인증 정보가 연결된 멤버의 고유 식별자입니다."},"provider":{"type":"string","description":"외부 인증/SSO 공급자명(예: 'google', 'facebook', 'github')"},"linked_at_from":{"type":"string","format":"date-time","description":"external auth 연결(생성) 시점의 시작 범위(검색/필터용)."},"linked_at_to":{"type":"string","format":"date-time","description":"external auth 연결(생성) 시점의 끝 범위(검색/필터용)."}},"description":"external 인증 정보(user auths) 목록을 조건별로 검색·조회하기 위한 요청 바디입니다.\n\nSSO 사용자 검색, 등록 이력 등 피드백을 위한 쿼리 기준이 포함됩니다.\n","required":[]},"IPageIDiscussionboardUserAuth":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserAuth"},"description":"현재 페이지에 포함된 user auth 엔티티 객체 목록입니다."}},"required":["pagination","data"],"description":"external 인증(user auth) 목록의 페이지네이션 컨테이너 타입입니다.\n\n결과 레코드와 pagination 메타 정보를 통합 반환합니다.\n"},"IDiscussionboardUserAuth":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"외부 인증 정보 레코드의 고유 ID입니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"해당 외부 인증이 연결된 discussionboard_members의 id 값입니다."},"provider":{"type":"string","description":"외부 인증 제공자(e.g., 'google', 'facebook')"},"provider_user_id":{"type":"string","description":"외부 인증 제공업체 내 사용자의 식별자(subject/ID)."},"linked_at":{"type":"string","format":"date-time","description":"외부 인증 연결(등록) 시각입니다."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"해지/연결 해제(또는 취소) 시각. 현재 연결 유지 상태라면 null입니다."},{"type":"null"}],"description":"해지/연결 해제(또는 취소) 시각. 현재 연결 유지 상태라면 null입니다."}},"required":["id","discussionboard_member_id","provider","provider_user_id","linked_at"],"description":"외부 인증(SSO/소셜 로그인 등) 기록 엔티티의 스키마입니다.\n\n각 플랫폼 회원에 대해 연동된 OAuth/SSO를 추적합니다.\n"},"IDiscussionboardUserAuth.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"이 외부 인증 정보를 연결할 discussionboard_members 식별자입니다."},"provider":{"type":"string","description":"연결할 외부 인증 공급자 이름(예: 'google', 'kakao')."},"provider_user_id":{"type":"string","description":"외부 인증 공급자의 내부 회원/계정 식별자입니다."}},"required":["discussionboard_member_id","provider","provider_user_id"],"description":"외부 인증 연동 정보를 신규 등록하는 요청 본문 타입입니다.\n\n외부 SSO 계정 연동/신규 연결시 사용합니다.\n"},"IDiscussionboardUserAuth.IUpdate":{"type":"object","properties":{"revoked_at":{"type":"string","format":"date-time","description":"이 외부 인증의 연결이 해지된 시각(ISO8601 형식). 연결 해제 시점 업데이트나 강제 해지에 사용됩니다."}},"description":"외부 인증(SSO, OAuth 등) 연결 기록의 상태를 변경(해지 등)할 때 사용하는 요청 바디 타입입니다.\n\nrevoked_at 등 변경이 허용된 필드를 갱신하는 용도로 사용합니다.\n","required":[]},"IDiscussionboardUserSession.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"로그인 세션이 연결된 멤버의 고유 식별자(UUID)입니다."},"created_at_from":{"type":"string","format":"date-time","description":"검색 범위의 세션 생성시각(시작)."},"created_at_to":{"type":"string","format":"date-time","description":"검색 범위의 세션 생성시각(끝)."},"revoked":{"type":"boolean","description":"이 세션이 해지/만료됐는지 여부로 검색할 때 사용합니다."}},"description":"로그인 세션(user sessions) 목록을 조건별로 조회하기 위한 요청 바디 타입입니다.\n\n특정 회원의 세션 리스트, 레인지 검색, 해지/유효 구분 등 상황에 활용됩니다.\n","required":[]},"IPageIDiscussionboardUserSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserSession"},"description":"현재 페이지에 포함된 로그인 세션 객체 배열입니다."}},"required":["pagination","data"],"description":"로그인 세션(user sessions) 목록에 대한 페이지네이션 리스트 컨테이너 타입입니다.\n"},"IDiscussionboardUserSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"로그인 세션의 고유 식별자입니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"이 세션이 연결된 discussionboard_members 회원의 id 값입니다."},"session_token":{"type":"string","description":"해당 세션의 인증 토큰 문자열로, 보이지 않는 암호화 난수입니다."},"created_at":{"type":"string","format":"date-time","description":"세션 생성 시각입니다."},"expires_at":{"type":"string","format":"date-time","description":"세션 만료 예정 시각입니다."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"해당 세션이 만료/해지된 시각(아직 유효하면 null)."},{"type":"null"}],"description":"해당 세션이 만료/해지된 시각(아직 유효하면 null)."}},"required":["id","discussionboard_member_id","session_token","created_at","expires_at"],"description":"로그인 세션(user session) 엔티티의 전체 구조 정의입니다.\n\n각 세션별로 만료, 해지, 로그인 시간 등을 추적합니다.\n"},"IDiscussionboardUserSession.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"신규 로그인 세션을 생성할 discussionboard_members의 ID입니다."},"session_token":{"type":"string","description":"생성되는 세션의 인증 토큰(암호화 랜덤 문자열)."},"expires_at":{"type":"string","format":"date-time","description":"신규 세션의 만료 예정 시각입니다(ISO 8601/UTC)."}},"required":["discussionboard_member_id","session_token","expires_at"],"description":"로그인 세션을 신규 생성할 때 사용하는 요청 바디 타입입니다.\n로그인 성공, 액세스 토큰 발급 시 각각 신규 세션이 추가됩니다.\n"},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"현재 페이지 번호(1부터 시작).\n\nStandard pagination에서 현재 페이지 인덱스를 나타냅니다."},"limit":{"type":"integer","format":"uint32","description":"한 페이지당 포함되는 레코드 수(기본값 100).\n\n페이징 제어 시 설정됩니다."},"records":{"type":"integer","format":"uint32","description":"전체 데이터베이스 내 레코드 총 수입니다."},"pages":{"type":"integer","format":"uint32","description":"전체 페이지 개수로, records/limit의 올림으로 계산됩니다."}},"required":["current","limit","records","pages"],"description":"페이지네이션 처리용 표준 구조체입니다.\n\nIPage 컨테이너의 pagination 하위에서 사용되며, 전체 페이지 정보(현재/최대 페이지, 전체 레코드, 페이지당 개수 등)를 제공합니다.\n"}}},"completed":48,"total":191,"step":0,"created_at":"2025-07-22T13:37:20.309Z"},"tokenUsage":{"facade":{"aggregate":{"total":1080609,"input":{"total":1015132,"cached":33536},"output":{"total":65477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1080609,"input":{"total":1015132,"cached":33536},"output":{"total":65477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1080609,"input":{"total":1015132,"cached":33536},"output":{"total":65477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1080609,"input":{"total":1015132,"cached":33536},"output":{"total":65477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardWarning":{"type":"object","description":"IPageIDiscussionboardWarning는 게시판 경고 엔티티(Discussion Board Warning)에 대한 페이지네이션된 검색 결과를 제공하는 컨테이너 타입입니다. 이 타입은 시스템 내의 경고 조치 기록들을 효율적으로 조회, 정렬, 필터링, 그리고 대규모 결과셋에서 일부만 반환하는데 사용됩니다.\n\n구성 요소:\n- pagination: 현재 페이지, 전체 페이지 수, 총 레코드 수, 페이지 몰림 제한 등 페이지네이션에 대한 정보를 포함합니다.\n- data: IDiscussionboardWarning 객체 배열로, 각각의 게시판 경고 엔티티(경고 ID, 경고 대상, 사유, 일시 등)의 상세 정보를 포함합니다.\n\n비즈니스 설명:\n이 컨테이너는 관리자 및 모더레이터가 경고 기록 전체를 탐색하거나 특정 조건(대상, 발신자, 기간, 사유 등)별로 조회할 때 사용됩니다. 모든 데이터는 3정규형(3NF) 원칙에 따라 원자적으로 저장됩니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarning"},"description":"경고 개별 엔티티 배열입니다."}},"required":["pagination","data"]},"IDiscussionboardWarning":{"type":"object","description":"IDiscussionboardWarning는 게시판 내에서 관리자 혹은 모더레이터에 의해 사용자(관리자/모더레이터/일반회원)에게 발급된 개별 경고(Warning)에 대한 상세 정보를 담는 타입입니다. 각 경고는 경고 대상 유형, 발급자 유형, 경고 발생 원인, 연관 신고 등의 필드와 생성 시각 정보가 포함됩니다.\n\n이 타입의 각 필드는 원본 PRISMA discussionboard_warnings 정의와 일치하며, 경고 기록의 투명한 감사, 점진적 제재, 반복 위반 분석 등에 사용됩니다.","properties":{"id":{"type":"string","format":"uuid","description":"경고 레코드의 UUID. PRISMA discussionboard_warnings.id와 1:1 매칭됨."},"target_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 관리자(ADMIN)일 경우의 ID. PRISMA discussionboard_warnings.target_admin_id(Nullable). 관리자가 아닌 경우 null."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 관리자(ADMIN)일 경우의 ID. PRISMA discussionboard_warnings.target_admin_id(Nullable). 관리자가 아닌 경우 null."}],"description":"경고를 받은 대상이 관리자(ADMIN)일 경우의 ID. PRISMA discussionboard_warnings.target_admin_id(Nullable). 관리자가 아닌 경우 null."},"target_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 모더레이터(MODERATOR)일 경우의 ID. PRISMA discussionboard_warnings.target_moderator_id(Nullable). 그렇지 않으면 null."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 모더레이터(MODERATOR)일 경우의 ID. PRISMA discussionboard_warnings.target_moderator_id(Nullable). 그렇지 않으면 null."}],"description":"경고를 받은 대상이 모더레이터(MODERATOR)일 경우의 ID. PRISMA discussionboard_warnings.target_moderator_id(Nullable). 그렇지 않으면 null."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 일반 회원(MEMBER)일 경우의 ID. PRISMA discussionboard_warnings.target_member_id. 그렇지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 일반 회원(MEMBER)일 경우의 ID. PRISMA discussionboard_warnings.target_member_id. 그렇지 않으면 null."}],"description":"경고 대상이 일반 회원(MEMBER)일 경우의 ID. PRISMA discussionboard_warnings.target_member_id. 그렇지 않으면 null."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 부여한 자가 관리자일 경우의 ID. PRISMA discussionboard_warnings.actor_admin_id. 없으면 null."},{"type":"null","format":"uuid","description":"경고를 부여한 자가 관리자일 경우의 ID. PRISMA discussionboard_warnings.actor_admin_id. 없으면 null."}],"description":"경고를 부여한 자가 관리자일 경우의 ID. PRISMA discussionboard_warnings.actor_admin_id. 없으면 null."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 부여한 자가 모더레이터일 경우의 ID. PRISMA discussionboard_warnings.actor_moderator_id. 없으면 null."},{"type":"null","format":"uuid","description":"경고를 부여한 자가 모더레이터일 경우의 ID. PRISMA discussionboard_warnings.actor_moderator_id. 없으면 null."}],"description":"경고를 부여한 자가 모더레이터일 경우의 ID. PRISMA discussionboard_warnings.actor_moderator_id. 없으면 null."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"이 경고가 특정 신고(Report)에 의거한 것인 경우 그 신고의 ID. PRISMA discussionboard_warnings.related_report_id. 없으면 null."},{"type":"null","format":"uuid","description":"이 경고가 특정 신고(Report)에 의거한 것인 경우 그 신고의 ID. PRISMA discussionboard_warnings.related_report_id. 없으면 null."}],"description":"이 경고가 특정 신고(Report)에 의거한 것인 경우 그 신고의 ID. PRISMA discussionboard_warnings.related_report_id. 없으면 null."},"reason":{"type":"string","description":"경고 발부 사유. 예: '경미한 욕설', '주제 벗어남'. 원본 PRISMA discussionboard_warnings.reason 컬럼 설명에 따름."},"created_at":{"type":"string","format":"date-time","description":"경고가 발부된 UTC 시각. PRISMA discussionboard_warnings.created_at과 일치."}},"required":["id","reason","created_at"]},"IDiscussionboardWarning.ICreate":{"type":"object","description":"IDiscussionboardWarning.ICreate는 system 내에서 새로운 경고 기록을 생성할 때 사용하는 입력 객체입니다. 경고 대상, 발급자, 사유 등 PRISMA schema의 필수 컬럼을 모두 포함합니다. 생성 시점과 관련 신고는 policy에 따라 optional로 제공 가능하며, 실제 DB 입력 시 누락될 수 있습니다.\n\n이 타입은 주로 관리자 또는 모더레이터가 특정 사용자에 대해 경고를 등록할 때 사용되며, 클라이언트와 관리자 도구 API 전송에서 활용됩니다.","properties":{"target_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 관리자일 경우 지정. 필요하지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 관리자일 경우 지정. 필요하지 않으면 null."}],"description":"경고 대상이 관리자일 경우 지정. 필요하지 않으면 null."},"target_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 모더레이터일 경우 지정. 필요하지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 모더레이터일 경우 지정. 필요하지 않으면 null."}],"description":"경고 대상이 모더레이터일 경우 지정. 필요하지 않으면 null."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 회원일 경우 지정. 필요하지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 회원일 경우 지정. 필요하지 않으면 null."}],"description":"경고 대상이 회원일 경우 지정. 필요하지 않으면 null."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 발급자가 관리자일 경우 지정."},{"type":"null","format":"uuid","description":"경고 발급자가 관리자일 경우 지정."}],"description":"경고 발급자가 관리자일 경우 지정."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 발급자가 모더레이터일 경우 지정."},{"type":"null","format":"uuid","description":"경고 발급자가 모더레이터일 경우 지정."}],"description":"경고 발급자가 모더레이터일 경우 지정."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"이 경고가 기반한 신고 아이디(optional). null 등록 시 미연결."},{"type":"null","format":"uuid","description":"이 경고가 기반한 신고 아이디(optional). null 등록 시 미연결."}],"description":"이 경고가 기반한 신고 아이디(optional). null 등록 시 미연결."},"reason":{"type":"string","description":"경고 사유 코멘트 (예: '스팸글 지속' 등). 비어 있을 수 없음."}},"required":["reason"]},"IDiscussionboardWarning.IUpdate":{"type":"object","description":"IDiscussionboardWarning.IUpdate는 기존의 경고 기록을 갱신(수정)할 때 사용하는 타입입니다. 수정 가능 필드는 사유(reason), 관련 신고 연결 등 제한적입니다. 보안 정책상 발급자/대상 변경은 권한자만 허용되며, 모든 수정 내역은 감사 로그에 기록됩니다.\n\n이 엔티티는 PRISMA schema의 discussionboard_warnings에 저장된 원본 데이터 중 일부만 갱신하는 패치 목적에 사용됩니다.","properties":{"reason":{"oneOf":[{"type":"string","description":"경고 사유를 갱신하는 필드(선택적). null 지정은 미수정 의미."},{"type":"null","description":"경고 사유를 갱신하는 필드(선택적). null 지정은 미수정 의미."}],"description":"경고 사유를 갱신하는 필드(선택적). null 지정은 미수정 의미."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연결된 신고 아이디 갱신(선택적). null이면 연결 해제."},{"type":"null","format":"uuid","description":"연결된 신고 아이디 갱신(선택적). null이면 연결 해제."}],"description":"연결된 신고 아이디 갱신(선택적). null이면 연결 해제."}},"required":[]},"IDiscussionboardWarning.IDeleteResponse":{"type":"object","description":"IDiscussionboardWarning.IDeleteResponse는 단일 경고 레코드 삭제 요청의 결과를 반환합니다. 보통 삭제된 경고의 ID와 삭제 성공 여부, 혹은 추가 메시지를 포함하며, 시스템 정책에 따라 필드는 조정될 수 있습니다.","properties":{"id":{"type":"string","format":"uuid","description":"삭제된 경고의 UUID"},"result":{"type":"string","description":"삭제 결과(ex: 'success', 'fail', 'not_found')"},"message":{"oneOf":[{"type":"string","description":"부가 설명 메시지, null 가능"},{"type":"null","description":"부가 설명 메시지, null 가능"}],"description":"부가 설명 메시지, null 가능"}},"required":["id","result"]},"IDiscussionboardAuditLog.IRequest":{"type":"object","description":"IDiscussionboardAuditLog.IRequest는 감사 로그 검색/정렬/필터링을 위한 요청 파라미터 타입입니다. 주로 액터 ID, 이벤트 타입, 기간, 키워드 기반 검색, 페이지네이션 등의 필드를 포함하며, 관리 및 모더레이터가 로그 이력 접근 시 사용됩니다.\n\nPRISMA discussionboard_audit_logs 구조 및 요구사항(2.6 감사 및 로깅)을 반영합니다.","properties":{"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"관리자 액터 기준 검색용(ID 또는 null)"},{"type":"null","format":"uuid","description":"관리자 액터 기준 검색용(ID 또는 null)"}],"description":"관리자 액터 기준 검색용(ID 또는 null)"}},"required":[]},"IPageIDiscussionboardAuditLog":{"type":"object","description":"IPageIDiscussionboardAuditLog는 감사 로그(Audit Log) 엔티티의 검색 결과를 페이지네이션 컨테이너로 반환하는 타입입니다.\n\n페이지 정보와 함께 감사 로그 이력배열을 제공합니다. 전형적으로 관리자가 기록 전체 열람 및 필터 검색, 대용량 감사 이력 분석에 활용됩니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAuditLogs"},"description":"감사 로그 엔티티 배열"}},"required":["pagination","data"]},"IDiscussionboardAuditLog":{"type":"object","description":"IDiscussionboardAuditLog는 단일 감사 로그의 상세 정보를 설명하는 타입입니다. 액터(관리자/모더레이터/회원), 연관 리포트/조치, 이벤트 타입, 설명, 발생시각 필드를 보유하며, 3정규형 원칙에 따라 구조화되어 있습니다. 모든 이벤트는 플랫폼 보안·감사·규정 준수 목적의 로그 관리에 사용됩니다.","properties":{"id":{"type":"string","format":"uuid","description":"감사 로그의 PK(UUID)."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"관리자 액터일 경우 해당 관리자 ID, null이면 비적용."},{"type":"null","format":"uuid","description":"관리자 액터일 경우 해당 관리자 ID, null이면 비적용."}],"description":"관리자 액터일 경우 해당 관리자 ID, null이면 비적용."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"모더레이터 액터 지정(Nullable)."},{"type":"null","format":"uuid","description":"모더레이터 액터 지정(Nullable)."}],"description":"모더레이터 액터 지정(Nullable)."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"회원 액터일 경우 지정, 아니면 null."},{"type":"null","format":"uuid","description":"회원 액터일 경우 지정, 아니면 null."}],"description":"회원 액터일 경우 지정, 아니면 null."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 신고 이력 ID. 없다면 null."},{"type":"null","format":"uuid","description":"연관 신고 이력 ID. 없다면 null."}],"description":"연관 신고 이력 ID. 없다면 null."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관된 moderation action ID. 없을 수 있음."},{"type":"null","format":"uuid","description":"연관된 moderation action ID. 없을 수 있음."}],"description":"연관된 moderation action ID. 없을 수 있음."},"event_type":{"type":"string","description":"이벤트/동작의 유형(예: permission_change, status_update, ban_imposed 등)."},"event_detail":{"type":"string","description":"이벤트 발생 내역에 대한 상세 기술."},"created_at":{"type":"string","format":"date-time","description":"감사 로그 생성시각(UTC, ISO8601)."}},"required":["id","event_type","event_detail","created_at"]},"IDiscussionboardAuditLogs.ICreate":{"type":"object","description":"IDiscussionboardAuditLogs.ICreate는 감사 로그 단건 생성 요청에서 사용됩니다. 이벤트 종류, 연관 관계, 액터, 가능한 상세 메시지 등 PRISMA discussionboard_audit_logs와 동일하게 모든 생성 필드를 포함하며, 필수 내역 및 옵션 내역은 정책에 맞게 분기됩니다.","properties":{"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터가 관리자일 때 ID."},{"type":"null","format":"uuid","description":"액터가 관리자일 때 ID."}],"description":"액터가 관리자일 때 ID."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터가 모더레이터일 때 ID."},{"type":"null","format":"uuid","description":"액터가 모더레이터일 때 ID."}],"description":"액터가 모더레이터일 때 ID."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터가 일반 회원일 때 ID."},{"type":"null","format":"uuid","description":"액터가 일반 회원일 때 ID."}],"description":"액터가 일반 회원일 때 ID."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관된 신고 ID(선택적)."},{"type":"null","format":"uuid","description":"연관된 신고 ID(선택적)."}],"description":"연관된 신고 ID(선택적)."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 moderation action ID."},{"type":"null","format":"uuid","description":"연관 moderation action ID."}],"description":"연관 moderation action ID."},"event_type":{"type":"string","description":"감사 로그 이벤트 유형."},"event_detail":{"type":"string","description":"이벤트 상세."}},"required":["event_type","event_detail"]},"IDiscussionboardAuditLogs":{"type":"object","description":"IDiscussionboardAuditLogs는 감사 로그 리스트 검색/페이징 및 상세 조회에서 응답 객체로 사용됩니다. 단건 속성 세트와 함께 리스트·컨테이너 구조에 포함되어 반환할 수 있습니다. 원본 PRISMA discussionboard_audit_logs의 스키마와 필드 일치.","properties":{"id":{"type":"string","format":"uuid","description":"감사 로그 ID(PK)."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터(관리자) UUID, 없으면 null."},{"type":"null","format":"uuid","description":"액터(관리자) UUID, 없으면 null."}],"description":"액터(관리자) UUID, 없으면 null."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터(모더레이터) UUID."},{"type":"null","format":"uuid","description":"액터(모더레이터) UUID."}],"description":"액터(모더레이터) UUID."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터(회원) UUID."},{"type":"null","format":"uuid","description":"액터(회원) UUID."}],"description":"액터(회원) UUID."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련 신고 or null."},{"type":"null","format":"uuid","description":"관련 신고 or null."}],"description":"관련 신고 or null."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 moderation action ID."},{"type":"null","format":"uuid","description":"연관 moderation action ID."}],"description":"연관 moderation action ID."},"event_type":{"type":"string","description":"이벤트(액션) 타입."},"event_detail":{"type":"string","description":"세부 이벤트 설명."},"created_at":{"type":"string","format":"date-time","description":"이력 기록 생성 시각(UTC, ISO8601)."}},"required":["id","event_type","event_detail","created_at"]},"IDiscussionboardAuditLogs.IUpdate":{"type":"object","description":"IDiscussionboardAuditLogs.IUpdate는 감사 로그의 일부 필드(비가역적/감사허용 필드만)를 수정하는 업데이트 용 객체입니다. 내부 정책상 일부 예약 필드만 수정 허용(예: event_detail 추가 메모 또는 규정상 수정 가능).","properties":{"event_detail":{"oneOf":[{"type":"string","description":"감사 상세 메모/보충 코멘트 등(예약 필드). null 입력 시 변경 없음."},{"type":"null","description":"감사 상세 메모/보충 코멘트 등(예약 필드). null 입력 시 변경 없음."}],"description":"감사 상세 메모/보충 코멘트 등(예약 필드). null 입력 시 변경 없음."}},"required":[]},"IDiscussionboardCommunityGuidelines.IRequest":{"type":"object","description":"IDiscussionboardCommunityGuidelines.IRequest는 커뮤니티 가이드라인 레코드 검색, 필터, 페이징 요청을 위한 타입입니다. 필터 가능 파라미터(키워드, 정렬, 활성/비활성, 페이지), 및 관리자/모더레이터 검색 시나리오에 적합합니다. 모든 필드는 시스템의 가이드라인 구조를 따릅니다.","properties":{"status":{"oneOf":[{"type":"string","description":"활성/비활성 상태 필터(예: 'active', 'inactive' 또는 null=전체)"},{"type":"null","description":"활성/비활성 상태 필터(예: 'active', 'inactive' 또는 null=전체)"}],"description":"활성/비활성 상태 필터(예: 'active', 'inactive' 또는 null=전체)"},"keyword":{"oneOf":[{"type":"string","description":"가이드라인 내 키워드 검색 필드. null 시 무시."},{"type":"null","description":"가이드라인 내 키워드 검색 필드. null 시 무시."}],"description":"가이드라인 내 키워드 검색 필드. null 시 무시."},"page":{"oneOf":[{"type":"integer","description":"페이지 번호. 0 이상, null 시 디폴트."},{"type":"null","description":"페이지 번호. 0 이상, null 시 디폴트."}],"description":"페이지 번호. 0 이상, null 시 디폴트."},"limit":{"oneOf":[{"type":"integer","description":"페이지 당 최대 반환 레코드 수. null 시 시스템 디폴트 적용."},{"type":"null","description":"페이지 당 최대 반환 레코드 수. null 시 시스템 디폴트 적용."}],"description":"페이지 당 최대 반환 레코드 수. null 시 시스템 디폴트 적용."}},"required":[]}}},"completed":60,"total":191,"step":0,"created_at":"2025-07-22T13:37:20.936Z"},"tokenUsage":{"facade":{"aggregate":{"total":1166805,"input":{"total":1098072,"cached":33536},"output":{"total":68733,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1166805,"input":{"total":1098072,"cached":33536},"output":{"total":68733,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1166805,"input":{"total":1098072,"cached":33536},"output":{"total":68733,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1166805,"input":{"total":1098072,"cached":33536},"output":{"total":68733,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardCommunityGuidelines":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보를 담고 있습니다.\n\n전체 결과 집합 내에서 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 총 페이지 수 등을 제공합니다. 검색, 필터링, 대량 데이터 조회 시 사용됩니다. (표준 AutoBe 구조 참조)"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommunityGuidelines"},"description":"해당 페이지의 커뮤니티 가이드라인 레코드 배열입니다.\n\n각 항목에는 가이드라인의 모든 세부 정보(제목, 본문, 활성화 여부 등)가 포함되어 있습니다."}},"required":["pagination","data"],"description":"커뮤니티 가이드라인의 조회 결과를 페이지네이션 형태로 제공합니다.\n\n각 페이지에는 한정된 수의 가이드라인 데이터와, 페이지네이션 정보가 포함되어 있습니다. 데이터 탐색 및 대량 레코드 관리를 위해 설계되었습니다.\n\n이 타입은 페이지네이션과 같이 사용되는 표준 컨테이너로써, IDiscussionboardCommunityGuidelines 객체의 반복 집합과 페이징 메타 정보를 함께 반환합니다."},"IDiscussionboardCommunityGuidelines":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"이 가이드라인의 고유 식별자입니다.\n\nPrisma 테이블에서 PK로 사용되며, 가이드라인을 참조하거나 상세 조회 시 사용됩니다."},"title":{"type":"string","description":"가이드라인 제목(섹션명)입니다.\n\n사용자에게 공개되는 명칭이며, 중복 불가 조건이 있습니다. 예: \"게시글 예절\", \"금지 행위\" 등. 단일 원자값으로 저장되어 3NF 준수합니다."},"body":{"type":"string","description":"풀 텍스트로 된 가이드라인 본문입니다.\n\n커뮤니티 규칙의 세부 내용을 명확하고 구체적으로 설명합니다. 예시: \"타인을 모욕하는 언어 사용 시 경고 및 영구 밴이 발생할 수 있습니다.\" 등. 3NF 원자 텍스트."},"order_index":{"type":"integer","description":"가이드라인의 표시 순서(정수값)입니다.\n\nUI 리스트, FAQ 등에서의 정렬순을 위해 사용합니다. 관리자 페이지에서 순서 조절이 가능합니다. 중복 불가."},"is_active":{"type":"boolean","description":"이 가이드라인이 현재 플랫폼에서 효력이 있는지 여부입니다.\n\n비활성화된 가이드라인은 사용자에게 노출되지 않으나, 관리/감사용으로 유지될 수 있습니다."},"created_at":{"type":"string","format":"date-time","description":"이 가이드라인 레코드가 생성된 일시입니다.\n\n정책 변경 및 변천사 기록의 근거가 됩니다."},"updated_at":{"type":"string","format":"date-time","description":"가이드라인 본문의 최근 수정 일시입니다.\n\n감사 및 변경 이력 추적용입니다."}},"required":["id","title","body","order_index","is_active","created_at","updated_at"],"description":"커뮤니티 가이드라인 엔터티 전체 구조.\n\n이 객체는 각각의 가이드라인 규칙(예: \"예의 준수\", \"금지된 행위\" 등)에 대한 식별자, 제목, 본문, 표시 순서, 활성 여부, 생성/수정 일자 정보를 포함합니다.\n\nPrisma discussionboard_community_guidelines 테이블을 바탕으로, 모든 주요 속성 및 감사용 메타데이터를 제공합니다. UI 표시, 관리자 편집, API 조회 등에 주로 사용됩니다."},"IDiscussionboardCommunityGuidelines.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"생성할 가이드라인의 제목(섹션명)입니다.\n\n다른 가이드라인과 중복 불가, 사용자/관리자에게 명확히 전달되는 명칭이어야 합니다."},"body":{"type":"string","description":"새 가이드라인의 본문입니다.\n\n구체적인 규칙이나 지침을 포함하는 텍스트입니다."},"order_index":{"type":"integer","description":"GUIDE 정렬용 인덱스입니다.\n\nUI에 표시될 순서를 지정합니다. 중복될 수 없고, 중복 시 에러가 반환됩니다."},"is_active":{"type":"boolean","description":"활성화 여부 플래그입니다.\n\n생성 시 적용 가능/비활성화 여부를 명시적으로 지정합니다. 기본값 true(서비스 정책에 따라 고정/옵션 처리)."}},"required":["title","body","order_index","is_active"],"description":"새로운 커뮤니티 규칙(가이드라인)을 생성하기 위한 요청용 타입입니다.\n\nPrisma discussionboard_community_guidelines의 주요 컬럼(title, body, order_index, is_active)에 대응합니다. 제목과 순서값에 대한 유니크 제약이 있으며, 활성화 여부는 생성 시점에서 결정할 수 있습니다. 관리자/정책 운영자가 신규 규칙 추가 시 활용합니다."},"IDiscussionboardCommunityGuidelines.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"변경할 가이드라인 제목입니다. 중복 불가."},"body":{"type":"string","description":"수정할 가이드라인 본문입니다. 길이/내용 자유."},"order_index":{"type":"integer","description":"수정할 표시 순서 인덱스입니다. 중복 불가."},"is_active":{"type":"boolean","description":"이 규칙의 활성/비활성 여부를 변경할 수 있습니다."}},"required":["title","body","order_index","is_active"],"description":"기존 커뮤니티 가이드라인을 수정하기 위한 요청 타입입니다.\n\n기본적으로 title, body, order_index, is_active 네 가지 속성을 모두 입력하며, 생성과 동일한 유니크 제약(제목, 표시순서)이 적용됩니다."},"IDiscussionboardContentPolicies.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"요청하는 페이지 번호입니다. 1-base 입니다. (기본: 1)"},"limit":{"type":"integer","description":"페이지당 반환할 컨텐츠 정책 레코드(아이템) 수. (기본: 20)"},"is_active":{"oneOf":[{"type":"boolean","description":"정책 활성/비활성 여부로 결과를 필터링할 수 있습니다."},{"type":"null"}],"description":"정책 활성/비활성 여부로 결과를 필터링할 수 있습니다."},"keyword":{"oneOf":[{"type":"string","description":"정책명, 카테고리, 설명 등 텍스트로 부분 검색할 키워드스트링입니다.\n\n검색 용도이며, null(또는 미포함)시 전체 반환"},{"type":"null"}],"description":"정책명, 카테고리, 설명 등 텍스트로 부분 검색할 키워드스트링입니다.\n\n검색 용도이며, null(또는 미포함)시 전체 반환"},"category":{"oneOf":[{"type":"string","description":"카테고리명으로 정책을 필터링할 수 있습니다. 예: 'Spam', 'Copyright', 'Abuse' 등"},{"type":"null"}],"description":"카테고리명으로 정책을 필터링할 수 있습니다. 예: 'Spam', 'Copyright', 'Abuse' 등"}},"required":["page","limit"],"description":"컨텐츠 정책 목록을 페이징/필터링/검색할 때 사용하는 요청 타입입니다.\n\n정책 활성화 여부, 키워드, 카테고리 등 다양한 조건을 조합해 결과를 정렬/추출할 수 있습니다."},"IPageIDiscussionboardContentPolicies":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보. 요청 결과의 전체 페이지 수, 현재 페이지, 전체 레코드 수, 페이지당 항목 수를 담습니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardContentPolicies"},"description":"해당 페이지 구간에 포함된 컨텐츠 정책 레코드들의 배열입니다."}},"required":["pagination","data"],"description":"discussionboard_content_policies 정책 레코드들의 페이징 조회 결과 구조입니다.\n\npagination 필드에는 현재 페이지/전체 페이지/레코드 개수 등 메타가 포함되고, data필드에는 해당 페이지 레코드들이 일체로 담깁니다."},"IDiscussionboardContentPolicies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"정책 레코드의 고유 식별자입니다."},"policy_code":{"type":"string","description":"이 정책을 식별하는 단축 코드(예: 'NO_HATE_SPEECH').\n\n정책 관리, 참조, 내부 코드화 등에 사용하며, 중복 불가입니다."},"description":{"type":"string","description":"정책의 상세 설명입니다.\n\n제한사항, 허용범위, 위반 예시 등 정책 문서를 자유롭게 기술합니다."},"category":{"type":"string","description":"정책 유형/카테고리 값입니다. 예: 'Abuse', 'Spam', 'Copyright' 등\n\nUI 그룹핑/필터링에 활용됩니다."},"is_active":{"type":"boolean","description":"컨텐츠 정책의 활성화 여부(시스템 내 적용 중 여부)."},"created_at":{"type":"string","format":"date-time","description":"정책 레코드가 최초 생성된 일시입니다."},"updated_at":{"type":"string","format":"date-time","description":"정책 레코드의 최종 수정 일시입니다."}},"required":["id","policy_code","description","category","is_active","created_at","updated_at"],"description":"컨텐츠 정책(모더레이션 정책) 영역의 표준 엔터티 스키마입니다.\n\n각 정책은 고유 식별자, 단축 코드(고유), 텍스트 설명, 정책 카테고리, 활성 여부, 생성/수정일시 필드를 갖습니다.\n\nUI 표시, 관리 및 감사/조회 용도로 사용 되며, Prisma의 discussionboard_content_policies 테이블을 완벽히 반영합니다."},"IDiscussionboardContentPolicies.ICreate":{"type":"object","properties":{"policy_code":{"type":"string","description":"정책 고유 코드 값(예: 'NO_HATE_SPEECH').\n\n중복 불가하며, 정책의 내부 참조, 설정, 고유값으로 사용됩니다."},"description":{"type":"string","description":"정책의 서술적 설명입니다.\n\n허용/비허용 범위, 구체적인 정책 내용, 사용자 안내 등을 명확히 작성합니다."},"category":{"type":"string","description":"정책 카테고리명입니다. 예: 'Abuse', 'Spam', 'Copyright' 등"},"is_active":{"type":"boolean","description":"정책 활성화 여부입니다. 기본값 true, 플랫폼 정책에 따라 비활성도 가능."}},"required":["policy_code","description","category","is_active"],"description":"새로운 컨텐츠 정책(모더레이션 정책)을 추가할 때 사용하는 생성용 요청 스키마입니다.\n\n고유 정책 코드, 설명, 카테고리, 활성화 여부를 필수로 받으며, Prisma discussionboard_content_policies 테이블 구조에 맞게 설계 되었습니다."},"IDiscussionboardContentPolicies.IUpdate":{"type":"object","properties":{"policy_code":{"type":"string","description":"수정하려는 정책의 새 코드입니다(중복 불가)."},"description":{"type":"string","description":"정책 설명 및 본문 내용을 수정할 수 있습니다."},"category":{"type":"string","description":"정책 카테고리(유형)를 수정할 수 있습니다."},"is_active":{"type":"boolean","description":"활성화 여부를 변경할 수 있습니다."}},"required":["policy_code","description","category","is_active"],"description":"컨텐츠 정책 레코드를 갱신하는 요청 타입입니다.\n\n정책 고유 코드, 설명, 카테고리, 활성화 상태를 모두 입력해야 하며, 모든 값은 유효성 검사 및 중복 제약이 존재합니다."},"IDiscussionboardProfanityFilter.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"요청하는 페이지 번호입니다. 1-base 기준. (기본값: 1)"},"limit":{"type":"integer","description":"페이지당 반환할 금칙어 레코드 최대 수. (기본값: 20)"},"is_active":{"oneOf":[{"type":"boolean","description":"활성/비활성 플래그로 결과를 필터링할 수 있습니다(선택적)."},{"type":"null"}],"description":"활성/비활성 플래그로 결과를 필터링할 수 있습니다(선택적)."},"keyword":{"oneOf":[{"type":"string","description":"금칙어 검색용 텍스트, 단어 일부/전체/유사어 매칭에 사용.\n\n입력하지 않으면 전체 반환."},{"type":"null"}],"description":"금칙어 검색용 텍스트, 단어 일부/전체/유사어 매칭에 사용.\n\n입력하지 않으면 전체 반환."}},"required":["page","limit"],"description":"금칙어(비속어, profanity filter) 목록을 검색 및 페이지네이션할 때 쓰는 요청 바디 타입입니다.\n\n활성/비활성 여부, 키워드 등의 조합과 함께 결과를 효율적으로 조회할 수 있습니다."},"IPageIDiscussionboardProfanityFilter":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보입니다.\n\n전체 레코드 개수, 현재 페이지, 총 페이지 수, 페이지당 레코드 수 등의 메타 정보를 담습니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardProfanityFilter"},"description":"해당 페이지에 포함된 금칙어 엔티티 각각의 배열입니다."}},"required":["pagination","data"],"description":"금칙어(비속어 필터) 레코드들의 목록 및 페이징 컨테이너 타입입니다.\n\n페이지네이션 정보와 함께 개별 금칙어 엔트리들의 데이터 배열을 제공합니다."},"IDiscussionboardProfanityFilter":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"해당 금칙어 레코드의 고유 식별자입니다."},"word":{"type":"string","description":"필터링 대상이 되는 단어 또는 구입니다.\n\n중복 불가, 대소문자 구분, 3NF 원자 단어/구절로 저장됩니다(예: '바보', 'idiot' 등)."},"is_active":{"type":"boolean","description":"현재 이 금칙어가 필터링에 실제로 사용되는지 여부. 비활성화 시에는 필터링 룰에서 제외됩니다."},"created_at":{"type":"string","format":"date-time","description":"이 금칙어 엔트리가 생성된 일시입니다."},"updated_at":{"type":"string","format":"date-time","description":"금칙어 엔트리의 마지막 수정 일시 입니다."}},"required":["id","word","is_active","created_at","updated_at"],"description":"금칙어(비속어) 필터용 표준 엔터티 타입입니다.\n\n각 레코드는 하나의 필터링 단어나 구, 활성화 여부, 생성/수정 일시 등 핵심 필드를 포함하며, Prisma discussionboard_profanity_filters 테이블을 기반으로 전체 논리 구조를 반영합니다. 관리, UI 표시, 감사 용도 등에 사용됩니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호입니다."},"limit":{"type":"integer","description":"한 페이지당 최대 항목 수(기본: 100)."},"records":{"type":"integer","description":"총 레코드(엔티티) 수."},"pages":{"type":"integer","description":"전체 페이지 수입니다.\n\nrecords / limit 값을 올림 처리한 값입니다."}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보를 담는 표준 구조체입니다.\n\n현재 페이지, 페이지당 최대 수, 전체 레코드 수, 총 페이지 수 등을 포함합니다. 데이터를 페이지 단위로 효율적으로 전달/조회할 때 필수적인 메타 정보 타입입니다."}}},"completed":72,"total":191,"step":0,"created_at":"2025-07-22T13:37:28.420Z"},"tokenUsage":{"facade":{"aggregate":{"total":1253249,"input":{"total":1181021,"cached":33536},"output":{"total":72228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1253249,"input":{"total":1181021,"cached":33536},"output":{"total":72228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1253249,"input":{"total":1181021,"cached":33536},"output":{"total":72228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1253249,"input":{"total":1181021,"cached":33536},"output":{"total":72228,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardTag.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Search term for matching tag names. Supports full or partial match. Example: 'economy', 'policy', etc. Used to filter the result set to tags that match the query string. Referenced from requirements: tag discovery and search UI."},"page":{"type":"integer","description":"Pagination: page number (defaults to 1 if omitted).","minimum":1},"limit":{"type":"integer","description":"Pagination: number of records per page (defaults to 20 if omitted).","minimum":1},"sort":{"type":"string","description":"Field to sort results by (e.g., 'name', 'created_at')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'."}],"description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request schema for listing, searching, and filtering tags within the discussion board system.\n\nImplements business requirements from tag-discovery and filtering features. All properties are atomic and correspond to independent filter, sort, and pagination criteria as referenced in the Prisma table and requirements analysis. Allows clients to search for tag records, page through results, and order by supported fields. Used for admin, moderator, and member-facing tag search APIs."},"IPageIDiscussionboardTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardTag"},"description":"List of IDiscussionboardTag objects for the current page of results."}},"required":["pagination","data"],"description":"Paginated result type for lists of tag records from the discussion board.\n\nImplements presentation of tag search results (for filters, tag management, or UI chips), including standard pagination metadata and the list of tag objects. Matches IPage<T> convention, where T is IDiscussionboardTag."},"IDiscussionboardTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this tag record in the system. Directly aligns with the Prisma primary key for discussionboard_tags. Used for referencing, updating, and deleting tags in APIs and UIs."},"tag":{"type":"string","description":"Human-friendly tag value (e.g., 'policy', 'economy'). Implements tag definition requirement from functional specs and Prisma schema. Unique per system to avoid collision, as enforced in the DB."},"description":{"oneOf":[{"type":"string","description":"Textual description of the tag's use, scope, or meaning. Provides admins, moderators, and end users context for how and where to apply the tag. Optional field. Used for UI tooltips, tag detail modals, and search discoverability. Matches the tag description field in the Prisma schema."},{"type":"null"}],"description":"Textual description of the tag's use, scope, or meaning. Provides admins, moderators, and end users context for how and where to apply the tag. Optional field. Used for UI tooltips, tag detail modals, and search discoverability. Matches the tag description field in the Prisma schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this tag was created. Used for sorting, filtering, and audit trails as required by functional and compliance requirements."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this tag record. Fulfills audit and tracking requirements for tag modifications in admin panels or logs."}},"required":["id","tag","created_at","updated_at"],"description":"Discussion board tag entity definition. Corresponds to a record in the discussionboard_tags Prisma table.\n\nEnables tag-based categorization of boards, posts, or related entities as required by functional and business needs. Each tag stores a unique, human-readable label and optional description. System timestamps track record lifecycle events for audit/logging as required in compliance. Used as a normalized element for filters, navigation chips, and bulk tag management. Each property references the field design and documentation found in the Prisma schema for tags."},"IDiscussionboardTag.ICreate":{"type":"object","properties":{"tag":{"type":"string","description":"Human-friendly tag value (must be unique per system). Fulfills creation requirement in tag definitions as per specs and Prisma comments. Used to propose a new tag for use throughout the platform."},"description":{"oneOf":[{"type":"string","description":"Optional textual description giving more info/context to the tag's purpose/meaning. Important for discoverability and onboarding. May be omitted or null. Referenced in rich admin UI tag creation forms."},{"type":"null"}],"description":"Optional textual description giving more info/context to the tag's purpose/meaning. Important for discoverability and onboarding. May be omitted or null. Referenced in rich admin UI tag creation forms."}},"required":["tag"],"description":"Tag creation request object for the discussion board.\n\nLets admin or moderators define a new tag, specifying the unique value (displayed to end users), and optionally a description. Written directly to the discussionboard_tags table. Timestamps and ID fields are generated by the backend and are not required in create requests. Follows field/description detail from the Prisma table for tags."},"IDiscussionboardTag.IUpdate":{"type":"object","properties":{"tag":{"type":"string","description":"(Optional) New value for the tag string (unique per system, enforced by the backend). Only present if tag is being renamed. Corresponds to updatable tag-value field in Prisma."},"description":{"oneOf":[{"type":"string","description":"(Optional) New or replacement description for the tag. Updates the field as documented in the Prisma schema for tags. Can be set or cleared (null)."},{"type":"null"}],"description":"(Optional) New or replacement description for the tag. Updates the field as documented in the Prisma schema for tags. Can be set or cleared (null)."}},"required":[],"description":"Update request schema for tag records in the discussion board.\n\nAllows admin/moderators to update tag value (rename) and/or its description. Fields are optional—API may permit partial update. Only those specified are altered; others remain unaffected. Matches the 3NF update and audit requirements for tags per functional/non-functional spec."},"IDiscussionboardBoardSubscription.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by ID of the discussion board being subscribed to. Returns board subscriptions for this board only. Used to get all subscriptions to a board or for board-focused admin/mod analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by ID of the subscribing member (user). Returns only board subscriptions for this member. Used by profile screens and notification dashboards."},"created_after":{"type":"string","format":"date-time","description":"Filter to only subscriptions created after this timestamp. Used for analytics and recent activity queries."},"created_before":{"type":"string","format":"date-time","description":"Filter to only subscriptions created before this timestamp."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number (defaults to 1)."},"limit":{"type":"integer","minimum":1,"description":"Pagination: records per page (defaults to 20)."},"sort":{"type":"string","description":"Field for sort order (e.g., 'created_at', 'discussionboard_board_id')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'."}],"description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request filter and pagination schema for searching or listing board subscription records.\n\nImplements requirements for user dashboard, board following analytics, and admin reporting. Filters by board, user, or creation date. Pagination fields and sort params support large result sets efficiently."},"IPageIDiscussionboardBoardSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSubscription"},"description":"List of IDiscussionboardBoardSubscription entities meeting query/filter criteria."}},"required":["pagination","data"],"description":"Paginated response for board subscription records from the discussion board.\n\nReturns bulk results of board-follower subscriptions, including standard pagination info and an array of subscription records. Used in lists, user dashboards, and admin analytics apps. Follows IPage<T> convention, where T is IDiscussionboardBoardSubscription."},"IDiscussionboardBoardSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for this subscription record. Unique per board+member in discussionboard_board_subscriptions table. Used for updating/deleting subscriptions safely."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board being subscribed to, referencing discussionboard_boards.id. Implements business logic for linking boards to subscribers for notifications/analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"User/member subscribed to board (references member primary key). Fulfills per-member board following and notification requirements."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the subscription was created. Supports audit, sort, filter, and analytics requirements (as per retention/policy guidelines)."}},"required":["id","discussionboard_board_id","discussionboard_member_id","created_at"],"description":"Board subscription entity structure for the discussion board platform.\n\nConnects a member to a board for notification and personalized content features. Every board subscription record uniquely links a board and subscribing member, tracking creation time for audit and analytics. Implements notification delivery, new board activity alerting, and content-follow features. Each property references normalized, atomic data as per the Prisma schema and business spec."},"IDiscussionboardBoardSubscription.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board's ID for the subscription. Must match existing board record."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member (user) ID of the subscriber. Must reference existing member record."}},"required":["discussionboard_board_id","discussionboard_member_id"],"description":"Creation request schema for board subscription records.\n\nLets authenticated members (or admins/mods on their behalf) subscribe to/follow a specific board. Both board and member IDs must be valid and present in the system. Upon creation, automatic fields like id and created_at are managed by the backend. Properties directly reference normalized fields from schema for board subscriptions."},"IDiscussionboardBoardSubscription.IUpdate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"(Optional) New board ID to re-link the subscription. Only updatable for error correction or reassignment."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) New member ID if the subscription must be reassigned. Generally, updates to member are rare except during user merge or correction events."}},"required":[],"description":"Update request schema for a board subscription record (discussionboard_board_subscriptions).\n\nAllows modifying the linked board or member (for error correction, admin actions, or reassignments). Updates can one or both fields, always referencing schema-level UUID requirements. The id and created_at fields are never updatable via this schema."},"IDiscussionboardBoardSetting.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by board ID for settings. Only returns settings linked to the given board, as per requirements for per-board feature toggling."},"allow_images":{"type":"boolean","description":"Filter to settings where image posting is permitted (true) or not (false)."},"require_moderator_approval":{"type":"boolean","description":"Filter by whether moderator approval is required for new posts on the board. Used to locate boards subject to extra moderation or to find permissive boards."},"page":{"type":"integer","minimum":1,"description":"Pagination page number (defaults to 1 if omitted)."},"limit":{"type":"integer","minimum":1,"description":"Page size/number of records per page (defaults to 20 if omitted)."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'discussionboard_board_id')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending."},{"const":"desc","description":"Sort direction: ascending or descending."}],"description":"Sort direction: ascending or descending."}},"required":[],"description":"Request schema for searching, filtering, and paginating board settings records.\n\nImplements features for admin board settings configuration UIs, allows selecting by image permission, moderator approval status, or targeting settings for a specific board. Each field is atomic and matches a direct column in the board_settings Prisma table."},"IPageIDiscussionboardBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSetting"},"description":"List of per-board settings entities meeting the query/filters."}},"required":["pagination","data"],"description":"Paginated result for board settings query.\n\nImplements paging for per-board feature configurations, supporting workflow, admin dashboards, and configuration review. Returns 'data' array of IDiscussionboardBoardSetting records and pagination block. Used for admin tools, analytics, and system audits. Follows IPage<T> convention where T is IDiscussionboardBoardSetting."},"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board setting record. Direct primary key in the board_settings table. Used for safe updates/deletes and references."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board this setting applies to (PK of the linked board record). Enforces 1:1 mapping—each board can have only one settings record at a time."},"allow_images":{"type":"boolean","description":"True if image upload/posting is enabled for this board. Implements post type configuration as described in requirements. Used for toggling feature at board level for admins."},"require_moderator_approval":{"type":"boolean","description":"True if posts to this board require moderator approval before becoming visible. Fulfills moderation/approval workflow requirement, matching atomic Boolean in the settings schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when settings row was created (for audit/config change logs, admin review)."},"updated_at":{"type":"string","format":"date-time","description":"Last updated time for the settings record. Used in admin tools and audit/change history."}},"required":["id","discussionboard_board_id","allow_images","require_moderator_approval","created_at","updated_at"],"description":"Entity type for per-board settings/feature toggles in the discussion board.\n\nEvery record stores the configuration that impacts posting: whether images are allowed (feature toggle), and whether moderator review is required before posts are shown. These controls let platform admins adjust UX per-board, e.g., enabling images only on safe boards or requiring extra scrutiny for sensitive topics. All timestamps/IDs follow 3NF compliance from the Prisma schema. Used in admin dashboards and settings review interfaces."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number. 1-based. Represents the page in the result set being returned."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of records per page. Defaults to 100 if not specified. Controls the size of each page returned in searches."},"records":{"type":"integer","format":"uint32","description":"Total number of records found for this result set (NOT just this page). Supports pagination UIs and analytics."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages matching limit and record count. Used to render last page navigation or analytics."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata for paged API responses.\n\nReturned as part of every IPage<T> result. Communicates current page, limit, total records, and total pages to clients for navigation, UX, and analytics consistency. Complies with platform-wide pagination conventions in all list/search APIs."}}},"completed":84,"total":191,"step":0,"created_at":"2025-07-22T13:37:29.117Z"},"tokenUsage":{"facade":{"aggregate":{"total":1339512,"input":{"total":1263960,"cached":33536},"output":{"total":75552,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1339512,"input":{"total":1263960,"cached":33536},"output":{"total":75552,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1339512,"input":{"total":1263960,"cached":33536},"output":{"total":75552,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1339512,"input":{"total":1263960,"cached":33536},"output":{"total":75552,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardProfanityFilter.ICreate":{"type":"object","properties":{"word":{"type":"string","description":"단일 금칙어나 금칙 구절을 저장하는 필드입니다. 비속어나 필터링 대상 단어를 추가할 때 사용합니다. 예시: 'badword'."},"is_active":{"type":"boolean","description":"해당 단어나 구절이 현재 활성화되어 필터링에 적용되는지의 여부입니다. 관리자는 필요에 따라 비활성화 할 수 있습니다."}},"required":["word","is_active"],"description":"비속어/금칙어 목록에 새 단어를 추가하기 위한 생성 타입입니다. 커뮤니티 욕설 필터 또는 자동화 정책 관리 기능에서 관리자가 직접 단어를 등록할 때 활용됩니다. 단일 단어/구절과 활성화 상태만을 명시하며, 생성/수정 일자는 DB에서 자동 관리됩니다."},"IDiscussionboardProfanityFilter.IUpdate":{"type":"object","properties":{"word":{"type":"string","description":"업데이트할(변경할) 비속어 또는 단어입니다. 단어나 구절 자체 수정을 허용함(공백, 오타, 표기 차이 등 정정 시)."},"is_active":{"type":"boolean","description":"해당 금칙어/비속어의 활성,비활성 상태를 변경할 수 있습니다."}},"required":["word","is_active"],"description":"이미 등록된 비속어(금칙어)에 대해 단어 수정 또는 활성/비활성 설정을 변경할 때 사용하는 타입입니다. 키값(ID)은 API 경로 파라미터로 사용하므로 실제 본 타입에 포함되거나 필요하지 않고, 수정 가능한 필드만 입력받습니다."},"IDiscussionboardAutomatedSpamRule.IRequest":{"type":"object","properties":{"rule_pattern":{"type":"string","description":"검색/필터를 위한 스팸 감지 패턴(정규표현식 등) 문자열입니다. 예시: 'http(s)?://.*?example'."},"is_active":{"type":"boolean","description":"설정/필터 조건에서 '활성 중' 규칙만 검색할지 여부입니다."},"description":{"type":"string","description":"규칙 설명에 대한 키워드 검색 등에서 사용할 수 있습니다."},"page":{"type":"integer","description":"페이지네이션 요청 시, 요청 페이지 번호입니다. (1부터 시작)"},"limit":{"type":"integer","description":"한 페이지당 반환할 레코드 수입니다.(권장: 20~100, 시스템 기본 정책에 따름)"},"sort":{"type":"string","description":"정렬 방식이나 정렬 컬럼을 정할 때 사용할 옵션. 예시: 'created_at desc', 'rule_pattern asc'."}},"description":"스팸 자동화 규칙(정규표현식 등) 검색/페이징을 위한 조회 옵션 DTO. 주로 관리 패널이나 규칙 리뷰 화면에서 활용합니다.","required":[]},"IPageIDiscussionboardAutomatedSpamRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAutomatedSpamRule"},"description":"현 페이지에 포함된 스팸 규칙 정보 배열"}},"required":["pagination","data"],"description":"discussionboard_automated_spam_rules 테이블의 페이징 결과 컨테이너입니다. 현재 페이지의 결과 및 페이징/카운트 정보를 포함합니다."},"IDiscussionboardAutomatedSpamRule":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"스팸 룰의 고유 식별자 (uuid)."},"rule_pattern":{"type":"string","description":"적용/관리할 스팸 패턴(정규식, 키워드). 예시: 'bad-link-(regex)'. 플랫폼의 스팸 차단 로직에서 활용됨."},"description":{"type":"string","description":"이 룰이 검출하는 스팸 유형 또는 설명. 예: '피싱 URL 차단, 반복 게시 방지 등'."},"is_active":{"type":"boolean","description":"현재 활성화 상태 플래그. true=적용중, false=비활성."},"created_at":{"type":"string","format":"date-time","description":"이 룰이 최초 생성된 일시 (ISO8601)"},"updated_at":{"type":"string","format":"date-time","description":"최종 수정/업데이트된 일시 (ISO8601)"}},"required":["id","rule_pattern","description","is_active","created_at","updated_at"],"description":"discussionboard_automated_spam_rules의 단일 레코드 단위 구조를 정의합니다. 각 레코드는 자동 스팸 필터 패턴, 관리용 설명, 활성 상태, 생성/수정 일시로 구성되어 있습니다."},"IDiscussionboardAutomatedSpamRule.ICreate":{"type":"object","properties":{"rule_pattern":{"type":"string","description":"등록할 스팸 감지 패턴 문자열(정규표현식 등)."},"description":{"type":"string","description":"이 규칙의 설명(적용 범위, 검출 목적 등)."},"is_active":{"type":"boolean","description":"신규 생성 시 활성화 여부 플래그."}},"required":["rule_pattern","description","is_active"],"description":"새로운 스팸 패턴(자동 검열 규칙)을 등록할 때 사용하는 생성 DTO입니다. 필수 입력: 정규표현식(또는 키워드) 패턴, 관리용 설명, 활성화 여부."},"IDiscussionboardAutomatedSpamRule.IUpdate":{"type":"object","properties":{"rule_pattern":{"type":"string","description":"수정 및 재정의할 스팸 감지 규칙의 패턴(정규표현식 등)."},"description":{"type":"string","description":"설명(적용 영역, 목적 등) 수정 가능."},"is_active":{"type":"boolean","description":"활성/비활성 상태 업데이트 가능."}},"required":["rule_pattern","description","is_active"],"description":"기존의 자동 스팸 룰(DB PK: id) 관련 속성(패턴, 설명, 활성화 등) 전체를 업데이트할 때 사용하는 타입입니다."},"IDiscussionboardNotification.IRequest":{"type":"object","properties":{"type":{"type":"string","description":"필터/검색 시 사용할 알림 유형(예: reply, like, mention, moderation_action 등)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"알림 수신자(회원)의 UUID. 본인의 알림목록 조회 시 사용."},"is_read":{"type":"boolean","description":"읽음/안읽음 상태로 필터링 시 사용."},"delivered_at_from":{"type":"string","format":"date-time","description":"알림 생성/전송일 기준 검색 범위(시작 일시)"},"delivered_at_to":{"type":"string","format":"date-time","description":"알림 생성/전송일 기준 검색 범위(마지막 일시)"},"page":{"type":"integer","description":"페이징 요청 시, 요청 페이지 번호(1부터)."},"limit":{"type":"integer","description":"한 페이지당 반환할 알림 수 (기본값 시스템 정책)"},"sort":{"type":"string","description":"정렬 옵션: 예 'delivered_at desc', 'is_read asc'"}},"description":"discussionboard_notifications 알림 내역에서 검색, 필터링, 페이징을 하는 요청 DTO(유형, 수신자, 읽음상태, 날짜 범위 등 조건 입력)","required":[]},"IPageIDiscussionboardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_notifications"},"description":"현 페이지에 포함된 알림 엔티티 리스트"}},"required":["pagination","data"],"description":"discussionboard_notifications 알림목록 내역의 페이징/검색 결과 컨테이너. 페이징 메타 및 각 알림 아이템 리스트 제공."},"Idiscussionboard_notifications":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"알림 고유 식별자 (uuid)"},"discussionboard_member_id":{"type":"string","format":"uuid","description":"알림을 받은 유저의 PK(uuid)"},"type":{"type":"string","description":"알림 유형: reply, like, mention, moderation_action, system 등"},"related_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관(관련) 엔티티(예: post, comment, moderation_action 등)의 UUID. 특정 대상에 대한 알림일 경우 사용, 없으면 null."},{"type":"null","format":"uuid","description":"연관(관련) 엔티티(예: post, comment, moderation_action 등)의 UUID. 특정 대상에 대한 알림일 경우 사용, 없으면 null."}],"description":"연관(관련) 엔티티(예: post, comment, moderation_action 등)의 UUID. 특정 대상에 대한 알림일 경우 사용, 없으면 null."},"related_entity_type":{"oneOf":[{"type":"string","description":"연관된 엔티티 유형: 'post','comment','moderation_action' 등. null 허용."},{"type":"null","description":"연관된 엔티티 유형: 'post','comment','moderation_action' 등. null 허용."}],"description":"연관된 엔티티 유형: 'post','comment','moderation_action' 등. null 허용."},"content":{"type":"string","description":"알림 내용(메시지 본문)"},"is_read":{"type":"boolean","description":"읽음 여부(true=읽음, false=안읽음)"},"delivered_at":{"type":"string","format":"date-time","description":"알림이 사용자에게 전송/노출된 시각 (ISO8601)"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료시각(알림이 비활성화되는 시점). null이면 장기적 노출 알림."},{"type":"null","format":"date-time","description":"만료시각(알림이 비활성화되는 시점). null이면 장기적 노출 알림."}],"description":"만료시각(알림이 비활성화되는 시점). null이면 장기적 노출 알림."}},"required":["id","discussionboard_member_id","type","content","is_read","delivered_at"],"description":"discussionboard_notifications 엔티티의 대표 반환 구조체(알림 ID, 수신자, 유형, 내용, 상태, 생성 및 만료일 등 포함)"},"Idiscussionboard_notifications.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"알림 수신자 (회원 PK)"},"type":{"type":"string","description":"알림 유형 — 예: reply, like, mention, moderation_action 등"},"related_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련된 대상 객체(게시물, 댓글 등)의 UUID. 없다면 null."},{"type":"null","format":"uuid","description":"관련된 대상 객체(게시물, 댓글 등)의 UUID. 없다면 null."}],"description":"관련된 대상 객체(게시물, 댓글 등)의 UUID. 없다면 null."},"related_entity_type":{"oneOf":[{"type":"string","description":"관련 엔티티 유형(post, comment, moderation_action) — 없으면 null."},{"type":"null","description":"관련 엔티티 유형(post, comment, moderation_action) — 없으면 null."}],"description":"관련 엔티티 유형(post, comment, moderation_action) — 없으면 null."},"content":{"type":"string","description":"알림 메시지 본문"},"delivered_at":{"type":"string","format":"date-time","description":"알림 발송/노출 시간 (ISO8601)"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"알림 만료시각. 없다면(null) 무기한 유지"},{"type":"null","format":"date-time","description":"알림 만료시각. 없다면(null) 무기한 유지"}],"description":"알림 만료시각. 없다면(null) 무기한 유지"}},"required":["discussionboard_member_id","type","content","delivered_at"],"description":"새 알림 생성 요청 DTO. 수신 대상 회원, 알림 유형, 메시지, 발송 시각, (선택) 만료 시각 및 연관 엔티티 정보 포함."},"Idiscussionboard_notifications.IUpdate":{"type":"object","properties":{"type":{"type":"string","description":"알림의 유형. 필요 목적에 따라 수정 가능."},"related_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"수정할 연관 엔티티의 UUID. 없을 때는 null."},{"type":"null","format":"uuid","description":"수정할 연관 엔티티의 UUID. 없을 때는 null."}],"description":"수정할 연관 엔티티의 UUID. 없을 때는 null."},"related_entity_type":{"oneOf":[{"type":"string","description":"연관 엔티티의 타입(수정/이동 시 등). 없으면 null."},{"type":"null","description":"연관 엔티티의 타입(수정/이동 시 등). 없으면 null."}],"description":"연관 엔티티의 타입(수정/이동 시 등). 없으면 null."},"content":{"type":"string","description":"알림 본문의 내용(필요시 메시지 교체 등)."},"is_read":{"type":"boolean","description":"읽음 상태 변경(true/false)"},"delivered_at":{"type":"string","format":"date-time","description":"알림 발송/노출 시각 갱신."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료일시 수정 또는 null 처리"},{"type":"null","format":"date-time","description":"만료일시 수정 또는 null 처리"}],"description":"만료일시 수정 또는 null 처리"}},"required":["type","content","is_read","delivered_at"],"description":"기존 알림의 정보를 수정(주로 읽음 여부, 내용 보정 등)하는 요청 DTO입니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호(1부터)"},"limit":{"type":"integer","description":"페이지당 최대 항목수"},"records":{"type":"integer","description":"전체 레코드(검색결과 포함) 수"},"pages":{"type":"integer","description":"전체 페이지 수"}},"required":["current","limit","records","pages"],"description":"페이지네이션 응답 메타정보. 페이지번호, 한페이지 항목수, 전체 수, 전체페이지수 구성."}}},"completed":96,"total":191,"step":0,"created_at":"2025-07-22T13:37:33.209Z"},"tokenUsage":{"facade":{"aggregate":{"total":1425245,"input":{"total":1346911,"cached":33536},"output":{"total":78334,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1425245,"input":{"total":1346911,"cached":33536},"output":{"total":78334,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1425245,"input":{"total":1346911,"cached":33536},"output":{"total":78334,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1425245,"input":{"total":1346911,"cached":33536},"output":{"total":78334,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardUserSession.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"Opaque authentication token for this session. Used to identify a login state securely. Example: random UUID or JWT value, usually generated by the authentication mechanism.\n\nIn the context of updating a user session, this value may only be used for advanced operations such as session migration, device re-association, or system-level fixes. Most client-side session revocation or update operations will not modify this value."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp for the session (ISO 8601 format). Used to update session timeouts or prolong a session as part of user activity, system policies or admin overrides.\n\nRequired when updating session expiry rules for user logins or compliance actions. The new expiry date should always be in the future relative to current time. Changes are logged for audit trail."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the session was revoked/invalidated (ISO 8601). Set when forcing logout or ending session, either by user request, admin action, or system expiration.\n\nNullable: remains null for active sessions. Set to a timestamp when session is closed or forcibly log out a user from all devices (security requirement). All session changes must be audit-logged."},{"type":"null","format":"date-time","description":"Timestamp when the session was revoked/invalidated (ISO 8601). Set when forcing logout or ending session, either by user request, admin action, or system expiration.\n\nNullable: remains null for active sessions. Set to a timestamp when session is closed or forcibly log out a user from all devices (security requirement). All session changes must be audit-logged."}],"description":"Timestamp when the session was revoked/invalidated (ISO 8601). Set when forcing logout or ending session, either by user request, admin action, or system expiration.\n\nNullable: remains null for active sessions. Set to a timestamp when session is closed or forcibly log out a user from all devices (security requirement). All session changes must be audit-logged."}},"required":[],"description":"Data for updating a user session entry, as mapped to the discussionboard_user_sessions table.\n\nAll fields are optional and when supplied will overwrite the corresponding property for the session identified by {id}. This type is used for session revocation, expiry extension, or compliance updates. Refer to the Prisma schema's discussionboard_user_sessions model for allowed field semantics. All changes should be fully audit-logged."},"IDiscussionboardPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - page index to fetch (starting from 1 for the first page). Optional. Used for paged queries.\n\nUsed in combination with 'limit' for result segmentation."},"limit":{"type":"integer","description":"Pagination - number of posts per page. Optional. Used for paged queries; default set by application setting (may be 10~50).\n\nEnables client to request a specific window of results to match UX or efficiency needs. Max enforced for performance."},"search":{"type":"string","description":"Free-text search query (optional). Used to filter posts by title/body for keyword relevance.\n\nImplements text search feature, falling back to search engine or DB LIKE/ILIKE for title/body matching as required by requirements spec."},"board_id":{"type":"string","format":"uuid","description":"Board ID (discussionboard_boards.id) to filter posts within a specific board context.\n\nIf provided, limits results to posts made in this board. Enables board-centric feeds in frontend."},"author_id":{"type":"string","format":"uuid","description":"Author's account ID (discussionboard_members.id) to filter posts by a specific user.\n\nUsed for user profile views, moderator search, or admin drill-down on abusive users."},"sort_by":{"type":"string","description":"Field to sort by (e.g., 'created_at', 'updated_at', 'title'). Optional; default is sort by created_at descending.\n\nAllows the client to choose sorting field for the result set."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sort direction, either 'asc' (ascending) or 'desc' (descending). Optional. Default is 'desc'.\n\nWorks in conjunction with sort_by field to set result order."},{"const":"desc","description":"Sort direction, either 'asc' (ascending) or 'desc' (descending). Optional. Default is 'desc'.\n\nWorks in conjunction with sort_by field to set result order."}],"description":"Sort direction, either 'asc' (ascending) or 'desc' (descending). Optional. Default is 'desc'.\n\nWorks in conjunction with sort_by field to set result order."}},"required":[],"description":"Request filter for paginated and advanced list queries on discussionboard_posts.\n\nAll fields optionally restrict the set of posts to return and control pagination, filtering, and sorting for optimized UI/UX and admin workflows. Designed for flexible usage by post listing/searching endpoints as required by the requirements spec and Prisma schema. All filter fields are atomic, compliant with 3NF."},"IPageIDiscussionboardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata (current page, record count, total pages, etc) for the result list.\n\nConforms to the standard IPage.IPagination structure as required by OpenAPI conventions."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPost"},"description":"Array of post records for the current page. Each entry is a full atomic post object as returned by the main entity schema.\n\nSee IDiscussionboardPost for property breakdown."}},"required":["pagination","data"],"description":"A paginated result set of discussion board posts, as returned by the board listing/search operation.\n\nImplements the IPage<T> pattern with posts as T. Pagination ensures efficient front-end display and manageable data sizes."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the post. Serves as the immutable reference for all post operations and foreign-key lookups (e.g. comments, likes, audits)."},"board_id":{"type":"string","format":"uuid","description":"ID of the board (discussionboard_boards.id) that this post belongs to. Used for board-specific navigation, filtering and enforcement."},"author_id":{"type":"string","format":"uuid","description":"ID of the post author (discussionboard_members.id). Used for authorship tracking, profile aggregation, or permission checks (ownership model)."},"title":{"type":"string","description":"Title of the post. Atomic field with search/filter significance, visible on lists and detail views. 3NF compliance."},"body":{"type":"string","description":"Main content/body of the post. Contains the full raw text, markdown, or rich text allowed by platform policies. Not denormalized or computed."},"created_at":{"type":"string","format":"date-time","description":"Creation datetime (ISO 8601). Indicates when the post was originally published on the platform, used for display, sorting, and retention rules."},"updated_at":{"type":"string","format":"date-time","description":"Last update datetime for the post (ISO 8601). Used for flagging edited content and supporting moderation/audit workflows."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when post was deleted (if at all). Null for active posts. Used for soft deletion and compliance with audit/data retention. Settable only by privileged moderation actions."},{"type":"null","format":"date-time","description":"Timestamp when post was deleted (if at all). Null for active posts. Used for soft deletion and compliance with audit/data retention. Settable only by privileged moderation actions."}],"description":"Timestamp when post was deleted (if at all). Null for active posts. Used for soft deletion and compliance with audit/data retention. Settable only by privileged moderation actions."}},"required":["id","board_id","author_id","title","body","created_at","updated_at"],"description":"Atomic representation of a discussion board post, as defined by the 3NF-compliant discussionboard_posts table.\n\nIncludes identity, board association, author data, and all audit-important timestamp fields. All relationships are by foreign key only (no joined/denormalized data here). For use in single retrieves, list details, and as building block for post-related data structures (comments, likes, audits, etc.)."},"IDiscussionboardPost.ICreate":{"type":"object","properties":{"board_id":{"type":"string","format":"uuid","description":"Board to associate the post with (discussionboard_boards.id). Required on creation to ensure referential and system integrity."},"author_id":{"type":"string","format":"uuid","description":"Author account ID (discussionboard_members.id) who is posting. Auth context must ensure this matches logged-in user for non-admin/macro operations."},"title":{"type":"string","description":"Title of the post. Subject to application-side validation for length or unwanted characters. Initial value set here is final unless edited."},"body":{"type":"string","description":"Main body content of the post. May permit markdown, line breaks, or other rich text per platform settings. Subject to policy-based validation and spam/profanity filtering. Atomic."}},"required":["board_id","author_id","title","body"],"description":"Data required to create a new post in discussionboard_posts. Conforms to the creation endpoint input, and uses strictly normalized, atomic fields for referential and audit compliance.\n\nA successful request will create a post and return its full data structure. No derived or joined data is set at the time of creation."},"IDiscussionboardPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Update to the post's title (optional). Supply only if editing."},"body":{"type":"string","description":"Update to post body content (optional). Allows the author (or a moderator/admin) to update post text inline. Profanity filtering is required."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp for compliance or content removal (optional). Set only through delete endpoint or privileged mod/admin access. Null to restore post."},{"type":"null","format":"date-time","description":"Soft-delete timestamp for compliance or content removal (optional). Set only through delete endpoint or privileged mod/admin access. Null to restore post."}],"description":"Soft-delete timestamp for compliance or content removal (optional). Set only through delete endpoint or privileged mod/admin access. Null to restore post."}},"required":[],"description":"Payload for updating a post in the discussionboard_posts table.\n\nOnly permitted fields are included: title, body, deleted_at. Updates are audited, restricted by RBAC, and subject to content filtering rules. All updates are performed as partial/patch semantics unless otherwise dictated by method context."},"IDiscussionboardPostEdit.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - specifies which page of edit records to retrieve (1-based index)."},"limit":{"type":"integer","description":"Pagination control - number of edit entries to return per page. Optional; system default applies if not set."},"post_id":{"type":"string","format":"uuid","description":"ID of the post whose edits are to be queried. Enables per-post audit trail listing."},"editor_id":{"type":"string","format":"uuid","description":"ID of the member who performed the post edits. Used for searching edit logs by editor."},"edit_summary":{"type":"string","description":"Free-text, optional search term for matching edit summaries. Enables history annotation or detail search."},"edited_from":{"type":"string","format":"date-time","description":"Start datetime for edits (ISO 8601). Returns edits made on or after this date."},"edited_to":{"type":"string","format":"date-time","description":"End datetime for edits (ISO 8601). Returns edits made on or before this date."}},"required":[],"description":"Search/filter and pagination request for post edit log listing. Used by moderation and audit endpoints.\n\nAll fields are optional, supplying additional filtering for advanced workflow and compliance tasks. Maps directly to discussionboard_post_edits as referenced in specifications."},"IPageIDiscussionboardPostEdit":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details for the post edit log page (current, total pages, total records).\n\nStandard IPage.IPagination structure from OpenApi conventions."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostEdit"},"description":"Edit record entries for the returned page. Each record is an atomic post edit event, as returned by IDiscussionboardPostEdit."}},"required":["pagination","data"],"description":"Paginated set of post edit log records for board moderation, audit review, or compliance workflows.\n\nImplements IPage<T> pattern where T = IDiscussionboardPostEdit."},"IDiscussionboardPostEdit":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this post edit event. Atomic and audit-critical for logging post edit history."},"post_id":{"type":"string","format":"uuid","description":"ID of the post whose content was edited (discussionboard_posts.id). Used for audit trace and listing."},"editor_id":{"type":"string","format":"uuid","description":"ID of the member who performed the edit (discussionboard_members.id). Used for audit and compliance review."},"edit_summary":{"type":"string","description":"Optional summary or rationale for the edit event. Free text, nullable or empty for no summary. Used for moderation transparency."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp when the edit occurred (ISO 8601). Essential for audit trail and update sequencing."}},"required":["id","post_id","editor_id","edited_at"],"description":"Atomic record of a post edit event, as logged in discussionboard_post_edits. Each record represents a discrete change to a post's content, with actor and timing info for audit."},"IDiscussionboardPostEdit.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Target post ID to log the edit. Required."},"editor_id":{"type":"string","format":"uuid","description":"ID of the member performing this edit."},"edit_summary":{"type":"string","description":"Optional summary for this edit (reason, explanation, or meta info). Nullable; not all edits require an explicit summary."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp of edit event (ISO 8601 format). Set to current timestamp if not provided by client."}},"required":["post_id","editor_id","edited_at"],"description":"Payload to record a new post edit event in the audit log. Called by backend or moderation tool when a post is edited, for audit trail generation and history display."},"IDiscussionboardPostEdit.IUpdate":{"type":"object","properties":{"edit_summary":{"type":"string","description":"Updates/corrects the summary for this edit event. Only permitted field - history is otherwise immutable. Used for admin/mod annotation or compliance corrections."}},"required":[],"description":"Payload for updating fields of a post edit event (typically only edit_summary allowed)."},"IDiscussionboardPostLike.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - page to fetch in the like/dislike list."},"limit":{"type":"integer","description":"Number of like/dislike records to return per request."},"post_id":{"type":"string","format":"uuid","description":"Filter: Post to find reactions for. Used for analytics and UI list controls."},"user_id":{"type":"string","format":"uuid","description":"Filter: User who made the reaction. Used for personal like/dislike lists or moderator review."},"is_like":{"type":"boolean","description":"Filter: If true, select only 'like' entries. If false, only 'dislike' entries. Optional."},"from":{"type":"string","format":"date-time","description":"Start date/time for reactions. Filters like/dislikes on or after this timestamp in ISO 8601."},"to":{"type":"string","format":"date-time","description":"End date/time for reactions. Filters like/dislikes on or before this timestamp (ISO 8601)."}},"required":[],"description":"Request object for pagination, filtering, and analytics over the discussionboard_post_likes table.\n\nUsed by engagement analytics and moderation interfaces; all parameters are optional and may be combined for advanced filtering, date range analysis, or user activity review."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (1-based index). Indicates which page of the results this object represents.\n\nConforms to IPage.IPagination standard. Used by all paged list responses."},"limit":{"type":"integer","description":"Maximum number of items to be returned per page. Defaults set by application settings.\n\nAids in client-side paging; supports data consistency requirements."},"records":{"type":"integer","description":"Total number of matching records in the database for the filter query. Used for progress indicator UI and virtual scroll implementations."},"pages":{"type":"integer","description":"Total number of pages for this filter query (computed as records/limit, rounded up).\n\nUsed to determine if additional data fetching is required by client."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for IPage<T> container.\n\nIncluded in all paginated result responses for discussion board and admin UIs."}}},"completed":108,"total":191,"step":0,"created_at":"2025-07-22T13:37:40.061Z"},"tokenUsage":{"facade":{"aggregate":{"total":1512232,"input":{"total":1429850,"cached":33536},"output":{"total":82382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1512232,"input":{"total":1429850,"cached":33536},"output":{"total":82382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1512232,"input":{"total":1429850,"cached":33536},"output":{"total":82382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1512232,"input":{"total":1429850,"cached":33536},"output":{"total":82382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardCommentEdit.IUpdate":{"type":"object","properties":{"edit_summary":{"oneOf":[{"type":"string","description":"A brief explanation of the change being made to the comment edit entry. This field is used for audit and moderation tracing transparency, and it allows the editor or moderator to summarize the edit for the record. Reference: edit_summary in discussionboard_comment_edits (Prisma schema)."},{"type":"null","description":"A brief explanation of the change being made to the comment edit entry. This field is used for audit and moderation tracing transparency, and it allows the editor or moderator to summarize the edit for the record. Reference: edit_summary in discussionboard_comment_edits (Prisma schema)."}],"description":"A brief explanation of the change being made to the comment edit entry. This field is used for audit and moderation tracing transparency, and it allows the editor or moderator to summarize the edit for the record. Reference: edit_summary in discussionboard_comment_edits (Prisma schema)."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp of the edit event (ISO 8601 string in UTC with timezone where possible). Reflects when the comment was last edited. Must be set by server logic at the time the update occurs. Reference: edited_at in discussionboard_comment_edits."}},"required":["edited_at"],"description":"Update payload for an existing comment edit log (discussionboard_comment_edits). This input supports partial updates to the edit summary or to correct the edited_at timestamp, per audit/compliance requirements. All changes to this object are preserved in the audit log for moderator review."},"IDiscussionboardCommentEdit.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID v4) of the deleted comment edit log entry."},"deleted_at":{"type":"string","format":"date-time","description":"The timestamp when the comment edit entry was deleted. Used for audit trail and compliance review."}},"required":["id","deleted_at"],"description":"Result of deleting a comment edit log entry in the system for discussion board audit purposes. Used for frontend confirmation or later audit reference. Contains primary key and deletion timestamp."},"IDiscussionboardCommentView.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number for pagination. Defaults to the first page if omitted or null."},{"type":"null","format":"uint32","description":"Page number for pagination. Defaults to the first page if omitted or null."}],"description":"Page number for pagination. Defaults to the first page if omitted or null."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"The maximum number of items to return in a single page. This implements system limits for analytical and abuse-prevention scenarios. Default is 100; maximums may be constrained server-side."},{"type":"null","format":"uint32","description":"The maximum number of items to return in a single page. This implements system limits for analytical and abuse-prevention scenarios. Default is 100; maximums may be constrained server-side."}],"description":"The maximum number of items to return in a single page. This implements system limits for analytical and abuse-prevention scenarios. Default is 100; maximums may be constrained server-side."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"When supplied, filter the views by comment_id. Fetches only events related to that comment. Used in comment analytics and moderation dashboards."},{"type":"null","format":"uuid","description":"When supplied, filter the views by comment_id. Fetches only events related to that comment. Used in comment analytics and moderation dashboards."}],"description":"When supplied, filter the views by comment_id. Fetches only events related to that comment. Used in comment analytics and moderation dashboards."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"If supplied, filter view tracking records to only those associated with a given user (viewer). Null for guest/anonymous/omitted cases."},{"type":"null","format":"uuid","description":"If supplied, filter view tracking records to only those associated with a given user (viewer). Null for guest/anonymous/omitted cases."}],"description":"If supplied, filter view tracking records to only those associated with a given user (viewer). Null for guest/anonymous/omitted cases."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter comment view events by the anonymous session context (session_id field), matching session token assigned to a guest viewer. For audit and analytics."},{"type":"null","format":"uuid","description":"Filter comment view events by the anonymous session context (session_id field), matching session token assigned to a guest viewer. For audit and analytics."}],"description":"Filter comment view events by the anonymous session context (session_id field), matching session token assigned to a guest viewer. For audit and analytics."},"viewed_after":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for view events occurring after this datetime (ISO 8601 format)."},{"type":"null","format":"date-time","description":"Filter for view events occurring after this datetime (ISO 8601 format)."}],"description":"Filter for view events occurring after this datetime (ISO 8601 format)."},"viewed_before":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for view events occurring before this datetime (ISO 8601 format)."},{"type":"null","format":"date-time","description":"Filter for view events occurring before this datetime (ISO 8601 format)."}],"description":"Filter for view events occurring before this datetime (ISO 8601 format)."}},"description":"Request object for searching, filtering, or paginating comment view audit events in the discussion board. Allows for advanced analytics, anti-abuse audit, and engagement reporting by specifying any combination of parameters.","required":[]},"IPageIDiscussionboardCommentView":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentView"},"description":"The array of comment view audit entries matching filter/search. Each entry is a full atomic view event."}},"required":["pagination","data"],"description":"A page of discussion board comment view audit entries. Contains pagination metadata and array of comment view event entries (IPage<T> container)."},"IDiscussionboardCommentView":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID v4) for the comment view event tracking record (discussionboard_comment_views.id)."},"comment_id":{"type":"string","format":"uuid","description":"Foreign key ID referencing the comment being viewed. Links to discussionboard_comments.id."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Foreign key of the viewing member (discussionboard_members.id); may be null for guest/anonymous views."},{"type":"null","format":"uuid","description":"Foreign key of the viewing member (discussionboard_members.id); may be null for guest/anonymous views."}],"description":"Foreign key of the viewing member (discussionboard_members.id); may be null for guest/anonymous views."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Session identifier for the view event; for analytics and anonymous/guest management."},{"type":"null","format":"uuid","description":"Session identifier for the view event; for analytics and anonymous/guest management."}],"description":"Session identifier for the view event; for analytics and anonymous/guest management."},"viewed_at":{"type":"string","format":"date-time","description":"Timestamp when this view event was recorded, always in ISO 8601 format (UTC with time zone information)."}},"required":["id","comment_id","viewed_at"],"description":"Atomic audit/event record of a single comment view for analytics and anti-abuse event tracking. Reference: discussionboard_comment_views table. Contains foreign keys for comment, (optional) user, (optional) session, and timing."},"IDiscussionboardCommentView.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being viewed. Must match existing discussionboard_comments.id."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"The member ID (if authenticated) of the viewing user; null if not logged in (guest/anonymous view)."},{"type":"null","format":"uuid","description":"The member ID (if authenticated) of the viewing user; null if not logged in (guest/anonymous view)."}],"description":"The member ID (if authenticated) of the viewing user; null if not logged in (guest/anonymous view)."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional session identifier token for tracking guest/anonymous/identified session engagement. Useful in analytics, audit, and conversion reporting. Null if not available."},{"type":"null","format":"uuid","description":"Optional session identifier token for tracking guest/anonymous/identified session engagement. Useful in analytics, audit, and conversion reporting. Null if not available."}],"description":"Optional session identifier token for tracking guest/anonymous/identified session engagement. Useful in analytics, audit, and conversion reporting. Null if not available."},"viewed_at":{"type":"string","format":"date-time","description":"Datetime when the comment view event occurred, always as an ISO 8601 string (UTC with time zone)."}},"required":["comment_id","viewed_at"],"description":"Creation request for a new comment view event tracking record in discussionboard_comment_views. Captures context for analytics, engagement tracking, or anti-abuse audit. All fields relate to atomic event logging."},"IDiscussionboardCommentView.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Updated viewer member's UUID; may be used for merging session-to-user after login. Optional; null to clear."},{"type":"null","format":"uuid","description":"Updated viewer member's UUID; may be used for merging session-to-user after login. Optional; null to clear."}],"description":"Updated viewer member's UUID; may be used for merging session-to-user after login. Optional; null to clear."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Changes/updates to guest session context for the view event. Optional; null to clear."},{"type":"null","format":"uuid","description":"Changes/updates to guest session context for the view event. Optional; null to clear."}],"description":"Changes/updates to guest session context for the view event. Optional; null to clear."},"viewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Corrected or amended view timestamp for the entry. Optional; null if unchanged."},{"type":"null","format":"date-time","description":"Corrected or amended view timestamp for the entry. Optional; null if unchanged."}],"description":"Corrected or amended view timestamp for the entry. Optional; null if unchanged."}},"required":[],"description":"Update payload for a discussionboard_comment_views record. Supports corrections for user/session mapping, or analytic timing fixup. All fields optional."},"IPageIDiscussionboardReport.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number for paginating report entry results."},{"type":"null","format":"uint32","description":"Page number for paginating report entry results."}],"description":"Page number for paginating report entry results."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Number of results to include per page. Allows adjustment per analytic/audit consumption needs. Default is 100 if omitted."},{"type":"null","format":"uint32","description":"Number of results to include per page. Allows adjustment per analytic/audit consumption needs. Default is 100 if omitted."}],"description":"Number of results to include per page. Allows adjustment per analytic/audit consumption needs. Default is 100 if omitted."},"status":{"oneOf":[{"type":"string","description":"If set, restricts result set to only those reports with the provided status (e.g., pending, resolved, reviewed, rejected). Reference: 'status' in discussionboard_reports."},{"type":"null","description":"If set, restricts result set to only those reports with the provided status (e.g., pending, resolved, reviewed, rejected). Reference: 'status' in discussionboard_reports."}],"description":"If set, restricts result set to only those reports with the provided status (e.g., pending, resolved, reviewed, rejected). Reference: 'status' in discussionboard_reports."},"reporting_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, filters reports to only those filed by a specified member (the reporter)."},{"type":"null","format":"uuid","description":"If set, filters reports to only those filed by a specified member (the reporter)."}],"description":"If set, filters reports to only those filed by a specified member (the reporter)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters results to only those reports regarding a specific post (if supplied)."},{"type":"null","format":"uuid","description":"Filters results to only those reports regarding a specific post (if supplied)."}],"description":"Filters results to only those reports regarding a specific post (if supplied)."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters results to only those reports concerning a specific comment (if supplied)."},{"type":"null","format":"uuid","description":"Filters results to only those reports concerning a specific comment (if supplied)."}],"description":"Filters results to only those reports concerning a specific comment (if supplied)."},"reason":{"oneOf":[{"type":"string","description":"Substring search filter for report reasons. Enables searching for all reports matching a particular reason type/content."},{"type":"null","description":"Substring search filter for report reasons. Enables searching for all reports matching a particular reason type/content."}],"description":"Substring search filter for report reasons. Enables searching for all reports matching a particular reason type/content."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"If supplied, only reports created after this timestamp are returned."},{"type":"null","format":"date-time","description":"If supplied, only reports created after this timestamp are returned."}],"description":"If supplied, only reports created after this timestamp are returned."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"If supplied, only reports created before this timestamp are returned."},{"type":"null","format":"date-time","description":"If supplied, only reports created before this timestamp are returned."}],"description":"If supplied, only reports created before this timestamp are returned."}},"description":"Request payload for listing, paginating, and searching user-submitted content report entries in the discussion board platform. Used for admin/moderation dashboards and analytics reporting.","required":[]},"IPageIDiscussionboardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReport"},"description":"Array of full content report entries matching search, filter and paging criteria."}},"required":["pagination","data"],"description":"Result container for paginated, filtered, or searched set of content report entries (IPage<T> container for discussionboard_reports records). Contains pagination metadata and array of content reports."},"IDiscussionboardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID v4) of the report event entry (discussionboard_reports.id)."},"reporting_member_id":{"type":"string","format":"uuid","description":"Foreign key UUID of the member who submitted the report (discussionboard_members.id)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If not null, the UUID of the post being reported (discussionboard_posts.id). Null if the report addresses a comment instead."},{"type":"null","format":"uuid","description":"If not null, the UUID of the post being reported (discussionboard_posts.id). Null if the report addresses a comment instead."}],"description":"If not null, the UUID of the post being reported (discussionboard_posts.id). Null if the report addresses a comment instead."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If not null, the UUID of the comment being reported (discussionboard_comments.id). Null if the report concerns a post."},{"type":"null","format":"uuid","description":"If not null, the UUID of the comment being reported (discussionboard_comments.id). Null if the report concerns a post."}],"description":"If not null, the UUID of the comment being reported (discussionboard_comments.id). Null if the report concerns a post."},"reason":{"type":"string","description":"The reason specified by the user for submitting the report. E.g., 'hate speech', 'spam', 'off-topic', matching the business requirement for user-provided rationale."},"status":{"type":"string","description":"Current status/state of the report (e.g., 'pending', 'reviewed', 'resolved', 'rejected'). Only controlled enum values set by application logic, not free-form."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the report was filed in the system. ISO 8601."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the report was first reviewed in moderation. Null if never reviewed."},{"type":"null","format":"date-time","description":"When the report was first reviewed in moderation. Null if never reviewed."}],"description":"When the report was first reviewed in moderation. Null if never reviewed."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the report was closed (resolved, rejected, etc). Null until status finalized."},{"type":"null","format":"date-time","description":"When the report was closed (resolved, rejected, etc). Null until status finalized."}],"description":"When the report was closed (resolved, rejected, etc). Null until status finalized."},"moderation_note":{"oneOf":[{"type":"string","description":"Any moderator/admin notes as to resolution or comments for audit/compliance. Optional and nullable; may be blank until reviewed."},{"type":"null","description":"Any moderator/admin notes as to resolution or comments for audit/compliance. Optional and nullable; may be blank until reviewed."}],"description":"Any moderator/admin notes as to resolution or comments for audit/compliance. Optional and nullable; may be blank until reviewed."}},"required":["id","reporting_member_id","reason","status","created_at"],"description":"Full record of a content report/event in the discussion board (discussionboard_reports). Contains reporter info, target post/comment, full rationale, state, audit trail timestamps, and moderation notes."},"IDiscussionboardReport.ICreate":{"type":"object","properties":{"reporting_member_id":{"type":"string","format":"uuid","description":"Foreign key UUID of the user who is reporting the content (discussionboard_members.id)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post being reported (if this is a post report). Null for comment-based reports."},{"type":"null","format":"uuid","description":"ID of the post being reported (if this is a post report). Null for comment-based reports."}],"description":"ID of the post being reported (if this is a post report). Null for comment-based reports."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment being reported (if this is a comment report). Null for post-based reports."},{"type":"null","format":"uuid","description":"ID of the comment being reported (if this is a comment report). Null for post-based reports."}],"description":"ID of the comment being reported (if this is a comment report). Null for post-based reports."},"reason":{"type":"string","description":"Discretionary free-form string specifying the reason for reporting this content (e.g., 'spam', 'abusive language', etc.)."}},"required":["reporting_member_id","reason"],"description":"Create request for a new content report in discussionboard_reports. Captures user/rationale and report target (post or comment). All audit/event timing is server generated."},"IDiscussionboardReport.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Update to report status (e.g., 'reviewed', 'resolved', 'rejected'). Only controlled status values allowed by application logic."},"moderation_note":{"oneOf":[{"type":"string","description":"Update or append to the moderation/admin note for this report's review/backtrack. Null or omitted for no change."},{"type":"null","description":"Update or append to the moderation/admin note for this report's review/backtrack. Null or omitted for no change."}],"description":"Update or append to the moderation/admin note for this report's review/backtrack. Null or omitted for no change."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for when review occurred. Typically system generated. Null or omitted for no change."},{"type":"null","format":"date-time","description":"Timestamp for when review occurred. Typically system generated. Null or omitted for no change."}],"description":"Timestamp for when review occurred. Typically system generated. Null or omitted for no change."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp indicating when the report was closed/resolved. Null or omitted for open reports."},{"type":"null","format":"date-time","description":"Timestamp indicating when the report was closed/resolved. Null or omitted for open reports."}],"description":"Timestamp indicating when the report was closed/resolved. Null or omitted for open reports."}},"description":"Update payload for an existing user-submitted content report in the discussion board (discussionboard_reports). Used by admin/moderator as part of the review and resolution workflow. All relationship and referential validity is enforced by business logic.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number in pagination result."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page."},"records":{"type":"integer","format":"uint32","description":"Total records in the result set."},"pages":{"type":"integer","format":"uint32","description":"Total number of result pages."}},"required":["current","limit","records","pages"],"description":"Result pagination metadata according to IPage standard interface. Used for all paged list results in API."}}},"completed":120,"total":191,"step":0,"created_at":"2025-07-22T13:37:40.750Z"},"tokenUsage":{"facade":{"aggregate":{"total":1598103,"input":{"total":1512793,"cached":33536},"output":{"total":85310,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1598103,"input":{"total":1512793,"cached":33536},"output":{"total":85310,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1598103,"input":{"total":1512793,"cached":33536},"output":{"total":85310,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1598103,"input":{"total":1512793,"cached":33536},"output":{"total":85310,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardGuestSummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information, following the IPage interface standard. Includes current page, per-page limit, total record count and total page count.\n\nDerived from business logic in typical paged results (see requirement 3.2 Performance & Scalability)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardGuestSummary"},"description":"List of summarized guest session records for the current page.\n\nEach entry corresponds to an individual guest browsing session, providing only the summary fields necessary for auditing or session analytics as described in requirements and ERD."}},"required":["pagination","data"],"description":"Paginated container for guest session summaries used in listing, analytics, or administrative reporting.\n\nImplements the result shape for APIs facilitating guest session search, supporting all IPage features for auditing/tracking the journey of unauthenticated ('guest') users."},"IDiscussionboardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique guest session identifier. Directly corresponds to discussionboard_guests.id in the Prisma schema. Must be a DB-generated UUID."},"session_token":{"type":"string","description":"Opaque session cookie or token identifying the guest browser. Used for guest tracking, correlation, and recognizing repeat visits."},"created_at":{"type":"string","format":"date-time","description":"Datetime guest session was initiated. Reflects guest activity timeline and supports retention/audit logic."}},"required":["id","session_token","created_at"],"description":"Guest user session entity capturing individual, unauthenticated visitor sessions.\n\nImplements the structure used to track anonymous access for analytics, up-selling, and compliance audit as described in the Actors ERD and Prisma schema."},"IDiscussionboardGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"Opaque session token or cookie for the new guest session to be created.\n\nEssential for correlating guest usage events to the appropriate session."},"created_at":{"type":"string","format":"date-time","description":"Time the guest session was initiated. Required for accurate analytics and platform onboarding logic."}},"required":["session_token","created_at"],"description":"Request body for creating a new guest session. Provides required atomic data per the Actors domain schema.\n\nUsed in registration or guest journey tracking flows, directly correlated to IDiscussionboardGuest entity constraints."},"IDiscussionboardGuest.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"New or replacement guest session token if updating session identifier (such as for token regeneration).\n\nMutating this is rare outside guest-to-member conversion or admin repair flows."},"created_at":{"type":"string","format":"date-time","description":"Updated creation timestamp (for migration or correction). Allows valid adjustment to guest session lifecycle if needed."}},"description":"Request body for updating a guest session record.\n\nAll fields are optional for partial update semantics. Used only for administrative or compliance-mandated updates. Must not mutate ID; only session_token and creation time are modifiable.","required":[]},"IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the delete operation succeeded.\n\nTrue if the target was deleted or already non-existent; false if the operation failed."},"deletedId":{"type":"string","format":"uuid","description":"UUID of the deleted object, if applicable (may be null if delete removed nothing or was a logical/soft delete)."}},"required":["success"],"description":"Generic result wrapper for delete operations, indicating overall outcome and deleted entity reference for audit and client-side logic."},"IPageDiscussionboardUserProfile.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Used for paging through results, with first page indexed at 1."},"limit":{"type":"integer","description":"Number of items per page (page size). Used to control results page granularity in compliance with requirement 3.2 Performance & Scalability."},"display_name_query":{"type":"string","description":"Optional filter to search for profiles by display_name using substring match or similar logic. Supports UI profile searches and filtering workflows."},"created_after":{"type":"string","format":"date-time","description":"Optional filter, limits results to user profiles created after this timestamp. Enables time-windowed admin/analytics queries."},"created_before":{"type":"string","format":"date-time","description":"Optional filter limiting results to profiles created before this timestamp."}},"description":"Request body for searching or paging user profiles.\n\nField set implements typical discoverability/admin search features as referenced in user journey and admin UI requirements. Any property not provided is ignored or defaults to system settings. All properties optional except page/limit (required for paged lists).","required":[]},"IPageDiscussionboardUserProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for container (current, limit, total, pages).\n\nImplements industry-standard IPage contract for discoverable user profile APIs."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserProfile"},"description":"List of user profile records for the page.\n\nIncorporates all profile attributes as defined in the normalized profile schema and requirements."}},"required":["pagination","data"],"description":"Paginated (paged) user profile result container. Used for UI tables, admin search, and batch analytics workflows."},"IDiscussionboardUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique profile record identifier. DB-generated, immutable."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Belonged member's ID, linking profile to a registered account.\n\n1:1 mapping with member table as required by Oracle business rules and usability flows."},"display_name":{"type":"string","description":"Optional display name/nickname. Allows user-chosen public name distinct from membership username. Implements personalization & discovery requirements."},"bio":{"type":"string","description":"Short, optional biographical introduction field. Used in social/discoverability views and profile UIs. Supports null or omission for users who haven't provided a bio."},"avatar_url":{"type":"string","description":"Public URI (usually HTTP/S) for user's avatar/profile picture. May be null/omitted, must not contain sensitive content. Max length enforced at DB level (vendor-specific, e.g., VARCHAR(80000) in ERD)."},"created_at":{"type":"string","format":"date-time","description":"Profile creation timestamp for audit and admin tracking."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for version history/compliance visibility."}},"required":["id","discussionboard_member_id","created_at","updated_at"],"description":"User profile entity, used to customize and enhance member visibility in social/discoverability UIs.\n\nImplements profile requirements from Actors ERD and persona/journey documentation. Distinct from membership core data to maintain normalization."},"IDiscussionboardUserProfile.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Target member ID (must refer to registered membership).\n\nRequired for correct relational insertion at profile creation time."},"display_name":{"type":"string","description":"Optional display name. May be provided at or after creation."},"bio":{"type":"string","description":"Short introductory or biographical text, user-supplied, optional at creation."},"avatar_url":{"type":"string","description":"Avatar/profile image URI. Optional; may be added at or after creation."}},"required":["discussionboard_member_id"],"description":"Request body for creating a new user profile entity. All fields besides membership linkage are optional at creation time, in keeping with minimal onboarding requirements."},"IDiscussionboardUserProfile.IUpdate":{"type":"object","properties":{"display_name":{"type":"string","description":"Replacement or updated display name.\n\nAny change is constrained by uniqueness and system personalization requirements."},"bio":{"type":"string","description":"Replacement or updated biographical intro. Old text is overwritten; all newlines/formatting must comply with content policies."},"avatar_url":{"type":"string","description":"Replacement or updated avatar image URI. System should validate format/safety before accepting new value."}},"description":"Request body for updating a user profile entity. Any/all fields permitted; all properties wholly overwrite pre-existing values if provided.\n\nUsed in account personalization and admin moderation interfaces.","required":[]},"IPageDiscussionboardUserEmail.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paging through email listing, starts at 1."},"limit":{"type":"integer","description":"Maximum emails per page (page size)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optionally filter emails by member ID (for showing all emails for a selected account in admin or profile emails panel)."},"email_query":{"type":"string","description":"Search or filter emails by substring or match logic for audit/control use cases."},"is_verified":{"type":"boolean","description":"Optionally restrict search to verified (true) or unverified (false) emails, supporting compliance/reporting."},"is_primary":{"type":"boolean","description":"Optionally filter for primary (true) or non-primary (false) email contacts."},"added_after":{"type":"string","format":"date-time","description":"Filter for emails added after this timestamp (audit or campaign analytics)."},"added_before":{"type":"string","format":"date-time","description":"Filter for emails added before this timestamp."}},"description":"Request body for searching, paginating, or filtering user emails. Implements flexible parameter set for advanced admin/audit workflows as required by privacy and account management rules. All properties optional except paging/limit (required for paged lists).","required":[]},"IPageDiscussionboardUserEmail":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details following IPage contract: current page, total records, etc."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserEmail"},"description":"List of user email records for current page as per request query and paging params."}},"required":["pagination","data"],"description":"Paginated, filterable user email result set, used for listing and batch review in admin and account management UIs."},"IDiscussionboardGuestSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique guest session identifier."},"session_token":{"type":"string","description":"Opaque session token associated with the guest session. Only included for audit/logging or if required in compliance queries."},"created_at":{"type":"string","format":"date-time","description":"Time guest session was initiated."}},"required":["id","session_token","created_at"],"description":"Summary of guest session entity. Used in paginated guest session table or analytics report listing, represents a normalized row as retrieved for IPageIDiscussionboardGuestSummary."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Limitation of records per a page. Default 100."},"records":{"type":"integer","description":"Total records in the database."},"pages":{"type":"integer","description":"Total pages. Equal to records / limit with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information used for all paginated containers.\n\nDefines the standard schema for paginated queries and results as required throughout the system."},"IDiscussionboardUserEmail":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique email record identifier."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Account membership ID that the email is associated with."},"email":{"type":"string","description":"Email address string used for notifications, recovery, login, and audit tracing."},"is_verified":{"type":"boolean","description":"True if email has passed verification (registration, notification, etc)."},"is_primary":{"type":"boolean","description":"Indicates if this email address is the user's primary email (true) or not (false)."},"added_at":{"type":"string","format":"date-time","description":"Date/time the email was added."},"verified_at":{"type":"string","format":"date-time","description":"Timestamp when verification was completed, or null if never verified."}},"required":["id","discussionboard_member_id","email","is_verified","is_primary","added_at"],"description":"User email entity containing registration, notification, and audit-trace contact information.\n\nComplies with the registration, notification, and privacy management requirements in the Actors domain ERD."}}},"completed":132,"total":191,"step":0,"created_at":"2025-07-22T13:37:41.872Z"},"tokenUsage":{"facade":{"aggregate":{"total":1683982,"input":{"total":1595726,"cached":33536},"output":{"total":88256,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1683982,"input":{"total":1595726,"cached":33536},"output":{"total":88256,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1683982,"input":{"total":1595726,"cached":33536},"output":{"total":88256,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1683982,"input":{"total":1595726,"cached":33536},"output":{"total":88256,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardComments.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"The unique identifier of the post to which this comment belongs. Reference to discussionboard_posts.id. Required when creating a new comment to properly associate it to the target post. Must be an existing post. Fulfills the requirement for linking comments to specific posts, ensuring threaded discussion integrity.\n\nBased on Prisma schema: discussionboard_comments.post_id (UUID). See ERD and schema documentation for details."},"author_id":{"type":"string","format":"uuid","description":"The unique identifier of the member creating the comment (registered user, moderator, or admin). Foreign key to discussionboard_members.id. Used to track the author for permissions, audit, and attribution. Must reference an existing user account.\n\nBased on discussionboard_comments.author_id."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID indicating the parent comment (for replies/nested threads). If null, this comment is a top-level comment on the post. Required for threaded/nested comment support as per Business Requirements 2.2.\n\nPrisma schema: discussionboard_comments.parent_id."},{"type":"null","format":"uuid","description":"Optional UUID indicating the parent comment (for replies/nested threads). If null, this comment is a top-level comment on the post. Required for threaded/nested comment support as per Business Requirements 2.2.\n\nPrisma schema: discussionboard_comments.parent_id."}],"description":"Optional UUID indicating the parent comment (for replies/nested threads). If null, this comment is a top-level comment on the post. Required for threaded/nested comment support as per Business Requirements 2.2.\n\nPrisma schema: discussionboard_comments.parent_id."},"body":{"type":"string","description":"The plaintext body/content of the comment. Cannot be empty. Supports multi-paragraph input with moderation limitations. Subject to profanity filtering and content policy per the requirements analysis and content policies.\n\nPrisma column: discussionboard_comments.body."}},"required":["post_id","author_id","body"],"description":"Request body for creating a new comment or reply in the political/economic discussion board. This type captures all atomic values needed for a creation operation within the 'discussionboard_comments' schema, including post association, author linkage, optional nesting (for replies), and actual comment content. All values align strictly with the database table structure and business requirements for comment auditing, moderation, and thread integrity."},"IDiscussionboardComments.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"The updated text content of the comment. Only the body is updatable, and is subject to moderation policies, profanity filtering, and content rules. Cannot be empty. Used for in-place comment edits as allowed by permissions.\n\nReference: discussionboard_comments.body."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the comment was updated. Automatically set by backend logic but can be provided for compliance or audit flows that record client-side update intent.\n\nReference: discussionboard_comments.updated_at."}},"required":["body"],"description":"Request body for updating a comment or reply in the discussion board. Allows updating only the text/body of a comment and the updated_at timestamp. Intended for member edits, moderator/admin corrections, and audit tracking. Enforces business rules for allowed content edits, validation, and audit trail capture. Based on the atomic structure and editing conventions described in requirements and the 3NF discussionboard_comments table."},"IDiscussionboardCommentLikes.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"Optional filter to query likes/dislikes by the associated comment's ID. Based on discussionboard_comment_likes.comment_id. Used for listing the reaction events on a particular comment. Enables focused analytics and history retrieval when reviewing a comment's engagement."},"user_id":{"type":"string","format":"uuid","description":"Optional filter to retrieve likes/dislikes by reacting user (member/mod/admin) ID. Used for querying a user's engagement footprint or listing their reactions on comments. Based on discussionboard_comment_likes.user_id."},"is_like":{"type":"boolean","description":"Optional filter to specify if querying for 'likes' (true) or 'dislikes' (false). Enables discrimination between types of reactions for reporting and targeting engagement analytics. Sourced from discussionboard_comment_likes.is_like."},"created_after":{"type":"string","format":"date-time","description":"Optional lower time boundary for filtering reactions based on creation timestamp. Used for audits, trend analysis, or rate-limiting by time window."},"created_before":{"type":"string","format":"date-time","description":"Optional upper time boundary for filtering reactions based on creation timestamp. Enables range queries over the activity log for reporting and compliance."},"page":{"type":"integer","format":"uint32","description":"Page number for paginated results. Used for controlling result batch as part of standard paging convention."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of results per page. Default set by backend, may be overridden for specific management or analytics operations."}},"required":[],"description":"Filtering, search, and pagination request body for listing or analyzing comment like/dislike events. This type allows flexible querying by comment, user, reaction type, and time window. Implements full audit, analytics, and administrator moderation review features for the engagement events on comments. Built to mirror the advanced search/filter capabilities described in business and moderation requirements."},"IPageDiscussionboardCommentLikes":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentLike"},"description":"Array of comment like/dislike records matching the query filter or search conditions. Each object represents a single engagement event between a user and a comment in the discussion board, including like/dislike indication, actor, comment reference, and timestamp."}},"required":["pagination","data"],"description":"A paginated result container for discussion board comment like/dislike event listings. Conforms to the standard IPage<T> contract for API consistency. Wraps both pagination metadata and an array of matching comment like/dislike events as defined by IDiscussionboardCommentLike. Used for returning search and analytics results in a normalized, extensible format across the board engagement APIs."},"IDiscussionboardCommentLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this comment like/dislike event. PK for discussionboard_comment_likes."},"comment_id":{"type":"string","format":"uuid","description":"ID of the comment to which this event applies. Foreign key to discussionboard_comments.id. Critical for joining, analytics, audit, and engagement features."},"user_id":{"type":"string","format":"uuid","description":"The user (member, mod, or admin) expressing the like/dislike. Used for audit trails, anti-abuse workflow, and engagement analytics. FK to discussionboard_members.id."},"is_like":{"type":"boolean","description":"Boolean flag indicating if this event is a 'like' (true) or a 'dislike' (false). Used for reporting, analytics, and engagement visualizations."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the like/dislike event was recorded. Used for anti-abuse, engagement trends, and audit log correlation."}},"required":["id","comment_id","user_id","is_like","created_at"],"description":"A single like/dislike event for a comment on the discussion board. Tracks relational links to the user, comment, and reaction type, and logs the event time. Implements auditing, engagement analytics, and content moderation as described in requirements and 3NF table definition."},"IDiscussionboardCommentLike.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"The target comment receiving the like/dislike. Required for linking the event to the correct comment in the engagement tracking infrastructure. Foreign key to discussionboard_comments.id."},"user_id":{"type":"string","format":"uuid","description":"ID of the user expressing the like/dislike. Must match a valid, active user who has permission to interact with the comment (member/mod/admin). FK to discussionboard_members.id."},"is_like":{"type":"boolean","description":"Flag indicating whether this event is a positive reaction ('like': true) or a negative one ('dislike': false). Drives engagement, moderation, and anti-abuse policies."}},"required":["comment_id","user_id","is_like"],"description":"Request body for registering a new like or dislike on a comment. Captures atomic details needed for event tracking, anti-abuse, and analytics. Built on the requirements for engagement, moderation, and per-user event auditing as specified in the database model and requirements report."},"IDiscussionboardCommentLike.IUpdate":{"type":"object","properties":{"is_like":{"type":"boolean","description":"Allows changing the reaction from like to dislike (true→false or vice versa). Only permitted for event owner, admins, or moderators according to reaction-editing rules. Used for anti-abuse and engagement auditing."}},"required":["is_like"],"description":"Request body for updating an existing like/dislike event on a comment. Only the reaction type is updatable post-creation, in accordance with moderation, anti-abuse, and analytics business needs."},"IDiscussionboardCommentLike.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the deleted comment like/dislike event."},"deleted":{"type":"boolean","description":"Boolean flag indicating successful deletion of the target event. Used for confirming event history and feedback to API consumers."}},"required":["id","deleted"],"description":"Response type confirming deletion of a like/dislike event on a comment. Returns the ID and a confirmation flag for client-side handling, audit log, or UI state management per moderation and engagement removal flows."},"IDiscussionboardCommentEdit.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"Filter for edits corresponding to a specific comment by its ID. Enables listing the full edit history for a particular comment (FK to discussionboard_comments.id)."},"editor_id":{"type":"string","format":"uuid","description":"Filter for edits performed by a specific member (FK to discussionboard_members.id). Useful for reviewing actions by a user across comments for moderation or audit purposes."},"edited_after":{"type":"string","format":"date-time","description":"Filter for edits performed after a certain timestamp. Used for audit trails, analytics, or time-bounded review of edits."},"edited_before":{"type":"string","format":"date-time","description":"Filter for edits before a specific timestamp. Enables reporting and compliance investigations tied to date ranges."},"page":{"type":"integer","format":"uint32","description":"Pagination parameter specifying which result page to start from."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of edit events to include per paginated page."}},"required":[],"description":"Filtering/search request body for retrieving or analyzing comment edit log events. Allows granular query by comment, editing user, edit timings, and standard paging options. Implements transparency and compliance requirements for audit trails and moderation insight."},"IPageIDiscussionboardCommentEdit":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentEdit"},"description":"Array of comment edit log events representing mutable history for each edited comment. Provides normalized, audit-ready per-edit snapshots for transparency and compliance workflows."}},"required":["pagination","data"],"description":"Paginated response type for arrays of comment edit history records. Used to transmit result sets for advanced comment edit queries, analytics, moderation, and compliance reporting. Wraps an array of full event details in a standard IPage structure. All entries reference individual comment revision/audit events."},"IDiscussionboardCommentEdit":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the comment edit event log row. PK for discussionboard_comment_edits."},"comment_id":{"type":"string","format":"uuid","description":"The comment to which this edit event applies. Enables retrieval of full edit history for a given comment (FK to discussionboard_comments.id)."},"editor_id":{"type":"string","format":"uuid","description":"The ID of the user who edited the comment (FK to discussionboard_members.id). Documents authorship for audit trails and dispute resolution."},"edit_summary":{"oneOf":[{"type":"string","description":"Optional textual note describing what was changed. Used for transparency in user-facing and moderator-facing edit streams. Useful for business requirements around audit compliance."},{"type":"null","description":"Optional textual note describing what was changed. Used for transparency in user-facing and moderator-facing edit streams. Useful for business requirements around audit compliance."}],"description":"Optional textual note describing what was changed. Used for transparency in user-facing and moderator-facing edit streams. Useful for business requirements around audit compliance."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp when this edit operation occurred. Standardized for audit and edit history UX. Aligns with other per-event time granularity in the platform."}},"required":["id","comment_id","editor_id","edited_at"],"description":"A single immutable event in the comment edit log history. Documents who altered a comment, when it occurred, and allows optional audit note. Fulfills the compliance and transparency requirements inherent in comment moderation and dispute resolution as articulated in requirement specifications."},"IDiscussionboardCommentEdit.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being edited. Required reference so edits are attached to the correct comment. FK to discussionboard_comments.id as per DB schema and ERD."},"editor_id":{"type":"string","format":"uuid","description":"ID of the user performing the edit. Readers are members, moderators, or admins with permission. FK to discussionboard_members.id per platform RBAC model."},"edit_summary":{"oneOf":[{"type":"string","description":"Optional free-text summary of the changes made in this edit event. Used for transparency, audit review, and moderation case annotation in the comment edit workflow."},{"type":"null","description":"Optional free-text summary of the changes made in this edit event. Used for transparency, audit review, and moderation case annotation in the comment edit workflow."}],"description":"Optional free-text summary of the changes made in this edit event. Used for transparency, audit review, and moderation case annotation in the comment edit workflow."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp for when the edit was performed. Required for establishing ordering in the audit trail and per event sequencing. Must be a valid ISO8601 timestamp."}},"required":["comment_id","editor_id","edited_at"],"description":"Request body for explicitly recording a comment edit event for audit or moderation. Allows supply of summary note and edit timestamp. Used when tracking manual edit overlays, moderator/admin correction flows, or explicit collaborative edit workflows aligned with compliance requirements."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number in the paginated results. Used to anchor navigation across result sets. Must be a positive integer, with canonical first page as 1."},"limit":{"type":"integer","format":"uint32","description":"The maximum number of items per page in a paginated response. Typically defaulted (e.g., to 100), but may be set by the request or system policy."},"records":{"type":"integer","format":"uint32","description":"The total number of records in the result set/database for this search. Primarily used for rendering UI navigation elements and analytics batch summaries."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages in the result set, calculated from record count and limit. Enables full navigation and export features in clients."}},"required":["current","limit","records","pages"],"description":"Page information for paginated results as per platform-wide standard. Used by all list/search endpoints to maintain consistency for result transport and UX/analytics. All pagination properties are required, based on total results and limit per page."}}},"completed":144,"total":191,"step":0,"created_at":"2025-07-22T13:37:47.700Z"},"tokenUsage":{"facade":{"aggregate":{"total":1770122,"input":{"total":1678668,"cached":84224},"output":{"total":91454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1770122,"input":{"total":1678668,"cached":84224},"output":{"total":91454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1770122,"input":{"total":1678668,"cached":84224},"output":{"total":91454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1770122,"input":{"total":1678668,"cached":84224},"output":{"total":91454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"Idiscussionboard_notifications.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Whether the notification was successfully deleted.\n\nReflects the result status of the delete operation for audit trail and client confirmation purposes."},"message":{"type":"string","description":"Optional, human-readable message describing the deletion result or error encountered during the operation.\n\nThis allows the API to provide details for both audit and UI display, e.g., why deletion may have failed."}},"required":["success"],"description":"Delete result response for notification deletion via the discussion board notifications API.\n\nIndicates whether a notification was successfully deleted and may include an optional message describing the result. This type is used in delete response bodies, is aligned with platform-wide operation result conventions, and supports audit logging and client status messaging."},"Idiscussionboard_alert_preferences.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"User ID (UUID) to filter alert preferences for a particular user. If omitted, fetches for the requesting user or all users (admin)."},"notification_type":{"type":"string","description":"Notification type to filter on (e.g., 'reply', 'like', 'mention', 'moderation_action', 'system'). If omitted, returns all types."},"page":{"type":"integer","description":"Page number for paginated result set. Optional; defaults to first page if not supplied.","minimum":1},"limit":{"type":"integer","description":"Maximum number of results to return per page. Optional; defaults to 100 if not provided.","minimum":1}},"required":[],"description":"Filter and search structure for listing alert preferences from the discussion board alert preferences table.\n\nProvides options for filtering by user/member, notification type, and supports pagination. Used in admin settings dashboards and user alert preference queries. All properties are optional for flexible query support."},"IPageIdiscussionboard_alert_preferences":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_alert_preferences"},"description":"List of alert preference records returned for this page."}},"required":["pagination","data"],"description":"Paginated response object for listing alert preference entities from the discussion board.\n\nContains paginated metadata as well as an array of alert preferences following a search/filter request. Used across all paginated alert preference endpoints."},"Idiscussionboard_alert_preferences":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the alert preference record.\n\nUsed for reference in update/delete endpoints and linking to other notification preference entities."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"User ID (UUID) the alert preference belongs to. This field links to the discussion board members table and enforces per-user preference mapping."},"notification_type":{"type":"string","description":"Type/category of notification this preference controls delivery for (e.g., 'reply', 'like', 'mention', 'moderation_action', 'system').\n\nExamples: 'reply' (replies to comments or posts), 'like', 'mention' (being mentioned), 'moderation_action' (warnings, bans), 'system' (announcements)."},"delivery_channel":{"type":"string","description":"Configured channel for this notification type (e.g., 'email', 'push', 'in_app', 'none').\n\nIndicates where the alert will be delivered, with explicit value for user opt-out when set to 'none'."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for when this alert preference was last updated.\n\nPart of audit and sync with user settings."}},"required":["id","discussionboard_member_id","notification_type","delivery_channel","updated_at"],"description":"Alert preference record structure from the discussion board domain.\n\nRepresents a user's per-notification-type delivery preference (channel and notification type), mapped to their ID. Includes audit timestamp for synchronization and update flows. Table: discussionboard_alert_preferences."},"Idiscussionboard_alert_preferences.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"User/member ID to assign this alert preference. Links to the user account and enforces preference uniqueness at (member, notification_type) granularity."},"notification_type":{"type":"string","description":"Type of notification (e.g., 'reply', 'like', 'mention', 'moderation_action', 'system'). Must be tightly validated against platform's allowed notification types. Used for delivery and filtering."},"delivery_channel":{"type":"string","description":"Delivery channel for this alert ('email', 'push', 'in_app', 'none').\n\n'delivery_channel' determines whether and how the alert is delivered to the user. 'none' disables delivery."}},"required":["discussionboard_member_id","notification_type","delivery_channel"],"description":"Payload structure for creating a discussionboard_alert_preferences record.\n\nIncludes user linkage, notification type to which this preference applies, and delivery channel. Input is validated for uniqueness at (member, notification_type)."},"Idiscussionboard_alert_preferences.IUpdate":{"type":"object","properties":{"notification_type":{"type":"string","description":"Type of notification to update. Updates the notification type targeted by this preference.\n\nMust match allowed values."},"delivery_channel":{"type":"string","description":"Delivery channel update (e.g., switching to 'email' or opting out with 'none'). Changing this will adjust how/if user receives notifications for matching events."}},"required":[],"description":"Request structure for updating an alert preference entity. Used to change delivery channel or notification type for a user's preference record. At least one property should be supplied in an update call."},"Idiscussionboard_alert_preferences.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"True if alert preference was successfully deleted. Indicates operation result for client and audit trail."},"message":{"type":"string","description":"Human-readable message with details about deletion result (e.g., if the preference didn't exist, or additional instructions needed). Optional."}},"required":["success"],"description":"Result object for deleting an alert preference.\n\nIndicates whether deletion was successful and provides an optional message. Used in CRUD delete API responses for alert preference management and audit tracking."},"Idiscussionboard_action_logs.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Actor's user/member/admin/moderator id for action log filtering. Used to look up logs by a specific user or role."},"event_type":{"type":"string","description":"Type of action performed. Filter logs for specific event types (e.g., 'POST_CREATED', 'COMMENT_DELETED', 'MODERATOR_BAN')."},"event_target_id":{"type":"string","format":"uuid","description":"Filter for logs related to a specific entity (e.g., a post, comment, or report). Typically a UUID reference."},"page":{"type":"integer","description":"Page number for paginated log results.","minimum":1},"limit":{"type":"integer","description":"Maximum number of log entries to return per page. Defaults platform-wide limit if not provided.","minimum":1}},"required":[],"description":"Request object for searching and filtering discussionboard_action_logs. Includes actor ID, event type, event target, and pagination fields. All fields are optional for flexible admin and compliance log searching."},"IPageIdiscussionboard_action_logs":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_action_logs"},"description":"Array of action log entries found for this query and page."}},"required":["pagination","data"],"description":"Paginated result object for action log queries from discussionboard_action_logs.\n\nReturns both page meta and array of log records (for admin/compliance review or incident trace)."},"Idiscussionboard_action_logs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of this action log record. Used for unique identification and reference from other audit entities."},"actor_id":{"type":"string","format":"uuid","description":"Actor/user associated with the event. May refer to admin, moderator, or standard member, as indicated by linked role tables."},"event_type":{"type":"string","description":"Type of event recorded. Used for categorization (e.g., 'POST_CREATED', 'MODERATOR_BAN', 'LOGIN')."},"event_target_id":{"type":"string","format":"uuid","description":"Optional. The ID of associated target entity (e.g., post, comment, or report). Indicates which primary content was affected by the action."},"metadata":{"type":"string","description":"JSON-formatted metadata string for extensibility and storing extra action context. Used to capture extra event info (e.g., IP address, moderation reason, device info, etc.)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this log entry was created. Used for sequencing, compliance, and incident review."}},"required":["id","actor_id","event_type","created_at"],"description":"Action log entry entity for discussionboard platform actions.\n\nCaptures high-level platform or user actions for audit and compliance review. All field-level descriptions mirror corresponding database columns for traceability."},"Idiscussionboard_action_logs.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Actor performing the logged action. User/account/admin/moderator ID, as appropriate. Required for accountability."},"event_type":{"type":"string","description":"Type/category of the action performed (e.g., 'COMMENT_EDITED', 'SESSION_REVOKED'). Must match system event type enums."},"event_target_id":{"type":"string","format":"uuid","description":"Target entity ID for the event, e.g. post, comment, report. Nullable for actions with no direct content target."},"metadata":{"type":"string","description":"Any ancillary structured metadata to store with the event (JSON blob). Optional, used for extensibility, e.g. moderation reason, IP address."}},"required":["actor_id","event_type"],"description":"Creation payload for a discussion board action log entry.\n\nDefines the actor, event type, optional entity references, and metadata for extensibility. Closely follows platform action/audit logging requirements."},"IDiscussionboardActionLog.IUpdate":{"type":"object","properties":{"event_type":{"type":"string","description":"Update the type/category of the logged event, when allowed (e.g., for compliance note corrections). Must be a recognized category (refer to business policy/event type enums)."},"event_target_id":{"type":"string","format":"uuid","description":"Optional update to modify the related entity ID (used in rare compliance events)."},"metadata":{"type":"string","description":"Update/correct the metadata blob for this log record (e.g. append audit notes, fix device info, etc.)."}},"required":[],"description":"Update structure for a discussion board action log record. Allows compliance updates to event type, target, or metadata field. Not all updates are permitted by policy; reserved for privileged admin use."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호입니다.","minimum":1},"limit":{"type":"integer","description":"페이지당 레코드 제한 수입니다. 기본값은 100입니다.","minimum":1},"records":{"type":"integer","description":"데이터베이스 내 전체 레코드 수입니다.","minimum":0},"pages":{"type":"integer","description":"전체 페이지 수입니다. records/limit의 올림값입니다.","minimum":1}},"required":["current","limit","records","pages"],"description":"페이지 정보 객체입니다. 이 구조체는 현재 페이지, 레코드 수, 전체 페이지 정보를 포함하여 페이지네이션 응답의 핵심 부분을 이룹니다."}}},"completed":156,"total":191,"step":0,"created_at":"2025-07-22T13:37:55.170Z"},"tokenUsage":{"facade":{"aggregate":{"total":1855616,"input":{"total":1761615,"cached":84224},"output":{"total":94001,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1855616,"input":{"total":1761615,"cached":84224},"output":{"total":94001,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1855616,"input":{"total":1761615,"cached":84224},"output":{"total":94001,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1855616,"input":{"total":1761615,"cached":84224},"output":{"total":94001,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardPostLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current query result set. Reference: Standard IPage.IPagination model. Fulfills the need for conveying total results, pages, and navigation metadata for client UI control. See core IPage documentation."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostLike"},"description":"Array of discussion board post like/dislike event entries for the requested page. Each entry is an atomic record of a user's reaction to a specific post, containing normalized audit fields. See IDiscussionboardPostLike for description."}},"required":["pagination","data"],"description":"Paginated result type for listing post like/dislike events. Implements the IPage pattern, wrapping a list of IDiscussionboardPostLike objects with standard pagination metadata. Used for result sets from search or listing APIs where multiple post like/dislike records are requested, e.g., analytics dashboards or moderation tools.\n\nBased on the requirements for engagement analytics and auditability, this structure ensures 3NF by never including denormalized fields or aggregate counts—lists only individual events with associated metadata.\n"},"IDiscussionboardPostLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post like/dislike entry. Foreign key from the discussionboard_post_likes table. Used to address, reference, or update a specific reaction event.\n\nFulfills requirement for audit log traceability and normalization. Always a valid UUID."},"post_id":{"type":"string","format":"uuid","description":"UUID referencing the target post this like/dislike pertains to. Must match one entry in the posts table. Used to join reactions to their associated content. Ensures referential integrity per business needs."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user who made the reaction (like/dislike). Points to member, mod, or admin. Fulfills engagement analytics, auditability, and anti-abuse logic. Required to disambiguate per-user reactions."},"is_like":{"type":"boolean","description":"True if this record is a 'like', false if 'dislike'. Implements the requirement for binary distinction of reactions. Used in analytics and moderation. No computed values; atomic per-normalized event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this reaction was recorded. ISO 8601. Enables audit trail, engagement timing analytics, anti-abuse throttling."}},"required":["id","post_id","user_id","is_like","created_at"],"description":"Discussion board post engagement event—an individual member, moderator, or admin's like/dislike of a post. Fulfills atomicity requirements for engagement analytics, anti-abuse measures, and audit trail.\n\nNo field is an aggregate or summary: every property is atomic and directly references core engagement events. See related IDiscussionboardPostLike.ICreate and IDiscussionboardPostLike.IUpdate types for mutation operations. Used in listing, detail, creation, and update APIs."},"IDiscussionboardPostLike.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"UUID of the post receiving the like/dislike. Must already exist. Referenced by post_id in the posts table. Enforces resource association per 3NF."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user recording the reaction (member, moderator, or admin). Must exist in members table. Required to support 1-record-per-user-per-post uniqueness and engagement analytics."},"is_like":{"type":"boolean","description":"True for a like, false for a dislike. Fulfills standard engagement pattern. Required for correct binary reaction storage."}},"required":["post_id","user_id","is_like"],"description":"Request schema to create a new like or dislike event on a discussion board post. Used in API endpoints for user engagement, reflecting the required 3NF compliance (only direct, atomic fields are supplied).\n\nRequired to implement exact engagement event semantics, enforce user uniqueness constraints, and allow subsequent audit log entries. All properties map directly to the normalized engagement event entity."},"IDiscussionboardPostLike.IUpdate":{"type":"object","properties":{"is_like":{"type":"boolean","description":"Update to the like/dislike state. Switches between 'like' or 'dislike'. Used to change a user's reaction to a post after their initial input. See requirements for reaction toggling, anti-abuse, and audit trail. Atomic field only; no aggregate or derived logic stored here."}},"required":["is_like"],"description":"Request schema for updating an existing like/dislike event on a post. Only the 'is_like' field is mutable, reflecting typical toggle/correction scenarios. Used in member-initiated edits or moderator/admin abuse review. Input is limited to atomic toggle—changing which type of reaction is represented."},"IDiscussionboardPostViews.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"If provided, filters to views for a specific post. Only valid UUIDs from posts table. Used in analytics or audit workflows to restrict search to certain content.\n\nOptional: omit for all posts."},"user_id":{"type":"string","format":"uuid","description":"If provided, restricts views to only those by a specific user member ID. Used for member-level analytics and abuse detection. Only valid UUIDs accepted.\n\nOptional: omit for all users."},"session_id":{"type":"string","format":"uuid","description":"If specified, filters for view events tied to a guest session or specific browser session token. Helps troubleshoot engagement patterns, guest analytics, or privacy compliance. Optional."},"viewed_after":{"type":"string","format":"date-time","description":"Show only views that occurred after this ISO 8601 timestamp. Enables time-window queries for analytics/dashboards. Optional."},"viewed_before":{"type":"string","format":"date-time","description":"Show only views that occurred before this ISO 8601 timestamp. Used with viewed_after for date-range filtering. Optional."},"page":{"type":"integer","description":"The page of results requested. Defaults to 1. Standard pagination control, indexed from 1."},"limit":{"type":"integer","description":"Number of records to return per page. Typical default is 20, max as specified in platform policy. Controls page size for scalable queries."}},"required":[],"description":"Request body schema for searching/listing post view audit entries. Used by API endpoints to filter, paginate, and segment view records in analytics, audit, or anti-abuse dashboards. Nullable/optional fields allow for granular filtering, reporting, and forensics in compliance/monitoring contexts.\n\nMaps directly to atomic fields in the view audit log. Supports time-windowing, user-based, or session-based queries for full flexibility. Helps meet audit, compliance, and engagement trend reporting requirement."},"IPageDiscussionboardPostViews":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the result set. See IPage.IPagination documentation.\n\nFulfills requirements for conveying current page, total records, and navigation info to consuming UIs."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostViews"},"description":"List of post view event records for this result page (see IDiscussionboardPostViews).\n\nAtomic audit log entries only. Each entry records exactly one post-view occurrence by a user/session."}},"required":["pagination","data"],"description":"Paginated result set for post view audit logs. Implements the platform-wide standard for result sets, combining pagination metadata with a page of atomic post view event records, each described by IDiscussionboardPostViews.\n\nNo aggregate or denormalized fields; allows clients to efficiently page through entire audit log data sets for compliance, analytics, or monitoring."},"IDiscussionboardPostViews":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post view record. Maps to primary key in discussionboard_post_views table.\n\nRequired for addressing, referencing, and audit trail linking."},"post_id":{"type":"string","format":"uuid","description":"ID of the post that was viewed (UUID from discussionboard_posts).\n\nUsed for correlating engagement and auditing views per post."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of authenticated user who viewed the post (if present), or null for guest views.\n\nEnables analytics segmentation by authenticated/guest status. Normalized per audit requirements."},{"type":"null"}],"description":"ID of authenticated user who viewed the post (if present), or null for guest views.\n\nEnables analytics segmentation by authenticated/guest status. Normalized per audit requirements."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Guest session token if available, identifies specific anonymous browser context. Null if unavailable or for authenticated users."},{"type":"null"}],"description":"Guest session token if available, identifies specific anonymous browser context. Null if unavailable or for authenticated users."},"viewed_at":{"type":"string","format":"date-time","description":"Timestamp when the post was viewed. ISO 8601. Enables audit sequence, compliance, analytics."}},"required":["id","post_id","viewed_at"],"description":"Single audit log record for a post view event. Captures atomic detail about each user/session accessing a post, enabling full compliance, analytics, and tracking. All fields are direct, normalized reflection of underlying DB event; never denormalized summary/aggregate data.\n\nNo composite or derived info—see business requirements for detailed audit and trace capabilities. Used for forensics, analytics, and anti-abuse measures."},"IDiscussionboardPostViews.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Target post's UUID as addressed in the posts table. Required for audit event relevance and enforcement of referential integrity."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"If present, identifies the authenticated user who performed the view event. Null if anonymous/guest."},{"type":"null"}],"description":"If present, identifies the authenticated user who performed the view event. Null if anonymous/guest."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"If provided, identifies guest session (browser context) performing the view event. Null for authenticated users or if no session is available."},{"type":"null"}],"description":"If provided, identifies guest session (browser context) performing the view event. Null for authenticated users or if no session is available."},"viewed_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of the view event. Required; platform sets to current time unless provided for audit replay/test."}},"required":["post_id","viewed_at"],"description":"Request schema for logging (creating) a new post view audit event in the system. Populates the denormalized event log of post engagement—aids compliance, analytics, and forensics workflows.\n\nNullable user_id and session_id fields support both authenticated and guest interactions, ensuring universal audit coverage. Date/time field allows timestamp control for log replay or test data creation."},"IDiscussionboardPostViews.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the audit log needs to associate/retroactively fix the user for this view event, this field may be set. Null for maintaining anonymity or clearing user association."},{"type":"null"}],"description":"If the audit log needs to associate/retroactively fix the user for this view event, this field may be set. Null for maintaining anonymity or clearing user association."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Allows retroactive association/correction of guest session for this audit entry. Null to remove/ignore."},{"type":"null"}],"description":"Allows retroactive association/correction of guest session for this audit entry. Null to remove/ignore."}},"required":[],"description":"Update schema for correcting or setting user/session references on an existing post view event (for compliance/audit quality). Does not allow modifying fundamental event properties or timestamps. Rarely used (primarily audit or compliance workflows)."},"IDiscussionboardComments.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Filter to comments for a specific post (UUID from discussionboard_posts). Used to return all comments for a given post in a UI discussion thread."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for replies to a specific comment (threaded/nested reply). Null for only top-level comments; given UUID for replies to a specific ancestor comment."},{"type":"null"}],"description":"Filter for replies to a specific comment (threaded/nested reply). Null for only top-level comments; given UUID for replies to a specific ancestor comment."},"author_id":{"type":"string","format":"uuid","description":"Restrict to comments by a single author (UUID from discussionboard_members/admins/mods). Used for user histories or moderation queries."},"created_after":{"type":"string","format":"date-time","description":"Fetch only comments created after this timestamp. Used for incremental loads, live updates, or time-window analytics."},"created_before":{"type":"string","format":"date-time","description":"Return only comments created before this timestamp. Used for bounded time-window queries."},"page":{"type":"integer","description":"Page of the comment result set requested (pagination). Defaults to 1, standard IPage scheme."},"limit":{"type":"integer","description":"Number of comment records per page (pagination). Platform default and max/min apply as policy."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."},{"const":"updated_at","description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."},{"const":"author_id","description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."}],"description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending or 'desc' for descending order. Standard sort direction field for query APIs."},{"const":"desc","description":"Sort direction: 'asc' for ascending or 'desc' for descending order. Standard sort direction field for query APIs."}],"description":"Sort direction: 'asc' for ascending or 'desc' for descending order. Standard sort direction field for query APIs."}},"required":["post_id"],"description":"Search/list request for fetching comments under a post, optionally filtered by parent (threaded replies), author, or time window. Pagination and sorting supported per platform requirements. Used for main UI thread display, reply navigation, or user history review. Nullable fields allow fine-grained UI queries for dynamic thread expansion, moderation, or search interfaces."},"IPageDiscussionboardComments":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the current comment result set. Used for UI paging and navigation controls."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardComments"},"description":"Array of comment objects for the queried result set. Each record is a normalized (atomic) representation of a comment/reply entity, suitable for display, moderation, or audit. See IDiscussionboardComments for definition."}},"required":["pagination","data"],"description":"Paginated result structure for lists of comments (top-level or replies) under a post. Incorporates standard pagination metadata (see IPage.IPagination) and an array of normalized IDiscussionboardComments objects. Used in UI thread rendering, reply navigation, moderation, and audit tooling.\n\nNo aggregate/denormalized fields are included; each comment entry is atomic and independent, per requirements analysis for 3NF and auditability."},"IDiscussionboardComments":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this comment. Maps directly to primary key in discussionboard_comments DB table. Required for reply/thread navigation as well as moderation/audit reference. Always a valid UUID."},"post_id":{"type":"string","format":"uuid","description":"ID of the post to which this comment belongs (discussionboard_posts UUID). Core relationship for context, display, and referential integrity and aggregation."},"author_id":{"type":"string","format":"uuid","description":"ID of the member/mod/admin who authored the comment. Fulfills attribution, recommendation, and anti-abuse measures."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Recursive nullable UUID referencing parent comment if this is a reply/nested comment. Null for top-level comments (not replies). Fulfills threading feature requirements and reply hierarchy."},{"type":"null"}],"description":"Recursive nullable UUID referencing parent comment if this is a reply/nested comment. Null for top-level comments (not replies). Fulfills threading feature requirements and reply hierarchy."},"body":{"type":"string","description":"Text content of the comment/reply. Supports markdown/plaintext (refer to platform-wide formatting guidelines per business logic). Fulfills discussion, engagement, and moderation transparency needs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created. ISO 8601. Enables UI time-stamping, audit trail, and activity feeds."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update to the comment. ISO 8601. Used for displaying edit history or resolving race conditions in moderation."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If not null, this comment is soft-deleted (visibility depends on user role). Used to comply with audit/log retention and for compliance (e.g., GDPR right-to-be-forgotten)."},{"type":"null"}],"description":"If not null, this comment is soft-deleted (visibility depends on user role). Used to comply with audit/log retention and for compliance (e.g., GDPR right-to-be-forgotten)."}},"required":["id","post_id","author_id","body","created_at","updated_at"],"description":"Highly normalized record for a single comment or reply within a discussion board post. Fulfills atomistic engagement, display, moderation, and compliance requirements—no aggregate, derived, or denormalized fields. Includes recursion for reply threading, deletion/audit markers, and full attribution."}}},"completed":179,"total":191,"step":0,"created_at":"2025-07-22T13:38:18.761Z"},"tokenUsage":{"facade":{"aggregate":{"total":2029080,"input":{"total":1927496,"cached":84224},"output":{"total":101584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2029080,"input":{"total":1927496,"cached":84224},"output":{"total":101584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2029080,"input":{"total":1927496,"cached":84224},"output":{"total":101584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2029080,"input":{"total":1927496,"cached":84224},"output":{"total":101584,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardActionLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the action log entry. This is a globally unique identifier (UUID) for audit records. It enables precise referencing across systems and is referenced in admin/moderator panels, compliance tools, and incident investigations.\n\nColumn: id. Purpose: To uniquely identify each action log event and enable traceability and root-cause identification. Constraints: Non-null, unique, immutable."},"actor_id":{"type":"string","format":"uuid","description":"The UUID of the user (admin, moderator, or member) who performed the action. This field links to the member or role responsible for the recorded event. Used for audit reporting, access tracing, and compliance reviews.\n\nColumn: actor_id. Purpose: To identify the individual responsible for a system or moderation event. Constraints: Non-null, foreign-key to user/member/admin tables."},"event_type":{"type":"string","description":"The type/category of the action performed. Used as an index for analytics, compliance, and incident review. Typical values include: 'POST_CREATED', 'COMMENT_DELETED', 'ROLE_CHANGED', etc.\n\nColumn: event_type. Purpose: Enables filtering and root-cause analysis for audit. Constraints: Non-null, controlled vocabulary/enum at the application level."},"event_target_id":{"oneOf":[{"type":"string","format":"uuid","description":"The ID of the entity (post, comment, report, etc.) affected by this action. Supports auditing reference and compliance requirements.\n\nColumn: event_target_id. Purpose: Relates the log to the object affected. Nullable if no direct target."},{"type":"null"}],"description":"The ID of the entity (post, comment, report, etc.) affected by this action. Supports auditing reference and compliance requirements.\n\nColumn: event_target_id. Purpose: Relates the log to the object affected. Nullable if no direct target."},"metadata":{"oneOf":[{"type":"string","description":"Additional metadata in JSON format, for extensibility (e.g., reason for action, IP address, device type, or moderation rationale). Maintains normalized structure by keeping rare or context-specific information in metadata column only as needed.\n\nColumn: metadata. Purpose: Store extended diagnostic info. Nullable, string-encoded JSON or similar structure for flexibility."},{"type":"null"}],"description":"Additional metadata in JSON format, for extensibility (e.g., reason for action, IP address, device type, or moderation rationale). Maintains normalized structure by keeping rare or context-specific information in metadata column only as needed.\n\nColumn: metadata. Purpose: Store extended diagnostic info. Nullable, string-encoded JSON or similar structure for flexibility."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action occurred (ISO 8601 UTC, e.g., 2025-07-22T13:30:45.969+09:00). Used for ordering, incident time windows, and data retention compliance.\n\nColumn: created_at. Constraints: Non-null, immutable. Used for full auditability."}},"required":["id","actor_id","event_type","created_at"],"description":"Action log event record. Implements full auditability and compliance requirements for the discussion board. Every critical user or system action is stored as a structured, immutable record. Fields capture the actor (by ID), the action type (verb/noun or system event code), affected target (post, comment, report, or other), any extensible metadata, and a timestamp. This entity forms the foundation for platform transparency, regulatory audits, and incident forensics. Relates to compliance, moderation, and user support flows. Property and type names reference the original Prisma schema and are documented with alignment to business and audit requirements."},"IPageIDiscussionboardErrorLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","minimum":1,"description":"Page number for pagination. Used to retrieve a specific page of results from a query to the error logs. Defaults may be handled at the application level.\n\nRelates to the IPage<T> convention for standard pagination interfaces. Always >= 1."},"limit":{"type":"integer","format":"uint32","minimum":1,"default":100,"description":"Maximum number of records per page. Used for pagination and resource protection in search/list error log queries. Defaults to 100 if not set; application logic may enforce a maximum allowed.\n\nRequired for paginated results and is compliant with IPage<T> contract."},"error_code":{"oneOf":[{"type":"string","description":"Optional filter for error_code prefix or code exact match. Allows searching for specific error categories in the error log record set. Implements structured error review in admin interfaces.\n\nColumn: error_code. Nullable in filter context; only set when searching for a specific code."},{"type":"null"}],"description":"Optional filter for error_code prefix or code exact match. Allows searching for specific error categories in the error log record set. Implements structured error review in admin interfaces.\n\nColumn: error_code. Nullable in filter context; only set when searching for a specific code."},"start_date":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for records created after this timestamp. Used to restrict the search window for error logs. Implements forensic and compliance searches.\n\nISO 8601 UTC. Nullable and only applies when user provides a filter."},{"type":"null"}],"description":"Optional filter for records created after this timestamp. Used to restrict the search window for error logs. Implements forensic and compliance searches.\n\nISO 8601 UTC. Nullable and only applies when user provides a filter."},"end_date":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for records created before this timestamp. Supports time-bounded search windows in error log queries.\n\nISO 8601 UTC. Nullable filter; common in incident investigation tools."},{"type":"null"}],"description":"Optional filter for records created before this timestamp. Supports time-bounded search windows in error log queries.\n\nISO 8601 UTC. Nullable filter; common in incident investigation tools."},"query":{"oneOf":[{"type":"string","description":"Full-text or substring query for searching inside error_message or stack_trace fields. Supports UI search, analytics, and deep forensic review.\n\nNot a column itself; mapped to searchable properties in error log search business logic."},{"type":"null"}],"description":"Full-text or substring query for searching inside error_message or stack_trace fields. Supports UI search, analytics, and deep forensic review.\n\nNot a column itself; mapped to searchable properties in error log search business logic."}},"required":[],"description":"Request body structure for paginated, filterable, and searchable error log queries. Implements paging, time range, error code, and flexible search per platform standard for admin/diagnostic UIs. Complies with standard listing/searching PRC conventions for error/audit entities."},"IPageIDiscussionboardErrorLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for this page of error logs."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardErrorLog"},"description":"Array of error log records for the current page. Each item is an atomic, normalized error log object."}},"required":["pagination","data"],"description":"Container for paginated error log results, following the IPage<T> interface standard. Contains pagination metadata and the array of error logs matching the query. Used in error log search/list operations and analytics dashboards."},"IDiscussionboardErrorLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the error log record. Globally unique identifier for traceability and incident review.\n\nColumn: id. Purpose: Enables referencing, deduplication, and data lineage. Non-null, immutable."},"error_code":{"type":"string","description":"Application-defined error or exception code. Enables quick categorization and reporting. Example: 'API_TIMEOUT', 'UNCAUGHT_EXCEPTION'.\n\nColumn: error_code. Enforces tagging and traceability for diagnostics."},"error_message":{"type":"string","description":"Human-readable message for the error, used in debugging and compliance reporting. Example: 'Failed to fetch posts due to network timeout.'\n\nColumn: error_message. Supports platform compatibility and user reporting flows."},"stack_trace":{"oneOf":[{"type":"string","description":"Optional stack trace or technical details for the error. Used for technical debugging and compliance audit. May be null if not available or irrelevant.\n\nColumn: stack_trace. Normalized for extensibility; not all errors include a trace."},{"type":"null"}],"description":"Optional stack trace or technical details for the error. Used for technical debugging and compliance audit. May be null if not available or irrelevant.\n\nColumn: stack_trace. Normalized for extensibility; not all errors include a trace."},"context_id":{"oneOf":[{"type":"string","format":"uuid","description":"Context entity reference, if any (e.g., API request ID or related event UUID). Supports linking errors to requests for root-cause analysis. Nullable if not applicable.\n\nColumn: context_id. Application-controlled; not enforced for every error log."},{"type":"null"}],"description":"Context entity reference, if any (e.g., API request ID or related event UUID). Supports linking errors to requests for root-cause analysis. Nullable if not applicable.\n\nColumn: context_id. Application-controlled; not enforced for every error log."},"created_at":{"type":"string","format":"date-time","description":"When the error was recorded (ISO 8601 UTC). Used for ordering, triage, and compliance window closure.\n\nColumn: created_at. Mandatory for all log records."}},"required":["id","error_code","error_message","created_at"],"description":"Single error log event entity. Implements the diagnostics, incident, and compliance requirements for the discussion board. Fields store error type, readable message, technical trace, reference context, and timestamp. Used for incident tracing, system reliability review, and monitoring. Relates to administrative troubleshooting and error-driven platform analytics. Property names reference and document original Prisma error log schema."},"IDiscussionboardErrorLog.ICreate":{"type":"object","properties":{"error_code":{"type":"string","description":"Application-level error/exception code. Must match platform-level error codes and logging semantics. Example: 'API_TIMEOUT', 'DB_UNAVAILABLE'.\n\nColumn: error_code. Required input on record creation."},"error_message":{"type":"string","description":"Human-readable message describing the error event for diagnostics and reporting. Application should provide meaningful, non-generic messages.\n\nColumn: error_message. Mandatory for reporting and debugging flows."},"stack_trace":{"oneOf":[{"type":"string","description":"Stack trace or technical info (nullable, stringified if present). Used for system debuggers, developer consoles, incident reviewers.\n\nColumn: stack_trace."},{"type":"null"}],"description":"Stack trace or technical info (nullable, stringified if present). Used for system debuggers, developer consoles, incident reviewers.\n\nColumn: stack_trace."},"context_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity or request context for the error (nullable if not relevant). Used for linking errors to application requests, session flows, or root-cause context in incident tools.\n\nColumn: context_id."},{"type":"null"}],"description":"Entity or request context for the error (nullable if not relevant). Used for linking errors to application requests, session flows, or root-cause context in incident tools.\n\nColumn: context_id."}},"required":["error_code","error_message"],"description":"Creation payload for an error log entry. Used when the platform or monitoring services need to record a new system/application error event. Fields must align with creation semantics for error log table: code, message required; context and stack trace are optional. Timestamp, ID, and any audit metadata are added by the system."},"IDiscussionboardErrorLog.IUpdate":{"type":"object","properties":{"stack_trace":{"oneOf":[{"type":"string","description":"Optional update for the error's stack trace or technical trace entry. May be set, replaced, or cleared during log annotation or diagnostic workflows.\n\nColumn: stack_trace. This field is mutable during error review/follow-up. If null, stack trace is removed or not present."},{"type":"null"}],"description":"Optional update for the error's stack trace or technical trace entry. May be set, replaced, or cleared during log annotation or diagnostic workflows.\n\nColumn: stack_trace. This field is mutable during error review/follow-up. If null, stack trace is removed or not present."},"context_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the request or entity context for this error event record. If specified, updates will overwrite the reference; if null, context is cleared. Used in compliance and analytic follow-ups.\n\nColumn: context_id."},{"type":"null"}],"description":"Update the request or entity context for this error event record. If specified, updates will overwrite the reference; if null, context is cleared. Used in compliance and analytic follow-ups.\n\nColumn: context_id."}},"required":[],"description":"Partial update payload for an error log record. Only allows updates to mutable fields (stack_trace and context_ref). Used in compliance correction, developer post-hoc annotation, or detailed error root-cause review flows. Not all fields in the full error log record are mutable; ID, code, message, and created_at are immutable post-creation for compliance."},"IPageIDiscussionboardApiAccessLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","minimum":1,"description":"Requested result page for pagination. Atomic, >= 1. Used for paged browsing of access logs.\n\nFollows IPage<T> interface; required for paging."},"limit":{"type":"integer","format":"uint32","minimum":1,"default":100,"description":"Maximum result count per page. Defaults to 100 if unset. Used to bulk-fetch API access logs in manageable increments. Must be > 0.\n\nIPage<T> contract: limits over-large requests."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter result to logs by this user-actor. Use for user-specific or admin-only API call analytics. Nullable so that all actors may be matched if not specified."},{"type":"null"}],"description":"Filter result to logs by this user-actor. Use for user-specific or admin-only API call analytics. Nullable so that all actors may be matched if not specified."},"endpoint":{"oneOf":[{"type":"string","description":"Return only logs affecting this API endpoint (substring or exact path). Useful for reviewing specific API usage, abuse monitoring, or traffic debugging. Nullable—if not provided, all endpoints are included in results."},{"type":"null"}],"description":"Return only logs affecting this API endpoint (substring or exact path). Useful for reviewing specific API usage, abuse monitoring, or traffic debugging. Nullable—if not provided, all endpoints are included in results."},"method":{"oneOf":[{"type":"string","description":"Optionally filter for HTTP method (e.g., 'GET', 'POST', 'PATCH', 'DELETE'). Restricts logs to specific call types in audit queries. Application logic uses this for analytics and security reviews. Nullable."},{"type":"null"}],"description":"Optionally filter for HTTP method (e.g., 'GET', 'POST', 'PATCH', 'DELETE'). Restricts logs to specific call types in audit queries. Application logic uses this for analytics and security reviews. Nullable."},"status_code":{"oneOf":[{"type":"integer","format":"int32","description":"Restrict results to a specific HTTP status code. Enables incident and error/failure auditing. Nullable; if not set, accepts all status codes."},{"type":"null"}],"description":"Restrict results to a specific HTTP status code. Enables incident and error/failure auditing. Nullable; if not set, accepts all status codes."},"start_date":{"oneOf":[{"type":"string","format":"date-time","description":"Earliest created_at to include (ISO 8601 UTC). Filters the access logs by time window for incident review or analytic dashboards. Nullable if not searching by date."},{"type":"null"}],"description":"Earliest created_at to include (ISO 8601 UTC). Filters the access logs by time window for incident review or analytic dashboards. Nullable if not searching by date."},"end_date":{"oneOf":[{"type":"string","format":"date-time","description":"Latest created_at to include (ISO 8601 UTC). Defines upper-bound for audit trail queries and time-limited search. Nullable."},{"type":"null"}],"description":"Latest created_at to include (ISO 8601 UTC). Defines upper-bound for audit trail queries and time-limited search. Nullable."}},"required":[],"description":"Request body struct for paginated query of API access logs. Enables advanced filtering by actor, endpoint, method, status code, and windowing by timestamps. Used in administrative, analytic, or incident root-cause analysis tools for observing API call traffic and audit events. Compliant with IPage<T> search interfaces."},"IPageIDiscussionboardApiAccessLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pager info for this result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardApiAccessLog"},"description":"The atomic list of API access log event objects for this page."}},"required":["pagination","data"],"description":"Paging container for API access log queries. Uses the IPage<T> composition for metadata and list of returned records. Every page object holds pagination information and atomic instances of IDiscussionboardApiAccessLog entity type."},"IDiscussionboardApiAccessLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the API access log record. Enables reference and sequencing of logs for security review and analytics. Globally unique."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"The acting user's UUID, if authenticated (may reference discussionboard_members/admins). Used for user-centric security or analytics; nullable for unauthenticated (guest) API calls."},{"type":"null"}],"description":"The acting user's UUID, if authenticated (may reference discussionboard_members/admins). Used for user-centric security or analytics; nullable for unauthenticated (guest) API calls."},"method":{"type":"string","description":"HTTP method verb of the API call (e.g., 'GET', 'POST'). Enables filtering and traffic-type analytics. Non-null; part of traceability contract."},"endpoint":{"type":"string","description":"Path/route requested in the API call. Used for endpoint-specific logging, troubleshooting, and route popularity analysis. Non-null."},"status_code":{"type":"integer","format":"int32","description":"HTTP status code returned by this call (e.g., 200, 404). Used in error analytics, SLA compliance auditing, and incident reviews. Non-null."},"ip_address":{"type":"string","description":"IP address of the remote client. Maintains auditing and anti-abuse traceability, supports geo-analytics, and incident forensics. Non-null; may be IPv4 or IPv6 string format."},"user_agent":{"oneOf":[{"type":"string","description":"User agent string (browser/device signature, optional). Maintains minimal tracking for user analytics or bug triage. Nullable if not present or determined."},{"type":"null"}],"description":"User agent string (browser/device signature, optional). Maintains minimal tracking for user analytics or bug triage. Nullable if not present or determined."},"response_time_ms":{"type":"integer","format":"int32","description":"API request processing time in milliseconds. Used for platform performance analysis and latency diagnostics. Non-null."},"created_at":{"type":"string","format":"date-time","description":"When the API access log was written (ISO 8601 UTC). Enables ordered queries and retention window logic. Atomic, set by DB/server layer, and never mutable."}},"required":["id","method","endpoint","status_code","ip_address","response_time_ms","created_at"],"description":"API access log event entity. Implements traceability, diagnostic review, and abuse/incident reporting requirements for all API traffic through the discussion board. Each log event records the method, endpoint, status, IP, actor (if authenticated), UA, latency, and time. Fully normalized and mapped to original Prisma schema documentation, facilitating root-cause analysis in incident response and general traffic reporting."},"IDiscussionboardApiAccessLog.ICreate":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"User (if authenticated) whose call produced the API access event. Use for analytics, tracing, and security review. Nullable for guest access."},{"type":"null"}],"description":"User (if authenticated) whose call produced the API access event. Use for analytics, tracing, and security review. Nullable for guest access."},"method":{"type":"string","description":"HTTP method of the API call (GET, POST, PATCH, etc). Required field for log creation; allows downstream diagnostic correlation. Standard HTTP method string."},"endpoint":{"type":"string","description":"Endpoint route/path accessed in the call. Required, enables endpoint-level analytics, error triage, and usage pattern analysis."},"status_code":{"type":"integer","format":"int32","description":"HTTP response code returned. Comprehensive logging of all types (success/error/redirect). Atomic, required for error/incident tracking."},"ip_address":{"type":"string","description":"Remote client's IP address (IPv4/v6 as string). Used for anti-abuse, analytics, and forensics. Required at creation for complete traceability."},"user_agent":{"oneOf":[{"type":"string","description":"Browser/device/system user agent string. Optional for analytics or debugging. String format, nullable if not available or logged."},{"type":"null"}],"description":"Browser/device/system user agent string. Optional for analytics or debugging. String format, nullable if not available or logged."},"response_time_ms":{"type":"integer","format":"int32","description":"Measured processing time of the API call in ms. Important for service-level metrics, latency resource allocation, and performance dashboards."}},"required":["method","endpoint","status_code","ip_address","response_time_ms"],"description":"Payload fields for creation of an API access log entry. Fields include required method, path, status, IP, performance data. Used by middleware/platform integrations to record traffic after every successful call."},"IDiscussionboardApiAccessLog.IUpdate":{"type":"object","properties":{"user_agent":{"oneOf":[{"type":"string","description":"Update to the user agent (device/browser) for this API access log. Required only for correcting previously untracked or updated data. Nullable for explicit removal or reset."},{"type":"null"}],"description":"Update to the user agent (device/browser) for this API access log. Required only for correcting previously untracked or updated data. Nullable for explicit removal or reset."}},"required":[],"description":"Partial update struct for a recorded API access log. Only mutable fields permitted for update (user agent, for post-hoc device correction/annotation). All other fields are immutable event data intended for audit/compliance traceability."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (starts from 1 for the first page)."},"limit":{"type":"integer","format":"uint32","description":"Limit of records per page, as requested."},"records":{"type":"integer","format":"uint32","description":"Total records in the queried table."},"pages":{"type":"integer","format":"uint32","description":"Total number of result pages, derived as ceiling(records / limit)."}},"required":["current","limit","records","pages"],"description":"Pagination information block. Contains metadata for paginated list results including pointers for current page, limit, record count, and total pages. Standard for all IPage<T> containers in the API."}}},"completed":190,"total":191,"step":0,"created_at":"2025-07-22T13:38:46.829Z"},"tokenUsage":{"facade":{"aggregate":{"total":2116722,"input":{"total":2010436,"cached":84224},"output":{"total":106286,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2116722,"input":{"total":2010436,"cached":84224},"output":{"total":106286,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2116722,"input":{"total":2010436,"cached":84224},"output":{"total":106286,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2116722,"input":{"total":2010436,"cached":84224},"output":{"total":106286,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardModerationAction.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"페이지 번호\n\n목록 조회 시 현재 페이지를 지정합니다. 기본값은 1이고, 1 이상의 값만 허용됩니다."},"limit":{"type":"integer","description":"페이지당 항목 수\n\n한 페이지에 표시할 게시판 운영액션 수를 지정합니다. 기본값은 보통 100이나, 시스템 설정에 따라 다를 수 있습니다."},"actionType":{"type":"string","description":"운영 액션의 유형 필터링\n\n조회할 액션 유형(예: `warn`, `ban`, `content_removal` 등)으로 필터링할 때 사용됩니다."},"actorId":{"type":"string","format":"uuid","description":"운영 액션을 수행한 관리자, 운영자의 고유 식별자(UUID)\n\n특정 캐릭터가 수행한 액션만을 조회할 때 사용합니다."},"targetId":{"type":"string","format":"uuid","description":"운영 액션이 적용된 대상(post, comment 등)의 고유 식별자(UUID)\n\n특정 대상에 수행된 액션만 따로 볼 때 사용됩니다."},"from":{"type":"string","format":"date-time","description":"조회 기간 시작 시각(ISO8601)\n\n이 시간 이후의 액션만 조회합니다."},"to":{"type":"string","format":"date-time","description":"조회 기간 종료 시각(ISO8601)\n\n이 시점 이전의 액션만 조회합니다."}},"required":["page","limit"],"description":"운영 액션 목록 API 조회 요청 DTO입니다.\n\n운영자 또는 관리자가 게시판 내 다양한 액션 로그(예: 경고, 금지(차단), 게시물 삭제 등)를 확인할 때 사용하는 검색 및 페이지네이션 요청 형식입니다.\n각 필드는 Prisma 테이블 및 ERD의 discussionboard_moderation_actions 항목과 연결되며, 액션 유형, 액터, 적용 대상, 기간 등 다양한 조건으로 필터링을 지원합니다.\n\n비즈니스 도메인 상 주로 운영 대시보드, 사고 및 정책 리뷰, 투명성 보고 기능에서 활용됩니다."},"IPageIDiscussionboardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationAction"},"description":"운영 액션 레코드 목록입니다.\n\n각 항목이 하나의 운영 기록(경고, 차단, 콘텐츠 삭제 등)을 의미합니다."}},"required":["pagination","data"],"description":"게시판의 운영 액션 레코드들의 페이지네이션 결과 컨테이너입니다.\n\n단건 또는 검색 결과와 함께 페이지 정보(pagination), 운영 액션 레코드 목록(data)를 제공합니다.\nPrisma discussionboard_moderation_actions 스키마 구조를 따르며, API 요청 결과 목록 전달을 위해 공통적으로 활용합니다."},"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"운영 액션 레코드의 고유 식별자(UUID)\n\n프라이머리 키로 사용되며, 액션 추적과 상세 조회 시 활용됩니다."},"actorAdminId":{"type":"string","format":"uuid","description":"액션을 수행한 관리자 계정의 식별자\n\ndiscussionboard_admins.id FK 참조. 관리자(운영자)가 직접 액션을 취한 경우만 기록됨. 없으면 null."},"actorModeratorId":{"type":"string","format":"uuid","description":"액션을 집행한 담당 운영자 식별자\n\ndiscussionboard_moderators.id FK 참조. 일반 운영자가 직접 집행했을 때만 값이 있으며, 관리자/일반 계정과 구분됩니다."},"actorMemberId":{"type":"string","format":"uuid","description":"액션 주체가 일반 멤버(회원)인 경우 그 식별자\n\ndiscussionboard_members.id FK 참조. 예를 들어, 신고자가 직접 취소하는 등의 이벤트에서 사용됩니다."},"relatedReportId":{"type":"string","format":"uuid","description":"관계된 신고 레코드의 식별자\n\ndiscussionboard_reports.id FK 참조. 해당 액션이 어느 신고에 따라 이루어졌는지 연결하며, 없으면 null 입니다."},"targetPostId":{"type":"string","format":"uuid","description":"액션 대상이 된 게시물의 식별자\n\ndiscussionboard_posts.id FK 참조. 대상이 게시물일 때만 값이 있습니다."},"targetCommentId":{"type":"string","format":"uuid","description":"액션 대상이 된 댓글의 식별자\n\ndiscussionboard_comments.id FK 참조. 댓글에 대한 조치일 때 값이 있습니다."},"actionType":{"type":"string","description":"운영 액션의 유형\n\n예: 'warn'(경고), 'ban'(차단), 'content_removal'(게시물/댓글 삭제) 등 비즈니스 정책 상 정의된 코드가 들어갑니다."},"actionReason":{"type":"string","description":"운영 액션에 대한 상세 사유\n\n운영 상 추가 설명, 판결문, 경위 등 자유 서술형 메모필드입니다."},"createdAt":{"type":"string","format":"date-time","description":"운영 액션의 집행 일시(ISO8601)\n\n액션이 실제 실행된 시점 또는 이벤트 발생 시각을 기록합니다."}},"required":["id","actionType","createdAt"],"description":"게시판 운영 액션 단일 레코드 DTO입니다.\n\ndiscussionboard_moderation_actions Prisma 모델 및 ERD, 요구사항 분석의 운영/제재 기록 요구를 충족합니다. 관리자가 게시물 삭제, 유저 차단, 경고 등 대표적 운영 정책 이력 정보를 이 엔티티로 관리하며, 감사 추적 및 비즈니스 정책 이력 구현에 필수적인 구조입니다."},"IDiscussionboardModerationAction.ICreate":{"type":"object","properties":{"actorAdminId":{"type":"string","format":"uuid","description":"액션을 수행하는 관리자 식별자(UUID)\n\ndiscussionboard_admins.id FK에 해당하며, 관리자 집행일 때 필수."},"actorModeratorId":{"type":"string","format":"uuid","description":"액션을 수행하는 운영자 식별자(UUID)\n\ndiscussionboard_moderators.id FK. 운영자 집행일 때 지정."},"actorMemberId":{"type":"string","format":"uuid","description":"액션 주체가 일반 회원인 경우(UUID)\n\ndiscussionboard_members.id FK."},"relatedReportId":{"type":"string","format":"uuid","description":"연관 신고 레코드 식별자(UUID)\n\ndiscussionboard_reports.id FK 참조."},"targetPostId":{"type":"string","format":"uuid","description":"제재 또는 액션 대상 게시물 식별자(UUID)\n\ndiscussionboard_posts.id FK."},"targetCommentId":{"type":"string","format":"uuid","description":"제재 또는 액션 대상 댓글 식별자(UUID)\n\ndiscussionboard_comments.id FK."},"actionType":{"type":"string","description":"운영 액션 유형\n\n경고(warn), 차단(ban), 콘텐츠 삭제(content_removal) 등 운영 정책 코드값이 필수."},"actionReason":{"type":"string","description":"운영 액션 사유 설명\n\n운영/제재가 내려진 근거나 컨텍스트 설명 필드."}},"required":["actionType"],"description":"운영 액션 생성 요청 DTO입니다.\n\ndiscussionboard_moderation_actions 테이블 새 레코드 생성 시 사용되며, 액션 유형, 주체, 대상, 사유 및 연관 신고 정보를 포함합니다.\n비즈니스 도메인 상 운영 정책 적용(제재, 경고, 콘텐츠 삭제 등)에 활용됩니다."},"IDiscussionboardModerationAction.IUpdate":{"type":"object","properties":{"actionType":{"type":"string","description":"액션 유형 변경(필요시)\n\n운영 대시보드에서 잘못 기입된 액션 유형을 수정하거나 정책 이동 시 사용."},"actionReason":{"type":"string","description":"운영 액션 상세 사유 변경\n\n내부 부연 설명 또는 감사 보강 목적으로 수정이 허용되는 경우가 있습니다."}},"required":[],"description":"운영 액션 기록 수정 DTO입니다.\n\ndiscussionboard_moderation_actions 테이블의 액션 레코드의 정보(유형, 상세사유 등)를 수정/보완하는 데 사용되는 요청 형식입니다."},"IPageIDiscussionboardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBan"},"description":"조회된 밴(차단) 기록들의 배열\n\n각 항목이 유저에 적용된 차단 이력 단일 엔티티를 의미합니다."}},"required":["pagination","data"],"description":"밴(차단) 레코드들에 대한 검색/목록 API 응답 표준 페이징 컨테이너입니다.\n\nPrisma discussionboard_bans 스키마 구조와 완전하게 매핑되며, 페이지네이션 및 관리/운영 대시보드 또는 감사 뷰 용도로 활용됩니다."},"IDiscussionboardBan.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"요청하는 페이지 번호\n\n기본값 1, 1 이상의 값이어야 함."},"limit":{"type":"integer","description":"한 페이지 결과 개수\n\n최대값 제한 설정 가능, 보통 기본 100."},"status":{"type":"string","description":"차단 상태 필터링\n\nactive/expired/lifted/scheduled 등 운영 정책상 상태별 필터에 활용."},"targetType":{"type":"string","description":"차단 대상 유형 (관리자, 운영자, 회원 구분)\n\nadmin, moderator, member 중 하나."},"actorId":{"type":"string","format":"uuid","description":"차단을 집행한 관리자/운영자의 FK UUID\n\n특정 액터의 차단 이력만 따로 조회하고 싶을 때."},"from":{"type":"string","format":"date-time","description":"조회 시작일시(ISO8601)\n\n이 날짜 이후의 차단 기록만 조회."},"to":{"type":"string","format":"date-time","description":"조회 종료일시(ISO8601)\n\n이 날짜 이전의 차단 기록만 조회."}},"required":["page","limit"],"description":"밴(차단) 레코드 목록 / 검색용 요청 DTO입니다.\n\n운영자/관리자가 차단 내역을 기간, 대상, 상태 등으로 필터하거나 페이지별로 검색하는 데 사용합니다.\nPrisma discussionboard_bans DB 스키마 주석 구조를 완전하게 따르며, 각 요청 필드는 비즈니스/감사 요구와 일치합니다."},"IDiscussionboardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"밴(차단) 레코드 고유 식별자(UUID)\n\nPrisma PK, 이력 조회와 정책 적용 관리에서 활용."},"targetAdminId":{"type":"string","format":"uuid","description":"차단 대상이 '관리자'인 경우의 관리자 FK 식별자\n\ndiscussionboard_admins.id (nullable)"},"targetModeratorId":{"type":"string","format":"uuid","description":"차단 대상이 '운영자'일 때의 운영자 FK\n\ndiscussionboard_moderators.id (nullable)"},"targetMemberId":{"type":"string","format":"uuid","description":"차단 대상이 '회원'일 때의 회원 FK\n\ndiscussionboard_members.id (nullable)"},"actorAdminId":{"type":"string","format":"uuid","description":"차단을 집행한 관리자 FK(UUID)\n\ndiscussionboard_admins.id(Nullable)"},"actorModeratorId":{"type":"string","format":"uuid","description":"차단을 집행한 운영자 FK(UUID)\n\ndiscussionboard_moderators.id(Nullable)"},"banReason":{"type":"string","description":"차단 사유\n\n운영상 제재 근거나 조치 이유. 예: 심각한 규정 위반, 반복 스팸 등."},"banStartAt":{"type":"string","format":"date-time","description":"차단 시작 시각(ISO8601)\n\n정책 상 집행이 유예되는 경우 future로 입력될 수 있음."},"banEndAt":{"type":"string","format":"date-time","description":"차단 종료(만료) 시각(ISO8601, nullable)\n\n영구차단일 경우 null이거나 매우 먼 미래값."},"status":{"type":"string","description":"차단 상태\n\nactive(진행 중), expired(만료), lifted(해제), scheduled(예정) 등 정책 enum 코드."},"createdAt":{"type":"string","format":"date-time","description":"밴(차단) 레코드 생성 일시(감사)\n\n제재 내역 최초 등록 시각."},"updatedAt":{"type":"string","format":"date-time","description":"마지막 차단 상태 변경/수정 일시\n\n상태 전이, 정책 수정 이력 추적용."}},"required":["id","banReason","banStartAt","status","createdAt","updatedAt"],"description":"게시판 회원/운영진/관리자의 차단 이력(밴) 레코드 DTO입니다.\n\ndiscussionboard_bans Prisma DB 테이블과 ERD를 기반으로 하며, 각 항목은 차단 대상, 집행자, 기간, 사유, 상태를 완전하게 명시합니다.\n정책 감사, 제재 이력 조회, 유저 상태 관리 등 주요 비즈니스 로직에서 활용됩니다."},"IDiscussionboardBan.ICreate":{"type":"object","properties":{"targetAdminId":{"type":"string","format":"uuid","description":"차단 대상이 '관리자'인 경우 해당 관리자 FK(UUID)\ndiscussionboard_admins.id (nullable)"},"targetModeratorId":{"type":"string","format":"uuid","description":"차단 대상이 '운영자'라면 운영자 FK(UUID)\ndiscussionboard_moderators.id"},"targetMemberId":{"type":"string","format":"uuid","description":"차단 대상이 '회원'일 때의 FK(UUID)\ndiscussionboard_members.id"},"actorAdminId":{"type":"string","format":"uuid","description":"차단을 집행한 관리자 FK\n\ndiscussionboard_admins.id"},"actorModeratorId":{"type":"string","format":"uuid","description":"차단 집행자가 운영자인 경우 운영자 FK(UUID)\ndiscussionboard_moderators.id"},"banReason":{"type":"string","description":"제재/차단 사유\n\n운영상 적절한 차단 사유를 1~여러 줄 서술형으로 입력."},"banStartAt":{"type":"string","format":"date-time","description":"차단/제재 시작 시각(ISO8601)\n\n유예시 미래 시점 가능."},"banEndAt":{"type":"string","format":"date-time","description":"차단 만료 시각(ISO8601, nullable)\n\n영구차단은 null로 명시 허용."},"status":{"type":"string","description":"차단 레코드의 현재 상태\n\nactive(활성), expired(만료), lifted(해제), scheduled(예정) 등 ENUM 코드."}},"required":["banReason","banStartAt","status"],"description":"밴(차단) 레코드 생성 요청 DTO입니다.\n\n운영진이 특정 계정(관리자/운영자/회원)에 신규 차단을 적용할 때 사용하는 요청 형식입니다.\n차단 대상, 집행자, 기간, 사유, 상태 등의 필드를 포함하며, 정책 추적으로 완전한 정보 제공을 목표로 합니다."},"IDiscussionboardBan.IUpdate":{"type":"object","properties":{"banReason":{"type":"string","description":"차단/제재 사유 변경\n\n예: 잘못 입력된 사유나 관리 정책 변경 시 설명 보정."},"banStartAt":{"type":"string","format":"date-time","description":"차단 시작 시각(변경 가능)\n\n정책상 예정일/집행일을 수정해야 할 경우 사용."},"banEndAt":{"type":"string","format":"date-time","description":"차단 만료/해제 시각(변경 가능)\n\n만기명시, 해제 일정 조정 등."},"status":{"type":"string","description":"차단 상태 수정\n\nactive, expired, lifted, scheduled 등 정책상 상태값 코드."}},"required":[],"description":"밴(차단) 레코드 수정 DTO입니다.\n\n제재 이력의 사유, 기간, 상태 등을 변경할 때 사용합니다. discussionboard_bans 테이블에서 직접 변경 가능한 필드들만 명확히 정의합니다."},"IDiscussionboardBan.IDeleteResponse":{"type":"object","properties":{"deletedId":{"type":"string","format":"uuid","description":"삭제(또는 비활성화)된 밴 레코드의 고유 식별자(UUID)\n\n차단 관리 및 정책 변경 결과를 API 응답으로 확인하기 위해 반환됩니다."},"deletedAt":{"type":"string","format":"date-time","description":"삭제(또는 비활성화) 시각(ISO8601)\n\n실제 삭제 처리 완료 시각."},"message":{"type":"string","description":"상태 메시지 또는 추가 설명 (예: 정책상 완전 삭제 불가 등)\n\n정책/감사 니즈에 따라 부연 설명 제공."}},"required":["deletedId","deletedAt"],"description":"밴(차단) 레코드 삭제(또는 정책상 비활성화) 결과 응답 DTO입니다.\n\n정책상 영구 삭제는 불가하고, 삭제 응답으로는 키와 처리 시점, 부가 메시지가 주로 반환됩니다. 정책/감사상 일부 항목은 완전 삭제 불가이거나 soft-delete일 수 있습니다."},"IDiscussionboardWarning.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"페이지 번호를 지정합니다. 이 값은 반환되는 결과에서 어느 페이지를 조회할 것인지를 결정합니다. 생략 시 기본값은 1입니다. 예를 들어 첫 페이지를 조회하려면 1을 입력하면 됩니다.\n\n비즈니스 목적: 경고 이력 리스트에서 페이지를 넘기기 위해 사용합니다."},{"type":"null","description":"페이지 번호를 지정합니다. 이 값은 반환되는 결과에서 어느 페이지를 조회할 것인지를 결정합니다. 생략 시 기본값은 1입니다. 예를 들어 첫 페이지를 조회하려면 1을 입력하면 됩니다.\n\n비즈니스 목적: 경고 이력 리스트에서 페이지를 넘기기 위해 사용합니다."}],"description":"페이지 번호를 지정합니다. 이 값은 반환되는 결과에서 어느 페이지를 조회할 것인지를 결정합니다. 생략 시 기본값은 1입니다. 예를 들어 첫 페이지를 조회하려면 1을 입력하면 됩니다.\n\n비즈니스 목적: 경고 이력 리스트에서 페이지를 넘기기 위해 사용합니다."},"limit":{"oneOf":[{"type":"integer","description":"한 페이지에 조회할 최대 레코드 수를 지정합니다. 값이 주어지지 않으면 시스템 기본값을 사용합니다. 예를 들면 20, 50, 100 중 하나로 선택할 수 있습니다.\n\n비즈니스 목적: 일부 사용자(관리자, 모더레이터)는 대량 검색을 위해 높은 limit 값을 사용할 수 있습니다. 기본 limit은 관리자가 정책상 정할 수 있습니다."},{"type":"null","description":"한 페이지에 조회할 최대 레코드 수를 지정합니다. 값이 주어지지 않으면 시스템 기본값을 사용합니다. 예를 들면 20, 50, 100 중 하나로 선택할 수 있습니다.\n\n비즈니스 목적: 일부 사용자(관리자, 모더레이터)는 대량 검색을 위해 높은 limit 값을 사용할 수 있습니다. 기본 limit은 관리자가 정책상 정할 수 있습니다."}],"description":"한 페이지에 조회할 최대 레코드 수를 지정합니다. 값이 주어지지 않으면 시스템 기본값을 사용합니다. 예를 들면 20, 50, 100 중 하나로 선택할 수 있습니다.\n\n비즈니스 목적: 일부 사용자(관리자, 모더레이터)는 대량 검색을 위해 높은 limit 값을 사용할 수 있습니다. 기본 limit은 관리자가 정책상 정할 수 있습니다."},"target_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 운영자인 경우, 해당 관리자 역할 엔티티의 UUID입니다. 이 값은 discussionboard_admins 테이블의 id 값과 일치해야 합니다. nullable이므로 관리자가 아닌 경우 null을 전달합니다.\n\n실제 비즈니스에서는 admin 경고 검색이나 통계, 특정 사용자를 기준으로 한 경고 검색에 활용됩니다."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 운영자인 경우, 해당 관리자 역할 엔티티의 UUID입니다. 이 값은 discussionboard_admins 테이블의 id 값과 일치해야 합니다. nullable이므로 관리자가 아닌 경우 null을 전달합니다.\n\n실제 비즈니스에서는 admin 경고 검색이나 통계, 특정 사용자를 기준으로 한 경고 검색에 활용됩니다."}],"description":"경고를 받은 대상이 운영자인 경우, 해당 관리자 역할 엔티티의 UUID입니다. 이 값은 discussionboard_admins 테이블의 id 값과 일치해야 합니다. nullable이므로 관리자가 아닌 경우 null을 전달합니다.\n\n실제 비즈니스에서는 admin 경고 검색이나 통계, 특정 사용자를 기준으로 한 경고 검색에 활용됩니다."},"target_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 모더레이터인 경우, 해당 역할 엔티티의 UUID입니다. discussionboard_moderators.id와 일치해야 하며, 대상이 아닐 경우에는 null이 들어갑니다.\n\n비즈니스적으로 모더레이터 대상 경고 현황을 필터링할 때 사용됩니다."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 모더레이터인 경우, 해당 역할 엔티티의 UUID입니다. discussionboard_moderators.id와 일치해야 하며, 대상이 아닐 경우에는 null이 들어갑니다.\n\n비즈니스적으로 모더레이터 대상 경고 현황을 필터링할 때 사용됩니다."}],"description":"경고를 받은 대상이 모더레이터인 경우, 해당 역할 엔티티의 UUID입니다. discussionboard_moderators.id와 일치해야 하며, 대상이 아닐 경우에는 null이 들어갑니다.\n\n비즈니스적으로 모더레이터 대상 경고 현황을 필터링할 때 사용됩니다."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 일반 회원인 경우, 해당 회원 엔티티의 UUID입니다. discussionboard_members의 id와 일치해야 하며, 검색에서 지정하지 않으면 전체 회원 경고가 모두 검색됩니다.\n\n일반적으로 유저별 경고 현황 확인 및 통계 산출을 위해 사용됩니다."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 일반 회원인 경우, 해당 회원 엔티티의 UUID입니다. discussionboard_members의 id와 일치해야 하며, 검색에서 지정하지 않으면 전체 회원 경고가 모두 검색됩니다.\n\n일반적으로 유저별 경고 현황 확인 및 통계 산출을 위해 사용됩니다."}],"description":"경고를 받은 대상이 일반 회원인 경우, 해당 회원 엔티티의 UUID입니다. discussionboard_members의 id와 일치해야 하며, 검색에서 지정하지 않으면 전체 회원 경고가 모두 검색됩니다.\n\n일반적으로 유저별 경고 현황 확인 및 통계 산출을 위해 사용됩니다."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 지정한 관리자의 UUID입니다. discussionboard_admins.id와 일치하며, 경고 내역의 발동 내역 중 관리자가 부여한 경우 기록됩니다. 관리자가 아닌 경우 null로 지정합니다.\n\n비즈니스적 용도: 특정 관리자가 내린 경고만 필터링하고자 할 때 사용됩니다."},{"type":"null","format":"uuid","description":"경고를 지정한 관리자의 UUID입니다. discussionboard_admins.id와 일치하며, 경고 내역의 발동 내역 중 관리자가 부여한 경우 기록됩니다. 관리자가 아닌 경우 null로 지정합니다.\n\n비즈니스적 용도: 특정 관리자가 내린 경고만 필터링하고자 할 때 사용됩니다."}],"description":"경고를 지정한 관리자의 UUID입니다. discussionboard_admins.id와 일치하며, 경고 내역의 발동 내역 중 관리자가 부여한 경우 기록됩니다. 관리자가 아닌 경우 null로 지정합니다.\n\n비즈니스적 용도: 특정 관리자가 내린 경고만 필터링하고자 할 때 사용됩니다."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 부여한 모더레이터인 경우 그 엔티티 UUID입니다. discussionboard_moderators.id값과 일치합니다. 관리자가 경고한 경우 null이 들어가며, 검색에서 이 필드를 이용하여 특정 모더레이터의 경고 이력 검색이 가능합니다."},{"type":"null","format":"uuid","description":"경고를 부여한 모더레이터인 경우 그 엔티티 UUID입니다. discussionboard_moderators.id값과 일치합니다. 관리자가 경고한 경우 null이 들어가며, 검색에서 이 필드를 이용하여 특정 모더레이터의 경고 이력 검색이 가능합니다."}],"description":"경고를 부여한 모더레이터인 경우 그 엔티티 UUID입니다. discussionboard_moderators.id값과 일치합니다. 관리자가 경고한 경우 null이 들어가며, 검색에서 이 필드를 이용하여 특정 모더레이터의 경고 이력 검색이 가능합니다."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"해당 경고가 리포트(신고) 처리 결과라면 연결된 신고 엔티티의 UUID입니다. discussionboard_reports.id와 일치합니다.\n\n비즈니스 용도: 특정 신고 처리 과정을 트래킹할 때 사용하며, 신고-경고 매칭 통계를 내거나 순차 처리 이력 조회에 활용됩니다."},{"type":"null","format":"uuid","description":"해당 경고가 리포트(신고) 처리 결과라면 연결된 신고 엔티티의 UUID입니다. discussionboard_reports.id와 일치합니다.\n\n비즈니스 용도: 특정 신고 처리 과정을 트래킹할 때 사용하며, 신고-경고 매칭 통계를 내거나 순차 처리 이력 조회에 활용됩니다."}],"description":"해당 경고가 리포트(신고) 처리 결과라면 연결된 신고 엔티티의 UUID입니다. discussionboard_reports.id와 일치합니다.\n\n비즈니스 용도: 특정 신고 처리 과정을 트래킹할 때 사용하며, 신고-경고 매칭 통계를 내거나 순차 처리 이력 조회에 활용됩니다."},"reason":{"oneOf":[{"type":"string","description":"경고 사유(사람이 읽는 설명, 예: '경미한 욕설', '부적절한 광고')로, 필터/검색 키워드 조건에 사용할 수 있습니다. 단순 부분 매칭 또는 전체 일치로 쿼리할 수 있습니다.\n\n관리자가 사유별 경고 현황을 파악하거나, 특정 유형(예: 광고성 경고)만 통계내는 분석에 활용됩니다."},{"type":"null","description":"경고 사유(사람이 읽는 설명, 예: '경미한 욕설', '부적절한 광고')로, 필터/검색 키워드 조건에 사용할 수 있습니다. 단순 부분 매칭 또는 전체 일치로 쿼리할 수 있습니다.\n\n관리자가 사유별 경고 현황을 파악하거나, 특정 유형(예: 광고성 경고)만 통계내는 분석에 활용됩니다."}],"description":"경고 사유(사람이 읽는 설명, 예: '경미한 욕설', '부적절한 광고')로, 필터/검색 키워드 조건에 사용할 수 있습니다. 단순 부분 매칭 또는 전체 일치로 쿼리할 수 있습니다.\n\n관리자가 사유별 경고 현황을 파악하거나, 특정 유형(예: 광고성 경고)만 통계내는 분석에 활용됩니다."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"경고 생성 시점(조회 시작일, ISO 8601 형식의 타임스탬프)입니다. 예: 2024-07-21T00:00:00Z\n\n이 필드는 기간 조건으로서, 이 날짜 이후의 경고만 검색한다는 의미입니다."},{"type":"null","format":"date-time","description":"경고 생성 시점(조회 시작일, ISO 8601 형식의 타임스탬프)입니다. 예: 2024-07-21T00:00:00Z\n\n이 필드는 기간 조건으로서, 이 날짜 이후의 경고만 검색한다는 의미입니다."}],"description":"경고 생성 시점(조회 시작일, ISO 8601 형식의 타임스탬프)입니다. 예: 2024-07-21T00:00:00Z\n\n이 필드는 기간 조건으로서, 이 날짜 이후의 경고만 검색한다는 의미입니다."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"경고 생성 시점(조회 종료일, ISO 8601 형식 타임스탬프)입니다. 예: 2024-07-22T23:59:59Z\n\n입력하면 해당 날짜 이전까지의 경고 내역만 필터링합니다."},{"type":"null","format":"date-time","description":"경고 생성 시점(조회 종료일, ISO 8601 형식 타임스탬프)입니다. 예: 2024-07-22T23:59:59Z\n\n입력하면 해당 날짜 이전까지의 경고 내역만 필터링합니다."}],"description":"경고 생성 시점(조회 종료일, ISO 8601 형식 타임스탬프)입니다. 예: 2024-07-22T23:59:59Z\n\n입력하면 해당 날짜 이전까지의 경고 내역만 필터링합니다."},"sort":{"oneOf":[{"const":"created_at_asc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"const":"created_at_desc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"const":"reason_asc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"const":"reason_desc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"type":"null","enum":["created_at_asc","created_at_desc","reason_asc","reason_desc",null],"description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."}],"description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."}},"description":"discussionboard_warnings 테이블을 대상으로 하는 경고 이력 검색(리스트 조회/필터링)에 사용되는 검색 조건 및 페이징, 정렬 요청 타입입니다.\n\n이 타입은 관리자/모더레이터가 경고자별, 발동자별, 특정 기간, 사유별로 경고 내역을 검색하거나, 통계 및 화면 리스트에 데이터를 제공할 때 사용합니다. 각 필드는 실제 DB 컬럼 및 ERD 설계 규칙에 기반하여 3NF(제3정규형)에 따라 필요 최소한의 원자 데이터를 제공합니다.\n\n설명은 Prisma schema 주석과 운영 현장에서의 활용 목적을 기반으로 수록했습니다.","required":[]}}},"completed":191,"total":191,"step":0,"created_at":"2025-07-22T13:39:18.663Z"},"tokenUsage":{"facade":{"aggregate":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComplete","document":{"operations":[{"specification":"Implements retrieval of a paginated or filtered list of board sections for the political/economic discussion board. This operation fetches all sections (such as 'Politics', 'Economy') which are used for organizing sets of boards. Follows list/read/search pattern and supports possible query, pagination, or filter data to be supplied in request body. Based on table: discussionboard_sections.","description":"This API provides a way to retrieve a filtered and/or paginated list of discussion board sections. Each section organizes boards under broad themes (e.g., politics, economy). Only atomic data from the discussionboard_sections table is returned: section id, name, description, sort_order, created_at, updated_at. The operation may support searching by name, filtering by activity, and specifies pagination parameters such as page size and page index in the request body.\n\nAccess to the endpoint requires a role with section-listing privileges (admin, moderator, member, or guest for public sections). The operation enforces data integrity and follows the 3NF atomic data rule as in schema. Any soft-deleted or inactive sections may be filtered as defined in business logic. Related data such as boards are not included by default and require explicit queries.\n\nValidation includes ensuring valid filters/search params in request body. Associated error handling for empty results, invalid request parameters, or permission denial is required. This endpoint is commonly used in combination with /boards and UI filtering components.","summary":"Retrieve a paginated or filtered list of board sections (discussionboard_sections table).","parameters":[],"requestBody":{"description":"Filtering, searching, and pagination params for board section list query.","typeName":"IDiscussionboardSection.IRequest"},"responseBody":{"description":"Paginated result containing basic info for each board section.","typeName":"IPageIDiscussionboardSection"},"authorizationRoles":null,"path":"/discussionboard/sections","method":"patch"},{"specification":"Retrieves a single board section by its unique identifier from the discussionboard_sections table. Used for looking up properties of a specific section (e.g., in admin or configuration UIs).","description":"Fetch the full record of a single board section using its unique ID. Returns section metadata such as name, description, sorting order, creation, and update times. Only non-derived, atomic section data from the 3NF schema is returned.\n\nUsed in admin interfaces, board creation workflows, and configuration editors. Security/authorization is enforced—admins, moderators, or members with configuration privileges may access this detail. Not intended to return related boards or nested data, though follow-up queries may use the returned ID.\n\nHandles errors for not-found (404), permission-denied, and invalid UUID input. Related APIs: section list (PATCH /discussionboard/sections), create/update/delete section.","summary":"Get metadata for a board section by ID (discussionboard_sections table).","parameters":[{"name":"id","description":"Unique identifier of the board section to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete board section record for the requested section ID.","typeName":"IDiscussionboardSection"},"authorizationRoles":null,"path":"/discussionboard/sections/{id}","method":"get"},{"specification":"Creates a new discussion board section, representing a high-level grouping in the forum (e.g., 'Politics', 'Economy'). CRUD for discussionboard_sections table. Only admins or roles with permissions may create sections.","description":"Allows admin (or authorized roles) to create a new logical section for organizing boards within the platform. The request body supplies section name, description, and desired display order. This maintains 3NF compliance—no denormalized or aggregate data.\n\nValidates uniqueness of section name and proper order index, and enforces required fields. On success, returns the new section record. Handles duplicate name error, invalid input, or insufficient permission.\n\nCreates only a section entry; boards must be added using the boards endpoint. Sections may subsequently be updated or deleted. Related endpoints: update/delete section, list sections.","summary":"Create a new board section (discussionboard_sections table).","parameters":[],"requestBody":{"description":"New section information including name, description, and sort_order.","typeName":"IDiscussionboardSection.ICreate"},"responseBody":{"description":"Full record of the newly created board section.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"path":"/discussionboard/sections","method":"post"},{"specification":"Updates an existing board section’s properties (name, description, sort order, etc.), as required in discussionboard_sections table. Only admins or permitted moderators may use this operation. Follows full update semantics (PUT).","description":"Accepts an explicit update payload for the target board section, identified by its section ID. Permits updates to atomic fields such as name, description, and sort_order, but not to related boards or other entities. Ensures section name uniqueness, valid sort index, and compliance with business logic (e.g., cannot rename to an existing section name).\n\nRoles with configuration privileges (typically admin) are authorized. Audit trail is enforced per data retention rules. Reports errors for missing section, invalid update values, or authorization failure. Related to: get section, create section, delete section.","summary":"Update an existing board section by ID (discussionboard_sections table).","parameters":[{"name":"id","description":"Unique identifier of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for a board section (name, description, sort_order, etc.).","typeName":"IDiscussionboardSection.IUpdate"},"responseBody":{"description":"Updated section record after applying changes.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"path":"/discussionboard/sections/{id}","method":"put"},{"specification":"Removes (deletes) a board section from the discussionboard_sections table. Only admin-level users may perform this operation. Deletion is restricted if boards are still assigned to the section.","description":"Permanently deletes a board section given its unique ID, after checking for dependencies (such as no boards assigned to this section). Section removal is strictly administrative; must check for safe-deletion conditions (i.e., no boards under this section).\n\nOperation requires admin privileges. Performs referential integrity validation. Returns success/failure status and may return the deleted section’s metadata for confirmation. Handles not-found, permission-denied, and dependency errors. Related endpoints: create/list/update section.","summary":"Delete a board section by ID, enforcing referential integrity (discussionboard_sections table).","parameters":[{"name":"id","description":"ID of section to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Metadata or confirmation of the deleted section, or an empty body if not required.","typeName":"IDiscussionboardSection.IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/sections/{id}","method":"delete"},{"specification":"Retrieves paginated or filtered list of boards under all sections for browsing and discovery. Implements board list/read/search operation per requirements using the discussionboard_boards table.","description":"List and search all boards in the platform, returning properties such as board ID, section ID, name, description, rules, activity flag, and timestamps. Filtering/searching on board name, section, active status, or related tags is supported via the request body.\n\nPublic sections/boards may be visible to all roles, but sensitive fields or inactive boards may be filtered depending on privilege. Enforces data integrity—only 3NF, atomic properties per the schema. Pagination attributes (page, size, etc.) and sorting are required in request body. Errors reported for invalid query or filter values.\n\nRelated endpoints: board detail, board CRUD, section list.","summary":"Retrieve paginated/searchable list of boards (discussionboard_boards table).","parameters":[],"requestBody":{"description":"Request filtering/search criteria and pagination for board listing.","typeName":"IDiscussionboardBoard.IRequest"},"responseBody":{"description":"Paginated, filtered list of board entries (with section references, basic fields only).","typeName":"IPageIDiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards","method":"patch"},{"specification":"Retrieves a single board’s details from the discussionboard_boards table, used for board display, editing, or assigning topics. Board ID is path parameter. 3NF atomic data only.","description":"Returns the full record for a specific board including ID, section, name, description, rules, active/inactive flag, and audit timestamps. Board ID must be provided as path parameter. Public access may be allowed for board display, while extra fields may be privilege-restricted.\n\nValidates the given board ID is a valid UUID and exists. Errors for not-found, permissions. Supports administrative review, board configuration, and linking boards to topics.\n\nRelated operations: list/search boards, create/update/delete board.","summary":"Get details for one discussion board by ID (discussionboard_boards table).","parameters":[{"name":"id","description":"Unique identifier of board to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Atomic, full record for board specified by ID.","typeName":"IDiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards/{id}","method":"get"},{"specification":"Creates a new board in the forum under an existing section, as per CRUD requirements and discussionboard_boards schema. Admin privilege enforced.","description":"Posts new board record with details including target section ID, name, description, rules, and active flag. Validates referenced section exists, enforces unique board name, and checks required fields. 3NF normalization—no joined data or derived fields in request or response.\n\nAdmins (or roles granted privilege in RBAC) may create boards. Errors handled for invalid input, duplicate board name, permission denied, or section not found. Related endpoints: section detail, board update/delete.","summary":"Create a new discussion board associated to a section (discussionboard_boards table).","parameters":[],"requestBody":{"description":"Payload to define the new board (section ID, name, description, rules, is_active).","typeName":"IDiscussionboardBoard.ICreate"},"responseBody":{"description":"Created board record with atomic fields only.","typeName":"IDiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards","method":"post"},{"specification":"Updates full details for an existing board, using the discussionboard_boards table. Only admin or authorized moderator may update. PUT semantics (replace atomics).","description":"Updates atomic attributes for a board including name, description, rules markdown, activity flag, etc. Board identified by ID in path parameter; updated fields supplied in request body. Validates name uniqueness and business rules. No updates to related posts or sections in this operation.\n\nAdmin (or other RBAC role) authorization enforced. Reports errors for missing board, unique constraint errors, or invalid data.\n\nRelated operations: get/create/delete board.","summary":"Update a discussion board by ID (discussionboard_boards table).","parameters":[{"name":"id","description":"Unique ID of the board to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload with board attributes to set.","typeName":"IDiscussionboardBoard.IUpdate"},"responseBody":{"description":"Board record after changes applied (atomic fields only).","typeName":"IDiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/{id}","method":"put"},{"specification":"Deletes a discussion board given its ID, as defined in discussionboard_boards table. Admin access required. Must verify safety (e.g., no critical content).","description":"Removes a board by its unique identifier, validating business conditions (such as if safe to delete—may check for posts or settings). 3NF atomic operation: board identified by ID, cascade or restrict as enforced by schema.\n\nRestricted to admin roles due to risk of data loss. Returns success/confirmation, possibly deleted metadata. Handles errors for not-found, permission-denied, or dependency. Related: section/board CRUD and list.","summary":"Delete a board by ID with referential validation (discussionboard_boards table).","parameters":[{"name":"id","description":"ID of the board to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation or metadata of the deleted board record.","typeName":"IDiscussionboardBoard.IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/{id}","method":"delete"},{"specification":"Retrieves paginated or filtered list of tags for board/topic navigation. Implements board/discussion tag search pattern, using discussionboard_tags table. Used for filtering, discovery, and tagging features.","description":"List all tags used for organizing boards or posts, with search/filter and pagination support. Returns tag ID, tag string, description, and audit timestamps. Request body allows filters such as tag substring, category, or is_active status if relevant. Strict 3NF atomicity—no joined/denormalized info.\n\nAll roles may view tags for filtering and tagging purposes. Handles invalid filter/query, empty result, pagination controls. Related endpoints: tag detail, board create/update (for tag assignment).","summary":"Retrieve (searchable) list of tags for board/post filtering (discussionboard_tags table).","parameters":[],"requestBody":{"description":"Tag search and pagination criteria.","typeName":"IDiscussionboardTag.IRequest"},"responseBody":{"description":"Paginated/filtered set of tag records for navigation.","typeName":"IPageIDiscussionboardTag"},"authorizationRoles":null,"path":"/discussionboard/tags","method":"patch"},{"specification":"Retrieves details for a single tag by its ID for filtering or UI display. Implements the tag look-up for discussionboard_tags table.","description":"Fetch record for a single tag using tag ID, returning atomic properties (tag value, description, created/updated times). Used for tag display UIs, tag assignment logic, and navigation. Path parameter is tag ID.\n\nAll roles may view. Validates input and not-found cases. Related endpoints: list/search tags.","summary":"Get atomic detail for a tag by ID (discussionboard_tags table).","parameters":[{"name":"id","description":"ID of the tag to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Atomic tag record matching the requested ID.","typeName":"IDiscussionboardTag"},"authorizationRoles":null,"path":"/discussionboard/tags/{id}","method":"get"},{"specification":"Create a new tag in the discussion board. This endpoint is responsible for adding new tags that can be attached to boards or posts, as defined by the 'discussionboard_tags' Prisma table. The Prisma comments state that this entity is for tag definitions, including label, description, and uniqueness maintenance. The request will contain atomic tag data such as the tag string, optional description, and timestamps will be set by the server. Only admins or moderators should have access to this endpoint, enforcing RBAC on writes to tag definitions. Related endpoints include PATCH for lists and PUT/DELETE for tag update or removal. Responds with the newly created tag object including its unique ID and all fields.","description":"This operation creates a new tag in the discussionboard_tags table. It requires the user to provide a tag string (unique), an optional description, and potentially other relevant fields from the schema. Upon successful creation, the server responds with the tag object including its assigned database ID and creation/update timestamps. Only authorized users (admins/moderators) may write tag definitions. Validation ensures tag uniqueness and non-empty value. In case of violation or duplicate, a corresponding error is returned. The tag model is referenced by the Prisma schema as a definition-only table. Timestamps and additional metadata are handled by the server. This operation is typically one of a suite of tag management endpoints, together supporting CRUD for tag definitions.","summary":"Create a new tag (discussionboard_tags table)","parameters":[],"requestBody":{"description":"Data for the new tag to be created.","typeName":"IDiscussionboardTag.ICreate"},"responseBody":{"description":"Details of the created tag, including unique ID, tag value, description, and timestamps.","typeName":"IDiscussionboardTag"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/tags","method":"post"},{"specification":"Update an existing tag in the discussion board. This endpoint facilitates updating tag label or description as defined by the 'discussionboard_tags' Prisma table. Applies to cases where a tag label must be corrected or clarified. The tag is uniquely identified by its ID (a UUID) in the path. Write access must be restricted to admins and moderators, and uniqueness should be enforced at the application or DB level. The request body allows updating of the tag string and description according to business rules. The response contains the updated tag record. Related endpoints are POST for tag creation and DELETE for removal. The endpoint maintains data integrity and ensures historical accuracy via timestamps.","description":"This endpoint updates an existing tag, uniquely identified by path parameter {id}, in the discussionboard_tags table. Supported updates include changing the tag string or its description. Incoming values are validated for uniqueness, nonempty tag string, and completeness against business logic. Only admins and moderators are permitted to perform this update. The server updates the fields as requested and returns the complete tag object post-update. Errors are returned if the tag does not exist or constraint violations occur (duplicates, etc). Descriptions reference the Prisma schema which ensures normalized, atomic storage of tag metadata and related behaviors described in requirements analysis.","summary":"Update an existing tag (discussionboard_tags table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the tag, including label or description.","typeName":"IDiscussionboardTag.IUpdate"},"responseBody":{"description":"The updated tag object with all its properties.","typeName":"IDiscussionboardTag"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/tags/{id}","method":"put"},{"specification":"Delete a tag from the discussion board. This endpoint implements DELETE functionality for tag definitions, directly aligned with the 'discussionboard_tags' Prisma table. Tag to be deleted is uniquely identified by its ID (UUID) in the URL path. Only admin or moderator roles can perform this operation. This endpoint ensures referential integrity and that no business logic (e.g., tag in-use checks) is violated prior to actual deletion. The endpoint responds with the deleted tag's data for audit purposes or a confirmation message on success. Related endpoints are POST for creation and PUT/PATCH for update of tags.","description":"This operation deletes an existing tag from the discussionboard_tags table. The tag to be deleted is specified by its unique ID, passed as a path parameter. Role-based access control ensures only admins or moderators can delete tags. Server-side logic must confirm the tag exists and is not in protected use, responding with appropriate errors otherwise. Deletion updates are logged and referenced in audit trails. The Prisma schema guarantees that each tag is atomic, and this operation allows for the removal or retirement of obsolete, erroneous, or inappropriate tags as part of system and admin requirements.","summary":"Delete an existing tag (discussionboard_tags table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the tag to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Information about the deleted tag or confirmation of deletion.","typeName":"IDiscussionboardTag"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/tags/{id}","method":"delete"},{"specification":"Retrieve a paginated and searchable list of board subscriptions for discussion board. Implements listing and query/search of 'discussionboard_board_subscriptions' as described in the requirements for notification and board following features. Supports advanced filtering such as by member or board ID, creation date, and sorts for audit/logging purposes. RBAC is typically enforced so only the owner, or an admin/moderator, can see all records. The endpoint takes request body with filters, pagination, search term, and returns a paged list of subscription objects. References the Prisma schema and business need to display/manage board subscriptions interactively in user settings or admin dashboards.","description":"Returns a paged list of board subscriptions. Can be filtered or searched by board, member, created date, or other criteria. The request body allows for arbitrary search and pagination per platform policy. Results include full subscription objects with references to board and user, and audit timestamp. Only relevant users (owners/admins/mods) can view or list all board subscriptions, per RBAC. Errors may occur if user not authenticated or requested filters are invalid. Based on 'discussionboard_board_subscriptions' as defined in the Prisma and requirements documentation.","summary":"Search and list board subscriptions (discussionboard_board_subscriptions table)","parameters":[],"requestBody":{"description":"Request parameters for pagination, filtering, or searching the list of board subscriptions.","typeName":"IDiscussionboardBoardSubscription.IRequest"},"responseBody":{"description":"Paginated list of board subscriptions matching search and filter criteria.","typeName":"IPageIDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions","method":"patch"},{"specification":"Retrieve details for a specific board subscription. This GET endpoint allows a user, admin, or moderator to fetch detailed information about a particular subscription, as defined in 'discussionboard_board_subscriptions' Prisma comments. The subscription record is uniquely identified using a UUID path parameter. Access control may restrict viewing to the owner/subscriber themselves, or admin/moderator users as with all board subscription data. Result contains all record fields including foreign key references, user/board IDs, and timestamp. Typically used in settings or notification feature UIs.","description":"Fetch a board subscription by its unique ID. The endpoint returns the explicit subscription object, including subscriber and board references, and audit created timestamp. Only the relevant user or privileged platform roles can access a given board subscription. Nonexistent IDs or unauthorized access lead to error responses. The endpoint is defined for 'discussionboard_board_subscriptions' main entity and aligns with standard resource-centric API patterns. All data returned complies with audit, retention, and search/display requirements.","summary":"Get details of board subscription (discussionboard_board_subscriptions table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the board subscription to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Board subscription details.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions/{id}","method":"get"},{"specification":"Create a new board subscription. This endpoint implements creation for user subscription to a board feature, as required for notifications and personalized content feeds. Aligned to 'discussionboard_board_subscriptions' Prisma comments, it receives details of the board and member, checks validity and uniqueness, then writes new normalized record. Only authenticated members (possibly admins/mods on behalf of others) may create a subscription. Validation ensures a user cannot subscribe to the same board multiple times. The response includes the newly created subscription with foreign keys, timestamps, and all associated properties.","description":"This operation creates a new subscription linking a member to a board, as described by discussionboard_board_subscriptions. Only authenticated users or authorized roles are permitted to perform this action. The request body must contain the board ID, user/member ID, and any required creation parameters. The server validates constraints and either inserts or rejects the record with appropriate error messages. Upon success, the result is the full board subscription object. This endpoint supports the personalized notification and board tracking features outlined in requirements and the Prisma schema.","summary":"Create a board subscription (discussionboard_board_subscriptions table)","parameters":[],"requestBody":{"description":"Information about the new subscription (board ID, member ID, etc).","typeName":"IDiscussionboardBoardSubscription.ICreate"},"responseBody":{"description":"Details of the created subscription record.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions","method":"post"},{"specification":"Update a specific board subscription. This endpoint applies updates to an existing board subscription record identified by its unique ID (UUID), as defined in 'discussionboard_board_subscriptions' Prisma schema. Allows changing of properties specified as mutable in business logic, typically owner or board link in error correction. Only permitted for owner/member themselves or admin/moderator. The request body contains the fields to update; server validates and applies, then returns the modified record. Used in settings or for correcting problems with subscription links. RBAC enforced as per resource ownership and role descriptions.","description":"Given an existing board subscription identified by {id}, this endpoint performs updates per the request body provided. Usually invoked to fix or adjust user-board linkages. Only the owner (member) or privileged roles (admin, moderator) are allowed to update. If resource does not exist, or changes violate uniqueness or foreign key constraints, errors are returned. Responds with updated subscription object and all current fields, referenced in audit logs as required by compliance policies.","summary":"Update a board subscription (discussionboard_board_subscriptions table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the board subscription record.","typeName":"IDiscussionboardBoardSubscription.IUpdate"},"responseBody":{"description":"Updated board subscription record.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions/{id}","method":"put"},{"specification":"Delete a specific board subscription entry. Implements the removal (unsubscribe) logic as outlined for user notification and board tracking features in the requirements and 'discussionboard_board_subscriptions' Prisma definition. Uniquely identifies the record using the {id} path variable (UUID). RBAC restricts the action to subscription owners or platform staff (admin/moderator) as appropriate. Server validates existence and legitimacy of unsubscribe action, then deletes and returns the deleted record (for audit/undo/log). This endpoint complements POST (subscribe) and PATCH (list) entrypoints.","description":"Remove (unsubscribe) an existing board subscription by ID. This endpoint is used when a member no longer wishes to follow a board, or admin/moderator removes an invalid subscription. Only the subscription owner (or privileged staff) is allowed to perform the operation. The process checks RBAC, confirms the record's existence and validity, and deletes if all checks pass. Response details are provided for compliance/audit, as logged in the discussionboard_board_subscriptions table. Returns the deleted object or a confirmation message.","summary":"Delete a board subscription (discussionboard_board_subscriptions table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the subscription to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Information about the deleted subscription record or confirmation.","typeName":"IDiscussionboardBoardSubscription"},"authorizationRoles":null,"path":"/discussionboard/boardSubscriptions/{id}","method":"delete"},{"specification":"Retrieve a searchable and paginated list of board settings. Implements advanced filtering, searching, and paging over the board settings entity for discussion boards as described by 'discussionboard_board_settings' in the Prisma and requirements doc. Used for admin management of board feature toggles, approvals, and other per-board settings. RBAC restricts write/update operations, but read/list may be open or restricted depending on sensitivity. The endpoint expects a request body with search terms, filters, sort, and pagination info. The response is a list of settings records with full schema properties as defined. Related endpoints include POST, PUT, and DELETE for board settings management.","description":"Lists board settings with search and filtering. The request may specify filters such as board, approval flag, or image setting, and standard pagination params. Useful for admin UIs, reporting, or troubleshooting per-board configuration. Returns a paged result set conforming to the schema's properties, used elsewhere for feature toggling or display in management UI. Errors may indicate authentication/authorization failures, malformed requests, or search constraints not met. Complies with requirements for admin/privileged access and UI-driven management.","summary":"Search and list board settings (discussionboard_board_settings table)","parameters":[],"requestBody":{"description":"Search and pagination information for board settings listing.","typeName":"IDiscussionboardBoardSetting.IRequest"},"responseBody":{"description":"Paginated list of board settings matching the criteria.","typeName":"IPageIDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings","method":"patch"},{"specification":"Get details of a single board's settings. This GET endpoint fetches settings for a particular board, used for toggling features like image posting or required approval, as described in 'discussionboard_board_settings' Prisma comments. Uniquely identified by a UUID path parameter (the settings ID, which may also be the board ID due to 1:1 mapping). Only admins may access to update or view, enforcing RBAC. The response contains the full set of settings for the given board, suitable for admin settings UIs. Related endpoints enable creation (POST), update (PUT), and deletion as needed per business logic.","description":"Retrieve a board setting by unique ID. Outcome includes all settings fields, such as allow_images and require_moderator_approval, with timestamps for audit. Only authorized platform roles (admins) may access this data. If the specified record does not exist, returns an appropriate error or empty response. Based on atomic 1:1 structure in discussionboard_board_settings per Prisma and requirements. Used for detailed configuration views in admin console.","summary":"Get board setting (discussionboard_board_settings table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the board setting to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Board setting object with all relevant properties.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings/{id}","method":"get"},{"specification":"Create a new board setting entry. Implements creation of per-board settings, such as feature toggles and moderator flag requirements, for the discussion boards. This operation follows the 'discussionboard_board_settings' model and requirements for admin-driven customization and RBAC. Requires admin privileges. The request provides all necessary properties (board ID, flags, etc) to set up the associated settings. The response returns the new settings object with all fields as defined in the schema, including the generated ID, references, and timestamps. Relates to PATCH for list/search, PUT for update, and DELETE for removal.","description":"Accepts creation data for a new board settings record. Admin user must specify board (by ID) and feature flags, such as allow_images or require_moderator_approval. Upon validation and insertion, the full settings object is returned, including all schema fields. Only admins are permitted to create/update board-level settings. Violations in input or referential integrity are met with informative errors. Reference is to 'discussionboard_board_settings' in Prisma schema and business requirements analysis.","summary":"Create board setting (discussionboard_board_settings table)","parameters":[],"requestBody":{"description":"Data needed to create the board settings entry (board ID, feature flags, etc).","typeName":"IDiscussionboardBoardSetting.ICreate"},"responseBody":{"description":"Newly created board setting object with all parameters.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings","method":"post"},{"specification":"Update board setting details for a specific board. Implements update/mutation of per-board configuration per 'discussionboard_board_settings' table. Used by admins to enable/disable image posting, require approval, and other custom settings. Target settings record is identified by path parameter (unique ID, UUID). Requires admin authority; input validated by business logic. Response is updated board settings object reflecting the changes. Related endpoints support list/search (PATCH), create (POST), and delete as needed per business policy and platform design.","description":"With a given settings record ID in the path, this endpoint updates board settings fields per provided request body. Usually invoked from admin management UI. Only admins have permission. Fields such as allow_images and require_moderator_approval are mutable. Errors include not found, integrity conflicts, or policy rule violations. Changes are logged as required for audit. Uses 'discussionboard_board_settings' as defined by Prisma schema, referencing all model properties and RBAC enforcement. The update result contains the full board settings object.","summary":"Update board setting (discussionboard_board_settings table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the board setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the board setting object.","typeName":"IDiscussionboardBoardSetting.IUpdate"},"responseBody":{"description":"Updated board setting object with all parameters.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings/{id}","method":"put"},{"specification":"Delete a single board settings record by ID. This endpoint is associated with the discussionboard_board_settings table in the Prisma schema and is intended for administrative actions, such as removing obsolete settings for a specific board.","description":"This API allows administrators to delete a board settings entry identified by its unique ID from the discussionboard_board_settings table. Board settings globally control options such as image upload permissions and moderation requirements for their linked board. When called, the API will permanently remove the specified settings, after checking for dependents and enforcing database referential integrity. This operation is restricted to admin roles as settings can impact board-wide feature toggles, and must log all deletions for audit trail compliance. If the board settings do not exist, the API must return a not-found error. Related settings references in dependent systems or cache should be invalidated on successful deletion. Note that deleted settings cannot be restored except through re-creation.","summary":"Delete a DiscussionBoardBoardSettings record by ID (discussionboard_board_settings).","parameters":[{"name":"id","description":"Target board settings record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/boardSettings/{id}","method":"delete"},{"specification":"Patch (search/filter/list) notification setting records for the discussion board. This endpoint is associated with the discussionboard_notification_settings table and is used to list or search notification settings with optional filters or pagination.","description":"This operation provides a way to retrieve a list of notification settings, potentially filtered by member ID, notification preferences, or pagination options from the discussionboard_notification_settings table. Only users with necessary permissions (typically admins, possibly members for their own settings) can access this endpoint. The results include each setting's notification preferences for board and mention events. This API supports paging, sorting, and filtering according to query parameters, and should return results wrapped with pagination metadata. If a member requests their own settings, the permissions checks should limit exposure to only their record; admins can access all records.","summary":"List/search notification settings (discussionboard_notification_settings).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for notification settings list.","typeName":"IDiscussionboardNotificationSettings.IRequest"},"responseBody":{"description":"Paginated notification settings list result.","typeName":"IPageIDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings","method":"patch"},{"specification":"Get a single notification settings record by ID. Associated with the discussionboard_notification_settings table, this operation retrieves the detailed notification preference of a user or administrator for board events and mentions.","description":"Given a unique ID corresponding to a notification setting record, this API fetches and returns the full detail of the notification settings as stored in the discussionboard_notification_settings table. These preferences dictate how and when the member receives notifications about board activity or mentions. The operation enforces permission checks so that users can only see their own settings unless they are granted elevated permissions (admin/moderator). Returns a 404 error if the settings record does not exist or is unauthorized. All accesses should be auditable for compliance.","summary":"Get a single notification settings record by ID (discussionboard_notification_settings).","parameters":[{"name":"id","description":"Target notification settings record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification settings record.","typeName":"IDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings/{id}","method":"get"},{"specification":"Create a new discussion board notification settings record. This is mapped to the discussionboard_notification_settings table. Only one notification settings record may exist per member; attempting to create a duplicate must result in an error.","description":"This API allows authenticated members to create a new set of notification settings specifying their preferences for board notifications and mentions. Upon creation, the API must enforce uniqueness per-member (each user may have only one notification settings record). It should validate input (such as presence of boolean flags) and ensure referential integrity with the member table. If successful, the API returns the full created notification settings record. If a record already exists, a conflict error is returned. Logging is required for audit trails.","summary":"Create notification settings (discussionboard_notification_settings).","parameters":[],"requestBody":{"description":"Notification settings creation data.","typeName":"IDiscussionboardNotificationSettings.ICreate"},"responseBody":{"description":"Created notification settings record.","typeName":"IDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings","method":"post"},{"specification":"Update a notification settings record by ID. Applies to the discussionboard_notification_settings table; used by members to change existing notification preferences for board and mention events.","description":"This API updates notification settings identified by a unique ID in the discussionboard_notification_settings table. It allows updating preference flags such as whether to receive notifications for board activity or mentions. The operation validates that the ID belongs to the requester (unless admin), and that only allowed fields are changed. On success, the API returns the full, updated notification settings. If the record is not found, or not owned by the user, a 404 error is returned. All update events should generate an audit log entry for compliance.","summary":"Update notification settings by ID (discussionboard_notification_settings).","parameters":[{"name":"id","description":"Target notification settings record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification settings changes.","typeName":"IDiscussionboardNotificationSettings.IUpdate"},"responseBody":{"description":"Updated notification settings record.","typeName":"IDiscussionboardNotificationSettings"},"authorizationRoles":null,"path":"/discussionboard/notificationSettings/{id}","method":"put"},{"specification":"Delete a notification settings record by ID. Associated with discussionboard_notification_settings, this is used to remove a member's notification preferences record, typically as part of account management or deactivation.","description":"Given an ID, this API deletes the corresponding notification settings record from the discussionboard_notification_settings table. Deletion is permanent and should only be allowed by the record owner (member) or administrators. If the record does not exist, or is not permitted for deletion by the caller, a 404 or forbidden error should be returned. Success responses acknowledge the deletion; log the event for audit compliance.","summary":"Delete notification settings by ID (discussionboard_notification_settings).","parameters":[{"name":"id","description":"Target notification settings record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/notificationSettings/{id}","method":"delete"},{"specification":"List or search admin role records for the discussion board. This is tied to the discussionboard_admins table; lists admins, supports filtering by member, grant/revoke status, and paginated querying for admin/oversight use.","description":"Retrieves a paginated, filterable list of admin assignments in the discussionboard_admins table. Filters can include member ID, status (active/revoked), or grant timestamp. Should support pagination, sorting, and optional text search. Only admin users may access the full list. All accesses and queries should be auditable for compliance and privilege monitoring.","summary":"List/search admin role assignments (discussionboard_admins).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for admin assignments listing.","typeName":"IDiscussionboardAdmins.IRequest"},"responseBody":{"description":"Paginated admin role assignment results.","typeName":"IPageIDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins","method":"patch"},{"specification":"Get details of a single admin role assignment by its ID. Associated with the discussionboard_admins table, this returns all available information about a specific admin assignment event or status.","description":"Given an ID, retrieve all details about an admin role assignment, including member reference, grant/revoke status, and timestamp, from the discussionboard_admins table. Only privileged users may request any record; all direct accesses should be logged for auditability. If the record does not exist, return a 404 error. Permissions must be enforced.","summary":"Get admin assignment record by ID (discussionboard_admins).","parameters":[{"name":"id","description":"Target admin role assignment record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Admin role assignment record.","typeName":"IDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins/{id}","method":"get"},{"specification":"Create a new admin assignment (grant admin privileges to a member). Associated with the discussionboard_admins table; only privileged existing admins can create new admin role assignments.","description":"Allows the creation of a new admin role assignment for a member, i.e., promoting a member to admin status. The request must reference an existing member by ID and enforce single-admin-per-member uniqueness. Only privileged operators (current admins) may perform this operation. Created records must be returned in full, and all promotions logged for audit compliance.","summary":"Create admin assignment (discussionboard_admins).","parameters":[],"requestBody":{"description":"Admin assignment creation data.","typeName":"IDiscussionboardAdmins.ICreate"},"responseBody":{"description":"Created admin assignment record.","typeName":"IDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins","method":"post"},{"specification":"Update an existing admin assignment record by ID. Mapped to discussionboard_admins; mainly used to record role revocations, changes in status, or audit field updates.","description":"This API updates an admin assignment in the discussionboard_admins table, typically to revoke admin status (set revoked_at), update metadata, or correct assignment details. Only other admins may invoke this action. Success returns the updated assignment record. Permissions, audit logging, and referential integrity must be strictly enforced.","summary":"Update admin assignment by ID (discussionboard_admins).","parameters":[{"name":"id","description":"Target admin assignment record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in admin assignment.","typeName":"IDiscussionboardAdmins.IUpdate"},"responseBody":{"description":"Updated admin assignment record.","typeName":"IDiscussionboardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/admins/{id}","method":"put"},{"specification":"Delete an admin role assignment, revoking admin privileges from a member by assignment record ID. Associated with discussionboard_admins; restricted to privileged role operators (admins).","description":"Removes (revokes) an admin assignment record, hence removing admin privileges for the referenced member. Only other admins may call this. Idempotent: deleting a non-existent assignment returns success or a not found error (as per application policy). Revocation timestamp must be set and all deletions logged for auditability.","summary":"Delete admin assignment by ID (discussionboard_admins).","parameters":[{"name":"id","description":"Target admin assignment record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/admins/{id}","method":"delete"},{"specification":"List or search moderator role assignments for the discussion board. This operation is related to the discussionboard_moderators table; lists assignments, supports filter/search, paging, for admin/oversight tasks.","description":"Retrieves paginated and optionally filtered moderator assignments from the discussionboard_moderators table. Filters can include member ID, grant/revoke status, etc. Only admins (and possibly moderators) can list all moderator assignments. All accesses are auditable for compliance. Should include relevant metadata, paging, and query parameter support.","summary":"List/search moderator role assignments (discussionboard_moderators).","parameters":[],"requestBody":{"description":"Search, filter, and pagination for moderator assignment list.","typeName":"IDiscussionboardModerators.IRequest"},"responseBody":{"description":"Paginated moderator assignments list result.","typeName":"IPageIDiscussionboardModerators"},"authorizationRoles":["admin"],"path":"/discussionboard/moderators","method":"patch"},{"specification":"This API retrieves detailed information about a specific discussion board moderator by their unique ID. It is directly associated with the `discussionboard_moderators` table, which records moderation assignments for user accounts. The returned data should include moderator assignment fields, the linked member ID, granted/revoked timestamps, and any associated audit references. This endpoint supports permission checks: only admins or the moderator themselves may access this data. The response will provide all normalized moderator attributes, 3NF compliance, and role-relevant identifiers.","description":"Retrieves all properties for a single moderator from the `discussionboard_moderators` table, including moderator status, assigned member, assignment and revocation dates, and related audit information. The endpoint enforces permissions based on the requesting user's role, ensuring that only authorized actors (admins or the moderator) can access sensitive moderation information. This is essential for RBAC enforcement and supports administrative workflows and member transparency on moderator status. Error handling will reflect authorization or missing record.","summary":"Get detailed information for one moderator (discussionboard_moderators table).","parameters":[{"name":"id","description":"Unique ID of the moderator assignment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment details and audit fields.","typeName":"IDiscussionboardModerator"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderators/{id}","method":"get"},{"specification":"This endpoint creates a new discussion board moderator entry. It requires admin permission and is linked to the `discussionboard_moderators` table, capturing the assignment of the moderator role to a specified member. The request body must include the member’s user ID. Business rules include verifying the member exists, has not already been assigned as moderator, and updating the assignment audit trail. 3NF is preserved as only the assignment is stored here, not member profile data. On success, it returns the new moderator assignment details.","description":"Creates a new moderator assignment in the `discussionboard_moderators` table. The request must provide the target member's unique ID and optional metadata. Only admins may call this endpoint. The operation checks for assignment eligibility, prevents duplicate assignments, and records the assignment grant timestamp. On success, the new moderator record is returned for display or continued application flow. Error handling must address conflicts and permission violations.","summary":"Assign moderator role to a member (discussionboard_moderators table).","parameters":[],"requestBody":{"description":"Moderator assignment creation information: target member ID.","typeName":"IDiscussionboardModerator.ICreate"},"responseBody":{"description":"Moderator assignment record created.","typeName":"IDiscussionboardModerator"},"authorizationRoles":["admin"],"path":"/discussionboard/moderators","method":"post"},{"specification":"Updates the moderator assignment for a specific moderator (by unique ID). Associated with `discussionboard_moderators`, this endpoint is used for revoking or changing the moderator status (e.g., update timestamps, note revocation, etc). Only admins have access. Business logic includes permission enforcement, updating audit trail, and maintaining 3NF by only modifying normalized moderator fields.","description":"Allows admin users to update assignment status, revoke the moderator role, or edit moderator comment/metadata for audit in the `discussionboard_moderators` table. The request requires the moderator ID, the intended updated fields, and will record changes in assignment history for regulatory or compliance visibility. Changes are reflected in the returned moderator record. Errors include missing record or permission errors.","summary":"Update a moderator assignment (discussionboard_moderators table).","parameters":[{"name":"id","description":"Unique ID of moderator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment update fields (status, revocation, notes, etc).","typeName":"IDiscussionboardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment record.","typeName":"IDiscussionboardModerator"},"authorizationRoles":["admin"],"path":"/discussionboard/moderators/{id}","method":"put"},{"specification":"Removes a moderator assignment, revoking moderator privileges from the target user. This links to the `discussionboard_moderators` table and is only accessible to admins. Removes the normalized assignment record and triggers deletion (or soft-deletion for audit) for the moderator role. 3NF is maintained as only the mapping/assignment is deleted, not the user or related artifacts. Permissions, referential integrity, and audit logging are enforced.","description":"Deletes a moderator assignment from the `discussionboard_moderators` table, revoking moderator privileges of the targeted member. Admins only. This operation removes the assignment by ID and records the event for audit trail and compliance. All moderator-permission APIs must be immediately revoked for the affected user. Error responses include not found, unauthorized, or integrity constraint violations.","summary":"Delete (revoke) a moderator assignment (discussionboard_moderators table).","parameters":[{"name":"id","description":"ID of moderator assignment to delete/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderators/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of discussion board members. Maps to `discussionboard_members` table. Incorporates advanced search, sorting, and filter criteria in the request body (such as username, registration date, status). Supports role-based restrictions (e.g., only admins/moderators can see deactivated/banned users). Returns paginated member summary data objects compliant with 3NF, never denormalized. Used for admin user management panels and member search features.","description":"Returns a paginated, filtered set of member summary records from `discussionboard_members` that match search criteria (such as username query, created_at range, activation status). Supports sort and page controls. Used for admin moderation and user directory queries. May include active/deactivated status, registration date, and search highlights. Permission checks determine if restricted users are included in the result set. Errors include permission or bad search parameter syntax.","summary":"List/search members with advanced filters (discussionboard_members).","parameters":[],"requestBody":{"description":"Advanced search and pagination controls for member listing.","typeName":"IDiscussionboardMember.IRequest"},"responseBody":{"description":"Paginated member summary results.","typeName":"IPageIDiscussionboardMemberSummary"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/members","method":"patch"},{"specification":"Retrieve all detailed member data for a specific member by ID. Associated with `discussionboard_members` table. Used for member profile management, audits, or advanced admin workflows. Enforces RBAC: only the member, moderator, or admin can access details. Returns all direct member fields as per 3NF, without joined/denormalized data from related tables (profile, emails, sessions are obtained separately).","description":"Gets all normalized fields for a single member from `discussionboard_members` identified by ID. The data includes username, registration/activation/deactivation timestamps, and membership status. This supports profile self-service and admin/member directory use cases. Permissions restrict to the user or authorized staff. Detailed error reporting provides not found, forbidden, or compliance error signals.","summary":"Get one member's full account detail (discussionboard_members).","parameters":[{"name":"id","description":"ID of member to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member account data.","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/members/{id}","method":"get"},{"specification":"Creates a new member account (registration). Writes to `discussionboard_members` table. Handles user sign-up scenarios including collection of username and hashed password (see requirements analysis for verification and onboarding flows). Does not create profile, email, or session entries (handled via separate APIs). 3NF is enforced by capturing only direct member data. Returns full new member record on success. RBAC/settings may restrict who can register new members.","description":"Registers a new discussion board member by writing a record to `discussionboard_members`. The request contains registration fields (username, password hash, timestamp). Profile, verification, and sessions are managed through other APIs. This endpoint validates uniqueness (username) and data format. On success, returns the full normalized member object. Errors include duplicate username, invalid data, and system restrictions.","summary":"Register (create) a new member (discussionboard_members table).","parameters":[],"requestBody":{"description":"Member registration details (username, password hash, timestamp).","typeName":"IDiscussionboardMember.ICreate"},"responseBody":{"description":"Newly created member object.","typeName":"IDiscussionboardMember"},"authorizationRoles":null,"path":"/discussionboard/members","method":"post"},{"specification":"Updates the member account fields for a specific member. Writes to `discussionboard_members` by ID. Covers updates to core member data (not profile or emails, which are separate endpoints). RBAC: only the member or admin/moderator can update. 3NF maintained. Returns updated member record on success, with full field-level audit. Supports account changes, activation/deactivation, and admin/member initiated modification flows.","description":"Allows a member (or admin/moderator) to update normalized fields in their account record in `discussionboard_members`. Only core ID fields are allowed (other components - profile, sessions, email - have dedicated APIs). The request may update username, password (re-hash), or status fields. Uniqueness and permission checks apply. Successful calls return the updated account object; errors detail format, conflict, or unauthorized access.","summary":"Update member account details (discussionboard_members table).","parameters":[{"name":"id","description":"ID of member account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in member account. Only normalized member table fields permitted.","typeName":"IDiscussionboardMember.IUpdate"},"responseBody":{"description":"Updated member account (direct fields only).","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/members/{id}","method":"put"},{"specification":"Deletes or deactivates a member account by ID. Maps to `discussionboard_members` table. Typically a soft delete for compliance/log audit reasons. RBAC enforced: only admins can delete members, and typically not themselves. Application must ensure removal cascades to sessions, subscriptions, but maintains audit logs as required. Returns no body on success, errors on forbidden or not found.","description":"Deletes (or deactivates per business logic) the target member's account in `discussionboard_members`. Cascades user session termination, board subscription removal, but preserves audit trail for member actions. Only available to admins. This supports compliance with user removal flows, retention policies, and RBAC enforcement. On success, no content is returned. Errors are returned for forbidden, not found, or failed cascade events.","summary":"Delete/deactivate a member account (discussionboard_members table).","parameters":[{"name":"id","description":"ID of member account to delete/deactivate.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/members/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of discussion board guest sessions, fulfilling analytics and onboarding tracking requirements. Maps to `discussionboard_guests` table. Allows filtering by token, session start, and supports pagination and advanced analytics for platform analysis. Only accessible to admins for auditing/marketing.","description":"Returns paginated, filtered record set for guest user sessions from `discussionboard_guests` according to query/pagination controls supplied in request body. Returns summary guest session objects (session token, ID, created_at). Used for marketing analytics, guest-to-member conversion tracking, and admin oversight. Business logic restricts viewing to admins.","summary":"List/search guest sessions (discussionboard_guests table).","parameters":[],"requestBody":{"description":"Advanced search and pagination controls for guest session listing.","typeName":"IDiscussionboardGuest.IRequest"},"responseBody":{"description":"Paginated guest session summaries.","typeName":"IPageIDiscussionboardGuestSummary"},"authorizationRoles":["admin"],"path":"/discussionboard/guests","method":"patch"},{"specification":"Retrieves details for a specific guest session by ID. Directly connected to the `discussionboard_guests` table. Used in session analytics, guest conversion, and admin auditing. Enforces RBAC: only admins may retrieve guest session details. Returns only normalized provided fields for the guest session. Used in session management analytics and guest tracking.","description":"Fetches normalized details for a guest session in `discussionboard_guests` identified by the session's unique ID. Data includes session token and timestamp. Used to monitor guest usage patterns and for compliance analytics. Permission errors are returned if unauthorized or not found.","summary":"Get one guest session detail (discussionboard_guests table).","parameters":[{"name":"id","description":"ID of guest session to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Normalized guest session object.","typeName":"IDiscussionboardGuest"},"authorizationRoles":["admin"],"path":"/discussionboard/guests/{id}","method":"get"},{"specification":"Creates a new guest session record, fulfilling guest user onboarding requirements. Maps to the `discussionboard_guests` table. Used to track anonymous sessions for analytics, session management, and up-selling conversion. The request body contains the information about the guest session (token, creation timestamp). Only available to onboarding service or non-auth guests.","description":"Registers a new guest session in `discussionboard_guests`. Request must include valid session token and creation timestamp. Used to track anonymous visitors on the discussion board, supporting conversion and analytics. On success, returns full, normalized, created guest session details. Error handling covers invalid tokens or data.","summary":"Register (create) new guest session (discussionboard_guests table).","parameters":[],"requestBody":{"description":"Guest session object creation details (token, created_at).","typeName":"IDiscussionboardGuest.ICreate"},"responseBody":{"description":"Created guest session object.","typeName":"IDiscussionboardGuest"},"authorizationRoles":null,"path":"/discussionboard/guests","method":"post"},{"specification":"This operation updates the details of a specific guest session record in the discussion board platform. It targets the 'discussionboard_guests' table, which logs guest user sessions for analytics and restrictions. The API allows for the management or alteration of guest session information such as session tokens, creation timestamps, or for linking guests to member records if relevant. Use cases include enforcing guest session expiry, analytics updates, or administrative adjustments. The endpoint is intended for admin or system actions, not general public use.","description":"This API call updates a specific guest session record in the 'discussionboard_guests' table by its unique ID. The endpoint is primarily for administrative or backend use, as guest sessions are typically managed automatically.\n\nGuest session management is essential for accurate tracking and compliance with platform security standards. The record includes data such as session tokens and creation timestamps. It helps manage guest-to-member upgrade flows and identifies when a guest browses the platform. This endpoint may be involved during guest-to-member conversion (e.g., upon registration) or when cleaning up expired guest sessions.\n\nValidation ensures the ID is a valid UUID and that only fields permissible for update are altered. Attempting to update a guest that does not exist or where the session is already expired should return an appropriate error. Proper logging and permission checks are required, and only authorized staff or automated processes should be allowed to access this endpoint.","summary":"Updates a guest session record by ID in the discussionboard_guests table.","parameters":[{"name":"id","description":"Target guest's unique session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the guest session. Only fields such as session_token or session expiry are typically altered.","typeName":"IDiscussionboardGuest.IUpdate"},"responseBody":{"description":"The updated guest session record.","typeName":"IDiscussionboardGuest"},"authorizationRoles":["admin"],"path":"/discussionboard/guests/{id}","method":"put"},{"specification":"This operation deletes a specific guest session record from the 'discussionboard_guests' table using its unique ID. It supports administrative actions such as cleaning up expired sessions, enforcing privacy regulations, or disabling guest tracking as required. Only authorized personnel or backend services should execute this. The operation impacts analytics and security tracking.","description":"This API call removes a guest session record based on its ID in the 'discussionboard_guests' table, fulfilling the need for session cleanup and compliance with data retention policies.\n\nDeleting a guest session is typically reserved for administrative scenarios, such as purging old sessions, GDPR compliance, or as part of a guest-to-member lifecycle management. The call ensures the specified session exists and is eligible for deletion; attempts to delete non-existent or active sessions must be handled gracefully. Only users with elevated privileges (administrators or automated system services) are allowed to perform this operation, and action logs must be maintained for audit and traceability.","summary":"Deletes a guest session record by ID from the discussionboard_guests table.","parameters":[{"name":"id","description":"Target guest's unique session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful guest session deletion.","typeName":"IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/guests/{id}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of user profiles from 'discussionboard_user_profiles'. Used for admin/member searches, filtering by display name or attributes. Supports role-based access - member listing own, admin finding any profile.","description":"This PATCH endpoint fetches a list of user profiles with support for pagination, filtering, and search—implementing requirements for discoverability and profile management. The endpoint operates on the 'discussionboard_user_profiles' table, which separates users’ extended details from core member records.\n\nAdmins and moderators may search all user profiles by display name, registration date, or other metadata. Members may only search or list their own profile. The endpoint handles access control and ensures only allowed data is returned respecting privacy and user permissions. Relevant validations include authorized query parameters, page size limits, and security audits for bulk access.","summary":"Retrieves a filtered or paginated list of user profiles from 'discussionboard_user_profiles'.","parameters":[],"requestBody":{"description":"Filtering, pagination, and search criteria for user profiles.","typeName":"IPageDiscussionboardUserProfile.IRequest"},"responseBody":{"description":"Paginated list of user profiles.","typeName":"IPageDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles","method":"patch"},{"specification":"Retrieves public or private details of a specific user profile, such as display name, bio, avatar, etc. Implements user journey requirements and privacy controls, operates on 'discussionboard_user_profiles'. Access may be restricted depending on the querying member’s role.","description":"This GET endpoint returns the details for the specified user profile by profile ID, addressing the need for user customization and discoverability. The operation pulls from 'discussionboard_user_profiles', returning bio, display name, avatar, and timestamps.\n\nAdmins can query any user profile for moderation or support; members and guests may only access profiles that are public or belong to themselves, depending on platform privacy settings.\n\nProper access control ensures privacy restrictions are upheld according to platform policies and user preferences. Error handling detects invalid or unauthorized access, nonexistent profile IDs, and logs all access for audit/security purposes.","summary":"Gets details of a user profile by ID from 'discussionboard_user_profiles'.","parameters":[{"name":"id","description":"User profile's unique ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Fetched user profile details.","typeName":"IDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles/{id}","method":"get"},{"specification":"Creates a new user profile record in 'discussionboard_user_profiles'. This enables members to customize their visibility with display names, bios, or avatars. Typically used at initial member registration or during onboarding.","description":"This POST endpoint allows the creation of a new user profile, writing to 'discussionboard_user_profiles'. Members can set optional display names, biographical text, and avatars distinct from their registration username, allowing more expressive social presence.\n\nPlatform rules constrain profile creation: each member may have only one profile. Fields are validated for appropriate length, allowed image formats, etc. Admins and moderators may create profiles for onboarding or support flows. Sensitive actions are logged for security, and attempts to create multiple profiles for the same member are rejected.\n\nProfile creation is required during self-registration but may also be performed by administrators for automation or account recovery.","summary":"Creates a new user profile record in 'discussionboard_user_profiles'.","parameters":[],"requestBody":{"description":"Data for creating a user profile (display name, bio, avatar URI, etc.).","typeName":"IDiscussionboardUserProfile.ICreate"},"responseBody":{"description":"The new user profile record created.","typeName":"IDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles","method":"post"},{"specification":"Updates details for a specific user profile in 'discussionboard_user_profiles', such as changing display name, bio, or avatar. Supports user self-customization and admin moderation functionality.","description":"This PUT endpoint updates a user profile by its ID, writing changes to 'discussionboard_user_profiles'. Members may edit their own profile; admins and moderators may change any profile for moderation/support.\n\nRequires authorization and validation to ensure only permitted fields are modified and members cannot edit others’ profiles unless privileged. Fields such as display name, bio, and avatar_uri are accepted. Platform limits and business rules regarding unique display names, allowed content, and privacy are enforced. Proper audit trail maintained for all changes.","summary":"Updates a user profile by ID in 'discussionboard_user_profiles'.","parameters":[{"name":"id","description":"Unique ID of the user profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user profile.","typeName":"IDiscussionboardUserProfile.IUpdate"},"responseBody":{"description":"Updated user profile details.","typeName":"IDiscussionboardUserProfile"},"authorizationRoles":null,"path":"/discussionboard/userProfiles/{id}","method":"put"},{"specification":"Deletes a user profile from 'discussionboard_user_profiles' by profile ID. Implements moderation and account termination requirements, ensuring profile information is removed or anonymized upon request or policy.","description":"This DELETE endpoint removes a user profile by its ID, affecting the 'discussionboard_user_profiles' table. The primary use-case is member-requested profile deletion (account closure) or as a moderation penalty.\n\nAppropriate access control ensures only profile owners or platform administrators (for moderation/compliance) can perform deletions. The cascade/cleanup of profile-associated data and implications for privacy policies are managed transparently. Soft-deletion, anonymization, or hard-deletion strategies will be used based on platform rules and compliance needs. Success is reported with confirmation.","summary":"Deletes a user profile by ID from 'discussionboard_user_profiles'.","parameters":[{"name":"id","description":"Unique ID of the user profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of user profile deletion.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/userProfiles/{id}","method":"delete"},{"specification":"Returns a filtered, paginated list of user emails from 'discussionboard_user_emails'. Enables admins to review, search, or audit registered emails or for members to view their email records. Filtering may include verification status, member ID, or date added.","description":"This PATCH endpoint queries user emails in the 'discussionboard_user_emails' table with support for advanced search and pagination, supporting platform requirements for user management and compliance.\n\nAdmins use this for email management, audit, notification targeting, or communication compliance. Filtering by member ID, verification status, email string, or add date is supported. Members may only fetch their own records. Protects sensitive data by limiting exposures and requires strict role-based access and property selection based on privacy policies.","summary":"Retrieves a paginated or filtered list of user emails from 'discussionboard_user_emails'.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination options for listing user emails.","typeName":"IPageDiscussionboardUserEmail.IRequest"},"responseBody":{"description":"Paginated user email list.","typeName":"IPageDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails","method":"patch"},{"specification":"Fetches the details of a specific email record in 'discussionboard_user_emails', such as for audit, verification, or user notification management. Includes privacy and access enforcement.","description":"This GET endpoint retrieves a user email record by its unique ID from 'discussionboard_user_emails'. Use-cases include email verification status checks, audit traces, or support for notification delivery troubleshooting. Only admins or the email owner may access sensitive information; access checks are mandatory.\n\nResponse includes email address, verification flags, association with user account, timestamps for when added and (if applicable) verified. Errors for access denial or record not found are handled according to platform security policies and audit is maintained for all such queries.","summary":"Gets details of a user email record by ID from 'discussionboard_user_emails'.","parameters":[{"name":"id","description":"Unique ID of the email record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The user email record details.","typeName":"IDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails/{id}","method":"get"},{"specification":"Creates a new user email record for a member in 'discussionboard_user_emails', as used in registration, verification, or for adding recovery/notification contacts. Supports single or multiple emails per account (per policy).","description":"This POST endpoint creates a user email record in 'discussionboard_user_emails', fulfilling registration, notification, or secondary contact addition requirements.\n\nMembers may register multiple emails for account recovery and communication flexibility, subject to a maximum (enforced by extra validation). Email format validation, uniqueness, and anti-abuse checks are implemented. After creation, the verification workflow typically starts. Platform also supports admins adding or correcting user emails as required for account recovery or audit. Attempting to add a duplicate or malformed email should fail with clear validation errors.","summary":"Creates a user email record for a member in 'discussionboard_user_emails'.","parameters":[],"requestBody":{"description":"User email data (email string, member reference, is_primary/verified flags).","typeName":"IDiscussionboardUserEmail.ICreate"},"responseBody":{"description":"The created user email record.","typeName":"IDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails","method":"post"},{"specification":"Updates a user email record by ID in 'discussionboard_user_emails'. Enables changing verification status or updating associated metadata per policy, for audit, notification or admin support.","description":"This PUT endpoint updates a user email record by ID, typically modifying verification, primary state, or email string correction (when allowed). It serves both self-service (changing contact) and admin-driven update scenarios.\n\nProper validation and access control are required, including constraint checks on duplicates, allowed updates, and ownership. Actions are logged for audit. Unverified emails may be corrected; verified emails may require stricter update policies per platform rules. Failure for ownership or validation triggers error responses.","summary":"Updates a user email record by ID in 'discussionboard_user_emails'.","parameters":[{"name":"id","description":"Unique ID of the user email record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user email record.","typeName":"IDiscussionboardUserEmail.IUpdate"},"responseBody":{"description":"Updated email record details.","typeName":"IDiscussionboardUserEmail"},"authorizationRoles":null,"path":"/discussionboard/userEmails/{id}","method":"put"},{"specification":"Deletes a user email record by ID from 'discussionboard_user_emails'. Used for removing contact information, complying with user privacy requests, or admin-driven cleanup during account deactivation.","description":"This DELETE endpoint deletes a user email record from 'discussionboard_user_emails' by its unique ID. The operation is needed for account privacy management, email rotation, or regulatory compliance.\n\nThe member or platform admin may request deletion. Rules ensuring at least one verified contact remains may apply. Deletion is logged with action metadata. Soft or hard deletion behavior is determined by platform policy; confirmation or error upon completion is always returned.","summary":"Deletes a user email record by ID from 'discussionboard_user_emails'.","parameters":[{"name":"id","description":"Unique ID of the email record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of user email record deletion.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/userEmails/{id}","method":"delete"},{"specification":"Lists and searches external authentication associations for users. This endpoint allows for retrieval of multiple userAuths records based on complex criteria. Supports searching by user, provider, and date ranges. Implements RBAC restrictions for access based on user context. Prisma DB table: discussionboard_user_auths.","description":"The PATCH /discussionboard/userAuths endpoint enables advanced searching and listing of external authentication (federated login, SSO) records linked to member accounts. It supports searching on user ID, auth provider, and various date/time filters, with pagination and sorting options for administrative or user audit views. Security is enforced via RBAC: members may only query their own auth records; admins may query any. The endpoint is essential for security audits, SSO account management, and user profile integration. Error handling includes permission denials for unauthorized access and detailed validation of search parameters. This endpoint is logically paired with create, update, and delete operations for full CRUD coverage of discussionboard_user_auths records.","summary":"Lists and searches userAuths (discussionboard_user_auths table) records using filters with pagination.","parameters":[],"requestBody":{"description":"Filter, search, and pagination input for querying userAuths.","typeName":"IDiscussionboardUserAuth.IRequest"},"responseBody":{"description":"Paginated userAuths search results.","typeName":"IPageIDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths","method":"patch"},{"specification":"Gets a single user external authentication (SSO, OAuth) record by its unique ID. Used across login flows and for account linking/unlinking. Prisma DB: discussionboard_user_auths.","description":"The GET /discussionboard/userAuths/{id} endpoint retrieves detailed information about a particular external authentication association for a user. It is typically used to review SSO/OAuth connection details or when automating account linking/unlinking procedures. Security enforcement ensures that only the authenticated user or trusted admin/moderator may retrieve details. Returns full details per the discussionboard_user_auths schema. Relevant validation errors include not found and unauthorized access. Often used in conjunction with create, update, or delete userAuth operations for federation management.","summary":"Retrieves a single userAuths (discussionboard_user_auths table) by ID.","parameters":[{"name":"id","description":"Target userAuth record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed userAuth record info.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths/{id}","method":"get"},{"specification":"Creates a new external authentication (SSO, OAuth, etc) record for a member account. Used during federated login linking or new account creation. Prisma DB: discussionboard_user_auths.","description":"The POST /discussionboard/userAuths endpoint is called when a member account wishes to link a new external authentication (such as Google, Facebook, or SSO). It securely creates a new record relating the member and external provider, requiring all relevant provider identification details and adhering to RBAC (member may only link to own account). This endpoint strictly validates uniqueness and required fields (e.g., provider, provider_user_id). Error responses cover duplicate prevention and invalid provider scenarios. Successful execution results in the new userAuth record for the member. Closely related to unlink and list endpoints for account federation management.","summary":"Creates a new userAuth (discussionboard_user_auths table) record.","parameters":[],"requestBody":{"description":"Creation information for new userAuth.","typeName":"IDiscussionboardUserAuth.ICreate"},"responseBody":{"description":"Created userAuth record.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths","method":"post"},{"specification":"Updates an existing external authentication association (SSO/OAuth record) for a user. Supports fields such as revocation. Prisma DB: discussionboard_user_auths.","description":"The PUT /discussionboard/userAuths/{id} endpoint allows for updating information associated with a federated login (external auth) record for a member account. Common use cases include revoking a linked external login, updating linked provider metadata, or syncing provider identity details. Enforces ownership and admin RBAC, requiring full update body as per discussionboard_user_auths schema. Validates ID and input; handles not found and unauthorized scenarios. Typically paired with list, create, and delete endpoints in auth management flows.","summary":"Updates an existing userAuths (discussionboard_user_auths table) record by ID.","parameters":[{"name":"id","description":"Target userAuth record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for userAuth record.","typeName":"IDiscussionboardUserAuth.IUpdate"},"responseBody":{"description":"Updated userAuth record.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths/{id}","method":"put"},{"specification":"Deletes (revokes/unlinks) an external authentication (SSO, OAuth, etc) for a given user. Used for un-linking federated logins. Prisma DB: discussionboard_user_auths.","description":"The DELETE /discussionboard/userAuths/{id} endpoint unlinks or permanently removes an external authentication provider association from a member account. Enforces permissions such that only the owner member or privileged admin can perform the operation. Returns information about the deleted userAuth record, or an error if the record doesn’t exist or permission is denied. Used in account management and security workflows. Often paired with creation and listing endpoints for account federation tasks.","summary":"Deletes/unlinks a userAuths (discussionboard_user_auths table) record by ID.","parameters":[{"name":"id","description":"Target userAuth record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted userAuth record info.","typeName":"IDiscussionboardUserAuth"},"authorizationRoles":null,"path":"/discussionboard/userAuths/{id}","method":"delete"},{"specification":"Lists and searches login sessions for members. Enables access review and session management. Prisma DB: discussionboard_user_sessions.","description":"The PATCH /discussionboard/userSessions endpoint allows members and admins to search, list, and audit active and historical login sessions. Provides robust filtering options such as user ID, session creation, last activity, and revoked status. Enforces RBAC: normal members can only list their own sessions, admins can audit all. Used for session management/security functions and audit trails, in conjunction with create/revoke endpoints.","summary":"Lists and searches userSessions (discussionboard_user_sessions table) records with pagination/filtering.","parameters":[],"requestBody":{"description":"Request body containing filters and search parameters for session querying.","typeName":"IDiscussionboardUserSession.IRequest"},"responseBody":{"description":"Paginated userSessions results.","typeName":"IPageIDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions","method":"patch"},{"specification":"Retrieves the details of a login session for a member. Used by session managers and security routines. Prisma DB: discussionboard_user_sessions.","description":"The GET /discussionboard/userSessions/{id} endpoint retrieves information about a single session record, including timestamps, token, and revocation status. RBAC is strictly enforced to allow only owners or admins to retrieve sessions. Used for client device lists, logout management, or security monitoring. Returns the complete session object as per schema or error if not found/authorized.","summary":"Retrieves a single userSession (discussionboard_user_sessions table) by ID.","parameters":[{"name":"id","description":"Session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed userSession info.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions/{id}","method":"get"},{"specification":"Creates a new login session record. Used on successful authentication. Prisma DB: discussionboard_user_sessions.","description":"The POST /discussionboard/userSessions endpoint registers a new session for a user, upon successful authentication (login). It securely links the new session to the user ID, creates session credentials (token), timestamps, and expiry attributes. RBAC/validation ensure only sessions for authenticated users can be created. Returns the created session info, or validation error for incorrect/duplicate details. This operation is foundational for login systems and session management flows.","summary":"Creates a new userSession (discussionboard_user_sessions table) record.","parameters":[],"requestBody":{"description":"Session creation info upon login.","typeName":"IDiscussionboardUserSession.ICreate"},"responseBody":{"description":"Created session record.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions","method":"post"},{"specification":"Updates an existing session record (e.g., extend expiry, revoke). Used by session management logic. Prisma DB: discussionboard_user_sessions.","description":"The PUT /discussionboard/userSessions/{id} endpoint allows updating properties of a login session—most commonly, expiring/revoking tokens, updating expiry times, or altering session metadata. Only session owners or admins may update sessions. Ensures input data follows request schema and session ownership. Returns the updated session state or error. Typically part of login/logout and device/session control workflows.","summary":"Updates an existing userSession (discussionboard_user_sessions table) by ID.","parameters":[{"name":"id","description":"Session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update on the session record.","typeName":"IDiscussionboardUserSession.IUpdate"},"responseBody":{"description":"Updated session record.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions/{id}","method":"put"},{"specification":"Deletes/revokes a session entry (force logout, end session). Used by security and member logout flows. Prisma DB: discussionboard_user_sessions.","description":"The DELETE /discussionboard/userSessions/{id} endpoint terminates an active login session, typically used for forced logouts or security policy enforcement. RBAC ensures only the session owner or privileged admin can delete a session. The session record is deleted or flagged as revoked, and info about the terminated session is returned. Used in conjunction with create/list endpoints for full session lifecycle management.","summary":"Deletes (ends) a userSession (discussionboard_user_sessions table) by ID.","parameters":[{"name":"id","description":"Session record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted session record info.","typeName":"IDiscussionboardUserSession"},"authorizationRoles":null,"path":"/discussionboard/userSessions/{id}","method":"delete"},{"specification":"Lists and searches discussion board posts with advanced filters, pagination, and sorting (by board, author, date, etc). Prisma DB: discussionboard_posts.","description":"The PATCH /discussionboard/posts endpoint retrieves a list of discussion board posts with support for advanced filtering (by board, author, keyword, date range), full pagination, and flexible sorting. It is optimized for UI post feeds and admin moderation panels. Security and RBAC allow public post listing for all users, while detailed controls may restrict hidden/archived content. Validation ensures robust filtering and prevents resource exhaustion on large queries. Closely related to create, update, delete, and detail post endpoints for comprehensive board functionality.","summary":"Lists and searches posts (discussionboard_posts table) records with filtering and paging.","parameters":[],"requestBody":{"description":"Filtering and search request body for posts listing.","typeName":"IDiscussionboardPost.IRequest"},"responseBody":{"description":"Paginated list of post objects and associated paging info.","typeName":"IPageIDiscussionboardPost"},"authorizationRoles":null,"path":"/discussionboard/posts","method":"patch"},{"specification":"Retrieves a single post, including full content and associated metadata. Used for post view, detail page rendering. Prisma DB: discussionboard_posts.","description":"The GET /discussionboard/posts/{id} endpoint fetches all information for a single post, including title, body, author, timestamps, and potentially related engagement metrics (likes, views). Access is granted for public posts, or via RBAC for private/archived posts. Ensures not found and permission errors are handled according to content policy. Tightly coupled to comment retrieval, edit history, and moderation endpoints for holistic post management.","summary":"Retrieves a single post (discussionboard_posts table) by ID.","parameters":[{"name":"id","description":"Post record UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post object and metadata.","typeName":"IDiscussionboardPost"},"authorizationRoles":null,"path":"/discussionboard/posts/{id}","method":"get"},{"specification":"Create a new discussion board post. Maps to the discussionboard_posts table. Required fields: board_id (the board under which the post appears), author_id (user creating the post), title, body. Must enforce RBAC: only authenticated members (and above) may post. Timestamp fields (created_at, updated_at) are set automatically and should not be set by API caller. Returns the full post record upon creation.","description":"This endpoint allows a registered member to create a new post in a specified board. The post is associated with a board (by board_id) and the authoring user (by author_id), and must include a title and body. Permissions checks ensure that only logged-in members, moderators, or admins can create posts. The API will record creation and modification timestamps, and may apply business rules such as profanity filtering and content policy checks before saving. The response includes the created post details. Related: Users may later edit or delete their posts via separate endpoints; moderation tools may restrict or remove posts post-creation.","summary":"Create a new post in discussionboard_posts.","parameters":[],"requestBody":{"description":"Data for creating a new post.","typeName":"IDiscussionboardPost.ICreate"},"responseBody":{"description":"The created post record.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/posts","method":"post"},{"specification":"Update details of a single post by its unique id in discussionboard_posts. Allows editing title and body, tracks editor (author or elevated role). RBAC: members can edit their posts, moderators/admins any. This corresponds to in-place updating; all previous versions are recorded in post_edits table for audit.","description":"This API allows a member (owner), moderator, or admin to update an existing post. The endpoint enforces RBAC: members can only edit their own posts while moderators/admins can edit any. All edit actions are tracked in the discussionboard_post_edits table for auditability. Business rules such as moderation policies, profanity checks, and content policies may be applied before updating. If the post is soft-deleted, further edits may be prevented. Responds with the updated post content.","summary":"Update a specific post in discussionboard_posts by id.","parameters":[{"name":"id","description":"UUID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the post.","typeName":"IDiscussionboardPost.IUpdate"},"responseBody":{"description":"The updated post object.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/posts/{id}","method":"put"},{"specification":"Delete a post (soft-delete) from discussionboard_posts by id. Records deletion event for audit trail. Only the post owner, moderator, or admin may delete. Related comments and likes remain but may be hidden; deletion is soft (deleted_at set).","description":"This endpoint allows a member (if owner), moderator, or admin to delete (soft-delete) a post by its unique identifier. Soft deletion marks the record as deleted but retains it in the DB for auditability and potential restoration. All deletions are tracked for audit logs. RBAC enforced by checking user role and ownership. Associated comments remain, but post is not shown in default queries. Deletion may trigger notifications to post followers or prior commenters.","summary":"Soft-delete a post in discussionboard_posts by id.","parameters":[{"name":"id","description":"UUID of the post to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion, typically the deleted post object with deleted_at set.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/posts/{id}","method":"delete"},{"specification":"List post edit log entries for posts, supporting filtering (by post id, editor, edit date) and pagination. Returns paginated list of discussionboard_post_edits records. Useful for moderation and audit.","description":"Retrieve a paginated and filterable list of post edit entries from the discussionboard_post_edits table. This enables members (for their own content), and moderators/admins (for any post) to view the edit history for posts. Useful for auditing and moderation (transparency of edit trail). Query supports filters such as post_id, editor_id, edit_summary, edited_at range, and sort order. Related endpoints: detailed retrieval by edit id, create a new edit record during update, and update or remove an edit log for correction or moderation.","summary":"List/filter post edit log entries (discussionboard_post_edits).","parameters":[],"requestBody":{"description":"Search and pagination for post edit log.","typeName":"IDiscussionboardPostEdit.IRequest"},"responseBody":{"description":"Paginated list of post edit entries.","typeName":"IPageIDiscussionboardPostEdit"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postEdits","method":"patch"},{"specification":"Retrieve a single post edit entry by its unique id from discussionboard_post_edits. Used for viewing specific edit audit information.","description":"Fetch details of a specific post edit event by id. Returns full information about the edit (editor, timestamp, edit summary, etc.) for auditability. Accessible to the post author (who can view the full edit history on their content), moderators, and admins. Often linked from editing/audit UIs and moderation views. Related: Listing edit logs and creating new edit records.","summary":"Get a specific post edit entry by id (discussionboard_post_edits).","parameters":[{"name":"id","description":"UUID of the post edit entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the post edit entry.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postEdits/{id}","method":"get"},{"specification":"Create a new post edit entry (manual or in response to update) in discussionboard_post_edits. Used when tracking manual/auditor edits, corrections, or moderator/admin interventions. Timestamps and editor identity must be stored.","description":"Add a new entry recording an edit event for a post. Used for manual audit trail extension or tracking changes by moderators (not just inline via /posts update). May be used by automated workflows as well. Requires the edited post id, editor id, edit summary (optional), and edited_at timestamp. The new edit log is stored for future traceability. Related: retrieval (list/get) and update (for correction). RBAC: only members, moderators, admins permitted; all edit actions must be auditable.","summary":"Create new post edit entry (discussionboard_post_edits).","parameters":[],"requestBody":{"description":"Data for creating a post edit entry.","typeName":"IDiscussionboardPostEdit.ICreate"},"responseBody":{"description":"The created post edit record.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postEdits","method":"post"},{"specification":"Update a post edit entry (discussionboard_post_edits) by its id. Typically allows updating the edit summary or correct editor reference for audit purposes. Only moderators, admins, and (in rare cases) the original editor may update. Full traceability required.","description":"Modify an existing post edit log entry. Used for correction of edit summary/note or fixing editor attribution (with appropriate permissions). RBAC rules: only permitted for the original editor or users with elevated privileges. Editing edit logs is tightly controlled for security/audit. All changes audit-logged. Related endpoints: list, get, delete edit logs.","summary":"Update a specific post edit entry by id (discussionboard_post_edits).","parameters":[{"name":"id","description":"UUID of the post edit entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the post edit entry.","typeName":"IDiscussionboardPostEdit.IUpdate"},"responseBody":{"description":"The updated post edit entry.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/postEdits/{id}","method":"put"},{"specification":"Delete (remove from audit log) a post edit entry in discussionboard_post_edits by id. Rare, typically only for moderation correction or legal compliance. Most audit logs should remain in place. Only admins or authorized moderators may delete edit logs.","description":"This endpoint removes a post edit log entry from the audit trail. Used rarely, for correcting audit history due to legal, privacy, or moderator error. Soft/hard deletion determined by policy; RBAC strictly enforced. All deletions are themselves audit-logged. Related endpoints: get, list, update edit logs. Deletions should be traceable and reversible if required by compliance.","summary":"Delete a post edit entry by id (discussionboard_post_edits).","parameters":[{"name":"id","description":"UUID of the post edit entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and detail of deleted log entry.","typeName":"IDiscussionboardPostEdit"},"authorizationRoles":["admin"],"path":"/discussionboard/postEdits/{id}","method":"delete"},{"specification":"Retrieve a list of post like/dislike records (discussionboard_post_likes), supporting filtering (by post id, user id, etc.) and pagination. Used for analytics, engagement stats, or anti-abuse checks.","description":"Returns a paginated, optionally filtered list of post like/dislike entries. Supports filtering by post id, user id, like status, or date. Used for engagement UIs, moderation, and abuse pattern detection. Pagination supported. Related endpoints: create like/dislike, retrieve, update like/dislike, delete (by separate endpoint if required).","summary":"List/filter like/dislike entries for posts (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Search and pagination for post like entries.","typeName":"IDiscussionboardPostLike.IRequest"},"responseBody":{"description":"Paginated list of like/dislike entries.","typeName":"IPageIDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes","method":"patch"},{"specification":"Retrieve a single post like/dislike record by id from discussionboard_post_likes. Used for checking user's own reaction or for moderation purposes.","description":"Fetches the like/dislike entry for a post based on its unique id. Used by members, moderators, or admins to check if a reaction has already been made and to review its details (such as whether it is a like/dislike, who made it, and when).","summary":"Get a specific like/dislike entry by id (discussionboard_post_likes).","parameters":[{"name":"id","description":"UUID of the post like/dislike entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the like/dislike entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes/{id}","method":"get"},{"specification":"Create a new like/dislike entry for a post in discussionboard_post_likes. One per (post_id, user_id).","description":"Allows a member, moderator, or admin to register a like or dislike for a post. The API ensures only a single like/dislike per user per post (enforced in the DB). Used for social engagement, activity feeds, and abuse prevention. After creation, total reactions are recalculated by aggregates.","summary":"Create a new like/dislike entry for a post (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Data for new like/dislike entry.","typeName":"IDiscussionboardPostLike.ICreate"},"responseBody":{"description":"The created like/dislike entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes","method":"post"},{"specification":"Update an existing like/dislike entry by id in discussionboard_post_likes. Allows changing from like to dislike or vice versa, metadata, etc. Only the owner or moderators/admins can update.","description":"Updates a like/dislike record for a post. Permitted if performed by the record owner or moderator/admin. Typical use: changing a 'like' to a 'dislike' or vice versa. RBAC: owner, moderators, admins. RBAC and audit logging/traceability required for all changes.","summary":"Update a specific like/dislike entry by id (discussionboard_post_likes).","parameters":[{"name":"id","description":"UUID of the post like/dislike entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for like/dislike entry.","typeName":"IDiscussionboardPostLike.IUpdate"},"responseBody":{"description":"The updated like/dislike entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/postLikes/{id}","method":"put"},{"specification":"Implements the removal of a like/dislike entry for a discussion board post by its unique identifier. This operation is used by members and moderators to revoke their reaction to a post. The operation enforces permissions so only the user who originally set the like/dislike or an admin/moderator with appropriate authority may remove it. A successful call deletes the corresponding record from the 'discussionboard_post_likes' table. If the entry does not exist, a 404 should be returned. Follows 3NF, does not affect aggregated counts directly (those are handled elsewhere).","description":"Deletes a like or dislike associated with a post from the 'discussionboard_post_likes' schema. \n\nThe endpoint requires the like/dislike's unique ID as a path parameter and will verify whether the current user has permission to delete the record (either as the original creator or with elevated administrative rights). Only existing post-like records may be deleted; deleting a non-existent ID returns a 404 Not Found.\n\nThis implements the feature where users can retract a like/dislike, as well as allowing moderators/admins to clear reactions as part of user moderation or abuse mitigation. The operation does not recalculate aggregate like/dislike counts immediately but triggers downstream updates by event. Audit trails are automatically created via separate logging.\n\nError handling will return 403 Forbidden if a user without correct permissions attempts deletion, and 422 if provided ID is not a valid UUID.\n\nSee also: POST for like/dislike creation, PATCH for like/dislike search/filtering.\n","summary":"Remove a like/dislike for a post (discussionboard_post_likes) by ID.","parameters":[{"name":"id","description":"Unique identifier of the like/dislike entry to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/postLikes/{id}","method":"delete"},{"specification":"Fetches a paginated and optionally filtered list of post view records from the 'discussionboard_post_views' table. Used by admins and analysts to audit or analyze post viewership and engagement. Supports searching by post, user, session, or viewed_at window. Typically restricted to admin-level or analytics endpoints due to sensitive user/session data.","description":"Queries the discussionboard_post_views entities, returning a paginated list with filter and search capabilities. \n\nAccepted filters may include post_id, user_id (optionally null for guests), session_id, and viewed_at datetime window. Supports search, sort, and pagination to allow detailed audit and reporting scenarios. The endpoint is used in analytics dashboards, administrative monitoring, or to trace suspicious access patterns by IP/session.\n\nPermission is typically restricted to admin-level users due to privacy concerns, and care must be taken to ensure search results do not leak personally identifiable information (PII) to unauthorized users. Returns paginated result structure defined in IPageDiscussionboardPostViews.","summary":"List/query post view audit records (discussionboard_post_views) with search/pagination.","parameters":[],"requestBody":{"description":"Optional filters and pagination information for querying post views.","typeName":"IDiscussionboardPostViews.IRequest"},"responseBody":{"description":"Paginated list of post view audit entries.","typeName":"IPageDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews","method":"patch"},{"specification":"Retrieves a specific post view audit record from the 'discussionboard_post_views' table by its unique ID. Used for detailed examination of a single view event, often as part of an admin audit or analytics workflow. Permission is typically limited to admins or analysts.","description":"Fetches a single discussionboard_post_views entity by its primary key. \n\nThe endpoint supports viewing all details tracked in the audit record, including post_id, user_id (if authenticated), session_id (if applicable), and viewed_at datetime. Used for incident investigation, traffic tracing, or compliance audit review.\n\nPermissioned for use by administrators and trusted analytics roles only, since it may expose sensitive information about platform usage patterns.","summary":"Get audit details of a specific post view event (discussionboard_post_views) by ID.","parameters":[{"name":"id","description":"Primary key of the discussionboard_post_views record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of a single post view audit event.","typeName":"IDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews/{id}","method":"get"},{"specification":"Adds a new post view event into the 'discussionboard_post_views' audit table. This occurs upon user or guest viewing a post, and records atomic view with optionally provided user_id (authenticated), session_id (for guests/analytics), and timestamp. Used for traffic, analytics, and anti-abuse measures. Does not update aggregated post view counters directly.","description":"Creates a new record in the discussionboard_post_views table when a post is viewed. \n\nRequest body must include the required fields (post_id, viewer identifier(s), viewed_at time). Authenticated user_id is provided when a member is logged in; session_id is used for guest views or deeper analytics instrumentation. The endpoint only records individual view events and does not aggregate data at insert time.\n\nThis operation supports audit and platform analytics features, and forms the basis for detailed engagement reporting.","summary":"Record a new post view event (discussionboard_post_views).","parameters":[],"requestBody":{"description":"Atomic view event info for the new record.","typeName":"IDiscussionboardPostViews.ICreate"},"responseBody":{"description":"The created post view record.","typeName":"IDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews","method":"post"},{"specification":"Updates details of a specific post view event in the 'discussionboard_post_views' table by its unique ID. Used for correcting or annotating analytic records post-hoc, typically an admin/analyst-only function. General users do not have permission to update audit logs.","description":"Updates a post view record by unique identifier, permitting correction of analytic data (such as view attribution or session fixups). \n\nPrimarily intended for administrative or analytic troubleshooting; not generally exposed to end users. Request body specifies the updatable fields, following the canonical post view record schema. Any change is itself auditable and should trigger entry into platform action logs for compliance.","summary":"Update a specific post view audit record by ID (discussionboard_post_views).","parameters":[{"name":"id","description":"Unique identifier of the post view record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post view record.","typeName":"IDiscussionboardPostViews.IUpdate"},"responseBody":{"description":"Updated post view record.","typeName":"IDiscussionboardPostViews"},"authorizationRoles":null,"path":"/discussionboard/postViews/{id}","method":"put"},{"specification":"Deletes a post view audit record from the 'discussionboard_post_views' table by its unique ID. Used for data correction or removal of erroneously tracked analytics events. Requires admin/analyst-level permissions due to audit impact. Operation is fully traceable in audit logs for compliance.","description":"Removes a single discussionboard_post_views audit entry by primary key.\n\nThe operation supports GDPR/right-to-be-forgotten or incident-driven cleanup scenarios. Only users with elevated permissions may perform deletions to avoid accidental or malicious tampering with system audit data. Returns 204 No Content on success; 404 if record does not exist.","summary":"Remove a post view audit record by ID (discussionboard_post_views).","parameters":[{"name":"id","description":"The unique ID of the post view entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/postViews/{id}","method":"delete"},{"specification":"Lists or searches comments for posts in the discussion board. Filters by post_id, author_id, or parent_id (for threaded replies), fully supports paginated responses and sort options. Implements primary comment browsing interface for members and guests, referenced in post detail views and discussion pages.","description":"Returns a paginated, optionally filtered list of comments (discussionboard_comments), supporting searches by post_id (all comments for a post), parent_id (for nesting/replies), or author_id (for user histories).\n\nThis endpoint is used for both main-thread comment listings in post detail pages, and for reply chains in discussion UX. Pagination and robust filtering ensure scalability, and results are sorted ascending/descending by created_at per client request. Returns summary data for each comment, excluding soft-deleted ones unless user is admin/moderator.","summary":"List/search comments with filtering by post/parent/author (discussionboard_comments).","parameters":[],"requestBody":{"description":"Comment query filters and pagination info.","typeName":"IDiscussionboardComments.IRequest"},"responseBody":{"description":"Paginated comment list result matching filters.","typeName":"IPageDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments","method":"patch"},{"specification":"Fetches a single comment record from the 'discussionboard_comments' entity by its unique identifier. Used for post details, reply chains, and moderation, providing full comment metadata including author, nesting relation, timestamps, and body. Permissioned for members, guests, moderators, and admins.","description":"Retrieves the details of a single comment by ID from discussionboard_comments. \n\nUsed in comment thread navigation, moderation detail dialogs, and post detail pages. Provides all atomic comment data (including parent reference for reply threads), as well as author and created_at/updated_at fields.\n\nDoes not return soft-deleted comments unless access is admin or moderator. Includes related metadata for full transparency in moderation views.","summary":"Get details of a comment by its ID (discussionboard_comments).","parameters":[{"name":"id","description":"Unique identifier for the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data for the requested comment, including threaded reply fields.","typeName":"IDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments/{id}","method":"get"},{"specification":"Creates a new comment or reply under a post. Accepts body, post_id, author_id, and optional parent_id for reply threading. Enforces permission on author (must be authenticated member/mod/admin), validation on content (no profanity per content policy), and relates the new comment in the thread. Triggers notification and audit subsystems post-insert.","description":"Accepts a new comment (root or reply) for a post. \n\nReceives minimal body including comment content, target post, and author details, plus optional parent_id to form a threaded reply. Content is automatically profanity-checked and spam-filtered per active policies. The operation triggers notification(s) to participants (authors, mentions) and logs the event for moderation purposes.\n\nErrors returned for invalid/abusive content, or non-existent posts/parent comments. Follows notification, logging, and audit requirements described in the requirements analysis.","summary":"Create a new comment or threaded reply for a post (discussionboard_comments).","parameters":[],"requestBody":{"description":"Comment creation information (body, post, author, parent/reply reference).","typeName":"IDiscussionboardComments.ICreate"},"responseBody":{"description":"Created comment data including parent/query info.","typeName":"IDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments","method":"post"},{"specification":"Updates a comment or reply under a post by ID. Accepts partial updates to editable fields (body, updated_at, possibly parent_id for moving thread), and enforces that only the original author or an admin/moderator can perform updates. All edits are tracked in the discussionboard_comment_edits table for audit/log compliance.","description":"Partially or fully updates a comment by ID. \n\nRestrictions: Only editable fields are allowed (body change, updated_at, moving replies), and original author or site staff must be the acting user. All changes are logged to the comment edit log for compliance and transparency. Profanity and spam filters are run on new body text prior to accepting changes.\n\nUsed both for regular user comment editing and for moderator/admin content corrections. Returns updated comment record with all metadata. Error if not found or unauthorized.","summary":"Update an existing comment (or reply) by ID (discussionboard_comments).","parameters":[{"name":"id","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the comment to update.","typeName":"IDiscussionboardComments.IUpdate"},"responseBody":{"description":"Updated comment record.","typeName":"IDiscussionboardComments"},"authorizationRoles":null,"path":"/discussionboard/comments/{id}","method":"put"},{"specification":"Deletes a comment by its unique ID, supporting both soft and hard deletes per application policy. Only the comment's author or an admin/moderator may delete. Soft-deletes are preferred (flag deleted_at) but hard remove supported for irreversible moderation/compliance cases. Triggers notification and moderation/audit logging subsystems.","description":"Removes a comment or reply from discussionboard_comments by unique identifier.\n\nThe operation first attempts a soft delete (setting deleted_at) for general cases, unless hard deletion is requested/allowed per moderation policy. Users may only delete their own comments unless elevated permissions; audit logs are updated for every delete, with moderation reason for non-self-removal. Notifies affected users and updates affected threads/aggregation if necessary.","summary":"Delete (soft or hard) a comment or reply by ID (discussionboard_comments).","parameters":[{"name":"id","description":"Unique identifier of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/comments/{id}","method":"delete"},{"specification":"Lists or searches comment likes/dislikes by various filters (comment_id, user_id, is_like, created_at window). Primarily used by admins to audit reaction distribution, by users to see their reactions, and by analytics/dashboard features. Supports pagination, search, and secure access control.","description":"Returns a paginated list of discussionboard_comment_likes entries, supporting searching/filtering by comment, user, like/dislike state, and date window (created_at). Results support analytics dashboards, profile like-history, moderation review of suspect users, and abuse pattern recognition. \n\nMembers can query their own likes/dislikes, admins/mods can access broader data. Enforces pagination and privacy safeguards appropriate to the querying user role. Returns paginated result structure defined by IPageDiscussionboardCommentLikes.","summary":"List/search likes/dislikes on comments (discussionboard_comment_likes) with filters/pagination.","parameters":[],"requestBody":{"description":"Search criteria and pagination info for comment like records.","typeName":"IDiscussionboardCommentLikes.IRequest"},"responseBody":{"description":"Paginated query result for comment likes/dislikes.","typeName":"IPageDiscussionboardCommentLikes"},"authorizationRoles":null,"path":"/discussionboard/commentLikes","method":"patch"},{"specification":"Get a single comment like/dislike by its unique identifier. This operation fetches full information for a specific like or dislike event by id. The entity is based on the discussionboard_comment_likes table in the Prisma schema, which stores every like or dislike event for a comment, keyed by a UUID. This is useful for getting a user's reaction to a particular comment, analytics, or for moderation reviews.\n\nSecurity and authorization: Access control rules should be enforced based on role (e.g., only the acting user/admin/moderator can view details of a reaction in certain moderation contexts). Tied to logging requirements for audit trails in moderation.\n\nThe related table (discussionboard_comment_likes) is fully normalized for auditing and anti-abuse checks. This endpoint is essential for inspecting the like/dislike state, user, and timestamp for analytics, abuse detection, or moderation review. If the like/dislike identified by {id} does not exist, returns 404. Errors are returned in standard API error format.","description":"Get a single comment like/dislike by its unique ID. This endpoint directly leverages the discussionboard_comment_likes table, which applies to individual user reactions (like/dislike) to comments. Only atomic per-event data is stored; no aggregated or calculated fields are included. Access is typically restricted to the user performing the like or platform moderators/admins in audit/abuse review scenarios. Returns all attributes of the comment like/dislike event, including the type (like/dislike), timestamp, and user identifiers. Associated for audit and reporting in moderation workflows. Related APIs: POST, PUT, DELETE for comment like/dislike management.","summary":"Get a comment like/dislike event by its ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Target comment like/dislike's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the comment like/dislike event for given id.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/commentLikes/{id}","method":"get"},{"specification":"Create a like or dislike for a comment. This operation records an engagement event (like or dislike) by a user on a specific comment, by inserting a row into the discussionboard_comment_likes table. It is based on the requirements for engagement analytics, abuse prevention, and audit logging. Each like/dislike is atomic; only one like/dislike per user per comment is allowed (enforced by unique key). \n\nSecurity and validation: Must check authentication, ensure user is allowed to react to the comment, and enforce anti-abuse (rate limiting, duplicate detection). On success, returns the newly created reaction event. On conflict (attempt to react multiple times), returns standard error. Write events may be logged for moderation/audit, in alignment with audit/trail requirements. Related to like/dislike aggregate recalculation routines.","description":"Create a new like or dislike event associated with a comment. Uses the discussionboard_comment_likes table to ensure normalized event capture for engagement analytics and anti-abuse. Must validate the user has permission and hasn't already reacted to the target comment. Typical errors: duplicate entry, unauthorized, comment not found. Auditable; logged for abuse review. Returns the created entity including event id, type, user, and timestamp.","summary":"Create a like/dislike for a comment (discussionboard_comment_likes).","parameters":[],"requestBody":{"description":"Data for creating comment like/dislike (user, comment id, is_like).","typeName":"IDiscussionboardCommentLike.ICreate"},"responseBody":{"description":"Created comment like/dislike event info.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/commentLikes","method":"post"},{"specification":"Update an existing like/dislike event for a comment by event id. This allows correcting or toggling a reaction (e.g., turning a like into a dislike) by updating the discussionboard_comment_likes record. Based on the auditability and engagement analytics needs: sometimes, users may be able to change their reaction, or admins/moderators update a reaction for abuse review/resolution. \n\nSecurity: Only the owner (reacting user) or privileged roles (mod/admin) can update. Must audit all changes in logs. Fails with 404 if id not found; errors for forbidden operations are returned.\n\nBusiness logic: Only is_like can typically be changed. All updates logged for compliance.","description":"Update an existing comment like/dislike event. Reflection of changes (e.g., toggling like/dislike or updating by admin) is stored in the discussionboard_comment_likes table. Only atomic (per-event) data is modified. Access is typically restricted to original user, mods, or admins for compliance/audit. Event is logged. Access and error handling follow platform RBAC policies.","summary":"Update a comment like/dislike event by id (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Target comment like/dislike's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for comment like/dislike event (only permitted fields modifiable).","typeName":"IDiscussionboardCommentLike.IUpdate"},"responseBody":{"description":"Updated comment like/dislike event record.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/commentLikes/{id}","method":"put"},{"specification":"Delete a like or dislike event for a comment by its unique identifier. This operation allows a user (or an admin/moderator) to remove an existing like/dislike for a specific comment, deleting the record in the discussionboard_comment_likes table.\n\nBusiness logic: A user can only have one reaction per comment; deleting means they neither like nor dislike it. Action is also available to moderators/admins for abuse mitigation. Deletions are logged for audit purposes; may affect aggregate tallies. Fails with 404 if record doesn't exist. Returns success confirmation or error.","description":"Remove a comment like/dislike event. Deletion is performed on the discussionboard_comment_likes table, which maintains normalized engagement data for analytics, abuse, and moderation. All delete events are logged for auditing and compliance. Only the owner or platform staff can perform the operation. Related operations: POST (create), GET (fetch), PUT (update).","summary":"Delete a comment like/dislike event by id (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Target comment like/dislike's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion for comment like/dislike event.","typeName":"IDiscussionboardCommentLike.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/commentLikes/{id}","method":"delete"},{"specification":"List and search through comment edit events. Supports filtering by editor, comment id, date range, and pagination. Implements the auditability and edit log requirements for comments: every time a comment is edited, an event is recorded in discussionboard_comment_edits, detailing the editor, edit summary, and timestamp. This endpoint is essential for moderation workflows, transparency, and user edit histories.\n\nBusiness logic includes permission checks (e.g., only show user's own edits unless admin/moderator). Returns paginated edit events matching filters. Related to GET/POST/PUT/DELETE endpoints for individual comment edit logs.","description":"Retrieve a paginated list of comment edit log events, using filters for editor, comment, date/time, and pagination. Information comes from discussionboard_comment_edits, which holds normalized edit trail events for each comment. Audit logs are important for moderation, transparency, and user accountability. Pagination and search parameters are required for scalability. Related endpoints: GET/PUT/POST/DELETE for individual comment edit logs.","summary":"Search and paginate comment edit log events (discussionboard_comment_edits).","parameters":[],"requestBody":{"description":"Search/filter and paging parameters for comment edits list.","typeName":"IDiscussionboardCommentEdit.IRequest"},"responseBody":{"description":"Paginated and filtered comment edit log results.","typeName":"IPageIDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits","method":"patch"},{"specification":"Get a single comment edit event by its unique identifier. This fetches the full audit trail event (who edited which comment, summary/reason, and edit time) for specific review or moderation review scenarios. Based on the requirements for transparency and full edit trails for accountability. Used in moderation UIs and when seeing comment edit history.\n\nRBAC: Only authorized users can fetch details (editor, admins/moderators).\n\nReturns 404 if not found.","description":"Retrieve a specific comment edit log event by event id. The discussionboard_comment_edits table provides full audit log for comment edits, supporting moderation, dispute resolution, and user-initiated edit history queries.","summary":"Get a comment edit event by id (discussionboard_comment_edits).","parameters":[{"name":"id","description":"Target comment edit's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment edit log event details.","typeName":"IDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits/{id}","method":"get"},{"specification":"Create a comment edit log event. Implements the auditability requirement by explicitly recording every edit to a comment, including summary, who performed the edit, and timestamp. Each row in discussionboard_comment_edits is an immutable record of that edit event. Typically triggered when a user or moderator edits a comment (not an in-place update of the comment body).\n\nSecurity: Only the editor (user/mod/admin) can create; event is added to audit logs.\n\nThis endpoint supports compliance with edit history requirements, transparency, and moderation accountability. Related endpoints are PATCH (list), GET/PUT/DELETE (individual event management).","description":"Record a comment edit event (user/mod/admin performed). This creates a new row in the discussionboard_comment_edits table, which is a normalized per-edit event log. Only legitimate edits should trigger this endpoint (application logic must ensure this). The event records the comment, who edited, timestamp, and edit reason/summary (if provided).","summary":"Create a comment edit log event (discussionboard_comment_edits).","parameters":[],"requestBody":{"description":"Data for new comment edit event (comment, editor, timestamp, etc).","typeName":"IDiscussionboardCommentEdit.ICreate"},"responseBody":{"description":"Created comment edit event log.","typeName":"IDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits","method":"post"},{"specification":"Update a comment edit log event. Rarely used; in typical audit models, edits to edit events are not allowed, but exceptions may be made for admin correction (e.g., updating a mistaken summary) or regulatory compliance. Supports changing permitted fields only (e.g., edit_summary). Based on discussionboard_comment_edits. All changes should be logged for traceability.\n\nRBAC: Only privileged users may update historical edit logs.\n\nReturns 404 if not found.","description":"Update a comment edit log event (e.g., correct summary or annotation). Modifies a record in discussionboard_comment_edits; only a restricted set of fields are modifiable. Full trace of change must be recorded in audit logs as per compliance. Not used for main comment body edits, only for log event updates.","summary":"Update a comment edit event by id (discussionboard_comment_edits).","parameters":[{"name":"id","description":"Target comment edit's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Corrections for edit log event (permitted fields only).","typeName":"IDiscussionboardCommentEdit.IUpdate"},"responseBody":{"description":"Updated comment edit event log.","typeName":"IDiscussionboardCommentEdit"},"authorizationRoles":null,"path":"/discussionboard/commentEdits/{id}","method":"put"},{"specification":"Delete a comment edit log event for rollback or audit correction. In most models, edit logs should not be deleted except in rare moderation or compliance-driven workflows (e.g., content removal for legal reasons). Business logic must restrict who can perform deletions. Deletion is tracked in moderation logs per auditing requirements. Related to discussionboard_comment_edits table.\n\nReturns success or error (e.g., not found, forbidden).","description":"Remove a comment edit event from the audit log (typically only for privileged roles in rare cases). Deletion occurs in the discussionboard_comment_edits table; all such actions must be logged for audit and compliance. Related endpoints: PATCH (list), GET/POST/PUT (event management).","summary":"Delete a comment edit event by id (discussionboard_comment_edits).","parameters":[{"name":"id","description":"Target comment edit's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of comment edit event deletion.","typeName":"IDiscussionboardCommentEdit.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/commentEdits/{id}","method":"delete"},{"specification":"List and search through comment view tracking events for analytics, anti-abuse, and audit. Important for reporting unique viewers, detecting engagement trends, and supporting rate-limit/abuse enforcement. Implements comment views analytic requirements: each time a comment is viewed, a row is recorded in discussionboard_comment_views, referencing comment, user, session, and time. This endpoint supports pagination, filtering, and search (e.g., by comment id, user id, date, etc). Result is used especially by moderation and analytics dashboards.\n\nBusiness logic requires validation and rate-limiting of access. Pagination for scalability. Related to GET/POST/PUT/DELETE endpoints for individual view records.","description":"Retrieve a paginated/searchable list of comment view tracking events through discussionboard_comment_views. Supports filtering by comment, user/session, time, and is essential for anti-abuse measures, analytics, and engagement reporting. Permission rules may limit access to owner, mod, or admin. Returns paged view events. Related endpoints: GET, POST, PUT, DELETE for individual records.","summary":"Search and paginate comment view tracking events (discussionboard_comment_views).","parameters":[],"requestBody":{"description":"Search/filter and paging parameters for comment views list.","typeName":"IDiscussionboardCommentView.IRequest"},"responseBody":{"description":"Paginated and filtered comment view tracking events.","typeName":"IPageIDiscussionboardCommentView"},"authorizationRoles":null,"path":"/discussionboard/commentViews","method":"patch"},{"specification":"Get a single comment view tracking event by its unique identifier for analytics, abuse detection, and detailed audit/workflow review. Fetches an atomic view record from discussionboard_comment_views, returning viewer, comment, session, and timestamp. Key for engagement analysis and dispute resolution.\n\nRBAC rules may control data access; expect 404 if not found or forbidden if unauthorized.\n\nLinked to analytics and analytics/detail dashboards for moderation and reporting.","description":"Get a single comment view tracking event by id from discussionboard_comment_views. All tracking information is atomic (per-viewer per-comment per-session per-timestamp), supporting compliance, analytics, and moderation. Returns view event details or error if not found.","summary":"Get a comment view tracking event by id (discussionboard_comment_views).","parameters":[{"name":"id","description":"Target comment view's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment view event tracking details.","typeName":"IDiscussionboardCommentView"},"authorizationRoles":null,"path":"/discussionboard/commentViews/{id}","method":"get"},{"specification":"Create a comment view tracking event - atomically records that a user (or guest/session) has viewed a specific comment. Engages the discussionboard_comment_views table for analytics, abuse prevention, and engagement tracking as per requirements. Payload specifies comment id, user/session, and view time. Rate limiting and permission checks should be enforced (e.g., prevent abuse/scripted traffic). Returns the atomic tracking event for confirmation. Related endpoints: PATCH (list), GET/PUT/DELETE (single-record operations); creation is idempotent per (user/session, comment, time).","description":"Create an atomic record of a comment view event for analytics and anti-abuse. Uses discussionboard_comment_views to track unique views by user/session/time, supporting dashboards and audit workflows. Payload specifies commenting context, viewer identity, and meta as needed. Permission and abuse checks required. Related to searching/listing endpoints for aggregation.","summary":"Create a comment view tracking event (discussionboard_comment_views).","parameters":[],"requestBody":{"description":"Data for creating comment view event (comment id, user id/session, timestamp).","typeName":"IDiscussionboardCommentView.ICreate"},"responseBody":{"description":"Created comment view event record.","typeName":"IDiscussionboardCommentView"},"authorizationRoles":null,"path":"/discussionboard/commentViews","method":"post"},{"specification":"Update a specific comment view record in the discussion board system. This operation targets the discussionboard_comment_views table, which logs each individual view of a comment, either from a known user or an anonymous session. The update operation is typically performed for correcting analytics, updating view state, or associating additional metadata with a specific view event for auditing or application enhancement. Only privileged system actors or administrators should use this operation; standard members typically do not update view events manually.","description":"This API endpoint updates an existing comment view record in the discussionboard_comment_views entity. The comment views table tracks unique views of comments for purposes such as analytics, engagement statistics, and policy enforcement. A comment view entry is created whenever a user (authenticated or guest via session token) reads a comment. This endpoint allows administrative updates to that record (such as correcting timestamps, updating viewer linkage on user login, or recording anomalies in audit situations).\n\nSecurity: Only accessible to system administrators or backend systems; users cannot update view records directly for anti-abuse and integrity. The endpoint requires validation that the specified ID exists and is modifiable.\n\nIt references the Prisma schema comments on how views are logged and maintained. This operation is useful for compliance corrections, session-user merges, or correcting view record integrity following audits or incident response. If the record being updated does not exist, an error is returned.\n\nRelated APIs include creating new view logs (when a comment is viewed), deletion (removing corrupt view logs), and batch analytics retrieval endpoints (not in this operation set).","summary":"Update a comment view record in discussionboard_comment_views.","parameters":[{"name":"id","description":"Unique identifier of the comment view record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update for the target comment view record.","typeName":"IDiscussionboardCommentView.IUpdate"},"responseBody":{"description":"Updated comment view record.","typeName":"IDiscussionboardCommentView"},"authorizationRoles":["admin"],"path":"/discussionboard/commentViews/{id}","method":"put"},{"specification":"Delete a specific comment view record from the discussionboard_comment_views table. The comment views table is used for engagement tracking and site analytics, as required by business and audit specifications. Deletion is a privileged operation, primarily for data correction or legal compliance, since such records underpin analytic and reporting needs.","description":"This API endpoint deletes a specific comment view record in the discussionboard_comment_views entity, as identified by the unique record ID. The comment views table contains atomically one view record per combination of comment, user/session, and view occurrence. This API supports privileged administrative deletion of a view event—such as for correcting anomalous user behavior, honoring legal removal requests, or cleaning up corrupt/incomplete data from the analytics dataset.\n\nSecurity: Accessible only to platform admins or backend services with audit logging. Normal users are not permitted to erase analytics/view events, to ensure reliable reporting and anti-abuse detection.\n\nPrior to deletion, the endpoint validates the existence of the comment view record with the given ID. If the record is not found, a suitable error is returned. This operation is accompanied by other endpoints for batch analytics retrieval and view state corrections.","summary":"Delete a comment view record from discussionboard_comment_views.","parameters":[{"name":"id","description":"Unique identifier of the comment view record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/commentViews/{id}","method":"delete"},{"specification":"Retrieve a paginated and searchable list of content reports submitted by users for moderation or audit in the discussionboard_reports table. This is central to compliance, moderation workflow, and system health monitoring. Includes status, timestamps, reporter, content type, and cross-links to related moderation actions. Implements the report-listing requirements from the moderation and compliance sections of the requirements analysis.","description":"This API endpoint lists reports submitted by users regarding posts or comments, referencing the discussionboard_reports entity. Each report includes details on the reporting user, content (post/comment), report reason, status, timestamps, and potential cross-links to resolved actions (such as moderation, warnings, or bans). Provides search and filtering on status, date, reason, reporter, and related content, allowing batch export or paginated browsing by moderators or admins. This is necessary for moderation team triage, policy enforcement, and systematic reporting on content health.\n\nSecurity: Only accessible to moderators and admins. The endpoint is protected with role-based access controls and audit logging. Query options include pagination controls, search strings, status filtering, and date range selectors.\n\nValidation: Ensures parameters are valid, returns filtered list with metadata for reporting and workflow management. Related endpoints include single report detail, report creation (by member), and related action retrievals.","summary":"List and search user content reports in discussionboard_reports.","parameters":[],"requestBody":{"description":"Search, filter, and pagination info for retrieving reports.","typeName":"IPageIDiscussionboardReport.IRequest"},"responseBody":{"description":"Paginated result of content reports in discussionboard_reports.","typeName":"IPageIDiscussionboardReport"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports","method":"patch"},{"specification":"Retrieve detailed information for a specific user-submitted content report from the discussionboard_reports table. This is a critical endpoint for moderation review, compliance checking, and report tracking workflows. Each report details the reported content, reporter, reason, and related status information.","description":"This API endpoint retrieves a detailed report entry from the discussionboard_reports entity by its unique ID. The reports table tracks flagged content submitted by users for moderator/admin attention, including target post/comment, report reason, status (pending, resolved, etc.), timestamps, reporter details, and related moderation notes. The endpoint returns all normalized details, links to related moderation actions, and status history. It is used by moderators and admins to review, track, or update flagged content throughout the moderation lifecycle.\n\nSecurity: Role-based restriction—allowed for moderators and admins only, with audit logging of access. Querying the report populates details for moderation dashboards, appeals workflows, or compliance documentation.\n\nHandles not found and reference errors, aligns with report listing/search and report action endpoints.","summary":"Get details of a content report from discussionboard_reports by ID.","parameters":[{"name":"id","description":"Unique identifier of the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed report entry from discussionboard_reports.","typeName":"IDiscussionboardReport"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports/{id}","method":"get"},{"specification":"Submit a new content report to the discussionboard_reports table. Enables members to flag inappropriate, abusive, or off-topic posts/comments for moderator review, fulfilling moderation and community health requirements.","description":"This API endpoint allows an authenticated member to report a post or comment for moderation. Submitting a report creates a new row in the discussionboard_reports entity, recording the reporting member, content link (post or comment ID), report reason (e.g., hate speech, spam), and initializes status and audit fields. Required for real-time user-driven moderation and escalations, this endpoint is the main entry for community self-moderation and flagging workflows.\n\nSecurity: Member authentication required. Restrictions prevent duplicate open reports from the same member on the same content. Related endpoints exist for report review, moderation action, and status updates.\n\nValidates request payload, links report to both the content and reporting user, and integrates with notification systems for moderator alerting. Handles content nonexistence and reference errors according to normalized schema constraints.","summary":"Create a new user content report in discussionboard_reports.","parameters":[],"requestBody":{"description":"Report creation parameters (target content, reason, etc).","typeName":"IDiscussionboardReport.ICreate"},"responseBody":{"description":"The newly created content report entry.","typeName":"IDiscussionboardReport"},"authorizationRoles":["member"],"path":"/discussionboard/reports","method":"post"},{"specification":"Update/resolve a specific user content report in the discussionboard_reports table. Used for processing moderation outcomes, updating statuses/notes, or implementing appeals workflows. Authorized for moderators and admins only.","description":"This API endpoint updates a content report in the discussionboard_reports entity by its unique ID. Typical uses include moderation responses such as resolving, rejecting, or adding moderation notes/comments to a submitted report following review. The operation integrates with action/audit logs and status management features, as required for full compliance and workflow handling. Only accessible to moderators or admins, with all operations logged for audit compliance.\n\nRequest must specify updated fields, such as status (e.g., resolved, rejected), moderation notes, or associated moderation actions. All updates validate referential integrity; errors are returned if the report is not found or is already finalized/locked. Related endpoints include single report retrieval, moderation action APIs, and batch listing/search endpoints.","summary":"Update or resolve a user content report in discussionboard_reports.","parameters":[{"name":"id","description":"Unique identifier of the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the selected content report (e.g., status, notes).","typeName":"IDiscussionboardReport.IUpdate"},"responseBody":{"description":"Updated report entry in discussionboard_reports.","typeName":"IDiscussionboardReport"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports/{id}","method":"put"},{"specification":"Delete a specific content report from discussionboard_reports, supporting moderation correction, legal compliance, or data retention workflows. Only privileged actors may access this endpoint to ensure moderation integrity and auditability.","description":"This API endpoint deletes (removes) a report from the discussionboard_reports entity based on its unique ID. Content reports are created any time a member flags a post or comment. Deletion is permitted only for system admins or moderators, supporting legal removal, retention policy cleanup, or administrative corrections. The endpoint checks for existence before deletion and ensures all related moderation records are handled according to compliance policy.\n\nSecurity: Accessible only to privileged roles (admin/moderator), cannot be called by the original reporting member. All deletion/correction actions are logged for compliance, and errors are returned for constraint violations or non-existent IDs. Related endpoints enable creation, update, and retrieval for moderation workflows.","summary":"Delete a content report from discussionboard_reports.","parameters":[{"name":"id","description":"Unique identifier of the content report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"path":"/discussionboard/reports/{id}","method":"delete"},{"specification":"Retrieve a paginated, filterable list of moderation actions from the discussionboard_moderation_actions table. Enables comprehensive review of historical and current actions taken by moderators/admins for compliance, transparency, and reporting.","description":"This API endpoint retrieves a batch list of moderation actions taken on the platform, referencing the discussionboard_moderation_actions entity. Each action entry includes details about the actor (admin, moderator, member), related reports or content, action type, rationale, and event timestamps. Critical for moderation dashboards, compliance audits, incident investigations, and analytics reporting.\n\nSupports search, filter, and pagination by actor, action type, date, and affected content. Usage is restricted to authorized roles (admin/moderator), with all accesses logged for compliance. Returns paginated results and supports workflow integration with report, ban, warning and audit logs. Validation ensures filter criteria are syntactically and semantically valid.","summary":"List and search moderation actions in discussionboard_moderation_actions.","parameters":[],"requestBody":{"description":"Search and filter criteria for moderation actions listing.","typeName":"IPageIDiscussionboardModerationAction.IRequest"},"responseBody":{"description":"Paginated result of moderation actions.","typeName":"IPageIDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions","method":"patch"},{"specification":"Retrieve details of a specific moderation action from the discussionboard_moderation_actions table, supporting transparency, auditing, or dispute resolution.","description":"This API endpoint fetches details of a particular moderation action in the discussionboard_moderation_actions entity by ID. Actions may include post removals, user bans, warnings, status updates, and so on—all tracked for platform compliance and user-appealable transparency. Returns all normalized fields including actor information, related report or content, type and reason of action, and timestamps. Used in moderation dashboards, audit trails, reports, and appeals interfaces.\n\nAccess is restricted to admins/moderators. Audit logs are updated with every access to this endpoint. Handles not-found and permission errors according to compliance requirements. Related endpoints include batch action listing, creation, and update.","summary":"Get moderation action details from discussionboard_moderation_actions by ID.","parameters":[{"name":"id","description":"Unique identifier of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation action entry.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions/{id}","method":"get"},{"specification":"Create a new moderation action entry in the discussionboard_moderation_actions table. Used by admins and moderators to log interventions or resolutions during moderation and audit workflows.","description":"This API endpoint allows platform admins or moderators to log a new moderation action within discussionboard_moderation_actions. Each action includes details on the acting user/role (admin/mod/member), the related report or affected content, action type (e.g., 'warn', 'ban', 'delete content'), rationale, and event timestamp. Used to formally record workflow steps in moderation dashboards, support adherence to compliance, and power audit reporting.\n\nValidates payload structure, role permissions, and referential integrity with content and actor information. Usage is restricted to authorized roles, all activity is logged, and related APIs permit further audit, review, and management of user-generated actions.","summary":"Create a new moderation action in discussionboard_moderation_actions.","parameters":[],"requestBody":{"description":"Details for the new moderation action (actor, target, type, reason, etc).","typeName":"IDiscussionboardModerationAction.ICreate"},"responseBody":{"description":"The newly created moderation action entry.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions","method":"post"},{"specification":"Update a specific moderation action in the discussionboard_moderation_actions table to correct, supplement, or annotate moderation record history. Only for admin/moderator use, enforced via RBAC and audit logging.","description":"This API endpoint updates an existing moderation action by ID in the discussionboard_moderation_actions entity. Permits updates to action reason, notes, or certain allowed fields for record correction or transparency improvements. Only privileged staff may use this endpoint; role and audit controls apply. The endpoint checks the record exists, validates update fields, and ensures referential and workflow integrity. Linked to audit log for immutable trace of changes.\n\nRelated operations include action creation, retrieval, and listing endpoints. Use this endpoint for tracking policy changes, addenda, or resolution corrections to past moderation activities.","summary":"Update a moderation action in discussionboard_moderation_actions by ID.","parameters":[{"name":"id","description":"Unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the moderation action record.","typeName":"IDiscussionboardModerationAction.IUpdate"},"responseBody":{"description":"Updated moderation action entry.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/moderationActions/{id}","method":"put"},{"specification":"Delete a specific moderation action record from the discussionboard_moderation_actions table. Used for administrative corrections or compliance with legal retention requirements. Highly restricted.","description":"This API endpoint deletes a moderation action record in the discussionboard_moderation_actions entity, by unique ID. Removal of moderation records is rare and only permitted for administrators, such as in case of erroneous logging, sensitive data leakage, or legal obligation to redact moderation history. The operation requires record existence and will update audit logs with detailed reason for deletion/correction. Deletions are logged for compliance tracking, and will cascade/warn on related downstream references depending on database settings.\n\nAccess is role-protected (admin only, typically with internal escalation procedures) and all actions are audited. Related endpoints manage action creation, inspection, and updates. Not available to standard users or moderators without additional privilege.","summary":"Delete a moderation action in discussionboard_moderation_actions.","parameters":[{"name":"id","description":"Unique identifier of the moderation action to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderationActions/{id}","method":"delete"},{"specification":"Implements paginated list retrieval for bans imposed on admins, moderators, or members in the discussion board system. Supports searching, filtering, paging, and sorting by ban status, target, actor, and timespan. Related to the 'discussionboard_bans' table, which stores user bans as described in the Prisma schema and requirements. Exposes auditability and allows RBAC enforcement based on user role. Used by admin/moderator dashboards to monitor bans, discover recent suspensions, or review punishment history.","description":"This API operation provides a paginated and filterable list of all user bans within the discussion board. As described in the Prisma schema for \"discussionboard_bans,\" each ban record captures the target (admin, moderator, or member), actor (admin or moderator), ban reason, period, status, audit timestamps, and relationships to involved users. \n\nThe endpoint enables authorized administrators and moderators to search bans by status (active, expired, lifted), target type (role), ban reason, or time frame. It supports compliance audits and allows investigation of enforcement trends by surfacing date ranges or actors who issued bans. \n\nFilters should be applied server-side to honor performance and data privacy requirements. Sorting can be applied by start/end dates or creation time to track the most recent actions. RBAC checks must restrict access to appropriate roles (e.g., only moderators and admins may use this API). \n\nThis is a critical operation for moderation dashboards, daily reports, and incident investigations. Provides server-side pagination and can accept search keywords. \n\nReturned data references only normalized ban data, never exposing denormalized user content. Enforcement of data privacy for user IDs and ban details must be handled per organizational policies.","summary":"List and search bans from the discussionboard_bans table with pagination and filters.","parameters":[],"requestBody":{"description":"Search and filter criteria for ban list retrieval, including paging, filtering, and sorting.","typeName":"IDiscussionboardBan.IRequest"},"responseBody":{"description":"Paginated data and ban records matching the query criteria.","typeName":"IPageIDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans","method":"patch"},{"specification":"Retrieve a single ban record by its unique identifier (UUID). This operation exposes detailed data for the specified ban as stored in the 'discussionboard_bans' table, including target user, actor, reason, period, status, and audit history. Only accessible to admins and moderators. Used for detailed moderation review or ban status updates.","description":"Fetch the details of a specific ban using its unique UUID. The 'discussionboard_bans' schema entry links each ban to a specific admin, moderator, or member as the target and tracks ban metadata, including actor, rationale, time range, status, and timestamps. All relations and cross-entity references (e.g., actor/target role resolution) are normalized and must not expose sensitive data beyond what is authorized.\n\nInput validation must ensure the ID is a valid UUID, and access controls are enforced by role. Returned data delivers all ban detail fields and related IDs but requires the client to resolve user role mapping. Used in moderation review modals, ban status checks, and compliance audits.\n\nErrors are returned for invalid ID or if the ban does not exist. Only those with appropriate permissions may access detailed ban records.","summary":"Get detailed information for a single ban from discussionboard_bans by its ID.","parameters":[{"name":"id","description":"Target ban's ID (UUID) to retrieve details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed ban record for the specified UUID.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans/{id}","method":"get"},{"specification":"Create a new user ban (admin/moderator/member) in the discussion board system. This endpoint accepts a payload defining the ban's target, actor, reason, start/end date, and initial status. Relates to the 'discussionboard_bans' table and fulfills moderation workflow and compliance requirements. Available to admins and moderators only.","description":"This endpoint allows creation of a new ban record as defined in the 'discussionboard_bans' model. The request body must specify the user role/type being banned (admin, moderator, or member), the actor (admin/moderator) imposing the ban, the reason, time period (start/end datetimes), and status (active, scheduled, etc). Upon successful creation, the server returns the complete ban record with all generated fields (including UUID, creation time, etc).\n\nOnly administrators and moderators may invoke this endpoint, with all input validated for references and compliance with business rules. Cross-role relationships and foreign keys are checked to ensure the correct target/actor mappings.\n\nOn error (e.g., attempt to double-ban, self-ban, invalid actors), validation errors or forbidden status is returned. The ban is auditable and triggers moderation logs.","summary":"Create a new ban for a user (admin, moderator, or member) in discussionboard_bans.","parameters":[],"requestBody":{"description":"Ban creation request, specifying target, actor, reason, duration, and initial status.","typeName":"IDiscussionboardBan.ICreate"},"responseBody":{"description":"The created ban record with all associated fields.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans","method":"post"},{"specification":"Update an existing ban record by its UUID in the discussionboard_bans table. Used to change ban status, edit time period, or revise reason/actor for active or scheduled bans. Supports moderation workflows requiring retroactive clean-up or escalation. Only accessible to admins and moderators.","description":"This API operation updates an existing ban record as defined in the Prisma 'discussionboard_bans' schema. Input body specifies the changes to be made, referencing status, time range, reason, or actor. The endpoint enforces all business constraints, handles RBAC, and checks for valid actor/target linkages. If the ban is not active, error responses may be returned for forbidden modifications.\n\nBan records serve compliance, audit, and progressive moderation policies. Modifications are audit-logged, and change history may be made available to compliance officers or technical admins. Ban status transitions must follow business logic, and status field accepts controlled enum values: active, expired, lifted, scheduled, etc.\n\nErrors returned for missing ID, permission issues, or invalid update values. Only admins and moderators may use this operation.","summary":"Update details of an existing ban by ID in discussionboard_bans.","parameters":[{"name":"id","description":"Target ban's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the specified ban, including fields to change.","typeName":"IDiscussionboardBan.IUpdate"},"responseBody":{"description":"Updated ban record reflecting all changes.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans/{id}","method":"put"},{"specification":"Delete a ban record by its UUID from the discussionboard_bans table. Used by moderation tools to revoke, remove, or purge historic bans. Only for admin/moderator usage. This operation is auditable and reversible only by further endpoint logic.","description":"Deletes the specified ban record in the Prisma 'discussionboard_bans' table, identified by its UUID. This action removes the ban entirely from active records; application logic should provide checks to prevent invalid deletions (such as for active/pending bans still in force).\n\nOnly administrative and moderation accounts can perform this action. Input validation ensures the ID exists, otherwise a not found error is returned. The deletion is audit-logged for compliance tracking.\n\nMay return forbidden for attempts to delete bans without sufficient permissions or for attempting to delete non-removable bans (such as those under legal review). Used by admin panels and audit clean-up utilities.","summary":"Delete a ban by its ID from discussionboard_bans.","parameters":[{"name":"id","description":"Target ban's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (may be empty body or deletion status).","typeName":"IDiscussionboardBan.IDeleteResponse"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/bans/{id}","method":"delete"},{"specification":"List and search warnings issued to users (admins, moderators, or members) with pagination and filters. Implements reporting and investigation for warning policies/discipline, and relates to the Prisma 'discussionboard_warnings' table. Exposes audit, follow-up, and trends for progressive moderation enforcement.","description":"This operation provides a paginated, searchable listing of all warnings given to users (across admin, moderator, and member populations). As per the 'discussionboard_warnings' schema, each warning is linked to a specific target, actor, infraction reason, and event time. Lists may be filtered or sorted by date, target, actor, or reason.\n\nSupports compliance, follow-up action, and moderation policy review by surfacing patterns (e.g., repeated warnings, warning-to-ban escalations). Data privacy and RBAC must permit only authorized users (moderators and admins) to access this information. Responses include paginated results and summary stats for reporting dashboards.","summary":"List and search warnings from the discussionboard_warnings table with pagination and filters.","parameters":[],"requestBody":{"description":"Criteria for filtering and retrieving warnings, includes paging and sorting fields.","typeName":"IDiscussionboardWarning.IRequest"},"responseBody":{"description":"Paginated warning records and relevant summary information.","typeName":"IPageIDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings","method":"patch"},{"specification":"Retrieve a single warning record by its UUID from the 'discussionboard_warnings' table. Used for detailed incident review by moderators and admins, or for display in user infraction history views.","description":"Fetch the details of a specific warning using its UUID, returning all normalized fields per the 'discussionboard_warnings' Prisma schema. Each warning is issued to a specific user (admin, moderator, or member), references the actor who imposed it, infraction details, and mapping to any related report. Only moderators and admins, or the warned user (with restrictions), may access this endpoint.\n\nInput is validated for existence and RBAC/role permissions. Returns all warning details and references to linked moderation actions if applicable. Used by moderation review screens, audit trails, and warning escalation checks.","summary":"Get detailed information for a single warning from discussionboard_warnings by its ID.","parameters":[{"name":"id","description":"Target warning's ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Warning record for the specified ID.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings/{id}","method":"get"},{"specification":"Create a new warning (for admin, moderator, or member) in the discussion board. Accepts payload specifying target, actor, reason, and linked report if present. Relates to moderation workflow and discipline review as represented by the 'discussionboard_warnings' table.","description":"This operation enables an authorized moderator or admin to issue a warning to a platform user. The payload, validated to the 'IDiscussionboardWarning.ICreate' schema, defines the role/type of the user being warned, the actor, report linkage, and infraction reason. All references must be valid.\n\nCreated warnings are tracked in the system for progressive discipline policies and are displayed in moderation screens. Unique constraints and escalation flows are handled by application logic. May trigger notification to the warned user.\n\nReturns the new warning object reflecting all generated and supplied fields. Errors for invalid input or relationship failures (e.g., attempt to self-warn or warn a non-existent user).","summary":"Create a new warning for a user (admin, moderator, or member) in discussionboard_warnings.","parameters":[],"requestBody":{"description":"Warning creation data including target, actor, reason, and optional report linkage.","typeName":"IDiscussionboardWarning.ICreate"},"responseBody":{"description":"Created warning record with all normalized data.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings","method":"post"},{"specification":"Update an existing warning record by its UUID, modifying reason, actor, or report linkage as allowed by moderation policy. Used in follow-up reviews or incident investigations. Only permitted for moderator/admin access. Relates to 'discussionboard_warnings' table.","description":"This endpoint updates an existing warning, by UUID, as modeled in the 'discussionboard_warnings' Prisma table. The request may revise infraction reason, change metadata, or reassociate actors or report references. RBAC is strictly enforced. Updated warnings are audit-logged, and relationship consistency is required.\n\nThe operation is used in moderation follow-up reports, warning history corrections, and disciplinary escalation. Input must validate all relationships, enforce unique/one-at-a-time warnings per user/report, and reject unauthorized updates. Returns the full updated record.\n\nErrors for not found, RBAC violation, or failed reference validation. All update events are tracked for audit purposes.","summary":"Update details for an existing warning by ID in discussionboard_warnings.","parameters":[{"name":"id","description":"UUID of the warning record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and data to update on the target warning record.","typeName":"IDiscussionboardWarning.IUpdate"},"responseBody":{"description":"Updated warning with current field values after modification.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings/{id}","method":"put"},{"specification":"Delete a warning record by UUID from the 'discussionboard_warnings' table. Used by moderation tools to clean up, revoke, or reverse infraction actions. Only permitted to authorized roles, with full audit logging.","description":"Deletes a specified warning record using its unique identifier. The record, defined in the Prisma 'discussionboard_warnings' schema, references the user warned, the actor, potential related reports, and all discipline data. Input validation checks UUID existence and integrity.\n\nOnly moderators and admins with appropriate RBAC may call this operation. Data is removed from the active warning set, but audit logs/scarcity traces remain per compliance. Applied mainly in moderation UIs, review panels, and incident post-mortem workflows.\n\nErrors are returned if the warning is not found, or if permission constraints are violated. Audit log is created for each deletion event.","summary":"Delete a warning by its ID from discussionboard_warnings.","parameters":[{"name":"id","description":"UUID of warning to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deletion confirmation (may include status/message or empty body).","typeName":"IDiscussionboardWarning.IDeleteResponse"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/warnings/{id}","method":"delete"},{"specification":"List and paginate audit logs for moderation, role, or compliance tracking. Provides a filterable/reportable trace of moderation and discipline actions executed in the platform. Relates to the Prisma 'discussionboard_audit_logs' table, which tracks every key moderation or user access event, linking to actors, reports, and moderation actions.","description":"Fetches a paginated, filterable list of moderation and compliance audit log records as defined in the 'discussionboard_audit_logs' Prisma schema. Each log links to the acting admin/mod/member, event type, associated report or moderation action, details string, and timestamp. Used for platform audits, role reviews, and root-cause investigations. Data privacy, RBAC, and field visibility checks restrict sensitive log/event types to authorized users. \n\nSupports keyword search, type filters, and paging to allow large-scale querying. Used in compliance dashboards and incident analysis.","summary":"List/filter audit logs from discussionboard_audit_logs with pagination and search.","parameters":[],"requestBody":{"description":"Request parameters for audit log search, including filters and paging.","typeName":"IDiscussionboardAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit logs and related data.","typeName":"IPageIDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/auditLogs","method":"patch"},{"specification":"Retrieve an individual audit log entry by its UUID for incident review, compliance investigation, or platform oversight. Returns all event fields and association data per the Prisma 'discussionboard_audit_logs' table. Only accessible to authorized moderation/admin staff.","description":"Returns the full field set for a given audit log record, as normalized in the 'discussionboard_audit_logs' schema. UUID input is RBAC-checked and validated. Output includes event type, detail, actor relations, report/action relations, and full datestamps.\n\nPrimarily used for audit review, compliance panels, and in-depth incident traces. May surface actor or target relationships for context-building. Errors are returned for RBAC violation, not found, or invalid identifier.","summary":"Get details of an individual audit log by ID from discussionboard_audit_logs.","parameters":[{"name":"id","description":"UUID of the audit log record to lookup.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record detail for the specified UUID.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/auditLogs/{id}","method":"get"},{"specification":"Create a new audit log entry for significant events related to moderation, access, or system actions in the Discussion Board platform. This endpoint is primarily used to store immutable audit records for actions taken by admins, moderators, or system processes. It references the 'discussionboard_audit_logs' table, which records who performed the action, event type, detail, and contextual entity references per requirement 2.6 in moderation and compliance mandates. Only allowed for system/integration/admin operations - regular members are not permitted to arbitrarily create logs. Data must be immutable after creation (except for structured compliance adjustments) to support regulatory and incident root-cause analysis.","description":"This API operation creates a new entry in the 'discussionboard_audit_logs' table to record a system-level, moderation, or user action. Each record contains information about the actor (admin, moderator, member), the nature of the event (such as permission elevation, report status update, ban imposition), optional references to related moderation/report actions, and a detailed log of what transpired. Actions recorded include but are not limited to: moderator actions on reports, warnings, bans, permission changes, and audit-relevant configuration changes. \n\nThe audit log maintains strict 3NF normalization: all fields are atomic and must reference existing entities by foreign key where needed. Log entries are immutable, created at the moment of the event for traceability. Only platform/internal logic or admin users with explicit permission should access this endpoint.\n\nReturned values include the new audit log entry as persisted in the DB. Error states include invalid/unauthorized creation attempts, missing references, or DB constraints violations.","summary":"Create a new audit log entry in discussionboard_audit_logs table for platform accountability.","parameters":[],"requestBody":{"description":"Audit log details to create a new system or moderation action log entry.","typeName":"IDiscussionboardAuditLogs.ICreate"},"responseBody":{"description":"Full persisted audit log entry after creation.","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/auditLogs","method":"post"},{"specification":"Update an existing audit log entry in the 'discussionboard_audit_logs' table. This is only permitted for explicit compliance or regulatory reasons, not for arbitrary log edits (logs are generally immutable after creation). This endpoint allows authorized compliance administrators to fix or annotate log data for legal purposes (example: append regulatory disclosure note without changing original event detail). References the 'discussionboard_audit_logs' table and enforces strict audit trail throughout all updates. Used only in rare, controlled circumstances.","description":"This API operation updates an existing entry in 'discussionboard_audit_logs' by its unique ID. It is locked down for use exclusively by compliance owners: regular admins, moderators, and members cannot update audit logs. Allowable changes are generally restricted to annotating logs with compliance notes, not changing the recorded actor/event/core detail. Business logic must ensure immutability except for pre-approved audit/compliance fields. \n\nStrict validation and logging are required for any update attempt, and a secondary audit entry must be created for each allowed update to preserve change history. Errors are returned for unauthorized or invalid update attempts.","summary":"Update specific fields of an audit log for compliance (rare) in discussionboard_audit_logs table.","parameters":[{"name":"id","description":"Target audit log's ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this audit log entry (compliance-allowed only).","typeName":"IDiscussionboardAuditLogs.IUpdate"},"responseBody":{"description":"Updated audit log entry, reflecting compliance change.","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/auditLogs/{id}","method":"put"},{"specification":"Delete an audit log entry by ID (soft delete or compliance erase only). This is an extraordinary operation, not allowed for routine admin or moderator work, and should only occur for legal compliance (such as right-to-be-forgotten or regulatory purge events). Directly references the 'discussionboard_audit_logs' table. Deletion is soft (a flag or timestamp field is updated) to maintain audit integrity unless hard erasure is required by law.","description":"This operation marks an audit log entry as deleted or purges it for compliance purposes. Only compliance or privacy officers with explicit high-level authorization may perform this operation; logs should never be deleted by ordinary members, moderators, or standard admins. Upon deletion, the entry is either flagged as deleted (soft delete) for traceability or truly erased if required by compliance laws. Must log the deletion action in a separate, privileged audit log.\n\nAPI does not return the deleted record but may include a status confirming deletion and timestamp. Errors cover unauthorized attempts, ID not found, or integrity policy violations.","summary":"Delete (soft or compliance erase) an audit log entry from discussionboard_audit_logs by ID.","parameters":[{"name":"id","description":"Target audit log entry's ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of soft/hard deletion or compliance erase.","typeName":"IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/auditLogs/{id}","method":"delete"},{"specification":"Retrieve a paginated/filterable list of all community guideline entries in the 'discussionboard_community_guidelines' table. This endpoint is primarily used for admin audits, guideline display in settings, and moderation enforcement interfaces. Returned list supports filtering by status/keyword and is ordered as per 'order_index'. References 'discussionboard_community_guidelines', enabling management of all community guidelines for the platform.","description":"This API retrieves a paginated and optionally filtered list of all active and inactive community guideline entries stored in 'discussionboard_community_guidelines'. Returned fields include guideline ID, title, body text, display order, status (active/inactive), and audit timestamps. Filtering parameters may be supported in request body for keyword, status, or ordering, to help administrators audit and moderate policies. All records are normalized and order_index is used to display the guidelines in intended sequence.\n\nThe endpoint is used by admin panels, moderation dashboards, and user/community FAQ viewers. Error cases handle filter validation and DB access issues.","summary":"Get paginated/filterable community guideline list from discussionboard_community_guidelines.","parameters":[],"requestBody":{"description":"Optional filters and pagination for retrieving guideline list.","typeName":"IDiscussionboardCommunityGuidelines.IRequest"},"responseBody":{"description":"Paginated list of guidelines per filter params.","typeName":"IPageIDiscussionboardCommunityGuidelines"},"authorizationRoles":null,"path":"/discussionboard/communityGuidelines","method":"patch"},{"specification":"Retrieve a single community guideline entry by its unique ID from the 'discussionboard_community_guidelines' table. Used for admin guideline management, moderation policy reference, or user display of policy detail. Supports audit-compliance as required by the requirements document. Returns all fields for this guideline record.","description":"This operation returns a specific guideline's full record, given the guideline's unique database ID. The returned record includes all relevant information: ID, title, body, order index, active/inactive status, and audit fields such as created and updated timestamps. Only system admins and moderators may modify records, but this endpoint can be public if guidelines are to be displayed to end users.\n\nError conditions include not found (invalid ID), unauthorized access for private records, or DB errors.","summary":"Get a single community guideline entry from discussionboard_community_guidelines by ID.","parameters":[{"name":"id","description":"Target community guideline's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full guideline record for the given ID.","typeName":"IDiscussionboardCommunityGuidelines"},"authorizationRoles":null,"path":"/discussionboard/communityGuidelines/{id}","method":"get"},{"specification":"Create a new community guideline entry to be enforced platform-wide in 'discussionboard_community_guidelines'. This endpoint is used exclusively by admins to add or change formal community standards as described in the guidelines requirements. Result is persisted for audit/reference and appears in platform guideline listings.","description":"This API operation enables an admin to add new community guideline records to the normalized guidelines table. Input must provide at least title and full guideline body, plus display order and initial status (active). New entries are immediately available for user onboarding, FAQ, or moderation enforcement.\n\nValidation ensures uniqueness and compliance of titles/order_index, full audit fields are automatically set, and changes are logged for compliance. Any error covers duplicate titles/order index, missing fields, or policy violation attempts.","summary":"Create a new guideline record in discussionboard_community_guidelines (admin only).","parameters":[],"requestBody":{"description":"Fields for the new community guideline entry.","typeName":"IDiscussionboardCommunityGuidelines.ICreate"},"responseBody":{"description":"Full persisted guideline entry after creation.","typeName":"IDiscussionboardCommunityGuidelines"},"authorizationRoles":["admin"],"path":"/discussionboard/communityGuidelines","method":"post"},{"specification":"Update or overwrite an existing community guideline entry in 'discussionboard_community_guidelines' by unique ID. This is for guideline revisions or policy updates, not soft deletes. Used by system admins for formal content changes. Modifies title, body, order_index, or is_active status. Compliance audits are mandatory for this endpoint. All changes are tracked.","description":"This API operation updates an existing guideline record by unique ID, allowing system admins to change the policy title, full body, display order, or activation status. All fields in the existing record may be modified following validation. Each change must be audit-logged, and appropriate consistency checks enforced (e.g., unique title/order_index, non-empty required fields). \n\nError cases cover record not found, invalid data, title/order index collisions, or unauthorized update attempts. Changes are visible instantly in admin user/FAQ displays.","summary":"Update an existing guideline by ID in discussionboard_community_guidelines (admin only).","parameters":[{"name":"id","description":"Guideline record's ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated guideline fields.","typeName":"IDiscussionboardCommunityGuidelines.IUpdate"},"responseBody":{"description":"Guideline record as updated.","typeName":"IDiscussionboardCommunityGuidelines"},"authorizationRoles":["admin"],"path":"/discussionboard/communityGuidelines/{id}","method":"put"},{"specification":"Delete a community guideline entry by ID (soft delete or hard erase). Referenced from 'discussionboard_community_guidelines'. Only system admins or compliance officers are allowed to use this endpoint, and audit records must be written for each deletion. Routine admin or moderator users generally should not delete guidelines unless authorized. May be soft delete with a flag or timestamp, or fully deleted if required by policy.","description":"This operation deletes a guideline entry by unique ID from 'discussionboard_community_guidelines'. Only high-privilege admins or compliance leads may delete guidelines (soft delete strongly preferred for traceability, except for hard compliance erase scenarios). Each deletion must also trigger a new audit log entry describing the reason, time, and actor for the deletion. The endpoint returns confirmation and timestamp but not the deleted record details.\n\nErrors returned include unauthorized attempt, guideline not found, or integrity policy violation (e.g., trying to delete guideline in use by another component).","summary":"Delete a community guideline entry by ID from discussionboard_community_guidelines.","parameters":[{"name":"id","description":"ID of the guideline to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of guideline deletion (soft/hard) with time.","typeName":"IDeleteResult"},"authorizationRoles":["admin"],"path":"/discussionboard/communityGuidelines/{id}","method":"delete"},{"specification":"Retrieve a paginated/filterable list of all content policy records in 'discussionboard_content_policies'. Used for policy review, moderation configuration, onboarding, and admin audits. Supports keyword/status/category filtering. Returns normalized record data for all platform content policies in the current version.","description":"This endpoint retrieves a paginated/filtered list of content policies, including active/inactive (by is_active flag), policy_code, description, and category fields. Policy admins and moderation UIs use this endpoint to review policies, edit enforcement, and maintain up-to-date documentation. Filtering and pagination may use request body parameters for keyword search, active status, category, or order.\n\nErrors include validation of filters, access control checks, and DB issues. Output includes relevant pagination metadata per platform's list formats.","summary":"Get paginated/filterable content policy list from discussionboard_content_policies.","parameters":[],"requestBody":{"description":"Optional filters and pagination for policy listing.","typeName":"IDiscussionboardContentPolicies.IRequest"},"responseBody":{"description":"Paginated list of content policies per filters.","typeName":"IPageIDiscussionboardContentPolicies"},"authorizationRoles":null,"path":"/discussionboard/contentPolicies","method":"patch"},{"specification":"Retrieve a specific content policy record from 'discussionboard_content_policies' by unique ID. Used for policy configuration, onboarding, and live moderator/content violation checks. Supports public reading if needed, but only admins can modify records. Returns all record fields, normalized per schema.","description":"This API returns a single content policy by its unique database ID, reporting all fields including policy_code, description, category, is_active status, and audit timestamps (created_at, updated_at). Admins and policy managers use it to display/edit rules; users may read it for compliance info.\n\nError conditions return for not found, DB errors, or unauthorized access for restricted records.","summary":"Get a specific content policy entry by ID from discussionboard_content_policies.","parameters":[{"name":"id","description":"Target policy ID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full content policy record.","typeName":"IDiscussionboardContentPolicies"},"authorizationRoles":null,"path":"/discussionboard/contentPolicies/{id}","method":"get"},{"specification":"Create a new content policy entry in 'discussionboard_content_policies' to be enforced platform-wide. Only system admins may create policy records. Entry includes code, category, long-form description, and sets initial status (is_active). Used to document and enforce content rules described in requirements document.","description":"This operation creates a new content policy record for moderation and compliance, adding new enforced policies/platform rules. Administrative users must provide at least policy code (unique), description, category, and initial is_active flag. All changes are fully audited, and new records become available immediately for moderation/onboarding. The API replies with persisted record details, normalized.\n\nError states include invalid input, duplicate policy_code or category, and constraint violations. Audit logging is mandatory for every create action.","summary":"Create a new content policy entry as policy admin in discussionboard_content_policies.","parameters":[],"requestBody":{"description":"New content policy record fields to add.","typeName":"IDiscussionboardContentPolicies.ICreate"},"responseBody":{"description":"Full persisted policy record after creation.","typeName":"IDiscussionboardContentPolicies"},"authorizationRoles":["admin"],"path":"/discussionboard/contentPolicies","method":"post"},{"specification":"Update an existing content policy entry in 'discussionboard_content_policies' by unique ID. Allows admins to edit policy_code, description, category, or is_active fields as necessary for policy evolution/compliance. Full audit log required for all changes. Used to revise content moderation rules or respond to regulatory changes.","description":"This endpoint updates an existing content policy record by unique ID, changing any of the permitted fields as needed - mainly description, active status, code, or category. Validations enforce uniqueness and audit trail (e.g., duplicate code/category not allowed). Each update is logged for compliance with requirement 2.6. \n\nError cases include not found, input validation, or access control violations.","summary":"Update a content policy record by ID in discussionboard_content_policies (admin only).","parameters":[{"name":"id","description":"Policy ID of the content policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in content policy record.","typeName":"IDiscussionboardContentPolicies.IUpdate"},"responseBody":{"description":"Updated content policy record.","typeName":"IDiscussionboardContentPolicies"},"authorizationRoles":["admin"],"path":"/discussionboard/contentPolicies/{id}","method":"put"},{"specification":"Delete a specific content policy by its unique identifier. Associated with the discussionboard_content_policies table, this endpoint allows administrators to permanently remove a single content policy entry, such as a rule/documentation for moderation or content checking. The operation enforces referential integrity and ensures only authorized users (typically admins) can delete policies. It is critical for maintaining up-to-date policy documentation and aligning enforcement with current guidelines.","description":"This operation deletes a single content policy record from the discussionboard_content_policies table, identified by the provided policy ID. Only authorized administrators can perform this deletion, enforcing permission checks and audit trails as per system requirements. The endpoint ensures that no referential or business rule violations occur when a policy is deleted (e.g., in-use policies may be restricted or logged). Upon successful deletion, the API will return a confirmation or an empty response. Errors such as invalid ID or unauthorized access are handled per platform standards.","summary":"Delete a specific content policy from discussionboard_content_policies by ID.","parameters":[{"name":"id","description":"Target content policy's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/contentPolicies/{id}","method":"delete"},{"specification":"Retrieve a paginated, searchable, and sortable list of profanity filter entries from the discussionboard_profanity_filters table. This endpoint implements content moderation requirements, allowing admins to review, filter, and manage the list of profane words/phrases actively enforced. Supports filtering by activation status, creation/update date, and textual search. Intended for administrative moderation panels or tools.","description":"Returns a list of profanity filter entries for the discussionboard_profanity_filters table. The operation supports advanced query options such as text search, enabling review or update of filtered words by administrators. It implements pagination, keyword search, and multiple sort criteria to handle large filter lists efficiently. The endpoint enforces permission checks, so only users with adequate moderator or admin privileges can retrieve and manage the profanity filter dictionaries. Errors in query parameters or authorization are handled with transparent error responses per system policy.","summary":"List and search profanity filters in discussionboard_profanity_filters with pagination.","parameters":[],"requestBody":{"description":"Request parameters for searching, filtering, and paginating profanity filters.","typeName":"IDiscussionboardProfanityFilter.IRequest"},"responseBody":{"description":"Paginated list of profanity filter entries.","typeName":"IPageIDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters","method":"patch"},{"specification":"Retrieve a single profanity filter entry by its unique ID from the discussionboard_profanity_filters table. Implements the requirement to allow detailed inspection or display of profanity word/phrase entries for administrative moderation purposes. Supports audit, update, or review workflows.","description":"Fetches detailed information about a specific profanity filter entry by its ID. Only users with admin or moderator privileges can access the full details of filter terms. Error handling covers not found, unauthorized access, or invalid ID scenarios. The result includes all atomic details about the filter entry, such as word, activation status, and audit timestamps.","summary":"Get detailed information about a single profanity filter entry in discussionboard_profanity_filters.","parameters":[{"name":"id","description":"Target profanity filter entry's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified profanity filter entry.","typeName":"IDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters/{id}","method":"get"},{"specification":"Create a new profanity filter record in the discussionboard_profanity_filters table. This endpoint enables administrators or moderators to add new words or phrases to the profanity filter list, supporting platform content safety policies. Validation rules enforce uniqueness and ensure data integrity when onboarding new filter entries.","description":"Accepts a request body containing all data necessary to define a new profanity filter. This includes the word or phrase, activation status, and any required audit/thematic meta. On successful creation, returns the created profanity filter entry. The endpoint restricts access to roles with content moderation responsibilities. Error handling includes duplicate word protection, field validation, and unauthorized actions, following the requirements’ security model.","summary":"Create a new profanity filter entry in discussionboard_profanity_filters.","parameters":[],"requestBody":{"description":"Data required to create a new profanity filter entry.","typeName":"IDiscussionboardProfanityFilter.ICreate"},"responseBody":{"description":"Details of the newly created profanity filter entry.","typeName":"IDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters","method":"post"},{"specification":"Update an existing profanity filter entry by ID in the discussionboard_profanity_filters table. Implements the ability for admins or moderators to revise, activate/deactivate, or otherwise alter a filter word/phrase, supporting evolving platform policies and moderation feedback. Requires validation and careful audit of changes.","description":"Updates a profanity filter record identified by its ID using values supplied in the request body. The endpoint allows editing the word/phrase, activation state, and associated metadata. All modification operations are subject to permission checks, audit trails, and uniqueness constraints. Admins and moderators may use this endpoint to adjust filter policies in response to changing community needs or error correction. Standard error responses include ID not found, bad parameters, or lack of authorization.","summary":"Update a specific profanity filter entry in discussionboard_profanity_filters by ID.","parameters":[{"name":"id","description":"ID of the profanity filter entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the specified profanity filter entry.","typeName":"IDiscussionboardProfanityFilter.IUpdate"},"responseBody":{"description":"Updated profanity filter entry details.","typeName":"IDiscussionboardProfanityFilter"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters/{id}","method":"put"},{"specification":"Delete a specific profanity filter entry from the discussionboard_profanity_filters table by its unique ID. Enables platform admins or moderators to remove entries (words/phrases) that are no longer appropriate for automated filtering. Supports audit and permission checks, with system logs for all deletion events.","description":"Removes a profanity filter record specified by its ID, after enforcing relevant permission and audit requirements. The deletion may be soft or hard per business rules, but for API purposes, the record is no longer active or accessible. Standard error handling includes not found, access denied, or data integrity violation (e.g., if the entry is referenced elsewhere in moderation history).","summary":"Delete a specific profanity filter entry by ID from discussionboard_profanity_filters.","parameters":[{"name":"id","description":"ID of the profanity filter entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"path":"/discussionboard/profanityFilters/{id}","method":"delete"},{"specification":"Retrieve a paginated, searchable, and sortable list of automated spam rule entries from the discussionboard_automated_spam_rules table. Implements the platform’s automated content filtering requirements, supporting anti-spam review, diagnostics, and administrative configuration. Enables review and management of regex or pattern-based spam detection rules.","description":"Returns a list of automated spam rule entries from discussionboard_automated_spam_rules for review or batch management. The operation is accessible only to authorized admins and moderators and supports complex query parameters such as regex pattern search, active/inactive filtering, and pagination/sorting. Handles large rule sets efficiently and supports diagnostic and security panel use cases. Errors in access or search syntax are handled according to standard response patterns.","summary":"List and search automated spam rules in discussionboard_automated_spam_rules with pagination.","parameters":[],"requestBody":{"description":"Request parameters for searching and paginating automated spam rules.","typeName":"IDiscussionboardAutomatedSpamRule.IRequest"},"responseBody":{"description":"Paginated list of automated spam rule entries.","typeName":"IPageIDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules","method":"patch"},{"specification":"Get a single automated spam rule entry by its unique ID from the discussionboard_automated_spam_rules table. This endpoint is needed for viewing rule details, auditing configuration, and updating complex spam rule settings.","description":"Fetches and returns detailed information about a given automated spam rule entry, identified by its ID. Information includes rule pattern (e.g., regex), description, activation status, and timestamps. Access is limited to admins or moderators. Handles not-found and permission errors as defined in platform requirements.","summary":"Get detailed information about a single automated spam rule entry from discussionboard_automated_spam_rules.","parameters":[{"name":"id","description":"Target automated spam rule entry's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules/{id}","method":"get"},{"specification":"Create a new automated spam rule entry in the discussionboard_automated_spam_rules table. Used for adding new programmable patterns (such as regex or keywords) for automated content moderation. Enables administrators and moderators to expand anti-spam coverage in the discussion board system.","description":"Accepts all required creation information for a new spam rule in the request body and records this into the database. Fields may include regex/pattern, description, activation indicator, and audit timestamps. Returned value is the created record. Enforces uniqueness for rule patterns and permission/method constraints. Errors arise from unique constraint violations, input validation failures, or insufficient permissions. The endpoint is critical for keeping up with evolving abuse tactics.","summary":"Create a new automated spam rule entry in discussionboard_automated_spam_rules.","parameters":[],"requestBody":{"description":"Data required to create a new automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule.ICreate"},"responseBody":{"description":"Details of the newly created automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules","method":"post"},{"specification":"Update an existing automated spam rule entry by its unique ID in the discussionboard_automated_spam_rules table. Enables authorized admins or moderators to edit spam detection patterns as community abuse vectors evolve. Supports change tracking and audit logging for security compliance.","description":"Updates a specified automated spam rule entry, by ID, with new pattern settings, descriptions, or activation changes from the request body. Restricted to admin and moderator roles. Ensures auditability and rollback by logging all update operations, with failure responses for not found, validation, or permission issues. Critical for fast, secure updates as spam patterns shift.","summary":"Update a specific automated spam rule entry in discussionboard_automated_spam_rules by ID.","parameters":[{"name":"id","description":"Automated spam rule entry's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the specified automated spam rule entry.","typeName":"IDiscussionboardAutomatedSpamRule.IUpdate"},"responseBody":{"description":"Updated automated spam rule entry details.","typeName":"IDiscussionboardAutomatedSpamRule"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules/{id}","method":"put"},{"specification":"Delete a specific automated spam rule entry by its unique ID from the discussionboard_automated_spam_rules table. Supports platform requirements for maintainable, up-to-date anti-spam configuration, subject to authorization, audit, and error handling.","description":"Deletes the automated spam rule identified by its unique identifier from the discussionboard_automated_spam_rules table. Only users with admin or moderator privileges can delete spam rules. Operation is subject to audit-logging and error reporting for not found, integrity issues, or authorization failures. Success returns a confirmation or empty body, consistent with API norms.","summary":"Delete a specific automated spam rule entry by ID from discussionboard_automated_spam_rules.","parameters":[{"name":"id","description":"ID of the automated spam rule entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"path":"/discussionboard/automatedSpamRules/{id}","method":"delete"},{"specification":"Retrieve a paginated, filterable list of notification records from the discussionboard_notifications table. This endpoint implements Notification System requirements for administrative review or recipient self-management, allowing filtering by type, status (read/unread), recipient, timeframe, and supports advanced search criteria. For user-facing interfaces and admin moderation tools.","description":"Returns a filterable and paginated list of notifications present in the discussionboard_notifications table. The endpoint enables users (and admins, with elevated rights) to search or filter by notification type, delivery/read status, date range, and related event. Advanced query options are supported via the request body, and results are paginated and sorted according to client needs. Strict permission checks enforce that users can only view their own notifications unless they are admins or moderators. Errors in permission, filter parameters, or search criteria are returned with informative messages, in line with platform API standards.","summary":"List and search notifications in discussionboard_notifications with pagination and filtering.","parameters":[],"requestBody":{"description":"Request parameters for querying and paginating notification records.","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification entries matching filter/search criteria.","typeName":"IPageIDiscussionboardNotification"},"authorizationRoles":null,"path":"/discussionboard/notifications","method":"patch"},{"specification":"Get a single notification by its unique ID. This operation retrieves the details of one notification (such as reply, like, mention, or moderation action) belonging to a specific user of the discussionboard domain. It is used for displaying in-app or push notifications to the user and can be referenced for marking as read, showing contextual information, or linking to related content. Permissions must ensure users can only view their own notifications. Prisma table: discussionboard_notifications.","description":"This operation fetches a single notification entity from the discussionboard_notifications table based on its unique identifier. It supports the audit trail and notification system requirements by providing all the contextual details needed for an in-app UI or when a user clicks on a notification. The returned object includes information about delivery, read status, notification message content, and optional references to related entities (such as posts, comments, or moderation actions).\n\nSecurity note: Only the recipient or authorized role can access a notification's full details; others will receive an authorization error. Requests must enforce that the authenticated user matches the notification's recipient.\n\nIf the notification belongs to another user, or if it cannot be found, a 404 or 403 error is returned. Sensitive metadata (such as internal notes or related moderation action details) are protected based on user role. The ID must be a valid UUID from the Prisma schema's notifications table, and an error is returned for any malformed requests. This endpoint is often used together with the notification list endpoint to provide detail views.","summary":"Get notification details by ID (discussionboard_notifications).","parameters":[{"name":"id","description":"Unique notification ID to retrieve (UUID from discussionboard_notifications).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification details response providing notification content, type, read status, and contextual entity references.","typeName":"Idiscussionboard_notifications"},"authorizationRoles":null,"path":"/discussionboard/notifications/{id}","method":"get"},{"specification":"Create a new notification in the discussionboard system. Used for adding a system-generated notification event for a user (e.g., reply, like, moderation action). References the discussionboard_notifications Prisma table. Typical use cases include system processes or admin APIs creating notifications after certain triggers/events.","description":"This endpoint inserts a new notification record into the discussionboard_notifications table. It receives required notification properties including recipient user, type, main content, and can specify related entity context (such as for post replies, comment mentions, or moderation actions). The operation implements audit and notification delivery requirements, generating an in-app notification for the targeted user.\n\nThe request body must include all necessary information for notification creation. Validates that the discussionboard_member_id (recipient) exists; related_entity_id and related_entity_type are optional but may be used for deep linking or context in the frontend. The operation checks permission to create notifications (typically restricted to system/background/admin actions, not end users). It responds with the created notification entity or a relevant error if input is invalid or permission denied.","summary":"Create a notification (discussionboard_notifications).","parameters":[],"requestBody":{"description":"Payload for creating a new notification event (target member, type, content, optional contextual refs).","typeName":"Idiscussionboard_notifications.ICreate"},"responseBody":{"description":"Created notification entity (full details).","typeName":"Idiscussionboard_notifications"},"authorizationRoles":null,"path":"/discussionboard/notifications","method":"post"},{"specification":"Update an existing notification by its unique ID in the discussionboard domain. This usually supports changes like marking the notification as read/unread or updating the expiry for a scheduled alert. References the discussionboard_notifications Prisma table.","description":"This endpoint allows an authorized client (typically internal system logic or the notification owner) to update notification metadata, such as read status (is_read), expiry, or content. For example, when a user reads a notification, a PATCH or PUT request could set is_read=true. Business logic enforces ownership (only the notification recipient or authorized role can update).\n\nIt validates the notification's existence, input shape, and user permissions. The request body must follow the Idiscussionboard_notifications.IUpdate schema. The response returns the updated entity or an error if the notification does not exist or input is invalid.","summary":"Update notification by ID (discussionboard_notifications).","parameters":[{"name":"id","description":"Unique notification ID to update (UUID from discussionboard_notifications).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for notification fields such as is_read, content, or expires_at.","typeName":"Idiscussionboard_notifications.IUpdate"},"responseBody":{"description":"Updated notification entity details.","typeName":"Idiscussionboard_notifications"},"authorizationRoles":null,"path":"/discussionboard/notifications/{id}","method":"put"},{"specification":"Delete a notification by its ID in the discussionboard system. Used for removing a notification record, possibly in response to user dismissal or system cleanup. References the discussionboard_notifications Prisma table.","description":"This operation deletes a notification entity from the discussionboard_notifications table identified by its unique ID. It can be used when a user manually dismisses a notification or when notifications are purged for expired/obsolete entries. Only the recipient or an authorized role can delete; attempts by unauthorized users return a 403 error.\n\nOn a successful delete, an empty response or confirmation message is returned. Permission and ID validity checks are enforced. If the notification does not exist, a 404 is returned. This action also ensures compliance with user data management and notification retention rules.","summary":"Delete notification by ID (discussionboard_notifications).","parameters":[{"name":"id","description":"Unique notification ID to delete (UUID from discussionboard_notifications).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted notification confirmation or status.","typeName":"Idiscussionboard_notifications.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/notifications/{id}","method":"delete"},{"specification":"List or search alert preferences for the authenticated user or specified filter. Implements the notification preferences list API for the discussionboard domain. Results are paginated and filterable by member and notification type. Prisma table: discussionboard_alert_preferences.","description":"Provides a paginated/searchable list of alert preferences for a user or a set of users (for admin views). Retrieves configuration for notification delivery channels (in-app, email, etc) by notification type. Useful for rendering user settings pages or administration panels.\n\nFiltering options support member ID, notification type, etc. Standard RBAC applies: members can see their own preferences; admins/moderators may list system-wide settings. Pagination/sorting/query params managed via Idiscussionboard_alert_preferences.IRequest.","summary":"List alert preferences (discussionboard_alert_preferences).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for alert preferences.","typeName":"Idiscussionboard_alert_preferences.IRequest"},"responseBody":{"description":"Paginated list of alert preference entities.","typeName":"IPageIdiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences","method":"patch"},{"specification":"Get a specific alert preference record by ID from the discussionboard_alert_preferences table. Used to view the user's notification delivery configuration for a given event type.","description":"Fetches one alert preference record (for a specific notification type and member) from the alert preferences table by its unique identifier. Returns the user's chosen delivery channel for a notification type (in-app, email, disabled, etc).\n\nEnforces RBAC: Only the owner, or authorized roles, can fetch details for preferences. If the ID does not exist (or permissions denied), returns error codes. Used in account settings UI and notification customization workflows.","summary":"Get alert preference by ID (discussionboard_alert_preferences).","parameters":[{"name":"id","description":"Unique alert preference ID to fetch (UUID from discussionboard_alert_preferences).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Alert preference settings entity details.","typeName":"Idiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences/{id}","method":"get"},{"specification":"Create a new alert preference record for a user in the discussionboard domain. Used when a user changes notification settings or initial preferences are set up. References the discussionboard_alert_preferences Prisma table.","description":"Inserts a new alert preference for a user and notification type, specifying delivery channel (in-app, email, etc). Payload must include member ID, notification type, and delivery channel. The operation enforces uniqueness (each member/type combo only once).\n\nTypically called by user-initiated settings update or on registration. Returns the created preference entity or error if the combination exists or input is invalid.","summary":"Create alert preference (discussionboard_alert_preferences).","parameters":[],"requestBody":{"description":"Alert preference creation payload (user, notif type, delivery channel).","typeName":"Idiscussionboard_alert_preferences.ICreate"},"responseBody":{"description":"Created alert preference entity details.","typeName":"Idiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences","method":"post"},{"specification":"Update an existing alert preference by its ID for the discussionboard_alert_preferences table. Used to change delivery channels or notification type prefs.","description":"Updates a specific alert preference entity in the alert preferences table, such as for changing from email to in-app notifications on reply events. Body payload includes allowed modifiable fields. Only the owner or authorized role may update.\n\nOn success, updates the preference and returns the modified entity. Performs checks for permission, payload validity, and record existence. Errors returned for failures. Used in settings UI and admin controls.","summary":"Update alert preference by ID (discussionboard_alert_preferences).","parameters":[{"name":"id","description":"Alert preference ID to update (UUID from discussionboard_alert_preferences).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for alert preferences (delivery channel, notification type, etc).","typeName":"Idiscussionboard_alert_preferences.IUpdate"},"responseBody":{"description":"Updated alert preference entity details.","typeName":"Idiscussionboard_alert_preferences"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences/{id}","method":"put"},{"specification":"Delete (remove) a specific alert preference by its ID. References the alert preferences table in discussionboard domain. Used for user opt-out or admin settings removal.","description":"Removes an alert preference record identified by its unique ID from the Prisma alert preferences table. Only authorized users (the owner or admin) can delete. Used to stop notifications for certain channels or event types.\n\nEnforces permission and validity checks. Upon successful deletion, returns confirmation/status. Returns error codes for record not found or permission denied. Used in user settings or admin dashboard.","summary":"Delete alert preference by ID (discussionboard_alert_preferences).","parameters":[{"name":"id","description":"Unique alert preference ID to delete (UUID from discussionboard_alert_preferences).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted alert preference confirmation or status.","typeName":"Idiscussionboard_alert_preferences.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/alertPreferences/{id}","method":"delete"},{"specification":"List or search discussionboard_action_logs in a paginated fashion. Implements the audit and action logging search API for the discussionboard domain. Prisma table: discussionboard_action_logs.","description":"Fetches a paginated list or search result of action log entities, supporting filtering by actor, event type, event target, and time. Used for compliance reporting, admin or moderator audit, and incident review. Only authorized roles (admins/moderators) can access broad queries; a member may fetch their own logs for transparency.\n\nQuery params are bundled in the request body per Idiscussionboard_action_logs.IRequest schema (includes paging, search, and filter capability). Results include full log context as defined by the Prisma schema.","summary":"List/search action logs (discussionboard_action_logs).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for action log listing.","typeName":"Idiscussionboard_action_logs.IRequest"},"responseBody":{"description":"Paginated result (logs and pagination meta).","typeName":"IPageIdiscussionboard_action_logs"},"authorizationRoles":null,"path":"/discussionboard/actionLogs","method":"patch"},{"specification":"Get a specific action log record by its unique ID. Used for detailed event review, moderation transparency, or compliance. Prisma table: discussionboard_action_logs.","description":"Retrieves a single action log entry from the action logs table by its unique ID. Returns full detail on the action event, including actor, target, metadata, event type, and event time. Security checks ensure user can only see logs they are authorized for (admins/mods or the actor themselves).\n\nReturns error for not found or forbidden actions. Used for drill-down in admin/mod/audit UI.","summary":"Get action log by ID (discussionboard_action_logs).","parameters":[{"name":"id","description":"Unique action log ID to fetch (UUID from discussionboard_action_logs).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Action log entity details.","typeName":"Idiscussionboard_action_logs"},"authorizationRoles":null,"path":"/discussionboard/actionLogs/{id}","method":"get"},{"specification":"Create a new action log entry for the action log/audit system in discussionboard domain. Used for recording critical user, admin, or system events. Prisma table: discussionboard_action_logs.","description":"Inserts a new action log record into the action logs table. Records information such as actor ID, event type, event target, and metadata. Used by backend logic for important events (role changes, moderation, sensitive API calls). Replay and analytics on logs ensure compliance and support root cause investigations.\n\nRequires validated input per Idiscussionboard_action_logs.ICreate payload. Only system, admin, or elevated backends can write logs. On success, returns the log entry created.","summary":"Create action log (discussionboard_action_logs).","parameters":[],"requestBody":{"description":"Create payload for action log entry (actor, event type, target, metadata).","typeName":"Idiscussionboard_action_logs.ICreate"},"responseBody":{"description":"Created action log entity details.","typeName":"Idiscussionboard_action_logs"},"authorizationRoles":null,"path":"/discussionboard/actionLogs","method":"post"},{"specification":"The PUT /discussionboard/actionLogs/{id} endpoint allows administrators to update an existing action log entry in the discussionboard_action_logs table. Each action log captures platform-critical audit information such as actor, event type, target, metadata, and timestamp. Updating a log is a rare and privileged operation, suitable only for highly controlled environments such as regulatory correction or internal compliance workflows. Typically, only mutable fields can be changed (e.g. metadata), while primary keys and critical timestamps remain immutable. This endpoint strictly enforces admin-only authorization, performs input validation, and all modifications themselves are audit-logged. Error handling includes 404 for non-existent log and 403 for insufficient permissions. The operation ensures proper referential and structural integrity for audit/compliance requirements.","description":"Allows an authorized administrator to update selected, permitted fields of an action log entry in discussionboard_action_logs. Audit log entries are normally append-only, but this operation is reserved for exceptional cases (correcting metadata, clarifying action context, or compliance-mandated updates). The record is located by its unique ID, and only updateable fields are accepted in the request. All changes are fully audit-traced. Only users with admin role are authorized to perform this operation, and violations result in error responses. Related endpoints: POST (create), GET (read), DELETE (remove), PATCH (search logs).","summary":"Update a specific action log entry (discussionboard_action_logs table).","parameters":[{"name":"id","description":"ID of the action log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the action log entry. Only mutable fields may be supplied.","typeName":"IDiscussionboardActionLog.IUpdate"},"responseBody":{"description":"The updated action log entry resource.","typeName":"IDiscussionboardActionLog"},"authorizationRoles":["admin"],"path":"/discussionboard/actionLogs/{id}","method":"put"},{"specification":"The DELETE /discussionboard/actionLogs/{id} endpoint allows administrators to remove a specific action log entry from the discussionboard_action_logs table. Action logs are core compliance records and are generally not deleted except under exceptional circumstances, such as legal/regulatory request or data minimization policy. This endpoint is accessible only to admins. Deletion is irrecoverable and is itself audit-logged for transparency and compliance. The operation checks for the existence of the log (404 on missing), verifies admin permissions (403 on denial), and enforces referential integrity. Use is restricted to highly controlled operational contexts.","description":"Enables the permanent deletion of an action log entry from the discussionboard_action_logs table, subject to strict admin-only authorization. Deletion is allowed only as permitted by platform policy (e.g., legal requirements, compliance audits) and is fully audit-traced. Affected references may be cleaned up as necessary by system logic. On success, returns a confirmation; on failure, returns error codes as appropriate. Related endpoints: POST (create), PUT (update), PATCH (search), GET (retrieve log).","summary":"Delete a specific action log entry (discussionboard_action_logs table).","parameters":[{"name":"id","description":"ID of the action log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actionLogs/{id}","method":"delete"},{"specification":"The PATCH /discussionboard/errorLogs endpoint provides robust, flexible search capabilities for error log records stored in the discussionboard_error_logs table. This operation supports complex queries, including full-text search, filtering by error code, date range, and context, with pagination and sorting options. It is designed for administrators to efficiently diagnose, monitor, and investigate system/application errors. The endpoint may support search by error message substrings, sorting by created_at, and filtering by error type, stack trace presence, or related context_id. Search result sets are paginated and include metadata. All queries are subject to permission controls and rate limiting to prevent abuse. This endpoint is critical for operational monitoring, incident response, and technical audits.","description":"Allows authorized admin users to perform a filtered and paginated search of error log entries in the discussionboard_error_logs table. Examples include searching by error code, full-text message, status, or date range. The body contains filters, search criteria, pagination information, and ordering directives. Results are paginated to prevent large resource consumption. Only admin role may use this endpoint. Related endpoints: POST (create error logs), GET (details), PUT/DELETE (manage entries), PATCH (batch queries).","summary":"Search and paginate error logs (discussionboard_error_logs table).","parameters":[],"requestBody":{"description":"Search filters, query string, pagination, and ordering for error log entries.","typeName":"IPageIDiscussionboardErrorLog.IRequest"},"responseBody":{"description":"Paginated search result of error log entries.","typeName":"IPageIDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs","method":"patch"},{"specification":"The GET /discussionboard/errorLogs/{id} endpoint retrieves the detailed information of a specific error log record from the discussionboard_error_logs table by its unique identifier. This operation is essential for system administrators investigating the root cause and potential impact of error incidents. The response includes error code, message, stack trace, context ID, and creation timestamp. Permission enforcement ensures only admins can access sensitive error details. The endpoint supports forensics, troubleshooting, and reliability reviews. If the specified ID does not exist, 404 is returned.","description":"Fetches the full details of an error log entry by its unique ID for platform administrators investigating errors. Returned information includes all structure tracked for error logs (error code, message, stack trace, context). Read-only access – no modification is performed. Related endpoints: PATCH (search), POST (create), PUT/DELETE (update/remove), audit endpoints for compliance. Permissions strictly enforced. Returns 404 if not found.","summary":"Retrieve details of a specific error log (discussionboard_error_logs table).","parameters":[{"name":"id","description":"ID of the error log entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The error log record resource.","typeName":"IDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs/{id}","method":"get"},{"specification":"The POST /discussionboard/errorLogs endpoint creates a new error log record in the discussionboard_error_logs table. This is used by the platform, monitoring components, or system services when an error or exception is detected. The request body must include error code, error message, and optional stack trace, context ID. Upon success, the newly created error log record is returned, including its generated unique identifier. Only admin may invoke this endpoint. This endpoint supports platform observability and diagnostics.","description":"Creates a new error log entry for server, application, or monitoring systems detecting an error event. Consumers are system services or administrators. Provides error code, message, and contextual details. Returns the created log entry for confirmation. Related endpoints: PATCH (search logs), GET (individual logs), PUT/DELETE (update/delete), and audit endpoints. Input is validated strictly. Creations are audit-traced.","summary":"Create a new error log (discussionboard_error_logs table).","parameters":[],"requestBody":{"description":"Information comprising the error event to log.","typeName":"IDiscussionboardErrorLog.ICreate"},"responseBody":{"description":"The newly created error log entry resource.","typeName":"IDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs","method":"post"},{"specification":"The PUT /discussionboard/errorLogs/{id} endpoint updates an existing error log record in the discussionboard_error_logs table. Allows an admin to update fields such as stack trace or context, while preserving immutable fields (timestamps, primary keys). All modifications are tracked and permission enforced. Accepts corrections and annotations, returns the updated entity. 404 for missing records, 403 for insufficient authorization. Related endpoints: GET (retrieve), POST (create), DELETE (remove), PATCH (search logs).","description":"Allows admin technical staff to update allowed fields in an error log entry (by ID). Only mutable fields may be changed. All changes are audited and only authorized (admin) users may update logs. Returns updated log, or error if unauthorized. Edits are transparent and fully traceable for compliance. Related endpoints are strictly role-checked.","summary":"Update an existing error log record (discussionboard_error_logs table).","parameters":[{"name":"id","description":"ID of the error log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the error log entry. Only allowed fields may be updated.","typeName":"IDiscussionboardErrorLog.IUpdate"},"responseBody":{"description":"The updated error log record resource.","typeName":"IDiscussionboardErrorLog"},"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs/{id}","method":"put"},{"specification":"The DELETE /discussionboard/errorLogs/{id} endpoint deletes a specific error log record from the discussionboard_error_logs table. Deletion is limited to admins, usually for maintenance, retention, or cleanup policies. Checks for record existence before removal and ensures audits of deletion are logged. Unauthorized attempts are rejected. Endpoint is used for data minimization, privacy, and operational maintenance, subject to strict admin-only authorization. Related endpoints handle creation, retrieval, update, and batch queries.","description":"Allows deletion of an error log record with sufficient admin privilege per established policy. All deletions are permanent. Attempted deletion of non-existent records returns 404, unauthorized requests result in 403. Each successful delete is logged for audit and compliance. Related endpoints handle management and review of error logs. Deletion is strictly role-protected.","summary":"Delete a specific error log (discussionboard_error_logs table).","parameters":[{"name":"id","description":"ID of the error log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/errorLogs/{id}","method":"delete"},{"specification":"The PATCH /discussionboard/apiAccessLogs endpoint enables filtered, paginated search of API access log records in the discussionboard_api_access_logs table. Supports filtering by actor ID, endpoint route, HTTP method, status code, time range, and full-text search. Paginated results include metadata on page, size, total matches. Privilege-checked to allow only admin access. Used for traffic analysis, security review, and abuse detection. Rate limiting and strict permission controls are enforced.","description":"Admins use this endpoint for searching/logging API access events. Accepts flexible filter, ordering, and paging. Access is audited for security. Pagination prevents overloading system. Related endpoints: POST (create access log), GET (details), PUT/DELETE (manage entries), PATCH (batch search). Only admins may access this endpoint.","summary":"Search and paginate API access logs (discussionboard_api_access_logs table).","parameters":[],"requestBody":{"description":"Search filters, pagination, and ordering instructions for access log entries.","typeName":"IPageIDiscussionboardApiAccessLog.IRequest"},"responseBody":{"description":"Paginated search result of API access log records.","typeName":"IPageIDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs","method":"patch"},{"specification":"The GET /discussionboard/apiAccessLogs/{id} endpoint fetches detailed information about a specific API access log event from the discussionboard_api_access_logs table by its unique ID. Serves admins investigating access patterns, debugging issues, or monitoring system security. Returns all fields for a given access log event. Returns 404 on not found. Only admins are allowed.","description":"Retrieves full details of an API access log record for auditing or debugging by admin. Read-only. Related endpoints: PATCH (search), POST (create), PUT/DELETE (update/delete). Permission strictly checked. Error codes returned for unauthorized/missing records.","summary":"Retrieve details of a specific API access log entry (discussionboard_api_access_logs table).","parameters":[{"name":"id","description":"ID of the API access log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The API access log record resource.","typeName":"IDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs/{id}","method":"get"},{"specification":"The POST /discussionboard/apiAccessLogs endpoint creates a new API access log entry in the discussionboard_api_access_logs table. Invoked by the platform or admins to record API access events, this operation requires method, endpoint, status code, IP address, actor (if authenticated), response time, etc. On success, returns the new log entry. Only admins are authorized. All creates are strictly validated and audit-logged for compliance and operational analysis.","description":"Creates a new API access log record upon API endpoint invocation. Provides details for audit trail, analytics, and compliance. Input and output are strictly schema-validated. Only admin role permitted. Created logs can be further queried and managed with related endpoints.","summary":"Create a new API access log entry (discussionboard_api_access_logs table).","parameters":[],"requestBody":{"description":"Data required to create a new API access log entry.","typeName":"IDiscussionboardApiAccessLog.ICreate"},"responseBody":{"description":"The newly created API access log entry resource.","typeName":"IDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs","method":"post"},{"specification":"The PUT /discussionboard/apiAccessLogs/{id} endpoint updates an existing API access log record in the discussionboard_api_access_logs table. Admins can edit mutable fields (e.g., metadata, user agent). All updates are audit-logged and strictly permission-checked. On success, returns the updated record. Immutable fields such as endpoint, actor, status, created_at remain fixed. Error 404 for not found. Related endpoints: GET (details), POST (new), PATCH (search), DELETE (delete). Only admins are allowed to update access logs.","description":"Update permitted fields in an API access log entry by ID. Admin-only. Audited for traceability and compliance. All input is schema-validated; immutable fields cannot be altered. Associated logs are referenced. Related management endpoints. Error 404/403 codes returned on failure.","summary":"Update an API access log entry (discussionboard_api_access_logs table).","parameters":[{"name":"id","description":"ID of the API access log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the API access log entry. Only allowed fields may be updated.","typeName":"IDiscussionboardApiAccessLog.IUpdate"},"responseBody":{"description":"The updated API access log entry resource.","typeName":"IDiscussionboardApiAccessLog"},"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs/{id}","method":"put"},{"specification":"The DELETE /discussionboard/apiAccessLogs/{id} endpoint removes a specific API access log entry from the discussionboard_api_access_logs table. Admin-only. Used for retention compliance, data minimization or operational cleanup. Deletes are permanent and audit-logged. 404 for missing records. Related endpoints handle CRUD and query. Permission strictly enforced.","description":"Permanently deletes an API access log entry by unique ID, provided the requestor is an admin. Removes the record, logs the event, and confirms outcome. Part of data lifecycle compliance. Related endpoints (CRUD, batch search) are strictly admin-only. All operations are role-audited.","summary":"Delete an API access log entry (discussionboard_api_access_logs table).","parameters":[{"name":"id","description":"ID of the API access log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/apiAccessLogs/{id}","method":"delete"}],"components":{"schemas":{"IDiscussionboardSection.IRequest":{"type":"object","properties":{"filter":{"type":"object","description":"Filtering criteria for searching board sections.\n\nPossible properties include name (partial or full match), is_active (if present), or created_at/updated_at range. Used by UI filter components and listing endpoints. Aligns with section list requirements for API flexibility.","properties":{},"additionalProperties":true,"required":[]},"sort":{"type":"string","description":"Field by which to sort the results. For example: 'name', 'created_at'. Aligns with UI/UX needs for interactive sorting of section lists."},"page":{"type":"integer","description":"Page number for pagination. Zero-based index in paginated queries. For example: page=0 is the first page.","minimum":0},"limit":{"type":"integer","description":"Limit of records per page. For example, 'limit=25' for 25 items per page. Required by paginated APIs for scalable UI."}},"description":"Type for request body when listing or searching discussionboard_sections.\n\nImplements flexible, paginated board section search per requirements (section list API), with filter, sort, and paging controls as standard for all search/list endpoints.","required":["filter","sort","page","limit"]},"IPageIDiscussionboardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSection"},"description":"Array of board section entries satisfying query/filter page."}},"required":["pagination","data"],"description":"A paginated list wrapper for IDiscussionboardSection entities, returned from section list/search endpoints.\n\nContains result data plus page info, for scalable/efficient frontend rendering."},"IDiscussionboardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for section. Maps to discussionboard_sections.id in DB. Enforces logical grouping semantics and required for all section API operations."},"name":{"type":"string","description":"Human-readable name of the section (e.g., 'Politics').\n\nFrom discussionboard_sections.name. Required. Used in UI and for logical organization."},"description":{"oneOf":[{"type":"string","description":"Optional text description of what this section contains/focuses on. From discussionboard_sections.description.\n\nUsed for filtering and UI tooltips. Supports null."},{"type":"null"}],"description":"Optional text description of what this section contains/focuses on. From discussionboard_sections.description.\n\nUsed for filtering and UI tooltips. Supports null."},"sort_order":{"type":"integer","description":"Explicit UI sort order for section, as provided by admin. Controls display sequence. Maps to discussionboard_sections.sort_order."},"created_at":{"type":"string","format":"date-time","description":"Section creation timestamp in ISO 8601 format. Maps to discussionboard_sections.created_at. Used for sorting and audits."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the section. Maps to discussionboard_sections.updated_at. Used for audits and change detection."}},"required":["id","name","sort_order","created_at","updated_at"],"description":"Represents a board section/grouping such as 'Politics' or 'Economy'.\n\nImplements the top-level category for sets of boards, supporting logical organization, discovery, and admin configuration. Aligns with discussionboard_sections schema and all requirements for board grouping/section navigation."},"IDiscussionboardSection.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Section name (human-friendly, unique).\n\nRequired at creation. Taken from discussionboard_sections.name."},"description":{"oneOf":[{"type":"string","description":"Short text description for UI or filtering. Optional at create. From discussionboard_sections.description."},{"type":"null"}],"description":"Short text description for UI or filtering. Optional at create. From discussionboard_sections.description."},"sort_order":{"type":"integer","description":"Numeric order for display (admin-defined). Required for insert. From discussionboard_sections.sort_order."}},"required":["name","sort_order"],"description":"Input for creation of a new board section, referenced by admin endpoints onboarding new logical groupings for boards.\n\nComplies with atomic 3NF schema and business flows."},"IDiscussionboardSection.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Section name, new value if updating section name. Must remain unique platform-wide."},"description":{"oneOf":[{"type":"string","description":"New description, if updating. Null to clear. Fulfills auditability and flexibility in business requirements."},{"type":"null"}],"description":"New description, if updating. Null to clear. Fulfills auditability and flexibility in business requirements."},"sort_order":{"type":"integer","description":"Optional new UI/display order. Allows for explicit reordering of section list."}},"description":"Payload for updating existing discussionboard_sections entry by ID.\n\nUsed in admin UI and API, supports PATCH/PUT semantics for atomic updates. Properties are optional (partial update supported).","required":[]},"IDiscussionboardSection.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the deleted section. Retained for audit and confirmation in result object."},"deleted":{"type":"boolean","description":"Boolean status for successful deletion. True if deleted, false otherwise."}},"required":["id","deleted"],"description":"Result payload for deleting a board section, confirming removal by ID.\n\nEnforces auditability, business rules, and displays confirmation in admin UI. Simple true/false mechanism."},"IDiscussionboardBoard.IRequest":{"type":"object","properties":{"filter":{"type":"object","description":"Filtering criteria for board list/search API. Keys may include name, section_id, is_active, created_at, etc. Flexible, supporting extensibility for various filter combinations.\n\nProvided in UI filter panels, aligns with business rules.","properties":{},"required":[]},"sort":{"type":"string","description":"Sort field for results. E.g., 'name', 'created_at'. Used for UI table sorting and meets requirement for admin/admin panel flexibility."},"page":{"type":"integer","description":"Pagination: page number (zero-based). Standard paging property. Required in all paged list endpoints."},"limit":{"type":"integer","description":"Pagination: number of results per page. Used to manage large datasets for UI and performance. Required."}},"required":["filter","sort","page","limit"],"description":"Paging/filtering/sorting request payload for boards listing/search endpoint."},"IPageIDiscussionboardBoard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoard"},"description":"Array of board entries. Per filtered/paged request."}},"required":["pagination","data"],"description":"Paginated list/result set of board (IDiscussionboardBoard) entries for admin/member board list APIs."},"IDiscussionboardBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this board. Maps to discussionboard_boards.id. Used in all routing/UI navigation."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"ID of the section/group this board is under. Foreign key in DB (discussionboard_boards.discussionboard_section_id). Used in filtering, navigation, and enforcing referential integrity."},"name":{"type":"string","description":"Display name of the board, e.g., 'Elections 2025'.\n\nFrom DB name field. Required; must be unique platform-wide. Used for human search, navigation, and UI presentation."},"description":{"oneOf":[{"type":"string","description":"Short, optional description of board topic, per UI/tooltip requirements. Optional in DB schema. Used for filter/navigation enhancements."},{"type":"null"}],"description":"Short, optional description of board topic, per UI/tooltip requirements. Optional in DB schema. Used for filter/navigation enhancements."},"rules":{"oneOf":[{"type":"string","description":"Optional Markdown or plain-text rules for the board. Null if default or not set. Used in UI and onboard/board view."},{"type":"null"}],"description":"Optional Markdown or plain-text rules for the board. Null if default or not set. Used in UI and onboard/board view."},"is_active":{"type":"boolean","description":"Is this board currently accepting content, i.e., not archived or hidden? Set by admin controls. From discussionboard_boards.is_active. Affects visibility in UI/search."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO8601, UTC). For audit and sorting. Maps to discussionboard_boards.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp, for audit/change-tracing. From DB updated_at."}},"required":["id","discussionboard_section_id","name","is_active","created_at","updated_at"],"description":"Single board entity, representing a discrete discussion topic group.\n\nImplements requirements for board definition, navigation, settings, and membership per discussionboard_boards table and associated business logic."},"IDiscussionboardBoard.ICreate":{"type":"object","properties":{"discussionboard_section_id":{"type":"string","format":"uuid","description":"Section ID for placement. Mandatory, must be a valid section in DB."},"name":{"type":"string","description":"Board name, must be unique and human-friendly. Required."},"description":{"oneOf":[{"type":"string","description":"Optional summary of board focus. Used for UI, navigation, search/discovery panels."},{"type":"null"}],"description":"Optional summary of board focus. Used for UI, navigation, search/discovery panels."},"rules":{"oneOf":[{"type":"string","description":"Optional board-specific rules, Markdown/plain-text. Null for defaults (optional at create time)."},{"type":"null"}],"description":"Optional board-specific rules, Markdown/plain-text. Null for defaults (optional at create time)."},"is_active":{"type":"boolean","description":"Whether the board is active/live or hidden/archived. Enforced at create time. Required."}},"required":["discussionboard_section_id","name","is_active"],"description":"Input body for board creation (by admin, or onboarding wizard). All mandatory board properties required at creation. Nullable for optional fields like description and rules."},"IDiscussionboardBoard.IUpdate":{"type":"object","properties":{"discussionboard_section_id":{"type":"string","format":"uuid","description":"Change board's parent section (if allowed). Enforced by business logic, referential integrity checked on update."},"name":{"type":"string","description":"Update name/title of board. Platform-wide uniqueness enforced per requirements."},"description":{"oneOf":[{"type":"string","description":"Update board descriptive text. Null to clear."},{"type":"null"}],"description":"Update board descriptive text. Null to clear."},"rules":{"oneOf":[{"type":"string","description":"Update/overwrite board rules (Markdown/plain-text) or clear with null."},{"type":"null"}],"description":"Update/overwrite board rules (Markdown/plain-text) or clear with null."},"is_active":{"type":"boolean","description":"Update flag: activate/deactivate board."}},"description":"Payload for updating one or more board fields/properties. PATCH or PUT supported.\n\nAll fields optional (partial update allowed). Maps to update semantics of discussionboard_boards table.","required":[]},"IDiscussionboardBoard.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the deleted board. Used for audit and confirmation in result response."},"deleted":{"type":"boolean","description":"True if successfully deleted. For admin UI and audit trails."}},"required":["id","deleted"],"description":"Confirmation result for deleting a board, for audits and UI handling."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (starts from 1 for the first page)."},"limit":{"type":"integer","format":"uint32","description":"Limit of records per page, as requested."},"records":{"type":"integer","format":"uint32","description":"Total records in the queried table."},"pages":{"type":"integer","format":"uint32","description":"Total number of result pages, derived as ceiling(records / limit)."}},"required":["current","limit","records","pages"],"description":"Pagination information block. Contains metadata for paginated list results including pointers for current page, limit, record count, and total pages. Standard for all IPage<T> containers in the API."},"IDiscussionboardTag.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Search term for matching tag names. Supports full or partial match. Example: 'economy', 'policy', etc. Used to filter the result set to tags that match the query string. Referenced from requirements: tag discovery and search UI."},"page":{"type":"integer","description":"Pagination: page number (defaults to 1 if omitted).","minimum":1},"limit":{"type":"integer","description":"Pagination: number of records per page (defaults to 20 if omitted).","minimum":1},"sort":{"type":"string","description":"Field to sort results by (e.g., 'name', 'created_at')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'."}],"description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request schema for listing, searching, and filtering tags within the discussion board system.\n\nImplements business requirements from tag-discovery and filtering features. All properties are atomic and correspond to independent filter, sort, and pagination criteria as referenced in the Prisma table and requirements analysis. Allows clients to search for tag records, page through results, and order by supported fields. Used for admin, moderator, and member-facing tag search APIs."},"IPageIDiscussionboardTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardTag"},"description":"List of IDiscussionboardTag objects for the current page of results."}},"required":["pagination","data"],"description":"Paginated result type for lists of tag records from the discussion board.\n\nImplements presentation of tag search results (for filters, tag management, or UI chips), including standard pagination metadata and the list of tag objects. Matches IPage<T> convention, where T is IDiscussionboardTag."},"IDiscussionboardTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this tag record in the system. Directly aligns with the Prisma primary key for discussionboard_tags. Used for referencing, updating, and deleting tags in APIs and UIs."},"tag":{"type":"string","description":"Human-friendly tag value (e.g., 'policy', 'economy'). Implements tag definition requirement from functional specs and Prisma schema. Unique per system to avoid collision, as enforced in the DB."},"description":{"oneOf":[{"type":"string","description":"Textual description of the tag's use, scope, or meaning. Provides admins, moderators, and end users context for how and where to apply the tag. Optional field. Used for UI tooltips, tag detail modals, and search discoverability. Matches the tag description field in the Prisma schema."},{"type":"null"}],"description":"Textual description of the tag's use, scope, or meaning. Provides admins, moderators, and end users context for how and where to apply the tag. Optional field. Used for UI tooltips, tag detail modals, and search discoverability. Matches the tag description field in the Prisma schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this tag was created. Used for sorting, filtering, and audit trails as required by functional and compliance requirements."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this tag record. Fulfills audit and tracking requirements for tag modifications in admin panels or logs."}},"required":["id","tag","created_at","updated_at"],"description":"Discussion board tag entity definition. Corresponds to a record in the discussionboard_tags Prisma table.\n\nEnables tag-based categorization of boards, posts, or related entities as required by functional and business needs. Each tag stores a unique, human-readable label and optional description. System timestamps track record lifecycle events for audit/logging as required in compliance. Used as a normalized element for filters, navigation chips, and bulk tag management. Each property references the field design and documentation found in the Prisma schema for tags."},"IDiscussionboardTag.ICreate":{"type":"object","properties":{"tag":{"type":"string","description":"Human-friendly tag value (must be unique per system). Fulfills creation requirement in tag definitions as per specs and Prisma comments. Used to propose a new tag for use throughout the platform."},"description":{"oneOf":[{"type":"string","description":"Optional textual description giving more info/context to the tag's purpose/meaning. Important for discoverability and onboarding. May be omitted or null. Referenced in rich admin UI tag creation forms."},{"type":"null"}],"description":"Optional textual description giving more info/context to the tag's purpose/meaning. Important for discoverability and onboarding. May be omitted or null. Referenced in rich admin UI tag creation forms."}},"required":["tag"],"description":"Tag creation request object for the discussion board.\n\nLets admin or moderators define a new tag, specifying the unique value (displayed to end users), and optionally a description. Written directly to the discussionboard_tags table. Timestamps and ID fields are generated by the backend and are not required in create requests. Follows field/description detail from the Prisma table for tags."},"IDiscussionboardTag.IUpdate":{"type":"object","properties":{"tag":{"type":"string","description":"(Optional) New value for the tag string (unique per system, enforced by the backend). Only present if tag is being renamed. Corresponds to updatable tag-value field in Prisma."},"description":{"oneOf":[{"type":"string","description":"(Optional) New or replacement description for the tag. Updates the field as documented in the Prisma schema for tags. Can be set or cleared (null)."},{"type":"null"}],"description":"(Optional) New or replacement description for the tag. Updates the field as documented in the Prisma schema for tags. Can be set or cleared (null)."}},"required":[],"description":"Update request schema for tag records in the discussion board.\n\nAllows admin/moderators to update tag value (rename) and/or its description. Fields are optional—API may permit partial update. Only those specified are altered; others remain unaffected. Matches the 3NF update and audit requirements for tags per functional/non-functional spec."},"IDiscussionboardBoardSubscription.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by ID of the discussion board being subscribed to. Returns board subscriptions for this board only. Used to get all subscriptions to a board or for board-focused admin/mod analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by ID of the subscribing member (user). Returns only board subscriptions for this member. Used by profile screens and notification dashboards."},"created_after":{"type":"string","format":"date-time","description":"Filter to only subscriptions created after this timestamp. Used for analytics and recent activity queries."},"created_before":{"type":"string","format":"date-time","description":"Filter to only subscriptions created before this timestamp."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number (defaults to 1)."},"limit":{"type":"integer","minimum":1,"description":"Pagination: records per page (defaults to 20)."},"sort":{"type":"string","description":"Field for sort order (e.g., 'created_at', 'discussionboard_board_id')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'."}],"description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request filter and pagination schema for searching or listing board subscription records.\n\nImplements requirements for user dashboard, board following analytics, and admin reporting. Filters by board, user, or creation date. Pagination fields and sort params support large result sets efficiently."},"IPageIDiscussionboardBoardSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSubscription"},"description":"List of IDiscussionboardBoardSubscription entities meeting query/filter criteria."}},"required":["pagination","data"],"description":"Paginated response for board subscription records from the discussion board.\n\nReturns bulk results of board-follower subscriptions, including standard pagination info and an array of subscription records. Used in lists, user dashboards, and admin analytics apps. Follows IPage<T> convention, where T is IDiscussionboardBoardSubscription."},"IDiscussionboardBoardSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for this subscription record. Unique per board+member in discussionboard_board_subscriptions table. Used for updating/deleting subscriptions safely."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board being subscribed to, referencing discussionboard_boards.id. Implements business logic for linking boards to subscribers for notifications/analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"User/member subscribed to board (references member primary key). Fulfills per-member board following and notification requirements."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the subscription was created. Supports audit, sort, filter, and analytics requirements (as per retention/policy guidelines)."}},"required":["id","discussionboard_board_id","discussionboard_member_id","created_at"],"description":"Board subscription entity structure for the discussion board platform.\n\nConnects a member to a board for notification and personalized content features. Every board subscription record uniquely links a board and subscribing member, tracking creation time for audit and analytics. Implements notification delivery, new board activity alerting, and content-follow features. Each property references normalized, atomic data as per the Prisma schema and business spec."},"IDiscussionboardBoardSubscription.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board's ID for the subscription. Must match existing board record."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member (user) ID of the subscriber. Must reference existing member record."}},"required":["discussionboard_board_id","discussionboard_member_id"],"description":"Creation request schema for board subscription records.\n\nLets authenticated members (or admins/mods on their behalf) subscribe to/follow a specific board. Both board and member IDs must be valid and present in the system. Upon creation, automatic fields like id and created_at are managed by the backend. Properties directly reference normalized fields from schema for board subscriptions."},"IDiscussionboardBoardSubscription.IUpdate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"(Optional) New board ID to re-link the subscription. Only updatable for error correction or reassignment."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) New member ID if the subscription must be reassigned. Generally, updates to member are rare except during user merge or correction events."}},"required":[],"description":"Update request schema for a board subscription record (discussionboard_board_subscriptions).\n\nAllows modifying the linked board or member (for error correction, admin actions, or reassignments). Updates can one or both fields, always referencing schema-level UUID requirements. The id and created_at fields are never updatable via this schema."},"IDiscussionboardBoardSetting.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by board ID for settings. Only returns settings linked to the given board, as per requirements for per-board feature toggling."},"allow_images":{"type":"boolean","description":"Filter to settings where image posting is permitted (true) or not (false)."},"require_moderator_approval":{"type":"boolean","description":"Filter by whether moderator approval is required for new posts on the board. Used to locate boards subject to extra moderation or to find permissive boards."},"page":{"type":"integer","minimum":1,"description":"Pagination page number (defaults to 1 if omitted)."},"limit":{"type":"integer","minimum":1,"description":"Page size/number of records per page (defaults to 20 if omitted)."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'discussionboard_board_id')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending."},{"const":"desc","description":"Sort direction: ascending or descending."}],"description":"Sort direction: ascending or descending."}},"required":[],"description":"Request schema for searching, filtering, and paginating board settings records.\n\nImplements features for admin board settings configuration UIs, allows selecting by image permission, moderator approval status, or targeting settings for a specific board. Each field is atomic and matches a direct column in the board_settings Prisma table."},"IPageIDiscussionboardBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSetting"},"description":"List of per-board settings entities meeting the query/filters."}},"required":["pagination","data"],"description":"Paginated result for board settings query.\n\nImplements paging for per-board feature configurations, supporting workflow, admin dashboards, and configuration review. Returns 'data' array of IDiscussionboardBoardSetting records and pagination block. Used for admin tools, analytics, and system audits. Follows IPage<T> convention where T is IDiscussionboardBoardSetting."},"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this settings record. References the primary key of discussionboard_board_settings.\n\nAtomic. Used when retrieving/updating settings."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board id these settings apply to. Must match an existing board. Enforces 1:1 mapping.\n\nReferenced from board CRUD and settings management."},"allow_images":{"type":"boolean","description":"Toggles whether this board allows image uploads in posts or comments.\n\nSet true to permit image content, false to disallow."},"require_moderator_approval":{"type":"boolean","description":"If true, new posts require moderator approval before becoming public on this board.\n\nImplements stricter moderation workflows for sensitive boards."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this board settings record was created.\n\nImmutable. Used for audit/trace/history."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this settings record was last updated.\n\nEnables audit trails and last-change UIs."}},"required":["id","discussionboard_board_id","allow_images","require_moderator_approval","created_at","updated_at"],"description":"Board settings entity describing all adjustable, board-specific configuration options.\n\nImplements customization, moderation policy, and extensible feature toggles mapped 1:1 to board records. Every field aligns with 3NF compliance and is directly referenced from the source table (see Prisma schema for discussionboard_board_settings).\n\nIncludes creation/update timestamps for audit."},"IDiscussionboardBoardSetting.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board id to attach these settings to. Must be a valid board id and unused in other settings."},"allow_images":{"type":"boolean","description":"Initial setting for enabling images in posts/comments on this board."},"require_moderator_approval":{"type":"boolean","description":"Initial moderator approval setting for the board. True means every new post requires review."}},"required":["discussionboard_board_id","allow_images","require_moderator_approval"],"description":"Payload for creating new settings for a board. All fields are atomic, 3NF, and must align with board's actual id.\n\nNo timestamps (set by server). Used in admin console."},"IDiscussionboardBoardSetting.IUpdate":{"type":"object","properties":{"allow_images":{"type":"boolean","description":"Updated value for image posting. Optional, but at least one field must be set."},"require_moderator_approval":{"type":"boolean","description":"Updated value for moderator approval flag. Optional, but at least one field must be set."}},"required":[],"description":"Payload to update existing settings for a board. Only mutable fields (feature toggles) should be present.\n\nUsed by admin when changing per-board options."},"IDiscussionboardNotificationSettings.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optional filter: Only list settings records for the specified member id."},"receive_board_notifications":{"type":"boolean","description":"Optional filter: only list settings with this value for board notification preference."},"receive_mention_notifications":{"type":"boolean","description":"Optional filter: only list settings with this value for mention notification preference."},"page":{"type":"integer","description":"Page number requested (for pagination). Optional."},"limit":{"type":"integer","description":"Number of records per page (pagination). Optional."}},"required":[],"description":"Payload for listing/filtering notification settings. Supports all indexed/filtered fields in the table: member id, notification toggles, and standard paging controls."},"IPageIDiscussionboardNotificationSettings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging information, including page number, size, total records, and page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationSettings"},"description":"List of notification settings objects (one per member, if filtered, or all in system with pagination)."}},"required":["pagination","data"],"description":"Standard page format for notification settings results, following business convention IPage<T>.\n\nSee audit log and paging requirements for more detail."},"IDiscussionboardNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique notification setting record id for this member.\n\n @db.Uuid"},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Which member the settings belong to (reference to discussionboard_members.id)."},"receive_board_notifications":{"type":"boolean","description":"Toggles whether member receives notifications for new posts on boards they subscribe to."},"receive_mention_notifications":{"type":"boolean","description":"Toggles whether member receives notifications when they are mentioned in a post or comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when these settings were created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when these settings were last updated."}},"required":["id","discussionboard_member_id","receive_board_notifications","receive_mention_notifications","created_at","updated_at"],"description":"Represents a member's preferences regarding notification delivery for boards and mentions.\n\nDirectly matched to the notification_settings table (see Prisma schema). All attributes atomic/3NF."},"IDiscussionboardNotificationSettings.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member for whom these settings are being created."},"receive_board_notifications":{"type":"boolean","description":"Initial preference for board-related notifications."},"receive_mention_notifications":{"type":"boolean","description":"Initial preference for mention notifications."}},"required":["discussionboard_member_id","receive_board_notifications","receive_mention_notifications"],"description":"Payload for creating new notification settings for a member. Timestamps set by server."},"IDiscussionboardNotificationSettings.IUpdate":{"type":"object","properties":{"receive_board_notifications":{"type":"boolean","description":"Updated value (optional) for board notification preference."},"receive_mention_notifications":{"type":"boolean","description":"Updated value (optional) for mention notification preference."}},"required":[],"description":"Update form for notification settings, allows either or both toggles to be changed by member or admin."},"IDiscussionboardAdmins.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optional: filter admin assignments by specific member id."},"active_only":{"type":"boolean","description":"If true, only returns currently-active admin role assignments (not revoked ones)."},"page":{"type":"integer","description":"Optional: page number for pagination."},"limit":{"type":"integer","description":"Optional: number of records to return per page (pagination)."}},"required":[],"description":"Request parameters for listing or searching admin assignments, with filters for member, activity, and page."},"IPageIDiscussionboardAdmins":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging and count information for the admin assignment query."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAdmins"},"description":"List of admin assignments from the search/pagination results."}},"required":["pagination","data"],"description":"Page result for admin assignments. Standard page wrapper with IPage.IPagination and array of admin assignment objects."},"IDiscussionboardAdmins":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this admin assignment record (@discussionboard_admins.id).\n\nSet by the DB at creation."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member to whom admin privilege is assigned. FK to discussionboard_members."},"granted_at":{"type":"string","format":"date-time","description":"When the admin role was granted to this member."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If admin status is revoked, timestamp of revocation. Otherwise, null if still active."},{"type":"null","format":"date-time","description":"If admin status is revoked, timestamp of revocation. Otherwise, null if still active."}],"description":"If admin status is revoked, timestamp of revocation. Otherwise, null if still active."}},"required":["id","discussionboard_member_id","granted_at"],"description":"Assignment of admin role to a member. Reflects both active and revoked admin records. Follows requirement for 3NF, audit, and RBAC."},"IDiscussionboardAdmins.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member being promoted to admin."}},"required":["discussionboard_member_id"],"description":"Payload for promoting a member to admin role. Only member id is needed (system sets grant time and id)."},"IDiscussionboardAdmins.IUpdate":{"type":"object","properties":{"revoked_at":{"type":"string","format":"date-time","description":"Timestamp of when admin role was revoked for this member. Null if admin role is still active. Correlates with role demotion, account changes, or audit requirements. Sourced from the 'discussionboard_admins' Prisma model column comment. Used to mark admins as no longer active for permissions and RBAC purposes."}},"required":["revoked_at"],"description":"Update type for the admin assignment entity in the discussionboard domain, as per business requirements for role demotion or administrative change. Used for updating the approval status or deactivating the admin at a specific timestamp."},"IDiscussionboardModerators.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Optional filter by member's unique UUID. Used to fetch moderation assignment records for a specific user."},"is_active":{"type":"boolean","description":"Optional flag to filter currently active moderators from those who have been demoted or revoked."},"page":{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination; defines which result window to return."},"limit":{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"How many items are returned on one page (default 20, maximum 100)."},"sort":{"oneOf":[{"const":"granted_at","description":"Sort order field. Can be granted_at (when moderator role assigned) or revoked_at (if demoted)."},{"const":"revoked_at","description":"Sort order field. Can be granted_at (when moderator role assigned) or revoked_at (if demoted)."}],"description":"Sort order field. Can be granted_at (when moderator role assigned) or revoked_at (if demoted)."}},"required":["page","limit"],"description":"Request schema for searching or filtering moderator assignment records, as shown in admin dashboards or search APIs. Includes support for paging, sorting, and advanced filtering."},"IPageIDiscussionboardModerators":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerator"},"description":"Paginated list of moderator assignments."}},"required":["pagination","data"],"description":"Paginated result container listing moderator assignment entities and containing paging metadata. Used as the response body for queries against moderator records."},"IDiscussionboardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for moderator assignment record. Unique identifier (UUID) corresponding to the discussionboard_moderators row. Fulfills source of truth requirements for role-based API logic, audit logs, and admin dashboards."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member assigned moderator privileges. Foreign key link to member/user record. As described in discussionboard_moderators schema, supports audit, lookup, and permission assignment."},"granted_at":{"type":"string","format":"date-time","description":"Datetime when moderator privileges were granted. Implements assignment time tracking and supports search/sort for moderation analytics and dashboard reporting."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime moderator role was revoked/demoted. Null if active. Fulfills RBAC audit and supports filtering for active/expired moderator records."},{"type":"null"}],"description":"Datetime moderator role was revoked/demoted. Null if active. Fulfills RBAC audit and supports filtering for active/expired moderator records."}},"required":["id","discussionboard_member_id","granted_at"],"description":"Main entity type for moderator assignment in the discussionboard domain. Represents assignment state for a user as a moderator, tracks grant/revoke status, and audit trail. Directly mirrors the discussionboard_moderators schema definition."},"IDiscussionboardModerator.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the existing member to be granted moderator status. Must refer to a valid and active user record. Sourced from the discussionboard_moderators Prisma model: supporting clear role elevation flows."}},"required":["discussionboard_member_id"],"description":"Request schema for creating a new moderator assignment. Supplies the member (user) to be promoted as moderator, in strict RBAC business flows."},"IDiscussionboardModerator.IUpdate":{"type":"object","properties":{"revoked_at":{"type":"string","format":"date-time","description":"Timestamp marking the demotion or removal of moderator rights. Used to transition user from moderator back to member, for audit or compliance. Sourced directly from discussionboard_moderators Prisma model column notes."}},"required":["revoked_at"],"description":"Update type for moderator assignment role; used to mark role revocation or administrative status change, reflecting compliance and audit requirements."},"IDiscussionboardMember.IRequest":{"type":"object","properties":{"username":{"type":"string","description":"Optional filter for usernames (exact or partial). Used for user search in admin or moderation dashboards."},"created_from":{"type":"string","format":"date-time","description":"Search filter for member accounts created after this date."},"created_to":{"type":"string","format":"date-time","description":"Search filter for member accounts created before this date."},"is_active":{"type":"boolean","description":"Search filter: return active (not deactivated) users only."},"page":{"type":"integer","format":"int32","minimum":1,"description":"Page number for search result pagination."},"limit":{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"Number of results per page, default 20, max 100."}},"required":["page","limit"],"description":"Request schema for searching and paginating member accounts in the discussion board system. Primary filters include username search, creation date range, and active status, with standard pagination fields."},"IPageIDiscussionboardMemberSummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMemberSummary"},"description":"List of member summary response objects on this page."}},"required":["pagination","data"],"description":"Paginated container type for summary member account records. Used for listing members in search/admin views with basic metadata."},"IDiscussionboardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for member account. UUID assigned upon registration. Referenced for authentication, audit logs, and API lookups. Sourced from the discussionboard_members Prisma table as main identifier."},"username":{"type":"string","description":"Unique login handle for the member account. Not case-sensitive; serves as logical platform identity in logins, display, and audit."},"password_hash":{"type":"string","description":"Secure hash of member's password (bcrypt, Argon2, etc.), never storing clear text. Implements security policy and fulfills authentication business requirement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of member registration. Used for platform analytics, search, and audit log sequencing."},"activated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when registration completed/verified. Null until confirmed by email or workflow."},{"type":"null"}],"description":"Datetime when registration completed/verified. Null until confirmed by email or workflow."},"deactivated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime for soft-deactivation (account suspension/deletion). Null if account is currently active."},{"type":"null"}],"description":"Datetime for soft-deactivation (account suspension/deletion). Null if account is currently active."}},"required":["id","username","password_hash","created_at"],"description":"Full member account entity type for discussionboard. Used for authenticated platform access and RBAC, with all non-derived atomic fields as described in Prisma. Directly aligns to core authentication/security flows."},"IDiscussionboardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"Username to register for new member account. Must be unique across all registered members, not case-sensitive. Used as primary login and display name."},"password_hash":{"type":"string","description":"Pre-hashed password for authentication storage. Never plain text; pass a secure hash (bcrypt, Argon2, etc.). Fulfills security and compliance requirements. Sourced from discussionboard_members schema business rules."}},"required":["username","password_hash"],"description":"Request schema for registering a new discussionboard member. Accepts minimum platform credential info. Used in registration flows and admin onboarding."},"IDiscussionboardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"Update for member's username. Must remain unique and compliant with platform requirements."},"password_hash":{"type":"string","description":"Update for authentication hash. Supplies new password hash upon reset/change, per security protocols."},"activated_at":{"type":"string","format":"date-time","description":"Datetime for account activation (email/registration confirmation, used in admin actions as described in requirements analysis)."},"deactivated_at":{"type":"string","format":"date-time","description":"Soft-deletion timestamp; null or set for deactivation/expunge as described in business policy flows."}},"description":"Update payload type for member records, supporting admin/member username or password change, activation, and soft-deletion.","required":[]},"IDiscussionboardGuest.IRequest":{"type":"object","properties":{"created_from":{"type":"string","format":"date-time","description":"Return guest sessions created after this timestamp. Used for session analytics and marketing."},"created_to":{"type":"string","format":"date-time","description":"Return guest sessions created before this timestamp."},"page":{"type":"integer","format":"int32","description":"Pagination: which page of results."},"limit":{"type":"integer","format":"int32","description":"Results per page, limits pagination windows."}},"required":["page","limit"],"description":"Request schema for searching, paginating, or filtering guest sessions in the discussion board, supporting analytics, onboarding, and compliance visibility."},"IDiscussionboardMemberSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Member account UUID. Used to identify user in responses/search."},"username":{"type":"string","description":"Member login handle/display name. Serves as summary identity for list views."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp. Used in member directory and sorting."},"activated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when member verified their registration. Null if not yet confirmed."},{"type":"null"}],"description":"Datetime when member verified their registration. Null if not yet confirmed."}},"required":["id","username","created_at"],"description":"Summary type for member account, used in paginated list search results and admin dashboards to display member identities/creation dates without sensitive details."},"IPageIDiscussionboardGuestSummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information, following the IPage interface standard. Includes current page, per-page limit, total record count and total page count.\n\nDerived from business logic in typical paged results (see requirement 3.2 Performance & Scalability)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardGuestSummary"},"description":"List of summarized guest session records for the current page.\n\nEach entry corresponds to an individual guest browsing session, providing only the summary fields necessary for auditing or session analytics as described in requirements and ERD."}},"required":["pagination","data"],"description":"Paginated container for guest session summaries used in listing, analytics, or administrative reporting.\n\nImplements the result shape for APIs facilitating guest session search, supporting all IPage features for auditing/tracking the journey of unauthenticated ('guest') users."},"IDiscussionboardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique guest session identifier. Directly corresponds to discussionboard_guests.id in the Prisma schema. Must be a DB-generated UUID."},"session_token":{"type":"string","description":"Opaque session cookie or token identifying the guest browser. Used for guest tracking, correlation, and recognizing repeat visits."},"created_at":{"type":"string","format":"date-time","description":"Datetime guest session was initiated. Reflects guest activity timeline and supports retention/audit logic."}},"required":["id","session_token","created_at"],"description":"Guest user session entity capturing individual, unauthenticated visitor sessions.\n\nImplements the structure used to track anonymous access for analytics, up-selling, and compliance audit as described in the Actors ERD and Prisma schema."},"IDiscussionboardGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"Opaque session token or cookie for the new guest session to be created.\n\nEssential for correlating guest usage events to the appropriate session."},"created_at":{"type":"string","format":"date-time","description":"Time the guest session was initiated. Required for accurate analytics and platform onboarding logic."}},"required":["session_token","created_at"],"description":"Request body for creating a new guest session. Provides required atomic data per the Actors domain schema.\n\nUsed in registration or guest journey tracking flows, directly correlated to IDiscussionboardGuest entity constraints."},"IDiscussionboardGuest.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"New or replacement guest session token if updating session identifier (such as for token regeneration).\n\nMutating this is rare outside guest-to-member conversion or admin repair flows."},"created_at":{"type":"string","format":"date-time","description":"Updated creation timestamp (for migration or correction). Allows valid adjustment to guest session lifecycle if needed."}},"description":"Request body for updating a guest session record.\n\nAll fields are optional for partial update semantics. Used only for administrative or compliance-mandated updates. Must not mutate ID; only session_token and creation time are modifiable.","required":[]},"IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the delete operation succeeded.\n\nTrue if the target was deleted or already non-existent; false if the operation failed."},"deletedId":{"type":"string","format":"uuid","description":"UUID of the deleted object, if applicable (may be null if delete removed nothing or was a logical/soft delete)."}},"required":["success"],"description":"Generic result wrapper for delete operations, indicating overall outcome and deleted entity reference for audit and client-side logic."},"IPageDiscussionboardUserProfile.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Used for paging through results, with first page indexed at 1."},"limit":{"type":"integer","description":"Number of items per page (page size). Used to control results page granularity in compliance with requirement 3.2 Performance & Scalability."},"display_name_query":{"type":"string","description":"Optional filter to search for profiles by display_name using substring match or similar logic. Supports UI profile searches and filtering workflows."},"created_after":{"type":"string","format":"date-time","description":"Optional filter, limits results to user profiles created after this timestamp. Enables time-windowed admin/analytics queries."},"created_before":{"type":"string","format":"date-time","description":"Optional filter limiting results to profiles created before this timestamp."}},"description":"Request body for searching or paging user profiles.\n\nField set implements typical discoverability/admin search features as referenced in user journey and admin UI requirements. Any property not provided is ignored or defaults to system settings. All properties optional except page/limit (required for paged lists).","required":[]},"IPageDiscussionboardUserProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for container (current, limit, total, pages).\n\nImplements industry-standard IPage contract for discoverable user profile APIs."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserProfile"},"description":"List of user profile records for the page.\n\nIncorporates all profile attributes as defined in the normalized profile schema and requirements."}},"required":["pagination","data"],"description":"Paginated (paged) user profile result container. Used for UI tables, admin search, and batch analytics workflows."},"IDiscussionboardUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique profile record identifier. DB-generated, immutable."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Belonged member's ID, linking profile to a registered account.\n\n1:1 mapping with member table as required by Oracle business rules and usability flows."},"display_name":{"type":"string","description":"Optional display name/nickname. Allows user-chosen public name distinct from membership username. Implements personalization & discovery requirements."},"bio":{"type":"string","description":"Short, optional biographical introduction field. Used in social/discoverability views and profile UIs. Supports null or omission for users who haven't provided a bio."},"avatar_url":{"type":"string","description":"Public URI (usually HTTP/S) for user's avatar/profile picture. May be null/omitted, must not contain sensitive content. Max length enforced at DB level (vendor-specific, e.g., VARCHAR(80000) in ERD)."},"created_at":{"type":"string","format":"date-time","description":"Profile creation timestamp for audit and admin tracking."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for version history/compliance visibility."}},"required":["id","discussionboard_member_id","created_at","updated_at"],"description":"User profile entity, used to customize and enhance member visibility in social/discoverability UIs.\n\nImplements profile requirements from Actors ERD and persona/journey documentation. Distinct from membership core data to maintain normalization."},"IDiscussionboardUserProfile.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Target member ID (must refer to registered membership).\n\nRequired for correct relational insertion at profile creation time."},"display_name":{"type":"string","description":"Optional display name. May be provided at or after creation."},"bio":{"type":"string","description":"Short introductory or biographical text, user-supplied, optional at creation."},"avatar_url":{"type":"string","description":"Avatar/profile image URI. Optional; may be added at or after creation."}},"required":["discussionboard_member_id"],"description":"Request body for creating a new user profile entity. All fields besides membership linkage are optional at creation time, in keeping with minimal onboarding requirements."},"IDiscussionboardUserProfile.IUpdate":{"type":"object","properties":{"display_name":{"type":"string","description":"Replacement or updated display name.\n\nAny change is constrained by uniqueness and system personalization requirements."},"bio":{"type":"string","description":"Replacement or updated biographical intro. Old text is overwritten; all newlines/formatting must comply with content policies."},"avatar_url":{"type":"string","description":"Replacement or updated avatar image URI. System should validate format/safety before accepting new value."}},"description":"Request body for updating a user profile entity. Any/all fields permitted; all properties wholly overwrite pre-existing values if provided.\n\nUsed in account personalization and admin moderation interfaces.","required":[]},"IPageDiscussionboardUserEmail.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paging through email listing, starts at 1."},"limit":{"type":"integer","description":"Maximum emails per page (page size)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optionally filter emails by member ID (for showing all emails for a selected account in admin or profile emails panel)."},"email_query":{"type":"string","description":"Search or filter emails by substring or match logic for audit/control use cases."},"is_verified":{"type":"boolean","description":"Optionally restrict search to verified (true) or unverified (false) emails, supporting compliance/reporting."},"is_primary":{"type":"boolean","description":"Optionally filter for primary (true) or non-primary (false) email contacts."},"added_after":{"type":"string","format":"date-time","description":"Filter for emails added after this timestamp (audit or campaign analytics)."},"added_before":{"type":"string","format":"date-time","description":"Filter for emails added before this timestamp."}},"description":"Request body for searching, paginating, or filtering user emails. Implements flexible parameter set for advanced admin/audit workflows as required by privacy and account management rules. All properties optional except paging/limit (required for paged lists).","required":[]},"IPageDiscussionboardUserEmail":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details following IPage contract: current page, total records, etc."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserEmail"},"description":"List of user email records for current page as per request query and paging params."}},"required":["pagination","data"],"description":"Paginated, filterable user email result set, used for listing and batch review in admin and account management UIs."},"IDiscussionboardGuestSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique guest session identifier."},"session_token":{"type":"string","description":"Opaque session token associated with the guest session. Only included for audit/logging or if required in compliance queries."},"created_at":{"type":"string","format":"date-time","description":"Time guest session was initiated."}},"required":["id","session_token","created_at"],"description":"Summary of guest session entity. Used in paginated guest session table or analytics report listing, represents a normalized row as retrieved for IPageIDiscussionboardGuestSummary."},"IDiscussionboardUserEmail":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"유저 이메일 엔티티의 기본 키입니다.\n\nPrisma schema의 'id' 컬럼에 해당하며, 각 이메일 레코드를 고유하게 식별합니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"이메일이 속한 Discussionboard 멤버의 고유 식별자입니다.\n\nPrisma의 discussionboard_members 테이블의 'id'와 연결된 외래키입니다."},"email":{"type":"string","format":"email","description":"이 계정에 연결된 이메일 주소입니다.\n\n회원 가입, 알림 전송, 계정 복구 등을 위해 사용됩니다."},"is_verified":{"type":"boolean","description":"이 이메일이 인증(verification)되었는지 여부를 나타내는 플래그입니다.\n\n이 필드는 non-functional requirement 및 인증 플로우 구현에 필수적입니다."},"is_primary":{"type":"boolean","description":"이 멤버의 기본/주 이메일인지 식별하는 플래그입니다.\n\n계정 로그인, 주요 알림, 패스워드 재설정 등에 사용됩니다."},"added_at":{"type":"string","format":"date-time","description":"이 이메일 정보가 DB에 추가(연결)된 시간입니다.\n\n접속 기록, 변경/추적, 관리 목적 등으로 활용되며, 3NF 정규화 원칙에 따라 저장됩니다."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"이메일 인증이 완료된 시간입니다. 인증되지 않은 경우 null입니다.\n\n인증 플로우/이력 추적 등에 사용되며, 3NF 원칙을 따릅니다."},{"type":"null"}],"description":"이메일 인증이 완료된 시간입니다. 인증되지 않은 경우 null입니다.\n\n인증 플로우/이력 추적 등에 사용되며, 3NF 원칙을 따릅니다."}},"required":["id","discussionboard_member_id","email","is_verified","is_primary","added_at"],"description":"유저 이메일 엔티티 스키마입니다.\n\nPrisma의 discussionboard_user_emails 테이블에 근거하며, 각 이메일에 대한 식별, 회원과의 연결, 인증 정보 및 관리 정보를 포함합니다.\n복수 이메일 지원, 인증 및 기본 이메일 구분 등 비즈니스 요구를 모두 구현합니다.\n"},"IDiscussionboardUserEmail.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"이메일을 연결할 Discussionboard 멤버의 고유 식별자(UUID)입니다."},"email":{"type":"string","format":"email","description":"신규 추가할 이메일 주소입니다. 이메일 형식 및 유효성 체크가 필요합니다."},"is_primary":{"type":"boolean","description":"이 이메일을 기본 메일로 등록할지 여부를 결정합니다."}},"required":["discussionboard_member_id","email","is_primary"],"description":"이메일 주소를 신규 등록하는 데 사용되는 요청 본문 타입입니다.\n\n회원 가입, 추가 이메일, 알림 수단 신규등록 등 요구사항에서 정의된 이메일 생성 흐름에 사용되며, 기본/보조 이메일 여부와 연결 멤버를 지정합니다.\n"},"IDiscussionboardUserEmail.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"수정할 이메일 주소입니다(선택적). 이미 등록된 값을 변경할 경우에 사용합니다."},"is_primary":{"type":"boolean","description":"이메일 주소의 기본 여부를 변경할 때 사용됩니다."},"is_verified":{"type":"boolean","description":"이 메일의 인증 완료 여부로 true/false 값입니다."}},"description":"회원 보유 이메일 정보를 수정하기 위한 요청 바디 타입입니다.\n\n이메일 주소 수정, 인증 상태 변경, 기본/보조 전환 등에 사용됩니다. 변경 가능한 각 필드는 선택적으로 입력할 수 있습니다.\n","required":[]},"IDiscussionboardUserAuth.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"조회/검색하고자 하는 인증 정보가 연결된 멤버의 고유 식별자입니다."},"provider":{"type":"string","description":"외부 인증/SSO 공급자명(예: 'google', 'facebook', 'github')"},"linked_at_from":{"type":"string","format":"date-time","description":"external auth 연결(생성) 시점의 시작 범위(검색/필터용)."},"linked_at_to":{"type":"string","format":"date-time","description":"external auth 연결(생성) 시점의 끝 범위(검색/필터용)."}},"description":"external 인증 정보(user auths) 목록을 조건별로 검색·조회하기 위한 요청 바디입니다.\n\nSSO 사용자 검색, 등록 이력 등 피드백을 위한 쿼리 기준이 포함됩니다.\n","required":[]},"IPageIDiscussionboardUserAuth":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserAuth"},"description":"현재 페이지에 포함된 user auth 엔티티 객체 목록입니다."}},"required":["pagination","data"],"description":"external 인증(user auth) 목록의 페이지네이션 컨테이너 타입입니다.\n\n결과 레코드와 pagination 메타 정보를 통합 반환합니다.\n"},"IDiscussionboardUserAuth":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"외부 인증 정보 레코드의 고유 ID입니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"해당 외부 인증이 연결된 discussionboard_members의 id 값입니다."},"provider":{"type":"string","description":"외부 인증 제공자(e.g., 'google', 'facebook')"},"provider_user_id":{"type":"string","description":"외부 인증 제공업체 내 사용자의 식별자(subject/ID)."},"linked_at":{"type":"string","format":"date-time","description":"외부 인증 연결(등록) 시각입니다."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"해지/연결 해제(또는 취소) 시각. 현재 연결 유지 상태라면 null입니다."},{"type":"null"}],"description":"해지/연결 해제(또는 취소) 시각. 현재 연결 유지 상태라면 null입니다."}},"required":["id","discussionboard_member_id","provider","provider_user_id","linked_at"],"description":"외부 인증(SSO/소셜 로그인 등) 기록 엔티티의 스키마입니다.\n\n각 플랫폼 회원에 대해 연동된 OAuth/SSO를 추적합니다.\n"},"IDiscussionboardUserAuth.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"이 외부 인증 정보를 연결할 discussionboard_members 식별자입니다."},"provider":{"type":"string","description":"연결할 외부 인증 공급자 이름(예: 'google', 'kakao')."},"provider_user_id":{"type":"string","description":"외부 인증 공급자의 내부 회원/계정 식별자입니다."}},"required":["discussionboard_member_id","provider","provider_user_id"],"description":"외부 인증 연동 정보를 신규 등록하는 요청 본문 타입입니다.\n\n외부 SSO 계정 연동/신규 연결시 사용합니다.\n"},"IDiscussionboardUserAuth.IUpdate":{"type":"object","properties":{"revoked_at":{"type":"string","format":"date-time","description":"이 외부 인증의 연결이 해지된 시각(ISO8601 형식). 연결 해제 시점 업데이트나 강제 해지에 사용됩니다."}},"description":"외부 인증(SSO, OAuth 등) 연결 기록의 상태를 변경(해지 등)할 때 사용하는 요청 바디 타입입니다.\n\nrevoked_at 등 변경이 허용된 필드를 갱신하는 용도로 사용합니다.\n","required":[]},"IDiscussionboardUserSession.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"로그인 세션이 연결된 멤버의 고유 식별자(UUID)입니다."},"created_at_from":{"type":"string","format":"date-time","description":"검색 범위의 세션 생성시각(시작)."},"created_at_to":{"type":"string","format":"date-time","description":"검색 범위의 세션 생성시각(끝)."},"revoked":{"type":"boolean","description":"이 세션이 해지/만료됐는지 여부로 검색할 때 사용합니다."}},"description":"로그인 세션(user sessions) 목록을 조건별로 조회하기 위한 요청 바디 타입입니다.\n\n특정 회원의 세션 리스트, 레인지 검색, 해지/유효 구분 등 상황에 활용됩니다.\n","required":[]},"IPageIDiscussionboardUserSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardUserSession"},"description":"현재 페이지에 포함된 로그인 세션 객체 배열입니다."}},"required":["pagination","data"],"description":"로그인 세션(user sessions) 목록에 대한 페이지네이션 리스트 컨테이너 타입입니다.\n"},"IDiscussionboardUserSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"로그인 세션의 고유 식별자입니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"이 세션이 연결된 discussionboard_members 회원의 id 값입니다."},"session_token":{"type":"string","description":"해당 세션의 인증 토큰 문자열로, 보이지 않는 암호화 난수입니다."},"created_at":{"type":"string","format":"date-time","description":"세션 생성 시각입니다."},"expires_at":{"type":"string","format":"date-time","description":"세션 만료 예정 시각입니다."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"해당 세션이 만료/해지된 시각(아직 유효하면 null)."},{"type":"null"}],"description":"해당 세션이 만료/해지된 시각(아직 유효하면 null)."}},"required":["id","discussionboard_member_id","session_token","created_at","expires_at"],"description":"로그인 세션(user session) 엔티티의 전체 구조 정의입니다.\n\n각 세션별로 만료, 해지, 로그인 시간 등을 추적합니다.\n"},"IDiscussionboardUserSession.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"신규 로그인 세션을 생성할 discussionboard_members의 ID입니다."},"session_token":{"type":"string","description":"생성되는 세션의 인증 토큰(암호화 랜덤 문자열)."},"expires_at":{"type":"string","format":"date-time","description":"신규 세션의 만료 예정 시각입니다(ISO 8601/UTC)."}},"required":["discussionboard_member_id","session_token","expires_at"],"description":"로그인 세션을 신규 생성할 때 사용하는 요청 바디 타입입니다.\n로그인 성공, 액세스 토큰 발급 시 각각 신규 세션이 추가됩니다.\n"},"IDiscussionboardUserSession.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"Opaque authentication token for this session. Used to identify a login state securely. Example: random UUID or JWT value, usually generated by the authentication mechanism.\n\nIn the context of updating a user session, this value may only be used for advanced operations such as session migration, device re-association, or system-level fixes. Most client-side session revocation or update operations will not modify this value."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp for the session (ISO 8601 format). Used to update session timeouts or prolong a session as part of user activity, system policies or admin overrides.\n\nRequired when updating session expiry rules for user logins or compliance actions. The new expiry date should always be in the future relative to current time. Changes are logged for audit trail."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the session was revoked/invalidated (ISO 8601). Set when forcing logout or ending session, either by user request, admin action, or system expiration.\n\nNullable: remains null for active sessions. Set to a timestamp when session is closed or forcibly log out a user from all devices (security requirement). All session changes must be audit-logged."},{"type":"null","format":"date-time","description":"Timestamp when the session was revoked/invalidated (ISO 8601). Set when forcing logout or ending session, either by user request, admin action, or system expiration.\n\nNullable: remains null for active sessions. Set to a timestamp when session is closed or forcibly log out a user from all devices (security requirement). All session changes must be audit-logged."}],"description":"Timestamp when the session was revoked/invalidated (ISO 8601). Set when forcing logout or ending session, either by user request, admin action, or system expiration.\n\nNullable: remains null for active sessions. Set to a timestamp when session is closed or forcibly log out a user from all devices (security requirement). All session changes must be audit-logged."}},"required":[],"description":"Data for updating a user session entry, as mapped to the discussionboard_user_sessions table.\n\nAll fields are optional and when supplied will overwrite the corresponding property for the session identified by {id}. This type is used for session revocation, expiry extension, or compliance updates. Refer to the Prisma schema's discussionboard_user_sessions model for allowed field semantics. All changes should be fully audit-logged."},"IDiscussionboardPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - page index to fetch (starting from 1 for the first page). Optional. Used for paged queries.\n\nUsed in combination with 'limit' for result segmentation."},"limit":{"type":"integer","description":"Pagination - number of posts per page. Optional. Used for paged queries; default set by application setting (may be 10~50).\n\nEnables client to request a specific window of results to match UX or efficiency needs. Max enforced for performance."},"search":{"type":"string","description":"Free-text search query (optional). Used to filter posts by title/body for keyword relevance.\n\nImplements text search feature, falling back to search engine or DB LIKE/ILIKE for title/body matching as required by requirements spec."},"board_id":{"type":"string","format":"uuid","description":"Board ID (discussionboard_boards.id) to filter posts within a specific board context.\n\nIf provided, limits results to posts made in this board. Enables board-centric feeds in frontend."},"author_id":{"type":"string","format":"uuid","description":"Author's account ID (discussionboard_members.id) to filter posts by a specific user.\n\nUsed for user profile views, moderator search, or admin drill-down on abusive users."},"sort_by":{"type":"string","description":"Field to sort by (e.g., 'created_at', 'updated_at', 'title'). Optional; default is sort by created_at descending.\n\nAllows the client to choose sorting field for the result set."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sort direction, either 'asc' (ascending) or 'desc' (descending). Optional. Default is 'desc'.\n\nWorks in conjunction with sort_by field to set result order."},{"const":"desc","description":"Sort direction, either 'asc' (ascending) or 'desc' (descending). Optional. Default is 'desc'.\n\nWorks in conjunction with sort_by field to set result order."}],"description":"Sort direction, either 'asc' (ascending) or 'desc' (descending). Optional. Default is 'desc'.\n\nWorks in conjunction with sort_by field to set result order."}},"required":[],"description":"Request filter for paginated and advanced list queries on discussionboard_posts.\n\nAll fields optionally restrict the set of posts to return and control pagination, filtering, and sorting for optimized UI/UX and admin workflows. Designed for flexible usage by post listing/searching endpoints as required by the requirements spec and Prisma schema. All filter fields are atomic, compliant with 3NF."},"IPageIDiscussionboardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata (current page, record count, total pages, etc) for the result list.\n\nConforms to the standard IPage.IPagination structure as required by OpenAPI conventions."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPost"},"description":"Array of post records for the current page. Each entry is a full atomic post object as returned by the main entity schema.\n\nSee IDiscussionboardPost for property breakdown."}},"required":["pagination","data"],"description":"A paginated result set of discussion board posts, as returned by the board listing/search operation.\n\nImplements the IPage<T> pattern with posts as T. Pagination ensures efficient front-end display and manageable data sizes."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the post. Serves as the immutable reference for all post operations and foreign-key lookups (e.g. comments, likes, audits)."},"board_id":{"type":"string","format":"uuid","description":"ID of the board (discussionboard_boards.id) that this post belongs to. Used for board-specific navigation, filtering and enforcement."},"author_id":{"type":"string","format":"uuid","description":"ID of the post author (discussionboard_members.id). Used for authorship tracking, profile aggregation, or permission checks (ownership model)."},"title":{"type":"string","description":"Title of the post. Atomic field with search/filter significance, visible on lists and detail views. 3NF compliance."},"body":{"type":"string","description":"Main content/body of the post. Contains the full raw text, markdown, or rich text allowed by platform policies. Not denormalized or computed."},"created_at":{"type":"string","format":"date-time","description":"Creation datetime (ISO 8601). Indicates when the post was originally published on the platform, used for display, sorting, and retention rules."},"updated_at":{"type":"string","format":"date-time","description":"Last update datetime for the post (ISO 8601). Used for flagging edited content and supporting moderation/audit workflows."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when post was deleted (if at all). Null for active posts. Used for soft deletion and compliance with audit/data retention. Settable only by privileged moderation actions."},{"type":"null","format":"date-time","description":"Timestamp when post was deleted (if at all). Null for active posts. Used for soft deletion and compliance with audit/data retention. Settable only by privileged moderation actions."}],"description":"Timestamp when post was deleted (if at all). Null for active posts. Used for soft deletion and compliance with audit/data retention. Settable only by privileged moderation actions."}},"required":["id","board_id","author_id","title","body","created_at","updated_at"],"description":"Atomic representation of a discussion board post, as defined by the 3NF-compliant discussionboard_posts table.\n\nIncludes identity, board association, author data, and all audit-important timestamp fields. All relationships are by foreign key only (no joined/denormalized data here). For use in single retrieves, list details, and as building block for post-related data structures (comments, likes, audits, etc.)."},"IDiscussionboardPost.ICreate":{"type":"object","properties":{"board_id":{"type":"string","format":"uuid","description":"Board to associate the post with (discussionboard_boards.id). Required on creation to ensure referential and system integrity."},"author_id":{"type":"string","format":"uuid","description":"Author account ID (discussionboard_members.id) who is posting. Auth context must ensure this matches logged-in user for non-admin/macro operations."},"title":{"type":"string","description":"Title of the post. Subject to application-side validation for length or unwanted characters. Initial value set here is final unless edited."},"body":{"type":"string","description":"Main body content of the post. May permit markdown, line breaks, or other rich text per platform settings. Subject to policy-based validation and spam/profanity filtering. Atomic."}},"required":["board_id","author_id","title","body"],"description":"Data required to create a new post in discussionboard_posts. Conforms to the creation endpoint input, and uses strictly normalized, atomic fields for referential and audit compliance.\n\nA successful request will create a post and return its full data structure. No derived or joined data is set at the time of creation."},"IDiscussionboardPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Update to the post's title (optional). Supply only if editing."},"body":{"type":"string","description":"Update to post body content (optional). Allows the author (or a moderator/admin) to update post text inline. Profanity filtering is required."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp for compliance or content removal (optional). Set only through delete endpoint or privileged mod/admin access. Null to restore post."},{"type":"null","format":"date-time","description":"Soft-delete timestamp for compliance or content removal (optional). Set only through delete endpoint or privileged mod/admin access. Null to restore post."}],"description":"Soft-delete timestamp for compliance or content removal (optional). Set only through delete endpoint or privileged mod/admin access. Null to restore post."}},"required":[],"description":"Payload for updating a post in the discussionboard_posts table.\n\nOnly permitted fields are included: title, body, deleted_at. Updates are audited, restricted by RBAC, and subject to content filtering rules. All updates are performed as partial/patch semantics unless otherwise dictated by method context."},"IDiscussionboardPostEdit.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - specifies which page of edit records to retrieve (1-based index)."},"limit":{"type":"integer","description":"Pagination control - number of edit entries to return per page. Optional; system default applies if not set."},"post_id":{"type":"string","format":"uuid","description":"ID of the post whose edits are to be queried. Enables per-post audit trail listing."},"editor_id":{"type":"string","format":"uuid","description":"ID of the member who performed the post edits. Used for searching edit logs by editor."},"edit_summary":{"type":"string","description":"Free-text, optional search term for matching edit summaries. Enables history annotation or detail search."},"edited_from":{"type":"string","format":"date-time","description":"Start datetime for edits (ISO 8601). Returns edits made on or after this date."},"edited_to":{"type":"string","format":"date-time","description":"End datetime for edits (ISO 8601). Returns edits made on or before this date."}},"required":[],"description":"Search/filter and pagination request for post edit log listing. Used by moderation and audit endpoints.\n\nAll fields are optional, supplying additional filtering for advanced workflow and compliance tasks. Maps directly to discussionboard_post_edits as referenced in specifications."},"IPageIDiscussionboardPostEdit":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details for the post edit log page (current, total pages, total records).\n\nStandard IPage.IPagination structure from OpenApi conventions."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostEdit"},"description":"Edit record entries for the returned page. Each record is an atomic post edit event, as returned by IDiscussionboardPostEdit."}},"required":["pagination","data"],"description":"Paginated set of post edit log records for board moderation, audit review, or compliance workflows.\n\nImplements IPage<T> pattern where T = IDiscussionboardPostEdit."},"IDiscussionboardPostEdit":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this post edit event. Atomic and audit-critical for logging post edit history."},"post_id":{"type":"string","format":"uuid","description":"ID of the post whose content was edited (discussionboard_posts.id). Used for audit trace and listing."},"editor_id":{"type":"string","format":"uuid","description":"ID of the member who performed the edit (discussionboard_members.id). Used for audit and compliance review."},"edit_summary":{"type":"string","description":"Optional summary or rationale for the edit event. Free text, nullable or empty for no summary. Used for moderation transparency."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp when the edit occurred (ISO 8601). Essential for audit trail and update sequencing."}},"required":["id","post_id","editor_id","edited_at"],"description":"Atomic record of a post edit event, as logged in discussionboard_post_edits. Each record represents a discrete change to a post's content, with actor and timing info for audit."},"IDiscussionboardPostEdit.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Target post ID to log the edit. Required."},"editor_id":{"type":"string","format":"uuid","description":"ID of the member performing this edit."},"edit_summary":{"type":"string","description":"Optional summary for this edit (reason, explanation, or meta info). Nullable; not all edits require an explicit summary."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp of edit event (ISO 8601 format). Set to current timestamp if not provided by client."}},"required":["post_id","editor_id","edited_at"],"description":"Payload to record a new post edit event in the audit log. Called by backend or moderation tool when a post is edited, for audit trail generation and history display."},"IDiscussionboardPostEdit.IUpdate":{"type":"object","properties":{"edit_summary":{"type":"string","description":"Updates/corrects the summary for this edit event. Only permitted field - history is otherwise immutable. Used for admin/mod annotation or compliance corrections."}},"required":[],"description":"Payload for updating fields of a post edit event (typically only edit_summary allowed)."},"IDiscussionboardPostLike.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - page to fetch in the like/dislike list."},"limit":{"type":"integer","description":"Number of like/dislike records to return per request."},"post_id":{"type":"string","format":"uuid","description":"Filter: Post to find reactions for. Used for analytics and UI list controls."},"user_id":{"type":"string","format":"uuid","description":"Filter: User who made the reaction. Used for personal like/dislike lists or moderator review."},"is_like":{"type":"boolean","description":"Filter: If true, select only 'like' entries. If false, only 'dislike' entries. Optional."},"from":{"type":"string","format":"date-time","description":"Start date/time for reactions. Filters like/dislikes on or after this timestamp in ISO 8601."},"to":{"type":"string","format":"date-time","description":"End date/time for reactions. Filters like/dislikes on or before this timestamp (ISO 8601)."}},"required":[],"description":"Request object for pagination, filtering, and analytics over the discussionboard_post_likes table.\n\nUsed by engagement analytics and moderation interfaces; all parameters are optional and may be combined for advanced filtering, date range analysis, or user activity review."},"IPageIDiscussionboardPostLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current query result set. Reference: Standard IPage.IPagination model. Fulfills the need for conveying total results, pages, and navigation metadata for client UI control. See core IPage documentation."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostLike"},"description":"Array of discussion board post like/dislike event entries for the requested page. Each entry is an atomic record of a user's reaction to a specific post, containing normalized audit fields. See IDiscussionboardPostLike for description."}},"required":["pagination","data"],"description":"Paginated result type for listing post like/dislike events. Implements the IPage pattern, wrapping a list of IDiscussionboardPostLike objects with standard pagination metadata. Used for result sets from search or listing APIs where multiple post like/dislike records are requested, e.g., analytics dashboards or moderation tools.\n\nBased on the requirements for engagement analytics and auditability, this structure ensures 3NF by never including denormalized fields or aggregate counts—lists only individual events with associated metadata.\n"},"IDiscussionboardPostLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post like/dislike entry. Foreign key from the discussionboard_post_likes table. Used to address, reference, or update a specific reaction event.\n\nFulfills requirement for audit log traceability and normalization. Always a valid UUID."},"post_id":{"type":"string","format":"uuid","description":"UUID referencing the target post this like/dislike pertains to. Must match one entry in the posts table. Used to join reactions to their associated content. Ensures referential integrity per business needs."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user who made the reaction (like/dislike). Points to member, mod, or admin. Fulfills engagement analytics, auditability, and anti-abuse logic. Required to disambiguate per-user reactions."},"is_like":{"type":"boolean","description":"True if this record is a 'like', false if 'dislike'. Implements the requirement for binary distinction of reactions. Used in analytics and moderation. No computed values; atomic per-normalized event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this reaction was recorded. ISO 8601. Enables audit trail, engagement timing analytics, anti-abuse throttling."}},"required":["id","post_id","user_id","is_like","created_at"],"description":"Discussion board post engagement event—an individual member, moderator, or admin's like/dislike of a post. Fulfills atomicity requirements for engagement analytics, anti-abuse measures, and audit trail.\n\nNo field is an aggregate or summary: every property is atomic and directly references core engagement events. See related IDiscussionboardPostLike.ICreate and IDiscussionboardPostLike.IUpdate types for mutation operations. Used in listing, detail, creation, and update APIs."},"IDiscussionboardPostLike.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"UUID of the post receiving the like/dislike. Must already exist. Referenced by post_id in the posts table. Enforces resource association per 3NF."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user recording the reaction (member, moderator, or admin). Must exist in members table. Required to support 1-record-per-user-per-post uniqueness and engagement analytics."},"is_like":{"type":"boolean","description":"True for a like, false for a dislike. Fulfills standard engagement pattern. Required for correct binary reaction storage."}},"required":["post_id","user_id","is_like"],"description":"Request schema to create a new like or dislike event on a discussion board post. Used in API endpoints for user engagement, reflecting the required 3NF compliance (only direct, atomic fields are supplied).\n\nRequired to implement exact engagement event semantics, enforce user uniqueness constraints, and allow subsequent audit log entries. All properties map directly to the normalized engagement event entity."},"IDiscussionboardPostLike.IUpdate":{"type":"object","properties":{"is_like":{"type":"boolean","description":"Update to the like/dislike state. Switches between 'like' or 'dislike'. Used to change a user's reaction to a post after their initial input. See requirements for reaction toggling, anti-abuse, and audit trail. Atomic field only; no aggregate or derived logic stored here."}},"required":["is_like"],"description":"Request schema for updating an existing like/dislike event on a post. Only the 'is_like' field is mutable, reflecting typical toggle/correction scenarios. Used in member-initiated edits or moderator/admin abuse review. Input is limited to atomic toggle—changing which type of reaction is represented."},"IDiscussionboardPostViews.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"If provided, filters to views for a specific post. Only valid UUIDs from posts table. Used in analytics or audit workflows to restrict search to certain content.\n\nOptional: omit for all posts."},"user_id":{"type":"string","format":"uuid","description":"If provided, restricts views to only those by a specific user member ID. Used for member-level analytics and abuse detection. Only valid UUIDs accepted.\n\nOptional: omit for all users."},"session_id":{"type":"string","format":"uuid","description":"If specified, filters for view events tied to a guest session or specific browser session token. Helps troubleshoot engagement patterns, guest analytics, or privacy compliance. Optional."},"viewed_after":{"type":"string","format":"date-time","description":"Show only views that occurred after this ISO 8601 timestamp. Enables time-window queries for analytics/dashboards. Optional."},"viewed_before":{"type":"string","format":"date-time","description":"Show only views that occurred before this ISO 8601 timestamp. Used with viewed_after for date-range filtering. Optional."},"page":{"type":"integer","description":"The page of results requested. Defaults to 1. Standard pagination control, indexed from 1."},"limit":{"type":"integer","description":"Number of records to return per page. Typical default is 20, max as specified in platform policy. Controls page size for scalable queries."}},"required":[],"description":"Request body schema for searching/listing post view audit entries. Used by API endpoints to filter, paginate, and segment view records in analytics, audit, or anti-abuse dashboards. Nullable/optional fields allow for granular filtering, reporting, and forensics in compliance/monitoring contexts.\n\nMaps directly to atomic fields in the view audit log. Supports time-windowing, user-based, or session-based queries for full flexibility. Helps meet audit, compliance, and engagement trend reporting requirement."},"IPageDiscussionboardPostViews":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the result set. See IPage.IPagination documentation.\n\nFulfills requirements for conveying current page, total records, and navigation info to consuming UIs."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostViews"},"description":"List of post view event records for this result page (see IDiscussionboardPostViews).\n\nAtomic audit log entries only. Each entry records exactly one post-view occurrence by a user/session."}},"required":["pagination","data"],"description":"Paginated result set for post view audit logs. Implements the platform-wide standard for result sets, combining pagination metadata with a page of atomic post view event records, each described by IDiscussionboardPostViews.\n\nNo aggregate or denormalized fields; allows clients to efficiently page through entire audit log data sets for compliance, analytics, or monitoring."},"IDiscussionboardPostViews":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post view record. Maps to primary key in discussionboard_post_views table.\n\nRequired for addressing, referencing, and audit trail linking."},"post_id":{"type":"string","format":"uuid","description":"ID of the post that was viewed (UUID from discussionboard_posts).\n\nUsed for correlating engagement and auditing views per post."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of authenticated user who viewed the post (if present), or null for guest views.\n\nEnables analytics segmentation by authenticated/guest status. Normalized per audit requirements."},{"type":"null"}],"description":"ID of authenticated user who viewed the post (if present), or null for guest views.\n\nEnables analytics segmentation by authenticated/guest status. Normalized per audit requirements."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Guest session token if available, identifies specific anonymous browser context. Null if unavailable or for authenticated users."},{"type":"null"}],"description":"Guest session token if available, identifies specific anonymous browser context. Null if unavailable or for authenticated users."},"viewed_at":{"type":"string","format":"date-time","description":"Timestamp when the post was viewed. ISO 8601. Enables audit sequence, compliance, analytics."}},"required":["id","post_id","viewed_at"],"description":"Single audit log record for a post view event. Captures atomic detail about each user/session accessing a post, enabling full compliance, analytics, and tracking. All fields are direct, normalized reflection of underlying DB event; never denormalized summary/aggregate data.\n\nNo composite or derived info—see business requirements for detailed audit and trace capabilities. Used for forensics, analytics, and anti-abuse measures."},"IDiscussionboardPostViews.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Target post's UUID as addressed in the posts table. Required for audit event relevance and enforcement of referential integrity."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"If present, identifies the authenticated user who performed the view event. Null if anonymous/guest."},{"type":"null"}],"description":"If present, identifies the authenticated user who performed the view event. Null if anonymous/guest."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"If provided, identifies guest session (browser context) performing the view event. Null for authenticated users or if no session is available."},{"type":"null"}],"description":"If provided, identifies guest session (browser context) performing the view event. Null for authenticated users or if no session is available."},"viewed_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of the view event. Required; platform sets to current time unless provided for audit replay/test."}},"required":["post_id","viewed_at"],"description":"Request schema for logging (creating) a new post view audit event in the system. Populates the denormalized event log of post engagement—aids compliance, analytics, and forensics workflows.\n\nNullable user_id and session_id fields support both authenticated and guest interactions, ensuring universal audit coverage. Date/time field allows timestamp control for log replay or test data creation."},"IDiscussionboardPostViews.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the audit log needs to associate/retroactively fix the user for this view event, this field may be set. Null for maintaining anonymity or clearing user association."},{"type":"null"}],"description":"If the audit log needs to associate/retroactively fix the user for this view event, this field may be set. Null for maintaining anonymity or clearing user association."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Allows retroactive association/correction of guest session for this audit entry. Null to remove/ignore."},{"type":"null"}],"description":"Allows retroactive association/correction of guest session for this audit entry. Null to remove/ignore."}},"required":[],"description":"Update schema for correcting or setting user/session references on an existing post view event (for compliance/audit quality). Does not allow modifying fundamental event properties or timestamps. Rarely used (primarily audit or compliance workflows)."},"IDiscussionboardComments.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Filter to comments for a specific post (UUID from discussionboard_posts). Used to return all comments for a given post in a UI discussion thread."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for replies to a specific comment (threaded/nested reply). Null for only top-level comments; given UUID for replies to a specific ancestor comment."},{"type":"null"}],"description":"Filter for replies to a specific comment (threaded/nested reply). Null for only top-level comments; given UUID for replies to a specific ancestor comment."},"author_id":{"type":"string","format":"uuid","description":"Restrict to comments by a single author (UUID from discussionboard_members/admins/mods). Used for user histories or moderation queries."},"created_after":{"type":"string","format":"date-time","description":"Fetch only comments created after this timestamp. Used for incremental loads, live updates, or time-window analytics."},"created_before":{"type":"string","format":"date-time","description":"Return only comments created before this timestamp. Used for bounded time-window queries."},"page":{"type":"integer","description":"Page of the comment result set requested (pagination). Defaults to 1, standard IPage scheme."},"limit":{"type":"integer","description":"Number of comment records per page (pagination). Platform default and max/min apply as policy."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."},{"const":"updated_at","description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."},{"const":"author_id","description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."}],"description":"Field to sort results by. Standard sorted columns are 'created_at', 'updated_at', and 'author_id'. See requirements for valid sort criteria."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending or 'desc' for descending order. Standard sort direction field for query APIs."},{"const":"desc","description":"Sort direction: 'asc' for ascending or 'desc' for descending order. Standard sort direction field for query APIs."}],"description":"Sort direction: 'asc' for ascending or 'desc' for descending order. Standard sort direction field for query APIs."}},"required":["post_id"],"description":"Search/list request for fetching comments under a post, optionally filtered by parent (threaded replies), author, or time window. Pagination and sorting supported per platform requirements. Used for main UI thread display, reply navigation, or user history review. Nullable fields allow fine-grained UI queries for dynamic thread expansion, moderation, or search interfaces."},"IPageDiscussionboardComments":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the current comment result set. Used for UI paging and navigation controls."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardComments"},"description":"Array of comment objects for the queried result set. Each record is a normalized (atomic) representation of a comment/reply entity, suitable for display, moderation, or audit. See IDiscussionboardComments for definition."}},"required":["pagination","data"],"description":"Paginated result structure for lists of comments (top-level or replies) under a post. Incorporates standard pagination metadata (see IPage.IPagination) and an array of normalized IDiscussionboardComments objects. Used in UI thread rendering, reply navigation, moderation, and audit tooling.\n\nNo aggregate/denormalized fields are included; each comment entry is atomic and independent, per requirements analysis for 3NF and auditability."},"IDiscussionboardComments":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this comment. Maps directly to primary key in discussionboard_comments DB table. Required for reply/thread navigation as well as moderation/audit reference. Always a valid UUID."},"post_id":{"type":"string","format":"uuid","description":"ID of the post to which this comment belongs (discussionboard_posts UUID). Core relationship for context, display, and referential integrity and aggregation."},"author_id":{"type":"string","format":"uuid","description":"ID of the member/mod/admin who authored the comment. Fulfills attribution, recommendation, and anti-abuse measures."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Recursive nullable UUID referencing parent comment if this is a reply/nested comment. Null for top-level comments (not replies). Fulfills threading feature requirements and reply hierarchy."},{"type":"null"}],"description":"Recursive nullable UUID referencing parent comment if this is a reply/nested comment. Null for top-level comments (not replies). Fulfills threading feature requirements and reply hierarchy."},"body":{"type":"string","description":"Text content of the comment/reply. Supports markdown/plaintext (refer to platform-wide formatting guidelines per business logic). Fulfills discussion, engagement, and moderation transparency needs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created. ISO 8601. Enables UI time-stamping, audit trail, and activity feeds."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update to the comment. ISO 8601. Used for displaying edit history or resolving race conditions in moderation."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If not null, this comment is soft-deleted (visibility depends on user role). Used to comply with audit/log retention and for compliance (e.g., GDPR right-to-be-forgotten)."},{"type":"null"}],"description":"If not null, this comment is soft-deleted (visibility depends on user role). Used to comply with audit/log retention and for compliance (e.g., GDPR right-to-be-forgotten)."}},"required":["id","post_id","author_id","body","created_at","updated_at"],"description":"Highly normalized record for a single comment or reply within a discussion board post. Fulfills atomistic engagement, display, moderation, and compliance requirements—no aggregate, derived, or denormalized fields. Includes recursion for reply threading, deletion/audit markers, and full attribution."},"IDiscussionboardComments.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"The unique identifier of the post to which this comment belongs. Reference to discussionboard_posts.id. Required when creating a new comment to properly associate it to the target post. Must be an existing post. Fulfills the requirement for linking comments to specific posts, ensuring threaded discussion integrity.\n\nBased on Prisma schema: discussionboard_comments.post_id (UUID). See ERD and schema documentation for details."},"author_id":{"type":"string","format":"uuid","description":"The unique identifier of the member creating the comment (registered user, moderator, or admin). Foreign key to discussionboard_members.id. Used to track the author for permissions, audit, and attribution. Must reference an existing user account.\n\nBased on discussionboard_comments.author_id."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID indicating the parent comment (for replies/nested threads). If null, this comment is a top-level comment on the post. Required for threaded/nested comment support as per Business Requirements 2.2.\n\nPrisma schema: discussionboard_comments.parent_id."},{"type":"null","format":"uuid","description":"Optional UUID indicating the parent comment (for replies/nested threads). If null, this comment is a top-level comment on the post. Required for threaded/nested comment support as per Business Requirements 2.2.\n\nPrisma schema: discussionboard_comments.parent_id."}],"description":"Optional UUID indicating the parent comment (for replies/nested threads). If null, this comment is a top-level comment on the post. Required for threaded/nested comment support as per Business Requirements 2.2.\n\nPrisma schema: discussionboard_comments.parent_id."},"body":{"type":"string","description":"The plaintext body/content of the comment. Cannot be empty. Supports multi-paragraph input with moderation limitations. Subject to profanity filtering and content policy per the requirements analysis and content policies.\n\nPrisma column: discussionboard_comments.body."}},"required":["post_id","author_id","body"],"description":"Request body for creating a new comment or reply in the political/economic discussion board. This type captures all atomic values needed for a creation operation within the 'discussionboard_comments' schema, including post association, author linkage, optional nesting (for replies), and actual comment content. All values align strictly with the database table structure and business requirements for comment auditing, moderation, and thread integrity."},"IDiscussionboardComments.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"The updated text content of the comment. Only the body is updatable, and is subject to moderation policies, profanity filtering, and content rules. Cannot be empty. Used for in-place comment edits as allowed by permissions.\n\nReference: discussionboard_comments.body."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the comment was updated. Automatically set by backend logic but can be provided for compliance or audit flows that record client-side update intent.\n\nReference: discussionboard_comments.updated_at."}},"required":["body"],"description":"Request body for updating a comment or reply in the discussion board. Allows updating only the text/body of a comment and the updated_at timestamp. Intended for member edits, moderator/admin corrections, and audit tracking. Enforces business rules for allowed content edits, validation, and audit trail capture. Based on the atomic structure and editing conventions described in requirements and the 3NF discussionboard_comments table."},"IDiscussionboardCommentLikes.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"Optional filter to query likes/dislikes by the associated comment's ID. Based on discussionboard_comment_likes.comment_id. Used for listing the reaction events on a particular comment. Enables focused analytics and history retrieval when reviewing a comment's engagement."},"user_id":{"type":"string","format":"uuid","description":"Optional filter to retrieve likes/dislikes by reacting user (member/mod/admin) ID. Used for querying a user's engagement footprint or listing their reactions on comments. Based on discussionboard_comment_likes.user_id."},"is_like":{"type":"boolean","description":"Optional filter to specify if querying for 'likes' (true) or 'dislikes' (false). Enables discrimination between types of reactions for reporting and targeting engagement analytics. Sourced from discussionboard_comment_likes.is_like."},"created_after":{"type":"string","format":"date-time","description":"Optional lower time boundary for filtering reactions based on creation timestamp. Used for audits, trend analysis, or rate-limiting by time window."},"created_before":{"type":"string","format":"date-time","description":"Optional upper time boundary for filtering reactions based on creation timestamp. Enables range queries over the activity log for reporting and compliance."},"page":{"type":"integer","format":"uint32","description":"Page number for paginated results. Used for controlling result batch as part of standard paging convention."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of results per page. Default set by backend, may be overridden for specific management or analytics operations."}},"required":[],"description":"Filtering, search, and pagination request body for listing or analyzing comment like/dislike events. This type allows flexible querying by comment, user, reaction type, and time window. Implements full audit, analytics, and administrator moderation review features for the engagement events on comments. Built to mirror the advanced search/filter capabilities described in business and moderation requirements."},"IPageDiscussionboardCommentLikes":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentLike"},"description":"Array of comment like/dislike records matching the query filter or search conditions. Each object represents a single engagement event between a user and a comment in the discussion board, including like/dislike indication, actor, comment reference, and timestamp."}},"required":["pagination","data"],"description":"A paginated result container for discussion board comment like/dislike event listings. Conforms to the standard IPage<T> contract for API consistency. Wraps both pagination metadata and an array of matching comment like/dislike events as defined by IDiscussionboardCommentLike. Used for returning search and analytics results in a normalized, extensible format across the board engagement APIs."},"IDiscussionboardCommentLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this comment like/dislike event. PK for discussionboard_comment_likes."},"comment_id":{"type":"string","format":"uuid","description":"ID of the comment to which this event applies. Foreign key to discussionboard_comments.id. Critical for joining, analytics, audit, and engagement features."},"user_id":{"type":"string","format":"uuid","description":"The user (member, mod, or admin) expressing the like/dislike. Used for audit trails, anti-abuse workflow, and engagement analytics. FK to discussionboard_members.id."},"is_like":{"type":"boolean","description":"Boolean flag indicating if this event is a 'like' (true) or a 'dislike' (false). Used for reporting, analytics, and engagement visualizations."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the like/dislike event was recorded. Used for anti-abuse, engagement trends, and audit log correlation."}},"required":["id","comment_id","user_id","is_like","created_at"],"description":"A single like/dislike event for a comment on the discussion board. Tracks relational links to the user, comment, and reaction type, and logs the event time. Implements auditing, engagement analytics, and content moderation as described in requirements and 3NF table definition."},"IDiscussionboardCommentLike.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"The target comment receiving the like/dislike. Required for linking the event to the correct comment in the engagement tracking infrastructure. Foreign key to discussionboard_comments.id."},"user_id":{"type":"string","format":"uuid","description":"ID of the user expressing the like/dislike. Must match a valid, active user who has permission to interact with the comment (member/mod/admin). FK to discussionboard_members.id."},"is_like":{"type":"boolean","description":"Flag indicating whether this event is a positive reaction ('like': true) or a negative one ('dislike': false). Drives engagement, moderation, and anti-abuse policies."}},"required":["comment_id","user_id","is_like"],"description":"Request body for registering a new like or dislike on a comment. Captures atomic details needed for event tracking, anti-abuse, and analytics. Built on the requirements for engagement, moderation, and per-user event auditing as specified in the database model and requirements report."},"IDiscussionboardCommentLike.IUpdate":{"type":"object","properties":{"is_like":{"type":"boolean","description":"Allows changing the reaction from like to dislike (true→false or vice versa). Only permitted for event owner, admins, or moderators according to reaction-editing rules. Used for anti-abuse and engagement auditing."}},"required":["is_like"],"description":"Request body for updating an existing like/dislike event on a comment. Only the reaction type is updatable post-creation, in accordance with moderation, anti-abuse, and analytics business needs."},"IDiscussionboardCommentLike.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the deleted comment like/dislike event."},"deleted":{"type":"boolean","description":"Boolean flag indicating successful deletion of the target event. Used for confirming event history and feedback to API consumers."}},"required":["id","deleted"],"description":"Response type confirming deletion of a like/dislike event on a comment. Returns the ID and a confirmation flag for client-side handling, audit log, or UI state management per moderation and engagement removal flows."},"IDiscussionboardCommentEdit.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"Filter for edits corresponding to a specific comment by its ID. Enables listing the full edit history for a particular comment (FK to discussionboard_comments.id)."},"editor_id":{"type":"string","format":"uuid","description":"Filter for edits performed by a specific member (FK to discussionboard_members.id). Useful for reviewing actions by a user across comments for moderation or audit purposes."},"edited_after":{"type":"string","format":"date-time","description":"Filter for edits performed after a certain timestamp. Used for audit trails, analytics, or time-bounded review of edits."},"edited_before":{"type":"string","format":"date-time","description":"Filter for edits before a specific timestamp. Enables reporting and compliance investigations tied to date ranges."},"page":{"type":"integer","format":"uint32","description":"Pagination parameter specifying which result page to start from."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of edit events to include per paginated page."}},"required":[],"description":"Filtering/search request body for retrieving or analyzing comment edit log events. Allows granular query by comment, editing user, edit timings, and standard paging options. Implements transparency and compliance requirements for audit trails and moderation insight."},"IPageIDiscussionboardCommentEdit":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentEdit"},"description":"Array of comment edit log events representing mutable history for each edited comment. Provides normalized, audit-ready per-edit snapshots for transparency and compliance workflows."}},"required":["pagination","data"],"description":"Paginated response type for arrays of comment edit history records. Used to transmit result sets for advanced comment edit queries, analytics, moderation, and compliance reporting. Wraps an array of full event details in a standard IPage structure. All entries reference individual comment revision/audit events."},"IDiscussionboardCommentEdit":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the comment edit event log row. PK for discussionboard_comment_edits."},"comment_id":{"type":"string","format":"uuid","description":"The comment to which this edit event applies. Enables retrieval of full edit history for a given comment (FK to discussionboard_comments.id)."},"editor_id":{"type":"string","format":"uuid","description":"The ID of the user who edited the comment (FK to discussionboard_members.id). Documents authorship for audit trails and dispute resolution."},"edit_summary":{"oneOf":[{"type":"string","description":"Optional textual note describing what was changed. Used for transparency in user-facing and moderator-facing edit streams. Useful for business requirements around audit compliance."},{"type":"null","description":"Optional textual note describing what was changed. Used for transparency in user-facing and moderator-facing edit streams. Useful for business requirements around audit compliance."}],"description":"Optional textual note describing what was changed. Used for transparency in user-facing and moderator-facing edit streams. Useful for business requirements around audit compliance."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp when this edit operation occurred. Standardized for audit and edit history UX. Aligns with other per-event time granularity in the platform."}},"required":["id","comment_id","editor_id","edited_at"],"description":"A single immutable event in the comment edit log history. Documents who altered a comment, when it occurred, and allows optional audit note. Fulfills the compliance and transparency requirements inherent in comment moderation and dispute resolution as articulated in requirement specifications."},"IDiscussionboardCommentEdit.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being edited. Required reference so edits are attached to the correct comment. FK to discussionboard_comments.id as per DB schema and ERD."},"editor_id":{"type":"string","format":"uuid","description":"ID of the user performing the edit. Readers are members, moderators, or admins with permission. FK to discussionboard_members.id per platform RBAC model."},"edit_summary":{"oneOf":[{"type":"string","description":"Optional free-text summary of the changes made in this edit event. Used for transparency, audit review, and moderation case annotation in the comment edit workflow."},{"type":"null","description":"Optional free-text summary of the changes made in this edit event. Used for transparency, audit review, and moderation case annotation in the comment edit workflow."}],"description":"Optional free-text summary of the changes made in this edit event. Used for transparency, audit review, and moderation case annotation in the comment edit workflow."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp for when the edit was performed. Required for establishing ordering in the audit trail and per event sequencing. Must be a valid ISO8601 timestamp."}},"required":["comment_id","editor_id","edited_at"],"description":"Request body for explicitly recording a comment edit event for audit or moderation. Allows supply of summary note and edit timestamp. Used when tracking manual edit overlays, moderator/admin correction flows, or explicit collaborative edit workflows aligned with compliance requirements."},"IDiscussionboardCommentEdit.IUpdate":{"type":"object","properties":{"edit_summary":{"oneOf":[{"type":"string","description":"A brief explanation of the change being made to the comment edit entry. This field is used for audit and moderation tracing transparency, and it allows the editor or moderator to summarize the edit for the record. Reference: edit_summary in discussionboard_comment_edits (Prisma schema)."},{"type":"null","description":"A brief explanation of the change being made to the comment edit entry. This field is used for audit and moderation tracing transparency, and it allows the editor or moderator to summarize the edit for the record. Reference: edit_summary in discussionboard_comment_edits (Prisma schema)."}],"description":"A brief explanation of the change being made to the comment edit entry. This field is used for audit and moderation tracing transparency, and it allows the editor or moderator to summarize the edit for the record. Reference: edit_summary in discussionboard_comment_edits (Prisma schema)."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp of the edit event (ISO 8601 string in UTC with timezone where possible). Reflects when the comment was last edited. Must be set by server logic at the time the update occurs. Reference: edited_at in discussionboard_comment_edits."}},"required":["edited_at"],"description":"Update payload for an existing comment edit log (discussionboard_comment_edits). This input supports partial updates to the edit summary or to correct the edited_at timestamp, per audit/compliance requirements. All changes to this object are preserved in the audit log for moderator review."},"IDiscussionboardCommentEdit.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID v4) of the deleted comment edit log entry."},"deleted_at":{"type":"string","format":"date-time","description":"The timestamp when the comment edit entry was deleted. Used for audit trail and compliance review."}},"required":["id","deleted_at"],"description":"Result of deleting a comment edit log entry in the system for discussion board audit purposes. Used for frontend confirmation or later audit reference. Contains primary key and deletion timestamp."},"IDiscussionboardCommentView.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number for pagination. Defaults to the first page if omitted or null."},{"type":"null","format":"uint32","description":"Page number for pagination. Defaults to the first page if omitted or null."}],"description":"Page number for pagination. Defaults to the first page if omitted or null."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"The maximum number of items to return in a single page. This implements system limits for analytical and abuse-prevention scenarios. Default is 100; maximums may be constrained server-side."},{"type":"null","format":"uint32","description":"The maximum number of items to return in a single page. This implements system limits for analytical and abuse-prevention scenarios. Default is 100; maximums may be constrained server-side."}],"description":"The maximum number of items to return in a single page. This implements system limits for analytical and abuse-prevention scenarios. Default is 100; maximums may be constrained server-side."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"When supplied, filter the views by comment_id. Fetches only events related to that comment. Used in comment analytics and moderation dashboards."},{"type":"null","format":"uuid","description":"When supplied, filter the views by comment_id. Fetches only events related to that comment. Used in comment analytics and moderation dashboards."}],"description":"When supplied, filter the views by comment_id. Fetches only events related to that comment. Used in comment analytics and moderation dashboards."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"If supplied, filter view tracking records to only those associated with a given user (viewer). Null for guest/anonymous/omitted cases."},{"type":"null","format":"uuid","description":"If supplied, filter view tracking records to only those associated with a given user (viewer). Null for guest/anonymous/omitted cases."}],"description":"If supplied, filter view tracking records to only those associated with a given user (viewer). Null for guest/anonymous/omitted cases."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter comment view events by the anonymous session context (session_id field), matching session token assigned to a guest viewer. For audit and analytics."},{"type":"null","format":"uuid","description":"Filter comment view events by the anonymous session context (session_id field), matching session token assigned to a guest viewer. For audit and analytics."}],"description":"Filter comment view events by the anonymous session context (session_id field), matching session token assigned to a guest viewer. For audit and analytics."},"viewed_after":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for view events occurring after this datetime (ISO 8601 format)."},{"type":"null","format":"date-time","description":"Filter for view events occurring after this datetime (ISO 8601 format)."}],"description":"Filter for view events occurring after this datetime (ISO 8601 format)."},"viewed_before":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for view events occurring before this datetime (ISO 8601 format)."},{"type":"null","format":"date-time","description":"Filter for view events occurring before this datetime (ISO 8601 format)."}],"description":"Filter for view events occurring before this datetime (ISO 8601 format)."}},"description":"Request object for searching, filtering, or paginating comment view audit events in the discussion board. Allows for advanced analytics, anti-abuse audit, and engagement reporting by specifying any combination of parameters.","required":[]},"IPageIDiscussionboardCommentView":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentView"},"description":"The array of comment view audit entries matching filter/search. Each entry is a full atomic view event."}},"required":["pagination","data"],"description":"A page of discussion board comment view audit entries. Contains pagination metadata and array of comment view event entries (IPage<T> container)."},"IDiscussionboardCommentView":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID v4) for the comment view event tracking record (discussionboard_comment_views.id)."},"comment_id":{"type":"string","format":"uuid","description":"Foreign key ID referencing the comment being viewed. Links to discussionboard_comments.id."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Foreign key of the viewing member (discussionboard_members.id); may be null for guest/anonymous views."},{"type":"null","format":"uuid","description":"Foreign key of the viewing member (discussionboard_members.id); may be null for guest/anonymous views."}],"description":"Foreign key of the viewing member (discussionboard_members.id); may be null for guest/anonymous views."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Session identifier for the view event; for analytics and anonymous/guest management."},{"type":"null","format":"uuid","description":"Session identifier for the view event; for analytics and anonymous/guest management."}],"description":"Session identifier for the view event; for analytics and anonymous/guest management."},"viewed_at":{"type":"string","format":"date-time","description":"Timestamp when this view event was recorded, always in ISO 8601 format (UTC with time zone information)."}},"required":["id","comment_id","viewed_at"],"description":"Atomic audit/event record of a single comment view for analytics and anti-abuse event tracking. Reference: discussionboard_comment_views table. Contains foreign keys for comment, (optional) user, (optional) session, and timing."},"IDiscussionboardCommentView.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the comment being viewed. Must match existing discussionboard_comments.id."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"The member ID (if authenticated) of the viewing user; null if not logged in (guest/anonymous view)."},{"type":"null","format":"uuid","description":"The member ID (if authenticated) of the viewing user; null if not logged in (guest/anonymous view)."}],"description":"The member ID (if authenticated) of the viewing user; null if not logged in (guest/anonymous view)."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional session identifier token for tracking guest/anonymous/identified session engagement. Useful in analytics, audit, and conversion reporting. Null if not available."},{"type":"null","format":"uuid","description":"Optional session identifier token for tracking guest/anonymous/identified session engagement. Useful in analytics, audit, and conversion reporting. Null if not available."}],"description":"Optional session identifier token for tracking guest/anonymous/identified session engagement. Useful in analytics, audit, and conversion reporting. Null if not available."},"viewed_at":{"type":"string","format":"date-time","description":"Datetime when the comment view event occurred, always as an ISO 8601 string (UTC with time zone)."}},"required":["comment_id","viewed_at"],"description":"Creation request for a new comment view event tracking record in discussionboard_comment_views. Captures context for analytics, engagement tracking, or anti-abuse audit. All fields relate to atomic event logging."},"IDiscussionboardCommentView.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Updated viewer member's UUID; may be used for merging session-to-user after login. Optional; null to clear."},{"type":"null","format":"uuid","description":"Updated viewer member's UUID; may be used for merging session-to-user after login. Optional; null to clear."}],"description":"Updated viewer member's UUID; may be used for merging session-to-user after login. Optional; null to clear."},"session_id":{"oneOf":[{"type":"string","format":"uuid","description":"Changes/updates to guest session context for the view event. Optional; null to clear."},{"type":"null","format":"uuid","description":"Changes/updates to guest session context for the view event. Optional; null to clear."}],"description":"Changes/updates to guest session context for the view event. Optional; null to clear."},"viewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Corrected or amended view timestamp for the entry. Optional; null if unchanged."},{"type":"null","format":"date-time","description":"Corrected or amended view timestamp for the entry. Optional; null if unchanged."}],"description":"Corrected or amended view timestamp for the entry. Optional; null if unchanged."}},"required":[],"description":"Update payload for a discussionboard_comment_views record. Supports corrections for user/session mapping, or analytic timing fixup. All fields optional."},"IPageIDiscussionboardReport.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number for paginating report entry results."},{"type":"null","format":"uint32","description":"Page number for paginating report entry results."}],"description":"Page number for paginating report entry results."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Number of results to include per page. Allows adjustment per analytic/audit consumption needs. Default is 100 if omitted."},{"type":"null","format":"uint32","description":"Number of results to include per page. Allows adjustment per analytic/audit consumption needs. Default is 100 if omitted."}],"description":"Number of results to include per page. Allows adjustment per analytic/audit consumption needs. Default is 100 if omitted."},"status":{"oneOf":[{"type":"string","description":"If set, restricts result set to only those reports with the provided status (e.g., pending, resolved, reviewed, rejected). Reference: 'status' in discussionboard_reports."},{"type":"null","description":"If set, restricts result set to only those reports with the provided status (e.g., pending, resolved, reviewed, rejected). Reference: 'status' in discussionboard_reports."}],"description":"If set, restricts result set to only those reports with the provided status (e.g., pending, resolved, reviewed, rejected). Reference: 'status' in discussionboard_reports."},"reporting_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, filters reports to only those filed by a specified member (the reporter)."},{"type":"null","format":"uuid","description":"If set, filters reports to only those filed by a specified member (the reporter)."}],"description":"If set, filters reports to only those filed by a specified member (the reporter)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters results to only those reports regarding a specific post (if supplied)."},{"type":"null","format":"uuid","description":"Filters results to only those reports regarding a specific post (if supplied)."}],"description":"Filters results to only those reports regarding a specific post (if supplied)."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters results to only those reports concerning a specific comment (if supplied)."},{"type":"null","format":"uuid","description":"Filters results to only those reports concerning a specific comment (if supplied)."}],"description":"Filters results to only those reports concerning a specific comment (if supplied)."},"reason":{"oneOf":[{"type":"string","description":"Substring search filter for report reasons. Enables searching for all reports matching a particular reason type/content."},{"type":"null","description":"Substring search filter for report reasons. Enables searching for all reports matching a particular reason type/content."}],"description":"Substring search filter for report reasons. Enables searching for all reports matching a particular reason type/content."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"If supplied, only reports created after this timestamp are returned."},{"type":"null","format":"date-time","description":"If supplied, only reports created after this timestamp are returned."}],"description":"If supplied, only reports created after this timestamp are returned."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"If supplied, only reports created before this timestamp are returned."},{"type":"null","format":"date-time","description":"If supplied, only reports created before this timestamp are returned."}],"description":"If supplied, only reports created before this timestamp are returned."}},"description":"Request payload for listing, paginating, and searching user-submitted content report entries in the discussion board platform. Used for admin/moderation dashboards and analytics reporting.","required":[]},"IPageIDiscussionboardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReport"},"description":"Array of full content report entries matching search, filter and paging criteria."}},"required":["pagination","data"],"description":"Result container for paginated, filtered, or searched set of content report entries (IPage<T> container for discussionboard_reports records). Contains pagination metadata and array of content reports."},"IDiscussionboardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID v4) of the report event entry (discussionboard_reports.id)."},"reporting_member_id":{"type":"string","format":"uuid","description":"Foreign key UUID of the member who submitted the report (discussionboard_members.id)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If not null, the UUID of the post being reported (discussionboard_posts.id). Null if the report addresses a comment instead."},{"type":"null","format":"uuid","description":"If not null, the UUID of the post being reported (discussionboard_posts.id). Null if the report addresses a comment instead."}],"description":"If not null, the UUID of the post being reported (discussionboard_posts.id). Null if the report addresses a comment instead."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If not null, the UUID of the comment being reported (discussionboard_comments.id). Null if the report concerns a post."},{"type":"null","format":"uuid","description":"If not null, the UUID of the comment being reported (discussionboard_comments.id). Null if the report concerns a post."}],"description":"If not null, the UUID of the comment being reported (discussionboard_comments.id). Null if the report concerns a post."},"reason":{"type":"string","description":"The reason specified by the user for submitting the report. E.g., 'hate speech', 'spam', 'off-topic', matching the business requirement for user-provided rationale."},"status":{"type":"string","description":"Current status/state of the report (e.g., 'pending', 'reviewed', 'resolved', 'rejected'). Only controlled enum values set by application logic, not free-form."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the report was filed in the system. ISO 8601."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the report was first reviewed in moderation. Null if never reviewed."},{"type":"null","format":"date-time","description":"When the report was first reviewed in moderation. Null if never reviewed."}],"description":"When the report was first reviewed in moderation. Null if never reviewed."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the report was closed (resolved, rejected, etc). Null until status finalized."},{"type":"null","format":"date-time","description":"When the report was closed (resolved, rejected, etc). Null until status finalized."}],"description":"When the report was closed (resolved, rejected, etc). Null until status finalized."},"moderation_note":{"oneOf":[{"type":"string","description":"Any moderator/admin notes as to resolution or comments for audit/compliance. Optional and nullable; may be blank until reviewed."},{"type":"null","description":"Any moderator/admin notes as to resolution or comments for audit/compliance. Optional and nullable; may be blank until reviewed."}],"description":"Any moderator/admin notes as to resolution or comments for audit/compliance. Optional and nullable; may be blank until reviewed."}},"required":["id","reporting_member_id","reason","status","created_at"],"description":"Full record of a content report/event in the discussion board (discussionboard_reports). Contains reporter info, target post/comment, full rationale, state, audit trail timestamps, and moderation notes."},"IDiscussionboardReport.ICreate":{"type":"object","properties":{"reporting_member_id":{"type":"string","format":"uuid","description":"Foreign key UUID of the user who is reporting the content (discussionboard_members.id)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post being reported (if this is a post report). Null for comment-based reports."},{"type":"null","format":"uuid","description":"ID of the post being reported (if this is a post report). Null for comment-based reports."}],"description":"ID of the post being reported (if this is a post report). Null for comment-based reports."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment being reported (if this is a comment report). Null for post-based reports."},{"type":"null","format":"uuid","description":"ID of the comment being reported (if this is a comment report). Null for post-based reports."}],"description":"ID of the comment being reported (if this is a comment report). Null for post-based reports."},"reason":{"type":"string","description":"Discretionary free-form string specifying the reason for reporting this content (e.g., 'spam', 'abusive language', etc.)."}},"required":["reporting_member_id","reason"],"description":"Create request for a new content report in discussionboard_reports. Captures user/rationale and report target (post or comment). All audit/event timing is server generated."},"IDiscussionboardReport.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Update to report status (e.g., 'reviewed', 'resolved', 'rejected'). Only controlled status values allowed by application logic."},"moderation_note":{"oneOf":[{"type":"string","description":"Update or append to the moderation/admin note for this report's review/backtrack. Null or omitted for no change."},{"type":"null","description":"Update or append to the moderation/admin note for this report's review/backtrack. Null or omitted for no change."}],"description":"Update or append to the moderation/admin note for this report's review/backtrack. Null or omitted for no change."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for when review occurred. Typically system generated. Null or omitted for no change."},{"type":"null","format":"date-time","description":"Timestamp for when review occurred. Typically system generated. Null or omitted for no change."}],"description":"Timestamp for when review occurred. Typically system generated. Null or omitted for no change."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp indicating when the report was closed/resolved. Null or omitted for open reports."},{"type":"null","format":"date-time","description":"Timestamp indicating when the report was closed/resolved. Null or omitted for open reports."}],"description":"Timestamp indicating when the report was closed/resolved. Null or omitted for open reports."}},"description":"Update payload for an existing user-submitted content report in the discussion board (discussionboard_reports). Used by admin/moderator as part of the review and resolution workflow. All relationship and referential validity is enforced by business logic.","required":[]},"IPageIDiscussionboardModerationAction.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"페이지 번호\n\n목록 조회 시 현재 페이지를 지정합니다. 기본값은 1이고, 1 이상의 값만 허용됩니다."},"limit":{"type":"integer","description":"페이지당 항목 수\n\n한 페이지에 표시할 게시판 운영액션 수를 지정합니다. 기본값은 보통 100이나, 시스템 설정에 따라 다를 수 있습니다."},"actionType":{"type":"string","description":"운영 액션의 유형 필터링\n\n조회할 액션 유형(예: `warn`, `ban`, `content_removal` 등)으로 필터링할 때 사용됩니다."},"actorId":{"type":"string","format":"uuid","description":"운영 액션을 수행한 관리자, 운영자의 고유 식별자(UUID)\n\n특정 캐릭터가 수행한 액션만을 조회할 때 사용합니다."},"targetId":{"type":"string","format":"uuid","description":"운영 액션이 적용된 대상(post, comment 등)의 고유 식별자(UUID)\n\n특정 대상에 수행된 액션만 따로 볼 때 사용됩니다."},"from":{"type":"string","format":"date-time","description":"조회 기간 시작 시각(ISO8601)\n\n이 시간 이후의 액션만 조회합니다."},"to":{"type":"string","format":"date-time","description":"조회 기간 종료 시각(ISO8601)\n\n이 시점 이전의 액션만 조회합니다."}},"required":["page","limit"],"description":"운영 액션 목록 API 조회 요청 DTO입니다.\n\n운영자 또는 관리자가 게시판 내 다양한 액션 로그(예: 경고, 금지(차단), 게시물 삭제 등)를 확인할 때 사용하는 검색 및 페이지네이션 요청 형식입니다.\n각 필드는 Prisma 테이블 및 ERD의 discussionboard_moderation_actions 항목과 연결되며, 액션 유형, 액터, 적용 대상, 기간 등 다양한 조건으로 필터링을 지원합니다.\n\n비즈니스 도메인 상 주로 운영 대시보드, 사고 및 정책 리뷰, 투명성 보고 기능에서 활용됩니다."},"IPageIDiscussionboardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationAction"},"description":"운영 액션 레코드 목록입니다.\n\n각 항목이 하나의 운영 기록(경고, 차단, 콘텐츠 삭제 등)을 의미합니다."}},"required":["pagination","data"],"description":"게시판의 운영 액션 레코드들의 페이지네이션 결과 컨테이너입니다.\n\n단건 또는 검색 결과와 함께 페이지 정보(pagination), 운영 액션 레코드 목록(data)를 제공합니다.\nPrisma discussionboard_moderation_actions 스키마 구조를 따르며, API 요청 결과 목록 전달을 위해 공통적으로 활용합니다."},"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"운영 액션 레코드의 고유 식별자(UUID)\n\n프라이머리 키로 사용되며, 액션 추적과 상세 조회 시 활용됩니다."},"actorAdminId":{"type":"string","format":"uuid","description":"액션을 수행한 관리자 계정의 식별자\n\ndiscussionboard_admins.id FK 참조. 관리자(운영자)가 직접 액션을 취한 경우만 기록됨. 없으면 null."},"actorModeratorId":{"type":"string","format":"uuid","description":"액션을 집행한 담당 운영자 식별자\n\ndiscussionboard_moderators.id FK 참조. 일반 운영자가 직접 집행했을 때만 값이 있으며, 관리자/일반 계정과 구분됩니다."},"actorMemberId":{"type":"string","format":"uuid","description":"액션 주체가 일반 멤버(회원)인 경우 그 식별자\n\ndiscussionboard_members.id FK 참조. 예를 들어, 신고자가 직접 취소하는 등의 이벤트에서 사용됩니다."},"relatedReportId":{"type":"string","format":"uuid","description":"관계된 신고 레코드의 식별자\n\ndiscussionboard_reports.id FK 참조. 해당 액션이 어느 신고에 따라 이루어졌는지 연결하며, 없으면 null 입니다."},"targetPostId":{"type":"string","format":"uuid","description":"액션 대상이 된 게시물의 식별자\n\ndiscussionboard_posts.id FK 참조. 대상이 게시물일 때만 값이 있습니다."},"targetCommentId":{"type":"string","format":"uuid","description":"액션 대상이 된 댓글의 식별자\n\ndiscussionboard_comments.id FK 참조. 댓글에 대한 조치일 때 값이 있습니다."},"actionType":{"type":"string","description":"운영 액션의 유형\n\n예: 'warn'(경고), 'ban'(차단), 'content_removal'(게시물/댓글 삭제) 등 비즈니스 정책 상 정의된 코드가 들어갑니다."},"actionReason":{"type":"string","description":"운영 액션에 대한 상세 사유\n\n운영 상 추가 설명, 판결문, 경위 등 자유 서술형 메모필드입니다."},"createdAt":{"type":"string","format":"date-time","description":"운영 액션의 집행 일시(ISO8601)\n\n액션이 실제 실행된 시점 또는 이벤트 발생 시각을 기록합니다."}},"required":["id","actionType","createdAt"],"description":"게시판 운영 액션 단일 레코드 DTO입니다.\n\ndiscussionboard_moderation_actions Prisma 모델 및 ERD, 요구사항 분석의 운영/제재 기록 요구를 충족합니다. 관리자가 게시물 삭제, 유저 차단, 경고 등 대표적 운영 정책 이력 정보를 이 엔티티로 관리하며, 감사 추적 및 비즈니스 정책 이력 구현에 필수적인 구조입니다."},"IDiscussionboardModerationAction.ICreate":{"type":"object","properties":{"actorAdminId":{"type":"string","format":"uuid","description":"액션을 수행하는 관리자 식별자(UUID)\n\ndiscussionboard_admins.id FK에 해당하며, 관리자 집행일 때 필수."},"actorModeratorId":{"type":"string","format":"uuid","description":"액션을 수행하는 운영자 식별자(UUID)\n\ndiscussionboard_moderators.id FK. 운영자 집행일 때 지정."},"actorMemberId":{"type":"string","format":"uuid","description":"액션 주체가 일반 회원인 경우(UUID)\n\ndiscussionboard_members.id FK."},"relatedReportId":{"type":"string","format":"uuid","description":"연관 신고 레코드 식별자(UUID)\n\ndiscussionboard_reports.id FK 참조."},"targetPostId":{"type":"string","format":"uuid","description":"제재 또는 액션 대상 게시물 식별자(UUID)\n\ndiscussionboard_posts.id FK."},"targetCommentId":{"type":"string","format":"uuid","description":"제재 또는 액션 대상 댓글 식별자(UUID)\n\ndiscussionboard_comments.id FK."},"actionType":{"type":"string","description":"운영 액션 유형\n\n경고(warn), 차단(ban), 콘텐츠 삭제(content_removal) 등 운영 정책 코드값이 필수."},"actionReason":{"type":"string","description":"운영 액션 사유 설명\n\n운영/제재가 내려진 근거나 컨텍스트 설명 필드."}},"required":["actionType"],"description":"운영 액션 생성 요청 DTO입니다.\n\ndiscussionboard_moderation_actions 테이블 새 레코드 생성 시 사용되며, 액션 유형, 주체, 대상, 사유 및 연관 신고 정보를 포함합니다.\n비즈니스 도메인 상 운영 정책 적용(제재, 경고, 콘텐츠 삭제 등)에 활용됩니다."},"IDiscussionboardModerationAction.IUpdate":{"type":"object","properties":{"actionType":{"type":"string","description":"액션 유형 변경(필요시)\n\n운영 대시보드에서 잘못 기입된 액션 유형을 수정하거나 정책 이동 시 사용."},"actionReason":{"type":"string","description":"운영 액션 상세 사유 변경\n\n내부 부연 설명 또는 감사 보강 목적으로 수정이 허용되는 경우가 있습니다."}},"required":[],"description":"운영 액션 기록 수정 DTO입니다.\n\ndiscussionboard_moderation_actions 테이블의 액션 레코드의 정보(유형, 상세사유 등)를 수정/보완하는 데 사용되는 요청 형식입니다."},"IPageIDiscussionboardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBan"},"description":"조회된 밴(차단) 기록들의 배열\n\n각 항목이 유저에 적용된 차단 이력 단일 엔티티를 의미합니다."}},"required":["pagination","data"],"description":"밴(차단) 레코드들에 대한 검색/목록 API 응답 표준 페이징 컨테이너입니다.\n\nPrisma discussionboard_bans 스키마 구조와 완전하게 매핑되며, 페이지네이션 및 관리/운영 대시보드 또는 감사 뷰 용도로 활용됩니다."},"IDiscussionboardBan.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"요청하는 페이지 번호\n\n기본값 1, 1 이상의 값이어야 함."},"limit":{"type":"integer","description":"한 페이지 결과 개수\n\n최대값 제한 설정 가능, 보통 기본 100."},"status":{"type":"string","description":"차단 상태 필터링\n\nactive/expired/lifted/scheduled 등 운영 정책상 상태별 필터에 활용."},"targetType":{"type":"string","description":"차단 대상 유형 (관리자, 운영자, 회원 구분)\n\nadmin, moderator, member 중 하나."},"actorId":{"type":"string","format":"uuid","description":"차단을 집행한 관리자/운영자의 FK UUID\n\n특정 액터의 차단 이력만 따로 조회하고 싶을 때."},"from":{"type":"string","format":"date-time","description":"조회 시작일시(ISO8601)\n\n이 날짜 이후의 차단 기록만 조회."},"to":{"type":"string","format":"date-time","description":"조회 종료일시(ISO8601)\n\n이 날짜 이전의 차단 기록만 조회."}},"required":["page","limit"],"description":"밴(차단) 레코드 목록 / 검색용 요청 DTO입니다.\n\n운영자/관리자가 차단 내역을 기간, 대상, 상태 등으로 필터하거나 페이지별로 검색하는 데 사용합니다.\nPrisma discussionboard_bans DB 스키마 주석 구조를 완전하게 따르며, 각 요청 필드는 비즈니스/감사 요구와 일치합니다."},"IDiscussionboardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"밴(차단) 레코드 고유 식별자(UUID)\n\nPrisma PK, 이력 조회와 정책 적용 관리에서 활용."},"targetAdminId":{"type":"string","format":"uuid","description":"차단 대상이 '관리자'인 경우의 관리자 FK 식별자\n\ndiscussionboard_admins.id (nullable)"},"targetModeratorId":{"type":"string","format":"uuid","description":"차단 대상이 '운영자'일 때의 운영자 FK\n\ndiscussionboard_moderators.id (nullable)"},"targetMemberId":{"type":"string","format":"uuid","description":"차단 대상이 '회원'일 때의 회원 FK\n\ndiscussionboard_members.id (nullable)"},"actorAdminId":{"type":"string","format":"uuid","description":"차단을 집행한 관리자 FK(UUID)\n\ndiscussionboard_admins.id(Nullable)"},"actorModeratorId":{"type":"string","format":"uuid","description":"차단을 집행한 운영자 FK(UUID)\n\ndiscussionboard_moderators.id(Nullable)"},"banReason":{"type":"string","description":"차단 사유\n\n운영상 제재 근거나 조치 이유. 예: 심각한 규정 위반, 반복 스팸 등."},"banStartAt":{"type":"string","format":"date-time","description":"차단 시작 시각(ISO8601)\n\n정책 상 집행이 유예되는 경우 future로 입력될 수 있음."},"banEndAt":{"type":"string","format":"date-time","description":"차단 종료(만료) 시각(ISO8601, nullable)\n\n영구차단일 경우 null이거나 매우 먼 미래값."},"status":{"type":"string","description":"차단 상태\n\nactive(진행 중), expired(만료), lifted(해제), scheduled(예정) 등 정책 enum 코드."},"createdAt":{"type":"string","format":"date-time","description":"밴(차단) 레코드 생성 일시(감사)\n\n제재 내역 최초 등록 시각."},"updatedAt":{"type":"string","format":"date-time","description":"마지막 차단 상태 변경/수정 일시\n\n상태 전이, 정책 수정 이력 추적용."}},"required":["id","banReason","banStartAt","status","createdAt","updatedAt"],"description":"게시판 회원/운영진/관리자의 차단 이력(밴) 레코드 DTO입니다.\n\ndiscussionboard_bans Prisma DB 테이블과 ERD를 기반으로 하며, 각 항목은 차단 대상, 집행자, 기간, 사유, 상태를 완전하게 명시합니다.\n정책 감사, 제재 이력 조회, 유저 상태 관리 등 주요 비즈니스 로직에서 활용됩니다."},"IDiscussionboardBan.ICreate":{"type":"object","properties":{"targetAdminId":{"type":"string","format":"uuid","description":"차단 대상이 '관리자'인 경우 해당 관리자 FK(UUID)\ndiscussionboard_admins.id (nullable)"},"targetModeratorId":{"type":"string","format":"uuid","description":"차단 대상이 '운영자'라면 운영자 FK(UUID)\ndiscussionboard_moderators.id"},"targetMemberId":{"type":"string","format":"uuid","description":"차단 대상이 '회원'일 때의 FK(UUID)\ndiscussionboard_members.id"},"actorAdminId":{"type":"string","format":"uuid","description":"차단을 집행한 관리자 FK\n\ndiscussionboard_admins.id"},"actorModeratorId":{"type":"string","format":"uuid","description":"차단 집행자가 운영자인 경우 운영자 FK(UUID)\ndiscussionboard_moderators.id"},"banReason":{"type":"string","description":"제재/차단 사유\n\n운영상 적절한 차단 사유를 1~여러 줄 서술형으로 입력."},"banStartAt":{"type":"string","format":"date-time","description":"차단/제재 시작 시각(ISO8601)\n\n유예시 미래 시점 가능."},"banEndAt":{"type":"string","format":"date-time","description":"차단 만료 시각(ISO8601, nullable)\n\n영구차단은 null로 명시 허용."},"status":{"type":"string","description":"차단 레코드의 현재 상태\n\nactive(활성), expired(만료), lifted(해제), scheduled(예정) 등 ENUM 코드."}},"required":["banReason","banStartAt","status"],"description":"밴(차단) 레코드 생성 요청 DTO입니다.\n\n운영진이 특정 계정(관리자/운영자/회원)에 신규 차단을 적용할 때 사용하는 요청 형식입니다.\n차단 대상, 집행자, 기간, 사유, 상태 등의 필드를 포함하며, 정책 추적으로 완전한 정보 제공을 목표로 합니다."},"IDiscussionboardBan.IUpdate":{"type":"object","properties":{"banReason":{"type":"string","description":"차단/제재 사유 변경\n\n예: 잘못 입력된 사유나 관리 정책 변경 시 설명 보정."},"banStartAt":{"type":"string","format":"date-time","description":"차단 시작 시각(변경 가능)\n\n정책상 예정일/집행일을 수정해야 할 경우 사용."},"banEndAt":{"type":"string","format":"date-time","description":"차단 만료/해제 시각(변경 가능)\n\n만기명시, 해제 일정 조정 등."},"status":{"type":"string","description":"차단 상태 수정\n\nactive, expired, lifted, scheduled 등 정책상 상태값 코드."}},"required":[],"description":"밴(차단) 레코드 수정 DTO입니다.\n\n제재 이력의 사유, 기간, 상태 등을 변경할 때 사용합니다. discussionboard_bans 테이블에서 직접 변경 가능한 필드들만 명확히 정의합니다."},"IDiscussionboardBan.IDeleteResponse":{"type":"object","properties":{"deletedId":{"type":"string","format":"uuid","description":"삭제(또는 비활성화)된 밴 레코드의 고유 식별자(UUID)\n\n차단 관리 및 정책 변경 결과를 API 응답으로 확인하기 위해 반환됩니다."},"deletedAt":{"type":"string","format":"date-time","description":"삭제(또는 비활성화) 시각(ISO8601)\n\n실제 삭제 처리 완료 시각."},"message":{"type":"string","description":"상태 메시지 또는 추가 설명 (예: 정책상 완전 삭제 불가 등)\n\n정책/감사 니즈에 따라 부연 설명 제공."}},"required":["deletedId","deletedAt"],"description":"밴(차단) 레코드 삭제(또는 정책상 비활성화) 결과 응답 DTO입니다.\n\n정책상 영구 삭제는 불가하고, 삭제 응답으로는 키와 처리 시점, 부가 메시지가 주로 반환됩니다. 정책/감사상 일부 항목은 완전 삭제 불가이거나 soft-delete일 수 있습니다."},"IDiscussionboardWarning.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"페이지 번호를 지정합니다. 이 값은 반환되는 결과에서 어느 페이지를 조회할 것인지를 결정합니다. 생략 시 기본값은 1입니다. 예를 들어 첫 페이지를 조회하려면 1을 입력하면 됩니다.\n\n비즈니스 목적: 경고 이력 리스트에서 페이지를 넘기기 위해 사용합니다."},{"type":"null","description":"페이지 번호를 지정합니다. 이 값은 반환되는 결과에서 어느 페이지를 조회할 것인지를 결정합니다. 생략 시 기본값은 1입니다. 예를 들어 첫 페이지를 조회하려면 1을 입력하면 됩니다.\n\n비즈니스 목적: 경고 이력 리스트에서 페이지를 넘기기 위해 사용합니다."}],"description":"페이지 번호를 지정합니다. 이 값은 반환되는 결과에서 어느 페이지를 조회할 것인지를 결정합니다. 생략 시 기본값은 1입니다. 예를 들어 첫 페이지를 조회하려면 1을 입력하면 됩니다.\n\n비즈니스 목적: 경고 이력 리스트에서 페이지를 넘기기 위해 사용합니다."},"limit":{"oneOf":[{"type":"integer","description":"한 페이지에 조회할 최대 레코드 수를 지정합니다. 값이 주어지지 않으면 시스템 기본값을 사용합니다. 예를 들면 20, 50, 100 중 하나로 선택할 수 있습니다.\n\n비즈니스 목적: 일부 사용자(관리자, 모더레이터)는 대량 검색을 위해 높은 limit 값을 사용할 수 있습니다. 기본 limit은 관리자가 정책상 정할 수 있습니다."},{"type":"null","description":"한 페이지에 조회할 최대 레코드 수를 지정합니다. 값이 주어지지 않으면 시스템 기본값을 사용합니다. 예를 들면 20, 50, 100 중 하나로 선택할 수 있습니다.\n\n비즈니스 목적: 일부 사용자(관리자, 모더레이터)는 대량 검색을 위해 높은 limit 값을 사용할 수 있습니다. 기본 limit은 관리자가 정책상 정할 수 있습니다."}],"description":"한 페이지에 조회할 최대 레코드 수를 지정합니다. 값이 주어지지 않으면 시스템 기본값을 사용합니다. 예를 들면 20, 50, 100 중 하나로 선택할 수 있습니다.\n\n비즈니스 목적: 일부 사용자(관리자, 모더레이터)는 대량 검색을 위해 높은 limit 값을 사용할 수 있습니다. 기본 limit은 관리자가 정책상 정할 수 있습니다."},"target_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 운영자인 경우, 해당 관리자 역할 엔티티의 UUID입니다. 이 값은 discussionboard_admins 테이블의 id 값과 일치해야 합니다. nullable이므로 관리자가 아닌 경우 null을 전달합니다.\n\n실제 비즈니스에서는 admin 경고 검색이나 통계, 특정 사용자를 기준으로 한 경고 검색에 활용됩니다."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 운영자인 경우, 해당 관리자 역할 엔티티의 UUID입니다. 이 값은 discussionboard_admins 테이블의 id 값과 일치해야 합니다. nullable이므로 관리자가 아닌 경우 null을 전달합니다.\n\n실제 비즈니스에서는 admin 경고 검색이나 통계, 특정 사용자를 기준으로 한 경고 검색에 활용됩니다."}],"description":"경고를 받은 대상이 운영자인 경우, 해당 관리자 역할 엔티티의 UUID입니다. 이 값은 discussionboard_admins 테이블의 id 값과 일치해야 합니다. nullable이므로 관리자가 아닌 경우 null을 전달합니다.\n\n실제 비즈니스에서는 admin 경고 검색이나 통계, 특정 사용자를 기준으로 한 경고 검색에 활용됩니다."},"target_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 모더레이터인 경우, 해당 역할 엔티티의 UUID입니다. discussionboard_moderators.id와 일치해야 하며, 대상이 아닐 경우에는 null이 들어갑니다.\n\n비즈니스적으로 모더레이터 대상 경고 현황을 필터링할 때 사용됩니다."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 모더레이터인 경우, 해당 역할 엔티티의 UUID입니다. discussionboard_moderators.id와 일치해야 하며, 대상이 아닐 경우에는 null이 들어갑니다.\n\n비즈니스적으로 모더레이터 대상 경고 현황을 필터링할 때 사용됩니다."}],"description":"경고를 받은 대상이 모더레이터인 경우, 해당 역할 엔티티의 UUID입니다. discussionboard_moderators.id와 일치해야 하며, 대상이 아닐 경우에는 null이 들어갑니다.\n\n비즈니스적으로 모더레이터 대상 경고 현황을 필터링할 때 사용됩니다."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 일반 회원인 경우, 해당 회원 엔티티의 UUID입니다. discussionboard_members의 id와 일치해야 하며, 검색에서 지정하지 않으면 전체 회원 경고가 모두 검색됩니다.\n\n일반적으로 유저별 경고 현황 확인 및 통계 산출을 위해 사용됩니다."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 일반 회원인 경우, 해당 회원 엔티티의 UUID입니다. discussionboard_members의 id와 일치해야 하며, 검색에서 지정하지 않으면 전체 회원 경고가 모두 검색됩니다.\n\n일반적으로 유저별 경고 현황 확인 및 통계 산출을 위해 사용됩니다."}],"description":"경고를 받은 대상이 일반 회원인 경우, 해당 회원 엔티티의 UUID입니다. discussionboard_members의 id와 일치해야 하며, 검색에서 지정하지 않으면 전체 회원 경고가 모두 검색됩니다.\n\n일반적으로 유저별 경고 현황 확인 및 통계 산출을 위해 사용됩니다."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 지정한 관리자의 UUID입니다. discussionboard_admins.id와 일치하며, 경고 내역의 발동 내역 중 관리자가 부여한 경우 기록됩니다. 관리자가 아닌 경우 null로 지정합니다.\n\n비즈니스적 용도: 특정 관리자가 내린 경고만 필터링하고자 할 때 사용됩니다."},{"type":"null","format":"uuid","description":"경고를 지정한 관리자의 UUID입니다. discussionboard_admins.id와 일치하며, 경고 내역의 발동 내역 중 관리자가 부여한 경우 기록됩니다. 관리자가 아닌 경우 null로 지정합니다.\n\n비즈니스적 용도: 특정 관리자가 내린 경고만 필터링하고자 할 때 사용됩니다."}],"description":"경고를 지정한 관리자의 UUID입니다. discussionboard_admins.id와 일치하며, 경고 내역의 발동 내역 중 관리자가 부여한 경우 기록됩니다. 관리자가 아닌 경우 null로 지정합니다.\n\n비즈니스적 용도: 특정 관리자가 내린 경고만 필터링하고자 할 때 사용됩니다."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 부여한 모더레이터인 경우 그 엔티티 UUID입니다. discussionboard_moderators.id값과 일치합니다. 관리자가 경고한 경우 null이 들어가며, 검색에서 이 필드를 이용하여 특정 모더레이터의 경고 이력 검색이 가능합니다."},{"type":"null","format":"uuid","description":"경고를 부여한 모더레이터인 경우 그 엔티티 UUID입니다. discussionboard_moderators.id값과 일치합니다. 관리자가 경고한 경우 null이 들어가며, 검색에서 이 필드를 이용하여 특정 모더레이터의 경고 이력 검색이 가능합니다."}],"description":"경고를 부여한 모더레이터인 경우 그 엔티티 UUID입니다. discussionboard_moderators.id값과 일치합니다. 관리자가 경고한 경우 null이 들어가며, 검색에서 이 필드를 이용하여 특정 모더레이터의 경고 이력 검색이 가능합니다."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"해당 경고가 리포트(신고) 처리 결과라면 연결된 신고 엔티티의 UUID입니다. discussionboard_reports.id와 일치합니다.\n\n비즈니스 용도: 특정 신고 처리 과정을 트래킹할 때 사용하며, 신고-경고 매칭 통계를 내거나 순차 처리 이력 조회에 활용됩니다."},{"type":"null","format":"uuid","description":"해당 경고가 리포트(신고) 처리 결과라면 연결된 신고 엔티티의 UUID입니다. discussionboard_reports.id와 일치합니다.\n\n비즈니스 용도: 특정 신고 처리 과정을 트래킹할 때 사용하며, 신고-경고 매칭 통계를 내거나 순차 처리 이력 조회에 활용됩니다."}],"description":"해당 경고가 리포트(신고) 처리 결과라면 연결된 신고 엔티티의 UUID입니다. discussionboard_reports.id와 일치합니다.\n\n비즈니스 용도: 특정 신고 처리 과정을 트래킹할 때 사용하며, 신고-경고 매칭 통계를 내거나 순차 처리 이력 조회에 활용됩니다."},"reason":{"oneOf":[{"type":"string","description":"경고 사유(사람이 읽는 설명, 예: '경미한 욕설', '부적절한 광고')로, 필터/검색 키워드 조건에 사용할 수 있습니다. 단순 부분 매칭 또는 전체 일치로 쿼리할 수 있습니다.\n\n관리자가 사유별 경고 현황을 파악하거나, 특정 유형(예: 광고성 경고)만 통계내는 분석에 활용됩니다."},{"type":"null","description":"경고 사유(사람이 읽는 설명, 예: '경미한 욕설', '부적절한 광고')로, 필터/검색 키워드 조건에 사용할 수 있습니다. 단순 부분 매칭 또는 전체 일치로 쿼리할 수 있습니다.\n\n관리자가 사유별 경고 현황을 파악하거나, 특정 유형(예: 광고성 경고)만 통계내는 분석에 활용됩니다."}],"description":"경고 사유(사람이 읽는 설명, 예: '경미한 욕설', '부적절한 광고')로, 필터/검색 키워드 조건에 사용할 수 있습니다. 단순 부분 매칭 또는 전체 일치로 쿼리할 수 있습니다.\n\n관리자가 사유별 경고 현황을 파악하거나, 특정 유형(예: 광고성 경고)만 통계내는 분석에 활용됩니다."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"경고 생성 시점(조회 시작일, ISO 8601 형식의 타임스탬프)입니다. 예: 2024-07-21T00:00:00Z\n\n이 필드는 기간 조건으로서, 이 날짜 이후의 경고만 검색한다는 의미입니다."},{"type":"null","format":"date-time","description":"경고 생성 시점(조회 시작일, ISO 8601 형식의 타임스탬프)입니다. 예: 2024-07-21T00:00:00Z\n\n이 필드는 기간 조건으로서, 이 날짜 이후의 경고만 검색한다는 의미입니다."}],"description":"경고 생성 시점(조회 시작일, ISO 8601 형식의 타임스탬프)입니다. 예: 2024-07-21T00:00:00Z\n\n이 필드는 기간 조건으로서, 이 날짜 이후의 경고만 검색한다는 의미입니다."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"경고 생성 시점(조회 종료일, ISO 8601 형식 타임스탬프)입니다. 예: 2024-07-22T23:59:59Z\n\n입력하면 해당 날짜 이전까지의 경고 내역만 필터링합니다."},{"type":"null","format":"date-time","description":"경고 생성 시점(조회 종료일, ISO 8601 형식 타임스탬프)입니다. 예: 2024-07-22T23:59:59Z\n\n입력하면 해당 날짜 이전까지의 경고 내역만 필터링합니다."}],"description":"경고 생성 시점(조회 종료일, ISO 8601 형식 타임스탬프)입니다. 예: 2024-07-22T23:59:59Z\n\n입력하면 해당 날짜 이전까지의 경고 내역만 필터링합니다."},"sort":{"oneOf":[{"const":"created_at_asc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"const":"created_at_desc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"const":"reason_asc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"const":"reason_desc","description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."},{"type":"null","enum":["created_at_asc","created_at_desc","reason_asc","reason_desc",null],"description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."}],"description":"정렬 방식 지정 옵션입니다.\n- created_at_asc: 생성일 오름차순(과거→최신 경고)\n- created_at_desc: 생성일 내림차순(최신→과거)\n- reason_asc: 경고사유 가나다/알파벳순\n- reason_desc: 경고사유 역순\n\n현업에서는 이 옵션을 통해 화면 페이징, 통계 분석 시 원하는 순서대로 정렬합니다.\n\n선택하지 않으면 서버 기본값(예: created_at_desc)로 동작합니다."}},"description":"discussionboard_warnings 테이블을 대상으로 하는 경고 이력 검색(리스트 조회/필터링)에 사용되는 검색 조건 및 페이징, 정렬 요청 타입입니다.\n\n이 타입은 관리자/모더레이터가 경고자별, 발동자별, 특정 기간, 사유별로 경고 내역을 검색하거나, 통계 및 화면 리스트에 데이터를 제공할 때 사용합니다. 각 필드는 실제 DB 컬럼 및 ERD 설계 규칙에 기반하여 3NF(제3정규형)에 따라 필요 최소한의 원자 데이터를 제공합니다.\n\n설명은 Prisma schema 주석과 운영 현장에서의 활용 목적을 기반으로 수록했습니다.","required":[]},"IPageIDiscussionboardWarning":{"type":"object","description":"IPageIDiscussionboardWarning는 게시판 경고 엔티티(Discussion Board Warning)에 대한 페이지네이션된 검색 결과를 제공하는 컨테이너 타입입니다. 이 타입은 시스템 내의 경고 조치 기록들을 효율적으로 조회, 정렬, 필터링, 그리고 대규모 결과셋에서 일부만 반환하는데 사용됩니다.\n\n구성 요소:\n- pagination: 현재 페이지, 전체 페이지 수, 총 레코드 수, 페이지 몰림 제한 등 페이지네이션에 대한 정보를 포함합니다.\n- data: IDiscussionboardWarning 객체 배열로, 각각의 게시판 경고 엔티티(경고 ID, 경고 대상, 사유, 일시 등)의 상세 정보를 포함합니다.\n\n비즈니스 설명:\n이 컨테이너는 관리자 및 모더레이터가 경고 기록 전체를 탐색하거나 특정 조건(대상, 발신자, 기간, 사유 등)별로 조회할 때 사용됩니다. 모든 데이터는 3정규형(3NF) 원칙에 따라 원자적으로 저장됩니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarning"},"description":"경고 개별 엔티티 배열입니다."}},"required":["pagination","data"]},"IDiscussionboardWarning":{"type":"object","description":"IDiscussionboardWarning는 게시판 내에서 관리자 혹은 모더레이터에 의해 사용자(관리자/모더레이터/일반회원)에게 발급된 개별 경고(Warning)에 대한 상세 정보를 담는 타입입니다. 각 경고는 경고 대상 유형, 발급자 유형, 경고 발생 원인, 연관 신고 등의 필드와 생성 시각 정보가 포함됩니다.\n\n이 타입의 각 필드는 원본 PRISMA discussionboard_warnings 정의와 일치하며, 경고 기록의 투명한 감사, 점진적 제재, 반복 위반 분석 등에 사용됩니다.","properties":{"id":{"type":"string","format":"uuid","description":"경고 레코드의 UUID. PRISMA discussionboard_warnings.id와 1:1 매칭됨."},"target_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 관리자(ADMIN)일 경우의 ID. PRISMA discussionboard_warnings.target_admin_id(Nullable). 관리자가 아닌 경우 null."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 관리자(ADMIN)일 경우의 ID. PRISMA discussionboard_warnings.target_admin_id(Nullable). 관리자가 아닌 경우 null."}],"description":"경고를 받은 대상이 관리자(ADMIN)일 경우의 ID. PRISMA discussionboard_warnings.target_admin_id(Nullable). 관리자가 아닌 경우 null."},"target_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 받은 대상이 모더레이터(MODERATOR)일 경우의 ID. PRISMA discussionboard_warnings.target_moderator_id(Nullable). 그렇지 않으면 null."},{"type":"null","format":"uuid","description":"경고를 받은 대상이 모더레이터(MODERATOR)일 경우의 ID. PRISMA discussionboard_warnings.target_moderator_id(Nullable). 그렇지 않으면 null."}],"description":"경고를 받은 대상이 모더레이터(MODERATOR)일 경우의 ID. PRISMA discussionboard_warnings.target_moderator_id(Nullable). 그렇지 않으면 null."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 일반 회원(MEMBER)일 경우의 ID. PRISMA discussionboard_warnings.target_member_id. 그렇지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 일반 회원(MEMBER)일 경우의 ID. PRISMA discussionboard_warnings.target_member_id. 그렇지 않으면 null."}],"description":"경고 대상이 일반 회원(MEMBER)일 경우의 ID. PRISMA discussionboard_warnings.target_member_id. 그렇지 않으면 null."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 부여한 자가 관리자일 경우의 ID. PRISMA discussionboard_warnings.actor_admin_id. 없으면 null."},{"type":"null","format":"uuid","description":"경고를 부여한 자가 관리자일 경우의 ID. PRISMA discussionboard_warnings.actor_admin_id. 없으면 null."}],"description":"경고를 부여한 자가 관리자일 경우의 ID. PRISMA discussionboard_warnings.actor_admin_id. 없으면 null."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고를 부여한 자가 모더레이터일 경우의 ID. PRISMA discussionboard_warnings.actor_moderator_id. 없으면 null."},{"type":"null","format":"uuid","description":"경고를 부여한 자가 모더레이터일 경우의 ID. PRISMA discussionboard_warnings.actor_moderator_id. 없으면 null."}],"description":"경고를 부여한 자가 모더레이터일 경우의 ID. PRISMA discussionboard_warnings.actor_moderator_id. 없으면 null."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"이 경고가 특정 신고(Report)에 의거한 것인 경우 그 신고의 ID. PRISMA discussionboard_warnings.related_report_id. 없으면 null."},{"type":"null","format":"uuid","description":"이 경고가 특정 신고(Report)에 의거한 것인 경우 그 신고의 ID. PRISMA discussionboard_warnings.related_report_id. 없으면 null."}],"description":"이 경고가 특정 신고(Report)에 의거한 것인 경우 그 신고의 ID. PRISMA discussionboard_warnings.related_report_id. 없으면 null."},"reason":{"type":"string","description":"경고 발부 사유. 예: '경미한 욕설', '주제 벗어남'. 원본 PRISMA discussionboard_warnings.reason 컬럼 설명에 따름."},"created_at":{"type":"string","format":"date-time","description":"경고가 발부된 UTC 시각. PRISMA discussionboard_warnings.created_at과 일치."}},"required":["id","reason","created_at"]},"IDiscussionboardWarning.ICreate":{"type":"object","description":"IDiscussionboardWarning.ICreate는 system 내에서 새로운 경고 기록을 생성할 때 사용하는 입력 객체입니다. 경고 대상, 발급자, 사유 등 PRISMA schema의 필수 컬럼을 모두 포함합니다. 생성 시점과 관련 신고는 policy에 따라 optional로 제공 가능하며, 실제 DB 입력 시 누락될 수 있습니다.\n\n이 타입은 주로 관리자 또는 모더레이터가 특정 사용자에 대해 경고를 등록할 때 사용되며, 클라이언트와 관리자 도구 API 전송에서 활용됩니다.","properties":{"target_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 관리자일 경우 지정. 필요하지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 관리자일 경우 지정. 필요하지 않으면 null."}],"description":"경고 대상이 관리자일 경우 지정. 필요하지 않으면 null."},"target_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 모더레이터일 경우 지정. 필요하지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 모더레이터일 경우 지정. 필요하지 않으면 null."}],"description":"경고 대상이 모더레이터일 경우 지정. 필요하지 않으면 null."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 대상이 회원일 경우 지정. 필요하지 않으면 null."},{"type":"null","format":"uuid","description":"경고 대상이 회원일 경우 지정. 필요하지 않으면 null."}],"description":"경고 대상이 회원일 경우 지정. 필요하지 않으면 null."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 발급자가 관리자일 경우 지정."},{"type":"null","format":"uuid","description":"경고 발급자가 관리자일 경우 지정."}],"description":"경고 발급자가 관리자일 경우 지정."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"경고 발급자가 모더레이터일 경우 지정."},{"type":"null","format":"uuid","description":"경고 발급자가 모더레이터일 경우 지정."}],"description":"경고 발급자가 모더레이터일 경우 지정."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"이 경고가 기반한 신고 아이디(optional). null 등록 시 미연결."},{"type":"null","format":"uuid","description":"이 경고가 기반한 신고 아이디(optional). null 등록 시 미연결."}],"description":"이 경고가 기반한 신고 아이디(optional). null 등록 시 미연결."},"reason":{"type":"string","description":"경고 사유 코멘트 (예: '스팸글 지속' 등). 비어 있을 수 없음."}},"required":["reason"]},"IDiscussionboardWarning.IUpdate":{"type":"object","description":"IDiscussionboardWarning.IUpdate는 기존의 경고 기록을 갱신(수정)할 때 사용하는 타입입니다. 수정 가능 필드는 사유(reason), 관련 신고 연결 등 제한적입니다. 보안 정책상 발급자/대상 변경은 권한자만 허용되며, 모든 수정 내역은 감사 로그에 기록됩니다.\n\n이 엔티티는 PRISMA schema의 discussionboard_warnings에 저장된 원본 데이터 중 일부만 갱신하는 패치 목적에 사용됩니다.","properties":{"reason":{"oneOf":[{"type":"string","description":"경고 사유를 갱신하는 필드(선택적). null 지정은 미수정 의미."},{"type":"null","description":"경고 사유를 갱신하는 필드(선택적). null 지정은 미수정 의미."}],"description":"경고 사유를 갱신하는 필드(선택적). null 지정은 미수정 의미."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연결된 신고 아이디 갱신(선택적). null이면 연결 해제."},{"type":"null","format":"uuid","description":"연결된 신고 아이디 갱신(선택적). null이면 연결 해제."}],"description":"연결된 신고 아이디 갱신(선택적). null이면 연결 해제."}},"required":[]},"IDiscussionboardWarning.IDeleteResponse":{"type":"object","description":"IDiscussionboardWarning.IDeleteResponse는 단일 경고 레코드 삭제 요청의 결과를 반환합니다. 보통 삭제된 경고의 ID와 삭제 성공 여부, 혹은 추가 메시지를 포함하며, 시스템 정책에 따라 필드는 조정될 수 있습니다.","properties":{"id":{"type":"string","format":"uuid","description":"삭제된 경고의 UUID"},"result":{"type":"string","description":"삭제 결과(ex: 'success', 'fail', 'not_found')"},"message":{"oneOf":[{"type":"string","description":"부가 설명 메시지, null 가능"},{"type":"null","description":"부가 설명 메시지, null 가능"}],"description":"부가 설명 메시지, null 가능"}},"required":["id","result"]},"IDiscussionboardAuditLog.IRequest":{"type":"object","description":"IDiscussionboardAuditLog.IRequest는 감사 로그 검색/정렬/필터링을 위한 요청 파라미터 타입입니다. 주로 액터 ID, 이벤트 타입, 기간, 키워드 기반 검색, 페이지네이션 등의 필드를 포함하며, 관리 및 모더레이터가 로그 이력 접근 시 사용됩니다.\n\nPRISMA discussionboard_audit_logs 구조 및 요구사항(2.6 감사 및 로깅)을 반영합니다.","properties":{"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"관리자 액터 기준 검색용(ID 또는 null)"},{"type":"null","format":"uuid","description":"관리자 액터 기준 검색용(ID 또는 null)"}],"description":"관리자 액터 기준 검색용(ID 또는 null)"}},"required":[]},"IPageIDiscussionboardAuditLog":{"type":"object","description":"IPageIDiscussionboardAuditLog는 감사 로그(Audit Log) 엔티티의 검색 결과를 페이지네이션 컨테이너로 반환하는 타입입니다.\n\n페이지 정보와 함께 감사 로그 이력배열을 제공합니다. 전형적으로 관리자가 기록 전체 열람 및 필터 검색, 대용량 감사 이력 분석에 활용됩니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAuditLogs"},"description":"감사 로그 엔티티 배열"}},"required":["pagination","data"]},"IDiscussionboardAuditLog":{"type":"object","description":"IDiscussionboardAuditLog는 단일 감사 로그의 상세 정보를 설명하는 타입입니다. 액터(관리자/모더레이터/회원), 연관 리포트/조치, 이벤트 타입, 설명, 발생시각 필드를 보유하며, 3정규형 원칙에 따라 구조화되어 있습니다. 모든 이벤트는 플랫폼 보안·감사·규정 준수 목적의 로그 관리에 사용됩니다.","properties":{"id":{"type":"string","format":"uuid","description":"감사 로그의 PK(UUID)."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"관리자 액터일 경우 해당 관리자 ID, null이면 비적용."},{"type":"null","format":"uuid","description":"관리자 액터일 경우 해당 관리자 ID, null이면 비적용."}],"description":"관리자 액터일 경우 해당 관리자 ID, null이면 비적용."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"모더레이터 액터 지정(Nullable)."},{"type":"null","format":"uuid","description":"모더레이터 액터 지정(Nullable)."}],"description":"모더레이터 액터 지정(Nullable)."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"회원 액터일 경우 지정, 아니면 null."},{"type":"null","format":"uuid","description":"회원 액터일 경우 지정, 아니면 null."}],"description":"회원 액터일 경우 지정, 아니면 null."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 신고 이력 ID. 없다면 null."},{"type":"null","format":"uuid","description":"연관 신고 이력 ID. 없다면 null."}],"description":"연관 신고 이력 ID. 없다면 null."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관된 moderation action ID. 없을 수 있음."},{"type":"null","format":"uuid","description":"연관된 moderation action ID. 없을 수 있음."}],"description":"연관된 moderation action ID. 없을 수 있음."},"event_type":{"type":"string","description":"이벤트/동작의 유형(예: permission_change, status_update, ban_imposed 등)."},"event_detail":{"type":"string","description":"이벤트 발생 내역에 대한 상세 기술."},"created_at":{"type":"string","format":"date-time","description":"감사 로그 생성시각(UTC, ISO8601)."}},"required":["id","event_type","event_detail","created_at"]},"IDiscussionboardAuditLogs.ICreate":{"type":"object","description":"IDiscussionboardAuditLogs.ICreate는 감사 로그 단건 생성 요청에서 사용됩니다. 이벤트 종류, 연관 관계, 액터, 가능한 상세 메시지 등 PRISMA discussionboard_audit_logs와 동일하게 모든 생성 필드를 포함하며, 필수 내역 및 옵션 내역은 정책에 맞게 분기됩니다.","properties":{"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터가 관리자일 때 ID."},{"type":"null","format":"uuid","description":"액터가 관리자일 때 ID."}],"description":"액터가 관리자일 때 ID."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터가 모더레이터일 때 ID."},{"type":"null","format":"uuid","description":"액터가 모더레이터일 때 ID."}],"description":"액터가 모더레이터일 때 ID."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터가 일반 회원일 때 ID."},{"type":"null","format":"uuid","description":"액터가 일반 회원일 때 ID."}],"description":"액터가 일반 회원일 때 ID."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관된 신고 ID(선택적)."},{"type":"null","format":"uuid","description":"연관된 신고 ID(선택적)."}],"description":"연관된 신고 ID(선택적)."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 moderation action ID."},{"type":"null","format":"uuid","description":"연관 moderation action ID."}],"description":"연관 moderation action ID."},"event_type":{"type":"string","description":"감사 로그 이벤트 유형."},"event_detail":{"type":"string","description":"이벤트 상세."}},"required":["event_type","event_detail"]},"IDiscussionboardAuditLogs":{"type":"object","description":"IDiscussionboardAuditLogs는 감사 로그 리스트 검색/페이징 및 상세 조회에서 응답 객체로 사용됩니다. 단건 속성 세트와 함께 리스트·컨테이너 구조에 포함되어 반환할 수 있습니다. 원본 PRISMA discussionboard_audit_logs의 스키마와 필드 일치.","properties":{"id":{"type":"string","format":"uuid","description":"감사 로그 ID(PK)."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터(관리자) UUID, 없으면 null."},{"type":"null","format":"uuid","description":"액터(관리자) UUID, 없으면 null."}],"description":"액터(관리자) UUID, 없으면 null."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터(모더레이터) UUID."},{"type":"null","format":"uuid","description":"액터(모더레이터) UUID."}],"description":"액터(모더레이터) UUID."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터(회원) UUID."},{"type":"null","format":"uuid","description":"액터(회원) UUID."}],"description":"액터(회원) UUID."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련 신고 or null."},{"type":"null","format":"uuid","description":"관련 신고 or null."}],"description":"관련 신고 or null."},"related_moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 moderation action ID."},{"type":"null","format":"uuid","description":"연관 moderation action ID."}],"description":"연관 moderation action ID."},"event_type":{"type":"string","description":"이벤트(액션) 타입."},"event_detail":{"type":"string","description":"세부 이벤트 설명."},"created_at":{"type":"string","format":"date-time","description":"이력 기록 생성 시각(UTC, ISO8601)."}},"required":["id","event_type","event_detail","created_at"]},"IDiscussionboardAuditLogs.IUpdate":{"type":"object","description":"IDiscussionboardAuditLogs.IUpdate는 감사 로그의 일부 필드(비가역적/감사허용 필드만)를 수정하는 업데이트 용 객체입니다. 내부 정책상 일부 예약 필드만 수정 허용(예: event_detail 추가 메모 또는 규정상 수정 가능).","properties":{"event_detail":{"oneOf":[{"type":"string","description":"감사 상세 메모/보충 코멘트 등(예약 필드). null 입력 시 변경 없음."},{"type":"null","description":"감사 상세 메모/보충 코멘트 등(예약 필드). null 입력 시 변경 없음."}],"description":"감사 상세 메모/보충 코멘트 등(예약 필드). null 입력 시 변경 없음."}},"required":[]},"IDiscussionboardCommunityGuidelines.IRequest":{"type":"object","description":"IDiscussionboardCommunityGuidelines.IRequest는 커뮤니티 가이드라인 레코드 검색, 필터, 페이징 요청을 위한 타입입니다. 필터 가능 파라미터(키워드, 정렬, 활성/비활성, 페이지), 및 관리자/모더레이터 검색 시나리오에 적합합니다. 모든 필드는 시스템의 가이드라인 구조를 따릅니다.","properties":{"status":{"oneOf":[{"type":"string","description":"활성/비활성 상태 필터(예: 'active', 'inactive' 또는 null=전체)"},{"type":"null","description":"활성/비활성 상태 필터(예: 'active', 'inactive' 또는 null=전체)"}],"description":"활성/비활성 상태 필터(예: 'active', 'inactive' 또는 null=전체)"},"keyword":{"oneOf":[{"type":"string","description":"가이드라인 내 키워드 검색 필드. null 시 무시."},{"type":"null","description":"가이드라인 내 키워드 검색 필드. null 시 무시."}],"description":"가이드라인 내 키워드 검색 필드. null 시 무시."},"page":{"oneOf":[{"type":"integer","description":"페이지 번호. 0 이상, null 시 디폴트."},{"type":"null","description":"페이지 번호. 0 이상, null 시 디폴트."}],"description":"페이지 번호. 0 이상, null 시 디폴트."},"limit":{"oneOf":[{"type":"integer","description":"페이지 당 최대 반환 레코드 수. null 시 시스템 디폴트 적용."},{"type":"null","description":"페이지 당 최대 반환 레코드 수. null 시 시스템 디폴트 적용."}],"description":"페이지 당 최대 반환 레코드 수. null 시 시스템 디폴트 적용."}},"required":[]},"IPageIDiscussionboardCommunityGuidelines":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보를 담고 있습니다.\n\n전체 결과 집합 내에서 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 총 페이지 수 등을 제공합니다. 검색, 필터링, 대량 데이터 조회 시 사용됩니다. (표준 AutoBe 구조 참조)"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommunityGuidelines"},"description":"해당 페이지의 커뮤니티 가이드라인 레코드 배열입니다.\n\n각 항목에는 가이드라인의 모든 세부 정보(제목, 본문, 활성화 여부 등)가 포함되어 있습니다."}},"required":["pagination","data"],"description":"커뮤니티 가이드라인의 조회 결과를 페이지네이션 형태로 제공합니다.\n\n각 페이지에는 한정된 수의 가이드라인 데이터와, 페이지네이션 정보가 포함되어 있습니다. 데이터 탐색 및 대량 레코드 관리를 위해 설계되었습니다.\n\n이 타입은 페이지네이션과 같이 사용되는 표준 컨테이너로써, IDiscussionboardCommunityGuidelines 객체의 반복 집합과 페이징 메타 정보를 함께 반환합니다."},"IDiscussionboardCommunityGuidelines":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"이 가이드라인의 고유 식별자입니다.\n\nPrisma 테이블에서 PK로 사용되며, 가이드라인을 참조하거나 상세 조회 시 사용됩니다."},"title":{"type":"string","description":"가이드라인 제목(섹션명)입니다.\n\n사용자에게 공개되는 명칭이며, 중복 불가 조건이 있습니다. 예: \"게시글 예절\", \"금지 행위\" 등. 단일 원자값으로 저장되어 3NF 준수합니다."},"body":{"type":"string","description":"풀 텍스트로 된 가이드라인 본문입니다.\n\n커뮤니티 규칙의 세부 내용을 명확하고 구체적으로 설명합니다. 예시: \"타인을 모욕하는 언어 사용 시 경고 및 영구 밴이 발생할 수 있습니다.\" 등. 3NF 원자 텍스트."},"order_index":{"type":"integer","description":"가이드라인의 표시 순서(정수값)입니다.\n\nUI 리스트, FAQ 등에서의 정렬순을 위해 사용합니다. 관리자 페이지에서 순서 조절이 가능합니다. 중복 불가."},"is_active":{"type":"boolean","description":"이 가이드라인이 현재 플랫폼에서 효력이 있는지 여부입니다.\n\n비활성화된 가이드라인은 사용자에게 노출되지 않으나, 관리/감사용으로 유지될 수 있습니다."},"created_at":{"type":"string","format":"date-time","description":"이 가이드라인 레코드가 생성된 일시입니다.\n\n정책 변경 및 변천사 기록의 근거가 됩니다."},"updated_at":{"type":"string","format":"date-time","description":"가이드라인 본문의 최근 수정 일시입니다.\n\n감사 및 변경 이력 추적용입니다."}},"required":["id","title","body","order_index","is_active","created_at","updated_at"],"description":"커뮤니티 가이드라인 엔터티 전체 구조.\n\n이 객체는 각각의 가이드라인 규칙(예: \"예의 준수\", \"금지된 행위\" 등)에 대한 식별자, 제목, 본문, 표시 순서, 활성 여부, 생성/수정 일자 정보를 포함합니다.\n\nPrisma discussionboard_community_guidelines 테이블을 바탕으로, 모든 주요 속성 및 감사용 메타데이터를 제공합니다. UI 표시, 관리자 편집, API 조회 등에 주로 사용됩니다."},"IDiscussionboardCommunityGuidelines.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"생성할 가이드라인의 제목(섹션명)입니다.\n\n다른 가이드라인과 중복 불가, 사용자/관리자에게 명확히 전달되는 명칭이어야 합니다."},"body":{"type":"string","description":"새 가이드라인의 본문입니다.\n\n구체적인 규칙이나 지침을 포함하는 텍스트입니다."},"order_index":{"type":"integer","description":"GUIDE 정렬용 인덱스입니다.\n\nUI에 표시될 순서를 지정합니다. 중복될 수 없고, 중복 시 에러가 반환됩니다."},"is_active":{"type":"boolean","description":"활성화 여부 플래그입니다.\n\n생성 시 적용 가능/비활성화 여부를 명시적으로 지정합니다. 기본값 true(서비스 정책에 따라 고정/옵션 처리)."}},"required":["title","body","order_index","is_active"],"description":"새로운 커뮤니티 규칙(가이드라인)을 생성하기 위한 요청용 타입입니다.\n\nPrisma discussionboard_community_guidelines의 주요 컬럼(title, body, order_index, is_active)에 대응합니다. 제목과 순서값에 대한 유니크 제약이 있으며, 활성화 여부는 생성 시점에서 결정할 수 있습니다. 관리자/정책 운영자가 신규 규칙 추가 시 활용합니다."},"IDiscussionboardCommunityGuidelines.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"변경할 가이드라인 제목입니다. 중복 불가."},"body":{"type":"string","description":"수정할 가이드라인 본문입니다. 길이/내용 자유."},"order_index":{"type":"integer","description":"수정할 표시 순서 인덱스입니다. 중복 불가."},"is_active":{"type":"boolean","description":"이 규칙의 활성/비활성 여부를 변경할 수 있습니다."}},"required":["title","body","order_index","is_active"],"description":"기존 커뮤니티 가이드라인을 수정하기 위한 요청 타입입니다.\n\n기본적으로 title, body, order_index, is_active 네 가지 속성을 모두 입력하며, 생성과 동일한 유니크 제약(제목, 표시순서)이 적용됩니다."},"IDiscussionboardContentPolicies.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"요청하는 페이지 번호입니다. 1-base 입니다. (기본: 1)"},"limit":{"type":"integer","description":"페이지당 반환할 컨텐츠 정책 레코드(아이템) 수. (기본: 20)"},"is_active":{"oneOf":[{"type":"boolean","description":"정책 활성/비활성 여부로 결과를 필터링할 수 있습니다."},{"type":"null"}],"description":"정책 활성/비활성 여부로 결과를 필터링할 수 있습니다."},"keyword":{"oneOf":[{"type":"string","description":"정책명, 카테고리, 설명 등 텍스트로 부분 검색할 키워드스트링입니다.\n\n검색 용도이며, null(또는 미포함)시 전체 반환"},{"type":"null"}],"description":"정책명, 카테고리, 설명 등 텍스트로 부분 검색할 키워드스트링입니다.\n\n검색 용도이며, null(또는 미포함)시 전체 반환"},"category":{"oneOf":[{"type":"string","description":"카테고리명으로 정책을 필터링할 수 있습니다. 예: 'Spam', 'Copyright', 'Abuse' 등"},{"type":"null"}],"description":"카테고리명으로 정책을 필터링할 수 있습니다. 예: 'Spam', 'Copyright', 'Abuse' 등"}},"required":["page","limit"],"description":"컨텐츠 정책 목록을 페이징/필터링/검색할 때 사용하는 요청 타입입니다.\n\n정책 활성화 여부, 키워드, 카테고리 등 다양한 조건을 조합해 결과를 정렬/추출할 수 있습니다."},"IPageIDiscussionboardContentPolicies":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보. 요청 결과의 전체 페이지 수, 현재 페이지, 전체 레코드 수, 페이지당 항목 수를 담습니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardContentPolicies"},"description":"해당 페이지 구간에 포함된 컨텐츠 정책 레코드들의 배열입니다."}},"required":["pagination","data"],"description":"discussionboard_content_policies 정책 레코드들의 페이징 조회 결과 구조입니다.\n\npagination 필드에는 현재 페이지/전체 페이지/레코드 개수 등 메타가 포함되고, data필드에는 해당 페이지 레코드들이 일체로 담깁니다."},"IDiscussionboardContentPolicies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"정책 레코드의 고유 식별자입니다."},"policy_code":{"type":"string","description":"이 정책을 식별하는 단축 코드(예: 'NO_HATE_SPEECH').\n\n정책 관리, 참조, 내부 코드화 등에 사용하며, 중복 불가입니다."},"description":{"type":"string","description":"정책의 상세 설명입니다.\n\n제한사항, 허용범위, 위반 예시 등 정책 문서를 자유롭게 기술합니다."},"category":{"type":"string","description":"정책 유형/카테고리 값입니다. 예: 'Abuse', 'Spam', 'Copyright' 등\n\nUI 그룹핑/필터링에 활용됩니다."},"is_active":{"type":"boolean","description":"컨텐츠 정책의 활성화 여부(시스템 내 적용 중 여부)."},"created_at":{"type":"string","format":"date-time","description":"정책 레코드가 최초 생성된 일시입니다."},"updated_at":{"type":"string","format":"date-time","description":"정책 레코드의 최종 수정 일시입니다."}},"required":["id","policy_code","description","category","is_active","created_at","updated_at"],"description":"컨텐츠 정책(모더레이션 정책) 영역의 표준 엔터티 스키마입니다.\n\n각 정책은 고유 식별자, 단축 코드(고유), 텍스트 설명, 정책 카테고리, 활성 여부, 생성/수정일시 필드를 갖습니다.\n\nUI 표시, 관리 및 감사/조회 용도로 사용 되며, Prisma의 discussionboard_content_policies 테이블을 완벽히 반영합니다."},"IDiscussionboardContentPolicies.ICreate":{"type":"object","properties":{"policy_code":{"type":"string","description":"정책 고유 코드 값(예: 'NO_HATE_SPEECH').\n\n중복 불가하며, 정책의 내부 참조, 설정, 고유값으로 사용됩니다."},"description":{"type":"string","description":"정책의 서술적 설명입니다.\n\n허용/비허용 범위, 구체적인 정책 내용, 사용자 안내 등을 명확히 작성합니다."},"category":{"type":"string","description":"정책 카테고리명입니다. 예: 'Abuse', 'Spam', 'Copyright' 등"},"is_active":{"type":"boolean","description":"정책 활성화 여부입니다. 기본값 true, 플랫폼 정책에 따라 비활성도 가능."}},"required":["policy_code","description","category","is_active"],"description":"새로운 컨텐츠 정책(모더레이션 정책)을 추가할 때 사용하는 생성용 요청 스키마입니다.\n\n고유 정책 코드, 설명, 카테고리, 활성화 여부를 필수로 받으며, Prisma discussionboard_content_policies 테이블 구조에 맞게 설계 되었습니다."},"IDiscussionboardContentPolicies.IUpdate":{"type":"object","properties":{"policy_code":{"type":"string","description":"수정하려는 정책의 새 코드입니다(중복 불가)."},"description":{"type":"string","description":"정책 설명 및 본문 내용을 수정할 수 있습니다."},"category":{"type":"string","description":"정책 카테고리(유형)를 수정할 수 있습니다."},"is_active":{"type":"boolean","description":"활성화 여부를 변경할 수 있습니다."}},"required":["policy_code","description","category","is_active"],"description":"컨텐츠 정책 레코드를 갱신하는 요청 타입입니다.\n\n정책 고유 코드, 설명, 카테고리, 활성화 상태를 모두 입력해야 하며, 모든 값은 유효성 검사 및 중복 제약이 존재합니다."},"IDiscussionboardProfanityFilter.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"요청하는 페이지 번호입니다. 1-base 기준. (기본값: 1)"},"limit":{"type":"integer","description":"페이지당 반환할 금칙어 레코드 최대 수. (기본값: 20)"},"is_active":{"oneOf":[{"type":"boolean","description":"활성/비활성 플래그로 결과를 필터링할 수 있습니다(선택적)."},{"type":"null"}],"description":"활성/비활성 플래그로 결과를 필터링할 수 있습니다(선택적)."},"keyword":{"oneOf":[{"type":"string","description":"금칙어 검색용 텍스트, 단어 일부/전체/유사어 매칭에 사용.\n\n입력하지 않으면 전체 반환."},{"type":"null"}],"description":"금칙어 검색용 텍스트, 단어 일부/전체/유사어 매칭에 사용.\n\n입력하지 않으면 전체 반환."}},"required":["page","limit"],"description":"금칙어(비속어, profanity filter) 목록을 검색 및 페이지네이션할 때 쓰는 요청 바디 타입입니다.\n\n활성/비활성 여부, 키워드 등의 조합과 함께 결과를 효율적으로 조회할 수 있습니다."},"IPageIDiscussionboardProfanityFilter":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보입니다.\n\n전체 레코드 개수, 현재 페이지, 총 페이지 수, 페이지당 레코드 수 등의 메타 정보를 담습니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardProfanityFilter"},"description":"해당 페이지에 포함된 금칙어 엔티티 각각의 배열입니다."}},"required":["pagination","data"],"description":"금칙어(비속어 필터) 레코드들의 목록 및 페이징 컨테이너 타입입니다.\n\n페이지네이션 정보와 함께 개별 금칙어 엔트리들의 데이터 배열을 제공합니다."},"IDiscussionboardProfanityFilter":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"해당 금칙어 레코드의 고유 식별자입니다."},"word":{"type":"string","description":"필터링 대상이 되는 단어 또는 구입니다.\n\n중복 불가, 대소문자 구분, 3NF 원자 단어/구절로 저장됩니다(예: '바보', 'idiot' 등)."},"is_active":{"type":"boolean","description":"현재 이 금칙어가 필터링에 실제로 사용되는지 여부. 비활성화 시에는 필터링 룰에서 제외됩니다."},"created_at":{"type":"string","format":"date-time","description":"이 금칙어 엔트리가 생성된 일시입니다."},"updated_at":{"type":"string","format":"date-time","description":"금칙어 엔트리의 마지막 수정 일시 입니다."}},"required":["id","word","is_active","created_at","updated_at"],"description":"금칙어(비속어) 필터용 표준 엔터티 타입입니다.\n\n각 레코드는 하나의 필터링 단어나 구, 활성화 여부, 생성/수정 일시 등 핵심 필드를 포함하며, Prisma discussionboard_profanity_filters 테이블을 기반으로 전체 논리 구조를 반영합니다. 관리, UI 표시, 감사 용도 등에 사용됩니다."},"IDiscussionboardProfanityFilter.ICreate":{"type":"object","properties":{"word":{"type":"string","description":"단일 금칙어나 금칙 구절을 저장하는 필드입니다. 비속어나 필터링 대상 단어를 추가할 때 사용합니다. 예시: 'badword'."},"is_active":{"type":"boolean","description":"해당 단어나 구절이 현재 활성화되어 필터링에 적용되는지의 여부입니다. 관리자는 필요에 따라 비활성화 할 수 있습니다."}},"required":["word","is_active"],"description":"비속어/금칙어 목록에 새 단어를 추가하기 위한 생성 타입입니다. 커뮤니티 욕설 필터 또는 자동화 정책 관리 기능에서 관리자가 직접 단어를 등록할 때 활용됩니다. 단일 단어/구절과 활성화 상태만을 명시하며, 생성/수정 일자는 DB에서 자동 관리됩니다."},"IDiscussionboardProfanityFilter.IUpdate":{"type":"object","properties":{"word":{"type":"string","description":"업데이트할(변경할) 비속어 또는 단어입니다. 단어나 구절 자체 수정을 허용함(공백, 오타, 표기 차이 등 정정 시)."},"is_active":{"type":"boolean","description":"해당 금칙어/비속어의 활성,비활성 상태를 변경할 수 있습니다."}},"required":["word","is_active"],"description":"이미 등록된 비속어(금칙어)에 대해 단어 수정 또는 활성/비활성 설정을 변경할 때 사용하는 타입입니다. 키값(ID)은 API 경로 파라미터로 사용하므로 실제 본 타입에 포함되거나 필요하지 않고, 수정 가능한 필드만 입력받습니다."},"IDiscussionboardAutomatedSpamRule.IRequest":{"type":"object","properties":{"rule_pattern":{"type":"string","description":"검색/필터를 위한 스팸 감지 패턴(정규표현식 등) 문자열입니다. 예시: 'http(s)?://.*?example'."},"is_active":{"type":"boolean","description":"설정/필터 조건에서 '활성 중' 규칙만 검색할지 여부입니다."},"description":{"type":"string","description":"규칙 설명에 대한 키워드 검색 등에서 사용할 수 있습니다."},"page":{"type":"integer","description":"페이지네이션 요청 시, 요청 페이지 번호입니다. (1부터 시작)"},"limit":{"type":"integer","description":"한 페이지당 반환할 레코드 수입니다.(권장: 20~100, 시스템 기본 정책에 따름)"},"sort":{"type":"string","description":"정렬 방식이나 정렬 컬럼을 정할 때 사용할 옵션. 예시: 'created_at desc', 'rule_pattern asc'."}},"description":"스팸 자동화 규칙(정규표현식 등) 검색/페이징을 위한 조회 옵션 DTO. 주로 관리 패널이나 규칙 리뷰 화면에서 활용합니다.","required":[]},"IPageIDiscussionboardAutomatedSpamRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAutomatedSpamRule"},"description":"현 페이지에 포함된 스팸 규칙 정보 배열"}},"required":["pagination","data"],"description":"discussionboard_automated_spam_rules 테이블의 페이징 결과 컨테이너입니다. 현재 페이지의 결과 및 페이징/카운트 정보를 포함합니다."},"IDiscussionboardAutomatedSpamRule":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"스팸 룰의 고유 식별자 (uuid)."},"rule_pattern":{"type":"string","description":"적용/관리할 스팸 패턴(정규식, 키워드). 예시: 'bad-link-(regex)'. 플랫폼의 스팸 차단 로직에서 활용됨."},"description":{"type":"string","description":"이 룰이 검출하는 스팸 유형 또는 설명. 예: '피싱 URL 차단, 반복 게시 방지 등'."},"is_active":{"type":"boolean","description":"현재 활성화 상태 플래그. true=적용중, false=비활성."},"created_at":{"type":"string","format":"date-time","description":"이 룰이 최초 생성된 일시 (ISO8601)"},"updated_at":{"type":"string","format":"date-time","description":"최종 수정/업데이트된 일시 (ISO8601)"}},"required":["id","rule_pattern","description","is_active","created_at","updated_at"],"description":"discussionboard_automated_spam_rules의 단일 레코드 단위 구조를 정의합니다. 각 레코드는 자동 스팸 필터 패턴, 관리용 설명, 활성 상태, 생성/수정 일시로 구성되어 있습니다."},"IDiscussionboardAutomatedSpamRule.ICreate":{"type":"object","properties":{"rule_pattern":{"type":"string","description":"등록할 스팸 감지 패턴 문자열(정규표현식 등)."},"description":{"type":"string","description":"이 규칙의 설명(적용 범위, 검출 목적 등)."},"is_active":{"type":"boolean","description":"신규 생성 시 활성화 여부 플래그."}},"required":["rule_pattern","description","is_active"],"description":"새로운 스팸 패턴(자동 검열 규칙)을 등록할 때 사용하는 생성 DTO입니다. 필수 입력: 정규표현식(또는 키워드) 패턴, 관리용 설명, 활성화 여부."},"IDiscussionboardAutomatedSpamRule.IUpdate":{"type":"object","properties":{"rule_pattern":{"type":"string","description":"수정 및 재정의할 스팸 감지 규칙의 패턴(정규표현식 등)."},"description":{"type":"string","description":"설명(적용 영역, 목적 등) 수정 가능."},"is_active":{"type":"boolean","description":"활성/비활성 상태 업데이트 가능."}},"required":["rule_pattern","description","is_active"],"description":"기존의 자동 스팸 룰(DB PK: id) 관련 속성(패턴, 설명, 활성화 등) 전체를 업데이트할 때 사용하는 타입입니다."},"IDiscussionboardNotification.IRequest":{"type":"object","properties":{"type":{"type":"string","description":"필터/검색 시 사용할 알림 유형(예: reply, like, mention, moderation_action 등)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"알림 수신자(회원)의 UUID. 본인의 알림목록 조회 시 사용."},"is_read":{"type":"boolean","description":"읽음/안읽음 상태로 필터링 시 사용."},"delivered_at_from":{"type":"string","format":"date-time","description":"알림 생성/전송일 기준 검색 범위(시작 일시)"},"delivered_at_to":{"type":"string","format":"date-time","description":"알림 생성/전송일 기준 검색 범위(마지막 일시)"},"page":{"type":"integer","description":"페이징 요청 시, 요청 페이지 번호(1부터)."},"limit":{"type":"integer","description":"한 페이지당 반환할 알림 수 (기본값 시스템 정책)"},"sort":{"type":"string","description":"정렬 옵션: 예 'delivered_at desc', 'is_read asc'"}},"description":"discussionboard_notifications 알림 내역에서 검색, 필터링, 페이징을 하는 요청 DTO(유형, 수신자, 읽음상태, 날짜 범위 등 조건 입력)","required":[]},"IPageIDiscussionboardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_notifications"},"description":"현 페이지에 포함된 알림 엔티티 리스트"}},"required":["pagination","data"],"description":"discussionboard_notifications 알림목록 내역의 페이징/검색 결과 컨테이너. 페이징 메타 및 각 알림 아이템 리스트 제공."},"Idiscussionboard_notifications":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"알림 고유 식별자 (uuid)"},"discussionboard_member_id":{"type":"string","format":"uuid","description":"알림을 받은 유저의 PK(uuid)"},"type":{"type":"string","description":"알림 유형: reply, like, mention, moderation_action, system 등"},"related_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관(관련) 엔티티(예: post, comment, moderation_action 등)의 UUID. 특정 대상에 대한 알림일 경우 사용, 없으면 null."},{"type":"null","format":"uuid","description":"연관(관련) 엔티티(예: post, comment, moderation_action 등)의 UUID. 특정 대상에 대한 알림일 경우 사용, 없으면 null."}],"description":"연관(관련) 엔티티(예: post, comment, moderation_action 등)의 UUID. 특정 대상에 대한 알림일 경우 사용, 없으면 null."},"related_entity_type":{"oneOf":[{"type":"string","description":"연관된 엔티티 유형: 'post','comment','moderation_action' 등. null 허용."},{"type":"null","description":"연관된 엔티티 유형: 'post','comment','moderation_action' 등. null 허용."}],"description":"연관된 엔티티 유형: 'post','comment','moderation_action' 등. null 허용."},"content":{"type":"string","description":"알림 내용(메시지 본문)"},"is_read":{"type":"boolean","description":"읽음 여부(true=읽음, false=안읽음)"},"delivered_at":{"type":"string","format":"date-time","description":"알림이 사용자에게 전송/노출된 시각 (ISO8601)"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료시각(알림이 비활성화되는 시점). null이면 장기적 노출 알림."},{"type":"null","format":"date-time","description":"만료시각(알림이 비활성화되는 시점). null이면 장기적 노출 알림."}],"description":"만료시각(알림이 비활성화되는 시점). null이면 장기적 노출 알림."}},"required":["id","discussionboard_member_id","type","content","is_read","delivered_at"],"description":"discussionboard_notifications 엔티티의 대표 반환 구조체(알림 ID, 수신자, 유형, 내용, 상태, 생성 및 만료일 등 포함)"},"Idiscussionboard_notifications.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"알림 수신자 (회원 PK)"},"type":{"type":"string","description":"알림 유형 — 예: reply, like, mention, moderation_action 등"},"related_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련된 대상 객체(게시물, 댓글 등)의 UUID. 없다면 null."},{"type":"null","format":"uuid","description":"관련된 대상 객체(게시물, 댓글 등)의 UUID. 없다면 null."}],"description":"관련된 대상 객체(게시물, 댓글 등)의 UUID. 없다면 null."},"related_entity_type":{"oneOf":[{"type":"string","description":"관련 엔티티 유형(post, comment, moderation_action) — 없으면 null."},{"type":"null","description":"관련 엔티티 유형(post, comment, moderation_action) — 없으면 null."}],"description":"관련 엔티티 유형(post, comment, moderation_action) — 없으면 null."},"content":{"type":"string","description":"알림 메시지 본문"},"delivered_at":{"type":"string","format":"date-time","description":"알림 발송/노출 시간 (ISO8601)"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"알림 만료시각. 없다면(null) 무기한 유지"},{"type":"null","format":"date-time","description":"알림 만료시각. 없다면(null) 무기한 유지"}],"description":"알림 만료시각. 없다면(null) 무기한 유지"}},"required":["discussionboard_member_id","type","content","delivered_at"],"description":"새 알림 생성 요청 DTO. 수신 대상 회원, 알림 유형, 메시지, 발송 시각, (선택) 만료 시각 및 연관 엔티티 정보 포함."},"Idiscussionboard_notifications.IUpdate":{"type":"object","properties":{"type":{"type":"string","description":"알림의 유형. 필요 목적에 따라 수정 가능."},"related_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"수정할 연관 엔티티의 UUID. 없을 때는 null."},{"type":"null","format":"uuid","description":"수정할 연관 엔티티의 UUID. 없을 때는 null."}],"description":"수정할 연관 엔티티의 UUID. 없을 때는 null."},"related_entity_type":{"oneOf":[{"type":"string","description":"연관 엔티티의 타입(수정/이동 시 등). 없으면 null."},{"type":"null","description":"연관 엔티티의 타입(수정/이동 시 등). 없으면 null."}],"description":"연관 엔티티의 타입(수정/이동 시 등). 없으면 null."},"content":{"type":"string","description":"알림 본문의 내용(필요시 메시지 교체 등)."},"is_read":{"type":"boolean","description":"읽음 상태 변경(true/false)"},"delivered_at":{"type":"string","format":"date-time","description":"알림 발송/노출 시각 갱신."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료일시 수정 또는 null 처리"},{"type":"null","format":"date-time","description":"만료일시 수정 또는 null 처리"}],"description":"만료일시 수정 또는 null 처리"}},"required":["type","content","is_read","delivered_at"],"description":"기존 알림의 정보를 수정(주로 읽음 여부, 내용 보정 등)하는 요청 DTO입니다."},"Idiscussionboard_notifications.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Whether the notification was successfully deleted.\n\nReflects the result status of the delete operation for audit trail and client confirmation purposes."},"message":{"type":"string","description":"Optional, human-readable message describing the deletion result or error encountered during the operation.\n\nThis allows the API to provide details for both audit and UI display, e.g., why deletion may have failed."}},"required":["success"],"description":"Delete result response for notification deletion via the discussion board notifications API.\n\nIndicates whether a notification was successfully deleted and may include an optional message describing the result. This type is used in delete response bodies, is aligned with platform-wide operation result conventions, and supports audit logging and client status messaging."},"Idiscussionboard_alert_preferences.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"User ID (UUID) to filter alert preferences for a particular user. If omitted, fetches for the requesting user or all users (admin)."},"notification_type":{"type":"string","description":"Notification type to filter on (e.g., 'reply', 'like', 'mention', 'moderation_action', 'system'). If omitted, returns all types."},"page":{"type":"integer","description":"Page number for paginated result set. Optional; defaults to first page if not supplied.","minimum":1},"limit":{"type":"integer","description":"Maximum number of results to return per page. Optional; defaults to 100 if not provided.","minimum":1}},"required":[],"description":"Filter and search structure for listing alert preferences from the discussion board alert preferences table.\n\nProvides options for filtering by user/member, notification type, and supports pagination. Used in admin settings dashboards and user alert preference queries. All properties are optional for flexible query support."},"IPageIdiscussionboard_alert_preferences":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_alert_preferences"},"description":"List of alert preference records returned for this page."}},"required":["pagination","data"],"description":"Paginated response object for listing alert preference entities from the discussion board.\n\nContains paginated metadata as well as an array of alert preferences following a search/filter request. Used across all paginated alert preference endpoints."},"Idiscussionboard_alert_preferences":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the alert preference record.\n\nUsed for reference in update/delete endpoints and linking to other notification preference entities."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"User ID (UUID) the alert preference belongs to. This field links to the discussion board members table and enforces per-user preference mapping."},"notification_type":{"type":"string","description":"Type/category of notification this preference controls delivery for (e.g., 'reply', 'like', 'mention', 'moderation_action', 'system').\n\nExamples: 'reply' (replies to comments or posts), 'like', 'mention' (being mentioned), 'moderation_action' (warnings, bans), 'system' (announcements)."},"delivery_channel":{"type":"string","description":"Configured channel for this notification type (e.g., 'email', 'push', 'in_app', 'none').\n\nIndicates where the alert will be delivered, with explicit value for user opt-out when set to 'none'."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for when this alert preference was last updated.\n\nPart of audit and sync with user settings."}},"required":["id","discussionboard_member_id","notification_type","delivery_channel","updated_at"],"description":"Alert preference record structure from the discussion board domain.\n\nRepresents a user's per-notification-type delivery preference (channel and notification type), mapped to their ID. Includes audit timestamp for synchronization and update flows. Table: discussionboard_alert_preferences."},"Idiscussionboard_alert_preferences.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"User/member ID to assign this alert preference. Links to the user account and enforces preference uniqueness at (member, notification_type) granularity."},"notification_type":{"type":"string","description":"Type of notification (e.g., 'reply', 'like', 'mention', 'moderation_action', 'system'). Must be tightly validated against platform's allowed notification types. Used for delivery and filtering."},"delivery_channel":{"type":"string","description":"Delivery channel for this alert ('email', 'push', 'in_app', 'none').\n\n'delivery_channel' determines whether and how the alert is delivered to the user. 'none' disables delivery."}},"required":["discussionboard_member_id","notification_type","delivery_channel"],"description":"Payload structure for creating a discussionboard_alert_preferences record.\n\nIncludes user linkage, notification type to which this preference applies, and delivery channel. Input is validated for uniqueness at (member, notification_type)."},"Idiscussionboard_alert_preferences.IUpdate":{"type":"object","properties":{"notification_type":{"type":"string","description":"Type of notification to update. Updates the notification type targeted by this preference.\n\nMust match allowed values."},"delivery_channel":{"type":"string","description":"Delivery channel update (e.g., switching to 'email' or opting out with 'none'). Changing this will adjust how/if user receives notifications for matching events."}},"required":[],"description":"Request structure for updating an alert preference entity. Used to change delivery channel or notification type for a user's preference record. At least one property should be supplied in an update call."},"Idiscussionboard_alert_preferences.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"True if alert preference was successfully deleted. Indicates operation result for client and audit trail."},"message":{"type":"string","description":"Human-readable message with details about deletion result (e.g., if the preference didn't exist, or additional instructions needed). Optional."}},"required":["success"],"description":"Result object for deleting an alert preference.\n\nIndicates whether deletion was successful and provides an optional message. Used in CRUD delete API responses for alert preference management and audit tracking."},"Idiscussionboard_action_logs.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Actor's user/member/admin/moderator id for action log filtering. Used to look up logs by a specific user or role."},"event_type":{"type":"string","description":"Type of action performed. Filter logs for specific event types (e.g., 'POST_CREATED', 'COMMENT_DELETED', 'MODERATOR_BAN')."},"event_target_id":{"type":"string","format":"uuid","description":"Filter for logs related to a specific entity (e.g., a post, comment, or report). Typically a UUID reference."},"page":{"type":"integer","description":"Page number for paginated log results.","minimum":1},"limit":{"type":"integer","description":"Maximum number of log entries to return per page. Defaults platform-wide limit if not provided.","minimum":1}},"required":[],"description":"Request object for searching and filtering discussionboard_action_logs. Includes actor ID, event type, event target, and pagination fields. All fields are optional for flexible admin and compliance log searching."},"IPageIdiscussionboard_action_logs":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_action_logs"},"description":"Array of action log entries found for this query and page."}},"required":["pagination","data"],"description":"Paginated result object for action log queries from discussionboard_action_logs.\n\nReturns both page meta and array of log records (for admin/compliance review or incident trace)."},"Idiscussionboard_action_logs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of this action log record. Used for unique identification and reference from other audit entities."},"actor_id":{"type":"string","format":"uuid","description":"Actor/user associated with the event. May refer to admin, moderator, or standard member, as indicated by linked role tables."},"event_type":{"type":"string","description":"Type of event recorded. Used for categorization (e.g., 'POST_CREATED', 'MODERATOR_BAN', 'LOGIN')."},"event_target_id":{"type":"string","format":"uuid","description":"Optional. The ID of associated target entity (e.g., post, comment, or report). Indicates which primary content was affected by the action."},"metadata":{"type":"string","description":"JSON-formatted metadata string for extensibility and storing extra action context. Used to capture extra event info (e.g., IP address, moderation reason, device info, etc.)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this log entry was created. Used for sequencing, compliance, and incident review."}},"required":["id","actor_id","event_type","created_at"],"description":"Action log entry entity for discussionboard platform actions.\n\nCaptures high-level platform or user actions for audit and compliance review. All field-level descriptions mirror corresponding database columns for traceability."},"Idiscussionboard_action_logs.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Actor performing the logged action. User/account/admin/moderator ID, as appropriate. Required for accountability."},"event_type":{"type":"string","description":"Type/category of the action performed (e.g., 'COMMENT_EDITED', 'SESSION_REVOKED'). Must match system event type enums."},"event_target_id":{"type":"string","format":"uuid","description":"Target entity ID for the event, e.g. post, comment, report. Nullable for actions with no direct content target."},"metadata":{"type":"string","description":"Any ancillary structured metadata to store with the event (JSON blob). Optional, used for extensibility, e.g. moderation reason, IP address."}},"required":["actor_id","event_type"],"description":"Creation payload for a discussion board action log entry.\n\nDefines the actor, event type, optional entity references, and metadata for extensibility. Closely follows platform action/audit logging requirements."},"IDiscussionboardActionLog.IUpdate":{"type":"object","properties":{"event_type":{"type":"string","description":"Update the type/category of the logged event, when allowed (e.g., for compliance note corrections). Must be a recognized category (refer to business policy/event type enums)."},"event_target_id":{"type":"string","format":"uuid","description":"Optional update to modify the related entity ID (used in rare compliance events)."},"metadata":{"type":"string","description":"Update/correct the metadata blob for this log record (e.g. append audit notes, fix device info, etc.)."}},"required":[],"description":"Update structure for a discussion board action log record. Allows compliance updates to event type, target, or metadata field. Not all updates are permitted by policy; reserved for privileged admin use."},"IDiscussionboardActionLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the action log entry. This is a globally unique identifier (UUID) for audit records. It enables precise referencing across systems and is referenced in admin/moderator panels, compliance tools, and incident investigations.\n\nColumn: id. Purpose: To uniquely identify each action log event and enable traceability and root-cause identification. Constraints: Non-null, unique, immutable."},"actor_id":{"type":"string","format":"uuid","description":"The UUID of the user (admin, moderator, or member) who performed the action. This field links to the member or role responsible for the recorded event. Used for audit reporting, access tracing, and compliance reviews.\n\nColumn: actor_id. Purpose: To identify the individual responsible for a system or moderation event. Constraints: Non-null, foreign-key to user/member/admin tables."},"event_type":{"type":"string","description":"The type/category of the action performed. Used as an index for analytics, compliance, and incident review. Typical values include: 'POST_CREATED', 'COMMENT_DELETED', 'ROLE_CHANGED', etc.\n\nColumn: event_type. Purpose: Enables filtering and root-cause analysis for audit. Constraints: Non-null, controlled vocabulary/enum at the application level."},"event_target_id":{"oneOf":[{"type":"string","format":"uuid","description":"The ID of the entity (post, comment, report, etc.) affected by this action. Supports auditing reference and compliance requirements.\n\nColumn: event_target_id. Purpose: Relates the log to the object affected. Nullable if no direct target."},{"type":"null"}],"description":"The ID of the entity (post, comment, report, etc.) affected by this action. Supports auditing reference and compliance requirements.\n\nColumn: event_target_id. Purpose: Relates the log to the object affected. Nullable if no direct target."},"metadata":{"oneOf":[{"type":"string","description":"Additional metadata in JSON format, for extensibility (e.g., reason for action, IP address, device type, or moderation rationale). Maintains normalized structure by keeping rare or context-specific information in metadata column only as needed.\n\nColumn: metadata. Purpose: Store extended diagnostic info. Nullable, string-encoded JSON or similar structure for flexibility."},{"type":"null"}],"description":"Additional metadata in JSON format, for extensibility (e.g., reason for action, IP address, device type, or moderation rationale). Maintains normalized structure by keeping rare or context-specific information in metadata column only as needed.\n\nColumn: metadata. Purpose: Store extended diagnostic info. Nullable, string-encoded JSON or similar structure for flexibility."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action occurred (ISO 8601 UTC, e.g., 2025-07-22T13:30:45.969+09:00). Used for ordering, incident time windows, and data retention compliance.\n\nColumn: created_at. Constraints: Non-null, immutable. Used for full auditability."}},"required":["id","actor_id","event_type","created_at"],"description":"Action log event record. Implements full auditability and compliance requirements for the discussion board. Every critical user or system action is stored as a structured, immutable record. Fields capture the actor (by ID), the action type (verb/noun or system event code), affected target (post, comment, report, or other), any extensible metadata, and a timestamp. This entity forms the foundation for platform transparency, regulatory audits, and incident forensics. Relates to compliance, moderation, and user support flows. Property and type names reference the original Prisma schema and are documented with alignment to business and audit requirements."},"IPageIDiscussionboardErrorLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","minimum":1,"description":"Page number for pagination. Used to retrieve a specific page of results from a query to the error logs. Defaults may be handled at the application level.\n\nRelates to the IPage<T> convention for standard pagination interfaces. Always >= 1."},"limit":{"type":"integer","format":"uint32","minimum":1,"default":100,"description":"Maximum number of records per page. Used for pagination and resource protection in search/list error log queries. Defaults to 100 if not set; application logic may enforce a maximum allowed.\n\nRequired for paginated results and is compliant with IPage<T> contract."},"error_code":{"oneOf":[{"type":"string","description":"Optional filter for error_code prefix or code exact match. Allows searching for specific error categories in the error log record set. Implements structured error review in admin interfaces.\n\nColumn: error_code. Nullable in filter context; only set when searching for a specific code."},{"type":"null"}],"description":"Optional filter for error_code prefix or code exact match. Allows searching for specific error categories in the error log record set. Implements structured error review in admin interfaces.\n\nColumn: error_code. Nullable in filter context; only set when searching for a specific code."},"start_date":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for records created after this timestamp. Used to restrict the search window for error logs. Implements forensic and compliance searches.\n\nISO 8601 UTC. Nullable and only applies when user provides a filter."},{"type":"null"}],"description":"Optional filter for records created after this timestamp. Used to restrict the search window for error logs. Implements forensic and compliance searches.\n\nISO 8601 UTC. Nullable and only applies when user provides a filter."},"end_date":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for records created before this timestamp. Supports time-bounded search windows in error log queries.\n\nISO 8601 UTC. Nullable filter; common in incident investigation tools."},{"type":"null"}],"description":"Optional filter for records created before this timestamp. Supports time-bounded search windows in error log queries.\n\nISO 8601 UTC. Nullable filter; common in incident investigation tools."},"query":{"oneOf":[{"type":"string","description":"Full-text or substring query for searching inside error_message or stack_trace fields. Supports UI search, analytics, and deep forensic review.\n\nNot a column itself; mapped to searchable properties in error log search business logic."},{"type":"null"}],"description":"Full-text or substring query for searching inside error_message or stack_trace fields. Supports UI search, analytics, and deep forensic review.\n\nNot a column itself; mapped to searchable properties in error log search business logic."}},"required":[],"description":"Request body structure for paginated, filterable, and searchable error log queries. Implements paging, time range, error code, and flexible search per platform standard for admin/diagnostic UIs. Complies with standard listing/searching PRC conventions for error/audit entities."},"IPageIDiscussionboardErrorLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for this page of error logs."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardErrorLog"},"description":"Array of error log records for the current page. Each item is an atomic, normalized error log object."}},"required":["pagination","data"],"description":"Container for paginated error log results, following the IPage<T> interface standard. Contains pagination metadata and the array of error logs matching the query. Used in error log search/list operations and analytics dashboards."},"IDiscussionboardErrorLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the error log record. Globally unique identifier for traceability and incident review.\n\nColumn: id. Purpose: Enables referencing, deduplication, and data lineage. Non-null, immutable."},"error_code":{"type":"string","description":"Application-defined error or exception code. Enables quick categorization and reporting. Example: 'API_TIMEOUT', 'UNCAUGHT_EXCEPTION'.\n\nColumn: error_code. Enforces tagging and traceability for diagnostics."},"error_message":{"type":"string","description":"Human-readable message for the error, used in debugging and compliance reporting. Example: 'Failed to fetch posts due to network timeout.'\n\nColumn: error_message. Supports platform compatibility and user reporting flows."},"stack_trace":{"oneOf":[{"type":"string","description":"Optional stack trace or technical details for the error. Used for technical debugging and compliance audit. May be null if not available or irrelevant.\n\nColumn: stack_trace. Normalized for extensibility; not all errors include a trace."},{"type":"null"}],"description":"Optional stack trace or technical details for the error. Used for technical debugging and compliance audit. May be null if not available or irrelevant.\n\nColumn: stack_trace. Normalized for extensibility; not all errors include a trace."},"context_id":{"oneOf":[{"type":"string","format":"uuid","description":"Context entity reference, if any (e.g., API request ID or related event UUID). Supports linking errors to requests for root-cause analysis. Nullable if not applicable.\n\nColumn: context_id. Application-controlled; not enforced for every error log."},{"type":"null"}],"description":"Context entity reference, if any (e.g., API request ID or related event UUID). Supports linking errors to requests for root-cause analysis. Nullable if not applicable.\n\nColumn: context_id. Application-controlled; not enforced for every error log."},"created_at":{"type":"string","format":"date-time","description":"When the error was recorded (ISO 8601 UTC). Used for ordering, triage, and compliance window closure.\n\nColumn: created_at. Mandatory for all log records."}},"required":["id","error_code","error_message","created_at"],"description":"Single error log event entity. Implements the diagnostics, incident, and compliance requirements for the discussion board. Fields store error type, readable message, technical trace, reference context, and timestamp. Used for incident tracing, system reliability review, and monitoring. Relates to administrative troubleshooting and error-driven platform analytics. Property names reference and document original Prisma error log schema."},"IDiscussionboardErrorLog.ICreate":{"type":"object","properties":{"error_code":{"type":"string","description":"Application-level error/exception code. Must match platform-level error codes and logging semantics. Example: 'API_TIMEOUT', 'DB_UNAVAILABLE'.\n\nColumn: error_code. Required input on record creation."},"error_message":{"type":"string","description":"Human-readable message describing the error event for diagnostics and reporting. Application should provide meaningful, non-generic messages.\n\nColumn: error_message. Mandatory for reporting and debugging flows."},"stack_trace":{"oneOf":[{"type":"string","description":"Stack trace or technical info (nullable, stringified if present). Used for system debuggers, developer consoles, incident reviewers.\n\nColumn: stack_trace."},{"type":"null"}],"description":"Stack trace or technical info (nullable, stringified if present). Used for system debuggers, developer consoles, incident reviewers.\n\nColumn: stack_trace."},"context_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity or request context for the error (nullable if not relevant). Used for linking errors to application requests, session flows, or root-cause context in incident tools.\n\nColumn: context_id."},{"type":"null"}],"description":"Entity or request context for the error (nullable if not relevant). Used for linking errors to application requests, session flows, or root-cause context in incident tools.\n\nColumn: context_id."}},"required":["error_code","error_message"],"description":"Creation payload for an error log entry. Used when the platform or monitoring services need to record a new system/application error event. Fields must align with creation semantics for error log table: code, message required; context and stack trace are optional. Timestamp, ID, and any audit metadata are added by the system."},"IDiscussionboardErrorLog.IUpdate":{"type":"object","properties":{"stack_trace":{"oneOf":[{"type":"string","description":"Optional update for the error's stack trace or technical trace entry. May be set, replaced, or cleared during log annotation or diagnostic workflows.\n\nColumn: stack_trace. This field is mutable during error review/follow-up. If null, stack trace is removed or not present."},{"type":"null"}],"description":"Optional update for the error's stack trace or technical trace entry. May be set, replaced, or cleared during log annotation or diagnostic workflows.\n\nColumn: stack_trace. This field is mutable during error review/follow-up. If null, stack trace is removed or not present."},"context_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the request or entity context for this error event record. If specified, updates will overwrite the reference; if null, context is cleared. Used in compliance and analytic follow-ups.\n\nColumn: context_id."},{"type":"null"}],"description":"Update the request or entity context for this error event record. If specified, updates will overwrite the reference; if null, context is cleared. Used in compliance and analytic follow-ups.\n\nColumn: context_id."}},"required":[],"description":"Partial update payload for an error log record. Only allows updates to mutable fields (stack_trace and context_ref). Used in compliance correction, developer post-hoc annotation, or detailed error root-cause review flows. Not all fields in the full error log record are mutable; ID, code, message, and created_at are immutable post-creation for compliance."},"IPageIDiscussionboardApiAccessLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","minimum":1,"description":"Requested result page for pagination. Atomic, >= 1. Used for paged browsing of access logs.\n\nFollows IPage<T> interface; required for paging."},"limit":{"type":"integer","format":"uint32","minimum":1,"default":100,"description":"Maximum result count per page. Defaults to 100 if unset. Used to bulk-fetch API access logs in manageable increments. Must be > 0.\n\nIPage<T> contract: limits over-large requests."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter result to logs by this user-actor. Use for user-specific or admin-only API call analytics. Nullable so that all actors may be matched if not specified."},{"type":"null"}],"description":"Filter result to logs by this user-actor. Use for user-specific or admin-only API call analytics. Nullable so that all actors may be matched if not specified."},"endpoint":{"oneOf":[{"type":"string","description":"Return only logs affecting this API endpoint (substring or exact path). Useful for reviewing specific API usage, abuse monitoring, or traffic debugging. Nullable—if not provided, all endpoints are included in results."},{"type":"null"}],"description":"Return only logs affecting this API endpoint (substring or exact path). Useful for reviewing specific API usage, abuse monitoring, or traffic debugging. Nullable—if not provided, all endpoints are included in results."},"method":{"oneOf":[{"type":"string","description":"Optionally filter for HTTP method (e.g., 'GET', 'POST', 'PATCH', 'DELETE'). Restricts logs to specific call types in audit queries. Application logic uses this for analytics and security reviews. Nullable."},{"type":"null"}],"description":"Optionally filter for HTTP method (e.g., 'GET', 'POST', 'PATCH', 'DELETE'). Restricts logs to specific call types in audit queries. Application logic uses this for analytics and security reviews. Nullable."},"status_code":{"oneOf":[{"type":"integer","format":"int32","description":"Restrict results to a specific HTTP status code. Enables incident and error/failure auditing. Nullable; if not set, accepts all status codes."},{"type":"null"}],"description":"Restrict results to a specific HTTP status code. Enables incident and error/failure auditing. Nullable; if not set, accepts all status codes."},"start_date":{"oneOf":[{"type":"string","format":"date-time","description":"Earliest created_at to include (ISO 8601 UTC). Filters the access logs by time window for incident review or analytic dashboards. Nullable if not searching by date."},{"type":"null"}],"description":"Earliest created_at to include (ISO 8601 UTC). Filters the access logs by time window for incident review or analytic dashboards. Nullable if not searching by date."},"end_date":{"oneOf":[{"type":"string","format":"date-time","description":"Latest created_at to include (ISO 8601 UTC). Defines upper-bound for audit trail queries and time-limited search. Nullable."},{"type":"null"}],"description":"Latest created_at to include (ISO 8601 UTC). Defines upper-bound for audit trail queries and time-limited search. Nullable."}},"required":[],"description":"Request body struct for paginated query of API access logs. Enables advanced filtering by actor, endpoint, method, status code, and windowing by timestamps. Used in administrative, analytic, or incident root-cause analysis tools for observing API call traffic and audit events. Compliant with IPage<T> search interfaces."},"IPageIDiscussionboardApiAccessLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pager info for this result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardApiAccessLog"},"description":"The atomic list of API access log event objects for this page."}},"required":["pagination","data"],"description":"Paging container for API access log queries. Uses the IPage<T> composition for metadata and list of returned records. Every page object holds pagination information and atomic instances of IDiscussionboardApiAccessLog entity type."},"IDiscussionboardApiAccessLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the API access log record. Enables reference and sequencing of logs for security review and analytics. Globally unique."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"The acting user's UUID, if authenticated (may reference discussionboard_members/admins). Used for user-centric security or analytics; nullable for unauthenticated (guest) API calls."},{"type":"null"}],"description":"The acting user's UUID, if authenticated (may reference discussionboard_members/admins). Used for user-centric security or analytics; nullable for unauthenticated (guest) API calls."},"method":{"type":"string","description":"HTTP method verb of the API call (e.g., 'GET', 'POST'). Enables filtering and traffic-type analytics. Non-null; part of traceability contract."},"endpoint":{"type":"string","description":"Path/route requested in the API call. Used for endpoint-specific logging, troubleshooting, and route popularity analysis. Non-null."},"status_code":{"type":"integer","format":"int32","description":"HTTP status code returned by this call (e.g., 200, 404). Used in error analytics, SLA compliance auditing, and incident reviews. Non-null."},"ip_address":{"type":"string","description":"IP address of the remote client. Maintains auditing and anti-abuse traceability, supports geo-analytics, and incident forensics. Non-null; may be IPv4 or IPv6 string format."},"user_agent":{"oneOf":[{"type":"string","description":"User agent string (browser/device signature, optional). Maintains minimal tracking for user analytics or bug triage. Nullable if not present or determined."},{"type":"null"}],"description":"User agent string (browser/device signature, optional). Maintains minimal tracking for user analytics or bug triage. Nullable if not present or determined."},"response_time_ms":{"type":"integer","format":"int32","description":"API request processing time in milliseconds. Used for platform performance analysis and latency diagnostics. Non-null."},"created_at":{"type":"string","format":"date-time","description":"When the API access log was written (ISO 8601 UTC). Enables ordered queries and retention window logic. Atomic, set by DB/server layer, and never mutable."}},"required":["id","method","endpoint","status_code","ip_address","response_time_ms","created_at"],"description":"API access log event entity. Implements traceability, diagnostic review, and abuse/incident reporting requirements for all API traffic through the discussion board. Each log event records the method, endpoint, status, IP, actor (if authenticated), UA, latency, and time. Fully normalized and mapped to original Prisma schema documentation, facilitating root-cause analysis in incident response and general traffic reporting."},"IDiscussionboardApiAccessLog.ICreate":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"User (if authenticated) whose call produced the API access event. Use for analytics, tracing, and security review. Nullable for guest access."},{"type":"null"}],"description":"User (if authenticated) whose call produced the API access event. Use for analytics, tracing, and security review. Nullable for guest access."},"method":{"type":"string","description":"HTTP method of the API call (GET, POST, PATCH, etc). Required field for log creation; allows downstream diagnostic correlation. Standard HTTP method string."},"endpoint":{"type":"string","description":"Endpoint route/path accessed in the call. Required, enables endpoint-level analytics, error triage, and usage pattern analysis."},"status_code":{"type":"integer","format":"int32","description":"HTTP response code returned. Comprehensive logging of all types (success/error/redirect). Atomic, required for error/incident tracking."},"ip_address":{"type":"string","description":"Remote client's IP address (IPv4/v6 as string). Used for anti-abuse, analytics, and forensics. Required at creation for complete traceability."},"user_agent":{"oneOf":[{"type":"string","description":"Browser/device/system user agent string. Optional for analytics or debugging. String format, nullable if not available or logged."},{"type":"null"}],"description":"Browser/device/system user agent string. Optional for analytics or debugging. String format, nullable if not available or logged."},"response_time_ms":{"type":"integer","format":"int32","description":"Measured processing time of the API call in ms. Important for service-level metrics, latency resource allocation, and performance dashboards."}},"required":["method","endpoint","status_code","ip_address","response_time_ms"],"description":"Payload fields for creation of an API access log entry. Fields include required method, path, status, IP, performance data. Used by middleware/platform integrations to record traffic after every successful call."},"IDiscussionboardApiAccessLog.IUpdate":{"type":"object","properties":{"user_agent":{"oneOf":[{"type":"string","description":"Update to the user agent (device/browser) for this API access log. Required only for correcting previously untracked or updated data. Nullable for explicit removal or reset."},{"type":"null"}],"description":"Update to the user agent (device/browser) for this API access log. Required only for correcting previously untracked or updated data. Nullable for explicit removal or reset."}},"required":[],"description":"Partial update struct for a recorded API access log. Only mutable fields permitted for update (user agent, for post-hoc device correction/annotation). All other fields are immutable event data intended for audit/compliance traceability."}},"authorization":[{"name":"admin","description":"Has full control over board management, user moderation, and content regulation. Can manage user roles, remove posts/comments, and oversee overall platform activity."},{"name":"moderator","description":"Can monitor content, handle reports, moderate discussions, remove inappropriate posts/comments, and assist with enforcing community guidelines."},{"name":"member","description":"Registered user who can create posts, comment, like/dislike content, and participate in all discussions."},{"name":"guest","description":"Unauthenticated user who can view public content but cannot participate or post until registering."}]}},"created_at":"2025-07-22T13:33:10.034Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2201058,"input":{"total":2093423,"cached":84224},"output":{"total":107635,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}}]