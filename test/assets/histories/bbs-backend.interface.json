[
  {
    "id": "b51adde4-9e1e-4412-9641-df0869e3ab12",
    "type": "userMessage",
    "contents": [
      {
        "type": "text",
        "text": "I want to create a political/economic discussion board. Since I'm not familiar with programming, please write a requirements analysis report as you see fit. The report should be approximately 3 pages long.\n"
      }
    ],
    "created_at": "2025-06-09T05:49:50.474Z"
  },
  {
    "id": "355c182c-7587-407d-bc61-303a3843c6cf",
    "type": "userMessage",
    "contents": [
      {
        "type": "text",
        "text": "I want to create a political/economic discussion board. Since I'm not familiar with programming, please write a requirements analysis report as you see fit. The report should be approximately 3 pages long.\n"
      }
    ],
    "created_at": "2025-07-14T09:02:42.984Z"
  },
  {
    "id": "7d1f5537-6076-4953-b7d2-91810989115c",
    "type": "analyze",
    "reason": "The user has delegated planning and requirements analysis to me. They want to create a political/economic discussion board and have requested a comprehensive requirements analysis report of approximately 3 pages, acknowledging their lack of technical expertise. Proceeding to generate a detailed, structured requirement specification suitable for non-technical stakeholders.",
    "prefix": "discussionboard",
    "roles": [
      {
        "name": "member",
        "description": "A regular user who can register, login, create posts, comment, like, and report inappropriate content. Can participate in both political and economic discussions."
      },
      {
        "name": "moderator",
        "description": "A trusted user responsible for overseeing discussions, moderating posts and comments, managing reports, and enforcing community guidelines."
      },
      {
        "name": "admin",
        "description": "The system administrator with highest-level permissions. Can manage users, moderators, content, and platform settings."
      }
    ],
    "files": {
      "00_discussionboard_toc.md": "# Discussion Board Requirements Documentation\n\nWelcome to the requirements documentation for the Discussion Board system. This documentation is structured to provide comprehensive guidance through all phases of requirements analysis, scope clarification, functional breakdown, user roles, and permission systems. Each main section is linked for ease of navigation.\n\n---\n\n## Table of Contents\n\n1. **[Overview & Scope](01_discussionboard_overview_and_scope.md)**\n    - Summary of the Discussion Board, goals, in-scope/out-of-scope topics, definition of key terms, and business objectives.\n2. **[Functional Requirements](02_discussionboard_functional_requirements.md)**\n    - Detailing all major and minor features, including discussion categories, posting, commenting, moderation, reporting, liking, notification logic, and discussion filtering/searching.\n3. **[User Roles & Permissions](03_discussionboard_user_roles_and_permissions.md)**\n    - Matrix of user roles (member, moderator, admin), authentication, permission levels, role-based system behaviors, and administrative controls.\n\n---\n\n### Document Purpose\nThis documentation is crafted to support requirement gathering, team alignment, and development. Each section is modular and hyperlinked for easy reference, revisions, and review. Please use the links above to access detailed requirements for each area.\n\n### Navigation & Usage\n- Each document contains internal references and links to related sections for seamless navigation.\n- Use the Table of Contents to quickly jump to the part of the documentation most relevant to your needs.\n\n---\n\nFor definitions, updates, or feedback, contact the project owner. Continue to [01_discussionboard_overview_and_scope.md](01_discussionboard_overview_and_scope.md) to begin exploring the overview and scope of this project.",
      "01_discussionboard_overview_and_scope.md": "# Overview and Scope of the Political/Economic Discussion Board\n\n## Introduction\nThis document provides an in-depth overview, defines the scope, and captures the foundational goals and concepts behind the Political/Economic Discussion Board project. Designed as a central reference for all stakeholders—especially non-developers—it articulates the project's aspirations, boundaries, and success metrics. Clearly defined user roles (member, moderator, admin) guide feature and permissions planning throughout.\n\n## Purpose & Business Goals\nThe central purpose of this platform is to foster informed, respectful dialogue around political and economic topics. The project aims to:  \n- **Encourage community participation**: Enable users from diverse backgrounds to engage in meaningful discussions that bridge social and ideological divides.\n- **Support knowledge sharing**: Provide an accessible space for exchanging viewpoints, data, and analyses on current political and economic issues.\n- **Cultivate civil discourse**: Create mechanisms for respectful debate, reducing misinformation and toxic behavior through strong moderation and reporting.\n- **Drive platform growth & engagement**: Implement features (likes, comments, post creation, reporting) that increase daily active users, session duration, and content generation.\n- **Support platform scalability and stability**: Design for expansion, anticipating increased user volume and topic diversity as popularity grows.\n- **Establish brand authority**: Position the project as a go-to source for balanced, intelligent discussions in the targeted domain.\n\nKey business goals include:\n- Achieve a monthly active user base of 10,000 within the first year\n- Maintain user report resolution rates above 95% within 24 hours\n- Reach a user-generated content count (posts & comments) that grows by at least 15% month-over-month\n\n## Scope of the Project\n\nThe scope encompasses features that:\n- Enable user registration, authentication, and profile management\n- Allow members to create, edit, comment on, like, and report posts in political and economic categories\n- Empower moderators with moderation tools (editing, hiding, deleting, and flagging content, managing reports)\n- Provide admins with comprehensive management tools for all users, roles, and system configurations\n- Ensure robust permission handling, API authentication, and security\n- Present a modern, intuitive UI for desktop and mobile users\n- Integrate analytics to monitor platform use, flag abuse, and inform future feature planning\n\nThe platform intentionally excludes real-time chat features, external advertising modules, or direct financial transactions in its initial phase.\n\nFor detailed functional requirements, refer to [02_discussionboard_functional_requirements.md](./02_discussionboard_functional_requirements.md).\n\n## Target Audience & Stakeholders\n\nThe discussion board serves a broad and diverse audience:\n- **General Members**: Users interested in political and economic news, analysis, and conversation; includes students, professionals, and the general public.\n- **Content Contributors**: Subject-matter experts, bloggers, commentators, or news aggregators seeking a platform for outreach\n- **Moderators**: Community members trusted to uphold guidelines and foster respectful exchange; typically active, experienced participants\n- **Administrators**: Technical and content managers responsible for platform supervision, growth strategies, and user management\n\nAdditional stakeholders include:\n- **Partner organizations**: Universities, think tanks, or nonprofits seeking dialogue opportunities or knowledge sharing\n- **Platform Developers/Operations**: Technical staff implementing and maintaining the system\n- **Advertisers & Sponsors** (future phase): Entities interested in reaching an engaged, informed audience (currently outside scope)\n\n## Key Concepts and Definitions\n- **Member**: Authenticated user participating in posts, comments, likes, and reports; includes all community members by default\n- **Moderator**: Elevated user role with capability to enforce rules, manage content/reporting, and intervene in discussions when necessary\n- **Admin**: Ultimate system authority, controls user management, system configuration, and overall platform health\n\nSee permissions breakdown in [03_discussionboard_user_roles_and_permissions.md](./03_discussionboard_user_roles_and_permissions.md).\n\n## Out of Scope\nCertain advanced features are explicitly excluded:\n- Real-time voice/video chat\n- External ad serving or in-platform e-commerce\n- Integration with external single sign-on providers (SSO)\n\n## Success Criteria\nSuccess of the discussion board will be measured by both qualitative and quantitative indicators:\n- **Quantitative KPIs:**\n    - Monthly active users surpass 10,000\n    - User retention rate exceeds 60% after three months\n    - Content growth (posts, comments) increases at least 15% per month\n    - 95% of user reports resolved by moderators/admins within 24 hours\n- **Qualitative Metrics:**\n    - Positive community feedback (survey, net promoter score, review analysis)\n    - Notable recognition or partnership initiation with reputable organizations\n    - Platform cited as a reference or resource within political and economic discussions online\n- **Platform Reliability:**\n    - Achieve 99.5% or greater uptime across all core features\n    - Minimal downtime or critical incidents impacting user experience\n\nThese criteria will be continually reviewed and updated as the platform evolves.\n\n## Document References\n- [Table of Contents](./00_discussionboard_toc.md)\n- [Functional Requirements](./02_discussionboard_functional_requirements.md)\n- [User Roles & Permissions](./03_discussionboard_user_roles_and_permissions.md)",
      "02_discussionboard_functional_requirements.md": "# Discussion Board Functional Requirements\n\n## 1. Introduction\nThis document outlines the functional requirements for the Discussion Board platform, serving as guidance for system developers and stakeholders. It incorporates role-specific actions aligned with business goals, ensuring the platform supports robust user engagement and effective moderation.\n\n## 2. User Roles Covered\n- **Member**: Standard users who create and interact with content, and report inappropriate material.\n- **Moderator**: Trusted users with tools for content oversight and rule enforcement.\n- **Admin**: Platform managers with full system access and user administration capabilities.\n\n(For a breakdown of permissions, see [03_discussionboard_user_roles_and_permissions.md](./03_discussionboard_user_roles_and_permissions.md))\n\n## 3. Core Functional Requirements\n\n### 3.1. User Registration & Authentication\n- Users must be able to register new accounts and log in securely.\n- Support password reset and account recovery workflows.\n- Implement role-based authentication reflecting member, moderator, and admin distinctions.\n\n### 3.2. Creating & Managing Posts\n- Authenticated members can create, edit, and delete their own posts.\n- Posts must support categorization: at minimum, \"Politics\" and \"Economics\" boards.\n- Enable formatting (basic Markdown or WYSIWYG), tagging, and optional attachments (e.g., images).\n- Display post timestamps and author information.\n\n### 3.3. Commenting Functionality\n- Users can comment on posts within both discussion categories.\n- Support threaded (nested) comments for clear conversation flow.\n- Enable editing and deletion of own comments.\n- Comment timestamps and author info are shown.\n\n### 3.4. User Interactions (Likes & Reporting)\n- Registered users can like posts and comments (1 like per user per item).\n- Users may report posts/comments for abuse, spam, or other guideline violations.\n- Capture reporting reasons and support multiple report types.\n- Block double-reporting on identical content from the same user.\n\n### 3.5. Moderation Tools\n- Moderators access a dashboard displaying recent reports and flagged items.\n- Permit moderators to delete or hide posts/comments following review.\n- Enable warning issuing, user muting, or temporary bans.\n- Provide moderators with review status tracking for reported content.\n\n### 3.6. Administration\n- Admins can manage user accounts (activate, deactivate, assign/revoke roles).\n- Enable admin access to content analytics for audit and improvement.\n- Platform-wide settings (e.g., discussion board categories, moderation policies) are configurable by admins only.\n\n### 3.7. Notifications\n- Users receive in-app notifications for activity on their posts/comments (e.g., replies, likes, moderator actions).\n- Customizable notification preferences per user.\n\n### 3.8. Search & Discovery\n- Search functionality across posts and comments (by keyword, author, tags).\n- Filter posts by category, recency, popularity, or unresolved reports.\n\n### 3.9. Access & Security\n- All sensitive operations must enforce role-appropriate authentication.\n- Implement input validation and anti-spam protection.\n- All actions should be logged for auditability by admins.\n\n---\nFor additional details and rationale behind these features, see [01_discussionboard_overview_and_scope.md](./01_discussionboard_overview_and_scope.md).\n\nIs there anything to refine or expand within these requirements?",
      "03_discussionboard_user_roles_and_permissions.md": "# User Roles & Permissions for the Discussion Board\n\n## Overview\nProper role-based access control is essential for the operation, management, and security of the discussion board. This document outlines all user roles, their permissions, and summarizes core mechanisms for authentication and authorization. This model supports maintainability, secure access, and future feature growth.\n\n## Defined User Roles\n\n| Role       | Description                                                                                                       |\n|------------|-------------------------------------------------------------------------------------------------------------------|\n| Member     | Regular registered user who can participate in discussions, create and interact with posts, and use reporting features. |\n| Moderator  | Trusted user responsible for content oversight, enforcing guidelines, and handling reported items.               |\n| Admin      | System administrator with comprehensive platform control, including user, moderator, and settings management.     |\n\n## Permissions Matrix\n\n| Permission                              | Member | Moderator | Admin |\n|------------------------------------------|:------:|:---------:|:-----:|\n| Register / Login                        |   ✓    |     ✓     |   ✓   |\n| Create, Edit, Delete Own Posts          |   ✓    |     ✓     |   ✓   |\n| Comment / Like                          |   ✓    |     ✓     |   ✓   |\n| Report Inappropriate Content            |   ✓    |     ✓     |   ✓   |\n| Moderate (Edit/Delete Others’ Content)  |        |     ✓     |   ✓   |\n| Manage Reports/Resolve Issues           |        |     ✓     |   ✓   |\n| Manage Members (ban, role change)       |        |           |   ✓   |\n| Manage Moderators                       |        |           |   ✓   |\n| Access Admin Dashboard/Settings         |        |           |   ✓   |\n| Platform Configuration                  |        |           |   ✓   |\n\n## Role Change & Escalation\n- **Promotion to Moderator**: Only Admin can assign Moderator roles.\n- **Demotion/Promotion**: Admin can manage all role assignments. Members and Moderators cannot self-promote.\n- **Ban/Deactivate**: Admin can suspend or ban any user; Moderators may suggest bans (for Admin review).\n\n## Authentication & Authorization Model\n- **Authentication**: All users (member, moderator, admin) authenticate via secure login (email/password or SSO).\n- **Session Management**: Tokens/session cookies to represent active logins; refresh as required.\n- **Authorization**: Role is bundled with user profile; each API checks role-linked permissions prior to fulfilling requests.\n- **API Enforcement**: Endpoints are protected so only users with sufficient permissions can execute sensitive actions (e.g., moderation, admin commands).\n\n## User Management Flows\n- **User Registration & Login**: Members self-register; moderators/admins are promoted by Admin.\n- **Role Assignment/Revoke**: Only Admin has API/UI controls to configure roles for any user.\n- **Audit Logging**: Sensitive actions, especially bans or role changes, are logged for traceability.\n\n## Security & Best Practices\n- All privileged actions (moderator/admin) require authentication and strong authorization checks.\n- Minimize privilege escalation risk by preventing self-assignment of higher roles.\n- Regularly audit user role changes; provide notification of changes to affected users.\n\n## Appendix\n- For business rules and API endpoint protection: see [02_discussionboard_functional_requirements.md].\n- For the platform’s overall scope: see [01_discussionboard_overview_and_scope.md].\n"
    },
    "step": 0,
    "created_at": "2025-07-14T09:02:45.145Z",
    "completed_at": "2025-07-14T09:05:06.427Z"
  },
  {
    "type": "prisma",
    "id": "333340e6-7d58-45e9-9ae6-e2e2c741448a",
    "created_at": "2025-07-14T09:09:05.442Z",
    "completed_at": "2025-07-14T09:18:32.965Z",
    "reason": "Step to the Prisma DB schema generation after requirements analysis",
    "description": "",
    "result": {
      "success": true,
      "data": {
        "files": [
          {
            "filename": "schema-01-core.prisma",
            "namespace": "Core",
            "models": [
              {
                "name": "discussionboard_user",
                "description": "[User Master Record] - This implements the foundational user management requirement noted in the requirements analysis (02_discussionboard_functional_requirements.md Section 3.1: User Registration & Authentication). \n\nThis model captures core authentication and identity data for all discussion board participants—regardless of role (member, moderator, admin). Maintains strict 3NF compliance by isolating authentication data (email, credential info, status) from profile and role specialization, preventing duplication or transitive dependencies. For example, all roles reference this entity, and profile/details are managed in separate tables.\n\nKey relationships: Links 1:1 to discussionboard_user_profile. Related 1:N with role specializations (member/moderator/admin), posts, comments, and all historical user actions.\nSpecial behaviors: Only one email per user. Role management handled via join/role specialization tables. Soft deactivation supported by 'is_active' flag.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Globally unique identifier for the user. Implements the requirements for traceable, referential user identity across all core tables (see 02_discussionboard_functional_requirements.md). 3NF enforced as surrogate key. For example, all foreign key relationships use this for core user reference.",
                  "isId": true,
                  "isGenerated": true
                },
                "foreignFields": [],
                "plainFields": [
                  {
                    "name": "email",
                    "type": "string",
                    "description": "[Authentication Email] - Implements unique login credential per user requirement. Business meaning: Used for login, notifications, and password recovery. Ensures normalization by existing only on user root entity and not duplicated elsewhere. Enforced unique constraint. E.g., user login process.",
                    "nullable": false
                  },
                  {
                    "name": "password_hash",
                    "type": "string",
                    "description": "[Password Hash] - Securely stores password hash for authentication workflow per 02_discussionboard_functional_requirements.md. Ensures separation from credential-independent profile info. Used for login verification.",
                    "nullable": false
                  },
                  {
                    "name": "is_active",
                    "type": "boolean",
                    "description": "[Active Status] - Tracks whether the user account is enabled or deactivated (requirement: Admin can deactivate). Normalization: not duplicated elsewhere. For account suspension procedures.",
                    "nullable": false
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "description": "[Creation Timestamp] - When user joined. Required for audit and analytics (see success criteria in 01_discussionboard_overview_and_scope.md). Used in user growth/activation KPIs.",
                    "nullable": false
                  },
                  {
                    "name": "updated_at",
                    "type": "datetime",
                    "description": "[Last Update Timestamp] - Business: Audit and admin review. Ensures clean separation—no transitive dependency.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "email"
                    ],
                    "description": "Enforces single user per email (see authentication/user registration requirements).",
                    "unique": true
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "is_active"
                    ],
                    "description": "Optimizes queries for active/inactive status, e.g., listing active users."
                  }
                ],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_user_profile",
                "description": "[User Profile] - Implements user display/personalization requirements (02_discussionboard_functional_requirements.md, 3.1) distinct from root authentication. Holds display name, optional avatar, and bio—strictly 3NF as contact details, credentials, role, and settings are elsewhere. Used for member directories, post attributions, notifications.\n\nKey relationships: 1:1 with discussionboard_user (foreign key = unique). Not duplicated in role tables.\nSpecial behaviors: 1:1 uniqueness enforced. All user display data (NOT used for authentication).",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Globally unique identifier for the profile. Surrogate key for normalization. Ensures all profile retrieval and modifications are auditable.",
                  "isId": true,
                  "isGenerated": true
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "[Foreign Key: discussionboard_user] - User this profile belongs to. Implements 1:1 user-profile relationship (requirement: one profile per account, never duplicated). Enforces normalization. E.g., to get profile when showing post author.",
                    "relation": {
                      "targetModel": "discussionboard_user",
                      "fkField": "user_id",
                      "name": "user_profile_user_id"
                    },
                    "unique": true,
                    "nullable": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "display_name",
                    "type": "string",
                    "description": "[Display Name] - User's chosen name, shown publicly on posts/comments. Not used for authentication. Maintains 3NF by separating identity from credential tables. E.g., 'JohnDoe'.",
                    "nullable": false
                  },
                  {
                    "name": "avatar_url",
                    "type": "uri",
                    "description": "[Avatar Image] - Optional user image link. Not duplicated anywhere. Maintains normalized structure. Used on post lists/user bios.",
                    "nullable": true
                  },
                  {
                    "name": "bio",
                    "type": "string",
                    "description": "[User Bio] - Self-description or background, used on profiles/mouseover displays. Normalization: No business logic outside of display.",
                    "nullable": true
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "user_id"
                    ],
                    "description": "Enforces strict 1:1 between profile and user root entity (see authentication/profile requirements).",
                    "unique": true
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "display_name"
                    ],
                    "description": "For search (e.g. user directory, mention autocompletion)."
                  }
                ],
                "ginIndexes": [
                  {
                    "fieldName": "bio",
                    "description": "Fuzzy/full-text search of user bios (requirements for search/discovery in 02_discussionboard_functional_requirements.md)."
                  }
                ]
              },
              {
                "name": "discussionboard_member",
                "description": "[Member Role] - Implements domain model for general user participation rights (see user roles in 03_discussionboard_user_roles_and_permissions.md and participation requirements in 02_discussionboard_functional_requirements.md 3.2-3.4). This captures all accounts with base-level actions (posting, commenting, liking). All users with platform presence are members. 3NF: Only stores role-specific facts, no credential/profile fields duplicated.\n\nKey relationships: 1:1 with discussionboard_user. Related 1:N to posts, comments, likes, reports. Role is atomic, all privileges via explicit role presence.\nSpecial behaviors: Role assignment/demotion flows strictly auditable via foreign key.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Each member has a dedicated, globally unique role assignment entry for traceability (even if admin or moderator). Enforces 3NF by using only a surrogate key.",
                  "isId": true,
                  "isGenerated": true
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "[Foreign Key: discussionboard_user] - Account assigned this member role. Enforces 1:1 mapping, not duplicated for other roles. Needed for permissions matrix. E.g., to check if a user can create posts.",
                    "relation": {
                      "targetModel": "discussionboard_user",
                      "fkField": "user_id",
                      "name": "member_user_id"
                    },
                    "unique": true,
                    "nullable": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "granted_at",
                    "type": "datetime",
                    "description": "[Membership Grant Timestamp] - When membership began. Required for audits, demotions, or calculating active duration. Maintains third normal form by not holding user or credential data.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "user_id"
                    ],
                    "description": "Enforces member role is assigned at most once per user. (No duplicate member records per user).",
                    "unique": true
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_moderator",
                "description": "[Moderator Role] - Implements elevated moderator assignment for trusted members, referencing business rules in 03_discussionboard_user_roles_and_permissions.md and moderation functions in 02_discussionboard_functional_requirements.md 3.5. Only users explicitly assigned this role are allowed moderation tools. 3NF-preserving: only stores moderator-specific info (no duplication of credentials/profile).\n\nKey relationships: 1:1 to discussionboard_user (atomic assignment). Related 1:N to reports, moderation actions.\nSpecial behaviors: Grant/revoke flows auditable. All permission checks cleanly reference this mapping.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Unique identifier for moderator role assignment. Enforces traceability, audit, and clean separation. Used for all moderator-level permission checks.",
                  "isId": true,
                  "isGenerated": true
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "[Foreign Key: discussionboard_user] - User granted moderator authority (must also be a member). 1:1 constraint by unique index. Never duplicated nor nullable. E.g., lookup for report review access.",
                    "relation": {
                      "targetModel": "discussionboard_user",
                      "fkField": "user_id",
                      "name": "moderator_user_id"
                    },
                    "unique": true,
                    "nullable": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "assigned_at",
                    "type": "datetime",
                    "description": "[Moderator Grant Timestamp] - When moderator role was assigned. Auditing and compliance for all moderator promotions. Normalization: Never holds non-moderator info.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "user_id"
                    ],
                    "description": "Ensures only one moderator assignment can exist per user (requirement: unique role assignment).",
                    "unique": true
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_admin",
                "description": "[Admin Role] - Implements system administrator privilege assignment as per 03_discussionboard_user_roles_and_permissions.md and 02_discussionboard_functional_requirements.md (platform-wide management, user promotion/role reassignment). All platform-wide permissions are checked against this table. 3NF-compliant: only houses admin assignment data, never duplicates user or moderator/member details.\n\nKey relationships: 1:1 to discussionboard_user; referenced when determining admin dashboard/settings access. All permission checks reference this mapping.\nSpecial behaviors: Admin can demote/promote all other roles. Auditing via assignment timestamps. No transitive/admin details outside this entry.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Surrogate key for admin role assignment. Allows auditing/change tracking for all promotions/demotions. Clean, normalized design.",
                  "isId": true,
                  "isGenerated": true
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "[Foreign Key: discussionboard_user] - User assigned admin authority. Enforced 1:1 by unique index, not nullable. 3NF: Never duplicated.",
                    "relation": {
                      "targetModel": "discussionboard_user",
                      "fkField": "user_id",
                      "name": "admin_user_id"
                    },
                    "unique": true,
                    "nullable": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "assigned_at",
                    "type": "datetime",
                    "description": "[Admin Assignment Timestamp] - When the admin role was assigned; fulfills trace and change-audit requirements for privileged role escalation. Normalized by excluding non-admin details.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "user_id"
                    ],
                    "description": "Guarantees unique admin assignment per user. No duplicate admin roles for a single account.",
                    "unique": true
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              }
            ]
          },
          {
            "filename": "schema-02-board.prisma",
            "namespace": "DiscussionBoard",
            "models": [
              {
                "name": "discussionboard_post",
                "description": "[Discussion Posts] - Implements Sections 3.2 (Creating & Managing Posts) and 3.1 (User Registration & Authentication) as detailed in the requirements (02_discussionboard_functional_requirements.md).\n\nStores the main discussion board contributions (posts), tracking author, category, creation/edit timestamps, and supports soft deletion. Ensures strict 3NF: posts do not contain redundant author or category data, referencing normalized member and category tables instead. Usage example: a post about economic policy references its author (member) and its category (e.g., 'Economics') without duplicating user/category info.\n\nKey relationships: discussionboard_member (author), discussionboard_post_category (category), attachments, tags, etc. Special behaviors: soft-delete is tracked via deleted_at; author/category FKs are required and not nullable.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Unique identifier for each post as mandated for atomic access and historical auditing (Section 3.2)."
                },
                "foreignFields": [
                  {
                    "name": "author_member_id",
                    "type": "uuid",
                    "description": "[Author Member FK] - References the member authoring the post (see Section 3.2 in requirements). Maintains normalization by only referencing the member, not duplicating member data. E.g., used for showing all posts by a member.",
                    "relation": {
                      "name": "member",
                      "model": "discussionboard_member",
                      "targetModel": "discussionboard_member",
                      "fields": [
                        "author_member_id"
                      ],
                      "references": [
                        "id"
                      ],
                      "onDelete": "Restrict"
                    },
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "category_id",
                    "type": "uuid",
                    "description": "[Category FK] - Associates post with a category (Section 3.2). Provides link to normalized category without duplication of data. E.g., 'Politics' or 'Economics'.",
                    "relation": {
                      "name": "category",
                      "model": "discussionboard_post_category",
                      "targetModel": "discussionboard_post_category",
                      "fields": [
                        "category_id"
                      ],
                      "references": [
                        "id"
                      ],
                      "onDelete": "Restrict"
                    },
                    "unique": false,
                    "nullable": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "title",
                    "type": "string",
                    "description": "[Post Title] - Implements discussion title per Section 3.2. Used for search/listings. Always non-null, atomic text.",
                    "nullable": false
                  },
                  {
                    "name": "body",
                    "type": "string",
                    "description": "[Post Content Body] - Main text body, supports formatting. Fully normalized; not nullable.",
                    "nullable": false
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "description": "[Creation Timestamp] - Records when the post was made (Section 3.2, 3.9).",
                    "nullable": false
                  },
                  {
                    "name": "updated_at",
                    "type": "datetime",
                    "description": "[Update Timestamp] - Last time this post was edited (Section 3.2). Used for audit/versioning display.",
                    "nullable": false
                  },
                  {
                    "name": "deleted_at",
                    "type": "datetime",
                    "description": "[Deleted Timestamp] - Soft-deletion timestamp if post is hidden/deleted by member or moderator. Nullable if not deleted.",
                    "nullable": true
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "author_member_id",
                      "created_at"
                    ],
                    "unique": true,
                    "description": "[Unique Author-Time] - Ensures each post from a member is unique for the same timestamp (prevents accidental duplicate submissions)."
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "created_at"
                    ],
                    "description": "[Created At Index] - Optimizes queries by post date, aiding latest/sorted feed operations."
                  },
                  {
                    "fieldNames": [
                      "category_id",
                      "created_at"
                    ],
                    "description": "[Category/Date Index] - For filtering posts by category and sorting by recency."
                  }
                ],
                "ginIndexes": [
                  {
                    "fieldName": "title",
                    "description": "[Title Trigram Search] - Enables full-text, fuzzy search for post titles (Section 3.8)."
                  },
                  {
                    "fieldName": "body",
                    "description": "[Body Trigram Search] - Enables search by content body text as required in Section 3.8."
                  }
                ]
              },
              {
                "name": "discussionboard_post_category",
                "description": "[Discussion Post Categories] - Implements Section 3.2 and 3.6 (Admin). Categories like 'Politics' or 'Economics'—referenced by posts, maintained separately for normalization. Usage: admins manage categories; posts always reference a category. Special: cannot delete if referenced by a post.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Uniquely identifies category; normalization ensures only atomic references used."
                },
                "foreignFields": [],
                "plainFields": [
                  {
                    "name": "name",
                    "type": "string",
                    "description": "[Category Name] - Per Section 3.2; e.g., 'Economics'. Used for filters/views. Unique and non-null.",
                    "nullable": false
                  },
                  {
                    "name": "description",
                    "type": "string",
                    "description": "[Category Description] - Extended human-readable info for admin/member UIs. Optional, normalized.",
                    "nullable": true
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "name"
                    ],
                    "unique": true,
                    "description": "[Unique Category Name] - Prevents duplicate category names (admin controlled)."
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_post_tag",
                "description": "[Discussion Post Tags] - Implements tagging per Section 3.2 to enable content filtering/search without denormalization. Each tag is stored atomically and referenced by M:N join (not included here). E.g., post tagged 'inflation'. Usage: tag table ensures uniqueness; pure key-name pairs only.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Unique atomic tag identity."
                },
                "foreignFields": [],
                "plainFields": [
                  {
                    "name": "name",
                    "type": "string",
                    "description": "[Tag Name] - Required label, e.g. 'inflation'. Uniqueness enforced; normalized/atomic.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "name"
                    ],
                    "unique": true,
                    "description": "[Unique Tag Name] - Disallows duplicate tags globally."
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_post_attachment",
                "description": "[Post Attachments] - Implements file/image management for posts (Section 3.2). Each attachment references one post, with file URL/type metadata. Maintains normalization with atomic URI/type; all files managed outside main post record; supports cascading delete on post removal.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary Key] - Unique attachment identity for tracking and referencing."
                },
                "foreignFields": [
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "description": "[Post FK] - Attachment's parent post (Section 3.2). Referenced (not duplicated) for strict normalization. Cascades on post delete.",
                    "relation": {
                      "name": "post",
                      "model": "discussionboard_post",
                      "targetModel": "discussionboard_post",
                      "fields": [
                        "post_id"
                      ],
                      "references": [
                        "id"
                      ],
                      "onDelete": "Cascade"
                    },
                    "unique": false,
                    "nullable": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "file_url",
                    "type": "uri",
                    "description": "[Attachment File URL] - Atomic URI (e.g., https://cdn.site/file.jpg). Required.",
                    "nullable": false
                  },
                  {
                    "name": "file_type",
                    "type": "string",
                    "description": "[Attachment MIME Type] - e.g. 'image/jpeg'. Required; normalized for filters.",
                    "nullable": false
                  },
                  {
                    "name": "uploaded_at",
                    "type": "datetime",
                    "description": "[Upload Timestamp] - Required point-in-time, supporting audit and ordering.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "post_id",
                      "file_url"
                    ],
                    "unique": true,
                    "description": "[Post-File Uniqueness] - Only one file with same URI per post."
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "uploaded_at"
                    ],
                    "description": "[Upload Time Index] - Audit, management, and chronological sort optimization."
                  }
                ],
                "ginIndexes": []
              }
            ]
          },
          {
            "filename": "schema-03-comment.prisma",
            "namespace": "Comments",
            "models": [
              {
                "name": "discussionboard_comments",
                "description": "[Comment Model] - This implements the comment functionality as outlined under functional requirements (sections 3.3, 3.4, 3.5) and supports threaded/nested comments for both 'Politics' and 'Economics' board categories. \n\nAllows users to participate in ongoing discussions by adding, editing, and deleting their own comments, with support for threaded conversations, reporting, moderation, and in-line engagement (likes). Maintains 3NF by separating this entity from users, posts, likes, and reports. For example, a user can comment on a post, reply to other comments (recursively), and have their comment moderated or reported independently. \n\nKey relationships: Links to posts, users (authors), and parent comment (if threaded). Supports foreign keys to reporting, moderation, and liking mechanisms in other models.\nSpecial behaviors: Enforces only one parent per comment for tree structure, supports soft deletion, and maintains a precise audit trail without any pre-calculated metrics.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Comment Primary Key] - Implements the unique identification (see 3NF and requirements mapping).\n\nGlobally unique identifier for each comment. Ensures 1NF uniqueness, enables precise referencing, and guarantees auditability and traceability across threads and moderation actions.\n"
                },
                "foreignFields": [
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "relation": {
                      "name": "post",
                      "targetModel": "discussionboard_post"
                    },
                    "description": "[Foreign Key: Post] - Implements the post-comment linkage as per requirement 3.3.\n\nAssociates each comment with its parent post (mandatory). Ensures 2NF by linking to the full post entity, not duplicating post info. For example, when displaying a comment, the app can show the related post's category or title.\n",
                    "nullable": false,
                    "unique": false
                  },
                  {
                    "name": "author_id",
                    "type": "uuid",
                    "relation": {
                      "name": "author",
                      "targetModel": "discussionboard_user"
                    },
                    "description": "[Foreign Key: Author] - Implements comment authorship per requirements 3.3, 3.4.\n\nLinks the comment directly to its user (author). Maintains normalization by not storing author details redundantly; user details are referenced via foreign key.\n",
                    "nullable": false,
                    "unique": false
                  },
                  {
                    "name": "parent_comment_id",
                    "type": "uuid",
                    "relation": {
                      "name": "parent_comment",
                      "targetModel": "discussionboard_comments",
                      "mappingName": "recursive"
                    },
                    "description": "[Foreign Key: Parent Comment] - Supports threaded/reply comments as per 3.3.\n\nSelf-referential link for comment thread nesting (optional; null for root-level comments). Maintains normalization by linking only to one parent, supporting recursive conversation trees without redundancy.\n",
                    "nullable": true,
                    "unique": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "content",
                    "type": "string",
                    "description": "[Comment Content] - Implements actual user message storage per requirement 3.3.\n\nHolds the content/message of the comment. Ensures normalization by storing only the user's entry, not derived or precomputed data. For example, users can edit this field within role constraints. No denormalized summary or rendering is stored in regular tables.\n",
                    "nullable": false
                  },
                  {
                    "name": "is_edited",
                    "type": "boolean",
                    "description": "[Edit Tracking Flag] - Supports edit-audit functionality per requirement 3.3 (editing own comments).\n\nBoolean indicating whether comment content has been modified since creation. Ensures normalization by storing only atomic edit status; edit history belongs in a separate snapshot/audit table if needed.\n",
                    "nullable": false
                  },
                  {
                    "name": "is_deleted",
                    "type": "boolean",
                    "description": "[Soft Delete Flag] - Enables reversible deletion per 3.3 and moderation (3.5).\n\nFlags comments as deleted (soft) without actual removal from database. Supports auditability and role-based recovery, ensuring no information loss for moderation history.\n",
                    "nullable": false
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "description": "[Creation Timestamp] - Records when the comment was posted (requirements 3.3, 3.9).\n\nStores creation time of the comment. Ensures normalization as an atomic, non-derived value, and provides audit trail foundation.\n",
                    "nullable": false
                  },
                  {
                    "name": "updated_at",
                    "type": "datetime",
                    "description": "[Last Update Timestamp] - Tracks edits, moderation actions as in 3.3, 3.5, 3.9.\n\nRecords latest update timestamp (edit, moderation, recovery, etc). Maintains audit and traceability without derived/polyglot aggregates.\n",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [],
                "plainIndexes": [
                  {
                    "name": "idx_post_id_created_at",
                    "fieldNames": [
                      "post_id",
                      "created_at"
                    ],
                    "description": "[Post-Time Index] - Optimizes queries retrieving all comments in a specific post by time order (requirement 3.3, 3.8).\n\nSpeeds up browse, search, and notification checks for new comments in a thread/post."
                  },
                  {
                    "name": "idx_author_id_created_at",
                    "fieldNames": [
                      "author_id",
                      "created_at"
                    ],
                    "description": "[Author-Activity Index] - Supports queries for all comments made by a user, ordered by recency (requirements 3.3, 3.9, audit log).\n\nOptimizes moderation/history/audit flows."
                  },
                  {
                    "name": "idx_parent_comment_id",
                    "fieldNames": [
                      "parent_comment_id"
                    ],
                    "description": "[Threaded Comment Index] - Accelerates fetching of replies for a given comment (requirements 3.3 - threaded comments).\n\nImproves efficiency of displaying nested conversation trees."
                  }
                ],
                "ginIndexes": [
                  {
                    "name": "gin_content",
                    "fieldName": "content",
                    "description": "[Content Search GIN Index] - Enables full-text and fuzzy search over comment text per 3.8.\n\nImproves performance for search/discovery and moderating/reporting workflows (requirement 3.8)."
                  }
                ]
              }
            ]
          },
          {
            "filename": "schema-04-interaction.prisma",
            "namespace": "Interaction",
            "models": [
              {
                "name": "discussionboard_likes",
                "description": "User Content Like - This implements the user engagement and interaction requirements (see sections 3.4 and 3.8 of the requirements analysis).\n\nEnables the platform’s core like/voting system, allowing users to like posts or comments once, supporting quantifiable content popularity and user involvement. Maintains strict 3NF normalization by separating atomic like events, with no aggregate/calculated fields present. For example, when a user clicks 'like' on a post, a record is created here, which can later be used for denormalized like counts in mv_ tables only.\n\nKey relationships: references to both posts and comments for polymorphic liking, user reference, and indexes support multi-content type lookups.\nSpecial behaviors: Uniqueness enforced so a user may only like a given post OR comment once, but not both at once (polymorphic uniqueness). All deletions are soft-deletes for audit/compliant removal tracking.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "Primary Key - Implements entity uniqueness. Each like interaction is uniquely identified for precise auditing and event tracking.",
                  "isId": true,
                  "dbType": "uuid"
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "User Foreign Key - Implements user traceability for interaction, mapping to discussionboard_user. Ensures which member created this like. For example, required when listing personal likes. Not nullable/required.",
                    "relation": {
                      "name": "user",
                      "targetModel": "discussionboard_user"
                    },
                    "nullable": false,
                    "unique": false
                  },
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "description": "Polymorphic Foreign Key: Post - Implements which post the like is attached to (where applicable), mapping to discussionboard_post. NULL if the like is for a comment. Enforces atomic association. For example, a user clicking like on a post will set this field. Nullable for polymorphism.",
                    "relation": {
                      "name": "post",
                      "targetModel": "discussionboard_post"
                    },
                    "nullable": true,
                    "unique": false
                  },
                  {
                    "name": "comment_id",
                    "type": "uuid",
                    "description": "Polymorphic Foreign Key: Comment - Implements comment interaction scope, mapping to discussionboard_comments. NULL if the like is for a post. For example, liking a comment sets this field. Supports normalization and polymorphic association.",
                    "relation": {
                      "name": "comment",
                      "targetModel": "discussionboard_comments"
                    },
                    "nullable": true,
                    "unique": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "description": "Creation Timestamp - Implements requirement for auditable, timestamped actions. When the like event was created. Ensures atomicity by being non-null and standard across events.",
                    "nullable": false
                  },
                  {
                    "name": "deleted_at",
                    "type": "datetime",
                    "description": "Soft-delete Timestamp - Enables reversible removal of like event in compliance with audit logging. Null if like is active, set if removed. Maintains normalization; never used as a logical indicator, only as an event timestamp.",
                    "nullable": true
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "user_id",
                      "post_id"
                    ],
                    "description": "Unique constraint to ensure a user can only like a given post once. Polymorphic enforcement for post-like scenario. Both null and non-null combinations (with comment_id) prevent double-liking content.",
                    "unique": true
                  },
                  {
                    "fieldNames": [
                      "user_id",
                      "comment_id"
                    ],
                    "description": "Unique constraint to ensure a user can only like a given comment once and cannot like both a post and comment with overlapping scope.",
                    "unique": true
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "post_id"
                    ],
                    "description": "Supports fast aggregation and lookup of likes per post, useful for showing like counts on post lists."
                  },
                  {
                    "fieldNames": [
                      "comment_id"
                    ],
                    "description": "Supports lookup and aggregation on comments, for fast rendering of popular/recently-liked comments."
                  }
                ],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_reports",
                "description": "User Content Report - This implements abuse/spam reporting requirements from sections 3.4, 3.5, 3.6, and 3.9.\n\nAllows users to report specific posts or comments for guideline violations, abuse, or spam. Maintains 3NF normalization by capturing only atomic reporting events (no report counts or summaries in table). For example, when a user flags a comment or post for review, a record is created here, with reason captured, for review by moderators/admins via reporting tools.\n\nKey relationships: references user (reporter), post (or comment), and enables polymorphic targeting of reports. Moderation actions are maintained elsewhere. Enforces business rules for no duplicate reports from the same user for the same content and logs reporting context for trace/audit.\nSpecial behaviors: Uniqueness constraints prevent double-reporting by same user per content type. Deletions are soft-deletes for compliance and history retention.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "Primary Key - Uniquely identifies each report for compliance, auditing, moderation, and traceability.",
                  "isId": true,
                  "dbType": "uuid"
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "Reporter Foreign Key - References the user (from discussionboard_user) who submitted the report. Maintains accountability and supports user-based moderation analytics. Not nullable; always required.",
                    "relation": {
                      "name": "user",
                      "targetModel": "discussionboard_user"
                    },
                    "nullable": false,
                    "unique": false
                  },
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "description": "Polymorphic Foreign Key: Post - Identifies the post that is being reported (if applicable). NULL if report targets a comment. Ensures correct, strictly normalized associativity, and prevents overlap with comment_id.",
                    "relation": {
                      "name": "post",
                      "targetModel": "discussionboard_post"
                    },
                    "nullable": true,
                    "unique": false
                  },
                  {
                    "name": "comment_id",
                    "type": "uuid",
                    "description": "Polymorphic Foreign Key: Comment - Identifies the comment being reported (if any). NULL if post is targeted. Supports polymorphic reporting of both content types. Enforces correct normalization.",
                    "relation": {
                      "name": "comment",
                      "targetModel": "discussionboard_comments"
                    },
                    "nullable": true,
                    "unique": false
                  }
                ],
                "plainFields": [
                  {
                    "name": "reason_code",
                    "type": "string",
                    "description": "Short Reason Code - Implements requirements for capturing structured event context (e.g. 'spam', 'abuse', 'off-topic'). Enables filtering and workflow logic. Follows a pre-set value list handled in application/business logic. 3NF maintained as reason text is never duplicated (codes only here).",
                    "nullable": false
                  },
                  {
                    "name": "reason_details",
                    "type": "string",
                    "description": "Detailed Reason (optional) - Implements reporting context capture for case auditing, moderation analytics, and transparency. Allows user to enter details or evidence. Nullable for cases where only the code is needed.",
                    "nullable": true
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "description": "Report Creation Timestamp - Indicates when the report was made. Implements audit trail (requirement: 3.9 and moderation review within 24hr SLA). Non-null, ensures each report is audited with precise event time.",
                    "nullable": false
                  },
                  {
                    "name": "deleted_at",
                    "type": "datetime",
                    "description": "Soft-delete Timestamp - Enables soft-removal (not physical deletion) of reports for moderation or review compliance. Null if active, non-null when deleted. Ensures normalization and auditable workflow.",
                    "nullable": true
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "user_id",
                      "post_id"
                    ],
                    "description": "Prevents a user from reporting the same post multiple times. Enforced for audit compliance and abuse protection.",
                    "unique": true
                  },
                  {
                    "fieldNames": [
                      "user_id",
                      "comment_id"
                    ],
                    "description": "Ensures no duplicate report by a single user against the same comment. Enforced for platform health and fair review.",
                    "unique": true
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "post_id"
                    ],
                    "description": "Support efficient moderation dashboards (list/filter reports by post)."
                  },
                  {
                    "fieldNames": [
                      "comment_id"
                    ],
                    "description": "For moderation workflow lists to fetch all reports involving a particular comment."
                  }
                ],
                "ginIndexes": []
              }
            ]
          },
          {
            "filename": "schema-05-moderation.prisma",
            "namespace": "Moderation",
            "models": [
              {
                "name": "discussionboard_moderation_action",
                "description": "[Moderation Actions Log] - This implements the moderation action audit requirement from the requirements documentation (sections 02.3.5, 02.3.6, and 03).\nRecords every direct moderation activity such as hide, delete, warning issuance, and user muting/ban performed by moderators or admins. Maintains 3NF compliance by referencing target users, actions, posts, and comments instead of duplicating their data. For example, every time a moderator deletes a post or issues a warning, a new record is created here linking who did what, to which item, and why.\nKey relationships: links to moderator/admin (actor), target user, affected post/comment (if applicable).\nSpecial behaviors: strictly append-only (no updates); supports complete audit trail of moderation interventions.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Primary key] - Standard internal identifier. Uniquely identifies each moderation action; ensures atomic representation of each occurrence."
                },
                "foreignFields": [
                  {
                    "name": "actor_id",
                    "type": "uuid",
                    "relation": {
                      "name": "actor",
                      "targetModel": "discussionboard_user",
                      "mappingName": "discussionboard_moderation_action_of_actor_id"
                    },
                    "description": "[Action originator] - Implements the 'who performed the action' requirement. References the moderator or admin user account executing the moderation. Ensures normalization by linking to user, not duplicating actor data. For example, when moderator #1234 deletes a comment, this field is #1234.",
                    "isRequired": true,
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "target_user_id",
                    "type": "uuid",
                    "relation": {
                      "name": "target_user",
                      "targetModel": "discussionboard_user",
                      "mappingName": "discussionboard_moderation_action_of_target_user_id"
                    },
                    "description": "[User targeted] - Fulfills the 'target of moderation' tracking requirement. Links to the affected user account (e.g., reported member). Ensures single source of truth for user data and enables traceability. For example, for a ban of user X, this references user X.",
                    "isRequired": true,
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "relation": {
                      "name": "moderated_post",
                      "targetModel": "discussionboard_post"
                    },
                    "description": "[Affected post] - Implements moderation linkage for post-level actions. References the post if this action affects a specific post. Normalization preserved (nullable, as not all actions are post-related). For example, deleting a post links here; issuing a ban does not.",
                    "isRequired": false,
                    "unique": false,
                    "nullable": true
                  },
                  {
                    "name": "comment_id",
                    "type": "uuid",
                    "relation": {
                      "name": "moderated_comment",
                      "targetModel": "discussionboard_comments"
                    },
                    "description": "[Affected comment] - Moderation linkage to comment. References the comment if the action is on a specific comment. Kept nullable to preserve 3NF and flexibility. For example, hiding a comment references its id here.",
                    "isRequired": false,
                    "unique": false,
                    "nullable": true
                  }
                ],
                "plainFields": [
                  {
                    "name": "action_type",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Action type] - Implements requirement to enumerate distinct moderation activities. Type of moderation: e.g., 'delete_post', 'hide_comment', etc. Maintains normalization."
                  },
                  {
                    "name": "reason",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Reason] - Fulfills rationale for moderation. Stores moderator/admin's reason/comment. Ensures accountability, searchable, used for appeals."
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Timestamp] - Implements time-based audit tracking. True creation time of the action record, guarantees traceability."
                  }
                ],
                "uniqueIndexes": [],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "actor_id",
                      "created_at"
                    ],
                    "description": "[Actor-chronological index] - For moderator/admin activity logs sorted by time."
                  },
                  {
                    "fieldNames": [
                      "target_user_id",
                      "created_at"
                    ],
                    "description": "[Target user moderation history] - Fast lookup of all actions against a user, time-ordered."
                  }
                ],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_report_review",
                "description": "[Report Review Log] - Implements requirements for moderation report review workflow (sections 02.3.4, 02.3.5, 03).\nTracks moderator or admin handling of user-submitted reports on posts/comments. Maintains 3NF by referencing report, reviewer, affected post/comment, and action taken. For example, when a moderator reviews a reported post and marks it as 'resolved,' a record is created here linking to all relevant entities.\nKey relationships: links to the report, reviewer, optionally post/comment.\nSpecial behaviors: append-only, supports full reporting workflow and audit.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Primary key] - Unique identifier for report reviews."
                },
                "foreignFields": [
                  {
                    "name": "report_id",
                    "type": "uuid",
                    "relation": {
                      "name": "report",
                      "targetModel": "discussionboard_reports"
                    },
                    "description": "[The report being reviewed] - Links to a specific user report for moderation review.",
                    "isRequired": true,
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "reviewer_id",
                    "type": "uuid",
                    "relation": {
                      "name": "reviewer",
                      "targetModel": "discussionboard_user"
                    },
                    "description": "[Moderator/admin reviewer] - References user carrying out the review.",
                    "isRequired": true,
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "relation": {
                      "name": "reviewed_post",
                      "targetModel": "discussionboard_post"
                    },
                    "description": "[Reviewed post] - Links reviewed post, nullable because not all reports are about posts.",
                    "isRequired": false,
                    "unique": false,
                    "nullable": true
                  },
                  {
                    "name": "comment_id",
                    "type": "uuid",
                    "relation": {
                      "name": "reviewed_comment",
                      "targetModel": "discussionboard_comments"
                    },
                    "description": "[Reviewed comment] - Links reviewed comment, nullable because not all reports are about comments.",
                    "isRequired": false,
                    "unique": false,
                    "nullable": true
                  }
                ],
                "plainFields": [
                  {
                    "name": "review_status",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Outcome status] - Status for reviewed reports: e.g., 'resolved', 'rejected', 'pending'."
                  },
                  {
                    "name": "moderator_comment",
                    "type": "string",
                    "isRequired": false,
                    "nullable": true,
                    "description": "[Review notes] - Optional comments from reviewer."
                  },
                  {
                    "name": "reviewed_at",
                    "type": "datetime",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Review timestamp] - Auditable time of moderation review."
                  }
                ],
                "uniqueIndexes": [
                  {
                    "fieldNames": [
                      "report_id"
                    ],
                    "unique": true,
                    "description": "[Unique per report] - Guarantees report can only be reviewed once."
                  }
                ],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "reviewer_id",
                      "reviewed_at"
                    ],
                    "description": "[Reviewer history] - Query all reviews by a moderator/admin in order."
                  }
                ],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_warning",
                "description": "[Warnings Issued Log] - Implements moderator warning history per requirements (sections 02.3.5, 02.3.6, 03).\nStores warnings given by moderators/admins to users for guideline-violating behavior. Maintains 3NF by linking recipient, issuer, and optionally the relevant post/comment. For example, when a moderator issues a warning for an offensive comment, that instance is logged here.\nKey relationships: issued_by (moderator/admin), issued_to (target user), post/comment (context, nullable).\nSpecial behaviors: historical only (warnings are never updated, only issued).",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Primary key] - Globally unique identifier of each warning."
                },
                "foreignFields": [
                  {
                    "name": "issued_by_id",
                    "type": "uuid",
                    "relation": {
                      "name": "issuer",
                      "targetModel": "discussionboard_user",
                      "mappingName": "discussionboard_warning_of_issued_by_id"
                    },
                    "description": "[Issuer] - Moderator/admin user issuing the warning.",
                    "isRequired": true,
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "issued_to_id",
                    "type": "uuid",
                    "relation": {
                      "name": "recipient",
                      "targetModel": "discussionboard_user",
                      "mappingName": "discussionboard_warning_of_issued_to_id"
                    },
                    "description": "[Recipient] - User who receives the warning.",
                    "isRequired": true,
                    "unique": false,
                    "nullable": false
                  },
                  {
                    "name": "post_id",
                    "type": "uuid",
                    "relation": {
                      "name": "warning_post",
                      "targetModel": "discussionboard_post"
                    },
                    "description": "[Related post] - Cause for warning (optional, nullable).",
                    "isRequired": false,
                    "unique": false,
                    "nullable": true
                  },
                  {
                    "name": "comment_id",
                    "type": "uuid",
                    "relation": {
                      "name": "warning_comment",
                      "targetModel": "discussionboard_comments"
                    },
                    "description": "[Related comment] - Cause for warning (optional, nullable).",
                    "isRequired": false,
                    "unique": false,
                    "nullable": true
                  }
                ],
                "plainFields": [
                  {
                    "name": "warning_type",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Type of warning] - Categorical reason: e.g., 'abuse', 'spam', etc."
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Moderator message] - Human-explained rationale."
                  },
                  {
                    "name": "issued_at",
                    "type": "datetime",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Issue timestamp] - The date/time warning was given."
                  }
                ],
                "uniqueIndexes": [],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "issued_to_id",
                      "issued_at"
                    ],
                    "description": "[User warning history] - Find all warnings for a user time-ordered."
                  },
                  {
                    "fieldNames": [
                      "issued_by_id",
                      "issued_at"
                    ],
                    "description": "[Issuer moderation activity] - Which moderator issued which warnings, ordered."
                  }
                ],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_ban",
                "description": "[User Ban Log] - This model realizes the user suspension/ban requirements (sections 02.3.5, 02.3.6, 03).\nRecords every instance of an account being banned or muted, whether temporarily or permanently, by moderator/admin decision. Maintains 3NF by relating only to ban actors and affected users, no calculated ban metrics.\nKey relationships: 'banned_by_id' (moderator/admin), 'banned_user_id' (target member), warning reference for context, no circular dependencies.\nSpecial behaviors: all bans are point-in-time records, may be queried for active status by expiry date.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Primary key] - Unique ban instance ID; ensures each ban/mute event is singular and traceable."
                },
                "foreignFields": [
                  {
                    "name": "banned_user_id",
                    "type": "uuid",
                    "model": "discussionboard_user",
                    "relation": {
                      "name": "banned_user",
                      "fields": [
                        "banned_user_id"
                      ],
                      "references": [
                        "id"
                      ],
                      "targetModel": "discussionboard_user",
                      "onDelete": "Restrict",
                      "mappingName": "discussionboard_ban_of_banned_user_id"
                    },
                    "isRequired": true,
                    "unique": false,
                    "nullable": false,
                    "description": "[Banned user] - Who is subjected to the ban/mute, referencing the user entity."
                  },
                  {
                    "name": "banned_by_id",
                    "type": "uuid",
                    "model": "discussionboard_user",
                    "relation": {
                      "name": "ban_actor",
                      "fields": [
                        "banned_by_id"
                      ],
                      "references": [
                        "id"
                      ],
                      "targetModel": "discussionboard_user",
                      "onDelete": "Restrict",
                      "mappingName": "discussionboard_ban_of_banned_by_id"
                    },
                    "isRequired": true,
                    "unique": false,
                    "nullable": false,
                    "description": "[Moderator/admin] - Initiating user performing the ban/mute."
                  },
                  {
                    "name": "warning_id",
                    "type": "uuid",
                    "model": "discussionboard_warning",
                    "relation": {
                      "name": "related_warning",
                      "fields": [
                        "warning_id"
                      ],
                      "references": [
                        "id"
                      ],
                      "targetModel": "discussionboard_warning",
                      "onDelete": "SetNull"
                    },
                    "isRequired": false,
                    "unique": false,
                    "nullable": true,
                    "description": "[Related warning] - Optionally reference a specific prior warning that resulted in the ban/mute."
                  }
                ],
                "plainFields": [
                  {
                    "name": "ban_type",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Ban type] - Type category; e.g., 'mute', 'temp_ban', 'perm_ban', etc."
                  },
                  {
                    "name": "reason",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Ban reason] - Human-entered explanation for audit, traceability, and user appeals."
                  },
                  {
                    "name": "issued_at",
                    "type": "datetime",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Ban start time] - When ban was placed."
                  },
                  {
                    "name": "expires_at",
                    "type": "datetime",
                    "isRequired": false,
                    "nullable": true,
                    "description": "[Ban expiry] - When unban occurs (nullable for permanent bans)."
                  }
                ],
                "uniqueIndexes": [],
                "plainIndexes": [
                  {
                    "fieldNames": [
                      "banned_user_id",
                      "issued_at"
                    ],
                    "description": "[User ban history] - Chronological history of bans/mutes for a user."
                  },
                  {
                    "fieldNames": [
                      "banned_by_id",
                      "issued_at"
                    ],
                    "description": "[Moderator/admin ban log] - Track who issued bans/mutes over time."
                  }
                ],
                "ginIndexes": []
              }
            ]
          },
          {
            "filename": "schema-06-notification.prisma",
            "namespace": "Notification",
            "models": [
              {
                "name": "discussionboard_notification",
                "description": "[Notification delivery and history] - This implements the 'User Notifications' and system-triggered alert requirements from the functional requirements (Section 3.7).\n\nThis table records each notification sent to users (members, moderators, admins) regarding activity on posts, comments, moderator actions, and system events. Maintains full normalization (3NF) by storing atomic notification data and strictly referencing user and activity entities. For example, when a user receives a reply to their comment or a moderator action on their post, a new record is created here and references the relevant entities.\n\nKey relationships: References recipient user ({@link discussionboard_user}), optional linkage to post ({@link discussionboard_post}) or comment ({@link discussionboard_comments}), and moderator/admin actor when relevant. \nSpecial behaviors: Supports targeting individual users; system messages have nullable activity references. All user/system notifications are auditable. No denormalized or calculated fields.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary key] - Implements unique identification of each notification. Ensures atomic records. For example, used to reference or audit notification events.",
                  "nullable": false,
                  "unique": true,
                  "id": true
                },
                "foreignFields": [
                  {
                    "name": "recipient_user_id",
                    "type": "uuid",
                    "description": "[Notification recipient] - Implements which user receives the notification, mapped to requirements for personalized notifications. For example, used to display notifications on user dashboard. Normalization: ensures recipient is atomically referenced and avoids denormalization. REQUIRED.",
                    "nullable": false,
                    "unique": false,
                    "relation": {
                      "type": "belongsTo",
                      "targetModel": "discussionboard_user",
                      "fields": [
                        "recipient_user_id"
                      ],
                      "targetFields": [
                        "id"
                      ],
                      "name": "recipient_user",
                      "mappingName": "discussionboard_notification_of_recipient_user_id"
                    }
                  },
                  {
                    "name": "related_post_id",
                    "type": "uuid",
                    "description": "[Related post] - Associates notification with a post if applicable (e.g., reply, like on post). Fully normalized by optional reference. For example, used when notifying about replies or moderation of a post.",
                    "nullable": true,
                    "unique": false,
                    "relation": {
                      "type": "belongsTo",
                      "targetModel": "discussionboard_post",
                      "fields": [
                        "related_post_id"
                      ],
                      "targetFields": [
                        "id"
                      ],
                      "name": "related_post"
                    }
                  },
                  {
                    "name": "related_comment_id",
                    "type": "uuid",
                    "description": "[Related comment] - Associates notification with a comment if applicable (e.g., reply to comment, moderation). Normalized as optional reference. For example, used for notifications about comment mentions.",
                    "nullable": true,
                    "unique": false,
                    "relation": {
                      "type": "belongsTo",
                      "targetModel": "discussionboard_comments",
                      "fields": [
                        "related_comment_id"
                      ],
                      "targetFields": [
                        "id"
                      ],
                      "name": "related_comment"
                    }
                  },
                  {
                    "name": "actor_user_id",
                    "type": "uuid",
                    "description": "[Notification actor/user] - (Optional) The user who triggered this notification (e.g., who liked/commented, moderator/admin who performed action). If the event is system-triggered, this is null. For example, used for 'X replied to your post.' Ensures actor is atomically referenced, prevents denormalization.",
                    "nullable": true,
                    "unique": false,
                    "relation": {
                      "type": "belongsTo",
                      "targetModel": "discussionboard_user",
                      "fields": [
                        "actor_user_id"
                      ],
                      "targetFields": [
                        "id"
                      ],
                      "name": "actor_user",
                      "mappingName": "discussionboard_notification_of_actor_user_id"
                    }
                  }
                ],
                "plainFields": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "[Notification type] - Classifies the type of notification in accordance with Section 3.7's events (e.g., 'reply', 'like', 'moderator_action', 'system_message', etc.). Fully normalized. For example, enables UI filtering and template selection. Constraint: limited to allowed notification types via application logic.",
                    "nullable": false
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "[Notification body] - Human-readable message content sent to user. Implements functional requirement for notifications to explain events. Maintains normalization by storing only atomic message text; templates and aggregation are managed elsewhere. For example, 'Alice replied to your post.'",
                    "nullable": false
                  },
                  {
                    "name": "is_read",
                    "type": "boolean",
                    "description": "[Read/unread flag] - Tracks whether the notification has been marked as read by the recipient, as required by notification preference and in-app UX. Normalized as a pure flag. For example, unread messages appear in notification dropdown. Constraint: only toggled by recipient.",
                    "nullable": false
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "description": "[Notification creation time] - Implements audit and sorting requirements for notification recency. Ensures full normalization; atomic timestamp. For example, used to order notifications in UI and for cleanup logic.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "name": "unique_notification_per_event",
                    "fields": [
                      "recipient_user_id",
                      "type",
                      "related_post_id",
                      "related_comment_id",
                      "actor_user_id",
                      "created_at"
                    ],
                    "fieldNames": [
                      "recipient_user_id",
                      "type",
                      "related_post_id",
                      "related_comment_id",
                      "actor_user_id",
                      "created_at"
                    ],
                    "description": "[Business constraint] - Prevents duplicate notifications for the exact same event and recipient at the same timestamp. Ensures that accidental re-emission does not spam users.",
                    "unique": true
                  }
                ],
                "plainIndexes": [
                  {
                    "name": "idx_recipient_created_at",
                    "fields": [
                      "recipient_user_id",
                      "created_at"
                    ],
                    "fieldNames": [
                      "recipient_user_id",
                      "created_at"
                    ],
                    "description": "[Performance] - Optimizes queries to fetch notifications for a user in chronological order."
                  }
                ],
                "ginIndexes": []
              },
              {
                "name": "discussionboard_notification_preference",
                "description": "[User notification preferences] - Implements the notification preference system specified in requirements Section 3.7, giving users fine-grained control over what notifications they receive and how. All data is fully normalized.\n\nBusiness purpose: Enables per-user customization (mute, enable, push preference, etc.) for different notification types and channels. For example, a member might mute 'like' notifications but enable 'moderator_action' notifications on mobile.\n\nTechnical context: Direct link to each user ({@link discussionboard_user}), with one row per user (enforced by a unique constraint). No denormalization.\n\nUsage example: Used when generating notifications or respecting user muting/settings for different event types.\n\nSpecial behaviors: All boolean flags, atomic, fully normalized. No computed columns.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "description": "[Primary key] - Implements unique identification for each user's notification preference record. Normalized; required for foreign key relationships and referencing.",
                  "nullable": false,
                  "unique": true,
                  "id": true
                },
                "foreignFields": [
                  {
                    "name": "user_id",
                    "type": "uuid",
                    "description": "[User owning preferences] - Implements one-to-one mapping from user to notification preferences, as required by the per-user customization use case. Fully normalized: enforced by unique constraint. For example, fetching preferences when user changes settings. Enforces referential integrity; on user deletion, preference row is cleaned up.\n\nSpecial behavior: unique per user.",
                    "nullable": false,
                    "unique": true,
                    "relation": {
                      "type": "belongsTo",
                      "targetModel": "discussionboard_user",
                      "fields": [
                        "user_id"
                      ],
                      "targetFields": [
                        "id"
                      ],
                      "name": "user"
                    }
                  }
                ],
                "plainFields": [
                  {
                    "name": "notify_reply",
                    "type": "boolean",
                    "description": "[Reply notification toggle] - User's option to receive notifications about direct replies. Implements user preference granularity requirement. For example, if false, the user does not get reply-related notifications. Fully normalized, no calculation.",
                    "nullable": false
                  },
                  {
                    "name": "notify_like",
                    "type": "boolean",
                    "description": "[Like notification toggle] - User's choice to receive/not receive notifications when their post or comment is liked. Maintains normalization. Example: toggling off keeps the user from being notified for likes.",
                    "nullable": false
                  },
                  {
                    "name": "notify_moderator_action",
                    "type": "boolean",
                    "description": "[Moderator action notification toggle] - Implements ability for users to be alerted when a moderator acts on their content. Normalization ensured. For example, disables notifications for moderation unless true.",
                    "nullable": false
                  },
                  {
                    "name": "notify_system_message",
                    "type": "boolean",
                    "description": "[System message notification toggle] - Whether user receives platform-wide messages or announcements. Normalization ensured. For example, used for site policy change notifications.",
                    "nullable": false
                  }
                ],
                "uniqueIndexes": [
                  {
                    "name": "unique_user_preference",
                    "fields": [
                      "user_id"
                    ],
                    "fieldNames": [
                      "user_id"
                    ],
                    "description": "[Business constraint] - Each user can only have one notification preference record, guaranteeing strict 1:1 mapping with user.",
                    "unique": true
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              }
            ]
          },
          {
            "filename": "schema-07-admin.prisma",
            "namespace": "Admin",
            "models": [
              {
                "name": "discussionboard_audit_log",
                "description": "[Audit Logging for Sensitive Actions] - This implements the audit logging and traceability requirements from the user management and security sections, specifically from 'Audit Logging' in the User Roles & Permissions and 'Access & Security' in the Functional Requirements documents. \n\nAllows full traceability and accountability across admin and privileged actions (e.g., role changes, bans, moderation actions). Maintains full 3NF normalization by separating audit trail details from direct business data, storing only atomic data and foreign key references. For example, every time a ban is issued, or a user changes role, an entry is created here independently of the action's core data tables.\n\nKey relationships: references the user (actor) performing the action, the affected user (target), and provides linkage via entity_type/entity_id for polymorphic connections to the target business object. \nSpecial behaviors: Should be written only by internal privileged actions, not by user-driven business flows. Designed for audit and compliance reviews. No calculated fields, strictly normalized.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Primary Key] - Implements identity and uniqueness for each audit log entry. Fulfills the uniqueness requirement per audit record. Ensures normalization by enabling atomic audit entries. Always generated as a UUID."
                },
                "foreignFields": [
                  {
                    "name": "actor_user_id",
                    "type": "uuid",
                    "references": "discussionboard_user",
                    "isRequired": true,
                    "nullable": false,
                    "unique": false,
                    "relation": {
                      "sourceField": "actor_user_id",
                      "targetModel": "discussionboard_user",
                      "targetField": "id",
                      "name": "fk_audit_actor_user",
                      "mappingName": "discussionboard_audit_log_of_actor_user_id"
                    },
                    "description": "[Action Actor] - Implements the requirement to store the user responsible for each privileged action. Links to the user who performed the action. Ensures 3NF by storing only the user id as a reference; all other actor information must be joined as needed. For example, references the admin who issued a ban."
                  },
                  {
                    "name": "target_user_id",
                    "type": "uuid",
                    "references": "discussionboard_user",
                    "isRequired": false,
                    "nullable": true,
                    "unique": false,
                    "relation": {
                      "sourceField": "target_user_id",
                      "targetModel": "discussionboard_user",
                      "targetField": "id",
                      "name": "fk_audit_target_user",
                      "mappingName": "discussionboard_audit_log_of_target_user_id"
                    },
                    "description": "[Action Target] - Fulfills the requirement to capture who is affected by the action, if applicable (e.g., in bans, warnings, or demotions). Nullable for actions targeting system settings rather than specific users. Keeps direct reference only to target user id to stay normalized."
                  }
                ],
                "plainFields": [
                  {
                    "name": "action_type",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Action Type] - Implements the action classification requirement. Business meaning: describes the category (e.g., 'ban', 'role_change', 'settings_update'). Ensures normalization by not encoding business logic; only keeps atomic values (string), never details or summaries."
                  },
                  {
                    "name": "entity_type",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Entity Type] - Implements the need for polymorphic audit trail. Records the type of entity affected (e.g., 'user', 'post', 'comment', 'setting'). Ensures 3NF by representing entity type as atomic data, not as a foreign key or denormalized structure."
                  },
                  {
                    "name": "entity_id",
                    "type": "uuid",
                    "isRequired": false,
                    "nullable": true,
                    "description": "[Entity Reference] - Fulfills requirement to record which object was modified. Nullable for actions that do not target a specific entity. Ensures normalization by storing atomic reference only."
                  },
                  {
                    "name": "action_detail",
                    "type": "string",
                    "isRequired": false,
                    "nullable": true,
                    "description": "[Action Detail] - Implements extensible context for audit records. Stores optional contextual details, such as old/new role in a role change. Ensures normalization by keeping these as atomic strings, not by embedding object graphs."
                  },
                  {
                    "name": "created_at",
                    "type": "datetime",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Timestamp] - Implements audit trail requirement for time traceability. Business meaning: when the privileged action took place. Ensures normalization by using a single atomic datetime. Example: records ban date or role assignment time."
                  }
                ],
                "uniqueIndexes": [],
                "plainIndexes": [
                  {
                    "name": "idx_audit_actor",
                    "fieldNames": [
                      "actor_user_id",
                      "created_at"
                    ],
                    "description": "Composite index for efficiently querying audit trails by actor and recency."
                  },
                  {
                    "name": "idx_audit_target",
                    "fieldNames": [
                      "target_user_id",
                      "created_at"
                    ],
                    "description": "Composite index for audit lookups by affected user and time."
                  },
                  {
                    "name": "idx_audit_entity",
                    "fieldNames": [
                      "entity_type",
                      "entity_id"
                    ],
                    "description": "Index for efficiently filtering audit logs by business object (polymorphic linkage)."
                  }
                ],
                "ginIndexes": [
                  {
                    "fieldName": "action_detail",
                    "description": "GIN index for searching textual context in audit details (e.g., searching all role change comments or context data)."
                  }
                ]
              },
              {
                "name": "discussionboard_platform_setting",
                "description": "[Platform Configuration Management] - This implements requirements for platform-wide admin-configurable settings, drawn from 'Administration' in both the overview and functional requirements documents (see Admin: Platform Configuration, and Functionality: Platform-wide Settings). \n\nSolves the business problem of enabling admin users to manage platform-wide booleans, options, and policies in a normalized way. \nMaintains 3NF by storing one setting per row, keyed by setting name, value, and type—never groups or arrays. For example, \"MaxPostAttachments\" or \"EnableModerationQueue\" are single atomic settings stored here.\n\nKey relationships: No foreign keys; settings are manipulated by admin flows only. \nSpecial behaviors: Names are unique; mutating a setting should update only the single normalized row. No pre-calculated values or summaries—strictly atomic and normalized.",
                "material": false,
                "primaryField": {
                  "name": "id",
                  "type": "uuid",
                  "isId": true,
                  "isGenerated": true,
                  "description": "[Primary Key] - Unique identifier for each platform setting. 3NF compliance: prevents duplicate or ambiguous settings by row identity."
                },
                "foreignFields": [],
                "plainFields": [
                  {
                    "name": "name",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Setting Name] - Implements the need to uniquely identify every platform setting. Should be a descriptive string (e.g., 'EnableModerationQueue'). Ensures normalization by not encoding arrays or objects, only simple strings."
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Setting Value] - Implements storing current configuration/data. Can hold any atomic value as string (booleans='true'/'false', numbers as string, etc.). Ensures 3NF by keeping each value atomic and not embedding larger config structures."
                  },
                  {
                    "name": "type",
                    "type": "string",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Data Type Marker] - Fulfills the requirement to distinguish setting value interpretation (e.g., 'boolean', 'int', 'string'). Maintains normalization by storing type marker atomically. Example: allows parsing and validation at the application level."
                  },
                  {
                    "name": "updated_at",
                    "type": "datetime",
                    "isRequired": true,
                    "nullable": false,
                    "description": "[Last Updated Timestamp] - Supports auditability for platform changes. Maintains normalization by using a single atomic datetime. For example, allows the system to show when moderation settings were last updated."
                  }
                ],
                "uniqueIndexes": [
                  {
                    "name": "uix_setting_name",
                    "fieldNames": [
                      "name"
                    ],
                    "unique": true,
                    "description": "Uniqueness enforcement—no duplicate settings by name allowed."
                  }
                ],
                "plainIndexes": [],
                "ginIndexes": []
              }
            ]
          }
        ]
      }
    },
    "schemas": {
      "schema-01-core.prisma": "/// [User Master Record] - This implements the foundational user management requirement noted in the requirements analysis (02_discussionboard_functional_requirements.md Section 3.1: User Registration & Authentication). \n///\n/// This model captures core authentication and identity data for all discussion board participants—regardless of role (member, moderator, admin). Maintains strict 3NF compliance by isolating authentication data (email, credential info, status) from profile and role specialization, preventing duplication or transitive dependencies. For example, all roles reference this entity, and profile/details are managed in separate tables.\n///\n/// Key relationships: Links 1:1 to discussionboard_user_profile. Related 1:N with role specializations (member/moderator/admin), posts, comments, and all historical user actions.\n/// Special behaviors: Only one email per user. Role management handled via join/role specialization tables. Soft deactivation supported by 'is_active' flag.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_user {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Globally unique identifier for the user. Implements the requirements for traceable, referential user identity across all core tables (see 02_discussionboard_functional_requirements.md). 3NF enforced as surrogate key. For example, all foreign key relationships use this for core user reference.\n  id String @id @db.Uuid\n  \n  /// [Authentication Email] - Implements unique login credential per user requirement. Business meaning: Used for login, notifications, and password recovery. Ensures normalization by existing only on user root entity and not duplicated elsewhere. Enforced unique constraint. E.g., user login process.\n  email String\n  \n  /// [Password Hash] - Securely stores password hash for authentication workflow per 02_discussionboard_functional_requirements.md. Ensures separation from credential-independent profile info. Used for login verification.\n  password_hash String\n  \n  /// [Active Status] - Tracks whether the user account is enabled or deactivated (requirement: Admin can deactivate). Normalization: not duplicated elsewhere. For account suspension procedures.\n  is_active Boolean\n  \n  /// [Creation Timestamp] - When user joined. Required for audit and analytics (see success criteria in 01_discussionboard_overview_and_scope.md). Used in user growth/activation KPIs.\n  created_at DateTime @db.Timestamptz\n  \n  /// [Last Update Timestamp] - Business: Audit and admin review. Ensures clean separation—no transitive dependency.\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  discussionboard_user_profile discussionboard_user_profile?\n  discussionboard_member discussionboard_member?\n  discussionboard_moderator discussionboard_moderator?\n  discussionboard_admin discussionboard_admin?\n  discussionboard_comments discussionboard_comments[]\n  discussionboard_likes discussionboard_likes[]\n  discussionboard_reports discussionboard_reports[]\n  discussionboard_moderation_action_of_actor_id discussionboard_moderation_action[] @relation(\"discussionboard_moderation_action_of_actor_id\")\n  discussionboard_moderation_action_of_target_user_id discussionboard_moderation_action[] @relation(\"discussionboard_moderation_action_of_target_user_id\")\n  discussionboard_report_review discussionboard_report_review[]\n  discussionboard_warning_of_issued_by_id discussionboard_warning[] @relation(\"discussionboard_warning_of_issued_by_id\")\n  discussionboard_warning_of_issued_to_id discussionboard_warning[] @relation(\"discussionboard_warning_of_issued_to_id\")\n  discussionboard_ban_of_banned_user_id discussionboard_ban[] @relation(\"discussionboard_ban_of_banned_user_id\")\n  discussionboard_ban_of_banned_by_id discussionboard_ban[] @relation(\"discussionboard_ban_of_banned_by_id\")\n  discussionboard_notification_of_recipient_user_id discussionboard_notification[] @relation(\"discussionboard_notification_of_recipient_user_id\")\n  discussionboard_notification_of_actor_user_id discussionboard_notification[] @relation(\"discussionboard_notification_of_actor_user_id\")\n  discussionboard_notification_preference discussionboard_notification_preference?\n  discussionboard_audit_log_of_actor_user_id discussionboard_audit_log[] @relation(\"discussionboard_audit_log_of_actor_user_id\")\n  discussionboard_audit_log_of_target_user_id discussionboard_audit_log[] @relation(\"discussionboard_audit_log_of_target_user_id\")\n  \n  @@unique([email])\n  @@index([is_active])\n}\n\n/// [User Profile] - Implements user display/personalization requirements (02_discussionboard_functional_requirements.md, 3.1) distinct from root authentication. Holds display name, optional avatar, and bio—strictly 3NF as contact details, credentials, role, and settings are elsewhere. Used for member directories, post attributions, notifications.\n///\n/// Key relationships: 1:1 with discussionboard_user (foreign key = unique). Not duplicated in role tables.\n/// Special behaviors: 1:1 uniqueness enforced. All user display data (NOT used for authentication).\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_user_profile {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Globally unique identifier for the profile. Surrogate key for normalization. Ensures all profile retrieval and modifications are auditable.\n  id String @id @db.Uuid\n  \n  /// [Foreign Key: discussionboard_user] - User this profile belongs to. Implements 1:1 user-profile relationship (requirement: one profile per account, never duplicated). Enforces normalization. E.g., to get profile when showing post author.\n  user_id String @db.Uuid\n  \n  /// [Display Name] - User's chosen name, shown publicly on posts/comments. Not used for authentication. Maintains 3NF by separating identity from credential tables. E.g., 'JohnDoe'.\n  display_name String\n  \n  /// [Avatar Image] - Optional user image link. Not duplicated anywhere. Maintains normalized structure. Used on post lists/user bios.\n  avatar_url String? @db.VarChar(80000)\n  \n  /// [User Bio] - Self-description or background, used on profiles/mouseover displays. Normalization: No business logic outside of display.\n  bio String?\n  \n  //----\n  // RELATIONS\n  //----\n  user_profile_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([user_id])\n  @@index([display_name])\n  @@index([bio(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// [Member Role] - Implements domain model for general user participation rights (see user roles in 03_discussionboard_user_roles_and_permissions.md and participation requirements in 02_discussionboard_functional_requirements.md 3.2-3.4). This captures all accounts with base-level actions (posting, commenting, liking). All users with platform presence are members. 3NF: Only stores role-specific facts, no credential/profile fields duplicated.\n///\n/// Key relationships: 1:1 with discussionboard_user. Related 1:N to posts, comments, likes, reports. Role is atomic, all privileges via explicit role presence.\n/// Special behaviors: Role assignment/demotion flows strictly auditable via foreign key.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_member {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Each member has a dedicated, globally unique role assignment entry for traceability (even if admin or moderator). Enforces 3NF by using only a surrogate key.\n  id String @id @db.Uuid\n  \n  /// [Foreign Key: discussionboard_user] - Account assigned this member role. Enforces 1:1 mapping, not duplicated for other roles. Needed for permissions matrix. E.g., to check if a user can create posts.\n  user_id String @db.Uuid\n  \n  /// [Membership Grant Timestamp] - When membership began. Required for audits, demotions, or calculating active duration. Maintains third normal form by not holding user or credential data.\n  granted_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  member_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  \n  discussionboard_post discussionboard_post[]\n  \n  @@unique([user_id])\n}\n\n/// [Moderator Role] - Implements elevated moderator assignment for trusted members, referencing business rules in 03_discussionboard_user_roles_and_permissions.md and moderation functions in 02_discussionboard_functional_requirements.md 3.5. Only users explicitly assigned this role are allowed moderation tools. 3NF-preserving: only stores moderator-specific info (no duplication of credentials/profile).\n///\n/// Key relationships: 1:1 to discussionboard_user (atomic assignment). Related 1:N to reports, moderation actions.\n/// Special behaviors: Grant/revoke flows auditable. All permission checks cleanly reference this mapping.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_moderator {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique identifier for moderator role assignment. Enforces traceability, audit, and clean separation. Used for all moderator-level permission checks.\n  id String @id @db.Uuid\n  \n  /// [Foreign Key: discussionboard_user] - User granted moderator authority (must also be a member). 1:1 constraint by unique index. Never duplicated nor nullable. E.g., lookup for report review access.\n  user_id String @db.Uuid\n  \n  /// [Moderator Grant Timestamp] - When moderator role was assigned. Auditing and compliance for all moderator promotions. Normalization: Never holds non-moderator info.\n  assigned_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  moderator_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([user_id])\n}\n\n/// [Admin Role] - Implements system administrator privilege assignment as per 03_discussionboard_user_roles_and_permissions.md and 02_discussionboard_functional_requirements.md (platform-wide management, user promotion/role reassignment). All platform-wide permissions are checked against this table. 3NF-compliant: only houses admin assignment data, never duplicates user or moderator/member details.\n///\n/// Key relationships: 1:1 to discussionboard_user; referenced when determining admin dashboard/settings access. All permission checks reference this mapping.\n/// Special behaviors: Admin can demote/promote all other roles. Auditing via assignment timestamps. No transitive/admin details outside this entry.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_admin {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Surrogate key for admin role assignment. Allows auditing/change tracking for all promotions/demotions. Clean, normalized design.\n  id String @id @db.Uuid\n  \n  /// [Foreign Key: discussionboard_user] - User assigned admin authority. Enforced 1:1 by unique index, not nullable. 3NF: Never duplicated.\n  user_id String @db.Uuid\n  \n  /// [Admin Assignment Timestamp] - When the admin role was assigned; fulfills trace and change-audit requirements for privileged role escalation. Normalized by excluding non-admin details.\n  assigned_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  admin_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([user_id])\n}",
      "schema-02-board.prisma": "/// [Discussion Posts] - Implements Sections 3.2 (Creating & Managing Posts) and 3.1 (User Registration & Authentication) as detailed in the requirements (02_discussionboard_functional_requirements.md).\n///\n/// Stores the main discussion board contributions (posts), tracking author, category, creation/edit timestamps, and supports soft deletion. Ensures strict 3NF: posts do not contain redundant author or category data, referencing normalized member and category tables instead. Usage example: a post about economic policy references its author (member) and its category (e.g., 'Economics') without duplicating user/category info.\n///\n/// Key relationships: discussionboard_member (author), discussionboard_post_category (category), attachments, tags, etc. Special behaviors: soft-delete is tracked via deleted_at; author/category FKs are required and not nullable.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique identifier for each post as mandated for atomic access and historical auditing (Section 3.2).\n  id String @id @db.Uuid\n  \n  /// [Author Member FK] - References the member authoring the post (see Section 3.2 in requirements). Maintains normalization by only referencing the member, not duplicating member data. E.g., used for showing all posts by a member.\n  author_member_id String @db.Uuid\n  \n  /// [Category FK] - Associates post with a category (Section 3.2). Provides link to normalized category without duplication of data. E.g., 'Politics' or 'Economics'.\n  category_id String @db.Uuid\n  \n  /// [Post Title] - Implements discussion title per Section 3.2. Used for search/listings. Always non-null, atomic text.\n  title String\n  \n  /// [Post Content Body] - Main text body, supports formatting. Fully normalized; not nullable.\n  body String\n  \n  /// [Creation Timestamp] - Records when the post was made (Section 3.2, 3.9).\n  created_at DateTime @db.Timestamptz\n  \n  /// [Update Timestamp] - Last time this post was edited (Section 3.2). Used for audit/versioning display.\n  updated_at DateTime @db.Timestamptz\n  \n  /// [Deleted Timestamp] - Soft-deletion timestamp if post is hidden/deleted by member or moderator. Nullable if not deleted.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  member discussionboard_member @relation(fields: [author_member_id], references: [id], onDelete: Cascade)\n  category discussionboard_post_category @relation(fields: [category_id], references: [id], onDelete: Cascade)\n  \n  discussionboard_post_attachment discussionboard_post_attachment[]\n  discussionboard_comments discussionboard_comments[]\n  discussionboard_likes discussionboard_likes[]\n  discussionboard_reports discussionboard_reports[]\n  discussionboard_moderation_action discussionboard_moderation_action[]\n  discussionboard_report_review discussionboard_report_review[]\n  discussionboard_warning discussionboard_warning[]\n  discussionboard_notification discussionboard_notification[]\n  \n  @@unique([author_member_id, created_at])\n  @@index([created_at])\n  @@index([category_id, created_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// [Discussion Post Categories] - Implements Section 3.2 and 3.6 (Admin). Categories like 'Politics' or 'Economics'—referenced by posts, maintained separately for normalization. Usage: admins manage categories; posts always reference a category. Special: cannot delete if referenced by a post.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post_category {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Uniquely identifies category; normalization ensures only atomic references used.\n  id String @id @db.Uuid\n  \n  /// [Category Name] - Per Section 3.2; e.g., 'Economics'. Used for filters/views. Unique and non-null.\n  name String\n  \n  /// [Category Description] - Extended human-readable info for admin/member UIs. Optional, normalized.\n  description String?\n  \n  //----\n  // RELATIONS\n  //----\n  discussionboard_post discussionboard_post[]\n  \n  @@unique([name])\n}\n\n/// [Discussion Post Tags] - Implements tagging per Section 3.2 to enable content filtering/search without denormalization. Each tag is stored atomically and referenced by M:N join (not included here). E.g., post tagged 'inflation'. Usage: tag table ensures uniqueness; pure key-name pairs only.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post_tag {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique atomic tag identity.\n  id String @id @db.Uuid\n  \n  /// [Tag Name] - Required label, e.g. 'inflation'. Uniqueness enforced; normalized/atomic.\n  name String\n  \n  //----\n  // RELATIONS\n  //----\n  @@unique([name])\n}\n\n/// [Post Attachments] - Implements file/image management for posts (Section 3.2). Each attachment references one post, with file URL/type metadata. Maintains normalization with atomic URI/type; all files managed outside main post record; supports cascading delete on post removal.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post_attachment {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique attachment identity for tracking and referencing.\n  id String @id @db.Uuid\n  \n  /// [Post FK] - Attachment's parent post (Section 3.2). Referenced (not duplicated) for strict normalization. Cascades on post delete.\n  post_id String @db.Uuid\n  \n  /// [Attachment File URL] - Atomic URI (e.g., https://cdn.site/file.jpg). Required.\n  file_url String @db.VarChar(80000)\n  \n  /// [Attachment MIME Type] - e.g. 'image/jpeg'. Required; normalized for filters.\n  file_type String\n  \n  /// [Upload Timestamp] - Required point-in-time, supporting audit and ordering.\n  uploaded_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  post discussionboard_post @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  \n  @@unique([post_id, file_url])\n  @@index([uploaded_at])\n}",
      "schema-03-comment.prisma": "/// [Comment Model] - This implements the comment functionality as outlined under functional requirements (sections 3.3, 3.4, 3.5) and supports threaded/nested comments for both 'Politics' and 'Economics' board categories. \n///\n/// Allows users to participate in ongoing discussions by adding, editing, and deleting their own comments, with support for threaded conversations, reporting, moderation, and in-line engagement (likes). Maintains 3NF by separating this entity from users, posts, likes, and reports. For example, a user can comment on a post, reply to other comments (recursively), and have their comment moderated or reported independently. \n///\n/// Key relationships: Links to posts, users (authors), and parent comment (if threaded). Supports foreign keys to reporting, moderation, and liking mechanisms in other models.\n/// Special behaviors: Enforces only one parent per comment for tree structure, supports soft deletion, and maintains a precise audit trail without any pre-calculated metrics.\n///\n/// @namespace Comments\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_comments {\n  //----\n  // COLUMNS\n  //----\n  /// [Comment Primary Key] - Implements the unique identification (see 3NF and requirements mapping).\n  ///\n  /// Globally unique identifier for each comment. Ensures 1NF uniqueness, enables precise referencing, and guarantees auditability and traceability across threads and moderation actions.\n  ///\n  id String @id @db.Uuid\n  \n  /// [Foreign Key: Post] - Implements the post-comment linkage as per requirement 3.3.\n  ///\n  /// Associates each comment with its parent post (mandatory). Ensures 2NF by linking to the full post entity, not duplicating post info. For example, when displaying a comment, the app can show the related post's category or title.\n  ///\n  post_id String @db.Uuid\n  \n  /// [Foreign Key: Author] - Implements comment authorship per requirements 3.3, 3.4.\n  ///\n  /// Links the comment directly to its user (author). Maintains normalization by not storing author details redundantly; user details are referenced via foreign key.\n  ///\n  author_id String @db.Uuid\n  \n  /// [Foreign Key: Parent Comment] - Supports threaded/reply comments as per 3.3.\n  ///\n  /// Self-referential link for comment thread nesting (optional; null for root-level comments). Maintains normalization by linking only to one parent, supporting recursive conversation trees without redundancy.\n  ///\n  parent_comment_id String? @db.Uuid\n  \n  /// [Comment Content] - Implements actual user message storage per requirement 3.3.\n  ///\n  /// Holds the content/message of the comment. Ensures normalization by storing only the user's entry, not derived or precomputed data. For example, users can edit this field within role constraints. No denormalized summary or rendering is stored in regular tables.\n  ///\n  content String\n  \n  /// [Edit Tracking Flag] - Supports edit-audit functionality per requirement 3.3 (editing own comments).\n  ///\n  /// Boolean indicating whether comment content has been modified since creation. Ensures normalization by storing only atomic edit status; edit history belongs in a separate snapshot/audit table if needed.\n  ///\n  is_edited Boolean\n  \n  /// [Soft Delete Flag] - Enables reversible deletion per 3.3 and moderation (3.5).\n  ///\n  /// Flags comments as deleted (soft) without actual removal from database. Supports auditability and role-based recovery, ensuring no information loss for moderation history.\n  ///\n  is_deleted Boolean\n  \n  /// [Creation Timestamp] - Records when the comment was posted (requirements 3.3, 3.9).\n  ///\n  /// Stores creation time of the comment. Ensures normalization as an atomic, non-derived value, and provides audit trail foundation.\n  ///\n  created_at DateTime @db.Timestamptz\n  \n  /// [Last Update Timestamp] - Tracks edits, moderation actions as in 3.3, 3.5, 3.9.\n  ///\n  /// Records latest update timestamp (edit, moderation, recovery, etc). Maintains audit and traceability without derived/polyglot aggregates.\n  ///\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  post discussionboard_post @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  author discussionboard_user @relation(fields: [author_id], references: [id], onDelete: Cascade)\n  parent_comment discussionboard_comments? @relation(\"recursive\", fields: [parent_comment_id], references: [id], onDelete: Cascade)\n  \n  recursive discussionboard_comments[] @relation(\"recursive\")\n  discussionboard_likes discussionboard_likes[]\n  discussionboard_reports discussionboard_reports[]\n  discussionboard_moderation_action discussionboard_moderation_action[]\n  discussionboard_report_review discussionboard_report_review[]\n  discussionboard_warning discussionboard_warning[]\n  discussionboard_notification discussionboard_notification[]\n  \n  @@index([post_id, created_at])\n  @@index([author_id, created_at])\n  @@index([parent_comment_id])\n  @@index([content(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}",
      "schema-04-interaction.prisma": "/// User Content Like - This implements the user engagement and interaction requirements (see sections 3.4 and 3.8 of the requirements analysis).\n///\n/// Enables the platform’s core like/voting system, allowing users to like posts or comments once, supporting quantifiable content popularity and user involvement. Maintains strict 3NF normalization by separating atomic like events, with no aggregate/calculated fields present. For example, when a user clicks 'like' on a post, a record is created here, which can later be used for denormalized like counts in mv_ tables only.\n///\n/// Key relationships: references to both posts and comments for polymorphic liking, user reference, and indexes support multi-content type lookups.\n/// Special behaviors: Uniqueness enforced so a user may only like a given post OR comment once, but not both at once (polymorphic uniqueness). All deletions are soft-deletes for audit/compliant removal tracking.\n///\n/// @namespace Interaction\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_likes {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key - Implements entity uniqueness. Each like interaction is uniquely identified for precise auditing and event tracking.\n  id String @id @db.Uuid\n  \n  /// User Foreign Key - Implements user traceability for interaction, mapping to discussionboard_user. Ensures which member created this like. For example, required when listing personal likes. Not nullable/required.\n  user_id String @db.Uuid\n  \n  /// Polymorphic Foreign Key: Post - Implements which post the like is attached to (where applicable), mapping to discussionboard_post. NULL if the like is for a comment. Enforces atomic association. For example, a user clicking like on a post will set this field. Nullable for polymorphism.\n  post_id String? @db.Uuid\n  \n  /// Polymorphic Foreign Key: Comment - Implements comment interaction scope, mapping to discussionboard_comments. NULL if the like is for a post. For example, liking a comment sets this field. Supports normalization and polymorphic association.\n  comment_id String? @db.Uuid\n  \n  /// Creation Timestamp - Implements requirement for auditable, timestamped actions. When the like event was created. Ensures atomicity by being non-null and standard across events.\n  created_at DateTime @db.Timestamptz\n  \n  /// Soft-delete Timestamp - Enables reversible removal of like event in compliance with audit logging. Null if like is active, set if removed. Maintains normalization; never used as a logical indicator, only as an event timestamp.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  user discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussionboard_post? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  \n  @@unique([user_id, post_id])\n  @@unique([user_id, comment_id])\n  @@index([post_id])\n  @@index([comment_id])\n}\n\n/// User Content Report - This implements abuse/spam reporting requirements from sections 3.4, 3.5, 3.6, and 3.9.\n///\n/// Allows users to report specific posts or comments for guideline violations, abuse, or spam. Maintains 3NF normalization by capturing only atomic reporting events (no report counts or summaries in table). For example, when a user flags a comment or post for review, a record is created here, with reason captured, for review by moderators/admins via reporting tools.\n///\n/// Key relationships: references user (reporter), post (or comment), and enables polymorphic targeting of reports. Moderation actions are maintained elsewhere. Enforces business rules for no duplicate reports from the same user for the same content and logs reporting context for trace/audit.\n/// Special behaviors: Uniqueness constraints prevent double-reporting by same user per content type. Deletions are soft-deletes for compliance and history retention.\n///\n/// @namespace Interaction\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_reports {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key - Uniquely identifies each report for compliance, auditing, moderation, and traceability.\n  id String @id @db.Uuid\n  \n  /// Reporter Foreign Key - References the user (from discussionboard_user) who submitted the report. Maintains accountability and supports user-based moderation analytics. Not nullable; always required.\n  user_id String @db.Uuid\n  \n  /// Polymorphic Foreign Key: Post - Identifies the post that is being reported (if applicable). NULL if report targets a comment. Ensures correct, strictly normalized associativity, and prevents overlap with comment_id.\n  post_id String? @db.Uuid\n  \n  /// Polymorphic Foreign Key: Comment - Identifies the comment being reported (if any). NULL if post is targeted. Supports polymorphic reporting of both content types. Enforces correct normalization.\n  comment_id String? @db.Uuid\n  \n  /// Short Reason Code - Implements requirements for capturing structured event context (e.g. 'spam', 'abuse', 'off-topic'). Enables filtering and workflow logic. Follows a pre-set value list handled in application/business logic. 3NF maintained as reason text is never duplicated (codes only here).\n  reason_code String\n  \n  /// Detailed Reason (optional) - Implements reporting context capture for case auditing, moderation analytics, and transparency. Allows user to enter details or evidence. Nullable for cases where only the code is needed.\n  reason_details String?\n  \n  /// Report Creation Timestamp - Indicates when the report was made. Implements audit trail (requirement: 3.9 and moderation review within 24hr SLA). Non-null, ensures each report is audited with precise event time.\n  created_at DateTime @db.Timestamptz\n  \n  /// Soft-delete Timestamp - Enables soft-removal (not physical deletion) of reports for moderation or review compliance. Null if active, non-null when deleted. Ensures normalization and auditable workflow.\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  user discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussionboard_post? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  \n  discussionboard_report_review discussionboard_report_review[]\n  \n  @@unique([user_id, post_id])\n  @@unique([user_id, comment_id])\n  @@index([post_id])\n  @@index([comment_id])\n}",
      "schema-05-moderation.prisma": "/// [Moderation Actions Log] - This implements the moderation action audit requirement from the requirements documentation (sections 02.3.5, 02.3.6, and 03).\n/// Records every direct moderation activity such as hide, delete, warning issuance, and user muting/ban performed by moderators or admins. Maintains 3NF compliance by referencing target users, actions, posts, and comments instead of duplicating their data. For example, every time a moderator deletes a post or issues a warning, a new record is created here linking who did what, to which item, and why.\n/// Key relationships: links to moderator/admin (actor), target user, affected post/comment (if applicable).\n/// Special behaviors: strictly append-only (no updates); supports complete audit trail of moderation interventions.\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_moderation_action {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Standard internal identifier. Uniquely identifies each moderation action; ensures atomic representation of each occurrence.\n  id String @id @db.Uuid\n  \n  /// [Action originator] - Implements the 'who performed the action' requirement. References the moderator or admin user account executing the moderation. Ensures normalization by linking to user, not duplicating actor data. For example, when moderator #1234 deletes a comment, this field is #1234.\n  actor_id String @db.Uuid\n  \n  /// [User targeted] - Fulfills the 'target of moderation' tracking requirement. Links to the affected user account (e.g., reported member). Ensures single source of truth for user data and enables traceability. For example, for a ban of user X, this references user X.\n  target_user_id String @db.Uuid\n  \n  /// [Affected post] - Implements moderation linkage for post-level actions. References the post if this action affects a specific post. Normalization preserved (nullable, as not all actions are post-related). For example, deleting a post links here; issuing a ban does not.\n  post_id String? @db.Uuid\n  \n  /// [Affected comment] - Moderation linkage to comment. References the comment if the action is on a specific comment. Kept nullable to preserve 3NF and flexibility. For example, hiding a comment references its id here.\n  comment_id String? @db.Uuid\n  \n  /// [Action type] - Implements requirement to enumerate distinct moderation activities. Type of moderation: e.g., 'delete_post', 'hide_comment', etc. Maintains normalization.\n  action_type String\n  \n  /// [Reason] - Fulfills rationale for moderation. Stores moderator/admin's reason/comment. Ensures accountability, searchable, used for appeals.\n  reason String\n  \n  /// [Timestamp] - Implements time-based audit tracking. True creation time of the action record, guarantees traceability.\n  created_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  actor discussionboard_user @relation(\"discussionboard_moderation_action_of_actor_id\", fields: [actor_id], references: [id], onDelete: Cascade)\n  target_user discussionboard_user @relation(\"discussionboard_moderation_action_of_target_user_id\", fields: [target_user_id], references: [id], onDelete: Cascade)\n  moderated_post discussionboard_post? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  moderated_comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  \n  @@index([post_id])\n  @@index([comment_id])\n  \n  @@index([actor_id, created_at])\n  @@index([target_user_id, created_at])\n}\n\n/// [Report Review Log] - Implements requirements for moderation report review workflow (sections 02.3.4, 02.3.5, 03).\n/// Tracks moderator or admin handling of user-submitted reports on posts/comments. Maintains 3NF by referencing report, reviewer, affected post/comment, and action taken. For example, when a moderator reviews a reported post and marks it as 'resolved,' a record is created here linking to all relevant entities.\n/// Key relationships: links to the report, reviewer, optionally post/comment.\n/// Special behaviors: append-only, supports full reporting workflow and audit.\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_report_review {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Unique identifier for report reviews.\n  id String @id @db.Uuid\n  \n  /// [The report being reviewed] - Links to a specific user report for moderation review.\n  report_id String @db.Uuid\n  \n  /// [Moderator/admin reviewer] - References user carrying out the review.\n  reviewer_id String @db.Uuid\n  \n  /// [Reviewed post] - Links reviewed post, nullable because not all reports are about posts.\n  post_id String? @db.Uuid\n  \n  /// [Reviewed comment] - Links reviewed comment, nullable because not all reports are about comments.\n  comment_id String? @db.Uuid\n  \n  /// [Outcome status] - Status for reviewed reports: e.g., 'resolved', 'rejected', 'pending'.\n  review_status String\n  \n  /// [Review notes] - Optional comments from reviewer.\n  moderator_comment String?\n  \n  /// [Review timestamp] - Auditable time of moderation review.\n  reviewed_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  report discussionboard_reports @relation(fields: [report_id], references: [id], onDelete: Cascade)\n  reviewer discussionboard_user @relation(fields: [reviewer_id], references: [id], onDelete: Cascade)\n  reviewed_post discussionboard_post? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  reviewed_comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  \n  @@index([post_id])\n  @@index([comment_id])\n  \n  @@unique([report_id])\n  @@index([reviewer_id, reviewed_at])\n}\n\n/// [Warnings Issued Log] - Implements moderator warning history per requirements (sections 02.3.5, 02.3.6, 03).\n/// Stores warnings given by moderators/admins to users for guideline-violating behavior. Maintains 3NF by linking recipient, issuer, and optionally the relevant post/comment. For example, when a moderator issues a warning for an offensive comment, that instance is logged here.\n/// Key relationships: issued_by (moderator/admin), issued_to (target user), post/comment (context, nullable).\n/// Special behaviors: historical only (warnings are never updated, only issued).\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_warning {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Globally unique identifier of each warning.\n  id String @id @db.Uuid\n  \n  /// [Issuer] - Moderator/admin user issuing the warning.\n  issued_by_id String @db.Uuid\n  \n  /// [Recipient] - User who receives the warning.\n  issued_to_id String @db.Uuid\n  \n  /// [Related post] - Cause for warning (optional, nullable).\n  post_id String? @db.Uuid\n  \n  /// [Related comment] - Cause for warning (optional, nullable).\n  comment_id String? @db.Uuid\n  \n  /// [Type of warning] - Categorical reason: e.g., 'abuse', 'spam', etc.\n  warning_type String\n  \n  /// [Moderator message] - Human-explained rationale.\n  message String\n  \n  /// [Issue timestamp] - The date/time warning was given.\n  issued_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  issuer discussionboard_user @relation(\"discussionboard_warning_of_issued_by_id\", fields: [issued_by_id], references: [id], onDelete: Cascade)\n  recipient discussionboard_user @relation(\"discussionboard_warning_of_issued_to_id\", fields: [issued_to_id], references: [id], onDelete: Cascade)\n  warning_post discussionboard_post? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  warning_comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  \n  discussionboard_ban discussionboard_ban[]\n  \n  @@index([post_id])\n  @@index([comment_id])\n  \n  @@index([issued_to_id, issued_at])\n  @@index([issued_by_id, issued_at])\n}\n\n/// [User Ban Log] - This model realizes the user suspension/ban requirements (sections 02.3.5, 02.3.6, 03).\n/// Records every instance of an account being banned or muted, whether temporarily or permanently, by moderator/admin decision. Maintains 3NF by relating only to ban actors and affected users, no calculated ban metrics.\n/// Key relationships: 'banned_by_id' (moderator/admin), 'banned_user_id' (target member), warning reference for context, no circular dependencies.\n/// Special behaviors: all bans are point-in-time records, may be queried for active status by expiry date.\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_ban {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Unique ban instance ID; ensures each ban/mute event is singular and traceable.\n  id String @id @db.Uuid\n  \n  /// [Banned user] - Who is subjected to the ban/mute, referencing the user entity.\n  banned_user_id String @db.Uuid\n  \n  /// [Moderator/admin] - Initiating user performing the ban/mute.\n  banned_by_id String @db.Uuid\n  \n  /// [Related warning] - Optionally reference a specific prior warning that resulted in the ban/mute.\n  warning_id String? @db.Uuid\n  \n  /// [Ban type] - Type category; e.g., 'mute', 'temp_ban', 'perm_ban', etc.\n  ban_type String\n  \n  /// [Ban reason] - Human-entered explanation for audit, traceability, and user appeals.\n  reason String\n  \n  /// [Ban start time] - When ban was placed.\n  issued_at DateTime @db.Timestamptz\n  \n  /// [Ban expiry] - When unban occurs (nullable for permanent bans).\n  expires_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  banned_user discussionboard_user @relation(\"discussionboard_ban_of_banned_user_id\", fields: [banned_user_id], references: [id], onDelete: Cascade)\n  ban_actor discussionboard_user @relation(\"discussionboard_ban_of_banned_by_id\", fields: [banned_by_id], references: [id], onDelete: Cascade)\n  related_warning discussionboard_warning? @relation(fields: [warning_id], references: [id], onDelete: Cascade)\n  \n  @@index([warning_id])\n  \n  @@index([banned_user_id, issued_at])\n  @@index([banned_by_id, issued_at])\n}",
      "schema-06-notification.prisma": "/// [Notification delivery and history] - This implements the 'User Notifications' and system-triggered alert requirements from the functional requirements (Section 3.7).\n///\n/// This table records each notification sent to users (members, moderators, admins) regarding activity on posts, comments, moderator actions, and system events. Maintains full normalization (3NF) by storing atomic notification data and strictly referencing user and activity entities. For example, when a user receives a reply to their comment or a moderator action on their post, a new record is created here and references the relevant entities.\n///\n/// Key relationships: References recipient user ({@link discussionboard_user}), optional linkage to post ({@link discussionboard_post}) or comment ({@link discussionboard_comments}), and moderator/admin actor when relevant. \n/// Special behaviors: Supports targeting individual users; system messages have nullable activity references. All user/system notifications are auditable. No denormalized or calculated fields.\n///\n/// @namespace Notification\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_notification {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Implements unique identification of each notification. Ensures atomic records. For example, used to reference or audit notification events.\n  id String @id @db.Uuid\n  \n  /// [Notification recipient] - Implements which user receives the notification, mapped to requirements for personalized notifications. For example, used to display notifications on user dashboard. Normalization: ensures recipient is atomically referenced and avoids denormalization. REQUIRED.\n  recipient_user_id String @db.Uuid\n  \n  /// [Related post] - Associates notification with a post if applicable (e.g., reply, like on post). Fully normalized by optional reference. For example, used when notifying about replies or moderation of a post.\n  related_post_id String? @db.Uuid\n  \n  /// [Related comment] - Associates notification with a comment if applicable (e.g., reply to comment, moderation). Normalized as optional reference. For example, used for notifications about comment mentions.\n  related_comment_id String? @db.Uuid\n  \n  /// [Notification actor/user] - (Optional) The user who triggered this notification (e.g., who liked/commented, moderator/admin who performed action). If the event is system-triggered, this is null. For example, used for 'X replied to your post.' Ensures actor is atomically referenced, prevents denormalization.\n  actor_user_id String? @db.Uuid\n  \n  /// [Notification type] - Classifies the type of notification in accordance with Section 3.7's events (e.g., 'reply', 'like', 'moderator_action', 'system_message', etc.). Fully normalized. For example, enables UI filtering and template selection. Constraint: limited to allowed notification types via application logic.\n  type String\n  \n  /// [Notification body] - Human-readable message content sent to user. Implements functional requirement for notifications to explain events. Maintains normalization by storing only atomic message text; templates and aggregation are managed elsewhere. For example, 'Alice replied to your post.'\n  message String\n  \n  /// [Read/unread flag] - Tracks whether the notification has been marked as read by the recipient, as required by notification preference and in-app UX. Normalized as a pure flag. For example, unread messages appear in notification dropdown. Constraint: only toggled by recipient.\n  is_read Boolean\n  \n  /// [Notification creation time] - Implements audit and sorting requirements for notification recency. Ensures full normalization; atomic timestamp. For example, used to order notifications in UI and for cleanup logic.\n  created_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  recipient_user discussionboard_user @relation(\"discussionboard_notification_of_recipient_user_id\", fields: [recipient_user_id], references: [id], onDelete: Cascade)\n  related_post discussionboard_post? @relation(fields: [related_post_id], references: [id], onDelete: Cascade)\n  related_comment discussionboard_comments? @relation(fields: [related_comment_id], references: [id], onDelete: Cascade)\n  actor_user discussionboard_user? @relation(\"discussionboard_notification_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  \n  @@index([related_post_id])\n  @@index([related_comment_id])\n  @@index([actor_user_id])\n  \n  @@unique([recipient_user_id, type, related_post_id, related_comment_id, actor_user_id, created_at])\n  @@index([recipient_user_id, created_at])\n}\n\n/// [User notification preferences] - Implements the notification preference system specified in requirements Section 3.7, giving users fine-grained control over what notifications they receive and how. All data is fully normalized.\n///\n/// Business purpose: Enables per-user customization (mute, enable, push preference, etc.) for different notification types and channels. For example, a member might mute 'like' notifications but enable 'moderator_action' notifications on mobile.\n///\n/// Technical context: Direct link to each user ({@link discussionboard_user}), with one row per user (enforced by a unique constraint). No denormalization.\n///\n/// Usage example: Used when generating notifications or respecting user muting/settings for different event types.\n///\n/// Special behaviors: All boolean flags, atomic, fully normalized. No computed columns.\n///\n/// @namespace Notification\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_notification_preference {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Implements unique identification for each user's notification preference record. Normalized; required for foreign key relationships and referencing.\n  id String @id @db.Uuid\n  \n  /// [User owning preferences] - Implements one-to-one mapping from user to notification preferences, as required by the per-user customization use case. Fully normalized: enforced by unique constraint. For example, fetching preferences when user changes settings. Enforces referential integrity; on user deletion, preference row is cleaned up.\n  ///\n  /// Special behavior: unique per user.\n  user_id String @db.Uuid\n  \n  /// [Reply notification toggle] - User's option to receive notifications about direct replies. Implements user preference granularity requirement. For example, if false, the user does not get reply-related notifications. Fully normalized, no calculation.\n  notify_reply Boolean\n  \n  /// [Like notification toggle] - User's choice to receive/not receive notifications when their post or comment is liked. Maintains normalization. Example: toggling off keeps the user from being notified for likes.\n  notify_like Boolean\n  \n  /// [Moderator action notification toggle] - Implements ability for users to be alerted when a moderator acts on their content. Normalization ensured. For example, disables notifications for moderation unless true.\n  notify_moderator_action Boolean\n  \n  /// [System message notification toggle] - Whether user receives platform-wide messages or announcements. Normalization ensured. For example, used for site policy change notifications.\n  notify_system_message Boolean\n  \n  //----\n  // RELATIONS\n  //----\n  user discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([user_id])\n}",
      "schema-07-admin.prisma": "/// [Audit Logging for Sensitive Actions] - This implements the audit logging and traceability requirements from the user management and security sections, specifically from 'Audit Logging' in the User Roles & Permissions and 'Access & Security' in the Functional Requirements documents. \n///\n/// Allows full traceability and accountability across admin and privileged actions (e.g., role changes, bans, moderation actions). Maintains full 3NF normalization by separating audit trail details from direct business data, storing only atomic data and foreign key references. For example, every time a ban is issued, or a user changes role, an entry is created here independently of the action's core data tables.\n///\n/// Key relationships: references the user (actor) performing the action, the affected user (target), and provides linkage via entity_type/entity_id for polymorphic connections to the target business object. \n/// Special behaviors: Should be written only by internal privileged actions, not by user-driven business flows. Designed for audit and compliance reviews. No calculated fields, strictly normalized.\n///\n/// @namespace Admin\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_audit_log {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Implements identity and uniqueness for each audit log entry. Fulfills the uniqueness requirement per audit record. Ensures normalization by enabling atomic audit entries. Always generated as a UUID.\n  id String @id @db.Uuid\n  \n  /// [Action Actor] - Implements the requirement to store the user responsible for each privileged action. Links to the user who performed the action. Ensures 3NF by storing only the user id as a reference; all other actor information must be joined as needed. For example, references the admin who issued a ban.\n  actor_user_id String @db.Uuid\n  \n  /// [Action Target] - Fulfills the requirement to capture who is affected by the action, if applicable (e.g., in bans, warnings, or demotions). Nullable for actions targeting system settings rather than specific users. Keeps direct reference only to target user id to stay normalized.\n  target_user_id String? @db.Uuid\n  \n  /// [Action Type] - Implements the action classification requirement. Business meaning: describes the category (e.g., 'ban', 'role_change', 'settings_update'). Ensures normalization by not encoding business logic; only keeps atomic values (string), never details or summaries.\n  action_type String\n  \n  /// [Entity Type] - Implements the need for polymorphic audit trail. Records the type of entity affected (e.g., 'user', 'post', 'comment', 'setting'). Ensures 3NF by representing entity type as atomic data, not as a foreign key or denormalized structure.\n  entity_type String\n  \n  /// [Entity Reference] - Fulfills requirement to record which object was modified. Nullable for actions that do not target a specific entity. Ensures normalization by storing atomic reference only.\n  entity_id String? @db.Uuid\n  \n  /// [Action Detail] - Implements extensible context for audit records. Stores optional contextual details, such as old/new role in a role change. Ensures normalization by keeping these as atomic strings, not by embedding object graphs.\n  action_detail String?\n  \n  /// [Timestamp] - Implements audit trail requirement for time traceability. Business meaning: when the privileged action took place. Ensures normalization by using a single atomic datetime. Example: records ban date or role assignment time.\n  created_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  fk_audit_actor_user discussionboard_user @relation(\"discussionboard_audit_log_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  fk_audit_target_user discussionboard_user? @relation(\"discussionboard_audit_log_of_target_user_id\", fields: [target_user_id], references: [id], onDelete: Cascade)\n  \n  @@index([actor_user_id, created_at])\n  @@index([target_user_id, created_at])\n  @@index([entity_type, entity_id])\n  @@index([action_detail(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// [Platform Configuration Management] - This implements requirements for platform-wide admin-configurable settings, drawn from 'Administration' in both the overview and functional requirements documents (see Admin: Platform Configuration, and Functionality: Platform-wide Settings). \n///\n/// Solves the business problem of enabling admin users to manage platform-wide booleans, options, and policies in a normalized way. \n/// Maintains 3NF by storing one setting per row, keyed by setting name, value, and type—never groups or arrays. For example, \"MaxPostAttachments\" or \"EnableModerationQueue\" are single atomic settings stored here.\n///\n/// Key relationships: No foreign keys; settings are manipulated by admin flows only. \n/// Special behaviors: Names are unique; mutating a setting should update only the single normalized row. No pre-calculated values or summaries—strictly atomic and normalized.\n///\n/// @namespace Admin\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_platform_setting {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique identifier for each platform setting. 3NF compliance: prevents duplicate or ambiguous settings by row identity.\n  id String @id @db.Uuid\n  \n  /// [Setting Name] - Implements the need to uniquely identify every platform setting. Should be a descriptive string (e.g., 'EnableModerationQueue'). Ensures normalization by not encoding arrays or objects, only simple strings.\n  name String\n  \n  /// [Setting Value] - Implements storing current configuration/data. Can hold any atomic value as string (booleans='true'/'false', numbers as string, etc.). Ensures 3NF by keeping each value atomic and not embedding larger config structures.\n  value String\n  \n  /// [Data Type Marker] - Fulfills the requirement to distinguish setting value interpretation (e.g., 'boolean', 'int', 'string'). Maintains normalization by storing type marker atomically. Example: allows parsing and validation at the application level.\n  type String\n  \n  /// [Last Updated Timestamp] - Supports auditability for platform changes. Maintains normalization by using a single atomic datetime. For example, allows the system to show when moderation settings were last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  @@unique([name])\n}",
      "main.prisma": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\", \"views\"]\n  binaryTargets   = [\"native\"]\n}\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = []\n}\ngenerator markdown {\n  provider = \"prisma-markdown\"\n  output   = \"../docs/ERD.md\"\n}"
    },
    "compiled": {
      "type": "success",
      "schemas": {
        "schema-01-core.prisma": "/// [User Master Record] - This implements the foundational user management requirement noted in the requirements analysis (02_discussionboard_functional_requirements.md Section 3.1: User Registration & Authentication). \n///\n/// This model captures core authentication and identity data for all discussion board participants—regardless of role (member, moderator, admin). Maintains strict 3NF compliance by isolating authentication data (email, credential info, status) from profile and role specialization, preventing duplication or transitive dependencies. For example, all roles reference this entity, and profile/details are managed in separate tables.\n///\n/// Key relationships: Links 1:1 to discussionboard_user_profile. Related 1:N with role specializations (member/moderator/admin), posts, comments, and all historical user actions.\n/// Special behaviors: Only one email per user. Role management handled via join/role specialization tables. Soft deactivation supported by 'is_active' flag.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_user {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Globally unique identifier for the user. Implements the requirements for traceable, referential user identity across all core tables (see 02_discussionboard_functional_requirements.md). 3NF enforced as surrogate key. For example, all foreign key relationships use this for core user reference.\n  id String @id @db.Uuid\n\n  /// [Authentication Email] - Implements unique login credential per user requirement. Business meaning: Used for login, notifications, and password recovery. Ensures normalization by existing only on user root entity and not duplicated elsewhere. Enforced unique constraint. E.g., user login process.\n  email String\n\n  /// [Password Hash] - Securely stores password hash for authentication workflow per 02_discussionboard_functional_requirements.md. Ensures separation from credential-independent profile info. Used for login verification.\n  password_hash String\n\n  /// [Active Status] - Tracks whether the user account is enabled or deactivated (requirement: Admin can deactivate). Normalization: not duplicated elsewhere. For account suspension procedures.\n  is_active Boolean\n\n  /// [Creation Timestamp] - When user joined. Required for audit and analytics (see success criteria in 01_discussionboard_overview_and_scope.md). Used in user growth/activation KPIs.\n  created_at DateTime @db.Timestamptz\n\n  /// [Last Update Timestamp] - Business: Audit and admin review. Ensures clean separation—no transitive dependency.\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  discussionboard_user_profile                        discussionboard_user_profile?\n  discussionboard_member                              discussionboard_member?\n  discussionboard_moderator                           discussionboard_moderator?\n  discussionboard_admin                               discussionboard_admin?\n  discussionboard_comments                            discussionboard_comments[]\n  discussionboard_likes                               discussionboard_likes[]\n  discussionboard_reports                             discussionboard_reports[]\n  discussionboard_moderation_action_of_actor_id       discussionboard_moderation_action[]      @relation(\"discussionboard_moderation_action_of_actor_id\")\n  discussionboard_moderation_action_of_target_user_id discussionboard_moderation_action[]      @relation(\"discussionboard_moderation_action_of_target_user_id\")\n  discussionboard_report_review                       discussionboard_report_review[]\n  discussionboard_warning_of_issued_by_id             discussionboard_warning[]                @relation(\"discussionboard_warning_of_issued_by_id\")\n  discussionboard_warning_of_issued_to_id             discussionboard_warning[]                @relation(\"discussionboard_warning_of_issued_to_id\")\n  discussionboard_ban_of_banned_user_id               discussionboard_ban[]                    @relation(\"discussionboard_ban_of_banned_user_id\")\n  discussionboard_ban_of_banned_by_id                 discussionboard_ban[]                    @relation(\"discussionboard_ban_of_banned_by_id\")\n  discussionboard_notification_of_recipient_user_id   discussionboard_notification[]           @relation(\"discussionboard_notification_of_recipient_user_id\")\n  discussionboard_notification_of_actor_user_id       discussionboard_notification[]           @relation(\"discussionboard_notification_of_actor_user_id\")\n  discussionboard_notification_preference             discussionboard_notification_preference?\n  discussionboard_audit_log_of_actor_user_id          discussionboard_audit_log[]              @relation(\"discussionboard_audit_log_of_actor_user_id\")\n  discussionboard_audit_log_of_target_user_id         discussionboard_audit_log[]              @relation(\"discussionboard_audit_log_of_target_user_id\")\n\n  @@unique([email])\n  @@index([is_active])\n}\n\n/// [User Profile] - Implements user display/personalization requirements (02_discussionboard_functional_requirements.md, 3.1) distinct from root authentication. Holds display name, optional avatar, and bio—strictly 3NF as contact details, credentials, role, and settings are elsewhere. Used for member directories, post attributions, notifications.\n///\n/// Key relationships: 1:1 with discussionboard_user (foreign key = unique). Not duplicated in role tables.\n/// Special behaviors: 1:1 uniqueness enforced. All user display data (NOT used for authentication).\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_user_profile {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Globally unique identifier for the profile. Surrogate key for normalization. Ensures all profile retrieval and modifications are auditable.\n  id String @id @db.Uuid\n\n  /// [Foreign Key: discussionboard_user] - User this profile belongs to. Implements 1:1 user-profile relationship (requirement: one profile per account, never duplicated). Enforces normalization. E.g., to get profile when showing post author.\n  user_id String @db.Uuid\n\n  /// [Display Name] - User's chosen name, shown publicly on posts/comments. Not used for authentication. Maintains 3NF by separating identity from credential tables. E.g., 'JohnDoe'.\n  display_name String\n\n  /// [Avatar Image] - Optional user image link. Not duplicated anywhere. Maintains normalized structure. Used on post lists/user bios.\n  avatar_url String? @db.VarChar(80000)\n\n  /// [User Bio] - Self-description or background, used on profiles/mouseover displays. Normalization: No business logic outside of display.\n  bio String?\n\n  //----\n  // RELATIONS\n  //----\n  user_profile_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@unique([user_id])\n  @@index([display_name])\n  @@index([bio(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// [Member Role] - Implements domain model for general user participation rights (see user roles in 03_discussionboard_user_roles_and_permissions.md and participation requirements in 02_discussionboard_functional_requirements.md 3.2-3.4). This captures all accounts with base-level actions (posting, commenting, liking). All users with platform presence are members. 3NF: Only stores role-specific facts, no credential/profile fields duplicated.\n///\n/// Key relationships: 1:1 with discussionboard_user. Related 1:N to posts, comments, likes, reports. Role is atomic, all privileges via explicit role presence.\n/// Special behaviors: Role assignment/demotion flows strictly auditable via foreign key.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_member {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Each member has a dedicated, globally unique role assignment entry for traceability (even if admin or moderator). Enforces 3NF by using only a surrogate key.\n  id String @id @db.Uuid\n\n  /// [Foreign Key: discussionboard_user] - Account assigned this member role. Enforces 1:1 mapping, not duplicated for other roles. Needed for permissions matrix. E.g., to check if a user can create posts.\n  user_id String @db.Uuid\n\n  /// [Membership Grant Timestamp] - When membership began. Required for audits, demotions, or calculating active duration. Maintains third normal form by not holding user or credential data.\n  granted_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  member_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  discussionboard_post discussionboard_post[]\n\n  @@unique([user_id])\n}\n\n/// [Moderator Role] - Implements elevated moderator assignment for trusted members, referencing business rules in 03_discussionboard_user_roles_and_permissions.md and moderation functions in 02_discussionboard_functional_requirements.md 3.5. Only users explicitly assigned this role are allowed moderation tools. 3NF-preserving: only stores moderator-specific info (no duplication of credentials/profile).\n///\n/// Key relationships: 1:1 to discussionboard_user (atomic assignment). Related 1:N to reports, moderation actions.\n/// Special behaviors: Grant/revoke flows auditable. All permission checks cleanly reference this mapping.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_moderator {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique identifier for moderator role assignment. Enforces traceability, audit, and clean separation. Used for all moderator-level permission checks.\n  id String @id @db.Uuid\n\n  /// [Foreign Key: discussionboard_user] - User granted moderator authority (must also be a member). 1:1 constraint by unique index. Never duplicated nor nullable. E.g., lookup for report review access.\n  user_id String @db.Uuid\n\n  /// [Moderator Grant Timestamp] - When moderator role was assigned. Auditing and compliance for all moderator promotions. Normalization: Never holds non-moderator info.\n  assigned_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  moderator_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@unique([user_id])\n}\n\n/// [Admin Role] - Implements system administrator privilege assignment as per 03_discussionboard_user_roles_and_permissions.md and 02_discussionboard_functional_requirements.md (platform-wide management, user promotion/role reassignment). All platform-wide permissions are checked against this table. 3NF-compliant: only houses admin assignment data, never duplicates user or moderator/member details.\n///\n/// Key relationships: 1:1 to discussionboard_user; referenced when determining admin dashboard/settings access. All permission checks reference this mapping.\n/// Special behaviors: Admin can demote/promote all other roles. Auditing via assignment timestamps. No transitive/admin details outside this entry.\n///\n/// @namespace Core\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_admin {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Surrogate key for admin role assignment. Allows auditing/change tracking for all promotions/demotions. Clean, normalized design.\n  id String @id @db.Uuid\n\n  /// [Foreign Key: discussionboard_user] - User assigned admin authority. Enforced 1:1 by unique index, not nullable. 3NF: Never duplicated.\n  user_id String @db.Uuid\n\n  /// [Admin Assignment Timestamp] - When the admin role was assigned; fulfills trace and change-audit requirements for privileged role escalation. Normalized by excluding non-admin details.\n  assigned_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  admin_user_id discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@unique([user_id])\n}\n",
        "schema-02-board.prisma": "/// [Discussion Posts] - Implements Sections 3.2 (Creating & Managing Posts) and 3.1 (User Registration & Authentication) as detailed in the requirements (02_discussionboard_functional_requirements.md).\n///\n/// Stores the main discussion board contributions (posts), tracking author, category, creation/edit timestamps, and supports soft deletion. Ensures strict 3NF: posts do not contain redundant author or category data, referencing normalized member and category tables instead. Usage example: a post about economic policy references its author (member) and its category (e.g., 'Economics') without duplicating user/category info.\n///\n/// Key relationships: discussionboard_member (author), discussionboard_post_category (category), attachments, tags, etc. Special behaviors: soft-delete is tracked via deleted_at; author/category FKs are required and not nullable.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique identifier for each post as mandated for atomic access and historical auditing (Section 3.2).\n  id String @id @db.Uuid\n\n  /// [Author Member FK] - References the member authoring the post (see Section 3.2 in requirements). Maintains normalization by only referencing the member, not duplicating member data. E.g., used for showing all posts by a member.\n  author_member_id String @db.Uuid\n\n  /// [Category FK] - Associates post with a category (Section 3.2). Provides link to normalized category without duplication of data. E.g., 'Politics' or 'Economics'.\n  category_id String @db.Uuid\n\n  /// [Post Title] - Implements discussion title per Section 3.2. Used for search/listings. Always non-null, atomic text.\n  title String\n\n  /// [Post Content Body] - Main text body, supports formatting. Fully normalized; not nullable.\n  body String\n\n  /// [Creation Timestamp] - Records when the post was made (Section 3.2, 3.9).\n  created_at DateTime @db.Timestamptz\n\n  /// [Update Timestamp] - Last time this post was edited (Section 3.2). Used for audit/versioning display.\n  updated_at DateTime @db.Timestamptz\n\n  /// [Deleted Timestamp] - Soft-deletion timestamp if post is hidden/deleted by member or moderator. Nullable if not deleted.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  member   discussionboard_member        @relation(fields: [author_member_id], references: [id], onDelete: Cascade)\n  category discussionboard_post_category @relation(fields: [category_id], references: [id], onDelete: Cascade)\n\n  discussionboard_post_attachment   discussionboard_post_attachment[]\n  discussionboard_comments          discussionboard_comments[]\n  discussionboard_likes             discussionboard_likes[]\n  discussionboard_reports           discussionboard_reports[]\n  discussionboard_moderation_action discussionboard_moderation_action[]\n  discussionboard_report_review     discussionboard_report_review[]\n  discussionboard_warning           discussionboard_warning[]\n  discussionboard_notification      discussionboard_notification[]\n\n  @@unique([author_member_id, created_at])\n  @@index([created_at])\n  @@index([category_id, created_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// [Discussion Post Categories] - Implements Section 3.2 and 3.6 (Admin). Categories like 'Politics' or 'Economics'—referenced by posts, maintained separately for normalization. Usage: admins manage categories; posts always reference a category. Special: cannot delete if referenced by a post.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post_category {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Uniquely identifies category; normalization ensures only atomic references used.\n  id String @id @db.Uuid\n\n  /// [Category Name] - Per Section 3.2; e.g., 'Economics'. Used for filters/views. Unique and non-null.\n  name String\n\n  /// [Category Description] - Extended human-readable info for admin/member UIs. Optional, normalized.\n  description String?\n\n  //----\n  // RELATIONS\n  //----\n  discussionboard_post discussionboard_post[]\n\n  @@unique([name])\n}\n\n/// [Discussion Post Tags] - Implements tagging per Section 3.2 to enable content filtering/search without denormalization. Each tag is stored atomically and referenced by M:N join (not included here). E.g., post tagged 'inflation'. Usage: tag table ensures uniqueness; pure key-name pairs only.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post_tag {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique atomic tag identity.\n  id String @id @db.Uuid\n\n  /// [Tag Name] - Required label, e.g. 'inflation'. Uniqueness enforced; normalized/atomic.\n  name String\n\n  //----\n  // RELATIONS\n  //----\n  @@unique([name])\n}\n\n/// [Post Attachments] - Implements file/image management for posts (Section 3.2). Each attachment references one post, with file URL/type metadata. Maintains normalization with atomic URI/type; all files managed outside main post record; supports cascading delete on post removal.\n///\n/// @namespace DiscussionBoard\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_post_attachment {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique attachment identity for tracking and referencing.\n  id String @id @db.Uuid\n\n  /// [Post FK] - Attachment's parent post (Section 3.2). Referenced (not duplicated) for strict normalization. Cascades on post delete.\n  post_id String @db.Uuid\n\n  /// [Attachment File URL] - Atomic URI (e.g., https://cdn.site/file.jpg). Required.\n  file_url String @db.VarChar(80000)\n\n  /// [Attachment MIME Type] - e.g. 'image/jpeg'. Required; normalized for filters.\n  file_type String\n\n  /// [Upload Timestamp] - Required point-in-time, supporting audit and ordering.\n  uploaded_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  post discussionboard_post @relation(fields: [post_id], references: [id], onDelete: Cascade)\n\n  @@unique([post_id, file_url])\n  @@index([uploaded_at])\n}\n",
        "schema-03-comment.prisma": "/// [Comment Model] - This implements the comment functionality as outlined under functional requirements (sections 3.3, 3.4, 3.5) and supports threaded/nested comments for both 'Politics' and 'Economics' board categories. \n///\n/// Allows users to participate in ongoing discussions by adding, editing, and deleting their own comments, with support for threaded conversations, reporting, moderation, and in-line engagement (likes). Maintains 3NF by separating this entity from users, posts, likes, and reports. For example, a user can comment on a post, reply to other comments (recursively), and have their comment moderated or reported independently. \n///\n/// Key relationships: Links to posts, users (authors), and parent comment (if threaded). Supports foreign keys to reporting, moderation, and liking mechanisms in other models.\n/// Special behaviors: Enforces only one parent per comment for tree structure, supports soft deletion, and maintains a precise audit trail without any pre-calculated metrics.\n///\n/// @namespace Comments\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_comments {\n  //----\n  // COLUMNS\n  //----\n  /// [Comment Primary Key] - Implements the unique identification (see 3NF and requirements mapping).\n  ///\n  /// Globally unique identifier for each comment. Ensures 1NF uniqueness, enables precise referencing, and guarantees auditability and traceability across threads and moderation actions.\n  ///\n  id String @id @db.Uuid\n\n  /// [Foreign Key: Post] - Implements the post-comment linkage as per requirement 3.3.\n  ///\n  /// Associates each comment with its parent post (mandatory). Ensures 2NF by linking to the full post entity, not duplicating post info. For example, when displaying a comment, the app can show the related post's category or title.\n  ///\n  post_id String @db.Uuid\n\n  /// [Foreign Key: Author] - Implements comment authorship per requirements 3.3, 3.4.\n  ///\n  /// Links the comment directly to its user (author). Maintains normalization by not storing author details redundantly; user details are referenced via foreign key.\n  ///\n  author_id String @db.Uuid\n\n  /// [Foreign Key: Parent Comment] - Supports threaded/reply comments as per 3.3.\n  ///\n  /// Self-referential link for comment thread nesting (optional; null for root-level comments). Maintains normalization by linking only to one parent, supporting recursive conversation trees without redundancy.\n  ///\n  parent_comment_id String? @db.Uuid\n\n  /// [Comment Content] - Implements actual user message storage per requirement 3.3.\n  ///\n  /// Holds the content/message of the comment. Ensures normalization by storing only the user's entry, not derived or precomputed data. For example, users can edit this field within role constraints. No denormalized summary or rendering is stored in regular tables.\n  ///\n  content String\n\n  /// [Edit Tracking Flag] - Supports edit-audit functionality per requirement 3.3 (editing own comments).\n  ///\n  /// Boolean indicating whether comment content has been modified since creation. Ensures normalization by storing only atomic edit status; edit history belongs in a separate snapshot/audit table if needed.\n  ///\n  is_edited Boolean\n\n  /// [Soft Delete Flag] - Enables reversible deletion per 3.3 and moderation (3.5).\n  ///\n  /// Flags comments as deleted (soft) without actual removal from database. Supports auditability and role-based recovery, ensuring no information loss for moderation history.\n  ///\n  is_deleted Boolean\n\n  /// [Creation Timestamp] - Records when the comment was posted (requirements 3.3, 3.9).\n  ///\n  /// Stores creation time of the comment. Ensures normalization as an atomic, non-derived value, and provides audit trail foundation.\n  ///\n  created_at DateTime @db.Timestamptz\n\n  /// [Last Update Timestamp] - Tracks edits, moderation actions as in 3.3, 3.5, 3.9.\n  ///\n  /// Records latest update timestamp (edit, moderation, recovery, etc). Maintains audit and traceability without derived/polyglot aggregates.\n  ///\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  post           discussionboard_post      @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  author         discussionboard_user      @relation(fields: [author_id], references: [id], onDelete: Cascade)\n  parent_comment discussionboard_comments? @relation(\"recursive\", fields: [parent_comment_id], references: [id], onDelete: Cascade)\n\n  recursive                         discussionboard_comments[]          @relation(\"recursive\")\n  discussionboard_likes             discussionboard_likes[]\n  discussionboard_reports           discussionboard_reports[]\n  discussionboard_moderation_action discussionboard_moderation_action[]\n  discussionboard_report_review     discussionboard_report_review[]\n  discussionboard_warning           discussionboard_warning[]\n  discussionboard_notification      discussionboard_notification[]\n\n  @@index([post_id, created_at])\n  @@index([author_id, created_at])\n  @@index([parent_comment_id])\n  @@index([content(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n",
        "schema-04-interaction.prisma": "/// User Content Like - This implements the user engagement and interaction requirements (see sections 3.4 and 3.8 of the requirements analysis).\n///\n/// Enables the platform’s core like/voting system, allowing users to like posts or comments once, supporting quantifiable content popularity and user involvement. Maintains strict 3NF normalization by separating atomic like events, with no aggregate/calculated fields present. For example, when a user clicks 'like' on a post, a record is created here, which can later be used for denormalized like counts in mv_ tables only.\n///\n/// Key relationships: references to both posts and comments for polymorphic liking, user reference, and indexes support multi-content type lookups.\n/// Special behaviors: Uniqueness enforced so a user may only like a given post OR comment once, but not both at once (polymorphic uniqueness). All deletions are soft-deletes for audit/compliant removal tracking.\n///\n/// @namespace Interaction\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_likes {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key - Implements entity uniqueness. Each like interaction is uniquely identified for precise auditing and event tracking.\n  id String @id @db.Uuid\n\n  /// User Foreign Key - Implements user traceability for interaction, mapping to discussionboard_user. Ensures which member created this like. For example, required when listing personal likes. Not nullable/required.\n  user_id String @db.Uuid\n\n  /// Polymorphic Foreign Key: Post - Implements which post the like is attached to (where applicable), mapping to discussionboard_post. NULL if the like is for a comment. Enforces atomic association. For example, a user clicking like on a post will set this field. Nullable for polymorphism.\n  post_id String? @db.Uuid\n\n  /// Polymorphic Foreign Key: Comment - Implements comment interaction scope, mapping to discussionboard_comments. NULL if the like is for a post. For example, liking a comment sets this field. Supports normalization and polymorphic association.\n  comment_id String? @db.Uuid\n\n  /// Creation Timestamp - Implements requirement for auditable, timestamped actions. When the like event was created. Ensures atomicity by being non-null and standard across events.\n  created_at DateTime @db.Timestamptz\n\n  /// Soft-delete Timestamp - Enables reversible removal of like event in compliance with audit logging. Null if like is active, set if removed. Maintains normalization; never used as a logical indicator, only as an event timestamp.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  user    discussionboard_user      @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post    discussionboard_post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n\n  @@unique([user_id, post_id])\n  @@unique([user_id, comment_id])\n  @@index([post_id])\n  @@index([comment_id])\n}\n\n/// User Content Report - This implements abuse/spam reporting requirements from sections 3.4, 3.5, 3.6, and 3.9.\n///\n/// Allows users to report specific posts or comments for guideline violations, abuse, or spam. Maintains 3NF normalization by capturing only atomic reporting events (no report counts or summaries in table). For example, when a user flags a comment or post for review, a record is created here, with reason captured, for review by moderators/admins via reporting tools.\n///\n/// Key relationships: references user (reporter), post (or comment), and enables polymorphic targeting of reports. Moderation actions are maintained elsewhere. Enforces business rules for no duplicate reports from the same user for the same content and logs reporting context for trace/audit.\n/// Special behaviors: Uniqueness constraints prevent double-reporting by same user per content type. Deletions are soft-deletes for compliance and history retention.\n///\n/// @namespace Interaction\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_reports {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key - Uniquely identifies each report for compliance, auditing, moderation, and traceability.\n  id String @id @db.Uuid\n\n  /// Reporter Foreign Key - References the user (from discussionboard_user) who submitted the report. Maintains accountability and supports user-based moderation analytics. Not nullable; always required.\n  user_id String @db.Uuid\n\n  /// Polymorphic Foreign Key: Post - Identifies the post that is being reported (if applicable). NULL if report targets a comment. Ensures correct, strictly normalized associativity, and prevents overlap with comment_id.\n  post_id String? @db.Uuid\n\n  /// Polymorphic Foreign Key: Comment - Identifies the comment being reported (if any). NULL if post is targeted. Supports polymorphic reporting of both content types. Enforces correct normalization.\n  comment_id String? @db.Uuid\n\n  /// Short Reason Code - Implements requirements for capturing structured event context (e.g. 'spam', 'abuse', 'off-topic'). Enables filtering and workflow logic. Follows a pre-set value list handled in application/business logic. 3NF maintained as reason text is never duplicated (codes only here).\n  reason_code String\n\n  /// Detailed Reason (optional) - Implements reporting context capture for case auditing, moderation analytics, and transparency. Allows user to enter details or evidence. Nullable for cases where only the code is needed.\n  reason_details String?\n\n  /// Report Creation Timestamp - Indicates when the report was made. Implements audit trail (requirement: 3.9 and moderation review within 24hr SLA). Non-null, ensures each report is audited with precise event time.\n  created_at DateTime @db.Timestamptz\n\n  /// Soft-delete Timestamp - Enables soft-removal (not physical deletion) of reports for moderation or review compliance. Null if active, non-null when deleted. Ensures normalization and auditable workflow.\n  deleted_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  user    discussionboard_user      @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post    discussionboard_post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n\n  discussionboard_report_review discussionboard_report_review[]\n\n  @@unique([user_id, post_id])\n  @@unique([user_id, comment_id])\n  @@index([post_id])\n  @@index([comment_id])\n}\n",
        "schema-05-moderation.prisma": "/// [Moderation Actions Log] - This implements the moderation action audit requirement from the requirements documentation (sections 02.3.5, 02.3.6, and 03).\n/// Records every direct moderation activity such as hide, delete, warning issuance, and user muting/ban performed by moderators or admins. Maintains 3NF compliance by referencing target users, actions, posts, and comments instead of duplicating their data. For example, every time a moderator deletes a post or issues a warning, a new record is created here linking who did what, to which item, and why.\n/// Key relationships: links to moderator/admin (actor), target user, affected post/comment (if applicable).\n/// Special behaviors: strictly append-only (no updates); supports complete audit trail of moderation interventions.\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_moderation_action {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Standard internal identifier. Uniquely identifies each moderation action; ensures atomic representation of each occurrence.\n  id String @id @db.Uuid\n\n  /// [Action originator] - Implements the 'who performed the action' requirement. References the moderator or admin user account executing the moderation. Ensures normalization by linking to user, not duplicating actor data. For example, when moderator #1234 deletes a comment, this field is #1234.\n  actor_id String @db.Uuid\n\n  /// [User targeted] - Fulfills the 'target of moderation' tracking requirement. Links to the affected user account (e.g., reported member). Ensures single source of truth for user data and enables traceability. For example, for a ban of user X, this references user X.\n  target_user_id String @db.Uuid\n\n  /// [Affected post] - Implements moderation linkage for post-level actions. References the post if this action affects a specific post. Normalization preserved (nullable, as not all actions are post-related). For example, deleting a post links here; issuing a ban does not.\n  post_id String? @db.Uuid\n\n  /// [Affected comment] - Moderation linkage to comment. References the comment if the action is on a specific comment. Kept nullable to preserve 3NF and flexibility. For example, hiding a comment references its id here.\n  comment_id String? @db.Uuid\n\n  /// [Action type] - Implements requirement to enumerate distinct moderation activities. Type of moderation: e.g., 'delete_post', 'hide_comment', etc. Maintains normalization.\n  action_type String\n\n  /// [Reason] - Fulfills rationale for moderation. Stores moderator/admin's reason/comment. Ensures accountability, searchable, used for appeals.\n  reason String\n\n  /// [Timestamp] - Implements time-based audit tracking. True creation time of the action record, guarantees traceability.\n  created_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  actor             discussionboard_user      @relation(\"discussionboard_moderation_action_of_actor_id\", fields: [actor_id], references: [id], onDelete: Cascade)\n  target_user       discussionboard_user      @relation(\"discussionboard_moderation_action_of_target_user_id\", fields: [target_user_id], references: [id], onDelete: Cascade)\n  moderated_post    discussionboard_post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  moderated_comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([actor_id, created_at])\n  @@index([target_user_id, created_at])\n}\n\n/// [Report Review Log] - Implements requirements for moderation report review workflow (sections 02.3.4, 02.3.5, 03).\n/// Tracks moderator or admin handling of user-submitted reports on posts/comments. Maintains 3NF by referencing report, reviewer, affected post/comment, and action taken. For example, when a moderator reviews a reported post and marks it as 'resolved,' a record is created here linking to all relevant entities.\n/// Key relationships: links to the report, reviewer, optionally post/comment.\n/// Special behaviors: append-only, supports full reporting workflow and audit.\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_report_review {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Unique identifier for report reviews.\n  id String @id @db.Uuid\n\n  /// [The report being reviewed] - Links to a specific user report for moderation review.\n  report_id String @db.Uuid\n\n  /// [Moderator/admin reviewer] - References user carrying out the review.\n  reviewer_id String @db.Uuid\n\n  /// [Reviewed post] - Links reviewed post, nullable because not all reports are about posts.\n  post_id String? @db.Uuid\n\n  /// [Reviewed comment] - Links reviewed comment, nullable because not all reports are about comments.\n  comment_id String? @db.Uuid\n\n  /// [Outcome status] - Status for reviewed reports: e.g., 'resolved', 'rejected', 'pending'.\n  review_status String\n\n  /// [Review notes] - Optional comments from reviewer.\n  moderator_comment String?\n\n  /// [Review timestamp] - Auditable time of moderation review.\n  reviewed_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  report           discussionboard_reports   @relation(fields: [report_id], references: [id], onDelete: Cascade)\n  reviewer         discussionboard_user      @relation(fields: [reviewer_id], references: [id], onDelete: Cascade)\n  reviewed_post    discussionboard_post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  reviewed_comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n\n  @@unique([report_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([reviewer_id, reviewed_at])\n}\n\n/// [Warnings Issued Log] - Implements moderator warning history per requirements (sections 02.3.5, 02.3.6, 03).\n/// Stores warnings given by moderators/admins to users for guideline-violating behavior. Maintains 3NF by linking recipient, issuer, and optionally the relevant post/comment. For example, when a moderator issues a warning for an offensive comment, that instance is logged here.\n/// Key relationships: issued_by (moderator/admin), issued_to (target user), post/comment (context, nullable).\n/// Special behaviors: historical only (warnings are never updated, only issued).\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_warning {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Globally unique identifier of each warning.\n  id String @id @db.Uuid\n\n  /// [Issuer] - Moderator/admin user issuing the warning.\n  issued_by_id String @db.Uuid\n\n  /// [Recipient] - User who receives the warning.\n  issued_to_id String @db.Uuid\n\n  /// [Related post] - Cause for warning (optional, nullable).\n  post_id String? @db.Uuid\n\n  /// [Related comment] - Cause for warning (optional, nullable).\n  comment_id String? @db.Uuid\n\n  /// [Type of warning] - Categorical reason: e.g., 'abuse', 'spam', etc.\n  warning_type String\n\n  /// [Moderator message] - Human-explained rationale.\n  message String\n\n  /// [Issue timestamp] - The date/time warning was given.\n  issued_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  issuer          discussionboard_user      @relation(\"discussionboard_warning_of_issued_by_id\", fields: [issued_by_id], references: [id], onDelete: Cascade)\n  recipient       discussionboard_user      @relation(\"discussionboard_warning_of_issued_to_id\", fields: [issued_to_id], references: [id], onDelete: Cascade)\n  warning_post    discussionboard_post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  warning_comment discussionboard_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n\n  discussionboard_ban discussionboard_ban[]\n\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([issued_to_id, issued_at])\n  @@index([issued_by_id, issued_at])\n}\n\n/// [User Ban Log] - This model realizes the user suspension/ban requirements (sections 02.3.5, 02.3.6, 03).\n/// Records every instance of an account being banned or muted, whether temporarily or permanently, by moderator/admin decision. Maintains 3NF by relating only to ban actors and affected users, no calculated ban metrics.\n/// Key relationships: 'banned_by_id' (moderator/admin), 'banned_user_id' (target member), warning reference for context, no circular dependencies.\n/// Special behaviors: all bans are point-in-time records, may be queried for active status by expiry date.\n///\n/// @namespace Moderation\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_ban {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Unique ban instance ID; ensures each ban/mute event is singular and traceable.\n  id String @id @db.Uuid\n\n  /// [Banned user] - Who is subjected to the ban/mute, referencing the user entity.\n  banned_user_id String @db.Uuid\n\n  /// [Moderator/admin] - Initiating user performing the ban/mute.\n  banned_by_id String @db.Uuid\n\n  /// [Related warning] - Optionally reference a specific prior warning that resulted in the ban/mute.\n  warning_id String? @db.Uuid\n\n  /// [Ban type] - Type category; e.g., 'mute', 'temp_ban', 'perm_ban', etc.\n  ban_type String\n\n  /// [Ban reason] - Human-entered explanation for audit, traceability, and user appeals.\n  reason String\n\n  /// [Ban start time] - When ban was placed.\n  issued_at DateTime @db.Timestamptz\n\n  /// [Ban expiry] - When unban occurs (nullable for permanent bans).\n  expires_at DateTime? @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  banned_user     discussionboard_user     @relation(\"discussionboard_ban_of_banned_user_id\", fields: [banned_user_id], references: [id], onDelete: Cascade)\n  ban_actor       discussionboard_user     @relation(\"discussionboard_ban_of_banned_by_id\", fields: [banned_by_id], references: [id], onDelete: Cascade)\n  related_warning discussionboard_warning? @relation(fields: [warning_id], references: [id], onDelete: Cascade)\n\n  @@index([warning_id])\n  @@index([banned_user_id, issued_at])\n  @@index([banned_by_id, issued_at])\n}\n",
        "schema-06-notification.prisma": "/// [Notification delivery and history] - This implements the 'User Notifications' and system-triggered alert requirements from the functional requirements (Section 3.7).\n///\n/// This table records each notification sent to users (members, moderators, admins) regarding activity on posts, comments, moderator actions, and system events. Maintains full normalization (3NF) by storing atomic notification data and strictly referencing user and activity entities. For example, when a user receives a reply to their comment or a moderator action on their post, a new record is created here and references the relevant entities.\n///\n/// Key relationships: References recipient user ({@link discussionboard_user}), optional linkage to post ({@link discussionboard_post}) or comment ({@link discussionboard_comments}), and moderator/admin actor when relevant. \n/// Special behaviors: Supports targeting individual users; system messages have nullable activity references. All user/system notifications are auditable. No denormalized or calculated fields.\n///\n/// @namespace Notification\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_notification {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Implements unique identification of each notification. Ensures atomic records. For example, used to reference or audit notification events.\n  id String @id @db.Uuid\n\n  /// [Notification recipient] - Implements which user receives the notification, mapped to requirements for personalized notifications. For example, used to display notifications on user dashboard. Normalization: ensures recipient is atomically referenced and avoids denormalization. REQUIRED.\n  recipient_user_id String @db.Uuid\n\n  /// [Related post] - Associates notification with a post if applicable (e.g., reply, like on post). Fully normalized by optional reference. For example, used when notifying about replies or moderation of a post.\n  related_post_id String? @db.Uuid\n\n  /// [Related comment] - Associates notification with a comment if applicable (e.g., reply to comment, moderation). Normalized as optional reference. For example, used for notifications about comment mentions.\n  related_comment_id String? @db.Uuid\n\n  /// [Notification actor/user] - (Optional) The user who triggered this notification (e.g., who liked/commented, moderator/admin who performed action). If the event is system-triggered, this is null. For example, used for 'X replied to your post.' Ensures actor is atomically referenced, prevents denormalization.\n  actor_user_id String? @db.Uuid\n\n  /// [Notification type] - Classifies the type of notification in accordance with Section 3.7's events (e.g., 'reply', 'like', 'moderator_action', 'system_message', etc.). Fully normalized. For example, enables UI filtering and template selection. Constraint: limited to allowed notification types via application logic.\n  type String\n\n  /// [Notification body] - Human-readable message content sent to user. Implements functional requirement for notifications to explain events. Maintains normalization by storing only atomic message text; templates and aggregation are managed elsewhere. For example, 'Alice replied to your post.'\n  message String\n\n  /// [Read/unread flag] - Tracks whether the notification has been marked as read by the recipient, as required by notification preference and in-app UX. Normalized as a pure flag. For example, unread messages appear in notification dropdown. Constraint: only toggled by recipient.\n  is_read Boolean\n\n  /// [Notification creation time] - Implements audit and sorting requirements for notification recency. Ensures full normalization; atomic timestamp. For example, used to order notifications in UI and for cleanup logic.\n  created_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  recipient_user  discussionboard_user      @relation(\"discussionboard_notification_of_recipient_user_id\", fields: [recipient_user_id], references: [id], onDelete: Cascade)\n  related_post    discussionboard_post?     @relation(fields: [related_post_id], references: [id], onDelete: Cascade)\n  related_comment discussionboard_comments? @relation(fields: [related_comment_id], references: [id], onDelete: Cascade)\n  actor_user      discussionboard_user?     @relation(\"discussionboard_notification_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n\n  @@unique([recipient_user_id, type, related_post_id, related_comment_id, actor_user_id, created_at])\n  @@index([related_post_id])\n  @@index([related_comment_id])\n  @@index([actor_user_id])\n  @@index([recipient_user_id, created_at])\n}\n\n/// [User notification preferences] - Implements the notification preference system specified in requirements Section 3.7, giving users fine-grained control over what notifications they receive and how. All data is fully normalized.\n///\n/// Business purpose: Enables per-user customization (mute, enable, push preference, etc.) for different notification types and channels. For example, a member might mute 'like' notifications but enable 'moderator_action' notifications on mobile.\n///\n/// Technical context: Direct link to each user ({@link discussionboard_user}), with one row per user (enforced by a unique constraint). No denormalization.\n///\n/// Usage example: Used when generating notifications or respecting user muting/settings for different event types.\n///\n/// Special behaviors: All boolean flags, atomic, fully normalized. No computed columns.\n///\n/// @namespace Notification\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_notification_preference {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary key] - Implements unique identification for each user's notification preference record. Normalized; required for foreign key relationships and referencing.\n  id String @id @db.Uuid\n\n  /// [User owning preferences] - Implements one-to-one mapping from user to notification preferences, as required by the per-user customization use case. Fully normalized: enforced by unique constraint. For example, fetching preferences when user changes settings. Enforces referential integrity; on user deletion, preference row is cleaned up.\n  ///\n  /// Special behavior: unique per user.\n  user_id String @db.Uuid\n\n  /// [Reply notification toggle] - User's option to receive notifications about direct replies. Implements user preference granularity requirement. For example, if false, the user does not get reply-related notifications. Fully normalized, no calculation.\n  notify_reply Boolean\n\n  /// [Like notification toggle] - User's choice to receive/not receive notifications when their post or comment is liked. Maintains normalization. Example: toggling off keeps the user from being notified for likes.\n  notify_like Boolean\n\n  /// [Moderator action notification toggle] - Implements ability for users to be alerted when a moderator acts on their content. Normalization ensured. For example, disables notifications for moderation unless true.\n  notify_moderator_action Boolean\n\n  /// [System message notification toggle] - Whether user receives platform-wide messages or announcements. Normalization ensured. For example, used for site policy change notifications.\n  notify_system_message Boolean\n\n  //----\n  // RELATIONS\n  //----\n  user discussionboard_user @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@unique([user_id])\n}\n",
        "schema-07-admin.prisma": "/// [Audit Logging for Sensitive Actions] - This implements the audit logging and traceability requirements from the user management and security sections, specifically from 'Audit Logging' in the User Roles & Permissions and 'Access & Security' in the Functional Requirements documents. \n///\n/// Allows full traceability and accountability across admin and privileged actions (e.g., role changes, bans, moderation actions). Maintains full 3NF normalization by separating audit trail details from direct business data, storing only atomic data and foreign key references. For example, every time a ban is issued, or a user changes role, an entry is created here independently of the action's core data tables.\n///\n/// Key relationships: references the user (actor) performing the action, the affected user (target), and provides linkage via entity_type/entity_id for polymorphic connections to the target business object. \n/// Special behaviors: Should be written only by internal privileged actions, not by user-driven business flows. Designed for audit and compliance reviews. No calculated fields, strictly normalized.\n///\n/// @namespace Admin\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_audit_log {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Implements identity and uniqueness for each audit log entry. Fulfills the uniqueness requirement per audit record. Ensures normalization by enabling atomic audit entries. Always generated as a UUID.\n  id String @id @db.Uuid\n\n  /// [Action Actor] - Implements the requirement to store the user responsible for each privileged action. Links to the user who performed the action. Ensures 3NF by storing only the user id as a reference; all other actor information must be joined as needed. For example, references the admin who issued a ban.\n  actor_user_id String @db.Uuid\n\n  /// [Action Target] - Fulfills the requirement to capture who is affected by the action, if applicable (e.g., in bans, warnings, or demotions). Nullable for actions targeting system settings rather than specific users. Keeps direct reference only to target user id to stay normalized.\n  target_user_id String? @db.Uuid\n\n  /// [Action Type] - Implements the action classification requirement. Business meaning: describes the category (e.g., 'ban', 'role_change', 'settings_update'). Ensures normalization by not encoding business logic; only keeps atomic values (string), never details or summaries.\n  action_type String\n\n  /// [Entity Type] - Implements the need for polymorphic audit trail. Records the type of entity affected (e.g., 'user', 'post', 'comment', 'setting'). Ensures 3NF by representing entity type as atomic data, not as a foreign key or denormalized structure.\n  entity_type String\n\n  /// [Entity Reference] - Fulfills requirement to record which object was modified. Nullable for actions that do not target a specific entity. Ensures normalization by storing atomic reference only.\n  entity_id String? @db.Uuid\n\n  /// [Action Detail] - Implements extensible context for audit records. Stores optional contextual details, such as old/new role in a role change. Ensures normalization by keeping these as atomic strings, not by embedding object graphs.\n  action_detail String?\n\n  /// [Timestamp] - Implements audit trail requirement for time traceability. Business meaning: when the privileged action took place. Ensures normalization by using a single atomic datetime. Example: records ban date or role assignment time.\n  created_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  fk_audit_actor_user  discussionboard_user  @relation(\"discussionboard_audit_log_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  fk_audit_target_user discussionboard_user? @relation(\"discussionboard_audit_log_of_target_user_id\", fields: [target_user_id], references: [id], onDelete: Cascade)\n\n  @@index([actor_user_id, created_at])\n  @@index([target_user_id, created_at])\n  @@index([entity_type, entity_id])\n  @@index([action_detail(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n\n/// [Platform Configuration Management] - This implements requirements for platform-wide admin-configurable settings, drawn from 'Administration' in both the overview and functional requirements documents (see Admin: Platform Configuration, and Functionality: Platform-wide Settings). \n///\n/// Solves the business problem of enabling admin users to manage platform-wide booleans, options, and policies in a normalized way. \n/// Maintains 3NF by storing one setting per row, keyed by setting name, value, and type—never groups or arrays. For example, \"MaxPostAttachments\" or \"EnableModerationQueue\" are single atomic settings stored here.\n///\n/// Key relationships: No foreign keys; settings are manipulated by admin flows only. \n/// Special behaviors: Names are unique; mutating a setting should update only the single normalized row. No pre-calculated values or summaries—strictly atomic and normalized.\n///\n/// @namespace Admin\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussionboard_platform_setting {\n  //----\n  // COLUMNS\n  //----\n  /// [Primary Key] - Unique identifier for each platform setting. 3NF compliance: prevents duplicate or ambiguous settings by row identity.\n  id String @id @db.Uuid\n\n  /// [Setting Name] - Implements the need to uniquely identify every platform setting. Should be a descriptive string (e.g., 'EnableModerationQueue'). Ensures normalization by not encoding arrays or objects, only simple strings.\n  name String\n\n  /// [Setting Value] - Implements storing current configuration/data. Can hold any atomic value as string (booleans='true'/'false', numbers as string, etc.). Ensures 3NF by keeping each value atomic and not embedding larger config structures.\n  value String\n\n  /// [Data Type Marker] - Fulfills the requirement to distinguish setting value interpretation (e.g., 'boolean', 'int', 'string'). Maintains normalization by storing type marker atomically. Example: allows parsing and validation at the application level.\n  type String\n\n  /// [Last Updated Timestamp] - Supports auditability for platform changes. Maintains normalization by using a single atomic datetime. For example, allows the system to show when moderation settings were last updated.\n  updated_at DateTime @db.Timestamptz\n\n  //----\n  // RELATIONS\n  //----\n  @@unique([name])\n}\n",
        "main.prisma": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\", \"views\"]\n  binaryTargets   = [\"native\"]\n}\n\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = []\n}\n\ngenerator markdown {\n  provider = \"prisma-markdown\"\n  output   = \"../docs/ERD.md\"\n}\n"
      },
      "nodeModules": {
        "node_modules/.prisma/client/client.d.ts": "export * from \"./index\"",
        "node_modules/.prisma/client/default.d.ts": "export * from \"./index\"",
        "node_modules/.prisma/client/edge.d.ts": "export * from \"./default\"",
        "node_modules/.prisma/client/index.d.ts": "\n/**\n * Client\n**/\n\nimport * as runtime from './runtime/library.js';\nimport $Types = runtime.Types // general types\nimport $Public = runtime.Types.Public\nimport $Utils = runtime.Types.Utils\nimport $Extensions = runtime.Types.Extensions\nimport $Result = runtime.Types.Result\n\nexport type PrismaPromise<T> = $Public.PrismaPromise<T>\n\n\n/**\n * Model discussionboard_user\n * [User Master Record] - This implements the foundational user management requirement noted in the requirements analysis (02_discussionboard_functional_requirements.md Section 3.1: User Registration & Authentication). \n * \n * This model captures core authentication and identity data for all discussion board participants—regardless of role (member, moderator, admin). Maintains strict 3NF compliance by isolating authentication data (email, credential info, status) from profile and role specialization, preventing duplication or transitive dependencies. For example, all roles reference this entity, and profile/details are managed in separate tables.\n * \n * Key relationships: Links 1:1 to discussionboard_user_profile. Related 1:N with role specializations (member/moderator/admin), posts, comments, and all historical user actions.\n * Special behaviors: Only one email per user. Role management handled via join/role specialization tables. Soft deactivation supported by 'is_active' flag.\n * \n * @namespace Core\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_user = $Result.DefaultSelection<Prisma.$discussionboard_userPayload>\n/**\n * Model discussionboard_user_profile\n * [User Profile] - Implements user display/personalization requirements (02_discussionboard_functional_requirements.md, 3.1) distinct from root authentication. Holds display name, optional avatar, and bio—strictly 3NF as contact details, credentials, role, and settings are elsewhere. Used for member directories, post attributions, notifications.\n * \n * Key relationships: 1:1 with discussionboard_user (foreign key = unique). Not duplicated in role tables.\n * Special behaviors: 1:1 uniqueness enforced. All user display data (NOT used for authentication).\n * \n * @namespace Core\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_user_profile = $Result.DefaultSelection<Prisma.$discussionboard_user_profilePayload>\n/**\n * Model discussionboard_member\n * [Member Role] - Implements domain model for general user participation rights (see user roles in 03_discussionboard_user_roles_and_permissions.md and participation requirements in 02_discussionboard_functional_requirements.md 3.2-3.4). This captures all accounts with base-level actions (posting, commenting, liking). All users with platform presence are members. 3NF: Only stores role-specific facts, no credential/profile fields duplicated.\n * \n * Key relationships: 1:1 with discussionboard_user. Related 1:N to posts, comments, likes, reports. Role is atomic, all privileges via explicit role presence.\n * Special behaviors: Role assignment/demotion flows strictly auditable via foreign key.\n * \n * @namespace Core\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_member = $Result.DefaultSelection<Prisma.$discussionboard_memberPayload>\n/**\n * Model discussionboard_moderator\n * [Moderator Role] - Implements elevated moderator assignment for trusted members, referencing business rules in 03_discussionboard_user_roles_and_permissions.md and moderation functions in 02_discussionboard_functional_requirements.md 3.5. Only users explicitly assigned this role are allowed moderation tools. 3NF-preserving: only stores moderator-specific info (no duplication of credentials/profile).\n * \n * Key relationships: 1:1 to discussionboard_user (atomic assignment). Related 1:N to reports, moderation actions.\n * Special behaviors: Grant/revoke flows auditable. All permission checks cleanly reference this mapping.\n * \n * @namespace Core\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_moderator = $Result.DefaultSelection<Prisma.$discussionboard_moderatorPayload>\n/**\n * Model discussionboard_admin\n * [Admin Role] - Implements system administrator privilege assignment as per 03_discussionboard_user_roles_and_permissions.md and 02_discussionboard_functional_requirements.md (platform-wide management, user promotion/role reassignment). All platform-wide permissions are checked against this table. 3NF-compliant: only houses admin assignment data, never duplicates user or moderator/member details.\n * \n * Key relationships: 1:1 to discussionboard_user; referenced when determining admin dashboard/settings access. All permission checks reference this mapping.\n * Special behaviors: Admin can demote/promote all other roles. Auditing via assignment timestamps. No transitive/admin details outside this entry.\n * \n * @namespace Core\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_admin = $Result.DefaultSelection<Prisma.$discussionboard_adminPayload>\n/**\n * Model discussionboard_post\n * [Discussion Posts] - Implements Sections 3.2 (Creating & Managing Posts) and 3.1 (User Registration & Authentication) as detailed in the requirements (02_discussionboard_functional_requirements.md).\n * \n * Stores the main discussion board contributions (posts), tracking author, category, creation/edit timestamps, and supports soft deletion. Ensures strict 3NF: posts do not contain redundant author or category data, referencing normalized member and category tables instead. Usage example: a post about economic policy references its author (member) and its category (e.g., 'Economics') without duplicating user/category info.\n * \n * Key relationships: discussionboard_member (author), discussionboard_post_category (category), attachments, tags, etc. Special behaviors: soft-delete is tracked via deleted_at; author/category FKs are required and not nullable.\n * \n * @namespace DiscussionBoard\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_post = $Result.DefaultSelection<Prisma.$discussionboard_postPayload>\n/**\n * Model discussionboard_post_category\n * [Discussion Post Categories] - Implements Section 3.2 and 3.6 (Admin). Categories like 'Politics' or 'Economics'—referenced by posts, maintained separately for normalization. Usage: admins manage categories; posts always reference a category. Special: cannot delete if referenced by a post.\n * \n * @namespace DiscussionBoard\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_post_category = $Result.DefaultSelection<Prisma.$discussionboard_post_categoryPayload>\n/**\n * Model discussionboard_post_tag\n * [Discussion Post Tags] - Implements tagging per Section 3.2 to enable content filtering/search without denormalization. Each tag is stored atomically and referenced by M:N join (not included here). E.g., post tagged 'inflation'. Usage: tag table ensures uniqueness; pure key-name pairs only.\n * \n * @namespace DiscussionBoard\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_post_tag = $Result.DefaultSelection<Prisma.$discussionboard_post_tagPayload>\n/**\n * Model discussionboard_post_attachment\n * [Post Attachments] - Implements file/image management for posts (Section 3.2). Each attachment references one post, with file URL/type metadata. Maintains normalization with atomic URI/type; all files managed outside main post record; supports cascading delete on post removal.\n * \n * @namespace DiscussionBoard\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_post_attachment = $Result.DefaultSelection<Prisma.$discussionboard_post_attachmentPayload>\n/**\n * Model discussionboard_comments\n * [Comment Model] - This implements the comment functionality as outlined under functional requirements (sections 3.3, 3.4, 3.5) and supports threaded/nested comments for both 'Politics' and 'Economics' board categories. \n * \n * Allows users to participate in ongoing discussions by adding, editing, and deleting their own comments, with support for threaded conversations, reporting, moderation, and in-line engagement (likes). Maintains 3NF by separating this entity from users, posts, likes, and reports. For example, a user can comment on a post, reply to other comments (recursively), and have their comment moderated or reported independently. \n * \n * Key relationships: Links to posts, users (authors), and parent comment (if threaded). Supports foreign keys to reporting, moderation, and liking mechanisms in other models.\n * Special behaviors: Enforces only one parent per comment for tree structure, supports soft deletion, and maintains a precise audit trail without any pre-calculated metrics.\n * \n * @namespace Comments\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_comments = $Result.DefaultSelection<Prisma.$discussionboard_commentsPayload>\n/**\n * Model discussionboard_likes\n * User Content Like - This implements the user engagement and interaction requirements (see sections 3.4 and 3.8 of the requirements analysis).\n * \n * Enables the platform’s core like/voting system, allowing users to like posts or comments once, supporting quantifiable content popularity and user involvement. Maintains strict 3NF normalization by separating atomic like events, with no aggregate/calculated fields present. For example, when a user clicks 'like' on a post, a record is created here, which can later be used for denormalized like counts in mv_ tables only.\n * \n * Key relationships: references to both posts and comments for polymorphic liking, user reference, and indexes support multi-content type lookups.\n * Special behaviors: Uniqueness enforced so a user may only like a given post OR comment once, but not both at once (polymorphic uniqueness). All deletions are soft-deletes for audit/compliant removal tracking.\n * \n * @namespace Interaction\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_likes = $Result.DefaultSelection<Prisma.$discussionboard_likesPayload>\n/**\n * Model discussionboard_reports\n * User Content Report - This implements abuse/spam reporting requirements from sections 3.4, 3.5, 3.6, and 3.9.\n * \n * Allows users to report specific posts or comments for guideline violations, abuse, or spam. Maintains 3NF normalization by capturing only atomic reporting events (no report counts or summaries in table). For example, when a user flags a comment or post for review, a record is created here, with reason captured, for review by moderators/admins via reporting tools.\n * \n * Key relationships: references user (reporter), post (or comment), and enables polymorphic targeting of reports. Moderation actions are maintained elsewhere. Enforces business rules for no duplicate reports from the same user for the same content and logs reporting context for trace/audit.\n * Special behaviors: Uniqueness constraints prevent double-reporting by same user per content type. Deletions are soft-deletes for compliance and history retention.\n * \n * @namespace Interaction\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_reports = $Result.DefaultSelection<Prisma.$discussionboard_reportsPayload>\n/**\n * Model discussionboard_moderation_action\n * [Moderation Actions Log] - This implements the moderation action audit requirement from the requirements documentation (sections 02.3.5, 02.3.6, and 03).\n * Records every direct moderation activity such as hide, delete, warning issuance, and user muting/ban performed by moderators or admins. Maintains 3NF compliance by referencing target users, actions, posts, and comments instead of duplicating their data. For example, every time a moderator deletes a post or issues a warning, a new record is created here linking who did what, to which item, and why.\n * Key relationships: links to moderator/admin (actor), target user, affected post/comment (if applicable).\n * Special behaviors: strictly append-only (no updates); supports complete audit trail of moderation interventions.\n * \n * @namespace Moderation\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_moderation_action = $Result.DefaultSelection<Prisma.$discussionboard_moderation_actionPayload>\n/**\n * Model discussionboard_report_review\n * [Report Review Log] - Implements requirements for moderation report review workflow (sections 02.3.4, 02.3.5, 03).\n * Tracks moderator or admin handling of user-submitted reports on posts/comments. Maintains 3NF by referencing report, reviewer, affected post/comment, and action taken. For example, when a moderator reviews a reported post and marks it as 'resolved,' a record is created here linking to all relevant entities.\n * Key relationships: links to the report, reviewer, optionally post/comment.\n * Special behaviors: append-only, supports full reporting workflow and audit.\n * \n * @namespace Moderation\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_report_review = $Result.DefaultSelection<Prisma.$discussionboard_report_reviewPayload>\n/**\n * Model discussionboard_warning\n * [Warnings Issued Log] - Implements moderator warning history per requirements (sections 02.3.5, 02.3.6, 03).\n * Stores warnings given by moderators/admins to users for guideline-violating behavior. Maintains 3NF by linking recipient, issuer, and optionally the relevant post/comment. For example, when a moderator issues a warning for an offensive comment, that instance is logged here.\n * Key relationships: issued_by (moderator/admin), issued_to (target user), post/comment (context, nullable).\n * Special behaviors: historical only (warnings are never updated, only issued).\n * \n * @namespace Moderation\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_warning = $Result.DefaultSelection<Prisma.$discussionboard_warningPayload>\n/**\n * Model discussionboard_ban\n * [User Ban Log] - This model realizes the user suspension/ban requirements (sections 02.3.5, 02.3.6, 03).\n * Records every instance of an account being banned or muted, whether temporarily or permanently, by moderator/admin decision. Maintains 3NF by relating only to ban actors and affected users, no calculated ban metrics.\n * Key relationships: 'banned_by_id' (moderator/admin), 'banned_user_id' (target member), warning reference for context, no circular dependencies.\n * Special behaviors: all bans are point-in-time records, may be queried for active status by expiry date.\n * \n * @namespace Moderation\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_ban = $Result.DefaultSelection<Prisma.$discussionboard_banPayload>\n/**\n * Model discussionboard_notification\n * [Notification delivery and history] - This implements the 'User Notifications' and system-triggered alert requirements from the functional requirements (Section 3.7).\n * \n * This table records each notification sent to users (members, moderators, admins) regarding activity on posts, comments, moderator actions, and system events. Maintains full normalization (3NF) by storing atomic notification data and strictly referencing user and activity entities. For example, when a user receives a reply to their comment or a moderator action on their post, a new record is created here and references the relevant entities.\n * \n * Key relationships: References recipient user ({@link discussionboard_user}), optional linkage to post ({@link discussionboard_post}) or comment ({@link discussionboard_comments}), and moderator/admin actor when relevant. \n * Special behaviors: Supports targeting individual users; system messages have nullable activity references. All user/system notifications are auditable. No denormalized or calculated fields.\n * \n * @namespace Notification\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_notification = $Result.DefaultSelection<Prisma.$discussionboard_notificationPayload>\n/**\n * Model discussionboard_notification_preference\n * [User notification preferences] - Implements the notification preference system specified in requirements Section 3.7, giving users fine-grained control over what notifications they receive and how. All data is fully normalized.\n * \n * Business purpose: Enables per-user customization (mute, enable, push preference, etc.) for different notification types and channels. For example, a member might mute 'like' notifications but enable 'moderator_action' notifications on mobile.\n * \n * Technical context: Direct link to each user ({@link discussionboard_user}), with one row per user (enforced by a unique constraint). No denormalization.\n * \n * Usage example: Used when generating notifications or respecting user muting/settings for different event types.\n * \n * Special behaviors: All boolean flags, atomic, fully normalized. No computed columns.\n * \n * @namespace Notification\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_notification_preference = $Result.DefaultSelection<Prisma.$discussionboard_notification_preferencePayload>\n/**\n * Model discussionboard_audit_log\n * [Audit Logging for Sensitive Actions] - This implements the audit logging and traceability requirements from the user management and security sections, specifically from 'Audit Logging' in the User Roles & Permissions and 'Access & Security' in the Functional Requirements documents. \n * \n * Allows full traceability and accountability across admin and privileged actions (e.g., role changes, bans, moderation actions). Maintains full 3NF normalization by separating audit trail details from direct business data, storing only atomic data and foreign key references. For example, every time a ban is issued, or a user changes role, an entry is created here independently of the action's core data tables.\n * \n * Key relationships: references the user (actor) performing the action, the affected user (target), and provides linkage via entity_type/entity_id for polymorphic connections to the target business object. \n * Special behaviors: Should be written only by internal privileged actions, not by user-driven business flows. Designed for audit and compliance reviews. No calculated fields, strictly normalized.\n * \n * @namespace Admin\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_audit_log = $Result.DefaultSelection<Prisma.$discussionboard_audit_logPayload>\n/**\n * Model discussionboard_platform_setting\n * [Platform Configuration Management] - This implements requirements for platform-wide admin-configurable settings, drawn from 'Administration' in both the overview and functional requirements documents (see Admin: Platform Configuration, and Functionality: Platform-wide Settings). \n * \n * Solves the business problem of enabling admin users to manage platform-wide booleans, options, and policies in a normalized way. \n * Maintains 3NF by storing one setting per row, keyed by setting name, value, and type—never groups or arrays. For example, \"MaxPostAttachments\" or \"EnableModerationQueue\" are single atomic settings stored here.\n * \n * Key relationships: No foreign keys; settings are manipulated by admin flows only. \n * Special behaviors: Names are unique; mutating a setting should update only the single normalized row. No pre-calculated values or summaries—strictly atomic and normalized.\n * \n * @namespace Admin\n * @author AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type discussionboard_platform_setting = $Result.DefaultSelection<Prisma.$discussionboard_platform_settingPayload>\n\n/**\n * ##  Prisma Client ʲˢ\n *\n * Type-safe database client for TypeScript & Node.js\n * @example\n * ```\n * const prisma = new PrismaClient()\n * // Fetch zero or more Discussionboard_users\n * const discussionboard_users = await prisma.discussionboard_user.findMany()\n * ```\n *\n *\n * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n */\nexport class PrismaClient<\n  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,\n  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,\n  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs\n> {\n  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }\n\n    /**\n   * ##  Prisma Client ʲˢ\n   *\n   * Type-safe database client for TypeScript & Node.js\n   * @example\n   * ```\n   * const prisma = new PrismaClient()\n   * // Fetch zero or more Discussionboard_users\n   * const discussionboard_users = await prisma.discussionboard_user.findMany()\n   * ```\n   *\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n   */\n\n  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);\n  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;\n\n  /**\n   * Connect with the database\n   */\n  $connect(): $Utils.JsPromise<void>;\n\n  /**\n   * Disconnect from the database\n   */\n  $disconnect(): $Utils.JsPromise<void>;\n\n  /**\n   * Add a middleware\n   * @deprecated since 4.16.0. For new code, prefer client extensions instead.\n   * @see https://pris.ly/d/extensions\n   */\n  $use(cb: Prisma.Middleware): void\n\n/**\n   * Executes a prepared raw query and returns the number of affected rows.\n   * @example\n   * ```\n   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;\n\n  /**\n   * Executes a raw query and returns the number of affected rows.\n   * Susceptible to SQL injections, see documentation.\n   * @example\n   * ```\n   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;\n\n  /**\n   * Performs a prepared raw query and returns the `SELECT` data.\n   * @example\n   * ```\n   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;\n\n  /**\n   * Performs a raw query and returns the `SELECT` data.\n   * Susceptible to SQL injections, see documentation.\n   * @example\n   * ```\n   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')\n   * ```\n   *\n   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).\n   */\n  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;\n\n\n  /**\n   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.\n   * @example\n   * ```\n   * const [george, bob, alice] = await prisma.$transaction([\n   *   prisma.user.create({ data: { name: 'George' } }),\n   *   prisma.user.create({ data: { name: 'Bob' } }),\n   *   prisma.user.create({ data: { name: 'Alice' } }),\n   * ])\n   * ```\n   * \n   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).\n   */\n  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>\n\n  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>\n\n\n  $extends: $Extensions.ExtendsHook<\"extends\", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {\n    extArgs: ExtArgs\n  }>>\n\n      /**\n   * `prisma.discussionboard_user`: Exposes CRUD operations for the **discussionboard_user** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_users\n    * const discussionboard_users = await prisma.discussionboard_user.findMany()\n    * ```\n    */\n  get discussionboard_user(): Prisma.discussionboard_userDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_user_profile`: Exposes CRUD operations for the **discussionboard_user_profile** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_user_profiles\n    * const discussionboard_user_profiles = await prisma.discussionboard_user_profile.findMany()\n    * ```\n    */\n  get discussionboard_user_profile(): Prisma.discussionboard_user_profileDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_member`: Exposes CRUD operations for the **discussionboard_member** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_members\n    * const discussionboard_members = await prisma.discussionboard_member.findMany()\n    * ```\n    */\n  get discussionboard_member(): Prisma.discussionboard_memberDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_moderator`: Exposes CRUD operations for the **discussionboard_moderator** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_moderators\n    * const discussionboard_moderators = await prisma.discussionboard_moderator.findMany()\n    * ```\n    */\n  get discussionboard_moderator(): Prisma.discussionboard_moderatorDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_admin`: Exposes CRUD operations for the **discussionboard_admin** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_admins\n    * const discussionboard_admins = await prisma.discussionboard_admin.findMany()\n    * ```\n    */\n  get discussionboard_admin(): Prisma.discussionboard_adminDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_post`: Exposes CRUD operations for the **discussionboard_post** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_posts\n    * const discussionboard_posts = await prisma.discussionboard_post.findMany()\n    * ```\n    */\n  get discussionboard_post(): Prisma.discussionboard_postDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_post_category`: Exposes CRUD operations for the **discussionboard_post_category** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_post_categories\n    * const discussionboard_post_categories = await prisma.discussionboard_post_category.findMany()\n    * ```\n    */\n  get discussionboard_post_category(): Prisma.discussionboard_post_categoryDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_post_tag`: Exposes CRUD operations for the **discussionboard_post_tag** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_post_tags\n    * const discussionboard_post_tags = await prisma.discussionboard_post_tag.findMany()\n    * ```\n    */\n  get discussionboard_post_tag(): Prisma.discussionboard_post_tagDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_post_attachment`: Exposes CRUD operations for the **discussionboard_post_attachment** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_post_attachments\n    * const discussionboard_post_attachments = await prisma.discussionboard_post_attachment.findMany()\n    * ```\n    */\n  get discussionboard_post_attachment(): Prisma.discussionboard_post_attachmentDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_comments`: Exposes CRUD operations for the **discussionboard_comments** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_comments\n    * const discussionboard_comments = await prisma.discussionboard_comments.findMany()\n    * ```\n    */\n  get discussionboard_comments(): Prisma.discussionboard_commentsDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_likes`: Exposes CRUD operations for the **discussionboard_likes** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_likes\n    * const discussionboard_likes = await prisma.discussionboard_likes.findMany()\n    * ```\n    */\n  get discussionboard_likes(): Prisma.discussionboard_likesDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_reports`: Exposes CRUD operations for the **discussionboard_reports** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_reports\n    * const discussionboard_reports = await prisma.discussionboard_reports.findMany()\n    * ```\n    */\n  get discussionboard_reports(): Prisma.discussionboard_reportsDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_moderation_action`: Exposes CRUD operations for the **discussionboard_moderation_action** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_moderation_actions\n    * const discussionboard_moderation_actions = await prisma.discussionboard_moderation_action.findMany()\n    * ```\n    */\n  get discussionboard_moderation_action(): Prisma.discussionboard_moderation_actionDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_report_review`: Exposes CRUD operations for the **discussionboard_report_review** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_report_reviews\n    * const discussionboard_report_reviews = await prisma.discussionboard_report_review.findMany()\n    * ```\n    */\n  get discussionboard_report_review(): Prisma.discussionboard_report_reviewDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_warning`: Exposes CRUD operations for the **discussionboard_warning** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_warnings\n    * const discussionboard_warnings = await prisma.discussionboard_warning.findMany()\n    * ```\n    */\n  get discussionboard_warning(): Prisma.discussionboard_warningDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_ban`: Exposes CRUD operations for the **discussionboard_ban** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_bans\n    * const discussionboard_bans = await prisma.discussionboard_ban.findMany()\n    * ```\n    */\n  get discussionboard_ban(): Prisma.discussionboard_banDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_notification`: Exposes CRUD operations for the **discussionboard_notification** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_notifications\n    * const discussionboard_notifications = await prisma.discussionboard_notification.findMany()\n    * ```\n    */\n  get discussionboard_notification(): Prisma.discussionboard_notificationDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_notification_preference`: Exposes CRUD operations for the **discussionboard_notification_preference** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_notification_preferences\n    * const discussionboard_notification_preferences = await prisma.discussionboard_notification_preference.findMany()\n    * ```\n    */\n  get discussionboard_notification_preference(): Prisma.discussionboard_notification_preferenceDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_audit_log`: Exposes CRUD operations for the **discussionboard_audit_log** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_audit_logs\n    * const discussionboard_audit_logs = await prisma.discussionboard_audit_log.findMany()\n    * ```\n    */\n  get discussionboard_audit_log(): Prisma.discussionboard_audit_logDelegate<ExtArgs, ClientOptions>;\n\n  /**\n   * `prisma.discussionboard_platform_setting`: Exposes CRUD operations for the **discussionboard_platform_setting** model.\n    * Example usage:\n    * ```ts\n    * // Fetch zero or more Discussionboard_platform_settings\n    * const discussionboard_platform_settings = await prisma.discussionboard_platform_setting.findMany()\n    * ```\n    */\n  get discussionboard_platform_setting(): Prisma.discussionboard_platform_settingDelegate<ExtArgs, ClientOptions>;\n}\n\nexport namespace Prisma {\n  export import DMMF = runtime.DMMF\n\n  export type PrismaPromise<T> = $Public.PrismaPromise<T>\n\n  /**\n   * Validator\n   */\n  export import validator = runtime.Public.validator\n\n  /**\n   * Prisma Errors\n   */\n  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError\n  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError\n  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError\n  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError\n  export import PrismaClientValidationError = runtime.PrismaClientValidationError\n\n  /**\n   * Re-export of sql-template-tag\n   */\n  export import sql = runtime.sqltag\n  export import empty = runtime.empty\n  export import join = runtime.join\n  export import raw = runtime.raw\n  export import Sql = runtime.Sql\n\n\n\n  /**\n   * Decimal.js\n   */\n  export import Decimal = runtime.Decimal\n\n  export type DecimalJsLike = runtime.DecimalJsLike\n\n  /**\n   * Metrics\n   */\n  export type Metrics = runtime.Metrics\n  export type Metric<T> = runtime.Metric<T>\n  export type MetricHistogram = runtime.MetricHistogram\n  export type MetricHistogramBucket = runtime.MetricHistogramBucket\n\n  /**\n  * Extensions\n  */\n  export import Extension = $Extensions.UserArgs\n  export import getExtensionContext = runtime.Extensions.getExtensionContext\n  export import Args = $Public.Args\n  export import Payload = $Public.Payload\n  export import Result = $Public.Result\n  export import Exact = $Public.Exact\n\n  /**\n   * Prisma Client JS version: local\n   * Query Engine version: local\n   */\n  export type PrismaVersion = {\n    client: string\n  }\n\n  export const prismaVersion: PrismaVersion\n\n  /**\n   * Utility Types\n   */\n\n\n  export import JsonObject = runtime.JsonObject\n  export import JsonArray = runtime.JsonArray\n  export import JsonValue = runtime.JsonValue\n  export import InputJsonObject = runtime.InputJsonObject\n  export import InputJsonArray = runtime.InputJsonArray\n  export import InputJsonValue = runtime.InputJsonValue\n\n  /**\n   * Types of the values used to represent different kinds of `null` values when working with JSON fields.\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  namespace NullTypes {\n    /**\n    * Type of `Prisma.DbNull`.\n    *\n    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.\n    *\n    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n    */\n    class DbNull {\n      private DbNull: never\n      private constructor()\n    }\n\n    /**\n    * Type of `Prisma.JsonNull`.\n    *\n    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.\n    *\n    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n    */\n    class JsonNull {\n      private JsonNull: never\n      private constructor()\n    }\n\n    /**\n    * Type of `Prisma.AnyNull`.\n    *\n    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.\n    *\n    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n    */\n    class AnyNull {\n      private AnyNull: never\n      private constructor()\n    }\n  }\n\n  /**\n   * Helper for filtering JSON entries that have `null` on the database (empty on the db)\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  export const DbNull: NullTypes.DbNull\n\n  /**\n   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  export const JsonNull: NullTypes.JsonNull\n\n  /**\n   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`\n   *\n   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field\n   */\n  export const AnyNull: NullTypes.AnyNull\n\n  type SelectAndInclude = {\n    select: any\n    include: any\n  }\n\n  type SelectAndOmit = {\n    select: any\n    omit: any\n  }\n\n  /**\n   * Get the type of the value, that the Promise holds.\n   */\n  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;\n\n  /**\n   * Get the return type of a function which returns a Promise.\n   */\n  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>\n\n  /**\n   * From T, pick a set of properties whose keys are in the union K\n   */\n  type Prisma__Pick<T, K extends keyof T> = {\n      [P in K]: T[P];\n  };\n\n\n  export type Enumerable<T> = T | Array<T>;\n\n  export type RequiredKeys<T> = {\n    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K\n  }[keyof T]\n\n  export type TruthyKeys<T> = keyof {\n    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K\n  }\n\n  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>\n\n  /**\n   * Subset\n   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection\n   */\n  export type Subset<T, U> = {\n    [key in keyof T]: key extends keyof U ? T[key] : never;\n  };\n\n  /**\n   * SelectSubset\n   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.\n   * Additionally, it validates, if both select and include are present. If the case, it errors.\n   */\n  export type SelectSubset<T, U> = {\n    [key in keyof T]: key extends keyof U ? T[key] : never\n  } &\n    (T extends SelectAndInclude\n      ? 'Please either choose `select` or `include`.'\n      : T extends SelectAndOmit\n        ? 'Please either choose `select` or `omit`.'\n        : {})\n\n  /**\n   * Subset + Intersection\n   * @desc From `T` pick properties that exist in `U` and intersect `K`\n   */\n  export type SubsetIntersection<T, U, K> = {\n    [key in keyof T]: key extends keyof U ? T[key] : never\n  } &\n    K\n\n  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\n\n  /**\n   * XOR is needed to have a real mutually exclusive union type\n   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types\n   */\n  type XOR<T, U> =\n    T extends object ?\n    U extends object ?\n      (Without<T, U> & U) | (Without<U, T> & T)\n    : U : T\n\n\n  /**\n   * Is T a Record?\n   */\n  type IsObject<T extends any> = T extends Array<any>\n  ? False\n  : T extends Date\n  ? False\n  : T extends Uint8Array\n  ? False\n  : T extends BigInt\n  ? False\n  : T extends object\n  ? True\n  : False\n\n\n  /**\n   * If it's T[], return T\n   */\n  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T\n\n  /**\n   * From ts-toolbelt\n   */\n\n  type __Either<O extends object, K extends Key> = Omit<O, K> &\n    {\n      // Merge all but K\n      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities\n    }[K]\n\n  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>\n\n  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>\n\n  type _Either<\n    O extends object,\n    K extends Key,\n    strict extends Boolean\n  > = {\n    1: EitherStrict<O, K>\n    0: EitherLoose<O, K>\n  }[strict]\n\n  type Either<\n    O extends object,\n    K extends Key,\n    strict extends Boolean = 1\n  > = O extends unknown ? _Either<O, K, strict> : never\n\n  export type Union = any\n\n  type PatchUndefined<O extends object, O1 extends object> = {\n    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]\n  } & {}\n\n  /** Helper Types for \"Merge\" **/\n  export type IntersectOf<U extends Union> = (\n    U extends unknown ? (k: U) => void : never\n  ) extends (k: infer I) => void\n    ? I\n    : never\n\n  export type Overwrite<O extends object, O1 extends object> = {\n      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];\n  } & {};\n\n  type _Merge<U extends object> = IntersectOf<Overwrite<U, {\n      [K in keyof U]-?: At<U, K>;\n  }>>;\n\n  type Key = string | number | symbol;\n  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;\n  type AtStrict<O extends object, K extends Key> = O[K & keyof O];\n  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;\n  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {\n      1: AtStrict<O, K>;\n      0: AtLoose<O, K>;\n  }[strict];\n\n  export type ComputeRaw<A extends any> = A extends Function ? A : {\n    [K in keyof A]: A[K];\n  } & {};\n\n  export type OptionalFlat<O> = {\n    [K in keyof O]?: O[K];\n  } & {};\n\n  type _Record<K extends keyof any, T> = {\n    [P in K]: T;\n  };\n\n  // cause typescript not to expand types and preserve names\n  type NoExpand<T> = T extends unknown ? T : never;\n\n  // this type assumes the passed object is entirely optional\n  type AtLeast<O extends object, K extends string> = NoExpand<\n    O extends unknown\n    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)\n      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O\n    : never>;\n\n  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;\n\n  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;\n  /** End Helper Types for \"Merge\" **/\n\n  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;\n\n  /**\n  A [[Boolean]]\n  */\n  export type Boolean = True | False\n\n  // /**\n  // 1\n  // */\n  export type True = 1\n\n  /**\n  0\n  */\n  export type False = 0\n\n  export type Not<B extends Boolean> = {\n    0: 1\n    1: 0\n  }[B]\n\n  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]\n    ? 0 // anything `never` is false\n    : A1 extends A2\n    ? 1\n    : 0\n\n  export type Has<U extends Union, U1 extends Union> = Not<\n    Extends<Exclude<U1, U>, U1>\n  >\n\n  export type Or<B1 extends Boolean, B2 extends Boolean> = {\n    0: {\n      0: 0\n      1: 1\n    }\n    1: {\n      0: 1\n      1: 1\n    }\n  }[B1][B2]\n\n  export type Keys<U extends Union> = U extends unknown ? keyof U : never\n\n  type Cast<A, B> = A extends B ? A : B;\n\n  export const type: unique symbol;\n\n\n\n  /**\n   * Used by group by\n   */\n\n  export type GetScalarType<T, O> = O extends object ? {\n    [P in keyof T]: P extends keyof O\n      ? O[P]\n      : never\n  } : never\n\n  type FieldPaths<\n    T,\n    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>\n  > = IsObject<T> extends True ? U : T\n\n  type GetHavingFields<T> = {\n    [K in keyof T]: Or<\n      Or<Extends<'OR', K>, Extends<'AND', K>>,\n      Extends<'NOT', K>\n    > extends True\n      ? // infer is only needed to not hit TS limit\n        // based on the brilliant idea of Pierre-Antoine Mills\n        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437\n        T[K] extends infer TK\n        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>\n        : never\n      : {} extends FieldPaths<T[K]>\n      ? never\n      : K\n  }[keyof T]\n\n  /**\n   * Convert tuple to union\n   */\n  type _TupleToUnion<T> = T extends (infer E)[] ? E : never\n  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>\n  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T\n\n  /**\n   * Like `Pick`, but additionally can also accept an array of keys\n   */\n  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>\n\n  /**\n   * Exclude all keys with underscores\n   */\n  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T\n\n\n  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>\n\n  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>\n\n\n  export const ModelName: {\n    discussionboard_user: 'discussionboard_user',\n    discussionboard_user_profile: 'discussionboard_user_profile',\n    discussionboard_member: 'discussionboard_member',\n    discussionboard_moderator: 'discussionboard_moderator',\n    discussionboard_admin: 'discussionboard_admin',\n    discussionboard_post: 'discussionboard_post',\n    discussionboard_post_category: 'discussionboard_post_category',\n    discussionboard_post_tag: 'discussionboard_post_tag',\n    discussionboard_post_attachment: 'discussionboard_post_attachment',\n    discussionboard_comments: 'discussionboard_comments',\n    discussionboard_likes: 'discussionboard_likes',\n    discussionboard_reports: 'discussionboard_reports',\n    discussionboard_moderation_action: 'discussionboard_moderation_action',\n    discussionboard_report_review: 'discussionboard_report_review',\n    discussionboard_warning: 'discussionboard_warning',\n    discussionboard_ban: 'discussionboard_ban',\n    discussionboard_notification: 'discussionboard_notification',\n    discussionboard_notification_preference: 'discussionboard_notification_preference',\n    discussionboard_audit_log: 'discussionboard_audit_log',\n    discussionboard_platform_setting: 'discussionboard_platform_setting'\n  };\n\n  export type ModelName = (typeof ModelName)[keyof typeof ModelName]\n\n\n  export type Datasources = {\n    db?: Datasource\n  }\n\n  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {\n    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>\n  }\n\n  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {\n    globalOmitOptions: {\n      omit: GlobalOmitOptions\n    }\n    meta: {\n      modelProps: \"discussionboard_user\" | \"discussionboard_user_profile\" | \"discussionboard_member\" | \"discussionboard_moderator\" | \"discussionboard_admin\" | \"discussionboard_post\" | \"discussionboard_post_category\" | \"discussionboard_post_tag\" | \"discussionboard_post_attachment\" | \"discussionboard_comments\" | \"discussionboard_likes\" | \"discussionboard_reports\" | \"discussionboard_moderation_action\" | \"discussionboard_report_review\" | \"discussionboard_warning\" | \"discussionboard_ban\" | \"discussionboard_notification\" | \"discussionboard_notification_preference\" | \"discussionboard_audit_log\" | \"discussionboard_platform_setting\"\n      txIsolationLevel: Prisma.TransactionIsolationLevel\n    }\n    model: {\n      discussionboard_user: {\n        payload: Prisma.$discussionboard_userPayload<ExtArgs>\n        fields: Prisma.discussionboard_userFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_userFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_userFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_userFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_userFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_userFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_userCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_userCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_userCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_userDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_userUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_userDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_userUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_userUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_userUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_userPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_userAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_user>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_userGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_userGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_userCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_userCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_user_profile: {\n        payload: Prisma.$discussionboard_user_profilePayload<ExtArgs>\n        fields: Prisma.discussionboard_user_profileFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_user_profileFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_user_profileFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_user_profileFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_user_profileFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_user_profileFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_user_profileCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_user_profileCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_user_profileCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_user_profileDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>\n          }\n          update: {\n            args: Prisma.discussionboard_user_profileUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_user_profileDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_user_profileUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_user_profileUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_user_profileUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_user_profilePayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_user_profileAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_user_profile>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_user_profileGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_user_profileGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_user_profileCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_user_profileCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_member: {\n        payload: Prisma.$discussionboard_memberPayload<ExtArgs>\n        fields: Prisma.discussionboard_memberFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_memberFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_memberFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_memberFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_memberFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_memberFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_memberCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_memberCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_memberCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_memberDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_memberUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_memberDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_memberUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_memberUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_memberUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_memberPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_memberAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_member>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_memberGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_memberGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_memberCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_memberCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_moderator: {\n        payload: Prisma.$discussionboard_moderatorPayload<ExtArgs>\n        fields: Prisma.discussionboard_moderatorFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_moderatorFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_moderatorFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_moderatorFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_moderatorFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_moderatorFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_moderatorCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_moderatorCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_moderatorCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_moderatorDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_moderatorUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_moderatorDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_moderatorUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_moderatorUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_moderatorUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderatorPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_moderatorAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_moderator>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_moderatorGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_moderatorGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_moderatorCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_moderatorCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_admin: {\n        payload: Prisma.$discussionboard_adminPayload<ExtArgs>\n        fields: Prisma.discussionboard_adminFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_adminFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_adminFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_adminFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_adminFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_adminFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_adminCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_adminCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_adminCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_adminDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_adminUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_adminDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_adminUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_adminUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_adminUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_adminPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_adminAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_admin>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_adminGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_adminGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_adminCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_adminCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_post: {\n        payload: Prisma.$discussionboard_postPayload<ExtArgs>\n        fields: Prisma.discussionboard_postFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_postFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_postFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_postFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_postFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_postFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_postCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_postCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_postCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_postDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_postUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_postDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_postUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_postUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_postUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_postPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_postAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_post>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_postGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_postGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_postCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_postCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_post_category: {\n        payload: Prisma.$discussionboard_post_categoryPayload<ExtArgs>\n        fields: Prisma.discussionboard_post_categoryFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_post_categoryFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_post_categoryFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_post_categoryFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_post_categoryFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_post_categoryFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_post_categoryCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_post_categoryCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_post_categoryCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_post_categoryDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_post_categoryUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_post_categoryDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_post_categoryUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_post_categoryUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_post_categoryUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_categoryPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_post_categoryAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_post_category>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_post_categoryGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_post_categoryGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_post_categoryCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_post_categoryCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_post_tag: {\n        payload: Prisma.$discussionboard_post_tagPayload<ExtArgs>\n        fields: Prisma.discussionboard_post_tagFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_post_tagFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_post_tagFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_post_tagFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_post_tagFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_post_tagFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_post_tagCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_post_tagCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_post_tagCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_post_tagDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_post_tagUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_post_tagDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_post_tagUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_post_tagUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_post_tagUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_tagPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_post_tagAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_post_tag>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_post_tagGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_post_tagGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_post_tagCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_post_tagCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_post_attachment: {\n        payload: Prisma.$discussionboard_post_attachmentPayload<ExtArgs>\n        fields: Prisma.discussionboard_post_attachmentFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_post_attachmentFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_post_attachmentFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_post_attachmentFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_post_attachmentFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_post_attachmentFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_post_attachmentCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_post_attachmentCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_post_attachmentCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_post_attachmentDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_post_attachmentUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_post_attachmentDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_post_attachmentUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_post_attachmentUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_post_attachmentUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_post_attachmentPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_post_attachmentAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_post_attachment>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_post_attachmentGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_post_attachmentGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_post_attachmentCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_post_attachmentCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_comments: {\n        payload: Prisma.$discussionboard_commentsPayload<ExtArgs>\n        fields: Prisma.discussionboard_commentsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_commentsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_commentsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_commentsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_commentsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_commentsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_commentsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_commentsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_commentsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_commentsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_commentsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_commentsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_commentsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_commentsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_commentsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_commentsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_commentsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_comments>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_commentsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_commentsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_commentsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_commentsCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_likes: {\n        payload: Prisma.$discussionboard_likesPayload<ExtArgs>\n        fields: Prisma.discussionboard_likesFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_likesFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_likesFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_likesFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_likesFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_likesFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_likesCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_likesCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_likesCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_likesDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_likesUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_likesDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_likesUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_likesUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_likesUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_likesPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_likesAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_likes>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_likesGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_likesGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_likesCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_likesCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_reports: {\n        payload: Prisma.$discussionboard_reportsPayload<ExtArgs>\n        fields: Prisma.discussionboard_reportsFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_reportsFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_reportsFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_reportsFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_reportsFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_reportsFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_reportsCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_reportsCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_reportsCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_reportsDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_reportsUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_reportsDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_reportsUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_reportsUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_reportsUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_reportsPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_reportsAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_reports>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_reportsGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_reportsGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_reportsCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_reportsCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_moderation_action: {\n        payload: Prisma.$discussionboard_moderation_actionPayload<ExtArgs>\n        fields: Prisma.discussionboard_moderation_actionFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_moderation_actionFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_moderation_actionFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_moderation_actionFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_moderation_actionFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_moderation_actionFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_moderation_actionCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_moderation_actionCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_moderation_actionCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_moderation_actionDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_moderation_actionUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_moderation_actionDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_moderation_actionUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_moderation_actionUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_moderation_actionUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_moderation_actionPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_moderation_actionAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_moderation_action>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_moderation_actionGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_moderation_actionGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_moderation_actionCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_moderation_actionCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_report_review: {\n        payload: Prisma.$discussionboard_report_reviewPayload<ExtArgs>\n        fields: Prisma.discussionboard_report_reviewFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_report_reviewFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_report_reviewFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_report_reviewFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_report_reviewFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_report_reviewFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_report_reviewCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_report_reviewCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_report_reviewCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_report_reviewDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_report_reviewUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_report_reviewDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_report_reviewUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_report_reviewUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_report_reviewUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_report_reviewPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_report_reviewAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_report_review>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_report_reviewGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_report_reviewGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_report_reviewCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_report_reviewCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_warning: {\n        payload: Prisma.$discussionboard_warningPayload<ExtArgs>\n        fields: Prisma.discussionboard_warningFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_warningFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_warningFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_warningFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_warningFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_warningFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_warningCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_warningCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_warningCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_warningDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_warningUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_warningDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_warningUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_warningUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_warningUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_warningPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_warningAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_warning>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_warningGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_warningGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_warningCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_warningCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_ban: {\n        payload: Prisma.$discussionboard_banPayload<ExtArgs>\n        fields: Prisma.discussionboard_banFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_banFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_banFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_banFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_banFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_banFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_banCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_banCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_banCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_banDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_banUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_banDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_banUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_banUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_banUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_banPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_banAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_ban>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_banGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_banGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_banCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_banCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_notification: {\n        payload: Prisma.$discussionboard_notificationPayload<ExtArgs>\n        fields: Prisma.discussionboard_notificationFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_notificationFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_notificationFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_notificationFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_notificationFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_notificationFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_notificationCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_notificationCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_notificationCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_notificationDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_notificationUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_notificationDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_notificationUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_notificationUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_notificationUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notificationPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_notificationAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_notification>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_notificationGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_notificationGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_notificationCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_notificationCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_notification_preference: {\n        payload: Prisma.$discussionboard_notification_preferencePayload<ExtArgs>\n        fields: Prisma.discussionboard_notification_preferenceFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_notification_preferenceFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_notification_preferenceFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_notification_preferenceFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_notification_preferenceFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_notification_preferenceFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_notification_preferenceCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_notification_preferenceCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_notification_preferenceCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_notification_preferenceDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>\n          }\n          update: {\n            args: Prisma.discussionboard_notification_preferenceUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_notification_preferenceDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_notification_preferenceUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_notification_preferenceUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_notification_preferenceUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_notification_preferencePayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_notification_preferenceAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_notification_preference>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_notification_preferenceGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_notification_preferenceGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_notification_preferenceCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_notification_preferenceCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_audit_log: {\n        payload: Prisma.$discussionboard_audit_logPayload<ExtArgs>\n        fields: Prisma.discussionboard_audit_logFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_audit_logFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_audit_logFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_audit_logFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_audit_logFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_audit_logFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_audit_logCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_audit_logCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_audit_logCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_audit_logDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_audit_logUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_audit_logDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_audit_logUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_audit_logUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_audit_logUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_audit_logPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_audit_logAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_audit_log>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_audit_logGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_audit_logGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_audit_logCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_audit_logCountAggregateOutputType> | number\n          }\n        }\n      }\n      discussionboard_platform_setting: {\n        payload: Prisma.$discussionboard_platform_settingPayload<ExtArgs>\n        fields: Prisma.discussionboard_platform_settingFieldRefs\n        operations: {\n          findUnique: {\n            args: Prisma.discussionboard_platform_settingFindUniqueArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload> | null\n          }\n          findUniqueOrThrow: {\n            args: Prisma.discussionboard_platform_settingFindUniqueOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>\n          }\n          findFirst: {\n            args: Prisma.discussionboard_platform_settingFindFirstArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload> | null\n          }\n          findFirstOrThrow: {\n            args: Prisma.discussionboard_platform_settingFindFirstOrThrowArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>\n          }\n          findMany: {\n            args: Prisma.discussionboard_platform_settingFindManyArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>[]\n          }\n          create: {\n            args: Prisma.discussionboard_platform_settingCreateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>\n          }\n          createMany: {\n            args: Prisma.discussionboard_platform_settingCreateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          createManyAndReturn: {\n            args: Prisma.discussionboard_platform_settingCreateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>[]\n          }\n          delete: {\n            args: Prisma.discussionboard_platform_settingDeleteArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>\n          }\n          update: {\n            args: Prisma.discussionboard_platform_settingUpdateArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>\n          }\n          deleteMany: {\n            args: Prisma.discussionboard_platform_settingDeleteManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateMany: {\n            args: Prisma.discussionboard_platform_settingUpdateManyArgs<ExtArgs>\n            result: BatchPayload\n          }\n          updateManyAndReturn: {\n            args: Prisma.discussionboard_platform_settingUpdateManyAndReturnArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>[]\n          }\n          upsert: {\n            args: Prisma.discussionboard_platform_settingUpsertArgs<ExtArgs>\n            result: $Utils.PayloadToResult<Prisma.$discussionboard_platform_settingPayload>\n          }\n          aggregate: {\n            args: Prisma.Discussionboard_platform_settingAggregateArgs<ExtArgs>\n            result: $Utils.Optional<AggregateDiscussionboard_platform_setting>\n          }\n          groupBy: {\n            args: Prisma.discussionboard_platform_settingGroupByArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_platform_settingGroupByOutputType>[]\n          }\n          count: {\n            args: Prisma.discussionboard_platform_settingCountArgs<ExtArgs>\n            result: $Utils.Optional<Discussionboard_platform_settingCountAggregateOutputType> | number\n          }\n        }\n      }\n    }\n  } & {\n    other: {\n      payload: any\n      operations: {\n        $executeRaw: {\n          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],\n          result: any\n        }\n        $executeRawUnsafe: {\n          args: [query: string, ...values: any[]],\n          result: any\n        }\n        $queryRaw: {\n          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],\n          result: any\n        }\n        $queryRawUnsafe: {\n          args: [query: string, ...values: any[]],\n          result: any\n        }\n      }\n    }\n  }\n  export const defineExtension: $Extensions.ExtendsHook<\"define\", Prisma.TypeMapCb, $Extensions.DefaultArgs>\n  export type DefaultPrismaClient = PrismaClient\n  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'\n  export interface PrismaClientOptions {\n    /**\n     * Overwrites the datasource url from your schema.prisma file\n     */\n    datasources?: Datasources\n    /**\n     * Overwrites the datasource url from your schema.prisma file\n     */\n    datasourceUrl?: string\n    /**\n     * @default \"colorless\"\n     */\n    errorFormat?: ErrorFormat\n    /**\n     * @example\n     * ```\n     * // Defaults to stdout\n     * log: ['query', 'info', 'warn', 'error']\n     * \n     * // Emit as events\n     * log: [\n     *   { emit: 'stdout', level: 'query' },\n     *   { emit: 'stdout', level: 'info' },\n     *   { emit: 'stdout', level: 'warn' }\n     *   { emit: 'stdout', level: 'error' }\n     * ]\n     * ```\n     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).\n     */\n    log?: (LogLevel | LogDefinition)[]\n    /**\n     * The default values for transactionOptions\n     * maxWait ?= 2000\n     * timeout ?= 5000\n     */\n    transactionOptions?: {\n      maxWait?: number\n      timeout?: number\n      isolationLevel?: Prisma.TransactionIsolationLevel\n    }\n    /**\n     * Global configuration for omitting model fields by default.\n     * \n     * @example\n     * ```\n     * const prisma = new PrismaClient({\n     *   omit: {\n     *     user: {\n     *       password: true\n     *     }\n     *   }\n     * })\n     * ```\n     */\n    omit?: Prisma.GlobalOmitConfig\n  }\n  export type GlobalOmitConfig = {\n    discussionboard_user?: discussionboard_userOmit\n    discussionboard_user_profile?: discussionboard_user_profileOmit\n    discussionboard_member?: discussionboard_memberOmit\n    discussionboard_moderator?: discussionboard_moderatorOmit\n    discussionboard_admin?: discussionboard_adminOmit\n    discussionboard_post?: discussionboard_postOmit\n    discussionboard_post_category?: discussionboard_post_categoryOmit\n    discussionboard_post_tag?: discussionboard_post_tagOmit\n    discussionboard_post_attachment?: discussionboard_post_attachmentOmit\n    discussionboard_comments?: discussionboard_commentsOmit\n    discussionboard_likes?: discussionboard_likesOmit\n    discussionboard_reports?: discussionboard_reportsOmit\n    discussionboard_moderation_action?: discussionboard_moderation_actionOmit\n    discussionboard_report_review?: discussionboard_report_reviewOmit\n    discussionboard_warning?: discussionboard_warningOmit\n    discussionboard_ban?: discussionboard_banOmit\n    discussionboard_notification?: discussionboard_notificationOmit\n    discussionboard_notification_preference?: discussionboard_notification_preferenceOmit\n    discussionboard_audit_log?: discussionboard_audit_logOmit\n    discussionboard_platform_setting?: discussionboard_platform_settingOmit\n  }\n\n  /* Types for Logging */\n  export type LogLevel = 'info' | 'query' | 'warn' | 'error'\n  export type LogDefinition = {\n    level: LogLevel\n    emit: 'stdout' | 'event'\n  }\n\n  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never\n  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?\n    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>\n    : never\n\n  export type QueryEvent = {\n    timestamp: Date\n    query: string\n    params: string\n    duration: number\n    target: string\n  }\n\n  export type LogEvent = {\n    timestamp: Date\n    message: string\n    target: string\n  }\n  /* End Types for Logging */\n\n\n  export type PrismaAction =\n    | 'findUnique'\n    | 'findUniqueOrThrow'\n    | 'findMany'\n    | 'findFirst'\n    | 'findFirstOrThrow'\n    | 'create'\n    | 'createMany'\n    | 'createManyAndReturn'\n    | 'update'\n    | 'updateMany'\n    | 'updateManyAndReturn'\n    | 'upsert'\n    | 'delete'\n    | 'deleteMany'\n    | 'executeRaw'\n    | 'queryRaw'\n    | 'aggregate'\n    | 'count'\n    | 'runCommandRaw'\n    | 'findRaw'\n    | 'groupBy'\n\n  /**\n   * These options are being passed into the middleware as \"params\"\n   */\n  export type MiddlewareParams = {\n    model?: ModelName\n    action: PrismaAction\n    args: any\n    dataPath: string[]\n    runInTransaction: boolean\n  }\n\n  /**\n   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation\n   */\n  export type Middleware<T = any> = (\n    params: MiddlewareParams,\n    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,\n  ) => $Utils.JsPromise<T>\n\n  // tested in getLogLevel.test.ts\n  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;\n\n  /**\n   * `PrismaClient` proxy available in interactive transactions.\n   */\n  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>\n\n  export type Datasource = {\n    url?: string\n  }\n\n  /**\n   * Count Types\n   */\n\n\n  /**\n   * Count Type Discussionboard_userCountOutputType\n   */\n\n  export type Discussionboard_userCountOutputType = {\n    discussionboard_comments: number\n    discussionboard_likes: number\n    discussionboard_reports: number\n    discussionboard_moderation_action_of_actor_id: number\n    discussionboard_moderation_action_of_target_user_id: number\n    discussionboard_report_review: number\n    discussionboard_warning_of_issued_by_id: number\n    discussionboard_warning_of_issued_to_id: number\n    discussionboard_ban_of_banned_user_id: number\n    discussionboard_ban_of_banned_by_id: number\n    discussionboard_notification_of_recipient_user_id: number\n    discussionboard_notification_of_actor_user_id: number\n    discussionboard_audit_log_of_actor_user_id: number\n    discussionboard_audit_log_of_target_user_id: number\n  }\n\n  export type Discussionboard_userCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_comments?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_commentsArgs\n    discussionboard_likes?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_likesArgs\n    discussionboard_reports?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_reportsArgs\n    discussionboard_moderation_action_of_actor_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_moderation_action_of_actor_idArgs\n    discussionboard_moderation_action_of_target_user_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_moderation_action_of_target_user_idArgs\n    discussionboard_report_review?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_report_reviewArgs\n    discussionboard_warning_of_issued_by_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_warning_of_issued_by_idArgs\n    discussionboard_warning_of_issued_to_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_warning_of_issued_to_idArgs\n    discussionboard_ban_of_banned_user_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_ban_of_banned_user_idArgs\n    discussionboard_ban_of_banned_by_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_ban_of_banned_by_idArgs\n    discussionboard_notification_of_recipient_user_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_notification_of_recipient_user_idArgs\n    discussionboard_notification_of_actor_user_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_notification_of_actor_user_idArgs\n    discussionboard_audit_log_of_actor_user_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_audit_log_of_actor_user_idArgs\n    discussionboard_audit_log_of_target_user_id?: boolean | Discussionboard_userCountOutputTypeCountDiscussionboard_audit_log_of_target_user_idArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_userCountOutputType\n     */\n    select?: Discussionboard_userCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_likesWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_reportsWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_moderation_action_of_actor_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_moderation_actionWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_moderation_action_of_target_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_moderation_actionWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_report_reviewWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_warning_of_issued_by_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_warningWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_warning_of_issued_to_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_warningWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_ban_of_banned_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_banWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_ban_of_banned_by_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_banWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_notification_of_recipient_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_notificationWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_notification_of_actor_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_notificationWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_audit_log_of_actor_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_audit_logWhereInput\n  }\n\n  /**\n   * Discussionboard_userCountOutputType without action\n   */\n  export type Discussionboard_userCountOutputTypeCountDiscussionboard_audit_log_of_target_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_audit_logWhereInput\n  }\n\n\n  /**\n   * Count Type Discussionboard_memberCountOutputType\n   */\n\n  export type Discussionboard_memberCountOutputType = {\n    discussionboard_post: number\n  }\n\n  export type Discussionboard_memberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_post?: boolean | Discussionboard_memberCountOutputTypeCountDiscussionboard_postArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_memberCountOutputType without action\n   */\n  export type Discussionboard_memberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_memberCountOutputType\n     */\n    select?: Discussionboard_memberCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_memberCountOutputType without action\n   */\n  export type Discussionboard_memberCountOutputTypeCountDiscussionboard_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_postWhereInput\n  }\n\n\n  /**\n   * Count Type Discussionboard_postCountOutputType\n   */\n\n  export type Discussionboard_postCountOutputType = {\n    discussionboard_post_attachment: number\n    discussionboard_comments: number\n    discussionboard_likes: number\n    discussionboard_reports: number\n    discussionboard_moderation_action: number\n    discussionboard_report_review: number\n    discussionboard_warning: number\n    discussionboard_notification: number\n  }\n\n  export type Discussionboard_postCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_post_attachment?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_post_attachmentArgs\n    discussionboard_comments?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_commentsArgs\n    discussionboard_likes?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_likesArgs\n    discussionboard_reports?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_reportsArgs\n    discussionboard_moderation_action?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_moderation_actionArgs\n    discussionboard_report_review?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_report_reviewArgs\n    discussionboard_warning?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_warningArgs\n    discussionboard_notification?: boolean | Discussionboard_postCountOutputTypeCountDiscussionboard_notificationArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_postCountOutputType\n     */\n    select?: Discussionboard_postCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_post_attachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_post_attachmentWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_likesWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_reportsWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_moderation_actionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_moderation_actionWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_report_reviewWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_warningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_warningWhereInput\n  }\n\n  /**\n   * Discussionboard_postCountOutputType without action\n   */\n  export type Discussionboard_postCountOutputTypeCountDiscussionboard_notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_notificationWhereInput\n  }\n\n\n  /**\n   * Count Type Discussionboard_post_categoryCountOutputType\n   */\n\n  export type Discussionboard_post_categoryCountOutputType = {\n    discussionboard_post: number\n  }\n\n  export type Discussionboard_post_categoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_post?: boolean | Discussionboard_post_categoryCountOutputTypeCountDiscussionboard_postArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_post_categoryCountOutputType without action\n   */\n  export type Discussionboard_post_categoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_post_categoryCountOutputType\n     */\n    select?: Discussionboard_post_categoryCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_post_categoryCountOutputType without action\n   */\n  export type Discussionboard_post_categoryCountOutputTypeCountDiscussionboard_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_postWhereInput\n  }\n\n\n  /**\n   * Count Type Discussionboard_commentsCountOutputType\n   */\n\n  export type Discussionboard_commentsCountOutputType = {\n    recursive: number\n    discussionboard_likes: number\n    discussionboard_reports: number\n    discussionboard_moderation_action: number\n    discussionboard_report_review: number\n    discussionboard_warning: number\n    discussionboard_notification: number\n  }\n\n  export type Discussionboard_commentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    recursive?: boolean | Discussionboard_commentsCountOutputTypeCountRecursiveArgs\n    discussionboard_likes?: boolean | Discussionboard_commentsCountOutputTypeCountDiscussionboard_likesArgs\n    discussionboard_reports?: boolean | Discussionboard_commentsCountOutputTypeCountDiscussionboard_reportsArgs\n    discussionboard_moderation_action?: boolean | Discussionboard_commentsCountOutputTypeCountDiscussionboard_moderation_actionArgs\n    discussionboard_report_review?: boolean | Discussionboard_commentsCountOutputTypeCountDiscussionboard_report_reviewArgs\n    discussionboard_warning?: boolean | Discussionboard_commentsCountOutputTypeCountDiscussionboard_warningArgs\n    discussionboard_notification?: boolean | Discussionboard_commentsCountOutputTypeCountDiscussionboard_notificationArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_commentsCountOutputType\n     */\n    select?: Discussionboard_commentsCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountRecursiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountDiscussionboard_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_likesWhereInput\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountDiscussionboard_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_reportsWhereInput\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountDiscussionboard_moderation_actionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_moderation_actionWhereInput\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountDiscussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_report_reviewWhereInput\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountDiscussionboard_warningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_warningWhereInput\n  }\n\n  /**\n   * Discussionboard_commentsCountOutputType without action\n   */\n  export type Discussionboard_commentsCountOutputTypeCountDiscussionboard_notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_notificationWhereInput\n  }\n\n\n  /**\n   * Count Type Discussionboard_reportsCountOutputType\n   */\n\n  export type Discussionboard_reportsCountOutputType = {\n    discussionboard_report_review: number\n  }\n\n  export type Discussionboard_reportsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_report_review?: boolean | Discussionboard_reportsCountOutputTypeCountDiscussionboard_report_reviewArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_reportsCountOutputType without action\n   */\n  export type Discussionboard_reportsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_reportsCountOutputType\n     */\n    select?: Discussionboard_reportsCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_reportsCountOutputType without action\n   */\n  export type Discussionboard_reportsCountOutputTypeCountDiscussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_report_reviewWhereInput\n  }\n\n\n  /**\n   * Count Type Discussionboard_warningCountOutputType\n   */\n\n  export type Discussionboard_warningCountOutputType = {\n    discussionboard_ban: number\n  }\n\n  export type Discussionboard_warningCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_ban?: boolean | Discussionboard_warningCountOutputTypeCountDiscussionboard_banArgs\n  }\n\n  // Custom InputTypes\n  /**\n   * Discussionboard_warningCountOutputType without action\n   */\n  export type Discussionboard_warningCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the Discussionboard_warningCountOutputType\n     */\n    select?: Discussionboard_warningCountOutputTypeSelect<ExtArgs> | null\n  }\n\n  /**\n   * Discussionboard_warningCountOutputType without action\n   */\n  export type Discussionboard_warningCountOutputTypeCountDiscussionboard_banArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_banWhereInput\n  }\n\n\n  /**\n   * Models\n   */\n\n  /**\n   * Model discussionboard_user\n   */\n\n  export type AggregateDiscussionboard_user = {\n    _count: Discussionboard_userCountAggregateOutputType | null\n    _min: Discussionboard_userMinAggregateOutputType | null\n    _max: Discussionboard_userMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_userMinAggregateOutputType = {\n    id: string | null\n    email: string | null\n    password_hash: string | null\n    is_active: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussionboard_userMaxAggregateOutputType = {\n    id: string | null\n    email: string | null\n    password_hash: string | null\n    is_active: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussionboard_userCountAggregateOutputType = {\n    id: number\n    email: number\n    password_hash: number\n    is_active: number\n    created_at: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_userMinAggregateInputType = {\n    id?: true\n    email?: true\n    password_hash?: true\n    is_active?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussionboard_userMaxAggregateInputType = {\n    id?: true\n    email?: true\n    password_hash?: true\n    is_active?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussionboard_userCountAggregateInputType = {\n    id?: true\n    email?: true\n    password_hash?: true\n    is_active?: true\n    created_at?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_user to aggregate.\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_users to fetch.\n     */\n    orderBy?: discussionboard_userOrderByWithRelationInput | discussionboard_userOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_userWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_users\n    **/\n    _count?: true | Discussionboard_userCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_userMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_userMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_userAggregateType<T extends Discussionboard_userAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_user]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_user[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_user[P]>\n  }\n\n\n\n\n  export type discussionboard_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_userWhereInput\n    orderBy?: discussionboard_userOrderByWithAggregationInput | discussionboard_userOrderByWithAggregationInput[]\n    by: Discussionboard_userScalarFieldEnum[] | Discussionboard_userScalarFieldEnum\n    having?: discussionboard_userScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_userCountAggregateInputType | true\n    _min?: Discussionboard_userMinAggregateInputType\n    _max?: Discussionboard_userMaxAggregateInputType\n  }\n\n  export type Discussionboard_userGroupByOutputType = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date\n    updated_at: Date\n    _count: Discussionboard_userCountAggregateOutputType | null\n    _min: Discussionboard_userMinAggregateOutputType | null\n    _max: Discussionboard_userMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_userGroupByPayload<T extends discussionboard_userGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_userGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_userGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_userGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_userGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    is_active?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    discussionboard_user_profile?: boolean | discussionboard_user$discussionboard_user_profileArgs<ExtArgs>\n    discussionboard_member?: boolean | discussionboard_user$discussionboard_memberArgs<ExtArgs>\n    discussionboard_moderator?: boolean | discussionboard_user$discussionboard_moderatorArgs<ExtArgs>\n    discussionboard_admin?: boolean | discussionboard_user$discussionboard_adminArgs<ExtArgs>\n    discussionboard_comments?: boolean | discussionboard_user$discussionboard_commentsArgs<ExtArgs>\n    discussionboard_likes?: boolean | discussionboard_user$discussionboard_likesArgs<ExtArgs>\n    discussionboard_reports?: boolean | discussionboard_user$discussionboard_reportsArgs<ExtArgs>\n    discussionboard_moderation_action_of_actor_id?: boolean | discussionboard_user$discussionboard_moderation_action_of_actor_idArgs<ExtArgs>\n    discussionboard_moderation_action_of_target_user_id?: boolean | discussionboard_user$discussionboard_moderation_action_of_target_user_idArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_user$discussionboard_report_reviewArgs<ExtArgs>\n    discussionboard_warning_of_issued_by_id?: boolean | discussionboard_user$discussionboard_warning_of_issued_by_idArgs<ExtArgs>\n    discussionboard_warning_of_issued_to_id?: boolean | discussionboard_user$discussionboard_warning_of_issued_to_idArgs<ExtArgs>\n    discussionboard_ban_of_banned_user_id?: boolean | discussionboard_user$discussionboard_ban_of_banned_user_idArgs<ExtArgs>\n    discussionboard_ban_of_banned_by_id?: boolean | discussionboard_user$discussionboard_ban_of_banned_by_idArgs<ExtArgs>\n    discussionboard_notification_of_recipient_user_id?: boolean | discussionboard_user$discussionboard_notification_of_recipient_user_idArgs<ExtArgs>\n    discussionboard_notification_of_actor_user_id?: boolean | discussionboard_user$discussionboard_notification_of_actor_user_idArgs<ExtArgs>\n    discussionboard_notification_preference?: boolean | discussionboard_user$discussionboard_notification_preferenceArgs<ExtArgs>\n    discussionboard_audit_log_of_actor_user_id?: boolean | discussionboard_user$discussionboard_audit_log_of_actor_user_idArgs<ExtArgs>\n    discussionboard_audit_log_of_target_user_id?: boolean | discussionboard_user$discussionboard_audit_log_of_target_user_idArgs<ExtArgs>\n    _count?: boolean | Discussionboard_userCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_user\"]>\n\n  export type discussionboard_userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    is_active?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_user\"]>\n\n  export type discussionboard_userSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    is_active?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_user\"]>\n\n  export type discussionboard_userSelectScalar = {\n    id?: boolean\n    email?: boolean\n    password_hash?: boolean\n    is_active?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussionboard_userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"email\" | \"password_hash\" | \"is_active\" | \"created_at\" | \"updated_at\", ExtArgs[\"result\"][\"discussionboard_user\"]>\n  export type discussionboard_userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_user_profile?: boolean | discussionboard_user$discussionboard_user_profileArgs<ExtArgs>\n    discussionboard_member?: boolean | discussionboard_user$discussionboard_memberArgs<ExtArgs>\n    discussionboard_moderator?: boolean | discussionboard_user$discussionboard_moderatorArgs<ExtArgs>\n    discussionboard_admin?: boolean | discussionboard_user$discussionboard_adminArgs<ExtArgs>\n    discussionboard_comments?: boolean | discussionboard_user$discussionboard_commentsArgs<ExtArgs>\n    discussionboard_likes?: boolean | discussionboard_user$discussionboard_likesArgs<ExtArgs>\n    discussionboard_reports?: boolean | discussionboard_user$discussionboard_reportsArgs<ExtArgs>\n    discussionboard_moderation_action_of_actor_id?: boolean | discussionboard_user$discussionboard_moderation_action_of_actor_idArgs<ExtArgs>\n    discussionboard_moderation_action_of_target_user_id?: boolean | discussionboard_user$discussionboard_moderation_action_of_target_user_idArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_user$discussionboard_report_reviewArgs<ExtArgs>\n    discussionboard_warning_of_issued_by_id?: boolean | discussionboard_user$discussionboard_warning_of_issued_by_idArgs<ExtArgs>\n    discussionboard_warning_of_issued_to_id?: boolean | discussionboard_user$discussionboard_warning_of_issued_to_idArgs<ExtArgs>\n    discussionboard_ban_of_banned_user_id?: boolean | discussionboard_user$discussionboard_ban_of_banned_user_idArgs<ExtArgs>\n    discussionboard_ban_of_banned_by_id?: boolean | discussionboard_user$discussionboard_ban_of_banned_by_idArgs<ExtArgs>\n    discussionboard_notification_of_recipient_user_id?: boolean | discussionboard_user$discussionboard_notification_of_recipient_user_idArgs<ExtArgs>\n    discussionboard_notification_of_actor_user_id?: boolean | discussionboard_user$discussionboard_notification_of_actor_user_idArgs<ExtArgs>\n    discussionboard_notification_preference?: boolean | discussionboard_user$discussionboard_notification_preferenceArgs<ExtArgs>\n    discussionboard_audit_log_of_actor_user_id?: boolean | discussionboard_user$discussionboard_audit_log_of_actor_user_idArgs<ExtArgs>\n    discussionboard_audit_log_of_target_user_id?: boolean | discussionboard_user$discussionboard_audit_log_of_target_user_idArgs<ExtArgs>\n    _count?: boolean | Discussionboard_userCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n  export type discussionboard_userIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n\n  export type $discussionboard_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_user\"\n    objects: {\n      discussionboard_user_profile: Prisma.$discussionboard_user_profilePayload<ExtArgs> | null\n      discussionboard_member: Prisma.$discussionboard_memberPayload<ExtArgs> | null\n      discussionboard_moderator: Prisma.$discussionboard_moderatorPayload<ExtArgs> | null\n      discussionboard_admin: Prisma.$discussionboard_adminPayload<ExtArgs> | null\n      discussionboard_comments: Prisma.$discussionboard_commentsPayload<ExtArgs>[]\n      discussionboard_likes: Prisma.$discussionboard_likesPayload<ExtArgs>[]\n      discussionboard_reports: Prisma.$discussionboard_reportsPayload<ExtArgs>[]\n      discussionboard_moderation_action_of_actor_id: Prisma.$discussionboard_moderation_actionPayload<ExtArgs>[]\n      discussionboard_moderation_action_of_target_user_id: Prisma.$discussionboard_moderation_actionPayload<ExtArgs>[]\n      discussionboard_report_review: Prisma.$discussionboard_report_reviewPayload<ExtArgs>[]\n      discussionboard_warning_of_issued_by_id: Prisma.$discussionboard_warningPayload<ExtArgs>[]\n      discussionboard_warning_of_issued_to_id: Prisma.$discussionboard_warningPayload<ExtArgs>[]\n      discussionboard_ban_of_banned_user_id: Prisma.$discussionboard_banPayload<ExtArgs>[]\n      discussionboard_ban_of_banned_by_id: Prisma.$discussionboard_banPayload<ExtArgs>[]\n      discussionboard_notification_of_recipient_user_id: Prisma.$discussionboard_notificationPayload<ExtArgs>[]\n      discussionboard_notification_of_actor_user_id: Prisma.$discussionboard_notificationPayload<ExtArgs>[]\n      discussionboard_notification_preference: Prisma.$discussionboard_notification_preferencePayload<ExtArgs> | null\n      discussionboard_audit_log_of_actor_user_id: Prisma.$discussionboard_audit_logPayload<ExtArgs>[]\n      discussionboard_audit_log_of_target_user_id: Prisma.$discussionboard_audit_logPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Globally unique identifier for the user. Implements the requirements for traceable, referential user identity across all core tables (see 02_discussionboard_functional_requirements.md). 3NF enforced as surrogate key. For example, all foreign key relationships use this for core user reference.\n       */\n      id: string\n      /**\n       * [Authentication Email] - Implements unique login credential per user requirement. Business meaning: Used for login, notifications, and password recovery. Ensures normalization by existing only on user root entity and not duplicated elsewhere. Enforced unique constraint. E.g., user login process.\n       */\n      email: string\n      /**\n       * [Password Hash] - Securely stores password hash for authentication workflow per 02_discussionboard_functional_requirements.md. Ensures separation from credential-independent profile info. Used for login verification.\n       */\n      password_hash: string\n      /**\n       * [Active Status] - Tracks whether the user account is enabled or deactivated (requirement: Admin can deactivate). Normalization: not duplicated elsewhere. For account suspension procedures.\n       */\n      is_active: boolean\n      /**\n       * [Creation Timestamp] - When user joined. Required for audit and analytics (see success criteria in 01_discussionboard_overview_and_scope.md). Used in user growth/activation KPIs.\n       */\n      created_at: Date\n      /**\n       * [Last Update Timestamp] - Business: Audit and admin review. Ensures clean separation—no transitive dependency.\n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_user\"]>\n    composites: {}\n  }\n\n  type discussionboard_userGetPayload<S extends boolean | null | undefined | discussionboard_userDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_userPayload, S>\n\n  type discussionboard_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_userCountAggregateInputType | true\n    }\n\n  export interface discussionboard_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_user'], meta: { name: 'discussionboard_user' } }\n    /**\n     * Find zero or one Discussionboard_user that matches the filter.\n     * @param {discussionboard_userFindUniqueArgs} args - Arguments to find a Discussionboard_user\n     * @example\n     * // Get one Discussionboard_user\n     * const discussionboard_user = await prisma.discussionboard_user.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_userFindUniqueArgs>(args: SelectSubset<T, discussionboard_userFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_user that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_userFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_user\n     * @example\n     * // Get one Discussionboard_user\n     * const discussionboard_user = await prisma.discussionboard_user.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_userFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_user that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_userFindFirstArgs} args - Arguments to find a Discussionboard_user\n     * @example\n     * // Get one Discussionboard_user\n     * const discussionboard_user = await prisma.discussionboard_user.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_userFindFirstArgs>(args?: SelectSubset<T, discussionboard_userFindFirstArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_user that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_userFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_user\n     * @example\n     * // Get one Discussionboard_user\n     * const discussionboard_user = await prisma.discussionboard_user.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_userFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_users that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_userFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_users\n     * const discussionboard_users = await prisma.discussionboard_user.findMany()\n     * \n     * // Get first 10 Discussionboard_users\n     * const discussionboard_users = await prisma.discussionboard_user.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_userWithIdOnly = await prisma.discussionboard_user.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_userFindManyArgs>(args?: SelectSubset<T, discussionboard_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_user.\n     * @param {discussionboard_userCreateArgs} args - Arguments to create a Discussionboard_user.\n     * @example\n     * // Create one Discussionboard_user\n     * const Discussionboard_user = await prisma.discussionboard_user.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_user\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_userCreateArgs>(args: SelectSubset<T, discussionboard_userCreateArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_users.\n     * @param {discussionboard_userCreateManyArgs} args - Arguments to create many Discussionboard_users.\n     * @example\n     * // Create many Discussionboard_users\n     * const discussionboard_user = await prisma.discussionboard_user.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_userCreateManyArgs>(args?: SelectSubset<T, discussionboard_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_users and returns the data saved in the database.\n     * @param {discussionboard_userCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_users.\n     * @example\n     * // Create many Discussionboard_users\n     * const discussionboard_user = await prisma.discussionboard_user.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_users and only return the `id`\n     * const discussionboard_userWithIdOnly = await prisma.discussionboard_user.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_userCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_user.\n     * @param {discussionboard_userDeleteArgs} args - Arguments to delete one Discussionboard_user.\n     * @example\n     * // Delete one Discussionboard_user\n     * const Discussionboard_user = await prisma.discussionboard_user.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_user\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_userDeleteArgs>(args: SelectSubset<T, discussionboard_userDeleteArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_user.\n     * @param {discussionboard_userUpdateArgs} args - Arguments to update one Discussionboard_user.\n     * @example\n     * // Update one Discussionboard_user\n     * const discussionboard_user = await prisma.discussionboard_user.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_userUpdateArgs>(args: SelectSubset<T, discussionboard_userUpdateArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_users.\n     * @param {discussionboard_userDeleteManyArgs} args - Arguments to filter Discussionboard_users to delete.\n     * @example\n     * // Delete a few Discussionboard_users\n     * const { count } = await prisma.discussionboard_user.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_userDeleteManyArgs>(args?: SelectSubset<T, discussionboard_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_userUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_users\n     * const discussionboard_user = await prisma.discussionboard_user.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_userUpdateManyArgs>(args: SelectSubset<T, discussionboard_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_users and returns the data updated in the database.\n     * @param {discussionboard_userUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_users.\n     * @example\n     * // Update many Discussionboard_users\n     * const discussionboard_user = await prisma.discussionboard_user.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_users and only return the `id`\n     * const discussionboard_userWithIdOnly = await prisma.discussionboard_user.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_userUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_userUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_user.\n     * @param {discussionboard_userUpsertArgs} args - Arguments to update or create a Discussionboard_user.\n     * @example\n     * // Update or create a Discussionboard_user\n     * const discussionboard_user = await prisma.discussionboard_user.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_user\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_user we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_userUpsertArgs>(args: SelectSubset<T, discussionboard_userUpsertArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_users.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_userCountArgs} args - Arguments to filter Discussionboard_users to count.\n     * @example\n     * // Count the number of Discussionboard_users\n     * const count = await prisma.discussionboard_user.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_users we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_userCountArgs>(\n      args?: Subset<T, discussionboard_userCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_userCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_user.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_userAggregateArgs>(args: Subset<T, Discussionboard_userAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_userAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_user.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_userGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_userGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_userGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_userGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_user model\n   */\n  readonly fields: discussionboard_userFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_user.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    discussionboard_user_profile<T extends discussionboard_user$discussionboard_user_profileArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_user_profileArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_member<T extends discussionboard_user$discussionboard_memberArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_memberArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_moderator<T extends discussionboard_user$discussionboard_moderatorArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_moderatorArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_admin<T extends discussionboard_user$discussionboard_adminArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_adminArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_comments<T extends discussionboard_user$discussionboard_commentsArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_likes<T extends discussionboard_user$discussionboard_likesArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_reports<T extends discussionboard_user$discussionboard_reportsArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_moderation_action_of_actor_id<T extends discussionboard_user$discussionboard_moderation_action_of_actor_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_moderation_action_of_actor_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_moderation_action_of_target_user_id<T extends discussionboard_user$discussionboard_moderation_action_of_target_user_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_moderation_action_of_target_user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_report_review<T extends discussionboard_user$discussionboard_report_reviewArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_report_reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_warning_of_issued_by_id<T extends discussionboard_user$discussionboard_warning_of_issued_by_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_warning_of_issued_by_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_warning_of_issued_to_id<T extends discussionboard_user$discussionboard_warning_of_issued_to_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_warning_of_issued_to_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_ban_of_banned_user_id<T extends discussionboard_user$discussionboard_ban_of_banned_user_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_ban_of_banned_user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_ban_of_banned_by_id<T extends discussionboard_user$discussionboard_ban_of_banned_by_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_ban_of_banned_by_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_notification_of_recipient_user_id<T extends discussionboard_user$discussionboard_notification_of_recipient_user_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_notification_of_recipient_user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_notification_of_actor_user_id<T extends discussionboard_user$discussionboard_notification_of_actor_user_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_notification_of_actor_user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_notification_preference<T extends discussionboard_user$discussionboard_notification_preferenceArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_notification_preferenceArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_audit_log_of_actor_user_id<T extends discussionboard_user$discussionboard_audit_log_of_actor_user_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_audit_log_of_actor_user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_audit_log_of_target_user_id<T extends discussionboard_user$discussionboard_audit_log_of_target_user_idArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_user$discussionboard_audit_log_of_target_user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_user model\n   */\n  interface discussionboard_userFieldRefs {\n    readonly id: FieldRef<\"discussionboard_user\", 'String'>\n    readonly email: FieldRef<\"discussionboard_user\", 'String'>\n    readonly password_hash: FieldRef<\"discussionboard_user\", 'String'>\n    readonly is_active: FieldRef<\"discussionboard_user\", 'Boolean'>\n    readonly created_at: FieldRef<\"discussionboard_user\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussionboard_user\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_user findUnique\n   */\n  export type discussionboard_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user to fetch.\n     */\n    where: discussionboard_userWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user findUniqueOrThrow\n   */\n  export type discussionboard_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user to fetch.\n     */\n    where: discussionboard_userWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user findFirst\n   */\n  export type discussionboard_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user to fetch.\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_users to fetch.\n     */\n    orderBy?: discussionboard_userOrderByWithRelationInput | discussionboard_userOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_users.\n     */\n    cursor?: discussionboard_userWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_users.\n     */\n    distinct?: Discussionboard_userScalarFieldEnum | Discussionboard_userScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user findFirstOrThrow\n   */\n  export type discussionboard_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user to fetch.\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_users to fetch.\n     */\n    orderBy?: discussionboard_userOrderByWithRelationInput | discussionboard_userOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_users.\n     */\n    cursor?: discussionboard_userWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_users.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_users.\n     */\n    distinct?: Discussionboard_userScalarFieldEnum | Discussionboard_userScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user findMany\n   */\n  export type discussionboard_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_users to fetch.\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_users to fetch.\n     */\n    orderBy?: discussionboard_userOrderByWithRelationInput | discussionboard_userOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_users.\n     */\n    cursor?: discussionboard_userWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_users from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_users.\n     */\n    skip?: number\n    distinct?: Discussionboard_userScalarFieldEnum | Discussionboard_userScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user create\n   */\n  export type discussionboard_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_user.\n     */\n    data: XOR<discussionboard_userCreateInput, discussionboard_userUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_user createMany\n   */\n  export type discussionboard_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_users.\n     */\n    data: discussionboard_userCreateManyInput | discussionboard_userCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_user createManyAndReturn\n   */\n  export type discussionboard_userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_users.\n     */\n    data: discussionboard_userCreateManyInput | discussionboard_userCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_user update\n   */\n  export type discussionboard_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_user.\n     */\n    data: XOR<discussionboard_userUpdateInput, discussionboard_userUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_user to update.\n     */\n    where: discussionboard_userWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user updateMany\n   */\n  export type discussionboard_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_users.\n     */\n    data: XOR<discussionboard_userUpdateManyMutationInput, discussionboard_userUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_users to update\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * Limit how many discussionboard_users to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_user updateManyAndReturn\n   */\n  export type discussionboard_userUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_users.\n     */\n    data: XOR<discussionboard_userUpdateManyMutationInput, discussionboard_userUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_users to update\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * Limit how many discussionboard_users to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_user upsert\n   */\n  export type discussionboard_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_user to update in case it exists.\n     */\n    where: discussionboard_userWhereUniqueInput\n    /**\n     * In case the discussionboard_user found by the `where` argument doesn't exist, create a new discussionboard_user with this data.\n     */\n    create: XOR<discussionboard_userCreateInput, discussionboard_userUncheckedCreateInput>\n    /**\n     * In case the discussionboard_user was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_userUpdateInput, discussionboard_userUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_user delete\n   */\n  export type discussionboard_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_user to delete.\n     */\n    where: discussionboard_userWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user deleteMany\n   */\n  export type discussionboard_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_users to delete\n     */\n    where?: discussionboard_userWhereInput\n    /**\n     * Limit how many discussionboard_users to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_user.discussionboard_user_profile\n   */\n  export type discussionboard_user$discussionboard_user_profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    where?: discussionboard_user_profileWhereInput\n  }\n\n  /**\n   * discussionboard_user.discussionboard_member\n   */\n  export type discussionboard_user$discussionboard_memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    where?: discussionboard_memberWhereInput\n  }\n\n  /**\n   * discussionboard_user.discussionboard_moderator\n   */\n  export type discussionboard_user$discussionboard_moderatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    where?: discussionboard_moderatorWhereInput\n  }\n\n  /**\n   * discussionboard_user.discussionboard_admin\n   */\n  export type discussionboard_user$discussionboard_adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    where?: discussionboard_adminWhereInput\n  }\n\n  /**\n   * discussionboard_user.discussionboard_comments\n   */\n  export type discussionboard_user$discussionboard_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    cursor?: discussionboard_commentsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_commentsScalarFieldEnum | Discussionboard_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_likes\n   */\n  export type discussionboard_user$discussionboard_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    where?: discussionboard_likesWhereInput\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    cursor?: discussionboard_likesWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_likesScalarFieldEnum | Discussionboard_likesScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_reports\n   */\n  export type discussionboard_user$discussionboard_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    where?: discussionboard_reportsWhereInput\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    cursor?: discussionboard_reportsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_reportsScalarFieldEnum | Discussionboard_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_moderation_action_of_actor_id\n   */\n  export type discussionboard_user$discussionboard_moderation_action_of_actor_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    where?: discussionboard_moderation_actionWhereInput\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_moderation_action_of_target_user_id\n   */\n  export type discussionboard_user$discussionboard_moderation_action_of_target_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    where?: discussionboard_moderation_actionWhereInput\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_report_review\n   */\n  export type discussionboard_user$discussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    where?: discussionboard_report_reviewWhereInput\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_warning_of_issued_by_id\n   */\n  export type discussionboard_user$discussionboard_warning_of_issued_by_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    where?: discussionboard_warningWhereInput\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    cursor?: discussionboard_warningWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_warning_of_issued_to_id\n   */\n  export type discussionboard_user$discussionboard_warning_of_issued_to_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    where?: discussionboard_warningWhereInput\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    cursor?: discussionboard_warningWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_ban_of_banned_user_id\n   */\n  export type discussionboard_user$discussionboard_ban_of_banned_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    where?: discussionboard_banWhereInput\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    cursor?: discussionboard_banWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_banScalarFieldEnum | Discussionboard_banScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_ban_of_banned_by_id\n   */\n  export type discussionboard_user$discussionboard_ban_of_banned_by_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    where?: discussionboard_banWhereInput\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    cursor?: discussionboard_banWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_banScalarFieldEnum | Discussionboard_banScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_notification_of_recipient_user_id\n   */\n  export type discussionboard_user$discussionboard_notification_of_recipient_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    where?: discussionboard_notificationWhereInput\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    cursor?: discussionboard_notificationWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_notification_of_actor_user_id\n   */\n  export type discussionboard_user$discussionboard_notification_of_actor_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    where?: discussionboard_notificationWhereInput\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    cursor?: discussionboard_notificationWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_notification_preference\n   */\n  export type discussionboard_user$discussionboard_notification_preferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    where?: discussionboard_notification_preferenceWhereInput\n  }\n\n  /**\n   * discussionboard_user.discussionboard_audit_log_of_actor_user_id\n   */\n  export type discussionboard_user$discussionboard_audit_log_of_actor_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    where?: discussionboard_audit_logWhereInput\n    orderBy?: discussionboard_audit_logOrderByWithRelationInput | discussionboard_audit_logOrderByWithRelationInput[]\n    cursor?: discussionboard_audit_logWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_audit_logScalarFieldEnum | Discussionboard_audit_logScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user.discussionboard_audit_log_of_target_user_id\n   */\n  export type discussionboard_user$discussionboard_audit_log_of_target_user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    where?: discussionboard_audit_logWhereInput\n    orderBy?: discussionboard_audit_logOrderByWithRelationInput | discussionboard_audit_logOrderByWithRelationInput[]\n    cursor?: discussionboard_audit_logWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_audit_logScalarFieldEnum | Discussionboard_audit_logScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user without action\n   */\n  export type discussionboard_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_user_profile\n   */\n\n  export type AggregateDiscussionboard_user_profile = {\n    _count: Discussionboard_user_profileCountAggregateOutputType | null\n    _min: Discussionboard_user_profileMinAggregateOutputType | null\n    _max: Discussionboard_user_profileMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_user_profileMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    display_name: string | null\n    avatar_url: string | null\n    bio: string | null\n  }\n\n  export type Discussionboard_user_profileMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    display_name: string | null\n    avatar_url: string | null\n    bio: string | null\n  }\n\n  export type Discussionboard_user_profileCountAggregateOutputType = {\n    id: number\n    user_id: number\n    display_name: number\n    avatar_url: number\n    bio: number\n    _all: number\n  }\n\n\n  export type Discussionboard_user_profileMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    display_name?: true\n    avatar_url?: true\n    bio?: true\n  }\n\n  export type Discussionboard_user_profileMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    display_name?: true\n    avatar_url?: true\n    bio?: true\n  }\n\n  export type Discussionboard_user_profileCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    display_name?: true\n    avatar_url?: true\n    bio?: true\n    _all?: true\n  }\n\n  export type Discussionboard_user_profileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_user_profile to aggregate.\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_user_profiles to fetch.\n     */\n    orderBy?: discussionboard_user_profileOrderByWithRelationInput | discussionboard_user_profileOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_user_profileWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_user_profiles from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_user_profiles.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_user_profiles\n    **/\n    _count?: true | Discussionboard_user_profileCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_user_profileMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_user_profileMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_user_profileAggregateType<T extends Discussionboard_user_profileAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_user_profile]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_user_profile[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_user_profile[P]>\n  }\n\n\n\n\n  export type discussionboard_user_profileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_user_profileWhereInput\n    orderBy?: discussionboard_user_profileOrderByWithAggregationInput | discussionboard_user_profileOrderByWithAggregationInput[]\n    by: Discussionboard_user_profileScalarFieldEnum[] | Discussionboard_user_profileScalarFieldEnum\n    having?: discussionboard_user_profileScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_user_profileCountAggregateInputType | true\n    _min?: Discussionboard_user_profileMinAggregateInputType\n    _max?: Discussionboard_user_profileMaxAggregateInputType\n  }\n\n  export type Discussionboard_user_profileGroupByOutputType = {\n    id: string\n    user_id: string\n    display_name: string\n    avatar_url: string | null\n    bio: string | null\n    _count: Discussionboard_user_profileCountAggregateOutputType | null\n    _min: Discussionboard_user_profileMinAggregateOutputType | null\n    _max: Discussionboard_user_profileMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_user_profileGroupByPayload<T extends discussionboard_user_profileGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_user_profileGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_user_profileGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_user_profileGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_user_profileGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_user_profileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    display_name?: boolean\n    avatar_url?: boolean\n    bio?: boolean\n    user_profile_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_user_profile\"]>\n\n  export type discussionboard_user_profileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    display_name?: boolean\n    avatar_url?: boolean\n    bio?: boolean\n    user_profile_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_user_profile\"]>\n\n  export type discussionboard_user_profileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    display_name?: boolean\n    avatar_url?: boolean\n    bio?: boolean\n    user_profile_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_user_profile\"]>\n\n  export type discussionboard_user_profileSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    display_name?: boolean\n    avatar_url?: boolean\n    bio?: boolean\n  }\n\n  export type discussionboard_user_profileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"display_name\" | \"avatar_url\" | \"bio\", ExtArgs[\"result\"][\"discussionboard_user_profile\"]>\n  export type discussionboard_user_profileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user_profile_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_user_profileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user_profile_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_user_profileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user_profile_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_user_profilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_user_profile\"\n    objects: {\n      user_profile_user_id: Prisma.$discussionboard_userPayload<ExtArgs>\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Globally unique identifier for the profile. Surrogate key for normalization. Ensures all profile retrieval and modifications are auditable.\n       */\n      id: string\n      /**\n       * [Foreign Key: discussionboard_user] - User this profile belongs to. Implements 1:1 user-profile relationship (requirement: one profile per account, never duplicated). Enforces normalization. E.g., to get profile when showing post author.\n       */\n      user_id: string\n      /**\n       * [Display Name] - User's chosen name, shown publicly on posts/comments. Not used for authentication. Maintains 3NF by separating identity from credential tables. E.g., 'JohnDoe'.\n       */\n      display_name: string\n      /**\n       * [Avatar Image] - Optional user image link. Not duplicated anywhere. Maintains normalized structure. Used on post lists/user bios.\n       */\n      avatar_url: string | null\n      /**\n       * [User Bio] - Self-description or background, used on profiles/mouseover displays. Normalization: No business logic outside of display.\n       */\n      bio: string | null\n    }, ExtArgs[\"result\"][\"discussionboard_user_profile\"]>\n    composites: {}\n  }\n\n  type discussionboard_user_profileGetPayload<S extends boolean | null | undefined | discussionboard_user_profileDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_user_profilePayload, S>\n\n  type discussionboard_user_profileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_user_profileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_user_profileCountAggregateInputType | true\n    }\n\n  export interface discussionboard_user_profileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_user_profile'], meta: { name: 'discussionboard_user_profile' } }\n    /**\n     * Find zero or one Discussionboard_user_profile that matches the filter.\n     * @param {discussionboard_user_profileFindUniqueArgs} args - Arguments to find a Discussionboard_user_profile\n     * @example\n     * // Get one Discussionboard_user_profile\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_user_profileFindUniqueArgs>(args: SelectSubset<T, discussionboard_user_profileFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_user_profile that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_user_profileFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_user_profile\n     * @example\n     * // Get one Discussionboard_user_profile\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_user_profileFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_user_profileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_user_profile that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_user_profileFindFirstArgs} args - Arguments to find a Discussionboard_user_profile\n     * @example\n     * // Get one Discussionboard_user_profile\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_user_profileFindFirstArgs>(args?: SelectSubset<T, discussionboard_user_profileFindFirstArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_user_profile that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_user_profileFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_user_profile\n     * @example\n     * // Get one Discussionboard_user_profile\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_user_profileFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_user_profileFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_user_profiles that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_user_profileFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_user_profiles\n     * const discussionboard_user_profiles = await prisma.discussionboard_user_profile.findMany()\n     * \n     * // Get first 10 Discussionboard_user_profiles\n     * const discussionboard_user_profiles = await prisma.discussionboard_user_profile.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_user_profileWithIdOnly = await prisma.discussionboard_user_profile.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_user_profileFindManyArgs>(args?: SelectSubset<T, discussionboard_user_profileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_user_profile.\n     * @param {discussionboard_user_profileCreateArgs} args - Arguments to create a Discussionboard_user_profile.\n     * @example\n     * // Create one Discussionboard_user_profile\n     * const Discussionboard_user_profile = await prisma.discussionboard_user_profile.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_user_profile\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_user_profileCreateArgs>(args: SelectSubset<T, discussionboard_user_profileCreateArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_user_profiles.\n     * @param {discussionboard_user_profileCreateManyArgs} args - Arguments to create many Discussionboard_user_profiles.\n     * @example\n     * // Create many Discussionboard_user_profiles\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_user_profileCreateManyArgs>(args?: SelectSubset<T, discussionboard_user_profileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_user_profiles and returns the data saved in the database.\n     * @param {discussionboard_user_profileCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_user_profiles.\n     * @example\n     * // Create many Discussionboard_user_profiles\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_user_profiles and only return the `id`\n     * const discussionboard_user_profileWithIdOnly = await prisma.discussionboard_user_profile.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_user_profileCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_user_profileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_user_profile.\n     * @param {discussionboard_user_profileDeleteArgs} args - Arguments to delete one Discussionboard_user_profile.\n     * @example\n     * // Delete one Discussionboard_user_profile\n     * const Discussionboard_user_profile = await prisma.discussionboard_user_profile.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_user_profile\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_user_profileDeleteArgs>(args: SelectSubset<T, discussionboard_user_profileDeleteArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_user_profile.\n     * @param {discussionboard_user_profileUpdateArgs} args - Arguments to update one Discussionboard_user_profile.\n     * @example\n     * // Update one Discussionboard_user_profile\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_user_profileUpdateArgs>(args: SelectSubset<T, discussionboard_user_profileUpdateArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_user_profiles.\n     * @param {discussionboard_user_profileDeleteManyArgs} args - Arguments to filter Discussionboard_user_profiles to delete.\n     * @example\n     * // Delete a few Discussionboard_user_profiles\n     * const { count } = await prisma.discussionboard_user_profile.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_user_profileDeleteManyArgs>(args?: SelectSubset<T, discussionboard_user_profileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_user_profiles.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_user_profileUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_user_profiles\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_user_profileUpdateManyArgs>(args: SelectSubset<T, discussionboard_user_profileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_user_profiles and returns the data updated in the database.\n     * @param {discussionboard_user_profileUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_user_profiles.\n     * @example\n     * // Update many Discussionboard_user_profiles\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_user_profiles and only return the `id`\n     * const discussionboard_user_profileWithIdOnly = await prisma.discussionboard_user_profile.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_user_profileUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_user_profileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_user_profile.\n     * @param {discussionboard_user_profileUpsertArgs} args - Arguments to update or create a Discussionboard_user_profile.\n     * @example\n     * // Update or create a Discussionboard_user_profile\n     * const discussionboard_user_profile = await prisma.discussionboard_user_profile.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_user_profile\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_user_profile we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_user_profileUpsertArgs>(args: SelectSubset<T, discussionboard_user_profileUpsertArgs<ExtArgs>>): Prisma__discussionboard_user_profileClient<$Result.GetResult<Prisma.$discussionboard_user_profilePayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_user_profiles.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_user_profileCountArgs} args - Arguments to filter Discussionboard_user_profiles to count.\n     * @example\n     * // Count the number of Discussionboard_user_profiles\n     * const count = await prisma.discussionboard_user_profile.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_user_profiles we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_user_profileCountArgs>(\n      args?: Subset<T, discussionboard_user_profileCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_user_profileCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_user_profile.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_user_profileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_user_profileAggregateArgs>(args: Subset<T, Discussionboard_user_profileAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_user_profileAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_user_profile.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_user_profileGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_user_profileGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_user_profileGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_user_profileGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_user_profileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_user_profileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_user_profile model\n   */\n  readonly fields: discussionboard_user_profileFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_user_profile.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_user_profileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user_profile_user_id<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_user_profile model\n   */\n  interface discussionboard_user_profileFieldRefs {\n    readonly id: FieldRef<\"discussionboard_user_profile\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_user_profile\", 'String'>\n    readonly display_name: FieldRef<\"discussionboard_user_profile\", 'String'>\n    readonly avatar_url: FieldRef<\"discussionboard_user_profile\", 'String'>\n    readonly bio: FieldRef<\"discussionboard_user_profile\", 'String'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_user_profile findUnique\n   */\n  export type discussionboard_user_profileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user_profile to fetch.\n     */\n    where: discussionboard_user_profileWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user_profile findUniqueOrThrow\n   */\n  export type discussionboard_user_profileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user_profile to fetch.\n     */\n    where: discussionboard_user_profileWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user_profile findFirst\n   */\n  export type discussionboard_user_profileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user_profile to fetch.\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_user_profiles to fetch.\n     */\n    orderBy?: discussionboard_user_profileOrderByWithRelationInput | discussionboard_user_profileOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_user_profiles.\n     */\n    cursor?: discussionboard_user_profileWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_user_profiles from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_user_profiles.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_user_profiles.\n     */\n    distinct?: Discussionboard_user_profileScalarFieldEnum | Discussionboard_user_profileScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user_profile findFirstOrThrow\n   */\n  export type discussionboard_user_profileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user_profile to fetch.\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_user_profiles to fetch.\n     */\n    orderBy?: discussionboard_user_profileOrderByWithRelationInput | discussionboard_user_profileOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_user_profiles.\n     */\n    cursor?: discussionboard_user_profileWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_user_profiles from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_user_profiles.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_user_profiles.\n     */\n    distinct?: Discussionboard_user_profileScalarFieldEnum | Discussionboard_user_profileScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user_profile findMany\n   */\n  export type discussionboard_user_profileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_user_profiles to fetch.\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_user_profiles to fetch.\n     */\n    orderBy?: discussionboard_user_profileOrderByWithRelationInput | discussionboard_user_profileOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_user_profiles.\n     */\n    cursor?: discussionboard_user_profileWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_user_profiles from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_user_profiles.\n     */\n    skip?: number\n    distinct?: Discussionboard_user_profileScalarFieldEnum | Discussionboard_user_profileScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_user_profile create\n   */\n  export type discussionboard_user_profileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_user_profile.\n     */\n    data: XOR<discussionboard_user_profileCreateInput, discussionboard_user_profileUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_user_profile createMany\n   */\n  export type discussionboard_user_profileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_user_profiles.\n     */\n    data: discussionboard_user_profileCreateManyInput | discussionboard_user_profileCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_user_profile createManyAndReturn\n   */\n  export type discussionboard_user_profileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_user_profiles.\n     */\n    data: discussionboard_user_profileCreateManyInput | discussionboard_user_profileCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_user_profile update\n   */\n  export type discussionboard_user_profileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_user_profile.\n     */\n    data: XOR<discussionboard_user_profileUpdateInput, discussionboard_user_profileUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_user_profile to update.\n     */\n    where: discussionboard_user_profileWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user_profile updateMany\n   */\n  export type discussionboard_user_profileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_user_profiles.\n     */\n    data: XOR<discussionboard_user_profileUpdateManyMutationInput, discussionboard_user_profileUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_user_profiles to update\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * Limit how many discussionboard_user_profiles to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_user_profile updateManyAndReturn\n   */\n  export type discussionboard_user_profileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_user_profiles.\n     */\n    data: XOR<discussionboard_user_profileUpdateManyMutationInput, discussionboard_user_profileUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_user_profiles to update\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * Limit how many discussionboard_user_profiles to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_user_profile upsert\n   */\n  export type discussionboard_user_profileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_user_profile to update in case it exists.\n     */\n    where: discussionboard_user_profileWhereUniqueInput\n    /**\n     * In case the discussionboard_user_profile found by the `where` argument doesn't exist, create a new discussionboard_user_profile with this data.\n     */\n    create: XOR<discussionboard_user_profileCreateInput, discussionboard_user_profileUncheckedCreateInput>\n    /**\n     * In case the discussionboard_user_profile was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_user_profileUpdateInput, discussionboard_user_profileUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_user_profile delete\n   */\n  export type discussionboard_user_profileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_user_profile to delete.\n     */\n    where: discussionboard_user_profileWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_user_profile deleteMany\n   */\n  export type discussionboard_user_profileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_user_profiles to delete\n     */\n    where?: discussionboard_user_profileWhereInput\n    /**\n     * Limit how many discussionboard_user_profiles to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_user_profile without action\n   */\n  export type discussionboard_user_profileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user_profile\n     */\n    select?: discussionboard_user_profileSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user_profile\n     */\n    omit?: discussionboard_user_profileOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_user_profileInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_member\n   */\n\n  export type AggregateDiscussionboard_member = {\n    _count: Discussionboard_memberCountAggregateOutputType | null\n    _min: Discussionboard_memberMinAggregateOutputType | null\n    _max: Discussionboard_memberMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_memberMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    granted_at: Date | null\n  }\n\n  export type Discussionboard_memberMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    granted_at: Date | null\n  }\n\n  export type Discussionboard_memberCountAggregateOutputType = {\n    id: number\n    user_id: number\n    granted_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_memberMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    granted_at?: true\n  }\n\n  export type Discussionboard_memberMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    granted_at?: true\n  }\n\n  export type Discussionboard_memberCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    granted_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_memberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_member to aggregate.\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_members to fetch.\n     */\n    orderBy?: discussionboard_memberOrderByWithRelationInput | discussionboard_memberOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_memberWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_members from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_members.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_members\n    **/\n    _count?: true | Discussionboard_memberCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_memberMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_memberMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_memberAggregateType<T extends Discussionboard_memberAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_member]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_member[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_member[P]>\n  }\n\n\n\n\n  export type discussionboard_memberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_memberWhereInput\n    orderBy?: discussionboard_memberOrderByWithAggregationInput | discussionboard_memberOrderByWithAggregationInput[]\n    by: Discussionboard_memberScalarFieldEnum[] | Discussionboard_memberScalarFieldEnum\n    having?: discussionboard_memberScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_memberCountAggregateInputType | true\n    _min?: Discussionboard_memberMinAggregateInputType\n    _max?: Discussionboard_memberMaxAggregateInputType\n  }\n\n  export type Discussionboard_memberGroupByOutputType = {\n    id: string\n    user_id: string\n    granted_at: Date\n    _count: Discussionboard_memberCountAggregateOutputType | null\n    _min: Discussionboard_memberMinAggregateOutputType | null\n    _max: Discussionboard_memberMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_memberGroupByPayload<T extends discussionboard_memberGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_memberGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_memberGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_memberGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_memberGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_memberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    granted_at?: boolean\n    member_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    discussionboard_post?: boolean | discussionboard_member$discussionboard_postArgs<ExtArgs>\n    _count?: boolean | Discussionboard_memberCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_member\"]>\n\n  export type discussionboard_memberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    granted_at?: boolean\n    member_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_member\"]>\n\n  export type discussionboard_memberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    granted_at?: boolean\n    member_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_member\"]>\n\n  export type discussionboard_memberSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    granted_at?: boolean\n  }\n\n  export type discussionboard_memberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"granted_at\", ExtArgs[\"result\"][\"discussionboard_member\"]>\n  export type discussionboard_memberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    member_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    discussionboard_post?: boolean | discussionboard_member$discussionboard_postArgs<ExtArgs>\n    _count?: boolean | Discussionboard_memberCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_memberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    member_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_memberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    member_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_memberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_member\"\n    objects: {\n      member_user_id: Prisma.$discussionboard_userPayload<ExtArgs>\n      discussionboard_post: Prisma.$discussionboard_postPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Each member has a dedicated, globally unique role assignment entry for traceability (even if admin or moderator). Enforces 3NF by using only a surrogate key.\n       */\n      id: string\n      /**\n       * [Foreign Key: discussionboard_user] - Account assigned this member role. Enforces 1:1 mapping, not duplicated for other roles. Needed for permissions matrix. E.g., to check if a user can create posts.\n       */\n      user_id: string\n      /**\n       * [Membership Grant Timestamp] - When membership began. Required for audits, demotions, or calculating active duration. Maintains third normal form by not holding user or credential data.\n       */\n      granted_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_member\"]>\n    composites: {}\n  }\n\n  type discussionboard_memberGetPayload<S extends boolean | null | undefined | discussionboard_memberDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_memberPayload, S>\n\n  type discussionboard_memberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_memberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_memberCountAggregateInputType | true\n    }\n\n  export interface discussionboard_memberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_member'], meta: { name: 'discussionboard_member' } }\n    /**\n     * Find zero or one Discussionboard_member that matches the filter.\n     * @param {discussionboard_memberFindUniqueArgs} args - Arguments to find a Discussionboard_member\n     * @example\n     * // Get one Discussionboard_member\n     * const discussionboard_member = await prisma.discussionboard_member.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_memberFindUniqueArgs>(args: SelectSubset<T, discussionboard_memberFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_member that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_memberFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_member\n     * @example\n     * // Get one Discussionboard_member\n     * const discussionboard_member = await prisma.discussionboard_member.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_memberFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_memberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_member that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_memberFindFirstArgs} args - Arguments to find a Discussionboard_member\n     * @example\n     * // Get one Discussionboard_member\n     * const discussionboard_member = await prisma.discussionboard_member.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_memberFindFirstArgs>(args?: SelectSubset<T, discussionboard_memberFindFirstArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_member that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_memberFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_member\n     * @example\n     * // Get one Discussionboard_member\n     * const discussionboard_member = await prisma.discussionboard_member.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_memberFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_memberFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_members that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_memberFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_members\n     * const discussionboard_members = await prisma.discussionboard_member.findMany()\n     * \n     * // Get first 10 Discussionboard_members\n     * const discussionboard_members = await prisma.discussionboard_member.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_memberWithIdOnly = await prisma.discussionboard_member.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_memberFindManyArgs>(args?: SelectSubset<T, discussionboard_memberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_member.\n     * @param {discussionboard_memberCreateArgs} args - Arguments to create a Discussionboard_member.\n     * @example\n     * // Create one Discussionboard_member\n     * const Discussionboard_member = await prisma.discussionboard_member.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_member\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_memberCreateArgs>(args: SelectSubset<T, discussionboard_memberCreateArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_members.\n     * @param {discussionboard_memberCreateManyArgs} args - Arguments to create many Discussionboard_members.\n     * @example\n     * // Create many Discussionboard_members\n     * const discussionboard_member = await prisma.discussionboard_member.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_memberCreateManyArgs>(args?: SelectSubset<T, discussionboard_memberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_members and returns the data saved in the database.\n     * @param {discussionboard_memberCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_members.\n     * @example\n     * // Create many Discussionboard_members\n     * const discussionboard_member = await prisma.discussionboard_member.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_members and only return the `id`\n     * const discussionboard_memberWithIdOnly = await prisma.discussionboard_member.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_memberCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_memberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_member.\n     * @param {discussionboard_memberDeleteArgs} args - Arguments to delete one Discussionboard_member.\n     * @example\n     * // Delete one Discussionboard_member\n     * const Discussionboard_member = await prisma.discussionboard_member.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_member\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_memberDeleteArgs>(args: SelectSubset<T, discussionboard_memberDeleteArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_member.\n     * @param {discussionboard_memberUpdateArgs} args - Arguments to update one Discussionboard_member.\n     * @example\n     * // Update one Discussionboard_member\n     * const discussionboard_member = await prisma.discussionboard_member.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_memberUpdateArgs>(args: SelectSubset<T, discussionboard_memberUpdateArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_members.\n     * @param {discussionboard_memberDeleteManyArgs} args - Arguments to filter Discussionboard_members to delete.\n     * @example\n     * // Delete a few Discussionboard_members\n     * const { count } = await prisma.discussionboard_member.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_memberDeleteManyArgs>(args?: SelectSubset<T, discussionboard_memberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_members.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_memberUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_members\n     * const discussionboard_member = await prisma.discussionboard_member.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_memberUpdateManyArgs>(args: SelectSubset<T, discussionboard_memberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_members and returns the data updated in the database.\n     * @param {discussionboard_memberUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_members.\n     * @example\n     * // Update many Discussionboard_members\n     * const discussionboard_member = await prisma.discussionboard_member.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_members and only return the `id`\n     * const discussionboard_memberWithIdOnly = await prisma.discussionboard_member.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_memberUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_memberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_member.\n     * @param {discussionboard_memberUpsertArgs} args - Arguments to update or create a Discussionboard_member.\n     * @example\n     * // Update or create a Discussionboard_member\n     * const discussionboard_member = await prisma.discussionboard_member.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_member\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_member we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_memberUpsertArgs>(args: SelectSubset<T, discussionboard_memberUpsertArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_members.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_memberCountArgs} args - Arguments to filter Discussionboard_members to count.\n     * @example\n     * // Count the number of Discussionboard_members\n     * const count = await prisma.discussionboard_member.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_members we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_memberCountArgs>(\n      args?: Subset<T, discussionboard_memberCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_memberCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_member.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_memberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_memberAggregateArgs>(args: Subset<T, Discussionboard_memberAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_memberAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_member.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_memberGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_memberGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_memberGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_memberGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_memberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_memberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_member model\n   */\n  readonly fields: discussionboard_memberFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_member.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_memberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    member_user_id<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    discussionboard_post<T extends discussionboard_member$discussionboard_postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_member$discussionboard_postArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_member model\n   */\n  interface discussionboard_memberFieldRefs {\n    readonly id: FieldRef<\"discussionboard_member\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_member\", 'String'>\n    readonly granted_at: FieldRef<\"discussionboard_member\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_member findUnique\n   */\n  export type discussionboard_memberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_member to fetch.\n     */\n    where: discussionboard_memberWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_member findUniqueOrThrow\n   */\n  export type discussionboard_memberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_member to fetch.\n     */\n    where: discussionboard_memberWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_member findFirst\n   */\n  export type discussionboard_memberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_member to fetch.\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_members to fetch.\n     */\n    orderBy?: discussionboard_memberOrderByWithRelationInput | discussionboard_memberOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_members.\n     */\n    cursor?: discussionboard_memberWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_members from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_members.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_members.\n     */\n    distinct?: Discussionboard_memberScalarFieldEnum | Discussionboard_memberScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_member findFirstOrThrow\n   */\n  export type discussionboard_memberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_member to fetch.\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_members to fetch.\n     */\n    orderBy?: discussionboard_memberOrderByWithRelationInput | discussionboard_memberOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_members.\n     */\n    cursor?: discussionboard_memberWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_members from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_members.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_members.\n     */\n    distinct?: Discussionboard_memberScalarFieldEnum | Discussionboard_memberScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_member findMany\n   */\n  export type discussionboard_memberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_members to fetch.\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_members to fetch.\n     */\n    orderBy?: discussionboard_memberOrderByWithRelationInput | discussionboard_memberOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_members.\n     */\n    cursor?: discussionboard_memberWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_members from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_members.\n     */\n    skip?: number\n    distinct?: Discussionboard_memberScalarFieldEnum | Discussionboard_memberScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_member create\n   */\n  export type discussionboard_memberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_member.\n     */\n    data: XOR<discussionboard_memberCreateInput, discussionboard_memberUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_member createMany\n   */\n  export type discussionboard_memberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_members.\n     */\n    data: discussionboard_memberCreateManyInput | discussionboard_memberCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_member createManyAndReturn\n   */\n  export type discussionboard_memberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_members.\n     */\n    data: discussionboard_memberCreateManyInput | discussionboard_memberCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_member update\n   */\n  export type discussionboard_memberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_member.\n     */\n    data: XOR<discussionboard_memberUpdateInput, discussionboard_memberUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_member to update.\n     */\n    where: discussionboard_memberWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_member updateMany\n   */\n  export type discussionboard_memberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_members.\n     */\n    data: XOR<discussionboard_memberUpdateManyMutationInput, discussionboard_memberUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_members to update\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * Limit how many discussionboard_members to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_member updateManyAndReturn\n   */\n  export type discussionboard_memberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_members.\n     */\n    data: XOR<discussionboard_memberUpdateManyMutationInput, discussionboard_memberUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_members to update\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * Limit how many discussionboard_members to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_member upsert\n   */\n  export type discussionboard_memberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_member to update in case it exists.\n     */\n    where: discussionboard_memberWhereUniqueInput\n    /**\n     * In case the discussionboard_member found by the `where` argument doesn't exist, create a new discussionboard_member with this data.\n     */\n    create: XOR<discussionboard_memberCreateInput, discussionboard_memberUncheckedCreateInput>\n    /**\n     * In case the discussionboard_member was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_memberUpdateInput, discussionboard_memberUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_member delete\n   */\n  export type discussionboard_memberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_member to delete.\n     */\n    where: discussionboard_memberWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_member deleteMany\n   */\n  export type discussionboard_memberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_members to delete\n     */\n    where?: discussionboard_memberWhereInput\n    /**\n     * Limit how many discussionboard_members to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_member.discussionboard_post\n   */\n  export type discussionboard_member$discussionboard_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n    orderBy?: discussionboard_postOrderByWithRelationInput | discussionboard_postOrderByWithRelationInput[]\n    cursor?: discussionboard_postWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_postScalarFieldEnum | Discussionboard_postScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_member without action\n   */\n  export type discussionboard_memberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_member\n     */\n    select?: discussionboard_memberSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_member\n     */\n    omit?: discussionboard_memberOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_memberInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_moderator\n   */\n\n  export type AggregateDiscussionboard_moderator = {\n    _count: Discussionboard_moderatorCountAggregateOutputType | null\n    _min: Discussionboard_moderatorMinAggregateOutputType | null\n    _max: Discussionboard_moderatorMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_moderatorMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    assigned_at: Date | null\n  }\n\n  export type Discussionboard_moderatorMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    assigned_at: Date | null\n  }\n\n  export type Discussionboard_moderatorCountAggregateOutputType = {\n    id: number\n    user_id: number\n    assigned_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_moderatorMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    assigned_at?: true\n  }\n\n  export type Discussionboard_moderatorMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    assigned_at?: true\n  }\n\n  export type Discussionboard_moderatorCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    assigned_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_moderatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_moderator to aggregate.\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderators to fetch.\n     */\n    orderBy?: discussionboard_moderatorOrderByWithRelationInput | discussionboard_moderatorOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_moderatorWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderators.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_moderators\n    **/\n    _count?: true | Discussionboard_moderatorCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_moderatorMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_moderatorMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_moderatorAggregateType<T extends Discussionboard_moderatorAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_moderator]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_moderator[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_moderator[P]>\n  }\n\n\n\n\n  export type discussionboard_moderatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_moderatorWhereInput\n    orderBy?: discussionboard_moderatorOrderByWithAggregationInput | discussionboard_moderatorOrderByWithAggregationInput[]\n    by: Discussionboard_moderatorScalarFieldEnum[] | Discussionboard_moderatorScalarFieldEnum\n    having?: discussionboard_moderatorScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_moderatorCountAggregateInputType | true\n    _min?: Discussionboard_moderatorMinAggregateInputType\n    _max?: Discussionboard_moderatorMaxAggregateInputType\n  }\n\n  export type Discussionboard_moderatorGroupByOutputType = {\n    id: string\n    user_id: string\n    assigned_at: Date\n    _count: Discussionboard_moderatorCountAggregateOutputType | null\n    _min: Discussionboard_moderatorMinAggregateOutputType | null\n    _max: Discussionboard_moderatorMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_moderatorGroupByPayload<T extends discussionboard_moderatorGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_moderatorGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_moderatorGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_moderatorGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_moderatorGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_moderatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n    moderator_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_moderator\"]>\n\n  export type discussionboard_moderatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n    moderator_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_moderator\"]>\n\n  export type discussionboard_moderatorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n    moderator_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_moderator\"]>\n\n  export type discussionboard_moderatorSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n  }\n\n  export type discussionboard_moderatorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"assigned_at\", ExtArgs[\"result\"][\"discussionboard_moderator\"]>\n  export type discussionboard_moderatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    moderator_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_moderatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    moderator_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_moderatorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    moderator_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_moderatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_moderator\"\n    objects: {\n      moderator_user_id: Prisma.$discussionboard_userPayload<ExtArgs>\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Unique identifier for moderator role assignment. Enforces traceability, audit, and clean separation. Used for all moderator-level permission checks.\n       */\n      id: string\n      /**\n       * [Foreign Key: discussionboard_user] - User granted moderator authority (must also be a member). 1:1 constraint by unique index. Never duplicated nor nullable. E.g., lookup for report review access.\n       */\n      user_id: string\n      /**\n       * [Moderator Grant Timestamp] - When moderator role was assigned. Auditing and compliance for all moderator promotions. Normalization: Never holds non-moderator info.\n       */\n      assigned_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_moderator\"]>\n    composites: {}\n  }\n\n  type discussionboard_moderatorGetPayload<S extends boolean | null | undefined | discussionboard_moderatorDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_moderatorPayload, S>\n\n  type discussionboard_moderatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_moderatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_moderatorCountAggregateInputType | true\n    }\n\n  export interface discussionboard_moderatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_moderator'], meta: { name: 'discussionboard_moderator' } }\n    /**\n     * Find zero or one Discussionboard_moderator that matches the filter.\n     * @param {discussionboard_moderatorFindUniqueArgs} args - Arguments to find a Discussionboard_moderator\n     * @example\n     * // Get one Discussionboard_moderator\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_moderatorFindUniqueArgs>(args: SelectSubset<T, discussionboard_moderatorFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_moderator that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_moderatorFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_moderator\n     * @example\n     * // Get one Discussionboard_moderator\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_moderatorFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_moderatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_moderator that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderatorFindFirstArgs} args - Arguments to find a Discussionboard_moderator\n     * @example\n     * // Get one Discussionboard_moderator\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_moderatorFindFirstArgs>(args?: SelectSubset<T, discussionboard_moderatorFindFirstArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_moderator that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderatorFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_moderator\n     * @example\n     * // Get one Discussionboard_moderator\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_moderatorFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_moderatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_moderators that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderatorFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_moderators\n     * const discussionboard_moderators = await prisma.discussionboard_moderator.findMany()\n     * \n     * // Get first 10 Discussionboard_moderators\n     * const discussionboard_moderators = await prisma.discussionboard_moderator.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_moderatorWithIdOnly = await prisma.discussionboard_moderator.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_moderatorFindManyArgs>(args?: SelectSubset<T, discussionboard_moderatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_moderator.\n     * @param {discussionboard_moderatorCreateArgs} args - Arguments to create a Discussionboard_moderator.\n     * @example\n     * // Create one Discussionboard_moderator\n     * const Discussionboard_moderator = await prisma.discussionboard_moderator.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_moderator\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_moderatorCreateArgs>(args: SelectSubset<T, discussionboard_moderatorCreateArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_moderators.\n     * @param {discussionboard_moderatorCreateManyArgs} args - Arguments to create many Discussionboard_moderators.\n     * @example\n     * // Create many Discussionboard_moderators\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_moderatorCreateManyArgs>(args?: SelectSubset<T, discussionboard_moderatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_moderators and returns the data saved in the database.\n     * @param {discussionboard_moderatorCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_moderators.\n     * @example\n     * // Create many Discussionboard_moderators\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_moderators and only return the `id`\n     * const discussionboard_moderatorWithIdOnly = await prisma.discussionboard_moderator.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_moderatorCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_moderatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_moderator.\n     * @param {discussionboard_moderatorDeleteArgs} args - Arguments to delete one Discussionboard_moderator.\n     * @example\n     * // Delete one Discussionboard_moderator\n     * const Discussionboard_moderator = await prisma.discussionboard_moderator.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_moderator\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_moderatorDeleteArgs>(args: SelectSubset<T, discussionboard_moderatorDeleteArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_moderator.\n     * @param {discussionboard_moderatorUpdateArgs} args - Arguments to update one Discussionboard_moderator.\n     * @example\n     * // Update one Discussionboard_moderator\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_moderatorUpdateArgs>(args: SelectSubset<T, discussionboard_moderatorUpdateArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_moderators.\n     * @param {discussionboard_moderatorDeleteManyArgs} args - Arguments to filter Discussionboard_moderators to delete.\n     * @example\n     * // Delete a few Discussionboard_moderators\n     * const { count } = await prisma.discussionboard_moderator.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_moderatorDeleteManyArgs>(args?: SelectSubset<T, discussionboard_moderatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_moderators.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderatorUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_moderators\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_moderatorUpdateManyArgs>(args: SelectSubset<T, discussionboard_moderatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_moderators and returns the data updated in the database.\n     * @param {discussionboard_moderatorUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_moderators.\n     * @example\n     * // Update many Discussionboard_moderators\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_moderators and only return the `id`\n     * const discussionboard_moderatorWithIdOnly = await prisma.discussionboard_moderator.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_moderatorUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_moderatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_moderator.\n     * @param {discussionboard_moderatorUpsertArgs} args - Arguments to update or create a Discussionboard_moderator.\n     * @example\n     * // Update or create a Discussionboard_moderator\n     * const discussionboard_moderator = await prisma.discussionboard_moderator.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_moderator\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_moderator we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_moderatorUpsertArgs>(args: SelectSubset<T, discussionboard_moderatorUpsertArgs<ExtArgs>>): Prisma__discussionboard_moderatorClient<$Result.GetResult<Prisma.$discussionboard_moderatorPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_moderators.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderatorCountArgs} args - Arguments to filter Discussionboard_moderators to count.\n     * @example\n     * // Count the number of Discussionboard_moderators\n     * const count = await prisma.discussionboard_moderator.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_moderators we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_moderatorCountArgs>(\n      args?: Subset<T, discussionboard_moderatorCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_moderatorCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_moderator.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_moderatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_moderatorAggregateArgs>(args: Subset<T, Discussionboard_moderatorAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_moderatorAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_moderator.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderatorGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_moderatorGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_moderatorGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_moderatorGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_moderatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_moderatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_moderator model\n   */\n  readonly fields: discussionboard_moderatorFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_moderator.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_moderatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    moderator_user_id<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_moderator model\n   */\n  interface discussionboard_moderatorFieldRefs {\n    readonly id: FieldRef<\"discussionboard_moderator\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_moderator\", 'String'>\n    readonly assigned_at: FieldRef<\"discussionboard_moderator\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_moderator findUnique\n   */\n  export type discussionboard_moderatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderator to fetch.\n     */\n    where: discussionboard_moderatorWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderator findUniqueOrThrow\n   */\n  export type discussionboard_moderatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderator to fetch.\n     */\n    where: discussionboard_moderatorWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderator findFirst\n   */\n  export type discussionboard_moderatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderator to fetch.\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderators to fetch.\n     */\n    orderBy?: discussionboard_moderatorOrderByWithRelationInput | discussionboard_moderatorOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_moderators.\n     */\n    cursor?: discussionboard_moderatorWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderators.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_moderators.\n     */\n    distinct?: Discussionboard_moderatorScalarFieldEnum | Discussionboard_moderatorScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_moderator findFirstOrThrow\n   */\n  export type discussionboard_moderatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderator to fetch.\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderators to fetch.\n     */\n    orderBy?: discussionboard_moderatorOrderByWithRelationInput | discussionboard_moderatorOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_moderators.\n     */\n    cursor?: discussionboard_moderatorWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderators.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_moderators.\n     */\n    distinct?: Discussionboard_moderatorScalarFieldEnum | Discussionboard_moderatorScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_moderator findMany\n   */\n  export type discussionboard_moderatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderators to fetch.\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderators to fetch.\n     */\n    orderBy?: discussionboard_moderatorOrderByWithRelationInput | discussionboard_moderatorOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_moderators.\n     */\n    cursor?: discussionboard_moderatorWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderators from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderators.\n     */\n    skip?: number\n    distinct?: Discussionboard_moderatorScalarFieldEnum | Discussionboard_moderatorScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_moderator create\n   */\n  export type discussionboard_moderatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_moderator.\n     */\n    data: XOR<discussionboard_moderatorCreateInput, discussionboard_moderatorUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_moderator createMany\n   */\n  export type discussionboard_moderatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_moderators.\n     */\n    data: discussionboard_moderatorCreateManyInput | discussionboard_moderatorCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_moderator createManyAndReturn\n   */\n  export type discussionboard_moderatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_moderators.\n     */\n    data: discussionboard_moderatorCreateManyInput | discussionboard_moderatorCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_moderator update\n   */\n  export type discussionboard_moderatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_moderator.\n     */\n    data: XOR<discussionboard_moderatorUpdateInput, discussionboard_moderatorUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_moderator to update.\n     */\n    where: discussionboard_moderatorWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderator updateMany\n   */\n  export type discussionboard_moderatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_moderators.\n     */\n    data: XOR<discussionboard_moderatorUpdateManyMutationInput, discussionboard_moderatorUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_moderators to update\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * Limit how many discussionboard_moderators to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_moderator updateManyAndReturn\n   */\n  export type discussionboard_moderatorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_moderators.\n     */\n    data: XOR<discussionboard_moderatorUpdateManyMutationInput, discussionboard_moderatorUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_moderators to update\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * Limit how many discussionboard_moderators to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_moderator upsert\n   */\n  export type discussionboard_moderatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_moderator to update in case it exists.\n     */\n    where: discussionboard_moderatorWhereUniqueInput\n    /**\n     * In case the discussionboard_moderator found by the `where` argument doesn't exist, create a new discussionboard_moderator with this data.\n     */\n    create: XOR<discussionboard_moderatorCreateInput, discussionboard_moderatorUncheckedCreateInput>\n    /**\n     * In case the discussionboard_moderator was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_moderatorUpdateInput, discussionboard_moderatorUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_moderator delete\n   */\n  export type discussionboard_moderatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_moderator to delete.\n     */\n    where: discussionboard_moderatorWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderator deleteMany\n   */\n  export type discussionboard_moderatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_moderators to delete\n     */\n    where?: discussionboard_moderatorWhereInput\n    /**\n     * Limit how many discussionboard_moderators to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_moderator without action\n   */\n  export type discussionboard_moderatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderator\n     */\n    select?: discussionboard_moderatorSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderator\n     */\n    omit?: discussionboard_moderatorOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderatorInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_admin\n   */\n\n  export type AggregateDiscussionboard_admin = {\n    _count: Discussionboard_adminCountAggregateOutputType | null\n    _min: Discussionboard_adminMinAggregateOutputType | null\n    _max: Discussionboard_adminMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_adminMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    assigned_at: Date | null\n  }\n\n  export type Discussionboard_adminMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    assigned_at: Date | null\n  }\n\n  export type Discussionboard_adminCountAggregateOutputType = {\n    id: number\n    user_id: number\n    assigned_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_adminMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    assigned_at?: true\n  }\n\n  export type Discussionboard_adminMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    assigned_at?: true\n  }\n\n  export type Discussionboard_adminCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    assigned_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_adminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_admin to aggregate.\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_admins to fetch.\n     */\n    orderBy?: discussionboard_adminOrderByWithRelationInput | discussionboard_adminOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_adminWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_admins from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_admins.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_admins\n    **/\n    _count?: true | Discussionboard_adminCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_adminMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_adminMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_adminAggregateType<T extends Discussionboard_adminAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_admin]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_admin[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_admin[P]>\n  }\n\n\n\n\n  export type discussionboard_adminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_adminWhereInput\n    orderBy?: discussionboard_adminOrderByWithAggregationInput | discussionboard_adminOrderByWithAggregationInput[]\n    by: Discussionboard_adminScalarFieldEnum[] | Discussionboard_adminScalarFieldEnum\n    having?: discussionboard_adminScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_adminCountAggregateInputType | true\n    _min?: Discussionboard_adminMinAggregateInputType\n    _max?: Discussionboard_adminMaxAggregateInputType\n  }\n\n  export type Discussionboard_adminGroupByOutputType = {\n    id: string\n    user_id: string\n    assigned_at: Date\n    _count: Discussionboard_adminCountAggregateOutputType | null\n    _min: Discussionboard_adminMinAggregateOutputType | null\n    _max: Discussionboard_adminMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_adminGroupByPayload<T extends discussionboard_adminGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_adminGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_adminGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_adminGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_adminGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_adminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n    admin_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_admin\"]>\n\n  export type discussionboard_adminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n    admin_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_admin\"]>\n\n  export type discussionboard_adminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n    admin_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_admin\"]>\n\n  export type discussionboard_adminSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    assigned_at?: boolean\n  }\n\n  export type discussionboard_adminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"assigned_at\", ExtArgs[\"result\"][\"discussionboard_admin\"]>\n  export type discussionboard_adminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    admin_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_adminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    admin_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_adminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    admin_user_id?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_adminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_admin\"\n    objects: {\n      admin_user_id: Prisma.$discussionboard_userPayload<ExtArgs>\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Surrogate key for admin role assignment. Allows auditing/change tracking for all promotions/demotions. Clean, normalized design.\n       */\n      id: string\n      /**\n       * [Foreign Key: discussionboard_user] - User assigned admin authority. Enforced 1:1 by unique index, not nullable. 3NF: Never duplicated.\n       */\n      user_id: string\n      /**\n       * [Admin Assignment Timestamp] - When the admin role was assigned; fulfills trace and change-audit requirements for privileged role escalation. Normalized by excluding non-admin details.\n       */\n      assigned_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_admin\"]>\n    composites: {}\n  }\n\n  type discussionboard_adminGetPayload<S extends boolean | null | undefined | discussionboard_adminDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_adminPayload, S>\n\n  type discussionboard_adminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_adminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_adminCountAggregateInputType | true\n    }\n\n  export interface discussionboard_adminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_admin'], meta: { name: 'discussionboard_admin' } }\n    /**\n     * Find zero or one Discussionboard_admin that matches the filter.\n     * @param {discussionboard_adminFindUniqueArgs} args - Arguments to find a Discussionboard_admin\n     * @example\n     * // Get one Discussionboard_admin\n     * const discussionboard_admin = await prisma.discussionboard_admin.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_adminFindUniqueArgs>(args: SelectSubset<T, discussionboard_adminFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_admin that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_adminFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_admin\n     * @example\n     * // Get one Discussionboard_admin\n     * const discussionboard_admin = await prisma.discussionboard_admin.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_adminFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_adminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_admin that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_adminFindFirstArgs} args - Arguments to find a Discussionboard_admin\n     * @example\n     * // Get one Discussionboard_admin\n     * const discussionboard_admin = await prisma.discussionboard_admin.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_adminFindFirstArgs>(args?: SelectSubset<T, discussionboard_adminFindFirstArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_admin that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_adminFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_admin\n     * @example\n     * // Get one Discussionboard_admin\n     * const discussionboard_admin = await prisma.discussionboard_admin.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_adminFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_adminFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_admins that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_adminFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_admins\n     * const discussionboard_admins = await prisma.discussionboard_admin.findMany()\n     * \n     * // Get first 10 Discussionboard_admins\n     * const discussionboard_admins = await prisma.discussionboard_admin.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_adminWithIdOnly = await prisma.discussionboard_admin.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_adminFindManyArgs>(args?: SelectSubset<T, discussionboard_adminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_admin.\n     * @param {discussionboard_adminCreateArgs} args - Arguments to create a Discussionboard_admin.\n     * @example\n     * // Create one Discussionboard_admin\n     * const Discussionboard_admin = await prisma.discussionboard_admin.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_admin\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_adminCreateArgs>(args: SelectSubset<T, discussionboard_adminCreateArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_admins.\n     * @param {discussionboard_adminCreateManyArgs} args - Arguments to create many Discussionboard_admins.\n     * @example\n     * // Create many Discussionboard_admins\n     * const discussionboard_admin = await prisma.discussionboard_admin.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_adminCreateManyArgs>(args?: SelectSubset<T, discussionboard_adminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_admins and returns the data saved in the database.\n     * @param {discussionboard_adminCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_admins.\n     * @example\n     * // Create many Discussionboard_admins\n     * const discussionboard_admin = await prisma.discussionboard_admin.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_admins and only return the `id`\n     * const discussionboard_adminWithIdOnly = await prisma.discussionboard_admin.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_adminCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_adminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_admin.\n     * @param {discussionboard_adminDeleteArgs} args - Arguments to delete one Discussionboard_admin.\n     * @example\n     * // Delete one Discussionboard_admin\n     * const Discussionboard_admin = await prisma.discussionboard_admin.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_admin\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_adminDeleteArgs>(args: SelectSubset<T, discussionboard_adminDeleteArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_admin.\n     * @param {discussionboard_adminUpdateArgs} args - Arguments to update one Discussionboard_admin.\n     * @example\n     * // Update one Discussionboard_admin\n     * const discussionboard_admin = await prisma.discussionboard_admin.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_adminUpdateArgs>(args: SelectSubset<T, discussionboard_adminUpdateArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_admins.\n     * @param {discussionboard_adminDeleteManyArgs} args - Arguments to filter Discussionboard_admins to delete.\n     * @example\n     * // Delete a few Discussionboard_admins\n     * const { count } = await prisma.discussionboard_admin.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_adminDeleteManyArgs>(args?: SelectSubset<T, discussionboard_adminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_admins.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_adminUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_admins\n     * const discussionboard_admin = await prisma.discussionboard_admin.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_adminUpdateManyArgs>(args: SelectSubset<T, discussionboard_adminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_admins and returns the data updated in the database.\n     * @param {discussionboard_adminUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_admins.\n     * @example\n     * // Update many Discussionboard_admins\n     * const discussionboard_admin = await prisma.discussionboard_admin.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_admins and only return the `id`\n     * const discussionboard_adminWithIdOnly = await prisma.discussionboard_admin.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_adminUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_adminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_admin.\n     * @param {discussionboard_adminUpsertArgs} args - Arguments to update or create a Discussionboard_admin.\n     * @example\n     * // Update or create a Discussionboard_admin\n     * const discussionboard_admin = await prisma.discussionboard_admin.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_admin\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_admin we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_adminUpsertArgs>(args: SelectSubset<T, discussionboard_adminUpsertArgs<ExtArgs>>): Prisma__discussionboard_adminClient<$Result.GetResult<Prisma.$discussionboard_adminPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_admins.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_adminCountArgs} args - Arguments to filter Discussionboard_admins to count.\n     * @example\n     * // Count the number of Discussionboard_admins\n     * const count = await prisma.discussionboard_admin.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_admins we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_adminCountArgs>(\n      args?: Subset<T, discussionboard_adminCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_adminCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_admin.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_adminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_adminAggregateArgs>(args: Subset<T, Discussionboard_adminAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_adminAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_admin.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_adminGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_adminGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_adminGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_adminGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_adminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_adminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_admin model\n   */\n  readonly fields: discussionboard_adminFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_admin.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_adminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    admin_user_id<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_admin model\n   */\n  interface discussionboard_adminFieldRefs {\n    readonly id: FieldRef<\"discussionboard_admin\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_admin\", 'String'>\n    readonly assigned_at: FieldRef<\"discussionboard_admin\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_admin findUnique\n   */\n  export type discussionboard_adminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_admin to fetch.\n     */\n    where: discussionboard_adminWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_admin findUniqueOrThrow\n   */\n  export type discussionboard_adminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_admin to fetch.\n     */\n    where: discussionboard_adminWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_admin findFirst\n   */\n  export type discussionboard_adminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_admin to fetch.\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_admins to fetch.\n     */\n    orderBy?: discussionboard_adminOrderByWithRelationInput | discussionboard_adminOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_admins.\n     */\n    cursor?: discussionboard_adminWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_admins from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_admins.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_admins.\n     */\n    distinct?: Discussionboard_adminScalarFieldEnum | Discussionboard_adminScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_admin findFirstOrThrow\n   */\n  export type discussionboard_adminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_admin to fetch.\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_admins to fetch.\n     */\n    orderBy?: discussionboard_adminOrderByWithRelationInput | discussionboard_adminOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_admins.\n     */\n    cursor?: discussionboard_adminWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_admins from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_admins.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_admins.\n     */\n    distinct?: Discussionboard_adminScalarFieldEnum | Discussionboard_adminScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_admin findMany\n   */\n  export type discussionboard_adminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_admins to fetch.\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_admins to fetch.\n     */\n    orderBy?: discussionboard_adminOrderByWithRelationInput | discussionboard_adminOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_admins.\n     */\n    cursor?: discussionboard_adminWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_admins from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_admins.\n     */\n    skip?: number\n    distinct?: Discussionboard_adminScalarFieldEnum | Discussionboard_adminScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_admin create\n   */\n  export type discussionboard_adminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_admin.\n     */\n    data: XOR<discussionboard_adminCreateInput, discussionboard_adminUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_admin createMany\n   */\n  export type discussionboard_adminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_admins.\n     */\n    data: discussionboard_adminCreateManyInput | discussionboard_adminCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_admin createManyAndReturn\n   */\n  export type discussionboard_adminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_admins.\n     */\n    data: discussionboard_adminCreateManyInput | discussionboard_adminCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_admin update\n   */\n  export type discussionboard_adminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_admin.\n     */\n    data: XOR<discussionboard_adminUpdateInput, discussionboard_adminUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_admin to update.\n     */\n    where: discussionboard_adminWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_admin updateMany\n   */\n  export type discussionboard_adminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_admins.\n     */\n    data: XOR<discussionboard_adminUpdateManyMutationInput, discussionboard_adminUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_admins to update\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * Limit how many discussionboard_admins to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_admin updateManyAndReturn\n   */\n  export type discussionboard_adminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_admins.\n     */\n    data: XOR<discussionboard_adminUpdateManyMutationInput, discussionboard_adminUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_admins to update\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * Limit how many discussionboard_admins to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_admin upsert\n   */\n  export type discussionboard_adminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_admin to update in case it exists.\n     */\n    where: discussionboard_adminWhereUniqueInput\n    /**\n     * In case the discussionboard_admin found by the `where` argument doesn't exist, create a new discussionboard_admin with this data.\n     */\n    create: XOR<discussionboard_adminCreateInput, discussionboard_adminUncheckedCreateInput>\n    /**\n     * In case the discussionboard_admin was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_adminUpdateInput, discussionboard_adminUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_admin delete\n   */\n  export type discussionboard_adminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_admin to delete.\n     */\n    where: discussionboard_adminWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_admin deleteMany\n   */\n  export type discussionboard_adminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_admins to delete\n     */\n    where?: discussionboard_adminWhereInput\n    /**\n     * Limit how many discussionboard_admins to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_admin without action\n   */\n  export type discussionboard_adminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_admin\n     */\n    select?: discussionboard_adminSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_admin\n     */\n    omit?: discussionboard_adminOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_adminInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_post\n   */\n\n  export type AggregateDiscussionboard_post = {\n    _count: Discussionboard_postCountAggregateOutputType | null\n    _min: Discussionboard_postMinAggregateOutputType | null\n    _max: Discussionboard_postMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_postMinAggregateOutputType = {\n    id: string | null\n    author_member_id: string | null\n    category_id: string | null\n    title: string | null\n    body: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussionboard_postMaxAggregateOutputType = {\n    id: string | null\n    author_member_id: string | null\n    category_id: string | null\n    title: string | null\n    body: string | null\n    created_at: Date | null\n    updated_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussionboard_postCountAggregateOutputType = {\n    id: number\n    author_member_id: number\n    category_id: number\n    title: number\n    body: number\n    created_at: number\n    updated_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_postMinAggregateInputType = {\n    id?: true\n    author_member_id?: true\n    category_id?: true\n    title?: true\n    body?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussionboard_postMaxAggregateInputType = {\n    id?: true\n    author_member_id?: true\n    category_id?: true\n    title?: true\n    body?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussionboard_postCountAggregateInputType = {\n    id?: true\n    author_member_id?: true\n    category_id?: true\n    title?: true\n    body?: true\n    created_at?: true\n    updated_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_postAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post to aggregate.\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_posts to fetch.\n     */\n    orderBy?: discussionboard_postOrderByWithRelationInput | discussionboard_postOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_postWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_posts from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_posts.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_posts\n    **/\n    _count?: true | Discussionboard_postCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_postMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_postMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_postAggregateType<T extends Discussionboard_postAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_post]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_post[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_post[P]>\n  }\n\n\n\n\n  export type discussionboard_postGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_postWhereInput\n    orderBy?: discussionboard_postOrderByWithAggregationInput | discussionboard_postOrderByWithAggregationInput[]\n    by: Discussionboard_postScalarFieldEnum[] | Discussionboard_postScalarFieldEnum\n    having?: discussionboard_postScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_postCountAggregateInputType | true\n    _min?: Discussionboard_postMinAggregateInputType\n    _max?: Discussionboard_postMaxAggregateInputType\n  }\n\n  export type Discussionboard_postGroupByOutputType = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date\n    updated_at: Date\n    deleted_at: Date | null\n    _count: Discussionboard_postCountAggregateOutputType | null\n    _min: Discussionboard_postMinAggregateOutputType | null\n    _max: Discussionboard_postMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_postGroupByPayload<T extends discussionboard_postGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_postGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_postGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_postGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_postGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_postSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    author_member_id?: boolean\n    category_id?: boolean\n    title?: boolean\n    body?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    member?: boolean | discussionboard_memberDefaultArgs<ExtArgs>\n    category?: boolean | discussionboard_post_categoryDefaultArgs<ExtArgs>\n    discussionboard_post_attachment?: boolean | discussionboard_post$discussionboard_post_attachmentArgs<ExtArgs>\n    discussionboard_comments?: boolean | discussionboard_post$discussionboard_commentsArgs<ExtArgs>\n    discussionboard_likes?: boolean | discussionboard_post$discussionboard_likesArgs<ExtArgs>\n    discussionboard_reports?: boolean | discussionboard_post$discussionboard_reportsArgs<ExtArgs>\n    discussionboard_moderation_action?: boolean | discussionboard_post$discussionboard_moderation_actionArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_post$discussionboard_report_reviewArgs<ExtArgs>\n    discussionboard_warning?: boolean | discussionboard_post$discussionboard_warningArgs<ExtArgs>\n    discussionboard_notification?: boolean | discussionboard_post$discussionboard_notificationArgs<ExtArgs>\n    _count?: boolean | Discussionboard_postCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post\"]>\n\n  export type discussionboard_postSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    author_member_id?: boolean\n    category_id?: boolean\n    title?: boolean\n    body?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    member?: boolean | discussionboard_memberDefaultArgs<ExtArgs>\n    category?: boolean | discussionboard_post_categoryDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post\"]>\n\n  export type discussionboard_postSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    author_member_id?: boolean\n    category_id?: boolean\n    title?: boolean\n    body?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n    member?: boolean | discussionboard_memberDefaultArgs<ExtArgs>\n    category?: boolean | discussionboard_post_categoryDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post\"]>\n\n  export type discussionboard_postSelectScalar = {\n    id?: boolean\n    author_member_id?: boolean\n    category_id?: boolean\n    title?: boolean\n    body?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussionboard_postOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"author_member_id\" | \"category_id\" | \"title\" | \"body\" | \"created_at\" | \"updated_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussionboard_post\"]>\n  export type discussionboard_postInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    member?: boolean | discussionboard_memberDefaultArgs<ExtArgs>\n    category?: boolean | discussionboard_post_categoryDefaultArgs<ExtArgs>\n    discussionboard_post_attachment?: boolean | discussionboard_post$discussionboard_post_attachmentArgs<ExtArgs>\n    discussionboard_comments?: boolean | discussionboard_post$discussionboard_commentsArgs<ExtArgs>\n    discussionboard_likes?: boolean | discussionboard_post$discussionboard_likesArgs<ExtArgs>\n    discussionboard_reports?: boolean | discussionboard_post$discussionboard_reportsArgs<ExtArgs>\n    discussionboard_moderation_action?: boolean | discussionboard_post$discussionboard_moderation_actionArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_post$discussionboard_report_reviewArgs<ExtArgs>\n    discussionboard_warning?: boolean | discussionboard_post$discussionboard_warningArgs<ExtArgs>\n    discussionboard_notification?: boolean | discussionboard_post$discussionboard_notificationArgs<ExtArgs>\n    _count?: boolean | Discussionboard_postCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_postIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    member?: boolean | discussionboard_memberDefaultArgs<ExtArgs>\n    category?: boolean | discussionboard_post_categoryDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_postIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    member?: boolean | discussionboard_memberDefaultArgs<ExtArgs>\n    category?: boolean | discussionboard_post_categoryDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_postPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_post\"\n    objects: {\n      member: Prisma.$discussionboard_memberPayload<ExtArgs>\n      category: Prisma.$discussionboard_post_categoryPayload<ExtArgs>\n      discussionboard_post_attachment: Prisma.$discussionboard_post_attachmentPayload<ExtArgs>[]\n      discussionboard_comments: Prisma.$discussionboard_commentsPayload<ExtArgs>[]\n      discussionboard_likes: Prisma.$discussionboard_likesPayload<ExtArgs>[]\n      discussionboard_reports: Prisma.$discussionboard_reportsPayload<ExtArgs>[]\n      discussionboard_moderation_action: Prisma.$discussionboard_moderation_actionPayload<ExtArgs>[]\n      discussionboard_report_review: Prisma.$discussionboard_report_reviewPayload<ExtArgs>[]\n      discussionboard_warning: Prisma.$discussionboard_warningPayload<ExtArgs>[]\n      discussionboard_notification: Prisma.$discussionboard_notificationPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Unique identifier for each post as mandated for atomic access and historical auditing (Section 3.2).\n       */\n      id: string\n      /**\n       * [Author Member FK] - References the member authoring the post (see Section 3.2 in requirements). Maintains normalization by only referencing the member, not duplicating member data. E.g., used for showing all posts by a member.\n       */\n      author_member_id: string\n      /**\n       * [Category FK] - Associates post with a category (Section 3.2). Provides link to normalized category without duplication of data. E.g., 'Politics' or 'Economics'.\n       */\n      category_id: string\n      /**\n       * [Post Title] - Implements discussion title per Section 3.2. Used for search/listings. Always non-null, atomic text.\n       */\n      title: string\n      /**\n       * [Post Content Body] - Main text body, supports formatting. Fully normalized; not nullable.\n       */\n      body: string\n      /**\n       * [Creation Timestamp] - Records when the post was made (Section 3.2, 3.9).\n       */\n      created_at: Date\n      /**\n       * [Update Timestamp] - Last time this post was edited (Section 3.2). Used for audit/versioning display.\n       */\n      updated_at: Date\n      /**\n       * [Deleted Timestamp] - Soft-deletion timestamp if post is hidden/deleted by member or moderator. Nullable if not deleted.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussionboard_post\"]>\n    composites: {}\n  }\n\n  type discussionboard_postGetPayload<S extends boolean | null | undefined | discussionboard_postDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_postPayload, S>\n\n  type discussionboard_postCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_postFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_postCountAggregateInputType | true\n    }\n\n  export interface discussionboard_postDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_post'], meta: { name: 'discussionboard_post' } }\n    /**\n     * Find zero or one Discussionboard_post that matches the filter.\n     * @param {discussionboard_postFindUniqueArgs} args - Arguments to find a Discussionboard_post\n     * @example\n     * // Get one Discussionboard_post\n     * const discussionboard_post = await prisma.discussionboard_post.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_postFindUniqueArgs>(args: SelectSubset<T, discussionboard_postFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_post that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_postFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_post\n     * @example\n     * // Get one Discussionboard_post\n     * const discussionboard_post = await prisma.discussionboard_post.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_postFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_postFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_postFindFirstArgs} args - Arguments to find a Discussionboard_post\n     * @example\n     * // Get one Discussionboard_post\n     * const discussionboard_post = await prisma.discussionboard_post.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_postFindFirstArgs>(args?: SelectSubset<T, discussionboard_postFindFirstArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_postFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_post\n     * @example\n     * // Get one Discussionboard_post\n     * const discussionboard_post = await prisma.discussionboard_post.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_postFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_postFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_posts that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_postFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_posts\n     * const discussionboard_posts = await prisma.discussionboard_post.findMany()\n     * \n     * // Get first 10 Discussionboard_posts\n     * const discussionboard_posts = await prisma.discussionboard_post.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_postWithIdOnly = await prisma.discussionboard_post.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_postFindManyArgs>(args?: SelectSubset<T, discussionboard_postFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_post.\n     * @param {discussionboard_postCreateArgs} args - Arguments to create a Discussionboard_post.\n     * @example\n     * // Create one Discussionboard_post\n     * const Discussionboard_post = await prisma.discussionboard_post.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_post\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_postCreateArgs>(args: SelectSubset<T, discussionboard_postCreateArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_posts.\n     * @param {discussionboard_postCreateManyArgs} args - Arguments to create many Discussionboard_posts.\n     * @example\n     * // Create many Discussionboard_posts\n     * const discussionboard_post = await prisma.discussionboard_post.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_postCreateManyArgs>(args?: SelectSubset<T, discussionboard_postCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_posts and returns the data saved in the database.\n     * @param {discussionboard_postCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_posts.\n     * @example\n     * // Create many Discussionboard_posts\n     * const discussionboard_post = await prisma.discussionboard_post.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_posts and only return the `id`\n     * const discussionboard_postWithIdOnly = await prisma.discussionboard_post.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_postCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_postCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_post.\n     * @param {discussionboard_postDeleteArgs} args - Arguments to delete one Discussionboard_post.\n     * @example\n     * // Delete one Discussionboard_post\n     * const Discussionboard_post = await prisma.discussionboard_post.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_post\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_postDeleteArgs>(args: SelectSubset<T, discussionboard_postDeleteArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_post.\n     * @param {discussionboard_postUpdateArgs} args - Arguments to update one Discussionboard_post.\n     * @example\n     * // Update one Discussionboard_post\n     * const discussionboard_post = await prisma.discussionboard_post.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_postUpdateArgs>(args: SelectSubset<T, discussionboard_postUpdateArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_posts.\n     * @param {discussionboard_postDeleteManyArgs} args - Arguments to filter Discussionboard_posts to delete.\n     * @example\n     * // Delete a few Discussionboard_posts\n     * const { count } = await prisma.discussionboard_post.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_postDeleteManyArgs>(args?: SelectSubset<T, discussionboard_postDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_posts.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_postUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_posts\n     * const discussionboard_post = await prisma.discussionboard_post.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_postUpdateManyArgs>(args: SelectSubset<T, discussionboard_postUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_posts and returns the data updated in the database.\n     * @param {discussionboard_postUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_posts.\n     * @example\n     * // Update many Discussionboard_posts\n     * const discussionboard_post = await prisma.discussionboard_post.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_posts and only return the `id`\n     * const discussionboard_postWithIdOnly = await prisma.discussionboard_post.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_postUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_postUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_post.\n     * @param {discussionboard_postUpsertArgs} args - Arguments to update or create a Discussionboard_post.\n     * @example\n     * // Update or create a Discussionboard_post\n     * const discussionboard_post = await prisma.discussionboard_post.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_post\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_post we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_postUpsertArgs>(args: SelectSubset<T, discussionboard_postUpsertArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_posts.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_postCountArgs} args - Arguments to filter Discussionboard_posts to count.\n     * @example\n     * // Count the number of Discussionboard_posts\n     * const count = await prisma.discussionboard_post.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_posts we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_postCountArgs>(\n      args?: Subset<T, discussionboard_postCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_postCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_post.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_postAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_postAggregateArgs>(args: Subset<T, Discussionboard_postAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_postAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_post.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_postGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_postGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_postGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_postGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_postGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_postGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_post model\n   */\n  readonly fields: discussionboard_postFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_post.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_postClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    member<T extends discussionboard_memberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_memberDefaultArgs<ExtArgs>>): Prisma__discussionboard_memberClient<$Result.GetResult<Prisma.$discussionboard_memberPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    category<T extends discussionboard_post_categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post_categoryDefaultArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    discussionboard_post_attachment<T extends discussionboard_post$discussionboard_post_attachmentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_post_attachmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_comments<T extends discussionboard_post$discussionboard_commentsArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_likes<T extends discussionboard_post$discussionboard_likesArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_reports<T extends discussionboard_post$discussionboard_reportsArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_moderation_action<T extends discussionboard_post$discussionboard_moderation_actionArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_moderation_actionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_report_review<T extends discussionboard_post$discussionboard_report_reviewArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_report_reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_warning<T extends discussionboard_post$discussionboard_warningArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_warningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_notification<T extends discussionboard_post$discussionboard_notificationArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post$discussionboard_notificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_post model\n   */\n  interface discussionboard_postFieldRefs {\n    readonly id: FieldRef<\"discussionboard_post\", 'String'>\n    readonly author_member_id: FieldRef<\"discussionboard_post\", 'String'>\n    readonly category_id: FieldRef<\"discussionboard_post\", 'String'>\n    readonly title: FieldRef<\"discussionboard_post\", 'String'>\n    readonly body: FieldRef<\"discussionboard_post\", 'String'>\n    readonly created_at: FieldRef<\"discussionboard_post\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussionboard_post\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussionboard_post\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_post findUnique\n   */\n  export type discussionboard_postFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post to fetch.\n     */\n    where: discussionboard_postWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post findUniqueOrThrow\n   */\n  export type discussionboard_postFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post to fetch.\n     */\n    where: discussionboard_postWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post findFirst\n   */\n  export type discussionboard_postFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post to fetch.\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_posts to fetch.\n     */\n    orderBy?: discussionboard_postOrderByWithRelationInput | discussionboard_postOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_posts.\n     */\n    cursor?: discussionboard_postWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_posts from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_posts.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_posts.\n     */\n    distinct?: Discussionboard_postScalarFieldEnum | Discussionboard_postScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post findFirstOrThrow\n   */\n  export type discussionboard_postFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post to fetch.\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_posts to fetch.\n     */\n    orderBy?: discussionboard_postOrderByWithRelationInput | discussionboard_postOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_posts.\n     */\n    cursor?: discussionboard_postWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_posts from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_posts.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_posts.\n     */\n    distinct?: Discussionboard_postScalarFieldEnum | Discussionboard_postScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post findMany\n   */\n  export type discussionboard_postFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_posts to fetch.\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_posts to fetch.\n     */\n    orderBy?: discussionboard_postOrderByWithRelationInput | discussionboard_postOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_posts.\n     */\n    cursor?: discussionboard_postWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_posts from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_posts.\n     */\n    skip?: number\n    distinct?: Discussionboard_postScalarFieldEnum | Discussionboard_postScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post create\n   */\n  export type discussionboard_postCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_post.\n     */\n    data: XOR<discussionboard_postCreateInput, discussionboard_postUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_post createMany\n   */\n  export type discussionboard_postCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_posts.\n     */\n    data: discussionboard_postCreateManyInput | discussionboard_postCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_post createManyAndReturn\n   */\n  export type discussionboard_postCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_posts.\n     */\n    data: discussionboard_postCreateManyInput | discussionboard_postCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_post update\n   */\n  export type discussionboard_postUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_post.\n     */\n    data: XOR<discussionboard_postUpdateInput, discussionboard_postUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_post to update.\n     */\n    where: discussionboard_postWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post updateMany\n   */\n  export type discussionboard_postUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_posts.\n     */\n    data: XOR<discussionboard_postUpdateManyMutationInput, discussionboard_postUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_posts to update\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * Limit how many discussionboard_posts to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post updateManyAndReturn\n   */\n  export type discussionboard_postUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_posts.\n     */\n    data: XOR<discussionboard_postUpdateManyMutationInput, discussionboard_postUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_posts to update\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * Limit how many discussionboard_posts to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_post upsert\n   */\n  export type discussionboard_postUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_post to update in case it exists.\n     */\n    where: discussionboard_postWhereUniqueInput\n    /**\n     * In case the discussionboard_post found by the `where` argument doesn't exist, create a new discussionboard_post with this data.\n     */\n    create: XOR<discussionboard_postCreateInput, discussionboard_postUncheckedCreateInput>\n    /**\n     * In case the discussionboard_post was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_postUpdateInput, discussionboard_postUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_post delete\n   */\n  export type discussionboard_postDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_post to delete.\n     */\n    where: discussionboard_postWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post deleteMany\n   */\n  export type discussionboard_postDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_posts to delete\n     */\n    where?: discussionboard_postWhereInput\n    /**\n     * Limit how many discussionboard_posts to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post.discussionboard_post_attachment\n   */\n  export type discussionboard_post$discussionboard_post_attachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    where?: discussionboard_post_attachmentWhereInput\n    orderBy?: discussionboard_post_attachmentOrderByWithRelationInput | discussionboard_post_attachmentOrderByWithRelationInput[]\n    cursor?: discussionboard_post_attachmentWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_post_attachmentScalarFieldEnum | Discussionboard_post_attachmentScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_comments\n   */\n  export type discussionboard_post$discussionboard_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    cursor?: discussionboard_commentsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_commentsScalarFieldEnum | Discussionboard_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_likes\n   */\n  export type discussionboard_post$discussionboard_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    where?: discussionboard_likesWhereInput\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    cursor?: discussionboard_likesWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_likesScalarFieldEnum | Discussionboard_likesScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_reports\n   */\n  export type discussionboard_post$discussionboard_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    where?: discussionboard_reportsWhereInput\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    cursor?: discussionboard_reportsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_reportsScalarFieldEnum | Discussionboard_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_moderation_action\n   */\n  export type discussionboard_post$discussionboard_moderation_actionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    where?: discussionboard_moderation_actionWhereInput\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_report_review\n   */\n  export type discussionboard_post$discussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    where?: discussionboard_report_reviewWhereInput\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_warning\n   */\n  export type discussionboard_post$discussionboard_warningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    where?: discussionboard_warningWhereInput\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    cursor?: discussionboard_warningWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post.discussionboard_notification\n   */\n  export type discussionboard_post$discussionboard_notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    where?: discussionboard_notificationWhereInput\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    cursor?: discussionboard_notificationWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post without action\n   */\n  export type discussionboard_postDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_post_category\n   */\n\n  export type AggregateDiscussionboard_post_category = {\n    _count: Discussionboard_post_categoryCountAggregateOutputType | null\n    _min: Discussionboard_post_categoryMinAggregateOutputType | null\n    _max: Discussionboard_post_categoryMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_post_categoryMinAggregateOutputType = {\n    id: string | null\n    name: string | null\n    description: string | null\n  }\n\n  export type Discussionboard_post_categoryMaxAggregateOutputType = {\n    id: string | null\n    name: string | null\n    description: string | null\n  }\n\n  export type Discussionboard_post_categoryCountAggregateOutputType = {\n    id: number\n    name: number\n    description: number\n    _all: number\n  }\n\n\n  export type Discussionboard_post_categoryMinAggregateInputType = {\n    id?: true\n    name?: true\n    description?: true\n  }\n\n  export type Discussionboard_post_categoryMaxAggregateInputType = {\n    id?: true\n    name?: true\n    description?: true\n  }\n\n  export type Discussionboard_post_categoryCountAggregateInputType = {\n    id?: true\n    name?: true\n    description?: true\n    _all?: true\n  }\n\n  export type Discussionboard_post_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post_category to aggregate.\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_categories to fetch.\n     */\n    orderBy?: discussionboard_post_categoryOrderByWithRelationInput | discussionboard_post_categoryOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_post_categoryWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_categories.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_post_categories\n    **/\n    _count?: true | Discussionboard_post_categoryCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_post_categoryMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_post_categoryMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_post_categoryAggregateType<T extends Discussionboard_post_categoryAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_post_category]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_post_category[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_post_category[P]>\n  }\n\n\n\n\n  export type discussionboard_post_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_post_categoryWhereInput\n    orderBy?: discussionboard_post_categoryOrderByWithAggregationInput | discussionboard_post_categoryOrderByWithAggregationInput[]\n    by: Discussionboard_post_categoryScalarFieldEnum[] | Discussionboard_post_categoryScalarFieldEnum\n    having?: discussionboard_post_categoryScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_post_categoryCountAggregateInputType | true\n    _min?: Discussionboard_post_categoryMinAggregateInputType\n    _max?: Discussionboard_post_categoryMaxAggregateInputType\n  }\n\n  export type Discussionboard_post_categoryGroupByOutputType = {\n    id: string\n    name: string\n    description: string | null\n    _count: Discussionboard_post_categoryCountAggregateOutputType | null\n    _min: Discussionboard_post_categoryMinAggregateOutputType | null\n    _max: Discussionboard_post_categoryMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_post_categoryGroupByPayload<T extends discussionboard_post_categoryGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_post_categoryGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_post_categoryGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_post_categoryGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_post_categoryGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_post_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    description?: boolean\n    discussionboard_post?: boolean | discussionboard_post_category$discussionboard_postArgs<ExtArgs>\n    _count?: boolean | Discussionboard_post_categoryCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post_category\"]>\n\n  export type discussionboard_post_categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    description?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_post_category\"]>\n\n  export type discussionboard_post_categorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    description?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_post_category\"]>\n\n  export type discussionboard_post_categorySelectScalar = {\n    id?: boolean\n    name?: boolean\n    description?: boolean\n  }\n\n  export type discussionboard_post_categoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"name\" | \"description\", ExtArgs[\"result\"][\"discussionboard_post_category\"]>\n  export type discussionboard_post_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    discussionboard_post?: boolean | discussionboard_post_category$discussionboard_postArgs<ExtArgs>\n    _count?: boolean | Discussionboard_post_categoryCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_post_categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n  export type discussionboard_post_categoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}\n\n  export type $discussionboard_post_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_post_category\"\n    objects: {\n      discussionboard_post: Prisma.$discussionboard_postPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Uniquely identifies category; normalization ensures only atomic references used.\n       */\n      id: string\n      /**\n       * [Category Name] - Per Section 3.2; e.g., 'Economics'. Used for filters/views. Unique and non-null.\n       */\n      name: string\n      /**\n       * [Category Description] - Extended human-readable info for admin/member UIs. Optional, normalized.\n       */\n      description: string | null\n    }, ExtArgs[\"result\"][\"discussionboard_post_category\"]>\n    composites: {}\n  }\n\n  type discussionboard_post_categoryGetPayload<S extends boolean | null | undefined | discussionboard_post_categoryDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_post_categoryPayload, S>\n\n  type discussionboard_post_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_post_categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_post_categoryCountAggregateInputType | true\n    }\n\n  export interface discussionboard_post_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_post_category'], meta: { name: 'discussionboard_post_category' } }\n    /**\n     * Find zero or one Discussionboard_post_category that matches the filter.\n     * @param {discussionboard_post_categoryFindUniqueArgs} args - Arguments to find a Discussionboard_post_category\n     * @example\n     * // Get one Discussionboard_post_category\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_post_categoryFindUniqueArgs>(args: SelectSubset<T, discussionboard_post_categoryFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_post_category that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_post_categoryFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_post_category\n     * @example\n     * // Get one Discussionboard_post_category\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_post_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_post_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post_category that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_categoryFindFirstArgs} args - Arguments to find a Discussionboard_post_category\n     * @example\n     * // Get one Discussionboard_post_category\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_post_categoryFindFirstArgs>(args?: SelectSubset<T, discussionboard_post_categoryFindFirstArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post_category that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_categoryFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_post_category\n     * @example\n     * // Get one Discussionboard_post_category\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_post_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_post_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_post_categories that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_categoryFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_post_categories\n     * const discussionboard_post_categories = await prisma.discussionboard_post_category.findMany()\n     * \n     * // Get first 10 Discussionboard_post_categories\n     * const discussionboard_post_categories = await prisma.discussionboard_post_category.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_post_categoryWithIdOnly = await prisma.discussionboard_post_category.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_post_categoryFindManyArgs>(args?: SelectSubset<T, discussionboard_post_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_post_category.\n     * @param {discussionboard_post_categoryCreateArgs} args - Arguments to create a Discussionboard_post_category.\n     * @example\n     * // Create one Discussionboard_post_category\n     * const Discussionboard_post_category = await prisma.discussionboard_post_category.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_post_category\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_post_categoryCreateArgs>(args: SelectSubset<T, discussionboard_post_categoryCreateArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_post_categories.\n     * @param {discussionboard_post_categoryCreateManyArgs} args - Arguments to create many Discussionboard_post_categories.\n     * @example\n     * // Create many Discussionboard_post_categories\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_post_categoryCreateManyArgs>(args?: SelectSubset<T, discussionboard_post_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_post_categories and returns the data saved in the database.\n     * @param {discussionboard_post_categoryCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_post_categories.\n     * @example\n     * // Create many Discussionboard_post_categories\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_post_categories and only return the `id`\n     * const discussionboard_post_categoryWithIdOnly = await prisma.discussionboard_post_category.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_post_categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_post_categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_post_category.\n     * @param {discussionboard_post_categoryDeleteArgs} args - Arguments to delete one Discussionboard_post_category.\n     * @example\n     * // Delete one Discussionboard_post_category\n     * const Discussionboard_post_category = await prisma.discussionboard_post_category.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_post_category\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_post_categoryDeleteArgs>(args: SelectSubset<T, discussionboard_post_categoryDeleteArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_post_category.\n     * @param {discussionboard_post_categoryUpdateArgs} args - Arguments to update one Discussionboard_post_category.\n     * @example\n     * // Update one Discussionboard_post_category\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_post_categoryUpdateArgs>(args: SelectSubset<T, discussionboard_post_categoryUpdateArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_post_categories.\n     * @param {discussionboard_post_categoryDeleteManyArgs} args - Arguments to filter Discussionboard_post_categories to delete.\n     * @example\n     * // Delete a few Discussionboard_post_categories\n     * const { count } = await prisma.discussionboard_post_category.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_post_categoryDeleteManyArgs>(args?: SelectSubset<T, discussionboard_post_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_post_categories.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_categoryUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_post_categories\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_post_categoryUpdateManyArgs>(args: SelectSubset<T, discussionboard_post_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_post_categories and returns the data updated in the database.\n     * @param {discussionboard_post_categoryUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_post_categories.\n     * @example\n     * // Update many Discussionboard_post_categories\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_post_categories and only return the `id`\n     * const discussionboard_post_categoryWithIdOnly = await prisma.discussionboard_post_category.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_post_categoryUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_post_categoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_post_category.\n     * @param {discussionboard_post_categoryUpsertArgs} args - Arguments to update or create a Discussionboard_post_category.\n     * @example\n     * // Update or create a Discussionboard_post_category\n     * const discussionboard_post_category = await prisma.discussionboard_post_category.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_post_category\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_post_category we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_post_categoryUpsertArgs>(args: SelectSubset<T, discussionboard_post_categoryUpsertArgs<ExtArgs>>): Prisma__discussionboard_post_categoryClient<$Result.GetResult<Prisma.$discussionboard_post_categoryPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_post_categories.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_categoryCountArgs} args - Arguments to filter Discussionboard_post_categories to count.\n     * @example\n     * // Count the number of Discussionboard_post_categories\n     * const count = await prisma.discussionboard_post_category.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_post_categories we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_post_categoryCountArgs>(\n      args?: Subset<T, discussionboard_post_categoryCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_post_categoryCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_post_category.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_post_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_post_categoryAggregateArgs>(args: Subset<T, Discussionboard_post_categoryAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_post_categoryAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_post_category.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_categoryGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_post_categoryGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_post_categoryGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_post_categoryGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_post_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_post_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_post_category model\n   */\n  readonly fields: discussionboard_post_categoryFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_post_category.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_post_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    discussionboard_post<T extends discussionboard_post_category$discussionboard_postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_post_category$discussionboard_postArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_post_category model\n   */\n  interface discussionboard_post_categoryFieldRefs {\n    readonly id: FieldRef<\"discussionboard_post_category\", 'String'>\n    readonly name: FieldRef<\"discussionboard_post_category\", 'String'>\n    readonly description: FieldRef<\"discussionboard_post_category\", 'String'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_post_category findUnique\n   */\n  export type discussionboard_post_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_category to fetch.\n     */\n    where: discussionboard_post_categoryWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_category findUniqueOrThrow\n   */\n  export type discussionboard_post_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_category to fetch.\n     */\n    where: discussionboard_post_categoryWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_category findFirst\n   */\n  export type discussionboard_post_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_category to fetch.\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_categories to fetch.\n     */\n    orderBy?: discussionboard_post_categoryOrderByWithRelationInput | discussionboard_post_categoryOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_post_categories.\n     */\n    cursor?: discussionboard_post_categoryWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_categories.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_post_categories.\n     */\n    distinct?: Discussionboard_post_categoryScalarFieldEnum | Discussionboard_post_categoryScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_category findFirstOrThrow\n   */\n  export type discussionboard_post_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_category to fetch.\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_categories to fetch.\n     */\n    orderBy?: discussionboard_post_categoryOrderByWithRelationInput | discussionboard_post_categoryOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_post_categories.\n     */\n    cursor?: discussionboard_post_categoryWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_categories.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_post_categories.\n     */\n    distinct?: Discussionboard_post_categoryScalarFieldEnum | Discussionboard_post_categoryScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_category findMany\n   */\n  export type discussionboard_post_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_categories to fetch.\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_categories to fetch.\n     */\n    orderBy?: discussionboard_post_categoryOrderByWithRelationInput | discussionboard_post_categoryOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_post_categories.\n     */\n    cursor?: discussionboard_post_categoryWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_categories from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_categories.\n     */\n    skip?: number\n    distinct?: Discussionboard_post_categoryScalarFieldEnum | Discussionboard_post_categoryScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_category create\n   */\n  export type discussionboard_post_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_post_category.\n     */\n    data: XOR<discussionboard_post_categoryCreateInput, discussionboard_post_categoryUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_post_category createMany\n   */\n  export type discussionboard_post_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_post_categories.\n     */\n    data: discussionboard_post_categoryCreateManyInput | discussionboard_post_categoryCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_post_category createManyAndReturn\n   */\n  export type discussionboard_post_categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_post_categories.\n     */\n    data: discussionboard_post_categoryCreateManyInput | discussionboard_post_categoryCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_post_category update\n   */\n  export type discussionboard_post_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_post_category.\n     */\n    data: XOR<discussionboard_post_categoryUpdateInput, discussionboard_post_categoryUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_post_category to update.\n     */\n    where: discussionboard_post_categoryWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_category updateMany\n   */\n  export type discussionboard_post_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_post_categories.\n     */\n    data: XOR<discussionboard_post_categoryUpdateManyMutationInput, discussionboard_post_categoryUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_post_categories to update\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * Limit how many discussionboard_post_categories to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_category updateManyAndReturn\n   */\n  export type discussionboard_post_categoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_post_categories.\n     */\n    data: XOR<discussionboard_post_categoryUpdateManyMutationInput, discussionboard_post_categoryUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_post_categories to update\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * Limit how many discussionboard_post_categories to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_category upsert\n   */\n  export type discussionboard_post_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_post_category to update in case it exists.\n     */\n    where: discussionboard_post_categoryWhereUniqueInput\n    /**\n     * In case the discussionboard_post_category found by the `where` argument doesn't exist, create a new discussionboard_post_category with this data.\n     */\n    create: XOR<discussionboard_post_categoryCreateInput, discussionboard_post_categoryUncheckedCreateInput>\n    /**\n     * In case the discussionboard_post_category was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_post_categoryUpdateInput, discussionboard_post_categoryUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_post_category delete\n   */\n  export type discussionboard_post_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_post_category to delete.\n     */\n    where: discussionboard_post_categoryWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_category deleteMany\n   */\n  export type discussionboard_post_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post_categories to delete\n     */\n    where?: discussionboard_post_categoryWhereInput\n    /**\n     * Limit how many discussionboard_post_categories to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_category.discussionboard_post\n   */\n  export type discussionboard_post_category$discussionboard_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n    orderBy?: discussionboard_postOrderByWithRelationInput | discussionboard_postOrderByWithRelationInput[]\n    cursor?: discussionboard_postWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_postScalarFieldEnum | Discussionboard_postScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_category without action\n   */\n  export type discussionboard_post_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_category\n     */\n    select?: discussionboard_post_categorySelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_category\n     */\n    omit?: discussionboard_post_categoryOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_categoryInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_post_tag\n   */\n\n  export type AggregateDiscussionboard_post_tag = {\n    _count: Discussionboard_post_tagCountAggregateOutputType | null\n    _min: Discussionboard_post_tagMinAggregateOutputType | null\n    _max: Discussionboard_post_tagMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_post_tagMinAggregateOutputType = {\n    id: string | null\n    name: string | null\n  }\n\n  export type Discussionboard_post_tagMaxAggregateOutputType = {\n    id: string | null\n    name: string | null\n  }\n\n  export type Discussionboard_post_tagCountAggregateOutputType = {\n    id: number\n    name: number\n    _all: number\n  }\n\n\n  export type Discussionboard_post_tagMinAggregateInputType = {\n    id?: true\n    name?: true\n  }\n\n  export type Discussionboard_post_tagMaxAggregateInputType = {\n    id?: true\n    name?: true\n  }\n\n  export type Discussionboard_post_tagCountAggregateInputType = {\n    id?: true\n    name?: true\n    _all?: true\n  }\n\n  export type Discussionboard_post_tagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post_tag to aggregate.\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_tags to fetch.\n     */\n    orderBy?: discussionboard_post_tagOrderByWithRelationInput | discussionboard_post_tagOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_post_tagWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_tags from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_tags.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_post_tags\n    **/\n    _count?: true | Discussionboard_post_tagCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_post_tagMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_post_tagMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_post_tagAggregateType<T extends Discussionboard_post_tagAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_post_tag]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_post_tag[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_post_tag[P]>\n  }\n\n\n\n\n  export type discussionboard_post_tagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_post_tagWhereInput\n    orderBy?: discussionboard_post_tagOrderByWithAggregationInput | discussionboard_post_tagOrderByWithAggregationInput[]\n    by: Discussionboard_post_tagScalarFieldEnum[] | Discussionboard_post_tagScalarFieldEnum\n    having?: discussionboard_post_tagScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_post_tagCountAggregateInputType | true\n    _min?: Discussionboard_post_tagMinAggregateInputType\n    _max?: Discussionboard_post_tagMaxAggregateInputType\n  }\n\n  export type Discussionboard_post_tagGroupByOutputType = {\n    id: string\n    name: string\n    _count: Discussionboard_post_tagCountAggregateOutputType | null\n    _min: Discussionboard_post_tagMinAggregateOutputType | null\n    _max: Discussionboard_post_tagMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_post_tagGroupByPayload<T extends discussionboard_post_tagGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_post_tagGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_post_tagGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_post_tagGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_post_tagGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_post_tagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_post_tag\"]>\n\n  export type discussionboard_post_tagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_post_tag\"]>\n\n  export type discussionboard_post_tagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_post_tag\"]>\n\n  export type discussionboard_post_tagSelectScalar = {\n    id?: boolean\n    name?: boolean\n  }\n\n  export type discussionboard_post_tagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"name\", ExtArgs[\"result\"][\"discussionboard_post_tag\"]>\n\n  export type $discussionboard_post_tagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_post_tag\"\n    objects: {}\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Unique atomic tag identity.\n       */\n      id: string\n      /**\n       * [Tag Name] - Required label, e.g. 'inflation'. Uniqueness enforced; normalized/atomic.\n       */\n      name: string\n    }, ExtArgs[\"result\"][\"discussionboard_post_tag\"]>\n    composites: {}\n  }\n\n  type discussionboard_post_tagGetPayload<S extends boolean | null | undefined | discussionboard_post_tagDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_post_tagPayload, S>\n\n  type discussionboard_post_tagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_post_tagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_post_tagCountAggregateInputType | true\n    }\n\n  export interface discussionboard_post_tagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_post_tag'], meta: { name: 'discussionboard_post_tag' } }\n    /**\n     * Find zero or one Discussionboard_post_tag that matches the filter.\n     * @param {discussionboard_post_tagFindUniqueArgs} args - Arguments to find a Discussionboard_post_tag\n     * @example\n     * // Get one Discussionboard_post_tag\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_post_tagFindUniqueArgs>(args: SelectSubset<T, discussionboard_post_tagFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_post_tag that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_post_tagFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_post_tag\n     * @example\n     * // Get one Discussionboard_post_tag\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_post_tagFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_post_tagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post_tag that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_tagFindFirstArgs} args - Arguments to find a Discussionboard_post_tag\n     * @example\n     * // Get one Discussionboard_post_tag\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_post_tagFindFirstArgs>(args?: SelectSubset<T, discussionboard_post_tagFindFirstArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post_tag that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_tagFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_post_tag\n     * @example\n     * // Get one Discussionboard_post_tag\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_post_tagFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_post_tagFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_post_tags that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_tagFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_post_tags\n     * const discussionboard_post_tags = await prisma.discussionboard_post_tag.findMany()\n     * \n     * // Get first 10 Discussionboard_post_tags\n     * const discussionboard_post_tags = await prisma.discussionboard_post_tag.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_post_tagWithIdOnly = await prisma.discussionboard_post_tag.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_post_tagFindManyArgs>(args?: SelectSubset<T, discussionboard_post_tagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_post_tag.\n     * @param {discussionboard_post_tagCreateArgs} args - Arguments to create a Discussionboard_post_tag.\n     * @example\n     * // Create one Discussionboard_post_tag\n     * const Discussionboard_post_tag = await prisma.discussionboard_post_tag.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_post_tag\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_post_tagCreateArgs>(args: SelectSubset<T, discussionboard_post_tagCreateArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_post_tags.\n     * @param {discussionboard_post_tagCreateManyArgs} args - Arguments to create many Discussionboard_post_tags.\n     * @example\n     * // Create many Discussionboard_post_tags\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_post_tagCreateManyArgs>(args?: SelectSubset<T, discussionboard_post_tagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_post_tags and returns the data saved in the database.\n     * @param {discussionboard_post_tagCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_post_tags.\n     * @example\n     * // Create many Discussionboard_post_tags\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_post_tags and only return the `id`\n     * const discussionboard_post_tagWithIdOnly = await prisma.discussionboard_post_tag.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_post_tagCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_post_tagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_post_tag.\n     * @param {discussionboard_post_tagDeleteArgs} args - Arguments to delete one Discussionboard_post_tag.\n     * @example\n     * // Delete one Discussionboard_post_tag\n     * const Discussionboard_post_tag = await prisma.discussionboard_post_tag.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_post_tag\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_post_tagDeleteArgs>(args: SelectSubset<T, discussionboard_post_tagDeleteArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_post_tag.\n     * @param {discussionboard_post_tagUpdateArgs} args - Arguments to update one Discussionboard_post_tag.\n     * @example\n     * // Update one Discussionboard_post_tag\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_post_tagUpdateArgs>(args: SelectSubset<T, discussionboard_post_tagUpdateArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_post_tags.\n     * @param {discussionboard_post_tagDeleteManyArgs} args - Arguments to filter Discussionboard_post_tags to delete.\n     * @example\n     * // Delete a few Discussionboard_post_tags\n     * const { count } = await prisma.discussionboard_post_tag.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_post_tagDeleteManyArgs>(args?: SelectSubset<T, discussionboard_post_tagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_post_tags.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_tagUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_post_tags\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_post_tagUpdateManyArgs>(args: SelectSubset<T, discussionboard_post_tagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_post_tags and returns the data updated in the database.\n     * @param {discussionboard_post_tagUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_post_tags.\n     * @example\n     * // Update many Discussionboard_post_tags\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_post_tags and only return the `id`\n     * const discussionboard_post_tagWithIdOnly = await prisma.discussionboard_post_tag.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_post_tagUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_post_tagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_post_tag.\n     * @param {discussionboard_post_tagUpsertArgs} args - Arguments to update or create a Discussionboard_post_tag.\n     * @example\n     * // Update or create a Discussionboard_post_tag\n     * const discussionboard_post_tag = await prisma.discussionboard_post_tag.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_post_tag\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_post_tag we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_post_tagUpsertArgs>(args: SelectSubset<T, discussionboard_post_tagUpsertArgs<ExtArgs>>): Prisma__discussionboard_post_tagClient<$Result.GetResult<Prisma.$discussionboard_post_tagPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_post_tags.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_tagCountArgs} args - Arguments to filter Discussionboard_post_tags to count.\n     * @example\n     * // Count the number of Discussionboard_post_tags\n     * const count = await prisma.discussionboard_post_tag.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_post_tags we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_post_tagCountArgs>(\n      args?: Subset<T, discussionboard_post_tagCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_post_tagCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_post_tag.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_post_tagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_post_tagAggregateArgs>(args: Subset<T, Discussionboard_post_tagAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_post_tagAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_post_tag.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_tagGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_post_tagGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_post_tagGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_post_tagGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_post_tagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_post_tagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_post_tag model\n   */\n  readonly fields: discussionboard_post_tagFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_post_tag.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_post_tagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_post_tag model\n   */\n  interface discussionboard_post_tagFieldRefs {\n    readonly id: FieldRef<\"discussionboard_post_tag\", 'String'>\n    readonly name: FieldRef<\"discussionboard_post_tag\", 'String'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_post_tag findUnique\n   */\n  export type discussionboard_post_tagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_tag to fetch.\n     */\n    where: discussionboard_post_tagWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_tag findUniqueOrThrow\n   */\n  export type discussionboard_post_tagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_tag to fetch.\n     */\n    where: discussionboard_post_tagWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_tag findFirst\n   */\n  export type discussionboard_post_tagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_tag to fetch.\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_tags to fetch.\n     */\n    orderBy?: discussionboard_post_tagOrderByWithRelationInput | discussionboard_post_tagOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_post_tags.\n     */\n    cursor?: discussionboard_post_tagWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_tags from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_tags.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_post_tags.\n     */\n    distinct?: Discussionboard_post_tagScalarFieldEnum | Discussionboard_post_tagScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_tag findFirstOrThrow\n   */\n  export type discussionboard_post_tagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_tag to fetch.\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_tags to fetch.\n     */\n    orderBy?: discussionboard_post_tagOrderByWithRelationInput | discussionboard_post_tagOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_post_tags.\n     */\n    cursor?: discussionboard_post_tagWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_tags from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_tags.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_post_tags.\n     */\n    distinct?: Discussionboard_post_tagScalarFieldEnum | Discussionboard_post_tagScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_tag findMany\n   */\n  export type discussionboard_post_tagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_tags to fetch.\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_tags to fetch.\n     */\n    orderBy?: discussionboard_post_tagOrderByWithRelationInput | discussionboard_post_tagOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_post_tags.\n     */\n    cursor?: discussionboard_post_tagWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_tags from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_tags.\n     */\n    skip?: number\n    distinct?: Discussionboard_post_tagScalarFieldEnum | Discussionboard_post_tagScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_tag create\n   */\n  export type discussionboard_post_tagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_post_tag.\n     */\n    data: XOR<discussionboard_post_tagCreateInput, discussionboard_post_tagUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_post_tag createMany\n   */\n  export type discussionboard_post_tagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_post_tags.\n     */\n    data: discussionboard_post_tagCreateManyInput | discussionboard_post_tagCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_post_tag createManyAndReturn\n   */\n  export type discussionboard_post_tagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_post_tags.\n     */\n    data: discussionboard_post_tagCreateManyInput | discussionboard_post_tagCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_post_tag update\n   */\n  export type discussionboard_post_tagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_post_tag.\n     */\n    data: XOR<discussionboard_post_tagUpdateInput, discussionboard_post_tagUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_post_tag to update.\n     */\n    where: discussionboard_post_tagWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_tag updateMany\n   */\n  export type discussionboard_post_tagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_post_tags.\n     */\n    data: XOR<discussionboard_post_tagUpdateManyMutationInput, discussionboard_post_tagUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_post_tags to update\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * Limit how many discussionboard_post_tags to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_tag updateManyAndReturn\n   */\n  export type discussionboard_post_tagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_post_tags.\n     */\n    data: XOR<discussionboard_post_tagUpdateManyMutationInput, discussionboard_post_tagUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_post_tags to update\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * Limit how many discussionboard_post_tags to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_tag upsert\n   */\n  export type discussionboard_post_tagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_post_tag to update in case it exists.\n     */\n    where: discussionboard_post_tagWhereUniqueInput\n    /**\n     * In case the discussionboard_post_tag found by the `where` argument doesn't exist, create a new discussionboard_post_tag with this data.\n     */\n    create: XOR<discussionboard_post_tagCreateInput, discussionboard_post_tagUncheckedCreateInput>\n    /**\n     * In case the discussionboard_post_tag was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_post_tagUpdateInput, discussionboard_post_tagUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_post_tag delete\n   */\n  export type discussionboard_post_tagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n    /**\n     * Filter which discussionboard_post_tag to delete.\n     */\n    where: discussionboard_post_tagWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_tag deleteMany\n   */\n  export type discussionboard_post_tagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post_tags to delete\n     */\n    where?: discussionboard_post_tagWhereInput\n    /**\n     * Limit how many discussionboard_post_tags to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_tag without action\n   */\n  export type discussionboard_post_tagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_tag\n     */\n    select?: discussionboard_post_tagSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_tag\n     */\n    omit?: discussionboard_post_tagOmit<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_post_attachment\n   */\n\n  export type AggregateDiscussionboard_post_attachment = {\n    _count: Discussionboard_post_attachmentCountAggregateOutputType | null\n    _min: Discussionboard_post_attachmentMinAggregateOutputType | null\n    _max: Discussionboard_post_attachmentMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_post_attachmentMinAggregateOutputType = {\n    id: string | null\n    post_id: string | null\n    file_url: string | null\n    file_type: string | null\n    uploaded_at: Date | null\n  }\n\n  export type Discussionboard_post_attachmentMaxAggregateOutputType = {\n    id: string | null\n    post_id: string | null\n    file_url: string | null\n    file_type: string | null\n    uploaded_at: Date | null\n  }\n\n  export type Discussionboard_post_attachmentCountAggregateOutputType = {\n    id: number\n    post_id: number\n    file_url: number\n    file_type: number\n    uploaded_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_post_attachmentMinAggregateInputType = {\n    id?: true\n    post_id?: true\n    file_url?: true\n    file_type?: true\n    uploaded_at?: true\n  }\n\n  export type Discussionboard_post_attachmentMaxAggregateInputType = {\n    id?: true\n    post_id?: true\n    file_url?: true\n    file_type?: true\n    uploaded_at?: true\n  }\n\n  export type Discussionboard_post_attachmentCountAggregateInputType = {\n    id?: true\n    post_id?: true\n    file_url?: true\n    file_type?: true\n    uploaded_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_post_attachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post_attachment to aggregate.\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_attachments to fetch.\n     */\n    orderBy?: discussionboard_post_attachmentOrderByWithRelationInput | discussionboard_post_attachmentOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_post_attachmentWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_attachments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_attachments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_post_attachments\n    **/\n    _count?: true | Discussionboard_post_attachmentCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_post_attachmentMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_post_attachmentMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_post_attachmentAggregateType<T extends Discussionboard_post_attachmentAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_post_attachment]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_post_attachment[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_post_attachment[P]>\n  }\n\n\n\n\n  export type discussionboard_post_attachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_post_attachmentWhereInput\n    orderBy?: discussionboard_post_attachmentOrderByWithAggregationInput | discussionboard_post_attachmentOrderByWithAggregationInput[]\n    by: Discussionboard_post_attachmentScalarFieldEnum[] | Discussionboard_post_attachmentScalarFieldEnum\n    having?: discussionboard_post_attachmentScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_post_attachmentCountAggregateInputType | true\n    _min?: Discussionboard_post_attachmentMinAggregateInputType\n    _max?: Discussionboard_post_attachmentMaxAggregateInputType\n  }\n\n  export type Discussionboard_post_attachmentGroupByOutputType = {\n    id: string\n    post_id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date\n    _count: Discussionboard_post_attachmentCountAggregateOutputType | null\n    _min: Discussionboard_post_attachmentMinAggregateOutputType | null\n    _max: Discussionboard_post_attachmentMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_post_attachmentGroupByPayload<T extends discussionboard_post_attachmentGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_post_attachmentGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_post_attachmentGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_post_attachmentGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_post_attachmentGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_post_attachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    post_id?: boolean\n    file_url?: boolean\n    file_type?: boolean\n    uploaded_at?: boolean\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post_attachment\"]>\n\n  export type discussionboard_post_attachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    post_id?: boolean\n    file_url?: boolean\n    file_type?: boolean\n    uploaded_at?: boolean\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post_attachment\"]>\n\n  export type discussionboard_post_attachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    post_id?: boolean\n    file_url?: boolean\n    file_type?: boolean\n    uploaded_at?: boolean\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_post_attachment\"]>\n\n  export type discussionboard_post_attachmentSelectScalar = {\n    id?: boolean\n    post_id?: boolean\n    file_url?: boolean\n    file_type?: boolean\n    uploaded_at?: boolean\n  }\n\n  export type discussionboard_post_attachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"post_id\" | \"file_url\" | \"file_type\" | \"uploaded_at\", ExtArgs[\"result\"][\"discussionboard_post_attachment\"]>\n  export type discussionboard_post_attachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_post_attachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_post_attachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_post_attachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_post_attachment\"\n    objects: {\n      post: Prisma.$discussionboard_postPayload<ExtArgs>\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Unique attachment identity for tracking and referencing.\n       */\n      id: string\n      /**\n       * [Post FK] - Attachment's parent post (Section 3.2). Referenced (not duplicated) for strict normalization. Cascades on post delete.\n       */\n      post_id: string\n      /**\n       * [Attachment File URL] - Atomic URI (e.g., https://cdn.site/file.jpg). Required.\n       */\n      file_url: string\n      /**\n       * [Attachment MIME Type] - e.g. 'image/jpeg'. Required; normalized for filters.\n       */\n      file_type: string\n      /**\n       * [Upload Timestamp] - Required point-in-time, supporting audit and ordering.\n       */\n      uploaded_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_post_attachment\"]>\n    composites: {}\n  }\n\n  type discussionboard_post_attachmentGetPayload<S extends boolean | null | undefined | discussionboard_post_attachmentDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_post_attachmentPayload, S>\n\n  type discussionboard_post_attachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_post_attachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_post_attachmentCountAggregateInputType | true\n    }\n\n  export interface discussionboard_post_attachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_post_attachment'], meta: { name: 'discussionboard_post_attachment' } }\n    /**\n     * Find zero or one Discussionboard_post_attachment that matches the filter.\n     * @param {discussionboard_post_attachmentFindUniqueArgs} args - Arguments to find a Discussionboard_post_attachment\n     * @example\n     * // Get one Discussionboard_post_attachment\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_post_attachmentFindUniqueArgs>(args: SelectSubset<T, discussionboard_post_attachmentFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_post_attachment that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_post_attachmentFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_post_attachment\n     * @example\n     * // Get one Discussionboard_post_attachment\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_post_attachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_post_attachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post_attachment that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_attachmentFindFirstArgs} args - Arguments to find a Discussionboard_post_attachment\n     * @example\n     * // Get one Discussionboard_post_attachment\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_post_attachmentFindFirstArgs>(args?: SelectSubset<T, discussionboard_post_attachmentFindFirstArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_post_attachment that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_attachmentFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_post_attachment\n     * @example\n     * // Get one Discussionboard_post_attachment\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_post_attachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_post_attachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_post_attachments that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_attachmentFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_post_attachments\n     * const discussionboard_post_attachments = await prisma.discussionboard_post_attachment.findMany()\n     * \n     * // Get first 10 Discussionboard_post_attachments\n     * const discussionboard_post_attachments = await prisma.discussionboard_post_attachment.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_post_attachmentWithIdOnly = await prisma.discussionboard_post_attachment.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_post_attachmentFindManyArgs>(args?: SelectSubset<T, discussionboard_post_attachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_post_attachment.\n     * @param {discussionboard_post_attachmentCreateArgs} args - Arguments to create a Discussionboard_post_attachment.\n     * @example\n     * // Create one Discussionboard_post_attachment\n     * const Discussionboard_post_attachment = await prisma.discussionboard_post_attachment.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_post_attachment\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_post_attachmentCreateArgs>(args: SelectSubset<T, discussionboard_post_attachmentCreateArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_post_attachments.\n     * @param {discussionboard_post_attachmentCreateManyArgs} args - Arguments to create many Discussionboard_post_attachments.\n     * @example\n     * // Create many Discussionboard_post_attachments\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_post_attachmentCreateManyArgs>(args?: SelectSubset<T, discussionboard_post_attachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_post_attachments and returns the data saved in the database.\n     * @param {discussionboard_post_attachmentCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_post_attachments.\n     * @example\n     * // Create many Discussionboard_post_attachments\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_post_attachments and only return the `id`\n     * const discussionboard_post_attachmentWithIdOnly = await prisma.discussionboard_post_attachment.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_post_attachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_post_attachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_post_attachment.\n     * @param {discussionboard_post_attachmentDeleteArgs} args - Arguments to delete one Discussionboard_post_attachment.\n     * @example\n     * // Delete one Discussionboard_post_attachment\n     * const Discussionboard_post_attachment = await prisma.discussionboard_post_attachment.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_post_attachment\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_post_attachmentDeleteArgs>(args: SelectSubset<T, discussionboard_post_attachmentDeleteArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_post_attachment.\n     * @param {discussionboard_post_attachmentUpdateArgs} args - Arguments to update one Discussionboard_post_attachment.\n     * @example\n     * // Update one Discussionboard_post_attachment\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_post_attachmentUpdateArgs>(args: SelectSubset<T, discussionboard_post_attachmentUpdateArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_post_attachments.\n     * @param {discussionboard_post_attachmentDeleteManyArgs} args - Arguments to filter Discussionboard_post_attachments to delete.\n     * @example\n     * // Delete a few Discussionboard_post_attachments\n     * const { count } = await prisma.discussionboard_post_attachment.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_post_attachmentDeleteManyArgs>(args?: SelectSubset<T, discussionboard_post_attachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_post_attachments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_attachmentUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_post_attachments\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_post_attachmentUpdateManyArgs>(args: SelectSubset<T, discussionboard_post_attachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_post_attachments and returns the data updated in the database.\n     * @param {discussionboard_post_attachmentUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_post_attachments.\n     * @example\n     * // Update many Discussionboard_post_attachments\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_post_attachments and only return the `id`\n     * const discussionboard_post_attachmentWithIdOnly = await prisma.discussionboard_post_attachment.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_post_attachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_post_attachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_post_attachment.\n     * @param {discussionboard_post_attachmentUpsertArgs} args - Arguments to update or create a Discussionboard_post_attachment.\n     * @example\n     * // Update or create a Discussionboard_post_attachment\n     * const discussionboard_post_attachment = await prisma.discussionboard_post_attachment.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_post_attachment\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_post_attachment we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_post_attachmentUpsertArgs>(args: SelectSubset<T, discussionboard_post_attachmentUpsertArgs<ExtArgs>>): Prisma__discussionboard_post_attachmentClient<$Result.GetResult<Prisma.$discussionboard_post_attachmentPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_post_attachments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_attachmentCountArgs} args - Arguments to filter Discussionboard_post_attachments to count.\n     * @example\n     * // Count the number of Discussionboard_post_attachments\n     * const count = await prisma.discussionboard_post_attachment.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_post_attachments we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_post_attachmentCountArgs>(\n      args?: Subset<T, discussionboard_post_attachmentCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_post_attachmentCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_post_attachment.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_post_attachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_post_attachmentAggregateArgs>(args: Subset<T, Discussionboard_post_attachmentAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_post_attachmentAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_post_attachment.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_post_attachmentGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_post_attachmentGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_post_attachmentGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_post_attachmentGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_post_attachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_post_attachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_post_attachment model\n   */\n  readonly fields: discussionboard_post_attachmentFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_post_attachment.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_post_attachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    post<T extends discussionboard_postDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_postDefaultArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_post_attachment model\n   */\n  interface discussionboard_post_attachmentFieldRefs {\n    readonly id: FieldRef<\"discussionboard_post_attachment\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_post_attachment\", 'String'>\n    readonly file_url: FieldRef<\"discussionboard_post_attachment\", 'String'>\n    readonly file_type: FieldRef<\"discussionboard_post_attachment\", 'String'>\n    readonly uploaded_at: FieldRef<\"discussionboard_post_attachment\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_post_attachment findUnique\n   */\n  export type discussionboard_post_attachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_attachment to fetch.\n     */\n    where: discussionboard_post_attachmentWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_attachment findUniqueOrThrow\n   */\n  export type discussionboard_post_attachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_attachment to fetch.\n     */\n    where: discussionboard_post_attachmentWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_attachment findFirst\n   */\n  export type discussionboard_post_attachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_attachment to fetch.\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_attachments to fetch.\n     */\n    orderBy?: discussionboard_post_attachmentOrderByWithRelationInput | discussionboard_post_attachmentOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_post_attachments.\n     */\n    cursor?: discussionboard_post_attachmentWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_attachments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_attachments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_post_attachments.\n     */\n    distinct?: Discussionboard_post_attachmentScalarFieldEnum | Discussionboard_post_attachmentScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_attachment findFirstOrThrow\n   */\n  export type discussionboard_post_attachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_attachment to fetch.\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_attachments to fetch.\n     */\n    orderBy?: discussionboard_post_attachmentOrderByWithRelationInput | discussionboard_post_attachmentOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_post_attachments.\n     */\n    cursor?: discussionboard_post_attachmentWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_attachments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_attachments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_post_attachments.\n     */\n    distinct?: Discussionboard_post_attachmentScalarFieldEnum | Discussionboard_post_attachmentScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_attachment findMany\n   */\n  export type discussionboard_post_attachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_post_attachments to fetch.\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_post_attachments to fetch.\n     */\n    orderBy?: discussionboard_post_attachmentOrderByWithRelationInput | discussionboard_post_attachmentOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_post_attachments.\n     */\n    cursor?: discussionboard_post_attachmentWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_post_attachments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_post_attachments.\n     */\n    skip?: number\n    distinct?: Discussionboard_post_attachmentScalarFieldEnum | Discussionboard_post_attachmentScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_post_attachment create\n   */\n  export type discussionboard_post_attachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_post_attachment.\n     */\n    data: XOR<discussionboard_post_attachmentCreateInput, discussionboard_post_attachmentUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_post_attachment createMany\n   */\n  export type discussionboard_post_attachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_post_attachments.\n     */\n    data: discussionboard_post_attachmentCreateManyInput | discussionboard_post_attachmentCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_post_attachment createManyAndReturn\n   */\n  export type discussionboard_post_attachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_post_attachments.\n     */\n    data: discussionboard_post_attachmentCreateManyInput | discussionboard_post_attachmentCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_post_attachment update\n   */\n  export type discussionboard_post_attachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_post_attachment.\n     */\n    data: XOR<discussionboard_post_attachmentUpdateInput, discussionboard_post_attachmentUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_post_attachment to update.\n     */\n    where: discussionboard_post_attachmentWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_attachment updateMany\n   */\n  export type discussionboard_post_attachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_post_attachments.\n     */\n    data: XOR<discussionboard_post_attachmentUpdateManyMutationInput, discussionboard_post_attachmentUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_post_attachments to update\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * Limit how many discussionboard_post_attachments to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_attachment updateManyAndReturn\n   */\n  export type discussionboard_post_attachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_post_attachments.\n     */\n    data: XOR<discussionboard_post_attachmentUpdateManyMutationInput, discussionboard_post_attachmentUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_post_attachments to update\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * Limit how many discussionboard_post_attachments to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_post_attachment upsert\n   */\n  export type discussionboard_post_attachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_post_attachment to update in case it exists.\n     */\n    where: discussionboard_post_attachmentWhereUniqueInput\n    /**\n     * In case the discussionboard_post_attachment found by the `where` argument doesn't exist, create a new discussionboard_post_attachment with this data.\n     */\n    create: XOR<discussionboard_post_attachmentCreateInput, discussionboard_post_attachmentUncheckedCreateInput>\n    /**\n     * In case the discussionboard_post_attachment was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_post_attachmentUpdateInput, discussionboard_post_attachmentUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_post_attachment delete\n   */\n  export type discussionboard_post_attachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_post_attachment to delete.\n     */\n    where: discussionboard_post_attachmentWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_post_attachment deleteMany\n   */\n  export type discussionboard_post_attachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_post_attachments to delete\n     */\n    where?: discussionboard_post_attachmentWhereInput\n    /**\n     * Limit how many discussionboard_post_attachments to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_post_attachment without action\n   */\n  export type discussionboard_post_attachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post_attachment\n     */\n    select?: discussionboard_post_attachmentSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post_attachment\n     */\n    omit?: discussionboard_post_attachmentOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_post_attachmentInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_comments\n   */\n\n  export type AggregateDiscussionboard_comments = {\n    _count: Discussionboard_commentsCountAggregateOutputType | null\n    _min: Discussionboard_commentsMinAggregateOutputType | null\n    _max: Discussionboard_commentsMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_commentsMinAggregateOutputType = {\n    id: string | null\n    post_id: string | null\n    author_id: string | null\n    parent_comment_id: string | null\n    content: string | null\n    is_edited: boolean | null\n    is_deleted: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussionboard_commentsMaxAggregateOutputType = {\n    id: string | null\n    post_id: string | null\n    author_id: string | null\n    parent_comment_id: string | null\n    content: string | null\n    is_edited: boolean | null\n    is_deleted: boolean | null\n    created_at: Date | null\n    updated_at: Date | null\n  }\n\n  export type Discussionboard_commentsCountAggregateOutputType = {\n    id: number\n    post_id: number\n    author_id: number\n    parent_comment_id: number\n    content: number\n    is_edited: number\n    is_deleted: number\n    created_at: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_commentsMinAggregateInputType = {\n    id?: true\n    post_id?: true\n    author_id?: true\n    parent_comment_id?: true\n    content?: true\n    is_edited?: true\n    is_deleted?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussionboard_commentsMaxAggregateInputType = {\n    id?: true\n    post_id?: true\n    author_id?: true\n    parent_comment_id?: true\n    content?: true\n    is_edited?: true\n    is_deleted?: true\n    created_at?: true\n    updated_at?: true\n  }\n\n  export type Discussionboard_commentsCountAggregateInputType = {\n    id?: true\n    post_id?: true\n    author_id?: true\n    parent_comment_id?: true\n    content?: true\n    is_edited?: true\n    is_deleted?: true\n    created_at?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_commentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_comments to aggregate.\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_comments to fetch.\n     */\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_comments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_comments\n    **/\n    _count?: true | Discussionboard_commentsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_commentsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_commentsMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_commentsAggregateType<T extends Discussionboard_commentsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_comments]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_comments[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_comments[P]>\n  }\n\n\n\n\n  export type discussionboard_commentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_commentsWhereInput\n    orderBy?: discussionboard_commentsOrderByWithAggregationInput | discussionboard_commentsOrderByWithAggregationInput[]\n    by: Discussionboard_commentsScalarFieldEnum[] | Discussionboard_commentsScalarFieldEnum\n    having?: discussionboard_commentsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_commentsCountAggregateInputType | true\n    _min?: Discussionboard_commentsMinAggregateInputType\n    _max?: Discussionboard_commentsMaxAggregateInputType\n  }\n\n  export type Discussionboard_commentsGroupByOutputType = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date\n    updated_at: Date\n    _count: Discussionboard_commentsCountAggregateOutputType | null\n    _min: Discussionboard_commentsMinAggregateOutputType | null\n    _max: Discussionboard_commentsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_commentsGroupByPayload<T extends discussionboard_commentsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_commentsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_commentsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_commentsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_commentsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_commentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    post_id?: boolean\n    author_id?: boolean\n    parent_comment_id?: boolean\n    content?: boolean\n    is_edited?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n    author?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    parent_comment?: boolean | discussionboard_comments$parent_commentArgs<ExtArgs>\n    recursive?: boolean | discussionboard_comments$recursiveArgs<ExtArgs>\n    discussionboard_likes?: boolean | discussionboard_comments$discussionboard_likesArgs<ExtArgs>\n    discussionboard_reports?: boolean | discussionboard_comments$discussionboard_reportsArgs<ExtArgs>\n    discussionboard_moderation_action?: boolean | discussionboard_comments$discussionboard_moderation_actionArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_comments$discussionboard_report_reviewArgs<ExtArgs>\n    discussionboard_warning?: boolean | discussionboard_comments$discussionboard_warningArgs<ExtArgs>\n    discussionboard_notification?: boolean | discussionboard_comments$discussionboard_notificationArgs<ExtArgs>\n    _count?: boolean | Discussionboard_commentsCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_comments\"]>\n\n  export type discussionboard_commentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    post_id?: boolean\n    author_id?: boolean\n    parent_comment_id?: boolean\n    content?: boolean\n    is_edited?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n    author?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    parent_comment?: boolean | discussionboard_comments$parent_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_comments\"]>\n\n  export type discussionboard_commentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    post_id?: boolean\n    author_id?: boolean\n    parent_comment_id?: boolean\n    content?: boolean\n    is_edited?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n    author?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    parent_comment?: boolean | discussionboard_comments$parent_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_comments\"]>\n\n  export type discussionboard_commentsSelectScalar = {\n    id?: boolean\n    post_id?: boolean\n    author_id?: boolean\n    parent_comment_id?: boolean\n    content?: boolean\n    is_edited?: boolean\n    is_deleted?: boolean\n    created_at?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussionboard_commentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"post_id\" | \"author_id\" | \"parent_comment_id\" | \"content\" | \"is_edited\" | \"is_deleted\" | \"created_at\" | \"updated_at\", ExtArgs[\"result\"][\"discussionboard_comments\"]>\n  export type discussionboard_commentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n    author?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    parent_comment?: boolean | discussionboard_comments$parent_commentArgs<ExtArgs>\n    recursive?: boolean | discussionboard_comments$recursiveArgs<ExtArgs>\n    discussionboard_likes?: boolean | discussionboard_comments$discussionboard_likesArgs<ExtArgs>\n    discussionboard_reports?: boolean | discussionboard_comments$discussionboard_reportsArgs<ExtArgs>\n    discussionboard_moderation_action?: boolean | discussionboard_comments$discussionboard_moderation_actionArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_comments$discussionboard_report_reviewArgs<ExtArgs>\n    discussionboard_warning?: boolean | discussionboard_comments$discussionboard_warningArgs<ExtArgs>\n    discussionboard_notification?: boolean | discussionboard_comments$discussionboard_notificationArgs<ExtArgs>\n    _count?: boolean | Discussionboard_commentsCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_commentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n    author?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    parent_comment?: boolean | discussionboard_comments$parent_commentArgs<ExtArgs>\n  }\n  export type discussionboard_commentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    post?: boolean | discussionboard_postDefaultArgs<ExtArgs>\n    author?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    parent_comment?: boolean | discussionboard_comments$parent_commentArgs<ExtArgs>\n  }\n\n  export type $discussionboard_commentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_comments\"\n    objects: {\n      post: Prisma.$discussionboard_postPayload<ExtArgs>\n      author: Prisma.$discussionboard_userPayload<ExtArgs>\n      parent_comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n      recursive: Prisma.$discussionboard_commentsPayload<ExtArgs>[]\n      discussionboard_likes: Prisma.$discussionboard_likesPayload<ExtArgs>[]\n      discussionboard_reports: Prisma.$discussionboard_reportsPayload<ExtArgs>[]\n      discussionboard_moderation_action: Prisma.$discussionboard_moderation_actionPayload<ExtArgs>[]\n      discussionboard_report_review: Prisma.$discussionboard_report_reviewPayload<ExtArgs>[]\n      discussionboard_warning: Prisma.$discussionboard_warningPayload<ExtArgs>[]\n      discussionboard_notification: Prisma.$discussionboard_notificationPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Comment Primary Key] - Implements the unique identification (see 3NF and requirements mapping).\n       * \n       * Globally unique identifier for each comment. Ensures 1NF uniqueness, enables precise referencing, and guarantees auditability and traceability across threads and moderation actions.\n       * \n       */\n      id: string\n      /**\n       * [Foreign Key: Post] - Implements the post-comment linkage as per requirement 3.3.\n       * \n       * Associates each comment with its parent post (mandatory). Ensures 2NF by linking to the full post entity, not duplicating post info. For example, when displaying a comment, the app can show the related post's category or title.\n       * \n       */\n      post_id: string\n      /**\n       * [Foreign Key: Author] - Implements comment authorship per requirements 3.3, 3.4.\n       * \n       * Links the comment directly to its user (author). Maintains normalization by not storing author details redundantly; user details are referenced via foreign key.\n       * \n       */\n      author_id: string\n      /**\n       * [Foreign Key: Parent Comment] - Supports threaded/reply comments as per 3.3.\n       * \n       * Self-referential link for comment thread nesting (optional; null for root-level comments). Maintains normalization by linking only to one parent, supporting recursive conversation trees without redundancy.\n       * \n       */\n      parent_comment_id: string | null\n      /**\n       * [Comment Content] - Implements actual user message storage per requirement 3.3.\n       * \n       * Holds the content/message of the comment. Ensures normalization by storing only the user's entry, not derived or precomputed data. For example, users can edit this field within role constraints. No denormalized summary or rendering is stored in regular tables.\n       * \n       */\n      content: string\n      /**\n       * [Edit Tracking Flag] - Supports edit-audit functionality per requirement 3.3 (editing own comments).\n       * \n       * Boolean indicating whether comment content has been modified since creation. Ensures normalization by storing only atomic edit status; edit history belongs in a separate snapshot/audit table if needed.\n       * \n       */\n      is_edited: boolean\n      /**\n       * [Soft Delete Flag] - Enables reversible deletion per 3.3 and moderation (3.5).\n       * \n       * Flags comments as deleted (soft) without actual removal from database. Supports auditability and role-based recovery, ensuring no information loss for moderation history.\n       * \n       */\n      is_deleted: boolean\n      /**\n       * [Creation Timestamp] - Records when the comment was posted (requirements 3.3, 3.9).\n       * \n       * Stores creation time of the comment. Ensures normalization as an atomic, non-derived value, and provides audit trail foundation.\n       * \n       */\n      created_at: Date\n      /**\n       * [Last Update Timestamp] - Tracks edits, moderation actions as in 3.3, 3.5, 3.9.\n       * \n       * Records latest update timestamp (edit, moderation, recovery, etc). Maintains audit and traceability without derived/polyglot aggregates.\n       * \n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_comments\"]>\n    composites: {}\n  }\n\n  type discussionboard_commentsGetPayload<S extends boolean | null | undefined | discussionboard_commentsDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_commentsPayload, S>\n\n  type discussionboard_commentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_commentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_commentsCountAggregateInputType | true\n    }\n\n  export interface discussionboard_commentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_comments'], meta: { name: 'discussionboard_comments' } }\n    /**\n     * Find zero or one Discussionboard_comments that matches the filter.\n     * @param {discussionboard_commentsFindUniqueArgs} args - Arguments to find a Discussionboard_comments\n     * @example\n     * // Get one Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_commentsFindUniqueArgs>(args: SelectSubset<T, discussionboard_commentsFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_comments that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_commentsFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_comments\n     * @example\n     * // Get one Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_commentsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_commentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_comments that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_commentsFindFirstArgs} args - Arguments to find a Discussionboard_comments\n     * @example\n     * // Get one Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_commentsFindFirstArgs>(args?: SelectSubset<T, discussionboard_commentsFindFirstArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_comments that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_commentsFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_comments\n     * @example\n     * // Get one Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_commentsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_commentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_comments that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_commentsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.findMany()\n     * \n     * // Get first 10 Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_commentsWithIdOnly = await prisma.discussionboard_comments.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_commentsFindManyArgs>(args?: SelectSubset<T, discussionboard_commentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_comments.\n     * @param {discussionboard_commentsCreateArgs} args - Arguments to create a Discussionboard_comments.\n     * @example\n     * // Create one Discussionboard_comments\n     * const Discussionboard_comments = await prisma.discussionboard_comments.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_comments\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_commentsCreateArgs>(args: SelectSubset<T, discussionboard_commentsCreateArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_comments.\n     * @param {discussionboard_commentsCreateManyArgs} args - Arguments to create many Discussionboard_comments.\n     * @example\n     * // Create many Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_commentsCreateManyArgs>(args?: SelectSubset<T, discussionboard_commentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_comments and returns the data saved in the database.\n     * @param {discussionboard_commentsCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_comments.\n     * @example\n     * // Create many Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_comments and only return the `id`\n     * const discussionboard_commentsWithIdOnly = await prisma.discussionboard_comments.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_commentsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_commentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_comments.\n     * @param {discussionboard_commentsDeleteArgs} args - Arguments to delete one Discussionboard_comments.\n     * @example\n     * // Delete one Discussionboard_comments\n     * const Discussionboard_comments = await prisma.discussionboard_comments.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_comments\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_commentsDeleteArgs>(args: SelectSubset<T, discussionboard_commentsDeleteArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_comments.\n     * @param {discussionboard_commentsUpdateArgs} args - Arguments to update one Discussionboard_comments.\n     * @example\n     * // Update one Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_commentsUpdateArgs>(args: SelectSubset<T, discussionboard_commentsUpdateArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_comments.\n     * @param {discussionboard_commentsDeleteManyArgs} args - Arguments to filter Discussionboard_comments to delete.\n     * @example\n     * // Delete a few Discussionboard_comments\n     * const { count } = await prisma.discussionboard_comments.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_commentsDeleteManyArgs>(args?: SelectSubset<T, discussionboard_commentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_commentsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_commentsUpdateManyArgs>(args: SelectSubset<T, discussionboard_commentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_comments and returns the data updated in the database.\n     * @param {discussionboard_commentsUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_comments.\n     * @example\n     * // Update many Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_comments and only return the `id`\n     * const discussionboard_commentsWithIdOnly = await prisma.discussionboard_comments.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_commentsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_commentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_comments.\n     * @param {discussionboard_commentsUpsertArgs} args - Arguments to update or create a Discussionboard_comments.\n     * @example\n     * // Update or create a Discussionboard_comments\n     * const discussionboard_comments = await prisma.discussionboard_comments.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_comments\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_comments we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_commentsUpsertArgs>(args: SelectSubset<T, discussionboard_commentsUpsertArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_commentsCountArgs} args - Arguments to filter Discussionboard_comments to count.\n     * @example\n     * // Count the number of Discussionboard_comments\n     * const count = await prisma.discussionboard_comments.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_comments we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_commentsCountArgs>(\n      args?: Subset<T, discussionboard_commentsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_commentsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_commentsAggregateArgs>(args: Subset<T, Discussionboard_commentsAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_commentsAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_comments.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_commentsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_commentsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_commentsGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_commentsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_commentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_comments model\n   */\n  readonly fields: discussionboard_commentsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_comments.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_commentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    post<T extends discussionboard_postDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_postDefaultArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    author<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    parent_comment<T extends discussionboard_comments$parent_commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$parent_commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    recursive<T extends discussionboard_comments$recursiveArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$recursiveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_likes<T extends discussionboard_comments$discussionboard_likesArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$discussionboard_likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_reports<T extends discussionboard_comments$discussionboard_reportsArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$discussionboard_reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_moderation_action<T extends discussionboard_comments$discussionboard_moderation_actionArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$discussionboard_moderation_actionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_report_review<T extends discussionboard_comments$discussionboard_report_reviewArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$discussionboard_report_reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_warning<T extends discussionboard_comments$discussionboard_warningArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$discussionboard_warningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    discussionboard_notification<T extends discussionboard_comments$discussionboard_notificationArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_comments$discussionboard_notificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_comments model\n   */\n  interface discussionboard_commentsFieldRefs {\n    readonly id: FieldRef<\"discussionboard_comments\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_comments\", 'String'>\n    readonly author_id: FieldRef<\"discussionboard_comments\", 'String'>\n    readonly parent_comment_id: FieldRef<\"discussionboard_comments\", 'String'>\n    readonly content: FieldRef<\"discussionboard_comments\", 'String'>\n    readonly is_edited: FieldRef<\"discussionboard_comments\", 'Boolean'>\n    readonly is_deleted: FieldRef<\"discussionboard_comments\", 'Boolean'>\n    readonly created_at: FieldRef<\"discussionboard_comments\", 'DateTime'>\n    readonly updated_at: FieldRef<\"discussionboard_comments\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_comments findUnique\n   */\n  export type discussionboard_commentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_comments to fetch.\n     */\n    where: discussionboard_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_comments findUniqueOrThrow\n   */\n  export type discussionboard_commentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_comments to fetch.\n     */\n    where: discussionboard_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_comments findFirst\n   */\n  export type discussionboard_commentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_comments to fetch.\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_comments to fetch.\n     */\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_comments.\n     */\n    cursor?: discussionboard_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_comments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_comments.\n     */\n    distinct?: Discussionboard_commentsScalarFieldEnum | Discussionboard_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments findFirstOrThrow\n   */\n  export type discussionboard_commentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_comments to fetch.\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_comments to fetch.\n     */\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_comments.\n     */\n    cursor?: discussionboard_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_comments.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_comments.\n     */\n    distinct?: Discussionboard_commentsScalarFieldEnum | Discussionboard_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments findMany\n   */\n  export type discussionboard_commentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_comments to fetch.\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_comments to fetch.\n     */\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_comments.\n     */\n    cursor?: discussionboard_commentsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_comments from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_comments.\n     */\n    skip?: number\n    distinct?: Discussionboard_commentsScalarFieldEnum | Discussionboard_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments create\n   */\n  export type discussionboard_commentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_comments.\n     */\n    data: XOR<discussionboard_commentsCreateInput, discussionboard_commentsUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_comments createMany\n   */\n  export type discussionboard_commentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_comments.\n     */\n    data: discussionboard_commentsCreateManyInput | discussionboard_commentsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_comments createManyAndReturn\n   */\n  export type discussionboard_commentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_comments.\n     */\n    data: discussionboard_commentsCreateManyInput | discussionboard_commentsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_comments update\n   */\n  export type discussionboard_commentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_comments.\n     */\n    data: XOR<discussionboard_commentsUpdateInput, discussionboard_commentsUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_comments to update.\n     */\n    where: discussionboard_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_comments updateMany\n   */\n  export type discussionboard_commentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_comments.\n     */\n    data: XOR<discussionboard_commentsUpdateManyMutationInput, discussionboard_commentsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_comments to update\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * Limit how many discussionboard_comments to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_comments updateManyAndReturn\n   */\n  export type discussionboard_commentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_comments.\n     */\n    data: XOR<discussionboard_commentsUpdateManyMutationInput, discussionboard_commentsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_comments to update\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * Limit how many discussionboard_comments to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_comments upsert\n   */\n  export type discussionboard_commentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_comments to update in case it exists.\n     */\n    where: discussionboard_commentsWhereUniqueInput\n    /**\n     * In case the discussionboard_comments found by the `where` argument doesn't exist, create a new discussionboard_comments with this data.\n     */\n    create: XOR<discussionboard_commentsCreateInput, discussionboard_commentsUncheckedCreateInput>\n    /**\n     * In case the discussionboard_comments was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_commentsUpdateInput, discussionboard_commentsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_comments delete\n   */\n  export type discussionboard_commentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_comments to delete.\n     */\n    where: discussionboard_commentsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_comments deleteMany\n   */\n  export type discussionboard_commentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_comments to delete\n     */\n    where?: discussionboard_commentsWhereInput\n    /**\n     * Limit how many discussionboard_comments to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_comments.parent_comment\n   */\n  export type discussionboard_comments$parent_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_comments.recursive\n   */\n  export type discussionboard_comments$recursiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n    orderBy?: discussionboard_commentsOrderByWithRelationInput | discussionboard_commentsOrderByWithRelationInput[]\n    cursor?: discussionboard_commentsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_commentsScalarFieldEnum | Discussionboard_commentsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments.discussionboard_likes\n   */\n  export type discussionboard_comments$discussionboard_likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    where?: discussionboard_likesWhereInput\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    cursor?: discussionboard_likesWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_likesScalarFieldEnum | Discussionboard_likesScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments.discussionboard_reports\n   */\n  export type discussionboard_comments$discussionboard_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    where?: discussionboard_reportsWhereInput\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    cursor?: discussionboard_reportsWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_reportsScalarFieldEnum | Discussionboard_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments.discussionboard_moderation_action\n   */\n  export type discussionboard_comments$discussionboard_moderation_actionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    where?: discussionboard_moderation_actionWhereInput\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments.discussionboard_report_review\n   */\n  export type discussionboard_comments$discussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    where?: discussionboard_report_reviewWhereInput\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments.discussionboard_warning\n   */\n  export type discussionboard_comments$discussionboard_warningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    where?: discussionboard_warningWhereInput\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    cursor?: discussionboard_warningWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments.discussionboard_notification\n   */\n  export type discussionboard_comments$discussionboard_notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    where?: discussionboard_notificationWhereInput\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    cursor?: discussionboard_notificationWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_comments without action\n   */\n  export type discussionboard_commentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_likes\n   */\n\n  export type AggregateDiscussionboard_likes = {\n    _count: Discussionboard_likesCountAggregateOutputType | null\n    _min: Discussionboard_likesMinAggregateOutputType | null\n    _max: Discussionboard_likesMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_likesMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    created_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussionboard_likesMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    created_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussionboard_likesCountAggregateOutputType = {\n    id: number\n    user_id: number\n    post_id: number\n    comment_id: number\n    created_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_likesMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    post_id?: true\n    comment_id?: true\n    created_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussionboard_likesMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    post_id?: true\n    comment_id?: true\n    created_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussionboard_likesCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    post_id?: true\n    comment_id?: true\n    created_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_likesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_likes to aggregate.\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_likes to fetch.\n     */\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_likesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_likes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_likes.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_likes\n    **/\n    _count?: true | Discussionboard_likesCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_likesMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_likesMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_likesAggregateType<T extends Discussionboard_likesAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_likes]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_likes[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_likes[P]>\n  }\n\n\n\n\n  export type discussionboard_likesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_likesWhereInput\n    orderBy?: discussionboard_likesOrderByWithAggregationInput | discussionboard_likesOrderByWithAggregationInput[]\n    by: Discussionboard_likesScalarFieldEnum[] | Discussionboard_likesScalarFieldEnum\n    having?: discussionboard_likesScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_likesCountAggregateInputType | true\n    _min?: Discussionboard_likesMinAggregateInputType\n    _max?: Discussionboard_likesMaxAggregateInputType\n  }\n\n  export type Discussionboard_likesGroupByOutputType = {\n    id: string\n    user_id: string\n    post_id: string | null\n    comment_id: string | null\n    created_at: Date\n    deleted_at: Date | null\n    _count: Discussionboard_likesCountAggregateOutputType | null\n    _min: Discussionboard_likesMinAggregateOutputType | null\n    _max: Discussionboard_likesMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_likesGroupByPayload<T extends discussionboard_likesGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_likesGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_likesGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_likesGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_likesGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_likesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_likes$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_likes$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_likes\"]>\n\n  export type discussionboard_likesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_likes$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_likes$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_likes\"]>\n\n  export type discussionboard_likesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_likes$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_likes$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_likes\"]>\n\n  export type discussionboard_likesSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussionboard_likesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"post_id\" | \"comment_id\" | \"created_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussionboard_likes\"]>\n  export type discussionboard_likesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_likes$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_likes$commentArgs<ExtArgs>\n  }\n  export type discussionboard_likesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_likes$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_likes$commentArgs<ExtArgs>\n  }\n  export type discussionboard_likesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_likes$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_likes$commentArgs<ExtArgs>\n  }\n\n  export type $discussionboard_likesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_likes\"\n    objects: {\n      user: Prisma.$discussionboard_userPayload<ExtArgs>\n      post: Prisma.$discussionboard_postPayload<ExtArgs> | null\n      comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key - Implements entity uniqueness. Each like interaction is uniquely identified for precise auditing and event tracking.\n       */\n      id: string\n      /**\n       * User Foreign Key - Implements user traceability for interaction, mapping to discussionboard_user. Ensures which member created this like. For example, required when listing personal likes. Not nullable/required.\n       */\n      user_id: string\n      /**\n       * Polymorphic Foreign Key: Post - Implements which post the like is attached to (where applicable), mapping to discussionboard_post. NULL if the like is for a comment. Enforces atomic association. For example, a user clicking like on a post will set this field. Nullable for polymorphism.\n       */\n      post_id: string | null\n      /**\n       * Polymorphic Foreign Key: Comment - Implements comment interaction scope, mapping to discussionboard_comments. NULL if the like is for a post. For example, liking a comment sets this field. Supports normalization and polymorphic association.\n       */\n      comment_id: string | null\n      /**\n       * Creation Timestamp - Implements requirement for auditable, timestamped actions. When the like event was created. Ensures atomicity by being non-null and standard across events.\n       */\n      created_at: Date\n      /**\n       * Soft-delete Timestamp - Enables reversible removal of like event in compliance with audit logging. Null if like is active, set if removed. Maintains normalization; never used as a logical indicator, only as an event timestamp.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussionboard_likes\"]>\n    composites: {}\n  }\n\n  type discussionboard_likesGetPayload<S extends boolean | null | undefined | discussionboard_likesDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_likesPayload, S>\n\n  type discussionboard_likesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_likesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_likesCountAggregateInputType | true\n    }\n\n  export interface discussionboard_likesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_likes'], meta: { name: 'discussionboard_likes' } }\n    /**\n     * Find zero or one Discussionboard_likes that matches the filter.\n     * @param {discussionboard_likesFindUniqueArgs} args - Arguments to find a Discussionboard_likes\n     * @example\n     * // Get one Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_likesFindUniqueArgs>(args: SelectSubset<T, discussionboard_likesFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_likes that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_likesFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_likes\n     * @example\n     * // Get one Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_likesFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_likesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_likes that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_likesFindFirstArgs} args - Arguments to find a Discussionboard_likes\n     * @example\n     * // Get one Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_likesFindFirstArgs>(args?: SelectSubset<T, discussionboard_likesFindFirstArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_likes that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_likesFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_likes\n     * @example\n     * // Get one Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_likesFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_likesFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_likes that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_likesFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.findMany()\n     * \n     * // Get first 10 Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_likesWithIdOnly = await prisma.discussionboard_likes.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_likesFindManyArgs>(args?: SelectSubset<T, discussionboard_likesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_likes.\n     * @param {discussionboard_likesCreateArgs} args - Arguments to create a Discussionboard_likes.\n     * @example\n     * // Create one Discussionboard_likes\n     * const Discussionboard_likes = await prisma.discussionboard_likes.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_likes\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_likesCreateArgs>(args: SelectSubset<T, discussionboard_likesCreateArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_likes.\n     * @param {discussionboard_likesCreateManyArgs} args - Arguments to create many Discussionboard_likes.\n     * @example\n     * // Create many Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_likesCreateManyArgs>(args?: SelectSubset<T, discussionboard_likesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_likes and returns the data saved in the database.\n     * @param {discussionboard_likesCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_likes.\n     * @example\n     * // Create many Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_likes and only return the `id`\n     * const discussionboard_likesWithIdOnly = await prisma.discussionboard_likes.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_likesCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_likesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_likes.\n     * @param {discussionboard_likesDeleteArgs} args - Arguments to delete one Discussionboard_likes.\n     * @example\n     * // Delete one Discussionboard_likes\n     * const Discussionboard_likes = await prisma.discussionboard_likes.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_likes\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_likesDeleteArgs>(args: SelectSubset<T, discussionboard_likesDeleteArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_likes.\n     * @param {discussionboard_likesUpdateArgs} args - Arguments to update one Discussionboard_likes.\n     * @example\n     * // Update one Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_likesUpdateArgs>(args: SelectSubset<T, discussionboard_likesUpdateArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_likes.\n     * @param {discussionboard_likesDeleteManyArgs} args - Arguments to filter Discussionboard_likes to delete.\n     * @example\n     * // Delete a few Discussionboard_likes\n     * const { count } = await prisma.discussionboard_likes.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_likesDeleteManyArgs>(args?: SelectSubset<T, discussionboard_likesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_likes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_likesUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_likesUpdateManyArgs>(args: SelectSubset<T, discussionboard_likesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_likes and returns the data updated in the database.\n     * @param {discussionboard_likesUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_likes.\n     * @example\n     * // Update many Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_likes and only return the `id`\n     * const discussionboard_likesWithIdOnly = await prisma.discussionboard_likes.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_likesUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_likesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_likes.\n     * @param {discussionboard_likesUpsertArgs} args - Arguments to update or create a Discussionboard_likes.\n     * @example\n     * // Update or create a Discussionboard_likes\n     * const discussionboard_likes = await prisma.discussionboard_likes.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_likes\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_likes we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_likesUpsertArgs>(args: SelectSubset<T, discussionboard_likesUpsertArgs<ExtArgs>>): Prisma__discussionboard_likesClient<$Result.GetResult<Prisma.$discussionboard_likesPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_likes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_likesCountArgs} args - Arguments to filter Discussionboard_likes to count.\n     * @example\n     * // Count the number of Discussionboard_likes\n     * const count = await prisma.discussionboard_likes.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_likes we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_likesCountArgs>(\n      args?: Subset<T, discussionboard_likesCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_likesCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_likes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_likesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_likesAggregateArgs>(args: Subset<T, Discussionboard_likesAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_likesAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_likes.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_likesGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_likesGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_likesGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_likesGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_likesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_likesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_likes model\n   */\n  readonly fields: discussionboard_likesFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_likes.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_likesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    post<T extends discussionboard_likes$postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_likes$postArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    comment<T extends discussionboard_likes$commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_likes$commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_likes model\n   */\n  interface discussionboard_likesFieldRefs {\n    readonly id: FieldRef<\"discussionboard_likes\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_likes\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_likes\", 'String'>\n    readonly comment_id: FieldRef<\"discussionboard_likes\", 'String'>\n    readonly created_at: FieldRef<\"discussionboard_likes\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussionboard_likes\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_likes findUnique\n   */\n  export type discussionboard_likesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_likes to fetch.\n     */\n    where: discussionboard_likesWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_likes findUniqueOrThrow\n   */\n  export type discussionboard_likesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_likes to fetch.\n     */\n    where: discussionboard_likesWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_likes findFirst\n   */\n  export type discussionboard_likesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_likes to fetch.\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_likes to fetch.\n     */\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_likes.\n     */\n    cursor?: discussionboard_likesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_likes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_likes.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_likes.\n     */\n    distinct?: Discussionboard_likesScalarFieldEnum | Discussionboard_likesScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_likes findFirstOrThrow\n   */\n  export type discussionboard_likesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_likes to fetch.\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_likes to fetch.\n     */\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_likes.\n     */\n    cursor?: discussionboard_likesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_likes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_likes.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_likes.\n     */\n    distinct?: Discussionboard_likesScalarFieldEnum | Discussionboard_likesScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_likes findMany\n   */\n  export type discussionboard_likesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_likes to fetch.\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_likes to fetch.\n     */\n    orderBy?: discussionboard_likesOrderByWithRelationInput | discussionboard_likesOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_likes.\n     */\n    cursor?: discussionboard_likesWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_likes from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_likes.\n     */\n    skip?: number\n    distinct?: Discussionboard_likesScalarFieldEnum | Discussionboard_likesScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_likes create\n   */\n  export type discussionboard_likesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_likes.\n     */\n    data: XOR<discussionboard_likesCreateInput, discussionboard_likesUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_likes createMany\n   */\n  export type discussionboard_likesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_likes.\n     */\n    data: discussionboard_likesCreateManyInput | discussionboard_likesCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_likes createManyAndReturn\n   */\n  export type discussionboard_likesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_likes.\n     */\n    data: discussionboard_likesCreateManyInput | discussionboard_likesCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_likes update\n   */\n  export type discussionboard_likesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_likes.\n     */\n    data: XOR<discussionboard_likesUpdateInput, discussionboard_likesUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_likes to update.\n     */\n    where: discussionboard_likesWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_likes updateMany\n   */\n  export type discussionboard_likesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_likes.\n     */\n    data: XOR<discussionboard_likesUpdateManyMutationInput, discussionboard_likesUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_likes to update\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * Limit how many discussionboard_likes to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_likes updateManyAndReturn\n   */\n  export type discussionboard_likesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_likes.\n     */\n    data: XOR<discussionboard_likesUpdateManyMutationInput, discussionboard_likesUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_likes to update\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * Limit how many discussionboard_likes to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_likes upsert\n   */\n  export type discussionboard_likesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_likes to update in case it exists.\n     */\n    where: discussionboard_likesWhereUniqueInput\n    /**\n     * In case the discussionboard_likes found by the `where` argument doesn't exist, create a new discussionboard_likes with this data.\n     */\n    create: XOR<discussionboard_likesCreateInput, discussionboard_likesUncheckedCreateInput>\n    /**\n     * In case the discussionboard_likes was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_likesUpdateInput, discussionboard_likesUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_likes delete\n   */\n  export type discussionboard_likesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_likes to delete.\n     */\n    where: discussionboard_likesWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_likes deleteMany\n   */\n  export type discussionboard_likesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_likes to delete\n     */\n    where?: discussionboard_likesWhereInput\n    /**\n     * Limit how many discussionboard_likes to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_likes.post\n   */\n  export type discussionboard_likes$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n  }\n\n  /**\n   * discussionboard_likes.comment\n   */\n  export type discussionboard_likes$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_likes without action\n   */\n  export type discussionboard_likesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_likes\n     */\n    select?: discussionboard_likesSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_likes\n     */\n    omit?: discussionboard_likesOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_likesInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_reports\n   */\n\n  export type AggregateDiscussionboard_reports = {\n    _count: Discussionboard_reportsCountAggregateOutputType | null\n    _min: Discussionboard_reportsMinAggregateOutputType | null\n    _max: Discussionboard_reportsMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_reportsMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    reason_code: string | null\n    reason_details: string | null\n    created_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussionboard_reportsMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    reason_code: string | null\n    reason_details: string | null\n    created_at: Date | null\n    deleted_at: Date | null\n  }\n\n  export type Discussionboard_reportsCountAggregateOutputType = {\n    id: number\n    user_id: number\n    post_id: number\n    comment_id: number\n    reason_code: number\n    reason_details: number\n    created_at: number\n    deleted_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_reportsMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    post_id?: true\n    comment_id?: true\n    reason_code?: true\n    reason_details?: true\n    created_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussionboard_reportsMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    post_id?: true\n    comment_id?: true\n    reason_code?: true\n    reason_details?: true\n    created_at?: true\n    deleted_at?: true\n  }\n\n  export type Discussionboard_reportsCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    post_id?: true\n    comment_id?: true\n    reason_code?: true\n    reason_details?: true\n    created_at?: true\n    deleted_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_reportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_reports to aggregate.\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_reports to fetch.\n     */\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_reports.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_reports\n    **/\n    _count?: true | Discussionboard_reportsCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_reportsMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_reportsMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_reportsAggregateType<T extends Discussionboard_reportsAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_reports]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_reports[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_reports[P]>\n  }\n\n\n\n\n  export type discussionboard_reportsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_reportsWhereInput\n    orderBy?: discussionboard_reportsOrderByWithAggregationInput | discussionboard_reportsOrderByWithAggregationInput[]\n    by: Discussionboard_reportsScalarFieldEnum[] | Discussionboard_reportsScalarFieldEnum\n    having?: discussionboard_reportsScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_reportsCountAggregateInputType | true\n    _min?: Discussionboard_reportsMinAggregateInputType\n    _max?: Discussionboard_reportsMaxAggregateInputType\n  }\n\n  export type Discussionboard_reportsGroupByOutputType = {\n    id: string\n    user_id: string\n    post_id: string | null\n    comment_id: string | null\n    reason_code: string\n    reason_details: string | null\n    created_at: Date\n    deleted_at: Date | null\n    _count: Discussionboard_reportsCountAggregateOutputType | null\n    _min: Discussionboard_reportsMinAggregateOutputType | null\n    _max: Discussionboard_reportsMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_reportsGroupByPayload<T extends discussionboard_reportsGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_reportsGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_reportsGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_reportsGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_reportsGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_reportsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    reason_code?: boolean\n    reason_details?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_reports$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_reports$commentArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_reports$discussionboard_report_reviewArgs<ExtArgs>\n    _count?: boolean | Discussionboard_reportsCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_reports\"]>\n\n  export type discussionboard_reportsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    reason_code?: boolean\n    reason_details?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_reports$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_reports$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_reports\"]>\n\n  export type discussionboard_reportsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    reason_code?: boolean\n    reason_details?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_reports$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_reports$commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_reports\"]>\n\n  export type discussionboard_reportsSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    reason_code?: boolean\n    reason_details?: boolean\n    created_at?: boolean\n    deleted_at?: boolean\n  }\n\n  export type discussionboard_reportsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"post_id\" | \"comment_id\" | \"reason_code\" | \"reason_details\" | \"created_at\" | \"deleted_at\", ExtArgs[\"result\"][\"discussionboard_reports\"]>\n  export type discussionboard_reportsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_reports$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_reports$commentArgs<ExtArgs>\n    discussionboard_report_review?: boolean | discussionboard_reports$discussionboard_report_reviewArgs<ExtArgs>\n    _count?: boolean | Discussionboard_reportsCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_reportsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_reports$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_reports$commentArgs<ExtArgs>\n  }\n  export type discussionboard_reportsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    post?: boolean | discussionboard_reports$postArgs<ExtArgs>\n    comment?: boolean | discussionboard_reports$commentArgs<ExtArgs>\n  }\n\n  export type $discussionboard_reportsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_reports\"\n    objects: {\n      user: Prisma.$discussionboard_userPayload<ExtArgs>\n      post: Prisma.$discussionboard_postPayload<ExtArgs> | null\n      comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n      discussionboard_report_review: Prisma.$discussionboard_report_reviewPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * Primary Key - Uniquely identifies each report for compliance, auditing, moderation, and traceability.\n       */\n      id: string\n      /**\n       * Reporter Foreign Key - References the user (from discussionboard_user) who submitted the report. Maintains accountability and supports user-based moderation analytics. Not nullable; always required.\n       */\n      user_id: string\n      /**\n       * Polymorphic Foreign Key: Post - Identifies the post that is being reported (if applicable). NULL if report targets a comment. Ensures correct, strictly normalized associativity, and prevents overlap with comment_id.\n       */\n      post_id: string | null\n      /**\n       * Polymorphic Foreign Key: Comment - Identifies the comment being reported (if any). NULL if post is targeted. Supports polymorphic reporting of both content types. Enforces correct normalization.\n       */\n      comment_id: string | null\n      /**\n       * Short Reason Code - Implements requirements for capturing structured event context (e.g. 'spam', 'abuse', 'off-topic'). Enables filtering and workflow logic. Follows a pre-set value list handled in application/business logic. 3NF maintained as reason text is never duplicated (codes only here).\n       */\n      reason_code: string\n      /**\n       * Detailed Reason (optional) - Implements reporting context capture for case auditing, moderation analytics, and transparency. Allows user to enter details or evidence. Nullable for cases where only the code is needed.\n       */\n      reason_details: string | null\n      /**\n       * Report Creation Timestamp - Indicates when the report was made. Implements audit trail (requirement: 3.9 and moderation review within 24hr SLA). Non-null, ensures each report is audited with precise event time.\n       */\n      created_at: Date\n      /**\n       * Soft-delete Timestamp - Enables soft-removal (not physical deletion) of reports for moderation or review compliance. Null if active, non-null when deleted. Ensures normalization and auditable workflow.\n       */\n      deleted_at: Date | null\n    }, ExtArgs[\"result\"][\"discussionboard_reports\"]>\n    composites: {}\n  }\n\n  type discussionboard_reportsGetPayload<S extends boolean | null | undefined | discussionboard_reportsDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_reportsPayload, S>\n\n  type discussionboard_reportsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_reportsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_reportsCountAggregateInputType | true\n    }\n\n  export interface discussionboard_reportsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_reports'], meta: { name: 'discussionboard_reports' } }\n    /**\n     * Find zero or one Discussionboard_reports that matches the filter.\n     * @param {discussionboard_reportsFindUniqueArgs} args - Arguments to find a Discussionboard_reports\n     * @example\n     * // Get one Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_reportsFindUniqueArgs>(args: SelectSubset<T, discussionboard_reportsFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_reports that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_reportsFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_reports\n     * @example\n     * // Get one Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_reportsFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_reportsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_reports that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_reportsFindFirstArgs} args - Arguments to find a Discussionboard_reports\n     * @example\n     * // Get one Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_reportsFindFirstArgs>(args?: SelectSubset<T, discussionboard_reportsFindFirstArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_reports that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_reportsFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_reports\n     * @example\n     * // Get one Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_reportsFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_reportsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_reports that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_reportsFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.findMany()\n     * \n     * // Get first 10 Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_reportsWithIdOnly = await prisma.discussionboard_reports.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_reportsFindManyArgs>(args?: SelectSubset<T, discussionboard_reportsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_reports.\n     * @param {discussionboard_reportsCreateArgs} args - Arguments to create a Discussionboard_reports.\n     * @example\n     * // Create one Discussionboard_reports\n     * const Discussionboard_reports = await prisma.discussionboard_reports.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_reports\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_reportsCreateArgs>(args: SelectSubset<T, discussionboard_reportsCreateArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_reports.\n     * @param {discussionboard_reportsCreateManyArgs} args - Arguments to create many Discussionboard_reports.\n     * @example\n     * // Create many Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_reportsCreateManyArgs>(args?: SelectSubset<T, discussionboard_reportsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_reports and returns the data saved in the database.\n     * @param {discussionboard_reportsCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_reports.\n     * @example\n     * // Create many Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_reports and only return the `id`\n     * const discussionboard_reportsWithIdOnly = await prisma.discussionboard_reports.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_reportsCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_reportsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_reports.\n     * @param {discussionboard_reportsDeleteArgs} args - Arguments to delete one Discussionboard_reports.\n     * @example\n     * // Delete one Discussionboard_reports\n     * const Discussionboard_reports = await prisma.discussionboard_reports.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_reports\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_reportsDeleteArgs>(args: SelectSubset<T, discussionboard_reportsDeleteArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_reports.\n     * @param {discussionboard_reportsUpdateArgs} args - Arguments to update one Discussionboard_reports.\n     * @example\n     * // Update one Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_reportsUpdateArgs>(args: SelectSubset<T, discussionboard_reportsUpdateArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_reports.\n     * @param {discussionboard_reportsDeleteManyArgs} args - Arguments to filter Discussionboard_reports to delete.\n     * @example\n     * // Delete a few Discussionboard_reports\n     * const { count } = await prisma.discussionboard_reports.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_reportsDeleteManyArgs>(args?: SelectSubset<T, discussionboard_reportsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_reportsUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_reportsUpdateManyArgs>(args: SelectSubset<T, discussionboard_reportsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_reports and returns the data updated in the database.\n     * @param {discussionboard_reportsUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_reports.\n     * @example\n     * // Update many Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_reports and only return the `id`\n     * const discussionboard_reportsWithIdOnly = await prisma.discussionboard_reports.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_reportsUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_reportsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_reports.\n     * @param {discussionboard_reportsUpsertArgs} args - Arguments to update or create a Discussionboard_reports.\n     * @example\n     * // Update or create a Discussionboard_reports\n     * const discussionboard_reports = await prisma.discussionboard_reports.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_reports\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_reports we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_reportsUpsertArgs>(args: SelectSubset<T, discussionboard_reportsUpsertArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_reportsCountArgs} args - Arguments to filter Discussionboard_reports to count.\n     * @example\n     * // Count the number of Discussionboard_reports\n     * const count = await prisma.discussionboard_reports.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_reports we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_reportsCountArgs>(\n      args?: Subset<T, discussionboard_reportsCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_reportsCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_reportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_reportsAggregateArgs>(args: Subset<T, Discussionboard_reportsAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_reportsAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_reports.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_reportsGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_reportsGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_reportsGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_reportsGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_reportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_reportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_reports model\n   */\n  readonly fields: discussionboard_reportsFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_reports.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_reportsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    post<T extends discussionboard_reports$postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_reports$postArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    comment<T extends discussionboard_reports$commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_reports$commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_report_review<T extends discussionboard_reports$discussionboard_report_reviewArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_reports$discussionboard_report_reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_reports model\n   */\n  interface discussionboard_reportsFieldRefs {\n    readonly id: FieldRef<\"discussionboard_reports\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_reports\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_reports\", 'String'>\n    readonly comment_id: FieldRef<\"discussionboard_reports\", 'String'>\n    readonly reason_code: FieldRef<\"discussionboard_reports\", 'String'>\n    readonly reason_details: FieldRef<\"discussionboard_reports\", 'String'>\n    readonly created_at: FieldRef<\"discussionboard_reports\", 'DateTime'>\n    readonly deleted_at: FieldRef<\"discussionboard_reports\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_reports findUnique\n   */\n  export type discussionboard_reportsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_reports to fetch.\n     */\n    where: discussionboard_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_reports findUniqueOrThrow\n   */\n  export type discussionboard_reportsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_reports to fetch.\n     */\n    where: discussionboard_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_reports findFirst\n   */\n  export type discussionboard_reportsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_reports to fetch.\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_reports to fetch.\n     */\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_reports.\n     */\n    cursor?: discussionboard_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_reports.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_reports.\n     */\n    distinct?: Discussionboard_reportsScalarFieldEnum | Discussionboard_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_reports findFirstOrThrow\n   */\n  export type discussionboard_reportsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_reports to fetch.\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_reports to fetch.\n     */\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_reports.\n     */\n    cursor?: discussionboard_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_reports.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_reports.\n     */\n    distinct?: Discussionboard_reportsScalarFieldEnum | Discussionboard_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_reports findMany\n   */\n  export type discussionboard_reportsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_reports to fetch.\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_reports to fetch.\n     */\n    orderBy?: discussionboard_reportsOrderByWithRelationInput | discussionboard_reportsOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_reports.\n     */\n    cursor?: discussionboard_reportsWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_reports from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_reports.\n     */\n    skip?: number\n    distinct?: Discussionboard_reportsScalarFieldEnum | Discussionboard_reportsScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_reports create\n   */\n  export type discussionboard_reportsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_reports.\n     */\n    data: XOR<discussionboard_reportsCreateInput, discussionboard_reportsUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_reports createMany\n   */\n  export type discussionboard_reportsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_reports.\n     */\n    data: discussionboard_reportsCreateManyInput | discussionboard_reportsCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_reports createManyAndReturn\n   */\n  export type discussionboard_reportsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_reports.\n     */\n    data: discussionboard_reportsCreateManyInput | discussionboard_reportsCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_reports update\n   */\n  export type discussionboard_reportsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_reports.\n     */\n    data: XOR<discussionboard_reportsUpdateInput, discussionboard_reportsUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_reports to update.\n     */\n    where: discussionboard_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_reports updateMany\n   */\n  export type discussionboard_reportsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_reports.\n     */\n    data: XOR<discussionboard_reportsUpdateManyMutationInput, discussionboard_reportsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_reports to update\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * Limit how many discussionboard_reports to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_reports updateManyAndReturn\n   */\n  export type discussionboard_reportsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_reports.\n     */\n    data: XOR<discussionboard_reportsUpdateManyMutationInput, discussionboard_reportsUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_reports to update\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * Limit how many discussionboard_reports to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_reports upsert\n   */\n  export type discussionboard_reportsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_reports to update in case it exists.\n     */\n    where: discussionboard_reportsWhereUniqueInput\n    /**\n     * In case the discussionboard_reports found by the `where` argument doesn't exist, create a new discussionboard_reports with this data.\n     */\n    create: XOR<discussionboard_reportsCreateInput, discussionboard_reportsUncheckedCreateInput>\n    /**\n     * In case the discussionboard_reports was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_reportsUpdateInput, discussionboard_reportsUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_reports delete\n   */\n  export type discussionboard_reportsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_reports to delete.\n     */\n    where: discussionboard_reportsWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_reports deleteMany\n   */\n  export type discussionboard_reportsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_reports to delete\n     */\n    where?: discussionboard_reportsWhereInput\n    /**\n     * Limit how many discussionboard_reports to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_reports.post\n   */\n  export type discussionboard_reports$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n  }\n\n  /**\n   * discussionboard_reports.comment\n   */\n  export type discussionboard_reports$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_reports.discussionboard_report_review\n   */\n  export type discussionboard_reports$discussionboard_report_reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    where?: discussionboard_report_reviewWhereInput\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_reports without action\n   */\n  export type discussionboard_reportsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_reports\n     */\n    select?: discussionboard_reportsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_reports\n     */\n    omit?: discussionboard_reportsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_reportsInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_moderation_action\n   */\n\n  export type AggregateDiscussionboard_moderation_action = {\n    _count: Discussionboard_moderation_actionCountAggregateOutputType | null\n    _min: Discussionboard_moderation_actionMinAggregateOutputType | null\n    _max: Discussionboard_moderation_actionMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_moderation_actionMinAggregateOutputType = {\n    id: string | null\n    actor_id: string | null\n    target_user_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    action_type: string | null\n    reason: string | null\n    created_at: Date | null\n  }\n\n  export type Discussionboard_moderation_actionMaxAggregateOutputType = {\n    id: string | null\n    actor_id: string | null\n    target_user_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    action_type: string | null\n    reason: string | null\n    created_at: Date | null\n  }\n\n  export type Discussionboard_moderation_actionCountAggregateOutputType = {\n    id: number\n    actor_id: number\n    target_user_id: number\n    post_id: number\n    comment_id: number\n    action_type: number\n    reason: number\n    created_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_moderation_actionMinAggregateInputType = {\n    id?: true\n    actor_id?: true\n    target_user_id?: true\n    post_id?: true\n    comment_id?: true\n    action_type?: true\n    reason?: true\n    created_at?: true\n  }\n\n  export type Discussionboard_moderation_actionMaxAggregateInputType = {\n    id?: true\n    actor_id?: true\n    target_user_id?: true\n    post_id?: true\n    comment_id?: true\n    action_type?: true\n    reason?: true\n    created_at?: true\n  }\n\n  export type Discussionboard_moderation_actionCountAggregateInputType = {\n    id?: true\n    actor_id?: true\n    target_user_id?: true\n    post_id?: true\n    comment_id?: true\n    action_type?: true\n    reason?: true\n    created_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_moderation_actionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_moderation_action to aggregate.\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderation_actions to fetch.\n     */\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderation_actions from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderation_actions.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_moderation_actions\n    **/\n    _count?: true | Discussionboard_moderation_actionCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_moderation_actionMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_moderation_actionMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_moderation_actionAggregateType<T extends Discussionboard_moderation_actionAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_moderation_action]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_moderation_action[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_moderation_action[P]>\n  }\n\n\n\n\n  export type discussionboard_moderation_actionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_moderation_actionWhereInput\n    orderBy?: discussionboard_moderation_actionOrderByWithAggregationInput | discussionboard_moderation_actionOrderByWithAggregationInput[]\n    by: Discussionboard_moderation_actionScalarFieldEnum[] | Discussionboard_moderation_actionScalarFieldEnum\n    having?: discussionboard_moderation_actionScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_moderation_actionCountAggregateInputType | true\n    _min?: Discussionboard_moderation_actionMinAggregateInputType\n    _max?: Discussionboard_moderation_actionMaxAggregateInputType\n  }\n\n  export type Discussionboard_moderation_actionGroupByOutputType = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    post_id: string | null\n    comment_id: string | null\n    action_type: string\n    reason: string\n    created_at: Date\n    _count: Discussionboard_moderation_actionCountAggregateOutputType | null\n    _min: Discussionboard_moderation_actionMinAggregateOutputType | null\n    _max: Discussionboard_moderation_actionMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_moderation_actionGroupByPayload<T extends discussionboard_moderation_actionGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_moderation_actionGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_moderation_actionGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_moderation_actionGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_moderation_actionGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_moderation_actionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    actor_id?: boolean\n    target_user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    action_type?: boolean\n    reason?: boolean\n    created_at?: boolean\n    actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    target_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    moderated_post?: boolean | discussionboard_moderation_action$moderated_postArgs<ExtArgs>\n    moderated_comment?: boolean | discussionboard_moderation_action$moderated_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_moderation_action\"]>\n\n  export type discussionboard_moderation_actionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    actor_id?: boolean\n    target_user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    action_type?: boolean\n    reason?: boolean\n    created_at?: boolean\n    actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    target_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    moderated_post?: boolean | discussionboard_moderation_action$moderated_postArgs<ExtArgs>\n    moderated_comment?: boolean | discussionboard_moderation_action$moderated_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_moderation_action\"]>\n\n  export type discussionboard_moderation_actionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    actor_id?: boolean\n    target_user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    action_type?: boolean\n    reason?: boolean\n    created_at?: boolean\n    actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    target_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    moderated_post?: boolean | discussionboard_moderation_action$moderated_postArgs<ExtArgs>\n    moderated_comment?: boolean | discussionboard_moderation_action$moderated_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_moderation_action\"]>\n\n  export type discussionboard_moderation_actionSelectScalar = {\n    id?: boolean\n    actor_id?: boolean\n    target_user_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    action_type?: boolean\n    reason?: boolean\n    created_at?: boolean\n  }\n\n  export type discussionboard_moderation_actionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"actor_id\" | \"target_user_id\" | \"post_id\" | \"comment_id\" | \"action_type\" | \"reason\" | \"created_at\", ExtArgs[\"result\"][\"discussionboard_moderation_action\"]>\n  export type discussionboard_moderation_actionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    target_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    moderated_post?: boolean | discussionboard_moderation_action$moderated_postArgs<ExtArgs>\n    moderated_comment?: boolean | discussionboard_moderation_action$moderated_commentArgs<ExtArgs>\n  }\n  export type discussionboard_moderation_actionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    target_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    moderated_post?: boolean | discussionboard_moderation_action$moderated_postArgs<ExtArgs>\n    moderated_comment?: boolean | discussionboard_moderation_action$moderated_commentArgs<ExtArgs>\n  }\n  export type discussionboard_moderation_actionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    target_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    moderated_post?: boolean | discussionboard_moderation_action$moderated_postArgs<ExtArgs>\n    moderated_comment?: boolean | discussionboard_moderation_action$moderated_commentArgs<ExtArgs>\n  }\n\n  export type $discussionboard_moderation_actionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_moderation_action\"\n    objects: {\n      actor: Prisma.$discussionboard_userPayload<ExtArgs>\n      target_user: Prisma.$discussionboard_userPayload<ExtArgs>\n      moderated_post: Prisma.$discussionboard_postPayload<ExtArgs> | null\n      moderated_comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary key] - Standard internal identifier. Uniquely identifies each moderation action; ensures atomic representation of each occurrence.\n       */\n      id: string\n      /**\n       * [Action originator] - Implements the 'who performed the action' requirement. References the moderator or admin user account executing the moderation. Ensures normalization by linking to user, not duplicating actor data. For example, when moderator #1234 deletes a comment, this field is #1234.\n       */\n      actor_id: string\n      /**\n       * [User targeted] - Fulfills the 'target of moderation' tracking requirement. Links to the affected user account (e.g., reported member). Ensures single source of truth for user data and enables traceability. For example, for a ban of user X, this references user X.\n       */\n      target_user_id: string\n      /**\n       * [Affected post] - Implements moderation linkage for post-level actions. References the post if this action affects a specific post. Normalization preserved (nullable, as not all actions are post-related). For example, deleting a post links here; issuing a ban does not.\n       */\n      post_id: string | null\n      /**\n       * [Affected comment] - Moderation linkage to comment. References the comment if the action is on a specific comment. Kept nullable to preserve 3NF and flexibility. For example, hiding a comment references its id here.\n       */\n      comment_id: string | null\n      /**\n       * [Action type] - Implements requirement to enumerate distinct moderation activities. Type of moderation: e.g., 'delete_post', 'hide_comment', etc. Maintains normalization.\n       */\n      action_type: string\n      /**\n       * [Reason] - Fulfills rationale for moderation. Stores moderator/admin's reason/comment. Ensures accountability, searchable, used for appeals.\n       */\n      reason: string\n      /**\n       * [Timestamp] - Implements time-based audit tracking. True creation time of the action record, guarantees traceability.\n       */\n      created_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_moderation_action\"]>\n    composites: {}\n  }\n\n  type discussionboard_moderation_actionGetPayload<S extends boolean | null | undefined | discussionboard_moderation_actionDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_moderation_actionPayload, S>\n\n  type discussionboard_moderation_actionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_moderation_actionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_moderation_actionCountAggregateInputType | true\n    }\n\n  export interface discussionboard_moderation_actionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_moderation_action'], meta: { name: 'discussionboard_moderation_action' } }\n    /**\n     * Find zero or one Discussionboard_moderation_action that matches the filter.\n     * @param {discussionboard_moderation_actionFindUniqueArgs} args - Arguments to find a Discussionboard_moderation_action\n     * @example\n     * // Get one Discussionboard_moderation_action\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_moderation_actionFindUniqueArgs>(args: SelectSubset<T, discussionboard_moderation_actionFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_moderation_action that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_moderation_actionFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_moderation_action\n     * @example\n     * // Get one Discussionboard_moderation_action\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_moderation_actionFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_moderation_actionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_moderation_action that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderation_actionFindFirstArgs} args - Arguments to find a Discussionboard_moderation_action\n     * @example\n     * // Get one Discussionboard_moderation_action\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_moderation_actionFindFirstArgs>(args?: SelectSubset<T, discussionboard_moderation_actionFindFirstArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_moderation_action that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderation_actionFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_moderation_action\n     * @example\n     * // Get one Discussionboard_moderation_action\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_moderation_actionFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_moderation_actionFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_moderation_actions that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderation_actionFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_moderation_actions\n     * const discussionboard_moderation_actions = await prisma.discussionboard_moderation_action.findMany()\n     * \n     * // Get first 10 Discussionboard_moderation_actions\n     * const discussionboard_moderation_actions = await prisma.discussionboard_moderation_action.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_moderation_actionWithIdOnly = await prisma.discussionboard_moderation_action.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_moderation_actionFindManyArgs>(args?: SelectSubset<T, discussionboard_moderation_actionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_moderation_action.\n     * @param {discussionboard_moderation_actionCreateArgs} args - Arguments to create a Discussionboard_moderation_action.\n     * @example\n     * // Create one Discussionboard_moderation_action\n     * const Discussionboard_moderation_action = await prisma.discussionboard_moderation_action.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_moderation_action\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_moderation_actionCreateArgs>(args: SelectSubset<T, discussionboard_moderation_actionCreateArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_moderation_actions.\n     * @param {discussionboard_moderation_actionCreateManyArgs} args - Arguments to create many Discussionboard_moderation_actions.\n     * @example\n     * // Create many Discussionboard_moderation_actions\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_moderation_actionCreateManyArgs>(args?: SelectSubset<T, discussionboard_moderation_actionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_moderation_actions and returns the data saved in the database.\n     * @param {discussionboard_moderation_actionCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_moderation_actions.\n     * @example\n     * // Create many Discussionboard_moderation_actions\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_moderation_actions and only return the `id`\n     * const discussionboard_moderation_actionWithIdOnly = await prisma.discussionboard_moderation_action.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_moderation_actionCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_moderation_actionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_moderation_action.\n     * @param {discussionboard_moderation_actionDeleteArgs} args - Arguments to delete one Discussionboard_moderation_action.\n     * @example\n     * // Delete one Discussionboard_moderation_action\n     * const Discussionboard_moderation_action = await prisma.discussionboard_moderation_action.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_moderation_action\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_moderation_actionDeleteArgs>(args: SelectSubset<T, discussionboard_moderation_actionDeleteArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_moderation_action.\n     * @param {discussionboard_moderation_actionUpdateArgs} args - Arguments to update one Discussionboard_moderation_action.\n     * @example\n     * // Update one Discussionboard_moderation_action\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_moderation_actionUpdateArgs>(args: SelectSubset<T, discussionboard_moderation_actionUpdateArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_moderation_actions.\n     * @param {discussionboard_moderation_actionDeleteManyArgs} args - Arguments to filter Discussionboard_moderation_actions to delete.\n     * @example\n     * // Delete a few Discussionboard_moderation_actions\n     * const { count } = await prisma.discussionboard_moderation_action.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_moderation_actionDeleteManyArgs>(args?: SelectSubset<T, discussionboard_moderation_actionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_moderation_actions.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderation_actionUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_moderation_actions\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_moderation_actionUpdateManyArgs>(args: SelectSubset<T, discussionboard_moderation_actionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_moderation_actions and returns the data updated in the database.\n     * @param {discussionboard_moderation_actionUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_moderation_actions.\n     * @example\n     * // Update many Discussionboard_moderation_actions\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_moderation_actions and only return the `id`\n     * const discussionboard_moderation_actionWithIdOnly = await prisma.discussionboard_moderation_action.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_moderation_actionUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_moderation_actionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_moderation_action.\n     * @param {discussionboard_moderation_actionUpsertArgs} args - Arguments to update or create a Discussionboard_moderation_action.\n     * @example\n     * // Update or create a Discussionboard_moderation_action\n     * const discussionboard_moderation_action = await prisma.discussionboard_moderation_action.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_moderation_action\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_moderation_action we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_moderation_actionUpsertArgs>(args: SelectSubset<T, discussionboard_moderation_actionUpsertArgs<ExtArgs>>): Prisma__discussionboard_moderation_actionClient<$Result.GetResult<Prisma.$discussionboard_moderation_actionPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_moderation_actions.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderation_actionCountArgs} args - Arguments to filter Discussionboard_moderation_actions to count.\n     * @example\n     * // Count the number of Discussionboard_moderation_actions\n     * const count = await prisma.discussionboard_moderation_action.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_moderation_actions we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_moderation_actionCountArgs>(\n      args?: Subset<T, discussionboard_moderation_actionCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_moderation_actionCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_moderation_action.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_moderation_actionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_moderation_actionAggregateArgs>(args: Subset<T, Discussionboard_moderation_actionAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_moderation_actionAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_moderation_action.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_moderation_actionGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_moderation_actionGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_moderation_actionGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_moderation_actionGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_moderation_actionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_moderation_actionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_moderation_action model\n   */\n  readonly fields: discussionboard_moderation_actionFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_moderation_action.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_moderation_actionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    actor<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    target_user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    moderated_post<T extends discussionboard_moderation_action$moderated_postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_moderation_action$moderated_postArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    moderated_comment<T extends discussionboard_moderation_action$moderated_commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_moderation_action$moderated_commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_moderation_action model\n   */\n  interface discussionboard_moderation_actionFieldRefs {\n    readonly id: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly actor_id: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly target_user_id: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly comment_id: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly action_type: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly reason: FieldRef<\"discussionboard_moderation_action\", 'String'>\n    readonly created_at: FieldRef<\"discussionboard_moderation_action\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_moderation_action findUnique\n   */\n  export type discussionboard_moderation_actionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderation_action to fetch.\n     */\n    where: discussionboard_moderation_actionWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderation_action findUniqueOrThrow\n   */\n  export type discussionboard_moderation_actionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderation_action to fetch.\n     */\n    where: discussionboard_moderation_actionWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderation_action findFirst\n   */\n  export type discussionboard_moderation_actionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderation_action to fetch.\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderation_actions to fetch.\n     */\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_moderation_actions.\n     */\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderation_actions from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderation_actions.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_moderation_actions.\n     */\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_moderation_action findFirstOrThrow\n   */\n  export type discussionboard_moderation_actionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderation_action to fetch.\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderation_actions to fetch.\n     */\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_moderation_actions.\n     */\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderation_actions from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderation_actions.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_moderation_actions.\n     */\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_moderation_action findMany\n   */\n  export type discussionboard_moderation_actionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_moderation_actions to fetch.\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_moderation_actions to fetch.\n     */\n    orderBy?: discussionboard_moderation_actionOrderByWithRelationInput | discussionboard_moderation_actionOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_moderation_actions.\n     */\n    cursor?: discussionboard_moderation_actionWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_moderation_actions from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_moderation_actions.\n     */\n    skip?: number\n    distinct?: Discussionboard_moderation_actionScalarFieldEnum | Discussionboard_moderation_actionScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_moderation_action create\n   */\n  export type discussionboard_moderation_actionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_moderation_action.\n     */\n    data: XOR<discussionboard_moderation_actionCreateInput, discussionboard_moderation_actionUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_moderation_action createMany\n   */\n  export type discussionboard_moderation_actionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_moderation_actions.\n     */\n    data: discussionboard_moderation_actionCreateManyInput | discussionboard_moderation_actionCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_moderation_action createManyAndReturn\n   */\n  export type discussionboard_moderation_actionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_moderation_actions.\n     */\n    data: discussionboard_moderation_actionCreateManyInput | discussionboard_moderation_actionCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_moderation_action update\n   */\n  export type discussionboard_moderation_actionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_moderation_action.\n     */\n    data: XOR<discussionboard_moderation_actionUpdateInput, discussionboard_moderation_actionUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_moderation_action to update.\n     */\n    where: discussionboard_moderation_actionWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderation_action updateMany\n   */\n  export type discussionboard_moderation_actionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_moderation_actions.\n     */\n    data: XOR<discussionboard_moderation_actionUpdateManyMutationInput, discussionboard_moderation_actionUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_moderation_actions to update\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * Limit how many discussionboard_moderation_actions to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_moderation_action updateManyAndReturn\n   */\n  export type discussionboard_moderation_actionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_moderation_actions.\n     */\n    data: XOR<discussionboard_moderation_actionUpdateManyMutationInput, discussionboard_moderation_actionUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_moderation_actions to update\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * Limit how many discussionboard_moderation_actions to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_moderation_action upsert\n   */\n  export type discussionboard_moderation_actionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_moderation_action to update in case it exists.\n     */\n    where: discussionboard_moderation_actionWhereUniqueInput\n    /**\n     * In case the discussionboard_moderation_action found by the `where` argument doesn't exist, create a new discussionboard_moderation_action with this data.\n     */\n    create: XOR<discussionboard_moderation_actionCreateInput, discussionboard_moderation_actionUncheckedCreateInput>\n    /**\n     * In case the discussionboard_moderation_action was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_moderation_actionUpdateInput, discussionboard_moderation_actionUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_moderation_action delete\n   */\n  export type discussionboard_moderation_actionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_moderation_action to delete.\n     */\n    where: discussionboard_moderation_actionWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_moderation_action deleteMany\n   */\n  export type discussionboard_moderation_actionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_moderation_actions to delete\n     */\n    where?: discussionboard_moderation_actionWhereInput\n    /**\n     * Limit how many discussionboard_moderation_actions to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_moderation_action.moderated_post\n   */\n  export type discussionboard_moderation_action$moderated_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n  }\n\n  /**\n   * discussionboard_moderation_action.moderated_comment\n   */\n  export type discussionboard_moderation_action$moderated_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_moderation_action without action\n   */\n  export type discussionboard_moderation_actionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_moderation_action\n     */\n    select?: discussionboard_moderation_actionSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_moderation_action\n     */\n    omit?: discussionboard_moderation_actionOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_moderation_actionInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_report_review\n   */\n\n  export type AggregateDiscussionboard_report_review = {\n    _count: Discussionboard_report_reviewCountAggregateOutputType | null\n    _min: Discussionboard_report_reviewMinAggregateOutputType | null\n    _max: Discussionboard_report_reviewMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_report_reviewMinAggregateOutputType = {\n    id: string | null\n    report_id: string | null\n    reviewer_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    review_status: string | null\n    moderator_comment: string | null\n    reviewed_at: Date | null\n  }\n\n  export type Discussionboard_report_reviewMaxAggregateOutputType = {\n    id: string | null\n    report_id: string | null\n    reviewer_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    review_status: string | null\n    moderator_comment: string | null\n    reviewed_at: Date | null\n  }\n\n  export type Discussionboard_report_reviewCountAggregateOutputType = {\n    id: number\n    report_id: number\n    reviewer_id: number\n    post_id: number\n    comment_id: number\n    review_status: number\n    moderator_comment: number\n    reviewed_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_report_reviewMinAggregateInputType = {\n    id?: true\n    report_id?: true\n    reviewer_id?: true\n    post_id?: true\n    comment_id?: true\n    review_status?: true\n    moderator_comment?: true\n    reviewed_at?: true\n  }\n\n  export type Discussionboard_report_reviewMaxAggregateInputType = {\n    id?: true\n    report_id?: true\n    reviewer_id?: true\n    post_id?: true\n    comment_id?: true\n    review_status?: true\n    moderator_comment?: true\n    reviewed_at?: true\n  }\n\n  export type Discussionboard_report_reviewCountAggregateInputType = {\n    id?: true\n    report_id?: true\n    reviewer_id?: true\n    post_id?: true\n    comment_id?: true\n    review_status?: true\n    moderator_comment?: true\n    reviewed_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_report_reviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_report_review to aggregate.\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_report_reviews to fetch.\n     */\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_report_reviews from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_report_reviews.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_report_reviews\n    **/\n    _count?: true | Discussionboard_report_reviewCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_report_reviewMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_report_reviewMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_report_reviewAggregateType<T extends Discussionboard_report_reviewAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_report_review]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_report_review[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_report_review[P]>\n  }\n\n\n\n\n  export type discussionboard_report_reviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_report_reviewWhereInput\n    orderBy?: discussionboard_report_reviewOrderByWithAggregationInput | discussionboard_report_reviewOrderByWithAggregationInput[]\n    by: Discussionboard_report_reviewScalarFieldEnum[] | Discussionboard_report_reviewScalarFieldEnum\n    having?: discussionboard_report_reviewScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_report_reviewCountAggregateInputType | true\n    _min?: Discussionboard_report_reviewMinAggregateInputType\n    _max?: Discussionboard_report_reviewMaxAggregateInputType\n  }\n\n  export type Discussionboard_report_reviewGroupByOutputType = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    post_id: string | null\n    comment_id: string | null\n    review_status: string\n    moderator_comment: string | null\n    reviewed_at: Date\n    _count: Discussionboard_report_reviewCountAggregateOutputType | null\n    _min: Discussionboard_report_reviewMinAggregateOutputType | null\n    _max: Discussionboard_report_reviewMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_report_reviewGroupByPayload<T extends discussionboard_report_reviewGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_report_reviewGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_report_reviewGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_report_reviewGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_report_reviewGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_report_reviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    report_id?: boolean\n    reviewer_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    review_status?: boolean\n    moderator_comment?: boolean\n    reviewed_at?: boolean\n    report?: boolean | discussionboard_reportsDefaultArgs<ExtArgs>\n    reviewer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    reviewed_post?: boolean | discussionboard_report_review$reviewed_postArgs<ExtArgs>\n    reviewed_comment?: boolean | discussionboard_report_review$reviewed_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_report_review\"]>\n\n  export type discussionboard_report_reviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    report_id?: boolean\n    reviewer_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    review_status?: boolean\n    moderator_comment?: boolean\n    reviewed_at?: boolean\n    report?: boolean | discussionboard_reportsDefaultArgs<ExtArgs>\n    reviewer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    reviewed_post?: boolean | discussionboard_report_review$reviewed_postArgs<ExtArgs>\n    reviewed_comment?: boolean | discussionboard_report_review$reviewed_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_report_review\"]>\n\n  export type discussionboard_report_reviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    report_id?: boolean\n    reviewer_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    review_status?: boolean\n    moderator_comment?: boolean\n    reviewed_at?: boolean\n    report?: boolean | discussionboard_reportsDefaultArgs<ExtArgs>\n    reviewer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    reviewed_post?: boolean | discussionboard_report_review$reviewed_postArgs<ExtArgs>\n    reviewed_comment?: boolean | discussionboard_report_review$reviewed_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_report_review\"]>\n\n  export type discussionboard_report_reviewSelectScalar = {\n    id?: boolean\n    report_id?: boolean\n    reviewer_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    review_status?: boolean\n    moderator_comment?: boolean\n    reviewed_at?: boolean\n  }\n\n  export type discussionboard_report_reviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"report_id\" | \"reviewer_id\" | \"post_id\" | \"comment_id\" | \"review_status\" | \"moderator_comment\" | \"reviewed_at\", ExtArgs[\"result\"][\"discussionboard_report_review\"]>\n  export type discussionboard_report_reviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    report?: boolean | discussionboard_reportsDefaultArgs<ExtArgs>\n    reviewer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    reviewed_post?: boolean | discussionboard_report_review$reviewed_postArgs<ExtArgs>\n    reviewed_comment?: boolean | discussionboard_report_review$reviewed_commentArgs<ExtArgs>\n  }\n  export type discussionboard_report_reviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    report?: boolean | discussionboard_reportsDefaultArgs<ExtArgs>\n    reviewer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    reviewed_post?: boolean | discussionboard_report_review$reviewed_postArgs<ExtArgs>\n    reviewed_comment?: boolean | discussionboard_report_review$reviewed_commentArgs<ExtArgs>\n  }\n  export type discussionboard_report_reviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    report?: boolean | discussionboard_reportsDefaultArgs<ExtArgs>\n    reviewer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    reviewed_post?: boolean | discussionboard_report_review$reviewed_postArgs<ExtArgs>\n    reviewed_comment?: boolean | discussionboard_report_review$reviewed_commentArgs<ExtArgs>\n  }\n\n  export type $discussionboard_report_reviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_report_review\"\n    objects: {\n      report: Prisma.$discussionboard_reportsPayload<ExtArgs>\n      reviewer: Prisma.$discussionboard_userPayload<ExtArgs>\n      reviewed_post: Prisma.$discussionboard_postPayload<ExtArgs> | null\n      reviewed_comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary key] - Unique identifier for report reviews.\n       */\n      id: string\n      /**\n       * [The report being reviewed] - Links to a specific user report for moderation review.\n       */\n      report_id: string\n      /**\n       * [Moderator/admin reviewer] - References user carrying out the review.\n       */\n      reviewer_id: string\n      /**\n       * [Reviewed post] - Links reviewed post, nullable because not all reports are about posts.\n       */\n      post_id: string | null\n      /**\n       * [Reviewed comment] - Links reviewed comment, nullable because not all reports are about comments.\n       */\n      comment_id: string | null\n      /**\n       * [Outcome status] - Status for reviewed reports: e.g., 'resolved', 'rejected', 'pending'.\n       */\n      review_status: string\n      /**\n       * [Review notes] - Optional comments from reviewer.\n       */\n      moderator_comment: string | null\n      /**\n       * [Review timestamp] - Auditable time of moderation review.\n       */\n      reviewed_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_report_review\"]>\n    composites: {}\n  }\n\n  type discussionboard_report_reviewGetPayload<S extends boolean | null | undefined | discussionboard_report_reviewDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_report_reviewPayload, S>\n\n  type discussionboard_report_reviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_report_reviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_report_reviewCountAggregateInputType | true\n    }\n\n  export interface discussionboard_report_reviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_report_review'], meta: { name: 'discussionboard_report_review' } }\n    /**\n     * Find zero or one Discussionboard_report_review that matches the filter.\n     * @param {discussionboard_report_reviewFindUniqueArgs} args - Arguments to find a Discussionboard_report_review\n     * @example\n     * // Get one Discussionboard_report_review\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_report_reviewFindUniqueArgs>(args: SelectSubset<T, discussionboard_report_reviewFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_report_review that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_report_reviewFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_report_review\n     * @example\n     * // Get one Discussionboard_report_review\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_report_reviewFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_report_reviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_report_review that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_report_reviewFindFirstArgs} args - Arguments to find a Discussionboard_report_review\n     * @example\n     * // Get one Discussionboard_report_review\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_report_reviewFindFirstArgs>(args?: SelectSubset<T, discussionboard_report_reviewFindFirstArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_report_review that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_report_reviewFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_report_review\n     * @example\n     * // Get one Discussionboard_report_review\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_report_reviewFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_report_reviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_report_reviews that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_report_reviewFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_report_reviews\n     * const discussionboard_report_reviews = await prisma.discussionboard_report_review.findMany()\n     * \n     * // Get first 10 Discussionboard_report_reviews\n     * const discussionboard_report_reviews = await prisma.discussionboard_report_review.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_report_reviewWithIdOnly = await prisma.discussionboard_report_review.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_report_reviewFindManyArgs>(args?: SelectSubset<T, discussionboard_report_reviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_report_review.\n     * @param {discussionboard_report_reviewCreateArgs} args - Arguments to create a Discussionboard_report_review.\n     * @example\n     * // Create one Discussionboard_report_review\n     * const Discussionboard_report_review = await prisma.discussionboard_report_review.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_report_review\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_report_reviewCreateArgs>(args: SelectSubset<T, discussionboard_report_reviewCreateArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_report_reviews.\n     * @param {discussionboard_report_reviewCreateManyArgs} args - Arguments to create many Discussionboard_report_reviews.\n     * @example\n     * // Create many Discussionboard_report_reviews\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_report_reviewCreateManyArgs>(args?: SelectSubset<T, discussionboard_report_reviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_report_reviews and returns the data saved in the database.\n     * @param {discussionboard_report_reviewCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_report_reviews.\n     * @example\n     * // Create many Discussionboard_report_reviews\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_report_reviews and only return the `id`\n     * const discussionboard_report_reviewWithIdOnly = await prisma.discussionboard_report_review.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_report_reviewCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_report_reviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_report_review.\n     * @param {discussionboard_report_reviewDeleteArgs} args - Arguments to delete one Discussionboard_report_review.\n     * @example\n     * // Delete one Discussionboard_report_review\n     * const Discussionboard_report_review = await prisma.discussionboard_report_review.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_report_review\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_report_reviewDeleteArgs>(args: SelectSubset<T, discussionboard_report_reviewDeleteArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_report_review.\n     * @param {discussionboard_report_reviewUpdateArgs} args - Arguments to update one Discussionboard_report_review.\n     * @example\n     * // Update one Discussionboard_report_review\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_report_reviewUpdateArgs>(args: SelectSubset<T, discussionboard_report_reviewUpdateArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_report_reviews.\n     * @param {discussionboard_report_reviewDeleteManyArgs} args - Arguments to filter Discussionboard_report_reviews to delete.\n     * @example\n     * // Delete a few Discussionboard_report_reviews\n     * const { count } = await prisma.discussionboard_report_review.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_report_reviewDeleteManyArgs>(args?: SelectSubset<T, discussionboard_report_reviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_report_reviews.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_report_reviewUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_report_reviews\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_report_reviewUpdateManyArgs>(args: SelectSubset<T, discussionboard_report_reviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_report_reviews and returns the data updated in the database.\n     * @param {discussionboard_report_reviewUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_report_reviews.\n     * @example\n     * // Update many Discussionboard_report_reviews\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_report_reviews and only return the `id`\n     * const discussionboard_report_reviewWithIdOnly = await prisma.discussionboard_report_review.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_report_reviewUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_report_reviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_report_review.\n     * @param {discussionboard_report_reviewUpsertArgs} args - Arguments to update or create a Discussionboard_report_review.\n     * @example\n     * // Update or create a Discussionboard_report_review\n     * const discussionboard_report_review = await prisma.discussionboard_report_review.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_report_review\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_report_review we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_report_reviewUpsertArgs>(args: SelectSubset<T, discussionboard_report_reviewUpsertArgs<ExtArgs>>): Prisma__discussionboard_report_reviewClient<$Result.GetResult<Prisma.$discussionboard_report_reviewPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_report_reviews.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_report_reviewCountArgs} args - Arguments to filter Discussionboard_report_reviews to count.\n     * @example\n     * // Count the number of Discussionboard_report_reviews\n     * const count = await prisma.discussionboard_report_review.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_report_reviews we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_report_reviewCountArgs>(\n      args?: Subset<T, discussionboard_report_reviewCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_report_reviewCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_report_review.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_report_reviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_report_reviewAggregateArgs>(args: Subset<T, Discussionboard_report_reviewAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_report_reviewAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_report_review.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_report_reviewGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_report_reviewGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_report_reviewGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_report_reviewGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_report_reviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_report_reviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_report_review model\n   */\n  readonly fields: discussionboard_report_reviewFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_report_review.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_report_reviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    report<T extends discussionboard_reportsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_reportsDefaultArgs<ExtArgs>>): Prisma__discussionboard_reportsClient<$Result.GetResult<Prisma.$discussionboard_reportsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    reviewer<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    reviewed_post<T extends discussionboard_report_review$reviewed_postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_report_review$reviewed_postArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    reviewed_comment<T extends discussionboard_report_review$reviewed_commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_report_review$reviewed_commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_report_review model\n   */\n  interface discussionboard_report_reviewFieldRefs {\n    readonly id: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly report_id: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly reviewer_id: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly comment_id: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly review_status: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly moderator_comment: FieldRef<\"discussionboard_report_review\", 'String'>\n    readonly reviewed_at: FieldRef<\"discussionboard_report_review\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_report_review findUnique\n   */\n  export type discussionboard_report_reviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_report_review to fetch.\n     */\n    where: discussionboard_report_reviewWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_report_review findUniqueOrThrow\n   */\n  export type discussionboard_report_reviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_report_review to fetch.\n     */\n    where: discussionboard_report_reviewWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_report_review findFirst\n   */\n  export type discussionboard_report_reviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_report_review to fetch.\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_report_reviews to fetch.\n     */\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_report_reviews.\n     */\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_report_reviews from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_report_reviews.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_report_reviews.\n     */\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_report_review findFirstOrThrow\n   */\n  export type discussionboard_report_reviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_report_review to fetch.\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_report_reviews to fetch.\n     */\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_report_reviews.\n     */\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_report_reviews from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_report_reviews.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_report_reviews.\n     */\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_report_review findMany\n   */\n  export type discussionboard_report_reviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_report_reviews to fetch.\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_report_reviews to fetch.\n     */\n    orderBy?: discussionboard_report_reviewOrderByWithRelationInput | discussionboard_report_reviewOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_report_reviews.\n     */\n    cursor?: discussionboard_report_reviewWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_report_reviews from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_report_reviews.\n     */\n    skip?: number\n    distinct?: Discussionboard_report_reviewScalarFieldEnum | Discussionboard_report_reviewScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_report_review create\n   */\n  export type discussionboard_report_reviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_report_review.\n     */\n    data: XOR<discussionboard_report_reviewCreateInput, discussionboard_report_reviewUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_report_review createMany\n   */\n  export type discussionboard_report_reviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_report_reviews.\n     */\n    data: discussionboard_report_reviewCreateManyInput | discussionboard_report_reviewCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_report_review createManyAndReturn\n   */\n  export type discussionboard_report_reviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_report_reviews.\n     */\n    data: discussionboard_report_reviewCreateManyInput | discussionboard_report_reviewCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_report_review update\n   */\n  export type discussionboard_report_reviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_report_review.\n     */\n    data: XOR<discussionboard_report_reviewUpdateInput, discussionboard_report_reviewUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_report_review to update.\n     */\n    where: discussionboard_report_reviewWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_report_review updateMany\n   */\n  export type discussionboard_report_reviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_report_reviews.\n     */\n    data: XOR<discussionboard_report_reviewUpdateManyMutationInput, discussionboard_report_reviewUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_report_reviews to update\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * Limit how many discussionboard_report_reviews to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_report_review updateManyAndReturn\n   */\n  export type discussionboard_report_reviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_report_reviews.\n     */\n    data: XOR<discussionboard_report_reviewUpdateManyMutationInput, discussionboard_report_reviewUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_report_reviews to update\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * Limit how many discussionboard_report_reviews to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_report_review upsert\n   */\n  export type discussionboard_report_reviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_report_review to update in case it exists.\n     */\n    where: discussionboard_report_reviewWhereUniqueInput\n    /**\n     * In case the discussionboard_report_review found by the `where` argument doesn't exist, create a new discussionboard_report_review with this data.\n     */\n    create: XOR<discussionboard_report_reviewCreateInput, discussionboard_report_reviewUncheckedCreateInput>\n    /**\n     * In case the discussionboard_report_review was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_report_reviewUpdateInput, discussionboard_report_reviewUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_report_review delete\n   */\n  export type discussionboard_report_reviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_report_review to delete.\n     */\n    where: discussionboard_report_reviewWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_report_review deleteMany\n   */\n  export type discussionboard_report_reviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_report_reviews to delete\n     */\n    where?: discussionboard_report_reviewWhereInput\n    /**\n     * Limit how many discussionboard_report_reviews to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_report_review.reviewed_post\n   */\n  export type discussionboard_report_review$reviewed_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n  }\n\n  /**\n   * discussionboard_report_review.reviewed_comment\n   */\n  export type discussionboard_report_review$reviewed_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_report_review without action\n   */\n  export type discussionboard_report_reviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_report_review\n     */\n    select?: discussionboard_report_reviewSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_report_review\n     */\n    omit?: discussionboard_report_reviewOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_report_reviewInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_warning\n   */\n\n  export type AggregateDiscussionboard_warning = {\n    _count: Discussionboard_warningCountAggregateOutputType | null\n    _min: Discussionboard_warningMinAggregateOutputType | null\n    _max: Discussionboard_warningMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_warningMinAggregateOutputType = {\n    id: string | null\n    issued_by_id: string | null\n    issued_to_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    warning_type: string | null\n    message: string | null\n    issued_at: Date | null\n  }\n\n  export type Discussionboard_warningMaxAggregateOutputType = {\n    id: string | null\n    issued_by_id: string | null\n    issued_to_id: string | null\n    post_id: string | null\n    comment_id: string | null\n    warning_type: string | null\n    message: string | null\n    issued_at: Date | null\n  }\n\n  export type Discussionboard_warningCountAggregateOutputType = {\n    id: number\n    issued_by_id: number\n    issued_to_id: number\n    post_id: number\n    comment_id: number\n    warning_type: number\n    message: number\n    issued_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_warningMinAggregateInputType = {\n    id?: true\n    issued_by_id?: true\n    issued_to_id?: true\n    post_id?: true\n    comment_id?: true\n    warning_type?: true\n    message?: true\n    issued_at?: true\n  }\n\n  export type Discussionboard_warningMaxAggregateInputType = {\n    id?: true\n    issued_by_id?: true\n    issued_to_id?: true\n    post_id?: true\n    comment_id?: true\n    warning_type?: true\n    message?: true\n    issued_at?: true\n  }\n\n  export type Discussionboard_warningCountAggregateInputType = {\n    id?: true\n    issued_by_id?: true\n    issued_to_id?: true\n    post_id?: true\n    comment_id?: true\n    warning_type?: true\n    message?: true\n    issued_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_warningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_warning to aggregate.\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_warnings to fetch.\n     */\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_warningWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_warnings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_warnings.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_warnings\n    **/\n    _count?: true | Discussionboard_warningCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_warningMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_warningMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_warningAggregateType<T extends Discussionboard_warningAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_warning]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_warning[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_warning[P]>\n  }\n\n\n\n\n  export type discussionboard_warningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_warningWhereInput\n    orderBy?: discussionboard_warningOrderByWithAggregationInput | discussionboard_warningOrderByWithAggregationInput[]\n    by: Discussionboard_warningScalarFieldEnum[] | Discussionboard_warningScalarFieldEnum\n    having?: discussionboard_warningScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_warningCountAggregateInputType | true\n    _min?: Discussionboard_warningMinAggregateInputType\n    _max?: Discussionboard_warningMaxAggregateInputType\n  }\n\n  export type Discussionboard_warningGroupByOutputType = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    post_id: string | null\n    comment_id: string | null\n    warning_type: string\n    message: string\n    issued_at: Date\n    _count: Discussionboard_warningCountAggregateOutputType | null\n    _min: Discussionboard_warningMinAggregateOutputType | null\n    _max: Discussionboard_warningMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_warningGroupByPayload<T extends discussionboard_warningGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_warningGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_warningGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_warningGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_warningGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_warningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    issued_by_id?: boolean\n    issued_to_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    warning_type?: boolean\n    message?: boolean\n    issued_at?: boolean\n    issuer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    recipient?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    warning_post?: boolean | discussionboard_warning$warning_postArgs<ExtArgs>\n    warning_comment?: boolean | discussionboard_warning$warning_commentArgs<ExtArgs>\n    discussionboard_ban?: boolean | discussionboard_warning$discussionboard_banArgs<ExtArgs>\n    _count?: boolean | Discussionboard_warningCountOutputTypeDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_warning\"]>\n\n  export type discussionboard_warningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    issued_by_id?: boolean\n    issued_to_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    warning_type?: boolean\n    message?: boolean\n    issued_at?: boolean\n    issuer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    recipient?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    warning_post?: boolean | discussionboard_warning$warning_postArgs<ExtArgs>\n    warning_comment?: boolean | discussionboard_warning$warning_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_warning\"]>\n\n  export type discussionboard_warningSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    issued_by_id?: boolean\n    issued_to_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    warning_type?: boolean\n    message?: boolean\n    issued_at?: boolean\n    issuer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    recipient?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    warning_post?: boolean | discussionboard_warning$warning_postArgs<ExtArgs>\n    warning_comment?: boolean | discussionboard_warning$warning_commentArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_warning\"]>\n\n  export type discussionboard_warningSelectScalar = {\n    id?: boolean\n    issued_by_id?: boolean\n    issued_to_id?: boolean\n    post_id?: boolean\n    comment_id?: boolean\n    warning_type?: boolean\n    message?: boolean\n    issued_at?: boolean\n  }\n\n  export type discussionboard_warningOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"issued_by_id\" | \"issued_to_id\" | \"post_id\" | \"comment_id\" | \"warning_type\" | \"message\" | \"issued_at\", ExtArgs[\"result\"][\"discussionboard_warning\"]>\n  export type discussionboard_warningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    issuer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    recipient?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    warning_post?: boolean | discussionboard_warning$warning_postArgs<ExtArgs>\n    warning_comment?: boolean | discussionboard_warning$warning_commentArgs<ExtArgs>\n    discussionboard_ban?: boolean | discussionboard_warning$discussionboard_banArgs<ExtArgs>\n    _count?: boolean | Discussionboard_warningCountOutputTypeDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_warningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    issuer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    recipient?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    warning_post?: boolean | discussionboard_warning$warning_postArgs<ExtArgs>\n    warning_comment?: boolean | discussionboard_warning$warning_commentArgs<ExtArgs>\n  }\n  export type discussionboard_warningIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    issuer?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    recipient?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    warning_post?: boolean | discussionboard_warning$warning_postArgs<ExtArgs>\n    warning_comment?: boolean | discussionboard_warning$warning_commentArgs<ExtArgs>\n  }\n\n  export type $discussionboard_warningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_warning\"\n    objects: {\n      issuer: Prisma.$discussionboard_userPayload<ExtArgs>\n      recipient: Prisma.$discussionboard_userPayload<ExtArgs>\n      warning_post: Prisma.$discussionboard_postPayload<ExtArgs> | null\n      warning_comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n      discussionboard_ban: Prisma.$discussionboard_banPayload<ExtArgs>[]\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary key] - Globally unique identifier of each warning.\n       */\n      id: string\n      /**\n       * [Issuer] - Moderator/admin user issuing the warning.\n       */\n      issued_by_id: string\n      /**\n       * [Recipient] - User who receives the warning.\n       */\n      issued_to_id: string\n      /**\n       * [Related post] - Cause for warning (optional, nullable).\n       */\n      post_id: string | null\n      /**\n       * [Related comment] - Cause for warning (optional, nullable).\n       */\n      comment_id: string | null\n      /**\n       * [Type of warning] - Categorical reason: e.g., 'abuse', 'spam', etc.\n       */\n      warning_type: string\n      /**\n       * [Moderator message] - Human-explained rationale.\n       */\n      message: string\n      /**\n       * [Issue timestamp] - The date/time warning was given.\n       */\n      issued_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_warning\"]>\n    composites: {}\n  }\n\n  type discussionboard_warningGetPayload<S extends boolean | null | undefined | discussionboard_warningDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_warningPayload, S>\n\n  type discussionboard_warningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_warningFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_warningCountAggregateInputType | true\n    }\n\n  export interface discussionboard_warningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_warning'], meta: { name: 'discussionboard_warning' } }\n    /**\n     * Find zero or one Discussionboard_warning that matches the filter.\n     * @param {discussionboard_warningFindUniqueArgs} args - Arguments to find a Discussionboard_warning\n     * @example\n     * // Get one Discussionboard_warning\n     * const discussionboard_warning = await prisma.discussionboard_warning.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_warningFindUniqueArgs>(args: SelectSubset<T, discussionboard_warningFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_warning that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_warningFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_warning\n     * @example\n     * // Get one Discussionboard_warning\n     * const discussionboard_warning = await prisma.discussionboard_warning.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_warningFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_warningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_warning that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_warningFindFirstArgs} args - Arguments to find a Discussionboard_warning\n     * @example\n     * // Get one Discussionboard_warning\n     * const discussionboard_warning = await prisma.discussionboard_warning.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_warningFindFirstArgs>(args?: SelectSubset<T, discussionboard_warningFindFirstArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_warning that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_warningFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_warning\n     * @example\n     * // Get one Discussionboard_warning\n     * const discussionboard_warning = await prisma.discussionboard_warning.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_warningFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_warningFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_warnings that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_warningFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_warnings\n     * const discussionboard_warnings = await prisma.discussionboard_warning.findMany()\n     * \n     * // Get first 10 Discussionboard_warnings\n     * const discussionboard_warnings = await prisma.discussionboard_warning.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_warningWithIdOnly = await prisma.discussionboard_warning.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_warningFindManyArgs>(args?: SelectSubset<T, discussionboard_warningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_warning.\n     * @param {discussionboard_warningCreateArgs} args - Arguments to create a Discussionboard_warning.\n     * @example\n     * // Create one Discussionboard_warning\n     * const Discussionboard_warning = await prisma.discussionboard_warning.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_warning\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_warningCreateArgs>(args: SelectSubset<T, discussionboard_warningCreateArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_warnings.\n     * @param {discussionboard_warningCreateManyArgs} args - Arguments to create many Discussionboard_warnings.\n     * @example\n     * // Create many Discussionboard_warnings\n     * const discussionboard_warning = await prisma.discussionboard_warning.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_warningCreateManyArgs>(args?: SelectSubset<T, discussionboard_warningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_warnings and returns the data saved in the database.\n     * @param {discussionboard_warningCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_warnings.\n     * @example\n     * // Create many Discussionboard_warnings\n     * const discussionboard_warning = await prisma.discussionboard_warning.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_warnings and only return the `id`\n     * const discussionboard_warningWithIdOnly = await prisma.discussionboard_warning.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_warningCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_warningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_warning.\n     * @param {discussionboard_warningDeleteArgs} args - Arguments to delete one Discussionboard_warning.\n     * @example\n     * // Delete one Discussionboard_warning\n     * const Discussionboard_warning = await prisma.discussionboard_warning.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_warning\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_warningDeleteArgs>(args: SelectSubset<T, discussionboard_warningDeleteArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_warning.\n     * @param {discussionboard_warningUpdateArgs} args - Arguments to update one Discussionboard_warning.\n     * @example\n     * // Update one Discussionboard_warning\n     * const discussionboard_warning = await prisma.discussionboard_warning.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_warningUpdateArgs>(args: SelectSubset<T, discussionboard_warningUpdateArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_warnings.\n     * @param {discussionboard_warningDeleteManyArgs} args - Arguments to filter Discussionboard_warnings to delete.\n     * @example\n     * // Delete a few Discussionboard_warnings\n     * const { count } = await prisma.discussionboard_warning.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_warningDeleteManyArgs>(args?: SelectSubset<T, discussionboard_warningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_warnings.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_warningUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_warnings\n     * const discussionboard_warning = await prisma.discussionboard_warning.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_warningUpdateManyArgs>(args: SelectSubset<T, discussionboard_warningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_warnings and returns the data updated in the database.\n     * @param {discussionboard_warningUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_warnings.\n     * @example\n     * // Update many Discussionboard_warnings\n     * const discussionboard_warning = await prisma.discussionboard_warning.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_warnings and only return the `id`\n     * const discussionboard_warningWithIdOnly = await prisma.discussionboard_warning.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_warningUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_warningUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_warning.\n     * @param {discussionboard_warningUpsertArgs} args - Arguments to update or create a Discussionboard_warning.\n     * @example\n     * // Update or create a Discussionboard_warning\n     * const discussionboard_warning = await prisma.discussionboard_warning.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_warning\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_warning we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_warningUpsertArgs>(args: SelectSubset<T, discussionboard_warningUpsertArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_warnings.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_warningCountArgs} args - Arguments to filter Discussionboard_warnings to count.\n     * @example\n     * // Count the number of Discussionboard_warnings\n     * const count = await prisma.discussionboard_warning.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_warnings we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_warningCountArgs>(\n      args?: Subset<T, discussionboard_warningCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_warningCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_warning.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_warningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_warningAggregateArgs>(args: Subset<T, Discussionboard_warningAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_warningAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_warning.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_warningGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_warningGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_warningGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_warningGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_warningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_warningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_warning model\n   */\n  readonly fields: discussionboard_warningFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_warning.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_warningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    issuer<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    recipient<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    warning_post<T extends discussionboard_warning$warning_postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_warning$warning_postArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    warning_comment<T extends discussionboard_warning$warning_commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_warning$warning_commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    discussionboard_ban<T extends discussionboard_warning$discussionboard_banArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_warning$discussionboard_banArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions> | Null>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_warning model\n   */\n  interface discussionboard_warningFieldRefs {\n    readonly id: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly issued_by_id: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly issued_to_id: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly post_id: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly comment_id: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly warning_type: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly message: FieldRef<\"discussionboard_warning\", 'String'>\n    readonly issued_at: FieldRef<\"discussionboard_warning\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_warning findUnique\n   */\n  export type discussionboard_warningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_warning to fetch.\n     */\n    where: discussionboard_warningWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_warning findUniqueOrThrow\n   */\n  export type discussionboard_warningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_warning to fetch.\n     */\n    where: discussionboard_warningWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_warning findFirst\n   */\n  export type discussionboard_warningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_warning to fetch.\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_warnings to fetch.\n     */\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_warnings.\n     */\n    cursor?: discussionboard_warningWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_warnings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_warnings.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_warnings.\n     */\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_warning findFirstOrThrow\n   */\n  export type discussionboard_warningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_warning to fetch.\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_warnings to fetch.\n     */\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_warnings.\n     */\n    cursor?: discussionboard_warningWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_warnings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_warnings.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_warnings.\n     */\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_warning findMany\n   */\n  export type discussionboard_warningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_warnings to fetch.\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_warnings to fetch.\n     */\n    orderBy?: discussionboard_warningOrderByWithRelationInput | discussionboard_warningOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_warnings.\n     */\n    cursor?: discussionboard_warningWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_warnings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_warnings.\n     */\n    skip?: number\n    distinct?: Discussionboard_warningScalarFieldEnum | Discussionboard_warningScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_warning create\n   */\n  export type discussionboard_warningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_warning.\n     */\n    data: XOR<discussionboard_warningCreateInput, discussionboard_warningUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_warning createMany\n   */\n  export type discussionboard_warningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_warnings.\n     */\n    data: discussionboard_warningCreateManyInput | discussionboard_warningCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_warning createManyAndReturn\n   */\n  export type discussionboard_warningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_warnings.\n     */\n    data: discussionboard_warningCreateManyInput | discussionboard_warningCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_warning update\n   */\n  export type discussionboard_warningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_warning.\n     */\n    data: XOR<discussionboard_warningUpdateInput, discussionboard_warningUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_warning to update.\n     */\n    where: discussionboard_warningWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_warning updateMany\n   */\n  export type discussionboard_warningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_warnings.\n     */\n    data: XOR<discussionboard_warningUpdateManyMutationInput, discussionboard_warningUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_warnings to update\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * Limit how many discussionboard_warnings to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_warning updateManyAndReturn\n   */\n  export type discussionboard_warningUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_warnings.\n     */\n    data: XOR<discussionboard_warningUpdateManyMutationInput, discussionboard_warningUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_warnings to update\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * Limit how many discussionboard_warnings to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_warning upsert\n   */\n  export type discussionboard_warningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_warning to update in case it exists.\n     */\n    where: discussionboard_warningWhereUniqueInput\n    /**\n     * In case the discussionboard_warning found by the `where` argument doesn't exist, create a new discussionboard_warning with this data.\n     */\n    create: XOR<discussionboard_warningCreateInput, discussionboard_warningUncheckedCreateInput>\n    /**\n     * In case the discussionboard_warning was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_warningUpdateInput, discussionboard_warningUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_warning delete\n   */\n  export type discussionboard_warningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_warning to delete.\n     */\n    where: discussionboard_warningWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_warning deleteMany\n   */\n  export type discussionboard_warningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_warnings to delete\n     */\n    where?: discussionboard_warningWhereInput\n    /**\n     * Limit how many discussionboard_warnings to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_warning.warning_post\n   */\n  export type discussionboard_warning$warning_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n  }\n\n  /**\n   * discussionboard_warning.warning_comment\n   */\n  export type discussionboard_warning$warning_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_warning.discussionboard_ban\n   */\n  export type discussionboard_warning$discussionboard_banArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    where?: discussionboard_banWhereInput\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    cursor?: discussionboard_banWhereUniqueInput\n    take?: number\n    skip?: number\n    distinct?: Discussionboard_banScalarFieldEnum | Discussionboard_banScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_warning without action\n   */\n  export type discussionboard_warningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_ban\n   */\n\n  export type AggregateDiscussionboard_ban = {\n    _count: Discussionboard_banCountAggregateOutputType | null\n    _min: Discussionboard_banMinAggregateOutputType | null\n    _max: Discussionboard_banMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_banMinAggregateOutputType = {\n    id: string | null\n    banned_user_id: string | null\n    banned_by_id: string | null\n    warning_id: string | null\n    ban_type: string | null\n    reason: string | null\n    issued_at: Date | null\n    expires_at: Date | null\n  }\n\n  export type Discussionboard_banMaxAggregateOutputType = {\n    id: string | null\n    banned_user_id: string | null\n    banned_by_id: string | null\n    warning_id: string | null\n    ban_type: string | null\n    reason: string | null\n    issued_at: Date | null\n    expires_at: Date | null\n  }\n\n  export type Discussionboard_banCountAggregateOutputType = {\n    id: number\n    banned_user_id: number\n    banned_by_id: number\n    warning_id: number\n    ban_type: number\n    reason: number\n    issued_at: number\n    expires_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_banMinAggregateInputType = {\n    id?: true\n    banned_user_id?: true\n    banned_by_id?: true\n    warning_id?: true\n    ban_type?: true\n    reason?: true\n    issued_at?: true\n    expires_at?: true\n  }\n\n  export type Discussionboard_banMaxAggregateInputType = {\n    id?: true\n    banned_user_id?: true\n    banned_by_id?: true\n    warning_id?: true\n    ban_type?: true\n    reason?: true\n    issued_at?: true\n    expires_at?: true\n  }\n\n  export type Discussionboard_banCountAggregateInputType = {\n    id?: true\n    banned_user_id?: true\n    banned_by_id?: true\n    warning_id?: true\n    ban_type?: true\n    reason?: true\n    issued_at?: true\n    expires_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_banAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_ban to aggregate.\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_bans to fetch.\n     */\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_banWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_bans from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_bans.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_bans\n    **/\n    _count?: true | Discussionboard_banCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_banMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_banMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_banAggregateType<T extends Discussionboard_banAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_ban]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_ban[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_ban[P]>\n  }\n\n\n\n\n  export type discussionboard_banGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_banWhereInput\n    orderBy?: discussionboard_banOrderByWithAggregationInput | discussionboard_banOrderByWithAggregationInput[]\n    by: Discussionboard_banScalarFieldEnum[] | Discussionboard_banScalarFieldEnum\n    having?: discussionboard_banScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_banCountAggregateInputType | true\n    _min?: Discussionboard_banMinAggregateInputType\n    _max?: Discussionboard_banMaxAggregateInputType\n  }\n\n  export type Discussionboard_banGroupByOutputType = {\n    id: string\n    banned_user_id: string\n    banned_by_id: string\n    warning_id: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date\n    expires_at: Date | null\n    _count: Discussionboard_banCountAggregateOutputType | null\n    _min: Discussionboard_banMinAggregateOutputType | null\n    _max: Discussionboard_banMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_banGroupByPayload<T extends discussionboard_banGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_banGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_banGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_banGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_banGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_banSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    banned_user_id?: boolean\n    banned_by_id?: boolean\n    warning_id?: boolean\n    ban_type?: boolean\n    reason?: boolean\n    issued_at?: boolean\n    expires_at?: boolean\n    banned_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    ban_actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_warning?: boolean | discussionboard_ban$related_warningArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_ban\"]>\n\n  export type discussionboard_banSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    banned_user_id?: boolean\n    banned_by_id?: boolean\n    warning_id?: boolean\n    ban_type?: boolean\n    reason?: boolean\n    issued_at?: boolean\n    expires_at?: boolean\n    banned_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    ban_actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_warning?: boolean | discussionboard_ban$related_warningArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_ban\"]>\n\n  export type discussionboard_banSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    banned_user_id?: boolean\n    banned_by_id?: boolean\n    warning_id?: boolean\n    ban_type?: boolean\n    reason?: boolean\n    issued_at?: boolean\n    expires_at?: boolean\n    banned_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    ban_actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_warning?: boolean | discussionboard_ban$related_warningArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_ban\"]>\n\n  export type discussionboard_banSelectScalar = {\n    id?: boolean\n    banned_user_id?: boolean\n    banned_by_id?: boolean\n    warning_id?: boolean\n    ban_type?: boolean\n    reason?: boolean\n    issued_at?: boolean\n    expires_at?: boolean\n  }\n\n  export type discussionboard_banOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"banned_user_id\" | \"banned_by_id\" | \"warning_id\" | \"ban_type\" | \"reason\" | \"issued_at\" | \"expires_at\", ExtArgs[\"result\"][\"discussionboard_ban\"]>\n  export type discussionboard_banInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    banned_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    ban_actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_warning?: boolean | discussionboard_ban$related_warningArgs<ExtArgs>\n  }\n  export type discussionboard_banIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    banned_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    ban_actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_warning?: boolean | discussionboard_ban$related_warningArgs<ExtArgs>\n  }\n  export type discussionboard_banIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    banned_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    ban_actor?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_warning?: boolean | discussionboard_ban$related_warningArgs<ExtArgs>\n  }\n\n  export type $discussionboard_banPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_ban\"\n    objects: {\n      banned_user: Prisma.$discussionboard_userPayload<ExtArgs>\n      ban_actor: Prisma.$discussionboard_userPayload<ExtArgs>\n      related_warning: Prisma.$discussionboard_warningPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary key] - Unique ban instance ID; ensures each ban/mute event is singular and traceable.\n       */\n      id: string\n      /**\n       * [Banned user] - Who is subjected to the ban/mute, referencing the user entity.\n       */\n      banned_user_id: string\n      /**\n       * [Moderator/admin] - Initiating user performing the ban/mute.\n       */\n      banned_by_id: string\n      /**\n       * [Related warning] - Optionally reference a specific prior warning that resulted in the ban/mute.\n       */\n      warning_id: string | null\n      /**\n       * [Ban type] - Type category; e.g., 'mute', 'temp_ban', 'perm_ban', etc.\n       */\n      ban_type: string\n      /**\n       * [Ban reason] - Human-entered explanation for audit, traceability, and user appeals.\n       */\n      reason: string\n      /**\n       * [Ban start time] - When ban was placed.\n       */\n      issued_at: Date\n      /**\n       * [Ban expiry] - When unban occurs (nullable for permanent bans).\n       */\n      expires_at: Date | null\n    }, ExtArgs[\"result\"][\"discussionboard_ban\"]>\n    composites: {}\n  }\n\n  type discussionboard_banGetPayload<S extends boolean | null | undefined | discussionboard_banDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_banPayload, S>\n\n  type discussionboard_banCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_banFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_banCountAggregateInputType | true\n    }\n\n  export interface discussionboard_banDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_ban'], meta: { name: 'discussionboard_ban' } }\n    /**\n     * Find zero or one Discussionboard_ban that matches the filter.\n     * @param {discussionboard_banFindUniqueArgs} args - Arguments to find a Discussionboard_ban\n     * @example\n     * // Get one Discussionboard_ban\n     * const discussionboard_ban = await prisma.discussionboard_ban.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_banFindUniqueArgs>(args: SelectSubset<T, discussionboard_banFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_ban that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_banFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_ban\n     * @example\n     * // Get one Discussionboard_ban\n     * const discussionboard_ban = await prisma.discussionboard_ban.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_banFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_banFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_ban that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_banFindFirstArgs} args - Arguments to find a Discussionboard_ban\n     * @example\n     * // Get one Discussionboard_ban\n     * const discussionboard_ban = await prisma.discussionboard_ban.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_banFindFirstArgs>(args?: SelectSubset<T, discussionboard_banFindFirstArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_ban that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_banFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_ban\n     * @example\n     * // Get one Discussionboard_ban\n     * const discussionboard_ban = await prisma.discussionboard_ban.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_banFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_banFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_bans that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_banFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_bans\n     * const discussionboard_bans = await prisma.discussionboard_ban.findMany()\n     * \n     * // Get first 10 Discussionboard_bans\n     * const discussionboard_bans = await prisma.discussionboard_ban.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_banWithIdOnly = await prisma.discussionboard_ban.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_banFindManyArgs>(args?: SelectSubset<T, discussionboard_banFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_ban.\n     * @param {discussionboard_banCreateArgs} args - Arguments to create a Discussionboard_ban.\n     * @example\n     * // Create one Discussionboard_ban\n     * const Discussionboard_ban = await prisma.discussionboard_ban.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_ban\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_banCreateArgs>(args: SelectSubset<T, discussionboard_banCreateArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_bans.\n     * @param {discussionboard_banCreateManyArgs} args - Arguments to create many Discussionboard_bans.\n     * @example\n     * // Create many Discussionboard_bans\n     * const discussionboard_ban = await prisma.discussionboard_ban.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_banCreateManyArgs>(args?: SelectSubset<T, discussionboard_banCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_bans and returns the data saved in the database.\n     * @param {discussionboard_banCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_bans.\n     * @example\n     * // Create many Discussionboard_bans\n     * const discussionboard_ban = await prisma.discussionboard_ban.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_bans and only return the `id`\n     * const discussionboard_banWithIdOnly = await prisma.discussionboard_ban.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_banCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_banCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_ban.\n     * @param {discussionboard_banDeleteArgs} args - Arguments to delete one Discussionboard_ban.\n     * @example\n     * // Delete one Discussionboard_ban\n     * const Discussionboard_ban = await prisma.discussionboard_ban.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_ban\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_banDeleteArgs>(args: SelectSubset<T, discussionboard_banDeleteArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_ban.\n     * @param {discussionboard_banUpdateArgs} args - Arguments to update one Discussionboard_ban.\n     * @example\n     * // Update one Discussionboard_ban\n     * const discussionboard_ban = await prisma.discussionboard_ban.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_banUpdateArgs>(args: SelectSubset<T, discussionboard_banUpdateArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_bans.\n     * @param {discussionboard_banDeleteManyArgs} args - Arguments to filter Discussionboard_bans to delete.\n     * @example\n     * // Delete a few Discussionboard_bans\n     * const { count } = await prisma.discussionboard_ban.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_banDeleteManyArgs>(args?: SelectSubset<T, discussionboard_banDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_bans.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_banUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_bans\n     * const discussionboard_ban = await prisma.discussionboard_ban.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_banUpdateManyArgs>(args: SelectSubset<T, discussionboard_banUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_bans and returns the data updated in the database.\n     * @param {discussionboard_banUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_bans.\n     * @example\n     * // Update many Discussionboard_bans\n     * const discussionboard_ban = await prisma.discussionboard_ban.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_bans and only return the `id`\n     * const discussionboard_banWithIdOnly = await prisma.discussionboard_ban.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_banUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_banUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_ban.\n     * @param {discussionboard_banUpsertArgs} args - Arguments to update or create a Discussionboard_ban.\n     * @example\n     * // Update or create a Discussionboard_ban\n     * const discussionboard_ban = await prisma.discussionboard_ban.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_ban\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_ban we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_banUpsertArgs>(args: SelectSubset<T, discussionboard_banUpsertArgs<ExtArgs>>): Prisma__discussionboard_banClient<$Result.GetResult<Prisma.$discussionboard_banPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_bans.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_banCountArgs} args - Arguments to filter Discussionboard_bans to count.\n     * @example\n     * // Count the number of Discussionboard_bans\n     * const count = await prisma.discussionboard_ban.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_bans we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_banCountArgs>(\n      args?: Subset<T, discussionboard_banCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_banCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_ban.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_banAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_banAggregateArgs>(args: Subset<T, Discussionboard_banAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_banAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_ban.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_banGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_banGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_banGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_banGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_banGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_banGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_ban model\n   */\n  readonly fields: discussionboard_banFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_ban.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_banClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    banned_user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    ban_actor<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    related_warning<T extends discussionboard_ban$related_warningArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_ban$related_warningArgs<ExtArgs>>): Prisma__discussionboard_warningClient<$Result.GetResult<Prisma.$discussionboard_warningPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_ban model\n   */\n  interface discussionboard_banFieldRefs {\n    readonly id: FieldRef<\"discussionboard_ban\", 'String'>\n    readonly banned_user_id: FieldRef<\"discussionboard_ban\", 'String'>\n    readonly banned_by_id: FieldRef<\"discussionboard_ban\", 'String'>\n    readonly warning_id: FieldRef<\"discussionboard_ban\", 'String'>\n    readonly ban_type: FieldRef<\"discussionboard_ban\", 'String'>\n    readonly reason: FieldRef<\"discussionboard_ban\", 'String'>\n    readonly issued_at: FieldRef<\"discussionboard_ban\", 'DateTime'>\n    readonly expires_at: FieldRef<\"discussionboard_ban\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_ban findUnique\n   */\n  export type discussionboard_banFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_ban to fetch.\n     */\n    where: discussionboard_banWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_ban findUniqueOrThrow\n   */\n  export type discussionboard_banFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_ban to fetch.\n     */\n    where: discussionboard_banWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_ban findFirst\n   */\n  export type discussionboard_banFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_ban to fetch.\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_bans to fetch.\n     */\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_bans.\n     */\n    cursor?: discussionboard_banWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_bans from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_bans.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_bans.\n     */\n    distinct?: Discussionboard_banScalarFieldEnum | Discussionboard_banScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_ban findFirstOrThrow\n   */\n  export type discussionboard_banFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_ban to fetch.\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_bans to fetch.\n     */\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_bans.\n     */\n    cursor?: discussionboard_banWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_bans from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_bans.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_bans.\n     */\n    distinct?: Discussionboard_banScalarFieldEnum | Discussionboard_banScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_ban findMany\n   */\n  export type discussionboard_banFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_bans to fetch.\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_bans to fetch.\n     */\n    orderBy?: discussionboard_banOrderByWithRelationInput | discussionboard_banOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_bans.\n     */\n    cursor?: discussionboard_banWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_bans from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_bans.\n     */\n    skip?: number\n    distinct?: Discussionboard_banScalarFieldEnum | Discussionboard_banScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_ban create\n   */\n  export type discussionboard_banCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_ban.\n     */\n    data: XOR<discussionboard_banCreateInput, discussionboard_banUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_ban createMany\n   */\n  export type discussionboard_banCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_bans.\n     */\n    data: discussionboard_banCreateManyInput | discussionboard_banCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_ban createManyAndReturn\n   */\n  export type discussionboard_banCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_bans.\n     */\n    data: discussionboard_banCreateManyInput | discussionboard_banCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_ban update\n   */\n  export type discussionboard_banUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_ban.\n     */\n    data: XOR<discussionboard_banUpdateInput, discussionboard_banUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_ban to update.\n     */\n    where: discussionboard_banWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_ban updateMany\n   */\n  export type discussionboard_banUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_bans.\n     */\n    data: XOR<discussionboard_banUpdateManyMutationInput, discussionboard_banUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_bans to update\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * Limit how many discussionboard_bans to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_ban updateManyAndReturn\n   */\n  export type discussionboard_banUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_bans.\n     */\n    data: XOR<discussionboard_banUpdateManyMutationInput, discussionboard_banUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_bans to update\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * Limit how many discussionboard_bans to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_ban upsert\n   */\n  export type discussionboard_banUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_ban to update in case it exists.\n     */\n    where: discussionboard_banWhereUniqueInput\n    /**\n     * In case the discussionboard_ban found by the `where` argument doesn't exist, create a new discussionboard_ban with this data.\n     */\n    create: XOR<discussionboard_banCreateInput, discussionboard_banUncheckedCreateInput>\n    /**\n     * In case the discussionboard_ban was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_banUpdateInput, discussionboard_banUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_ban delete\n   */\n  export type discussionboard_banDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_ban to delete.\n     */\n    where: discussionboard_banWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_ban deleteMany\n   */\n  export type discussionboard_banDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_bans to delete\n     */\n    where?: discussionboard_banWhereInput\n    /**\n     * Limit how many discussionboard_bans to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_ban.related_warning\n   */\n  export type discussionboard_ban$related_warningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_warning\n     */\n    select?: discussionboard_warningSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_warning\n     */\n    omit?: discussionboard_warningOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_warningInclude<ExtArgs> | null\n    where?: discussionboard_warningWhereInput\n  }\n\n  /**\n   * discussionboard_ban without action\n   */\n  export type discussionboard_banDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_ban\n     */\n    select?: discussionboard_banSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_ban\n     */\n    omit?: discussionboard_banOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_banInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_notification\n   */\n\n  export type AggregateDiscussionboard_notification = {\n    _count: Discussionboard_notificationCountAggregateOutputType | null\n    _min: Discussionboard_notificationMinAggregateOutputType | null\n    _max: Discussionboard_notificationMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_notificationMinAggregateOutputType = {\n    id: string | null\n    recipient_user_id: string | null\n    related_post_id: string | null\n    related_comment_id: string | null\n    actor_user_id: string | null\n    type: string | null\n    message: string | null\n    is_read: boolean | null\n    created_at: Date | null\n  }\n\n  export type Discussionboard_notificationMaxAggregateOutputType = {\n    id: string | null\n    recipient_user_id: string | null\n    related_post_id: string | null\n    related_comment_id: string | null\n    actor_user_id: string | null\n    type: string | null\n    message: string | null\n    is_read: boolean | null\n    created_at: Date | null\n  }\n\n  export type Discussionboard_notificationCountAggregateOutputType = {\n    id: number\n    recipient_user_id: number\n    related_post_id: number\n    related_comment_id: number\n    actor_user_id: number\n    type: number\n    message: number\n    is_read: number\n    created_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_notificationMinAggregateInputType = {\n    id?: true\n    recipient_user_id?: true\n    related_post_id?: true\n    related_comment_id?: true\n    actor_user_id?: true\n    type?: true\n    message?: true\n    is_read?: true\n    created_at?: true\n  }\n\n  export type Discussionboard_notificationMaxAggregateInputType = {\n    id?: true\n    recipient_user_id?: true\n    related_post_id?: true\n    related_comment_id?: true\n    actor_user_id?: true\n    type?: true\n    message?: true\n    is_read?: true\n    created_at?: true\n  }\n\n  export type Discussionboard_notificationCountAggregateInputType = {\n    id?: true\n    recipient_user_id?: true\n    related_post_id?: true\n    related_comment_id?: true\n    actor_user_id?: true\n    type?: true\n    message?: true\n    is_read?: true\n    created_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_notificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_notification to aggregate.\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notifications to fetch.\n     */\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_notificationWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notifications.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_notifications\n    **/\n    _count?: true | Discussionboard_notificationCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_notificationMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_notificationMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_notificationAggregateType<T extends Discussionboard_notificationAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_notification]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_notification[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_notification[P]>\n  }\n\n\n\n\n  export type discussionboard_notificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_notificationWhereInput\n    orderBy?: discussionboard_notificationOrderByWithAggregationInput | discussionboard_notificationOrderByWithAggregationInput[]\n    by: Discussionboard_notificationScalarFieldEnum[] | Discussionboard_notificationScalarFieldEnum\n    having?: discussionboard_notificationScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_notificationCountAggregateInputType | true\n    _min?: Discussionboard_notificationMinAggregateInputType\n    _max?: Discussionboard_notificationMaxAggregateInputType\n  }\n\n  export type Discussionboard_notificationGroupByOutputType = {\n    id: string\n    recipient_user_id: string\n    related_post_id: string | null\n    related_comment_id: string | null\n    actor_user_id: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date\n    _count: Discussionboard_notificationCountAggregateOutputType | null\n    _min: Discussionboard_notificationMinAggregateOutputType | null\n    _max: Discussionboard_notificationMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_notificationGroupByPayload<T extends discussionboard_notificationGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_notificationGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_notificationGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_notificationGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_notificationGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_notificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    recipient_user_id?: boolean\n    related_post_id?: boolean\n    related_comment_id?: boolean\n    actor_user_id?: boolean\n    type?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    recipient_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_post?: boolean | discussionboard_notification$related_postArgs<ExtArgs>\n    related_comment?: boolean | discussionboard_notification$related_commentArgs<ExtArgs>\n    actor_user?: boolean | discussionboard_notification$actor_userArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_notification\"]>\n\n  export type discussionboard_notificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    recipient_user_id?: boolean\n    related_post_id?: boolean\n    related_comment_id?: boolean\n    actor_user_id?: boolean\n    type?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    recipient_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_post?: boolean | discussionboard_notification$related_postArgs<ExtArgs>\n    related_comment?: boolean | discussionboard_notification$related_commentArgs<ExtArgs>\n    actor_user?: boolean | discussionboard_notification$actor_userArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_notification\"]>\n\n  export type discussionboard_notificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    recipient_user_id?: boolean\n    related_post_id?: boolean\n    related_comment_id?: boolean\n    actor_user_id?: boolean\n    type?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n    recipient_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_post?: boolean | discussionboard_notification$related_postArgs<ExtArgs>\n    related_comment?: boolean | discussionboard_notification$related_commentArgs<ExtArgs>\n    actor_user?: boolean | discussionboard_notification$actor_userArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_notification\"]>\n\n  export type discussionboard_notificationSelectScalar = {\n    id?: boolean\n    recipient_user_id?: boolean\n    related_post_id?: boolean\n    related_comment_id?: boolean\n    actor_user_id?: boolean\n    type?: boolean\n    message?: boolean\n    is_read?: boolean\n    created_at?: boolean\n  }\n\n  export type discussionboard_notificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"recipient_user_id\" | \"related_post_id\" | \"related_comment_id\" | \"actor_user_id\" | \"type\" | \"message\" | \"is_read\" | \"created_at\", ExtArgs[\"result\"][\"discussionboard_notification\"]>\n  export type discussionboard_notificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    recipient_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_post?: boolean | discussionboard_notification$related_postArgs<ExtArgs>\n    related_comment?: boolean | discussionboard_notification$related_commentArgs<ExtArgs>\n    actor_user?: boolean | discussionboard_notification$actor_userArgs<ExtArgs>\n  }\n  export type discussionboard_notificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    recipient_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_post?: boolean | discussionboard_notification$related_postArgs<ExtArgs>\n    related_comment?: boolean | discussionboard_notification$related_commentArgs<ExtArgs>\n    actor_user?: boolean | discussionboard_notification$actor_userArgs<ExtArgs>\n  }\n  export type discussionboard_notificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    recipient_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    related_post?: boolean | discussionboard_notification$related_postArgs<ExtArgs>\n    related_comment?: boolean | discussionboard_notification$related_commentArgs<ExtArgs>\n    actor_user?: boolean | discussionboard_notification$actor_userArgs<ExtArgs>\n  }\n\n  export type $discussionboard_notificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_notification\"\n    objects: {\n      recipient_user: Prisma.$discussionboard_userPayload<ExtArgs>\n      related_post: Prisma.$discussionboard_postPayload<ExtArgs> | null\n      related_comment: Prisma.$discussionboard_commentsPayload<ExtArgs> | null\n      actor_user: Prisma.$discussionboard_userPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary key] - Implements unique identification of each notification. Ensures atomic records. For example, used to reference or audit notification events.\n       */\n      id: string\n      /**\n       * [Notification recipient] - Implements which user receives the notification, mapped to requirements for personalized notifications. For example, used to display notifications on user dashboard. Normalization: ensures recipient is atomically referenced and avoids denormalization. REQUIRED.\n       */\n      recipient_user_id: string\n      /**\n       * [Related post] - Associates notification with a post if applicable (e.g., reply, like on post). Fully normalized by optional reference. For example, used when notifying about replies or moderation of a post.\n       */\n      related_post_id: string | null\n      /**\n       * [Related comment] - Associates notification with a comment if applicable (e.g., reply to comment, moderation). Normalized as optional reference. For example, used for notifications about comment mentions.\n       */\n      related_comment_id: string | null\n      /**\n       * [Notification actor/user] - (Optional) The user who triggered this notification (e.g., who liked/commented, moderator/admin who performed action). If the event is system-triggered, this is null. For example, used for 'X replied to your post.' Ensures actor is atomically referenced, prevents denormalization.\n       */\n      actor_user_id: string | null\n      /**\n       * [Notification type] - Classifies the type of notification in accordance with Section 3.7's events (e.g., 'reply', 'like', 'moderator_action', 'system_message', etc.). Fully normalized. For example, enables UI filtering and template selection. Constraint: limited to allowed notification types via application logic.\n       */\n      type: string\n      /**\n       * [Notification body] - Human-readable message content sent to user. Implements functional requirement for notifications to explain events. Maintains normalization by storing only atomic message text; templates and aggregation are managed elsewhere. For example, 'Alice replied to your post.'\n       */\n      message: string\n      /**\n       * [Read/unread flag] - Tracks whether the notification has been marked as read by the recipient, as required by notification preference and in-app UX. Normalized as a pure flag. For example, unread messages appear in notification dropdown. Constraint: only toggled by recipient.\n       */\n      is_read: boolean\n      /**\n       * [Notification creation time] - Implements audit and sorting requirements for notification recency. Ensures full normalization; atomic timestamp. For example, used to order notifications in UI and for cleanup logic.\n       */\n      created_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_notification\"]>\n    composites: {}\n  }\n\n  type discussionboard_notificationGetPayload<S extends boolean | null | undefined | discussionboard_notificationDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_notificationPayload, S>\n\n  type discussionboard_notificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_notificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_notificationCountAggregateInputType | true\n    }\n\n  export interface discussionboard_notificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_notification'], meta: { name: 'discussionboard_notification' } }\n    /**\n     * Find zero or one Discussionboard_notification that matches the filter.\n     * @param {discussionboard_notificationFindUniqueArgs} args - Arguments to find a Discussionboard_notification\n     * @example\n     * // Get one Discussionboard_notification\n     * const discussionboard_notification = await prisma.discussionboard_notification.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_notificationFindUniqueArgs>(args: SelectSubset<T, discussionboard_notificationFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_notification that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_notificationFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_notification\n     * @example\n     * // Get one Discussionboard_notification\n     * const discussionboard_notification = await prisma.discussionboard_notification.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_notificationFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_notificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_notification that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notificationFindFirstArgs} args - Arguments to find a Discussionboard_notification\n     * @example\n     * // Get one Discussionboard_notification\n     * const discussionboard_notification = await prisma.discussionboard_notification.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_notificationFindFirstArgs>(args?: SelectSubset<T, discussionboard_notificationFindFirstArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_notification that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notificationFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_notification\n     * @example\n     * // Get one Discussionboard_notification\n     * const discussionboard_notification = await prisma.discussionboard_notification.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_notificationFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_notificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_notifications that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notificationFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_notifications\n     * const discussionboard_notifications = await prisma.discussionboard_notification.findMany()\n     * \n     * // Get first 10 Discussionboard_notifications\n     * const discussionboard_notifications = await prisma.discussionboard_notification.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_notificationWithIdOnly = await prisma.discussionboard_notification.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_notificationFindManyArgs>(args?: SelectSubset<T, discussionboard_notificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_notification.\n     * @param {discussionboard_notificationCreateArgs} args - Arguments to create a Discussionboard_notification.\n     * @example\n     * // Create one Discussionboard_notification\n     * const Discussionboard_notification = await prisma.discussionboard_notification.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_notification\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_notificationCreateArgs>(args: SelectSubset<T, discussionboard_notificationCreateArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_notifications.\n     * @param {discussionboard_notificationCreateManyArgs} args - Arguments to create many Discussionboard_notifications.\n     * @example\n     * // Create many Discussionboard_notifications\n     * const discussionboard_notification = await prisma.discussionboard_notification.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_notificationCreateManyArgs>(args?: SelectSubset<T, discussionboard_notificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_notifications and returns the data saved in the database.\n     * @param {discussionboard_notificationCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_notifications.\n     * @example\n     * // Create many Discussionboard_notifications\n     * const discussionboard_notification = await prisma.discussionboard_notification.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_notifications and only return the `id`\n     * const discussionboard_notificationWithIdOnly = await prisma.discussionboard_notification.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_notificationCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_notificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_notification.\n     * @param {discussionboard_notificationDeleteArgs} args - Arguments to delete one Discussionboard_notification.\n     * @example\n     * // Delete one Discussionboard_notification\n     * const Discussionboard_notification = await prisma.discussionboard_notification.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_notification\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_notificationDeleteArgs>(args: SelectSubset<T, discussionboard_notificationDeleteArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_notification.\n     * @param {discussionboard_notificationUpdateArgs} args - Arguments to update one Discussionboard_notification.\n     * @example\n     * // Update one Discussionboard_notification\n     * const discussionboard_notification = await prisma.discussionboard_notification.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_notificationUpdateArgs>(args: SelectSubset<T, discussionboard_notificationUpdateArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_notifications.\n     * @param {discussionboard_notificationDeleteManyArgs} args - Arguments to filter Discussionboard_notifications to delete.\n     * @example\n     * // Delete a few Discussionboard_notifications\n     * const { count } = await prisma.discussionboard_notification.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_notificationDeleteManyArgs>(args?: SelectSubset<T, discussionboard_notificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_notifications.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notificationUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_notifications\n     * const discussionboard_notification = await prisma.discussionboard_notification.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_notificationUpdateManyArgs>(args: SelectSubset<T, discussionboard_notificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_notifications and returns the data updated in the database.\n     * @param {discussionboard_notificationUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_notifications.\n     * @example\n     * // Update many Discussionboard_notifications\n     * const discussionboard_notification = await prisma.discussionboard_notification.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_notifications and only return the `id`\n     * const discussionboard_notificationWithIdOnly = await prisma.discussionboard_notification.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_notificationUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_notificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_notification.\n     * @param {discussionboard_notificationUpsertArgs} args - Arguments to update or create a Discussionboard_notification.\n     * @example\n     * // Update or create a Discussionboard_notification\n     * const discussionboard_notification = await prisma.discussionboard_notification.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_notification\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_notification we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_notificationUpsertArgs>(args: SelectSubset<T, discussionboard_notificationUpsertArgs<ExtArgs>>): Prisma__discussionboard_notificationClient<$Result.GetResult<Prisma.$discussionboard_notificationPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_notifications.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notificationCountArgs} args - Arguments to filter Discussionboard_notifications to count.\n     * @example\n     * // Count the number of Discussionboard_notifications\n     * const count = await prisma.discussionboard_notification.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_notifications we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_notificationCountArgs>(\n      args?: Subset<T, discussionboard_notificationCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_notificationCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_notification.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_notificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_notificationAggregateArgs>(args: Subset<T, Discussionboard_notificationAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_notificationAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_notification.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notificationGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_notificationGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_notificationGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_notificationGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_notificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_notificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_notification model\n   */\n  readonly fields: discussionboard_notificationFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_notification.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_notificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    recipient_user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    related_post<T extends discussionboard_notification$related_postArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_notification$related_postArgs<ExtArgs>>): Prisma__discussionboard_postClient<$Result.GetResult<Prisma.$discussionboard_postPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    related_comment<T extends discussionboard_notification$related_commentArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_notification$related_commentArgs<ExtArgs>>): Prisma__discussionboard_commentsClient<$Result.GetResult<Prisma.$discussionboard_commentsPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    actor_user<T extends discussionboard_notification$actor_userArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_notification$actor_userArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_notification model\n   */\n  interface discussionboard_notificationFieldRefs {\n    readonly id: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly recipient_user_id: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly related_post_id: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly related_comment_id: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly actor_user_id: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly type: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly message: FieldRef<\"discussionboard_notification\", 'String'>\n    readonly is_read: FieldRef<\"discussionboard_notification\", 'Boolean'>\n    readonly created_at: FieldRef<\"discussionboard_notification\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_notification findUnique\n   */\n  export type discussionboard_notificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification to fetch.\n     */\n    where: discussionboard_notificationWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification findUniqueOrThrow\n   */\n  export type discussionboard_notificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification to fetch.\n     */\n    where: discussionboard_notificationWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification findFirst\n   */\n  export type discussionboard_notificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification to fetch.\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notifications to fetch.\n     */\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_notifications.\n     */\n    cursor?: discussionboard_notificationWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notifications.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_notifications.\n     */\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_notification findFirstOrThrow\n   */\n  export type discussionboard_notificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification to fetch.\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notifications to fetch.\n     */\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_notifications.\n     */\n    cursor?: discussionboard_notificationWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notifications.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_notifications.\n     */\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_notification findMany\n   */\n  export type discussionboard_notificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notifications to fetch.\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notifications to fetch.\n     */\n    orderBy?: discussionboard_notificationOrderByWithRelationInput | discussionboard_notificationOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_notifications.\n     */\n    cursor?: discussionboard_notificationWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notifications from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notifications.\n     */\n    skip?: number\n    distinct?: Discussionboard_notificationScalarFieldEnum | Discussionboard_notificationScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_notification create\n   */\n  export type discussionboard_notificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_notification.\n     */\n    data: XOR<discussionboard_notificationCreateInput, discussionboard_notificationUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_notification createMany\n   */\n  export type discussionboard_notificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_notifications.\n     */\n    data: discussionboard_notificationCreateManyInput | discussionboard_notificationCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_notification createManyAndReturn\n   */\n  export type discussionboard_notificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_notifications.\n     */\n    data: discussionboard_notificationCreateManyInput | discussionboard_notificationCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_notification update\n   */\n  export type discussionboard_notificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_notification.\n     */\n    data: XOR<discussionboard_notificationUpdateInput, discussionboard_notificationUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_notification to update.\n     */\n    where: discussionboard_notificationWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification updateMany\n   */\n  export type discussionboard_notificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_notifications.\n     */\n    data: XOR<discussionboard_notificationUpdateManyMutationInput, discussionboard_notificationUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_notifications to update\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * Limit how many discussionboard_notifications to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_notification updateManyAndReturn\n   */\n  export type discussionboard_notificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_notifications.\n     */\n    data: XOR<discussionboard_notificationUpdateManyMutationInput, discussionboard_notificationUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_notifications to update\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * Limit how many discussionboard_notifications to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_notification upsert\n   */\n  export type discussionboard_notificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_notification to update in case it exists.\n     */\n    where: discussionboard_notificationWhereUniqueInput\n    /**\n     * In case the discussionboard_notification found by the `where` argument doesn't exist, create a new discussionboard_notification with this data.\n     */\n    create: XOR<discussionboard_notificationCreateInput, discussionboard_notificationUncheckedCreateInput>\n    /**\n     * In case the discussionboard_notification was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_notificationUpdateInput, discussionboard_notificationUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_notification delete\n   */\n  export type discussionboard_notificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_notification to delete.\n     */\n    where: discussionboard_notificationWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification deleteMany\n   */\n  export type discussionboard_notificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_notifications to delete\n     */\n    where?: discussionboard_notificationWhereInput\n    /**\n     * Limit how many discussionboard_notifications to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_notification.related_post\n   */\n  export type discussionboard_notification$related_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_post\n     */\n    select?: discussionboard_postSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_post\n     */\n    omit?: discussionboard_postOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_postInclude<ExtArgs> | null\n    where?: discussionboard_postWhereInput\n  }\n\n  /**\n   * discussionboard_notification.related_comment\n   */\n  export type discussionboard_notification$related_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_comments\n     */\n    select?: discussionboard_commentsSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_comments\n     */\n    omit?: discussionboard_commentsOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_commentsInclude<ExtArgs> | null\n    where?: discussionboard_commentsWhereInput\n  }\n\n  /**\n   * discussionboard_notification.actor_user\n   */\n  export type discussionboard_notification$actor_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    where?: discussionboard_userWhereInput\n  }\n\n  /**\n   * discussionboard_notification without action\n   */\n  export type discussionboard_notificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification\n     */\n    select?: discussionboard_notificationSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification\n     */\n    omit?: discussionboard_notificationOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notificationInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_notification_preference\n   */\n\n  export type AggregateDiscussionboard_notification_preference = {\n    _count: Discussionboard_notification_preferenceCountAggregateOutputType | null\n    _min: Discussionboard_notification_preferenceMinAggregateOutputType | null\n    _max: Discussionboard_notification_preferenceMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_notification_preferenceMinAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    notify_reply: boolean | null\n    notify_like: boolean | null\n    notify_moderator_action: boolean | null\n    notify_system_message: boolean | null\n  }\n\n  export type Discussionboard_notification_preferenceMaxAggregateOutputType = {\n    id: string | null\n    user_id: string | null\n    notify_reply: boolean | null\n    notify_like: boolean | null\n    notify_moderator_action: boolean | null\n    notify_system_message: boolean | null\n  }\n\n  export type Discussionboard_notification_preferenceCountAggregateOutputType = {\n    id: number\n    user_id: number\n    notify_reply: number\n    notify_like: number\n    notify_moderator_action: number\n    notify_system_message: number\n    _all: number\n  }\n\n\n  export type Discussionboard_notification_preferenceMinAggregateInputType = {\n    id?: true\n    user_id?: true\n    notify_reply?: true\n    notify_like?: true\n    notify_moderator_action?: true\n    notify_system_message?: true\n  }\n\n  export type Discussionboard_notification_preferenceMaxAggregateInputType = {\n    id?: true\n    user_id?: true\n    notify_reply?: true\n    notify_like?: true\n    notify_moderator_action?: true\n    notify_system_message?: true\n  }\n\n  export type Discussionboard_notification_preferenceCountAggregateInputType = {\n    id?: true\n    user_id?: true\n    notify_reply?: true\n    notify_like?: true\n    notify_moderator_action?: true\n    notify_system_message?: true\n    _all?: true\n  }\n\n  export type Discussionboard_notification_preferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_notification_preference to aggregate.\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notification_preferences to fetch.\n     */\n    orderBy?: discussionboard_notification_preferenceOrderByWithRelationInput | discussionboard_notification_preferenceOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_notification_preferenceWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notification_preferences from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notification_preferences.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_notification_preferences\n    **/\n    _count?: true | Discussionboard_notification_preferenceCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_notification_preferenceMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_notification_preferenceMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_notification_preferenceAggregateType<T extends Discussionboard_notification_preferenceAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_notification_preference]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_notification_preference[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_notification_preference[P]>\n  }\n\n\n\n\n  export type discussionboard_notification_preferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_notification_preferenceWhereInput\n    orderBy?: discussionboard_notification_preferenceOrderByWithAggregationInput | discussionboard_notification_preferenceOrderByWithAggregationInput[]\n    by: Discussionboard_notification_preferenceScalarFieldEnum[] | Discussionboard_notification_preferenceScalarFieldEnum\n    having?: discussionboard_notification_preferenceScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_notification_preferenceCountAggregateInputType | true\n    _min?: Discussionboard_notification_preferenceMinAggregateInputType\n    _max?: Discussionboard_notification_preferenceMaxAggregateInputType\n  }\n\n  export type Discussionboard_notification_preferenceGroupByOutputType = {\n    id: string\n    user_id: string\n    notify_reply: boolean\n    notify_like: boolean\n    notify_moderator_action: boolean\n    notify_system_message: boolean\n    _count: Discussionboard_notification_preferenceCountAggregateOutputType | null\n    _min: Discussionboard_notification_preferenceMinAggregateOutputType | null\n    _max: Discussionboard_notification_preferenceMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_notification_preferenceGroupByPayload<T extends discussionboard_notification_preferenceGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_notification_preferenceGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_notification_preferenceGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_notification_preferenceGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_notification_preferenceGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_notification_preferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    notify_reply?: boolean\n    notify_like?: boolean\n    notify_moderator_action?: boolean\n    notify_system_message?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_notification_preference\"]>\n\n  export type discussionboard_notification_preferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    notify_reply?: boolean\n    notify_like?: boolean\n    notify_moderator_action?: boolean\n    notify_system_message?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_notification_preference\"]>\n\n  export type discussionboard_notification_preferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    user_id?: boolean\n    notify_reply?: boolean\n    notify_like?: boolean\n    notify_moderator_action?: boolean\n    notify_system_message?: boolean\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_notification_preference\"]>\n\n  export type discussionboard_notification_preferenceSelectScalar = {\n    id?: boolean\n    user_id?: boolean\n    notify_reply?: boolean\n    notify_like?: boolean\n    notify_moderator_action?: boolean\n    notify_system_message?: boolean\n  }\n\n  export type discussionboard_notification_preferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"user_id\" | \"notify_reply\" | \"notify_like\" | \"notify_moderator_action\" | \"notify_system_message\", ExtArgs[\"result\"][\"discussionboard_notification_preference\"]>\n  export type discussionboard_notification_preferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_notification_preferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n  export type discussionboard_notification_preferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n  }\n\n  export type $discussionboard_notification_preferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_notification_preference\"\n    objects: {\n      user: Prisma.$discussionboard_userPayload<ExtArgs>\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary key] - Implements unique identification for each user's notification preference record. Normalized; required for foreign key relationships and referencing.\n       */\n      id: string\n      /**\n       * [User owning preferences] - Implements one-to-one mapping from user to notification preferences, as required by the per-user customization use case. Fully normalized: enforced by unique constraint. For example, fetching preferences when user changes settings. Enforces referential integrity; on user deletion, preference row is cleaned up.\n       * \n       * Special behavior: unique per user.\n       */\n      user_id: string\n      /**\n       * [Reply notification toggle] - User's option to receive notifications about direct replies. Implements user preference granularity requirement. For example, if false, the user does not get reply-related notifications. Fully normalized, no calculation.\n       */\n      notify_reply: boolean\n      /**\n       * [Like notification toggle] - User's choice to receive/not receive notifications when their post or comment is liked. Maintains normalization. Example: toggling off keeps the user from being notified for likes.\n       */\n      notify_like: boolean\n      /**\n       * [Moderator action notification toggle] - Implements ability for users to be alerted when a moderator acts on their content. Normalization ensured. For example, disables notifications for moderation unless true.\n       */\n      notify_moderator_action: boolean\n      /**\n       * [System message notification toggle] - Whether user receives platform-wide messages or announcements. Normalization ensured. For example, used for site policy change notifications.\n       */\n      notify_system_message: boolean\n    }, ExtArgs[\"result\"][\"discussionboard_notification_preference\"]>\n    composites: {}\n  }\n\n  type discussionboard_notification_preferenceGetPayload<S extends boolean | null | undefined | discussionboard_notification_preferenceDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_notification_preferencePayload, S>\n\n  type discussionboard_notification_preferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_notification_preferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_notification_preferenceCountAggregateInputType | true\n    }\n\n  export interface discussionboard_notification_preferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_notification_preference'], meta: { name: 'discussionboard_notification_preference' } }\n    /**\n     * Find zero or one Discussionboard_notification_preference that matches the filter.\n     * @param {discussionboard_notification_preferenceFindUniqueArgs} args - Arguments to find a Discussionboard_notification_preference\n     * @example\n     * // Get one Discussionboard_notification_preference\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_notification_preferenceFindUniqueArgs>(args: SelectSubset<T, discussionboard_notification_preferenceFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_notification_preference that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_notification_preferenceFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_notification_preference\n     * @example\n     * // Get one Discussionboard_notification_preference\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_notification_preferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_notification_preferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_notification_preference that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notification_preferenceFindFirstArgs} args - Arguments to find a Discussionboard_notification_preference\n     * @example\n     * // Get one Discussionboard_notification_preference\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_notification_preferenceFindFirstArgs>(args?: SelectSubset<T, discussionboard_notification_preferenceFindFirstArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_notification_preference that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notification_preferenceFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_notification_preference\n     * @example\n     * // Get one Discussionboard_notification_preference\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_notification_preferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_notification_preferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_notification_preferences that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notification_preferenceFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_notification_preferences\n     * const discussionboard_notification_preferences = await prisma.discussionboard_notification_preference.findMany()\n     * \n     * // Get first 10 Discussionboard_notification_preferences\n     * const discussionboard_notification_preferences = await prisma.discussionboard_notification_preference.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_notification_preferenceWithIdOnly = await prisma.discussionboard_notification_preference.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_notification_preferenceFindManyArgs>(args?: SelectSubset<T, discussionboard_notification_preferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_notification_preference.\n     * @param {discussionboard_notification_preferenceCreateArgs} args - Arguments to create a Discussionboard_notification_preference.\n     * @example\n     * // Create one Discussionboard_notification_preference\n     * const Discussionboard_notification_preference = await prisma.discussionboard_notification_preference.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_notification_preference\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_notification_preferenceCreateArgs>(args: SelectSubset<T, discussionboard_notification_preferenceCreateArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_notification_preferences.\n     * @param {discussionboard_notification_preferenceCreateManyArgs} args - Arguments to create many Discussionboard_notification_preferences.\n     * @example\n     * // Create many Discussionboard_notification_preferences\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_notification_preferenceCreateManyArgs>(args?: SelectSubset<T, discussionboard_notification_preferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_notification_preferences and returns the data saved in the database.\n     * @param {discussionboard_notification_preferenceCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_notification_preferences.\n     * @example\n     * // Create many Discussionboard_notification_preferences\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_notification_preferences and only return the `id`\n     * const discussionboard_notification_preferenceWithIdOnly = await prisma.discussionboard_notification_preference.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_notification_preferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_notification_preferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_notification_preference.\n     * @param {discussionboard_notification_preferenceDeleteArgs} args - Arguments to delete one Discussionboard_notification_preference.\n     * @example\n     * // Delete one Discussionboard_notification_preference\n     * const Discussionboard_notification_preference = await prisma.discussionboard_notification_preference.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_notification_preference\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_notification_preferenceDeleteArgs>(args: SelectSubset<T, discussionboard_notification_preferenceDeleteArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_notification_preference.\n     * @param {discussionboard_notification_preferenceUpdateArgs} args - Arguments to update one Discussionboard_notification_preference.\n     * @example\n     * // Update one Discussionboard_notification_preference\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_notification_preferenceUpdateArgs>(args: SelectSubset<T, discussionboard_notification_preferenceUpdateArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_notification_preferences.\n     * @param {discussionboard_notification_preferenceDeleteManyArgs} args - Arguments to filter Discussionboard_notification_preferences to delete.\n     * @example\n     * // Delete a few Discussionboard_notification_preferences\n     * const { count } = await prisma.discussionboard_notification_preference.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_notification_preferenceDeleteManyArgs>(args?: SelectSubset<T, discussionboard_notification_preferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_notification_preferences.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notification_preferenceUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_notification_preferences\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_notification_preferenceUpdateManyArgs>(args: SelectSubset<T, discussionboard_notification_preferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_notification_preferences and returns the data updated in the database.\n     * @param {discussionboard_notification_preferenceUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_notification_preferences.\n     * @example\n     * // Update many Discussionboard_notification_preferences\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_notification_preferences and only return the `id`\n     * const discussionboard_notification_preferenceWithIdOnly = await prisma.discussionboard_notification_preference.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_notification_preferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_notification_preferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_notification_preference.\n     * @param {discussionboard_notification_preferenceUpsertArgs} args - Arguments to update or create a Discussionboard_notification_preference.\n     * @example\n     * // Update or create a Discussionboard_notification_preference\n     * const discussionboard_notification_preference = await prisma.discussionboard_notification_preference.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_notification_preference\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_notification_preference we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_notification_preferenceUpsertArgs>(args: SelectSubset<T, discussionboard_notification_preferenceUpsertArgs<ExtArgs>>): Prisma__discussionboard_notification_preferenceClient<$Result.GetResult<Prisma.$discussionboard_notification_preferencePayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_notification_preferences.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notification_preferenceCountArgs} args - Arguments to filter Discussionboard_notification_preferences to count.\n     * @example\n     * // Count the number of Discussionboard_notification_preferences\n     * const count = await prisma.discussionboard_notification_preference.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_notification_preferences we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_notification_preferenceCountArgs>(\n      args?: Subset<T, discussionboard_notification_preferenceCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_notification_preferenceCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_notification_preference.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_notification_preferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_notification_preferenceAggregateArgs>(args: Subset<T, Discussionboard_notification_preferenceAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_notification_preferenceAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_notification_preference.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_notification_preferenceGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_notification_preferenceGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_notification_preferenceGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_notification_preferenceGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_notification_preferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_notification_preferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_notification_preference model\n   */\n  readonly fields: discussionboard_notification_preferenceFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_notification_preference.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_notification_preferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_notification_preference model\n   */\n  interface discussionboard_notification_preferenceFieldRefs {\n    readonly id: FieldRef<\"discussionboard_notification_preference\", 'String'>\n    readonly user_id: FieldRef<\"discussionboard_notification_preference\", 'String'>\n    readonly notify_reply: FieldRef<\"discussionboard_notification_preference\", 'Boolean'>\n    readonly notify_like: FieldRef<\"discussionboard_notification_preference\", 'Boolean'>\n    readonly notify_moderator_action: FieldRef<\"discussionboard_notification_preference\", 'Boolean'>\n    readonly notify_system_message: FieldRef<\"discussionboard_notification_preference\", 'Boolean'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_notification_preference findUnique\n   */\n  export type discussionboard_notification_preferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification_preference to fetch.\n     */\n    where: discussionboard_notification_preferenceWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification_preference findUniqueOrThrow\n   */\n  export type discussionboard_notification_preferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification_preference to fetch.\n     */\n    where: discussionboard_notification_preferenceWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification_preference findFirst\n   */\n  export type discussionboard_notification_preferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification_preference to fetch.\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notification_preferences to fetch.\n     */\n    orderBy?: discussionboard_notification_preferenceOrderByWithRelationInput | discussionboard_notification_preferenceOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_notification_preferences.\n     */\n    cursor?: discussionboard_notification_preferenceWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notification_preferences from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notification_preferences.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_notification_preferences.\n     */\n    distinct?: Discussionboard_notification_preferenceScalarFieldEnum | Discussionboard_notification_preferenceScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_notification_preference findFirstOrThrow\n   */\n  export type discussionboard_notification_preferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification_preference to fetch.\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notification_preferences to fetch.\n     */\n    orderBy?: discussionboard_notification_preferenceOrderByWithRelationInput | discussionboard_notification_preferenceOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_notification_preferences.\n     */\n    cursor?: discussionboard_notification_preferenceWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notification_preferences from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notification_preferences.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_notification_preferences.\n     */\n    distinct?: Discussionboard_notification_preferenceScalarFieldEnum | Discussionboard_notification_preferenceScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_notification_preference findMany\n   */\n  export type discussionboard_notification_preferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_notification_preferences to fetch.\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_notification_preferences to fetch.\n     */\n    orderBy?: discussionboard_notification_preferenceOrderByWithRelationInput | discussionboard_notification_preferenceOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_notification_preferences.\n     */\n    cursor?: discussionboard_notification_preferenceWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_notification_preferences from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_notification_preferences.\n     */\n    skip?: number\n    distinct?: Discussionboard_notification_preferenceScalarFieldEnum | Discussionboard_notification_preferenceScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_notification_preference create\n   */\n  export type discussionboard_notification_preferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_notification_preference.\n     */\n    data: XOR<discussionboard_notification_preferenceCreateInput, discussionboard_notification_preferenceUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_notification_preference createMany\n   */\n  export type discussionboard_notification_preferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_notification_preferences.\n     */\n    data: discussionboard_notification_preferenceCreateManyInput | discussionboard_notification_preferenceCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_notification_preference createManyAndReturn\n   */\n  export type discussionboard_notification_preferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_notification_preferences.\n     */\n    data: discussionboard_notification_preferenceCreateManyInput | discussionboard_notification_preferenceCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_notification_preference update\n   */\n  export type discussionboard_notification_preferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_notification_preference.\n     */\n    data: XOR<discussionboard_notification_preferenceUpdateInput, discussionboard_notification_preferenceUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_notification_preference to update.\n     */\n    where: discussionboard_notification_preferenceWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification_preference updateMany\n   */\n  export type discussionboard_notification_preferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_notification_preferences.\n     */\n    data: XOR<discussionboard_notification_preferenceUpdateManyMutationInput, discussionboard_notification_preferenceUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_notification_preferences to update\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * Limit how many discussionboard_notification_preferences to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_notification_preference updateManyAndReturn\n   */\n  export type discussionboard_notification_preferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_notification_preferences.\n     */\n    data: XOR<discussionboard_notification_preferenceUpdateManyMutationInput, discussionboard_notification_preferenceUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_notification_preferences to update\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * Limit how many discussionboard_notification_preferences to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_notification_preference upsert\n   */\n  export type discussionboard_notification_preferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_notification_preference to update in case it exists.\n     */\n    where: discussionboard_notification_preferenceWhereUniqueInput\n    /**\n     * In case the discussionboard_notification_preference found by the `where` argument doesn't exist, create a new discussionboard_notification_preference with this data.\n     */\n    create: XOR<discussionboard_notification_preferenceCreateInput, discussionboard_notification_preferenceUncheckedCreateInput>\n    /**\n     * In case the discussionboard_notification_preference was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_notification_preferenceUpdateInput, discussionboard_notification_preferenceUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_notification_preference delete\n   */\n  export type discussionboard_notification_preferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_notification_preference to delete.\n     */\n    where: discussionboard_notification_preferenceWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_notification_preference deleteMany\n   */\n  export type discussionboard_notification_preferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_notification_preferences to delete\n     */\n    where?: discussionboard_notification_preferenceWhereInput\n    /**\n     * Limit how many discussionboard_notification_preferences to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_notification_preference without action\n   */\n  export type discussionboard_notification_preferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_notification_preference\n     */\n    select?: discussionboard_notification_preferenceSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_notification_preference\n     */\n    omit?: discussionboard_notification_preferenceOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_notification_preferenceInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_audit_log\n   */\n\n  export type AggregateDiscussionboard_audit_log = {\n    _count: Discussionboard_audit_logCountAggregateOutputType | null\n    _min: Discussionboard_audit_logMinAggregateOutputType | null\n    _max: Discussionboard_audit_logMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_audit_logMinAggregateOutputType = {\n    id: string | null\n    actor_user_id: string | null\n    target_user_id: string | null\n    action_type: string | null\n    entity_type: string | null\n    entity_id: string | null\n    action_detail: string | null\n    created_at: Date | null\n  }\n\n  export type Discussionboard_audit_logMaxAggregateOutputType = {\n    id: string | null\n    actor_user_id: string | null\n    target_user_id: string | null\n    action_type: string | null\n    entity_type: string | null\n    entity_id: string | null\n    action_detail: string | null\n    created_at: Date | null\n  }\n\n  export type Discussionboard_audit_logCountAggregateOutputType = {\n    id: number\n    actor_user_id: number\n    target_user_id: number\n    action_type: number\n    entity_type: number\n    entity_id: number\n    action_detail: number\n    created_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_audit_logMinAggregateInputType = {\n    id?: true\n    actor_user_id?: true\n    target_user_id?: true\n    action_type?: true\n    entity_type?: true\n    entity_id?: true\n    action_detail?: true\n    created_at?: true\n  }\n\n  export type Discussionboard_audit_logMaxAggregateInputType = {\n    id?: true\n    actor_user_id?: true\n    target_user_id?: true\n    action_type?: true\n    entity_type?: true\n    entity_id?: true\n    action_detail?: true\n    created_at?: true\n  }\n\n  export type Discussionboard_audit_logCountAggregateInputType = {\n    id?: true\n    actor_user_id?: true\n    target_user_id?: true\n    action_type?: true\n    entity_type?: true\n    entity_id?: true\n    action_detail?: true\n    created_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_audit_logAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_audit_log to aggregate.\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_audit_logs to fetch.\n     */\n    orderBy?: discussionboard_audit_logOrderByWithRelationInput | discussionboard_audit_logOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_audit_logWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_audit_logs from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_audit_logs.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_audit_logs\n    **/\n    _count?: true | Discussionboard_audit_logCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_audit_logMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_audit_logMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_audit_logAggregateType<T extends Discussionboard_audit_logAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_audit_log]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_audit_log[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_audit_log[P]>\n  }\n\n\n\n\n  export type discussionboard_audit_logGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_audit_logWhereInput\n    orderBy?: discussionboard_audit_logOrderByWithAggregationInput | discussionboard_audit_logOrderByWithAggregationInput[]\n    by: Discussionboard_audit_logScalarFieldEnum[] | Discussionboard_audit_logScalarFieldEnum\n    having?: discussionboard_audit_logScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_audit_logCountAggregateInputType | true\n    _min?: Discussionboard_audit_logMinAggregateInputType\n    _max?: Discussionboard_audit_logMaxAggregateInputType\n  }\n\n  export type Discussionboard_audit_logGroupByOutputType = {\n    id: string\n    actor_user_id: string\n    target_user_id: string | null\n    action_type: string\n    entity_type: string\n    entity_id: string | null\n    action_detail: string | null\n    created_at: Date\n    _count: Discussionboard_audit_logCountAggregateOutputType | null\n    _min: Discussionboard_audit_logMinAggregateOutputType | null\n    _max: Discussionboard_audit_logMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_audit_logGroupByPayload<T extends discussionboard_audit_logGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_audit_logGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_audit_logGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_audit_logGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_audit_logGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_audit_logSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    actor_user_id?: boolean\n    target_user_id?: boolean\n    action_type?: boolean\n    entity_type?: boolean\n    entity_id?: boolean\n    action_detail?: boolean\n    created_at?: boolean\n    fk_audit_actor_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    fk_audit_target_user?: boolean | discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_audit_log\"]>\n\n  export type discussionboard_audit_logSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    actor_user_id?: boolean\n    target_user_id?: boolean\n    action_type?: boolean\n    entity_type?: boolean\n    entity_id?: boolean\n    action_detail?: boolean\n    created_at?: boolean\n    fk_audit_actor_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    fk_audit_target_user?: boolean | discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_audit_log\"]>\n\n  export type discussionboard_audit_logSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    actor_user_id?: boolean\n    target_user_id?: boolean\n    action_type?: boolean\n    entity_type?: boolean\n    entity_id?: boolean\n    action_detail?: boolean\n    created_at?: boolean\n    fk_audit_actor_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    fk_audit_target_user?: boolean | discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>\n  }, ExtArgs[\"result\"][\"discussionboard_audit_log\"]>\n\n  export type discussionboard_audit_logSelectScalar = {\n    id?: boolean\n    actor_user_id?: boolean\n    target_user_id?: boolean\n    action_type?: boolean\n    entity_type?: boolean\n    entity_id?: boolean\n    action_detail?: boolean\n    created_at?: boolean\n  }\n\n  export type discussionboard_audit_logOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"actor_user_id\" | \"target_user_id\" | \"action_type\" | \"entity_type\" | \"entity_id\" | \"action_detail\" | \"created_at\", ExtArgs[\"result\"][\"discussionboard_audit_log\"]>\n  export type discussionboard_audit_logInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    fk_audit_actor_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    fk_audit_target_user?: boolean | discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>\n  }\n  export type discussionboard_audit_logIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    fk_audit_actor_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    fk_audit_target_user?: boolean | discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>\n  }\n  export type discussionboard_audit_logIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    fk_audit_actor_user?: boolean | discussionboard_userDefaultArgs<ExtArgs>\n    fk_audit_target_user?: boolean | discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>\n  }\n\n  export type $discussionboard_audit_logPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_audit_log\"\n    objects: {\n      fk_audit_actor_user: Prisma.$discussionboard_userPayload<ExtArgs>\n      fk_audit_target_user: Prisma.$discussionboard_userPayload<ExtArgs> | null\n    }\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Implements identity and uniqueness for each audit log entry. Fulfills the uniqueness requirement per audit record. Ensures normalization by enabling atomic audit entries. Always generated as a UUID.\n       */\n      id: string\n      /**\n       * [Action Actor] - Implements the requirement to store the user responsible for each privileged action. Links to the user who performed the action. Ensures 3NF by storing only the user id as a reference; all other actor information must be joined as needed. For example, references the admin who issued a ban.\n       */\n      actor_user_id: string\n      /**\n       * [Action Target] - Fulfills the requirement to capture who is affected by the action, if applicable (e.g., in bans, warnings, or demotions). Nullable for actions targeting system settings rather than specific users. Keeps direct reference only to target user id to stay normalized.\n       */\n      target_user_id: string | null\n      /**\n       * [Action Type] - Implements the action classification requirement. Business meaning: describes the category (e.g., 'ban', 'role_change', 'settings_update'). Ensures normalization by not encoding business logic; only keeps atomic values (string), never details or summaries.\n       */\n      action_type: string\n      /**\n       * [Entity Type] - Implements the need for polymorphic audit trail. Records the type of entity affected (e.g., 'user', 'post', 'comment', 'setting'). Ensures 3NF by representing entity type as atomic data, not as a foreign key or denormalized structure.\n       */\n      entity_type: string\n      /**\n       * [Entity Reference] - Fulfills requirement to record which object was modified. Nullable for actions that do not target a specific entity. Ensures normalization by storing atomic reference only.\n       */\n      entity_id: string | null\n      /**\n       * [Action Detail] - Implements extensible context for audit records. Stores optional contextual details, such as old/new role in a role change. Ensures normalization by keeping these as atomic strings, not by embedding object graphs.\n       */\n      action_detail: string | null\n      /**\n       * [Timestamp] - Implements audit trail requirement for time traceability. Business meaning: when the privileged action took place. Ensures normalization by using a single atomic datetime. Example: records ban date or role assignment time.\n       */\n      created_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_audit_log\"]>\n    composites: {}\n  }\n\n  type discussionboard_audit_logGetPayload<S extends boolean | null | undefined | discussionboard_audit_logDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_audit_logPayload, S>\n\n  type discussionboard_audit_logCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_audit_logFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_audit_logCountAggregateInputType | true\n    }\n\n  export interface discussionboard_audit_logDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_audit_log'], meta: { name: 'discussionboard_audit_log' } }\n    /**\n     * Find zero or one Discussionboard_audit_log that matches the filter.\n     * @param {discussionboard_audit_logFindUniqueArgs} args - Arguments to find a Discussionboard_audit_log\n     * @example\n     * // Get one Discussionboard_audit_log\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_audit_logFindUniqueArgs>(args: SelectSubset<T, discussionboard_audit_logFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_audit_log that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_audit_logFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_audit_log\n     * @example\n     * // Get one Discussionboard_audit_log\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_audit_logFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_audit_logFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_audit_log that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_audit_logFindFirstArgs} args - Arguments to find a Discussionboard_audit_log\n     * @example\n     * // Get one Discussionboard_audit_log\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_audit_logFindFirstArgs>(args?: SelectSubset<T, discussionboard_audit_logFindFirstArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_audit_log that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_audit_logFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_audit_log\n     * @example\n     * // Get one Discussionboard_audit_log\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_audit_logFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_audit_logFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_audit_logs that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_audit_logFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_audit_logs\n     * const discussionboard_audit_logs = await prisma.discussionboard_audit_log.findMany()\n     * \n     * // Get first 10 Discussionboard_audit_logs\n     * const discussionboard_audit_logs = await prisma.discussionboard_audit_log.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_audit_logWithIdOnly = await prisma.discussionboard_audit_log.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_audit_logFindManyArgs>(args?: SelectSubset<T, discussionboard_audit_logFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_audit_log.\n     * @param {discussionboard_audit_logCreateArgs} args - Arguments to create a Discussionboard_audit_log.\n     * @example\n     * // Create one Discussionboard_audit_log\n     * const Discussionboard_audit_log = await prisma.discussionboard_audit_log.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_audit_log\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_audit_logCreateArgs>(args: SelectSubset<T, discussionboard_audit_logCreateArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_audit_logs.\n     * @param {discussionboard_audit_logCreateManyArgs} args - Arguments to create many Discussionboard_audit_logs.\n     * @example\n     * // Create many Discussionboard_audit_logs\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_audit_logCreateManyArgs>(args?: SelectSubset<T, discussionboard_audit_logCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_audit_logs and returns the data saved in the database.\n     * @param {discussionboard_audit_logCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_audit_logs.\n     * @example\n     * // Create many Discussionboard_audit_logs\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_audit_logs and only return the `id`\n     * const discussionboard_audit_logWithIdOnly = await prisma.discussionboard_audit_log.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_audit_logCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_audit_logCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_audit_log.\n     * @param {discussionboard_audit_logDeleteArgs} args - Arguments to delete one Discussionboard_audit_log.\n     * @example\n     * // Delete one Discussionboard_audit_log\n     * const Discussionboard_audit_log = await prisma.discussionboard_audit_log.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_audit_log\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_audit_logDeleteArgs>(args: SelectSubset<T, discussionboard_audit_logDeleteArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_audit_log.\n     * @param {discussionboard_audit_logUpdateArgs} args - Arguments to update one Discussionboard_audit_log.\n     * @example\n     * // Update one Discussionboard_audit_log\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_audit_logUpdateArgs>(args: SelectSubset<T, discussionboard_audit_logUpdateArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_audit_logs.\n     * @param {discussionboard_audit_logDeleteManyArgs} args - Arguments to filter Discussionboard_audit_logs to delete.\n     * @example\n     * // Delete a few Discussionboard_audit_logs\n     * const { count } = await prisma.discussionboard_audit_log.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_audit_logDeleteManyArgs>(args?: SelectSubset<T, discussionboard_audit_logDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_audit_logs.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_audit_logUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_audit_logs\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_audit_logUpdateManyArgs>(args: SelectSubset<T, discussionboard_audit_logUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_audit_logs and returns the data updated in the database.\n     * @param {discussionboard_audit_logUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_audit_logs.\n     * @example\n     * // Update many Discussionboard_audit_logs\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_audit_logs and only return the `id`\n     * const discussionboard_audit_logWithIdOnly = await prisma.discussionboard_audit_log.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_audit_logUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_audit_logUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_audit_log.\n     * @param {discussionboard_audit_logUpsertArgs} args - Arguments to update or create a Discussionboard_audit_log.\n     * @example\n     * // Update or create a Discussionboard_audit_log\n     * const discussionboard_audit_log = await prisma.discussionboard_audit_log.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_audit_log\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_audit_log we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_audit_logUpsertArgs>(args: SelectSubset<T, discussionboard_audit_logUpsertArgs<ExtArgs>>): Prisma__discussionboard_audit_logClient<$Result.GetResult<Prisma.$discussionboard_audit_logPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_audit_logs.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_audit_logCountArgs} args - Arguments to filter Discussionboard_audit_logs to count.\n     * @example\n     * // Count the number of Discussionboard_audit_logs\n     * const count = await prisma.discussionboard_audit_log.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_audit_logs we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_audit_logCountArgs>(\n      args?: Subset<T, discussionboard_audit_logCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_audit_logCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_audit_log.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_audit_logAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_audit_logAggregateArgs>(args: Subset<T, Discussionboard_audit_logAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_audit_logAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_audit_log.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_audit_logGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_audit_logGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_audit_logGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_audit_logGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_audit_logGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_audit_logGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_audit_log model\n   */\n  readonly fields: discussionboard_audit_logFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_audit_log.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_audit_logClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    fk_audit_actor_user<T extends discussionboard_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_userDefaultArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>\n    fk_audit_target_user<T extends discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs> = {}>(args?: Subset<T, discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs>>): Prisma__discussionboard_userClient<$Result.GetResult<Prisma.$discussionboard_userPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_audit_log model\n   */\n  interface discussionboard_audit_logFieldRefs {\n    readonly id: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly actor_user_id: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly target_user_id: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly action_type: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly entity_type: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly entity_id: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly action_detail: FieldRef<\"discussionboard_audit_log\", 'String'>\n    readonly created_at: FieldRef<\"discussionboard_audit_log\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_audit_log findUnique\n   */\n  export type discussionboard_audit_logFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_audit_log to fetch.\n     */\n    where: discussionboard_audit_logWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_audit_log findUniqueOrThrow\n   */\n  export type discussionboard_audit_logFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_audit_log to fetch.\n     */\n    where: discussionboard_audit_logWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_audit_log findFirst\n   */\n  export type discussionboard_audit_logFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_audit_log to fetch.\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_audit_logs to fetch.\n     */\n    orderBy?: discussionboard_audit_logOrderByWithRelationInput | discussionboard_audit_logOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_audit_logs.\n     */\n    cursor?: discussionboard_audit_logWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_audit_logs from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_audit_logs.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_audit_logs.\n     */\n    distinct?: Discussionboard_audit_logScalarFieldEnum | Discussionboard_audit_logScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_audit_log findFirstOrThrow\n   */\n  export type discussionboard_audit_logFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_audit_log to fetch.\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_audit_logs to fetch.\n     */\n    orderBy?: discussionboard_audit_logOrderByWithRelationInput | discussionboard_audit_logOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_audit_logs.\n     */\n    cursor?: discussionboard_audit_logWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_audit_logs from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_audit_logs.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_audit_logs.\n     */\n    distinct?: Discussionboard_audit_logScalarFieldEnum | Discussionboard_audit_logScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_audit_log findMany\n   */\n  export type discussionboard_audit_logFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_audit_logs to fetch.\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_audit_logs to fetch.\n     */\n    orderBy?: discussionboard_audit_logOrderByWithRelationInput | discussionboard_audit_logOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_audit_logs.\n     */\n    cursor?: discussionboard_audit_logWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_audit_logs from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_audit_logs.\n     */\n    skip?: number\n    distinct?: Discussionboard_audit_logScalarFieldEnum | Discussionboard_audit_logScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_audit_log create\n   */\n  export type discussionboard_audit_logCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_audit_log.\n     */\n    data: XOR<discussionboard_audit_logCreateInput, discussionboard_audit_logUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_audit_log createMany\n   */\n  export type discussionboard_audit_logCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_audit_logs.\n     */\n    data: discussionboard_audit_logCreateManyInput | discussionboard_audit_logCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_audit_log createManyAndReturn\n   */\n  export type discussionboard_audit_logCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_audit_logs.\n     */\n    data: discussionboard_audit_logCreateManyInput | discussionboard_audit_logCreateManyInput[]\n    skipDuplicates?: boolean\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logIncludeCreateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_audit_log update\n   */\n  export type discussionboard_audit_logUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_audit_log.\n     */\n    data: XOR<discussionboard_audit_logUpdateInput, discussionboard_audit_logUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_audit_log to update.\n     */\n    where: discussionboard_audit_logWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_audit_log updateMany\n   */\n  export type discussionboard_audit_logUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_audit_logs.\n     */\n    data: XOR<discussionboard_audit_logUpdateManyMutationInput, discussionboard_audit_logUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_audit_logs to update\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * Limit how many discussionboard_audit_logs to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_audit_log updateManyAndReturn\n   */\n  export type discussionboard_audit_logUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_audit_logs.\n     */\n    data: XOR<discussionboard_audit_logUpdateManyMutationInput, discussionboard_audit_logUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_audit_logs to update\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * Limit how many discussionboard_audit_logs to update.\n     */\n    limit?: number\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logIncludeUpdateManyAndReturn<ExtArgs> | null\n  }\n\n  /**\n   * discussionboard_audit_log upsert\n   */\n  export type discussionboard_audit_logUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_audit_log to update in case it exists.\n     */\n    where: discussionboard_audit_logWhereUniqueInput\n    /**\n     * In case the discussionboard_audit_log found by the `where` argument doesn't exist, create a new discussionboard_audit_log with this data.\n     */\n    create: XOR<discussionboard_audit_logCreateInput, discussionboard_audit_logUncheckedCreateInput>\n    /**\n     * In case the discussionboard_audit_log was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_audit_logUpdateInput, discussionboard_audit_logUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_audit_log delete\n   */\n  export type discussionboard_audit_logDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n    /**\n     * Filter which discussionboard_audit_log to delete.\n     */\n    where: discussionboard_audit_logWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_audit_log deleteMany\n   */\n  export type discussionboard_audit_logDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_audit_logs to delete\n     */\n    where?: discussionboard_audit_logWhereInput\n    /**\n     * Limit how many discussionboard_audit_logs to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_audit_log.fk_audit_target_user\n   */\n  export type discussionboard_audit_log$fk_audit_target_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_user\n     */\n    select?: discussionboard_userSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_user\n     */\n    omit?: discussionboard_userOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_userInclude<ExtArgs> | null\n    where?: discussionboard_userWhereInput\n  }\n\n  /**\n   * discussionboard_audit_log without action\n   */\n  export type discussionboard_audit_logDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_audit_log\n     */\n    select?: discussionboard_audit_logSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_audit_log\n     */\n    omit?: discussionboard_audit_logOmit<ExtArgs> | null\n    /**\n     * Choose, which related nodes to fetch as well\n     */\n    include?: discussionboard_audit_logInclude<ExtArgs> | null\n  }\n\n\n  /**\n   * Model discussionboard_platform_setting\n   */\n\n  export type AggregateDiscussionboard_platform_setting = {\n    _count: Discussionboard_platform_settingCountAggregateOutputType | null\n    _min: Discussionboard_platform_settingMinAggregateOutputType | null\n    _max: Discussionboard_platform_settingMaxAggregateOutputType | null\n  }\n\n  export type Discussionboard_platform_settingMinAggregateOutputType = {\n    id: string | null\n    name: string | null\n    value: string | null\n    type: string | null\n    updated_at: Date | null\n  }\n\n  export type Discussionboard_platform_settingMaxAggregateOutputType = {\n    id: string | null\n    name: string | null\n    value: string | null\n    type: string | null\n    updated_at: Date | null\n  }\n\n  export type Discussionboard_platform_settingCountAggregateOutputType = {\n    id: number\n    name: number\n    value: number\n    type: number\n    updated_at: number\n    _all: number\n  }\n\n\n  export type Discussionboard_platform_settingMinAggregateInputType = {\n    id?: true\n    name?: true\n    value?: true\n    type?: true\n    updated_at?: true\n  }\n\n  export type Discussionboard_platform_settingMaxAggregateInputType = {\n    id?: true\n    name?: true\n    value?: true\n    type?: true\n    updated_at?: true\n  }\n\n  export type Discussionboard_platform_settingCountAggregateInputType = {\n    id?: true\n    name?: true\n    value?: true\n    type?: true\n    updated_at?: true\n    _all?: true\n  }\n\n  export type Discussionboard_platform_settingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_platform_setting to aggregate.\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_platform_settings to fetch.\n     */\n    orderBy?: discussionboard_platform_settingOrderByWithRelationInput | discussionboard_platform_settingOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the start position\n     */\n    cursor?: discussionboard_platform_settingWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_platform_settings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_platform_settings.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Count returned discussionboard_platform_settings\n    **/\n    _count?: true | Discussionboard_platform_settingCountAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the minimum value\n    **/\n    _min?: Discussionboard_platform_settingMinAggregateInputType\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}\n     * \n     * Select which fields to find the maximum value\n    **/\n    _max?: Discussionboard_platform_settingMaxAggregateInputType\n  }\n\n  export type GetDiscussionboard_platform_settingAggregateType<T extends Discussionboard_platform_settingAggregateArgs> = {\n        [P in keyof T & keyof AggregateDiscussionboard_platform_setting]: P extends '_count' | 'count'\n      ? T[P] extends true\n        ? number\n        : GetScalarType<T[P], AggregateDiscussionboard_platform_setting[P]>\n      : GetScalarType<T[P], AggregateDiscussionboard_platform_setting[P]>\n  }\n\n\n\n\n  export type discussionboard_platform_settingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    where?: discussionboard_platform_settingWhereInput\n    orderBy?: discussionboard_platform_settingOrderByWithAggregationInput | discussionboard_platform_settingOrderByWithAggregationInput[]\n    by: Discussionboard_platform_settingScalarFieldEnum[] | Discussionboard_platform_settingScalarFieldEnum\n    having?: discussionboard_platform_settingScalarWhereWithAggregatesInput\n    take?: number\n    skip?: number\n    _count?: Discussionboard_platform_settingCountAggregateInputType | true\n    _min?: Discussionboard_platform_settingMinAggregateInputType\n    _max?: Discussionboard_platform_settingMaxAggregateInputType\n  }\n\n  export type Discussionboard_platform_settingGroupByOutputType = {\n    id: string\n    name: string\n    value: string\n    type: string\n    updated_at: Date\n    _count: Discussionboard_platform_settingCountAggregateOutputType | null\n    _min: Discussionboard_platform_settingMinAggregateOutputType | null\n    _max: Discussionboard_platform_settingMaxAggregateOutputType | null\n  }\n\n  type GetDiscussionboard_platform_settingGroupByPayload<T extends discussionboard_platform_settingGroupByArgs> = Prisma.PrismaPromise<\n    Array<\n      PickEnumerable<Discussionboard_platform_settingGroupByOutputType, T['by']> &\n        {\n          [P in ((keyof T) & (keyof Discussionboard_platform_settingGroupByOutputType))]: P extends '_count'\n            ? T[P] extends boolean\n              ? number\n              : GetScalarType<T[P], Discussionboard_platform_settingGroupByOutputType[P]>\n            : GetScalarType<T[P], Discussionboard_platform_settingGroupByOutputType[P]>\n        }\n      >\n    >\n\n\n  export type discussionboard_platform_settingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    value?: boolean\n    type?: boolean\n    updated_at?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_platform_setting\"]>\n\n  export type discussionboard_platform_settingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    value?: boolean\n    type?: boolean\n    updated_at?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_platform_setting\"]>\n\n  export type discussionboard_platform_settingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{\n    id?: boolean\n    name?: boolean\n    value?: boolean\n    type?: boolean\n    updated_at?: boolean\n  }, ExtArgs[\"result\"][\"discussionboard_platform_setting\"]>\n\n  export type discussionboard_platform_settingSelectScalar = {\n    id?: boolean\n    name?: boolean\n    value?: boolean\n    type?: boolean\n    updated_at?: boolean\n  }\n\n  export type discussionboard_platform_settingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<\"id\" | \"name\" | \"value\" | \"type\" | \"updated_at\", ExtArgs[\"result\"][\"discussionboard_platform_setting\"]>\n\n  export type $discussionboard_platform_settingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    name: \"discussionboard_platform_setting\"\n    objects: {}\n    scalars: $Extensions.GetPayloadResult<{\n      /**\n       * [Primary Key] - Unique identifier for each platform setting. 3NF compliance: prevents duplicate or ambiguous settings by row identity.\n       */\n      id: string\n      /**\n       * [Setting Name] - Implements the need to uniquely identify every platform setting. Should be a descriptive string (e.g., 'EnableModerationQueue'). Ensures normalization by not encoding arrays or objects, only simple strings.\n       */\n      name: string\n      /**\n       * [Setting Value] - Implements storing current configuration/data. Can hold any atomic value as string (booleans='true'/'false', numbers as string, etc.). Ensures 3NF by keeping each value atomic and not embedding larger config structures.\n       */\n      value: string\n      /**\n       * [Data Type Marker] - Fulfills the requirement to distinguish setting value interpretation (e.g., 'boolean', 'int', 'string'). Maintains normalization by storing type marker atomically. Example: allows parsing and validation at the application level.\n       */\n      type: string\n      /**\n       * [Last Updated Timestamp] - Supports auditability for platform changes. Maintains normalization by using a single atomic datetime. For example, allows the system to show when moderation settings were last updated.\n       */\n      updated_at: Date\n    }, ExtArgs[\"result\"][\"discussionboard_platform_setting\"]>\n    composites: {}\n  }\n\n  type discussionboard_platform_settingGetPayload<S extends boolean | null | undefined | discussionboard_platform_settingDefaultArgs> = $Result.GetResult<Prisma.$discussionboard_platform_settingPayload, S>\n\n  type discussionboard_platform_settingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =\n    Omit<discussionboard_platform_settingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {\n      select?: Discussionboard_platform_settingCountAggregateInputType | true\n    }\n\n  export interface discussionboard_platform_settingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {\n    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discussionboard_platform_setting'], meta: { name: 'discussionboard_platform_setting' } }\n    /**\n     * Find zero or one Discussionboard_platform_setting that matches the filter.\n     * @param {discussionboard_platform_settingFindUniqueArgs} args - Arguments to find a Discussionboard_platform_setting\n     * @example\n     * // Get one Discussionboard_platform_setting\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.findUnique({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUnique<T extends discussionboard_platform_settingFindUniqueArgs>(args: SelectSubset<T, discussionboard_platform_settingFindUniqueArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"findUnique\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find one Discussionboard_platform_setting that matches the filter or throw an error with `error.code='P2025'`\n     * if no matches were found.\n     * @param {discussionboard_platform_settingFindUniqueOrThrowArgs} args - Arguments to find a Discussionboard_platform_setting\n     * @example\n     * // Get one Discussionboard_platform_setting\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.findUniqueOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findUniqueOrThrow<T extends discussionboard_platform_settingFindUniqueOrThrowArgs>(args: SelectSubset<T, discussionboard_platform_settingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"findUniqueOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_platform_setting that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_platform_settingFindFirstArgs} args - Arguments to find a Discussionboard_platform_setting\n     * @example\n     * // Get one Discussionboard_platform_setting\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.findFirst({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirst<T extends discussionboard_platform_settingFindFirstArgs>(args?: SelectSubset<T, discussionboard_platform_settingFindFirstArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"findFirst\", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find the first Discussionboard_platform_setting that matches the filter or\n     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_platform_settingFindFirstOrThrowArgs} args - Arguments to find a Discussionboard_platform_setting\n     * @example\n     * // Get one Discussionboard_platform_setting\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.findFirstOrThrow({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     */\n    findFirstOrThrow<T extends discussionboard_platform_settingFindFirstOrThrowArgs>(args?: SelectSubset<T, discussionboard_platform_settingFindFirstOrThrowArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"findFirstOrThrow\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Find zero or more Discussionboard_platform_settings that matches the filter.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_platform_settingFindManyArgs} args - Arguments to filter and select certain fields only.\n     * @example\n     * // Get all Discussionboard_platform_settings\n     * const discussionboard_platform_settings = await prisma.discussionboard_platform_setting.findMany()\n     * \n     * // Get first 10 Discussionboard_platform_settings\n     * const discussionboard_platform_settings = await prisma.discussionboard_platform_setting.findMany({ take: 10 })\n     * \n     * // Only select the `id`\n     * const discussionboard_platform_settingWithIdOnly = await prisma.discussionboard_platform_setting.findMany({ select: { id: true } })\n     * \n     */\n    findMany<T extends discussionboard_platform_settingFindManyArgs>(args?: SelectSubset<T, discussionboard_platform_settingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"findMany\", GlobalOmitOptions>>\n\n    /**\n     * Create a Discussionboard_platform_setting.\n     * @param {discussionboard_platform_settingCreateArgs} args - Arguments to create a Discussionboard_platform_setting.\n     * @example\n     * // Create one Discussionboard_platform_setting\n     * const Discussionboard_platform_setting = await prisma.discussionboard_platform_setting.create({\n     *   data: {\n     *     // ... data to create a Discussionboard_platform_setting\n     *   }\n     * })\n     * \n     */\n    create<T extends discussionboard_platform_settingCreateArgs>(args: SelectSubset<T, discussionboard_platform_settingCreateArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"create\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Create many Discussionboard_platform_settings.\n     * @param {discussionboard_platform_settingCreateManyArgs} args - Arguments to create many Discussionboard_platform_settings.\n     * @example\n     * // Create many Discussionboard_platform_settings\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.createMany({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     *     \n     */\n    createMany<T extends discussionboard_platform_settingCreateManyArgs>(args?: SelectSubset<T, discussionboard_platform_settingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Create many Discussionboard_platform_settings and returns the data saved in the database.\n     * @param {discussionboard_platform_settingCreateManyAndReturnArgs} args - Arguments to create many Discussionboard_platform_settings.\n     * @example\n     * // Create many Discussionboard_platform_settings\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.createManyAndReturn({\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Create many Discussionboard_platform_settings and only return the `id`\n     * const discussionboard_platform_settingWithIdOnly = await prisma.discussionboard_platform_setting.createManyAndReturn({\n     *   select: { id: true },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    createManyAndReturn<T extends discussionboard_platform_settingCreateManyAndReturnArgs>(args?: SelectSubset<T, discussionboard_platform_settingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"createManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Delete a Discussionboard_platform_setting.\n     * @param {discussionboard_platform_settingDeleteArgs} args - Arguments to delete one Discussionboard_platform_setting.\n     * @example\n     * // Delete one Discussionboard_platform_setting\n     * const Discussionboard_platform_setting = await prisma.discussionboard_platform_setting.delete({\n     *   where: {\n     *     // ... filter to delete one Discussionboard_platform_setting\n     *   }\n     * })\n     * \n     */\n    delete<T extends discussionboard_platform_settingDeleteArgs>(args: SelectSubset<T, discussionboard_platform_settingDeleteArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"delete\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Update one Discussionboard_platform_setting.\n     * @param {discussionboard_platform_settingUpdateArgs} args - Arguments to update one Discussionboard_platform_setting.\n     * @example\n     * // Update one Discussionboard_platform_setting\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.update({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    update<T extends discussionboard_platform_settingUpdateArgs>(args: SelectSubset<T, discussionboard_platform_settingUpdateArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"update\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n    /**\n     * Delete zero or more Discussionboard_platform_settings.\n     * @param {discussionboard_platform_settingDeleteManyArgs} args - Arguments to filter Discussionboard_platform_settings to delete.\n     * @example\n     * // Delete a few Discussionboard_platform_settings\n     * const { count } = await prisma.discussionboard_platform_setting.deleteMany({\n     *   where: {\n     *     // ... provide filter here\n     *   }\n     * })\n     * \n     */\n    deleteMany<T extends discussionboard_platform_settingDeleteManyArgs>(args?: SelectSubset<T, discussionboard_platform_settingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_platform_settings.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_platform_settingUpdateManyArgs} args - Arguments to update one or more rows.\n     * @example\n     * // Update many Discussionboard_platform_settings\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.updateMany({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: {\n     *     // ... provide data here\n     *   }\n     * })\n     * \n     */\n    updateMany<T extends discussionboard_platform_settingUpdateManyArgs>(args: SelectSubset<T, discussionboard_platform_settingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>\n\n    /**\n     * Update zero or more Discussionboard_platform_settings and returns the data updated in the database.\n     * @param {discussionboard_platform_settingUpdateManyAndReturnArgs} args - Arguments to update many Discussionboard_platform_settings.\n     * @example\n     * // Update many Discussionboard_platform_settings\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.updateManyAndReturn({\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * \n     * // Update zero or more Discussionboard_platform_settings and only return the `id`\n     * const discussionboard_platform_settingWithIdOnly = await prisma.discussionboard_platform_setting.updateManyAndReturn({\n     *   select: { id: true },\n     *   where: {\n     *     // ... provide filter here\n     *   },\n     *   data: [\n     *     // ... provide data here\n     *   ]\n     * })\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * \n     */\n    updateManyAndReturn<T extends discussionboard_platform_settingUpdateManyAndReturnArgs>(args: SelectSubset<T, discussionboard_platform_settingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"updateManyAndReturn\", GlobalOmitOptions>>\n\n    /**\n     * Create or update one Discussionboard_platform_setting.\n     * @param {discussionboard_platform_settingUpsertArgs} args - Arguments to update or create a Discussionboard_platform_setting.\n     * @example\n     * // Update or create a Discussionboard_platform_setting\n     * const discussionboard_platform_setting = await prisma.discussionboard_platform_setting.upsert({\n     *   create: {\n     *     // ... data to create a Discussionboard_platform_setting\n     *   },\n     *   update: {\n     *     // ... in case it already exists, update\n     *   },\n     *   where: {\n     *     // ... the filter for the Discussionboard_platform_setting we want to update\n     *   }\n     * })\n     */\n    upsert<T extends discussionboard_platform_settingUpsertArgs>(args: SelectSubset<T, discussionboard_platform_settingUpsertArgs<ExtArgs>>): Prisma__discussionboard_platform_settingClient<$Result.GetResult<Prisma.$discussionboard_platform_settingPayload<ExtArgs>, T, \"upsert\", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>\n\n\n    /**\n     * Count the number of Discussionboard_platform_settings.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_platform_settingCountArgs} args - Arguments to filter Discussionboard_platform_settings to count.\n     * @example\n     * // Count the number of Discussionboard_platform_settings\n     * const count = await prisma.discussionboard_platform_setting.count({\n     *   where: {\n     *     // ... the filter for the Discussionboard_platform_settings we want to count\n     *   }\n     * })\n    **/\n    count<T extends discussionboard_platform_settingCountArgs>(\n      args?: Subset<T, discussionboard_platform_settingCountArgs>,\n    ): Prisma.PrismaPromise<\n      T extends $Utils.Record<'select', any>\n        ? T['select'] extends true\n          ? number\n          : GetScalarType<T['select'], Discussionboard_platform_settingCountAggregateOutputType>\n        : number\n    >\n\n    /**\n     * Allows you to perform aggregations operations on a Discussionboard_platform_setting.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {Discussionboard_platform_settingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.\n     * @example\n     * // Ordered by age ascending\n     * // Where email contains prisma.io\n     * // Limited to the 10 users\n     * const aggregations = await prisma.user.aggregate({\n     *   _avg: {\n     *     age: true,\n     *   },\n     *   where: {\n     *     email: {\n     *       contains: \"prisma.io\",\n     *     },\n     *   },\n     *   orderBy: {\n     *     age: \"asc\",\n     *   },\n     *   take: 10,\n     * })\n    **/\n    aggregate<T extends Discussionboard_platform_settingAggregateArgs>(args: Subset<T, Discussionboard_platform_settingAggregateArgs>): Prisma.PrismaPromise<GetDiscussionboard_platform_settingAggregateType<T>>\n\n    /**\n     * Group by Discussionboard_platform_setting.\n     * Note, that providing `undefined` is treated as the value not being there.\n     * Read more here: https://pris.ly/d/null-undefined\n     * @param {discussionboard_platform_settingGroupByArgs} args - Group by arguments.\n     * @example\n     * // Group by city, order by createdAt, get count\n     * const result = await prisma.user.groupBy({\n     *   by: ['city', 'createdAt'],\n     *   orderBy: {\n     *     createdAt: true\n     *   },\n     *   _count: {\n     *     _all: true\n     *   },\n     * })\n     * \n    **/\n    groupBy<\n      T extends discussionboard_platform_settingGroupByArgs,\n      HasSelectOrTake extends Or<\n        Extends<'skip', Keys<T>>,\n        Extends<'take', Keys<T>>\n      >,\n      OrderByArg extends True extends HasSelectOrTake\n        ? { orderBy: discussionboard_platform_settingGroupByArgs['orderBy'] }\n        : { orderBy?: discussionboard_platform_settingGroupByArgs['orderBy'] },\n      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,\n      ByFields extends MaybeTupleToUnion<T['by']>,\n      ByValid extends Has<ByFields, OrderFields>,\n      HavingFields extends GetHavingFields<T['having']>,\n      HavingValid extends Has<ByFields, HavingFields>,\n      ByEmpty extends T['by'] extends never[] ? True : False,\n      InputErrors extends ByEmpty extends True\n      ? `Error: \"by\" must not be empty.`\n      : HavingValid extends False\n      ? {\n          [P in HavingFields]: P extends ByFields\n            ? never\n            : P extends string\n            ? `Error: Field \"${P}\" used in \"having\" needs to be provided in \"by\".`\n            : [\n                Error,\n                'Field ',\n                P,\n                ` in \"having\" needs to be provided in \"by\"`,\n              ]\n        }[HavingFields]\n      : 'take' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"take\", you also need to provide \"orderBy\"'\n      : 'skip' extends Keys<T>\n      ? 'orderBy' extends Keys<T>\n        ? ByValid extends True\n          ? {}\n          : {\n              [P in OrderFields]: P extends ByFields\n                ? never\n                : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n            }[OrderFields]\n        : 'Error: If you provide \"skip\", you also need to provide \"orderBy\"'\n      : ByValid extends True\n      ? {}\n      : {\n          [P in OrderFields]: P extends ByFields\n            ? never\n            : `Error: Field \"${P}\" in \"orderBy\" needs to be provided in \"by\"`\n        }[OrderFields]\n    >(args: SubsetIntersection<T, discussionboard_platform_settingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionboard_platform_settingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>\n  /**\n   * Fields of the discussionboard_platform_setting model\n   */\n  readonly fields: discussionboard_platform_settingFieldRefs;\n  }\n\n  /**\n   * The delegate class that acts as a \"Promise-like\" for discussionboard_platform_setting.\n   * Why is this prefixed with `Prisma__`?\n   * Because we want to prevent naming conflicts as mentioned in\n   * https://github.com/prisma/prisma-client-js/issues/707\n   */\n  export interface Prisma__discussionboard_platform_settingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {\n    readonly [Symbol.toStringTag]: \"PrismaPromise\"\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>\n  }\n\n\n\n\n  /**\n   * Fields of the discussionboard_platform_setting model\n   */\n  interface discussionboard_platform_settingFieldRefs {\n    readonly id: FieldRef<\"discussionboard_platform_setting\", 'String'>\n    readonly name: FieldRef<\"discussionboard_platform_setting\", 'String'>\n    readonly value: FieldRef<\"discussionboard_platform_setting\", 'String'>\n    readonly type: FieldRef<\"discussionboard_platform_setting\", 'String'>\n    readonly updated_at: FieldRef<\"discussionboard_platform_setting\", 'DateTime'>\n  }\n    \n\n  // Custom InputTypes\n  /**\n   * discussionboard_platform_setting findUnique\n   */\n  export type discussionboard_platform_settingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_platform_setting to fetch.\n     */\n    where: discussionboard_platform_settingWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_platform_setting findUniqueOrThrow\n   */\n  export type discussionboard_platform_settingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_platform_setting to fetch.\n     */\n    where: discussionboard_platform_settingWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_platform_setting findFirst\n   */\n  export type discussionboard_platform_settingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_platform_setting to fetch.\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_platform_settings to fetch.\n     */\n    orderBy?: discussionboard_platform_settingOrderByWithRelationInput | discussionboard_platform_settingOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_platform_settings.\n     */\n    cursor?: discussionboard_platform_settingWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_platform_settings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_platform_settings.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_platform_settings.\n     */\n    distinct?: Discussionboard_platform_settingScalarFieldEnum | Discussionboard_platform_settingScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_platform_setting findFirstOrThrow\n   */\n  export type discussionboard_platform_settingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_platform_setting to fetch.\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_platform_settings to fetch.\n     */\n    orderBy?: discussionboard_platform_settingOrderByWithRelationInput | discussionboard_platform_settingOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for searching for discussionboard_platform_settings.\n     */\n    cursor?: discussionboard_platform_settingWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_platform_settings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_platform_settings.\n     */\n    skip?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}\n     * \n     * Filter by unique combinations of discussionboard_platform_settings.\n     */\n    distinct?: Discussionboard_platform_settingScalarFieldEnum | Discussionboard_platform_settingScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_platform_setting findMany\n   */\n  export type discussionboard_platform_settingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * Filter, which discussionboard_platform_settings to fetch.\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}\n     * \n     * Determine the order of discussionboard_platform_settings to fetch.\n     */\n    orderBy?: discussionboard_platform_settingOrderByWithRelationInput | discussionboard_platform_settingOrderByWithRelationInput[]\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}\n     * \n     * Sets the position for listing discussionboard_platform_settings.\n     */\n    cursor?: discussionboard_platform_settingWhereUniqueInput\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Take `±n` discussionboard_platform_settings from the position of the cursor.\n     */\n    take?: number\n    /**\n     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}\n     * \n     * Skip the first `n` discussionboard_platform_settings.\n     */\n    skip?: number\n    distinct?: Discussionboard_platform_settingScalarFieldEnum | Discussionboard_platform_settingScalarFieldEnum[]\n  }\n\n  /**\n   * discussionboard_platform_setting create\n   */\n  export type discussionboard_platform_settingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * The data needed to create a discussionboard_platform_setting.\n     */\n    data: XOR<discussionboard_platform_settingCreateInput, discussionboard_platform_settingUncheckedCreateInput>\n  }\n\n  /**\n   * discussionboard_platform_setting createMany\n   */\n  export type discussionboard_platform_settingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to create many discussionboard_platform_settings.\n     */\n    data: discussionboard_platform_settingCreateManyInput | discussionboard_platform_settingCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_platform_setting createManyAndReturn\n   */\n  export type discussionboard_platform_settingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelectCreateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * The data used to create many discussionboard_platform_settings.\n     */\n    data: discussionboard_platform_settingCreateManyInput | discussionboard_platform_settingCreateManyInput[]\n    skipDuplicates?: boolean\n  }\n\n  /**\n   * discussionboard_platform_setting update\n   */\n  export type discussionboard_platform_settingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * The data needed to update a discussionboard_platform_setting.\n     */\n    data: XOR<discussionboard_platform_settingUpdateInput, discussionboard_platform_settingUncheckedUpdateInput>\n    /**\n     * Choose, which discussionboard_platform_setting to update.\n     */\n    where: discussionboard_platform_settingWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_platform_setting updateMany\n   */\n  export type discussionboard_platform_settingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * The data used to update discussionboard_platform_settings.\n     */\n    data: XOR<discussionboard_platform_settingUpdateManyMutationInput, discussionboard_platform_settingUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_platform_settings to update\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * Limit how many discussionboard_platform_settings to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_platform_setting updateManyAndReturn\n   */\n  export type discussionboard_platform_settingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelectUpdateManyAndReturn<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * The data used to update discussionboard_platform_settings.\n     */\n    data: XOR<discussionboard_platform_settingUpdateManyMutationInput, discussionboard_platform_settingUncheckedUpdateManyInput>\n    /**\n     * Filter which discussionboard_platform_settings to update\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * Limit how many discussionboard_platform_settings to update.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_platform_setting upsert\n   */\n  export type discussionboard_platform_settingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * The filter to search for the discussionboard_platform_setting to update in case it exists.\n     */\n    where: discussionboard_platform_settingWhereUniqueInput\n    /**\n     * In case the discussionboard_platform_setting found by the `where` argument doesn't exist, create a new discussionboard_platform_setting with this data.\n     */\n    create: XOR<discussionboard_platform_settingCreateInput, discussionboard_platform_settingUncheckedCreateInput>\n    /**\n     * In case the discussionboard_platform_setting was found with the provided `where` argument, update it with this data.\n     */\n    update: XOR<discussionboard_platform_settingUpdateInput, discussionboard_platform_settingUncheckedUpdateInput>\n  }\n\n  /**\n   * discussionboard_platform_setting delete\n   */\n  export type discussionboard_platform_settingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n    /**\n     * Filter which discussionboard_platform_setting to delete.\n     */\n    where: discussionboard_platform_settingWhereUniqueInput\n  }\n\n  /**\n   * discussionboard_platform_setting deleteMany\n   */\n  export type discussionboard_platform_settingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Filter which discussionboard_platform_settings to delete\n     */\n    where?: discussionboard_platform_settingWhereInput\n    /**\n     * Limit how many discussionboard_platform_settings to delete.\n     */\n    limit?: number\n  }\n\n  /**\n   * discussionboard_platform_setting without action\n   */\n  export type discussionboard_platform_settingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {\n    /**\n     * Select specific fields to fetch from the discussionboard_platform_setting\n     */\n    select?: discussionboard_platform_settingSelect<ExtArgs> | null\n    /**\n     * Omit specific fields from the discussionboard_platform_setting\n     */\n    omit?: discussionboard_platform_settingOmit<ExtArgs> | null\n  }\n\n\n  /**\n   * Enums\n   */\n\n  export const TransactionIsolationLevel: {\n    ReadUncommitted: 'ReadUncommitted',\n    ReadCommitted: 'ReadCommitted',\n    RepeatableRead: 'RepeatableRead',\n    Serializable: 'Serializable'\n  };\n\n  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]\n\n\n  export const Discussionboard_userScalarFieldEnum: {\n    id: 'id',\n    email: 'email',\n    password_hash: 'password_hash',\n    is_active: 'is_active',\n    created_at: 'created_at',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussionboard_userScalarFieldEnum = (typeof Discussionboard_userScalarFieldEnum)[keyof typeof Discussionboard_userScalarFieldEnum]\n\n\n  export const Discussionboard_user_profileScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    display_name: 'display_name',\n    avatar_url: 'avatar_url',\n    bio: 'bio'\n  };\n\n  export type Discussionboard_user_profileScalarFieldEnum = (typeof Discussionboard_user_profileScalarFieldEnum)[keyof typeof Discussionboard_user_profileScalarFieldEnum]\n\n\n  export const Discussionboard_memberScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    granted_at: 'granted_at'\n  };\n\n  export type Discussionboard_memberScalarFieldEnum = (typeof Discussionboard_memberScalarFieldEnum)[keyof typeof Discussionboard_memberScalarFieldEnum]\n\n\n  export const Discussionboard_moderatorScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    assigned_at: 'assigned_at'\n  };\n\n  export type Discussionboard_moderatorScalarFieldEnum = (typeof Discussionboard_moderatorScalarFieldEnum)[keyof typeof Discussionboard_moderatorScalarFieldEnum]\n\n\n  export const Discussionboard_adminScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    assigned_at: 'assigned_at'\n  };\n\n  export type Discussionboard_adminScalarFieldEnum = (typeof Discussionboard_adminScalarFieldEnum)[keyof typeof Discussionboard_adminScalarFieldEnum]\n\n\n  export const Discussionboard_postScalarFieldEnum: {\n    id: 'id',\n    author_member_id: 'author_member_id',\n    category_id: 'category_id',\n    title: 'title',\n    body: 'body',\n    created_at: 'created_at',\n    updated_at: 'updated_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussionboard_postScalarFieldEnum = (typeof Discussionboard_postScalarFieldEnum)[keyof typeof Discussionboard_postScalarFieldEnum]\n\n\n  export const Discussionboard_post_categoryScalarFieldEnum: {\n    id: 'id',\n    name: 'name',\n    description: 'description'\n  };\n\n  export type Discussionboard_post_categoryScalarFieldEnum = (typeof Discussionboard_post_categoryScalarFieldEnum)[keyof typeof Discussionboard_post_categoryScalarFieldEnum]\n\n\n  export const Discussionboard_post_tagScalarFieldEnum: {\n    id: 'id',\n    name: 'name'\n  };\n\n  export type Discussionboard_post_tagScalarFieldEnum = (typeof Discussionboard_post_tagScalarFieldEnum)[keyof typeof Discussionboard_post_tagScalarFieldEnum]\n\n\n  export const Discussionboard_post_attachmentScalarFieldEnum: {\n    id: 'id',\n    post_id: 'post_id',\n    file_url: 'file_url',\n    file_type: 'file_type',\n    uploaded_at: 'uploaded_at'\n  };\n\n  export type Discussionboard_post_attachmentScalarFieldEnum = (typeof Discussionboard_post_attachmentScalarFieldEnum)[keyof typeof Discussionboard_post_attachmentScalarFieldEnum]\n\n\n  export const Discussionboard_commentsScalarFieldEnum: {\n    id: 'id',\n    post_id: 'post_id',\n    author_id: 'author_id',\n    parent_comment_id: 'parent_comment_id',\n    content: 'content',\n    is_edited: 'is_edited',\n    is_deleted: 'is_deleted',\n    created_at: 'created_at',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussionboard_commentsScalarFieldEnum = (typeof Discussionboard_commentsScalarFieldEnum)[keyof typeof Discussionboard_commentsScalarFieldEnum]\n\n\n  export const Discussionboard_likesScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    post_id: 'post_id',\n    comment_id: 'comment_id',\n    created_at: 'created_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussionboard_likesScalarFieldEnum = (typeof Discussionboard_likesScalarFieldEnum)[keyof typeof Discussionboard_likesScalarFieldEnum]\n\n\n  export const Discussionboard_reportsScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    post_id: 'post_id',\n    comment_id: 'comment_id',\n    reason_code: 'reason_code',\n    reason_details: 'reason_details',\n    created_at: 'created_at',\n    deleted_at: 'deleted_at'\n  };\n\n  export type Discussionboard_reportsScalarFieldEnum = (typeof Discussionboard_reportsScalarFieldEnum)[keyof typeof Discussionboard_reportsScalarFieldEnum]\n\n\n  export const Discussionboard_moderation_actionScalarFieldEnum: {\n    id: 'id',\n    actor_id: 'actor_id',\n    target_user_id: 'target_user_id',\n    post_id: 'post_id',\n    comment_id: 'comment_id',\n    action_type: 'action_type',\n    reason: 'reason',\n    created_at: 'created_at'\n  };\n\n  export type Discussionboard_moderation_actionScalarFieldEnum = (typeof Discussionboard_moderation_actionScalarFieldEnum)[keyof typeof Discussionboard_moderation_actionScalarFieldEnum]\n\n\n  export const Discussionboard_report_reviewScalarFieldEnum: {\n    id: 'id',\n    report_id: 'report_id',\n    reviewer_id: 'reviewer_id',\n    post_id: 'post_id',\n    comment_id: 'comment_id',\n    review_status: 'review_status',\n    moderator_comment: 'moderator_comment',\n    reviewed_at: 'reviewed_at'\n  };\n\n  export type Discussionboard_report_reviewScalarFieldEnum = (typeof Discussionboard_report_reviewScalarFieldEnum)[keyof typeof Discussionboard_report_reviewScalarFieldEnum]\n\n\n  export const Discussionboard_warningScalarFieldEnum: {\n    id: 'id',\n    issued_by_id: 'issued_by_id',\n    issued_to_id: 'issued_to_id',\n    post_id: 'post_id',\n    comment_id: 'comment_id',\n    warning_type: 'warning_type',\n    message: 'message',\n    issued_at: 'issued_at'\n  };\n\n  export type Discussionboard_warningScalarFieldEnum = (typeof Discussionboard_warningScalarFieldEnum)[keyof typeof Discussionboard_warningScalarFieldEnum]\n\n\n  export const Discussionboard_banScalarFieldEnum: {\n    id: 'id',\n    banned_user_id: 'banned_user_id',\n    banned_by_id: 'banned_by_id',\n    warning_id: 'warning_id',\n    ban_type: 'ban_type',\n    reason: 'reason',\n    issued_at: 'issued_at',\n    expires_at: 'expires_at'\n  };\n\n  export type Discussionboard_banScalarFieldEnum = (typeof Discussionboard_banScalarFieldEnum)[keyof typeof Discussionboard_banScalarFieldEnum]\n\n\n  export const Discussionboard_notificationScalarFieldEnum: {\n    id: 'id',\n    recipient_user_id: 'recipient_user_id',\n    related_post_id: 'related_post_id',\n    related_comment_id: 'related_comment_id',\n    actor_user_id: 'actor_user_id',\n    type: 'type',\n    message: 'message',\n    is_read: 'is_read',\n    created_at: 'created_at'\n  };\n\n  export type Discussionboard_notificationScalarFieldEnum = (typeof Discussionboard_notificationScalarFieldEnum)[keyof typeof Discussionboard_notificationScalarFieldEnum]\n\n\n  export const Discussionboard_notification_preferenceScalarFieldEnum: {\n    id: 'id',\n    user_id: 'user_id',\n    notify_reply: 'notify_reply',\n    notify_like: 'notify_like',\n    notify_moderator_action: 'notify_moderator_action',\n    notify_system_message: 'notify_system_message'\n  };\n\n  export type Discussionboard_notification_preferenceScalarFieldEnum = (typeof Discussionboard_notification_preferenceScalarFieldEnum)[keyof typeof Discussionboard_notification_preferenceScalarFieldEnum]\n\n\n  export const Discussionboard_audit_logScalarFieldEnum: {\n    id: 'id',\n    actor_user_id: 'actor_user_id',\n    target_user_id: 'target_user_id',\n    action_type: 'action_type',\n    entity_type: 'entity_type',\n    entity_id: 'entity_id',\n    action_detail: 'action_detail',\n    created_at: 'created_at'\n  };\n\n  export type Discussionboard_audit_logScalarFieldEnum = (typeof Discussionboard_audit_logScalarFieldEnum)[keyof typeof Discussionboard_audit_logScalarFieldEnum]\n\n\n  export const Discussionboard_platform_settingScalarFieldEnum: {\n    id: 'id',\n    name: 'name',\n    value: 'value',\n    type: 'type',\n    updated_at: 'updated_at'\n  };\n\n  export type Discussionboard_platform_settingScalarFieldEnum = (typeof Discussionboard_platform_settingScalarFieldEnum)[keyof typeof Discussionboard_platform_settingScalarFieldEnum]\n\n\n  export const SortOrder: {\n    asc: 'asc',\n    desc: 'desc'\n  };\n\n  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]\n\n\n  export const QueryMode: {\n    default: 'default',\n    insensitive: 'insensitive'\n  };\n\n  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]\n\n\n  export const NullsOrder: {\n    first: 'first',\n    last: 'last'\n  };\n\n  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]\n\n\n  /**\n   * Field references\n   */\n\n\n  /**\n   * Reference to a field of type 'String'\n   */\n  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>\n    \n\n\n  /**\n   * Reference to a field of type 'String[]'\n   */\n  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>\n    \n\n\n  /**\n   * Reference to a field of type 'Boolean'\n   */\n  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>\n    \n\n\n  /**\n   * Reference to a field of type 'DateTime'\n   */\n  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>\n    \n\n\n  /**\n   * Reference to a field of type 'DateTime[]'\n   */\n  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>\n    \n\n\n  /**\n   * Reference to a field of type 'Int'\n   */\n  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>\n    \n\n\n  /**\n   * Reference to a field of type 'Int[]'\n   */\n  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>\n    \n  /**\n   * Deep Input Types\n   */\n\n\n  export type discussionboard_userWhereInput = {\n    AND?: discussionboard_userWhereInput | discussionboard_userWhereInput[]\n    OR?: discussionboard_userWhereInput[]\n    NOT?: discussionboard_userWhereInput | discussionboard_userWhereInput[]\n    id?: UuidFilter<\"discussionboard_user\"> | string\n    email?: StringFilter<\"discussionboard_user\"> | string\n    password_hash?: StringFilter<\"discussionboard_user\"> | string\n    is_active?: BoolFilter<\"discussionboard_user\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_user\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_user\"> | Date | string\n    discussionboard_user_profile?: XOR<Discussionboard_user_profileNullableScalarRelationFilter, discussionboard_user_profileWhereInput> | null\n    discussionboard_member?: XOR<Discussionboard_memberNullableScalarRelationFilter, discussionboard_memberWhereInput> | null\n    discussionboard_moderator?: XOR<Discussionboard_moderatorNullableScalarRelationFilter, discussionboard_moderatorWhereInput> | null\n    discussionboard_admin?: XOR<Discussionboard_adminNullableScalarRelationFilter, discussionboard_adminWhereInput> | null\n    discussionboard_comments?: Discussionboard_commentsListRelationFilter\n    discussionboard_likes?: Discussionboard_likesListRelationFilter\n    discussionboard_reports?: Discussionboard_reportsListRelationFilter\n    discussionboard_moderation_action_of_actor_id?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_moderation_action_of_target_user_id?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n    discussionboard_warning_of_issued_by_id?: Discussionboard_warningListRelationFilter\n    discussionboard_warning_of_issued_to_id?: Discussionboard_warningListRelationFilter\n    discussionboard_ban_of_banned_user_id?: Discussionboard_banListRelationFilter\n    discussionboard_ban_of_banned_by_id?: Discussionboard_banListRelationFilter\n    discussionboard_notification_of_recipient_user_id?: Discussionboard_notificationListRelationFilter\n    discussionboard_notification_of_actor_user_id?: Discussionboard_notificationListRelationFilter\n    discussionboard_notification_preference?: XOR<Discussionboard_notification_preferenceNullableScalarRelationFilter, discussionboard_notification_preferenceWhereInput> | null\n    discussionboard_audit_log_of_actor_user_id?: Discussionboard_audit_logListRelationFilter\n    discussionboard_audit_log_of_target_user_id?: Discussionboard_audit_logListRelationFilter\n  }\n\n  export type discussionboard_userOrderByWithRelationInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    is_active?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    discussionboard_user_profile?: discussionboard_user_profileOrderByWithRelationInput\n    discussionboard_member?: discussionboard_memberOrderByWithRelationInput\n    discussionboard_moderator?: discussionboard_moderatorOrderByWithRelationInput\n    discussionboard_admin?: discussionboard_adminOrderByWithRelationInput\n    discussionboard_comments?: discussionboard_commentsOrderByRelationAggregateInput\n    discussionboard_likes?: discussionboard_likesOrderByRelationAggregateInput\n    discussionboard_reports?: discussionboard_reportsOrderByRelationAggregateInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionOrderByRelationAggregateInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionOrderByRelationAggregateInput\n    discussionboard_report_review?: discussionboard_report_reviewOrderByRelationAggregateInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningOrderByRelationAggregateInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningOrderByRelationAggregateInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banOrderByRelationAggregateInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banOrderByRelationAggregateInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationOrderByRelationAggregateInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationOrderByRelationAggregateInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceOrderByWithRelationInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logOrderByRelationAggregateInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_userWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    email?: string\n    AND?: discussionboard_userWhereInput | discussionboard_userWhereInput[]\n    OR?: discussionboard_userWhereInput[]\n    NOT?: discussionboard_userWhereInput | discussionboard_userWhereInput[]\n    password_hash?: StringFilter<\"discussionboard_user\"> | string\n    is_active?: BoolFilter<\"discussionboard_user\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_user\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_user\"> | Date | string\n    discussionboard_user_profile?: XOR<Discussionboard_user_profileNullableScalarRelationFilter, discussionboard_user_profileWhereInput> | null\n    discussionboard_member?: XOR<Discussionboard_memberNullableScalarRelationFilter, discussionboard_memberWhereInput> | null\n    discussionboard_moderator?: XOR<Discussionboard_moderatorNullableScalarRelationFilter, discussionboard_moderatorWhereInput> | null\n    discussionboard_admin?: XOR<Discussionboard_adminNullableScalarRelationFilter, discussionboard_adminWhereInput> | null\n    discussionboard_comments?: Discussionboard_commentsListRelationFilter\n    discussionboard_likes?: Discussionboard_likesListRelationFilter\n    discussionboard_reports?: Discussionboard_reportsListRelationFilter\n    discussionboard_moderation_action_of_actor_id?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_moderation_action_of_target_user_id?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n    discussionboard_warning_of_issued_by_id?: Discussionboard_warningListRelationFilter\n    discussionboard_warning_of_issued_to_id?: Discussionboard_warningListRelationFilter\n    discussionboard_ban_of_banned_user_id?: Discussionboard_banListRelationFilter\n    discussionboard_ban_of_banned_by_id?: Discussionboard_banListRelationFilter\n    discussionboard_notification_of_recipient_user_id?: Discussionboard_notificationListRelationFilter\n    discussionboard_notification_of_actor_user_id?: Discussionboard_notificationListRelationFilter\n    discussionboard_notification_preference?: XOR<Discussionboard_notification_preferenceNullableScalarRelationFilter, discussionboard_notification_preferenceWhereInput> | null\n    discussionboard_audit_log_of_actor_user_id?: Discussionboard_audit_logListRelationFilter\n    discussionboard_audit_log_of_target_user_id?: Discussionboard_audit_logListRelationFilter\n  }, \"id\" | \"email\">\n\n  export type discussionboard_userOrderByWithAggregationInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    is_active?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussionboard_userCountOrderByAggregateInput\n    _max?: discussionboard_userMaxOrderByAggregateInput\n    _min?: discussionboard_userMinOrderByAggregateInput\n  }\n\n  export type discussionboard_userScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_userScalarWhereWithAggregatesInput | discussionboard_userScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_userScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_userScalarWhereWithAggregatesInput | discussionboard_userScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_user\"> | string\n    email?: StringWithAggregatesFilter<\"discussionboard_user\"> | string\n    password_hash?: StringWithAggregatesFilter<\"discussionboard_user\"> | string\n    is_active?: BoolWithAggregatesFilter<\"discussionboard_user\"> | boolean\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_user\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussionboard_user\"> | Date | string\n  }\n\n  export type discussionboard_user_profileWhereInput = {\n    AND?: discussionboard_user_profileWhereInput | discussionboard_user_profileWhereInput[]\n    OR?: discussionboard_user_profileWhereInput[]\n    NOT?: discussionboard_user_profileWhereInput | discussionboard_user_profileWhereInput[]\n    id?: UuidFilter<\"discussionboard_user_profile\"> | string\n    user_id?: UuidFilter<\"discussionboard_user_profile\"> | string\n    display_name?: StringFilter<\"discussionboard_user_profile\"> | string\n    avatar_url?: StringNullableFilter<\"discussionboard_user_profile\"> | string | null\n    bio?: StringNullableFilter<\"discussionboard_user_profile\"> | string | null\n    user_profile_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }\n\n  export type discussionboard_user_profileOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    display_name?: SortOrder\n    avatar_url?: SortOrderInput | SortOrder\n    bio?: SortOrderInput | SortOrder\n    user_profile_user_id?: discussionboard_userOrderByWithRelationInput\n  }\n\n  export type discussionboard_user_profileWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id?: string\n    AND?: discussionboard_user_profileWhereInput | discussionboard_user_profileWhereInput[]\n    OR?: discussionboard_user_profileWhereInput[]\n    NOT?: discussionboard_user_profileWhereInput | discussionboard_user_profileWhereInput[]\n    display_name?: StringFilter<\"discussionboard_user_profile\"> | string\n    avatar_url?: StringNullableFilter<\"discussionboard_user_profile\"> | string | null\n    bio?: StringNullableFilter<\"discussionboard_user_profile\"> | string | null\n    user_profile_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }, \"id\" | \"user_id\">\n\n  export type discussionboard_user_profileOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    display_name?: SortOrder\n    avatar_url?: SortOrderInput | SortOrder\n    bio?: SortOrderInput | SortOrder\n    _count?: discussionboard_user_profileCountOrderByAggregateInput\n    _max?: discussionboard_user_profileMaxOrderByAggregateInput\n    _min?: discussionboard_user_profileMinOrderByAggregateInput\n  }\n\n  export type discussionboard_user_profileScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_user_profileScalarWhereWithAggregatesInput | discussionboard_user_profileScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_user_profileScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_user_profileScalarWhereWithAggregatesInput | discussionboard_user_profileScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_user_profile\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_user_profile\"> | string\n    display_name?: StringWithAggregatesFilter<\"discussionboard_user_profile\"> | string\n    avatar_url?: StringNullableWithAggregatesFilter<\"discussionboard_user_profile\"> | string | null\n    bio?: StringNullableWithAggregatesFilter<\"discussionboard_user_profile\"> | string | null\n  }\n\n  export type discussionboard_memberWhereInput = {\n    AND?: discussionboard_memberWhereInput | discussionboard_memberWhereInput[]\n    OR?: discussionboard_memberWhereInput[]\n    NOT?: discussionboard_memberWhereInput | discussionboard_memberWhereInput[]\n    id?: UuidFilter<\"discussionboard_member\"> | string\n    user_id?: UuidFilter<\"discussionboard_member\"> | string\n    granted_at?: DateTimeFilter<\"discussionboard_member\"> | Date | string\n    member_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    discussionboard_post?: Discussionboard_postListRelationFilter\n  }\n\n  export type discussionboard_memberOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    granted_at?: SortOrder\n    member_user_id?: discussionboard_userOrderByWithRelationInput\n    discussionboard_post?: discussionboard_postOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_memberWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id?: string\n    AND?: discussionboard_memberWhereInput | discussionboard_memberWhereInput[]\n    OR?: discussionboard_memberWhereInput[]\n    NOT?: discussionboard_memberWhereInput | discussionboard_memberWhereInput[]\n    granted_at?: DateTimeFilter<\"discussionboard_member\"> | Date | string\n    member_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    discussionboard_post?: Discussionboard_postListRelationFilter\n  }, \"id\" | \"user_id\">\n\n  export type discussionboard_memberOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    granted_at?: SortOrder\n    _count?: discussionboard_memberCountOrderByAggregateInput\n    _max?: discussionboard_memberMaxOrderByAggregateInput\n    _min?: discussionboard_memberMinOrderByAggregateInput\n  }\n\n  export type discussionboard_memberScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_memberScalarWhereWithAggregatesInput | discussionboard_memberScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_memberScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_memberScalarWhereWithAggregatesInput | discussionboard_memberScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_member\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_member\"> | string\n    granted_at?: DateTimeWithAggregatesFilter<\"discussionboard_member\"> | Date | string\n  }\n\n  export type discussionboard_moderatorWhereInput = {\n    AND?: discussionboard_moderatorWhereInput | discussionboard_moderatorWhereInput[]\n    OR?: discussionboard_moderatorWhereInput[]\n    NOT?: discussionboard_moderatorWhereInput | discussionboard_moderatorWhereInput[]\n    id?: UuidFilter<\"discussionboard_moderator\"> | string\n    user_id?: UuidFilter<\"discussionboard_moderator\"> | string\n    assigned_at?: DateTimeFilter<\"discussionboard_moderator\"> | Date | string\n    moderator_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }\n\n  export type discussionboard_moderatorOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n    moderator_user_id?: discussionboard_userOrderByWithRelationInput\n  }\n\n  export type discussionboard_moderatorWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id?: string\n    AND?: discussionboard_moderatorWhereInput | discussionboard_moderatorWhereInput[]\n    OR?: discussionboard_moderatorWhereInput[]\n    NOT?: discussionboard_moderatorWhereInput | discussionboard_moderatorWhereInput[]\n    assigned_at?: DateTimeFilter<\"discussionboard_moderator\"> | Date | string\n    moderator_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }, \"id\" | \"user_id\">\n\n  export type discussionboard_moderatorOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n    _count?: discussionboard_moderatorCountOrderByAggregateInput\n    _max?: discussionboard_moderatorMaxOrderByAggregateInput\n    _min?: discussionboard_moderatorMinOrderByAggregateInput\n  }\n\n  export type discussionboard_moderatorScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_moderatorScalarWhereWithAggregatesInput | discussionboard_moderatorScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_moderatorScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_moderatorScalarWhereWithAggregatesInput | discussionboard_moderatorScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_moderator\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_moderator\"> | string\n    assigned_at?: DateTimeWithAggregatesFilter<\"discussionboard_moderator\"> | Date | string\n  }\n\n  export type discussionboard_adminWhereInput = {\n    AND?: discussionboard_adminWhereInput | discussionboard_adminWhereInput[]\n    OR?: discussionboard_adminWhereInput[]\n    NOT?: discussionboard_adminWhereInput | discussionboard_adminWhereInput[]\n    id?: UuidFilter<\"discussionboard_admin\"> | string\n    user_id?: UuidFilter<\"discussionboard_admin\"> | string\n    assigned_at?: DateTimeFilter<\"discussionboard_admin\"> | Date | string\n    admin_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }\n\n  export type discussionboard_adminOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n    admin_user_id?: discussionboard_userOrderByWithRelationInput\n  }\n\n  export type discussionboard_adminWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id?: string\n    AND?: discussionboard_adminWhereInput | discussionboard_adminWhereInput[]\n    OR?: discussionboard_adminWhereInput[]\n    NOT?: discussionboard_adminWhereInput | discussionboard_adminWhereInput[]\n    assigned_at?: DateTimeFilter<\"discussionboard_admin\"> | Date | string\n    admin_user_id?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }, \"id\" | \"user_id\">\n\n  export type discussionboard_adminOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n    _count?: discussionboard_adminCountOrderByAggregateInput\n    _max?: discussionboard_adminMaxOrderByAggregateInput\n    _min?: discussionboard_adminMinOrderByAggregateInput\n  }\n\n  export type discussionboard_adminScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_adminScalarWhereWithAggregatesInput | discussionboard_adminScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_adminScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_adminScalarWhereWithAggregatesInput | discussionboard_adminScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_admin\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_admin\"> | string\n    assigned_at?: DateTimeWithAggregatesFilter<\"discussionboard_admin\"> | Date | string\n  }\n\n  export type discussionboard_postWhereInput = {\n    AND?: discussionboard_postWhereInput | discussionboard_postWhereInput[]\n    OR?: discussionboard_postWhereInput[]\n    NOT?: discussionboard_postWhereInput | discussionboard_postWhereInput[]\n    id?: UuidFilter<\"discussionboard_post\"> | string\n    author_member_id?: UuidFilter<\"discussionboard_post\"> | string\n    category_id?: UuidFilter<\"discussionboard_post\"> | string\n    title?: StringFilter<\"discussionboard_post\"> | string\n    body?: StringFilter<\"discussionboard_post\"> | string\n    created_at?: DateTimeFilter<\"discussionboard_post\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_post\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_post\"> | Date | string | null\n    member?: XOR<Discussionboard_memberScalarRelationFilter, discussionboard_memberWhereInput>\n    category?: XOR<Discussionboard_post_categoryScalarRelationFilter, discussionboard_post_categoryWhereInput>\n    discussionboard_post_attachment?: Discussionboard_post_attachmentListRelationFilter\n    discussionboard_comments?: Discussionboard_commentsListRelationFilter\n    discussionboard_likes?: Discussionboard_likesListRelationFilter\n    discussionboard_reports?: Discussionboard_reportsListRelationFilter\n    discussionboard_moderation_action?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n    discussionboard_warning?: Discussionboard_warningListRelationFilter\n    discussionboard_notification?: Discussionboard_notificationListRelationFilter\n  }\n\n  export type discussionboard_postOrderByWithRelationInput = {\n    id?: SortOrder\n    author_member_id?: SortOrder\n    category_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    member?: discussionboard_memberOrderByWithRelationInput\n    category?: discussionboard_post_categoryOrderByWithRelationInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentOrderByRelationAggregateInput\n    discussionboard_comments?: discussionboard_commentsOrderByRelationAggregateInput\n    discussionboard_likes?: discussionboard_likesOrderByRelationAggregateInput\n    discussionboard_reports?: discussionboard_reportsOrderByRelationAggregateInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionOrderByRelationAggregateInput\n    discussionboard_report_review?: discussionboard_report_reviewOrderByRelationAggregateInput\n    discussionboard_warning?: discussionboard_warningOrderByRelationAggregateInput\n    discussionboard_notification?: discussionboard_notificationOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_postWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    author_member_id_created_at?: discussionboard_postAuthor_member_idCreated_atCompoundUniqueInput\n    AND?: discussionboard_postWhereInput | discussionboard_postWhereInput[]\n    OR?: discussionboard_postWhereInput[]\n    NOT?: discussionboard_postWhereInput | discussionboard_postWhereInput[]\n    author_member_id?: UuidFilter<\"discussionboard_post\"> | string\n    category_id?: UuidFilter<\"discussionboard_post\"> | string\n    title?: StringFilter<\"discussionboard_post\"> | string\n    body?: StringFilter<\"discussionboard_post\"> | string\n    created_at?: DateTimeFilter<\"discussionboard_post\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_post\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_post\"> | Date | string | null\n    member?: XOR<Discussionboard_memberScalarRelationFilter, discussionboard_memberWhereInput>\n    category?: XOR<Discussionboard_post_categoryScalarRelationFilter, discussionboard_post_categoryWhereInput>\n    discussionboard_post_attachment?: Discussionboard_post_attachmentListRelationFilter\n    discussionboard_comments?: Discussionboard_commentsListRelationFilter\n    discussionboard_likes?: Discussionboard_likesListRelationFilter\n    discussionboard_reports?: Discussionboard_reportsListRelationFilter\n    discussionboard_moderation_action?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n    discussionboard_warning?: Discussionboard_warningListRelationFilter\n    discussionboard_notification?: Discussionboard_notificationListRelationFilter\n  }, \"id\" | \"author_member_id_created_at\">\n\n  export type discussionboard_postOrderByWithAggregationInput = {\n    id?: SortOrder\n    author_member_id?: SortOrder\n    category_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussionboard_postCountOrderByAggregateInput\n    _max?: discussionboard_postMaxOrderByAggregateInput\n    _min?: discussionboard_postMinOrderByAggregateInput\n  }\n\n  export type discussionboard_postScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_postScalarWhereWithAggregatesInput | discussionboard_postScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_postScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_postScalarWhereWithAggregatesInput | discussionboard_postScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_post\"> | string\n    author_member_id?: UuidWithAggregatesFilter<\"discussionboard_post\"> | string\n    category_id?: UuidWithAggregatesFilter<\"discussionboard_post\"> | string\n    title?: StringWithAggregatesFilter<\"discussionboard_post\"> | string\n    body?: StringWithAggregatesFilter<\"discussionboard_post\"> | string\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_post\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussionboard_post\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussionboard_post\"> | Date | string | null\n  }\n\n  export type discussionboard_post_categoryWhereInput = {\n    AND?: discussionboard_post_categoryWhereInput | discussionboard_post_categoryWhereInput[]\n    OR?: discussionboard_post_categoryWhereInput[]\n    NOT?: discussionboard_post_categoryWhereInput | discussionboard_post_categoryWhereInput[]\n    id?: UuidFilter<\"discussionboard_post_category\"> | string\n    name?: StringFilter<\"discussionboard_post_category\"> | string\n    description?: StringNullableFilter<\"discussionboard_post_category\"> | string | null\n    discussionboard_post?: Discussionboard_postListRelationFilter\n  }\n\n  export type discussionboard_post_categoryOrderByWithRelationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrderInput | SortOrder\n    discussionboard_post?: discussionboard_postOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_post_categoryWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    name?: string\n    AND?: discussionboard_post_categoryWhereInput | discussionboard_post_categoryWhereInput[]\n    OR?: discussionboard_post_categoryWhereInput[]\n    NOT?: discussionboard_post_categoryWhereInput | discussionboard_post_categoryWhereInput[]\n    description?: StringNullableFilter<\"discussionboard_post_category\"> | string | null\n    discussionboard_post?: Discussionboard_postListRelationFilter\n  }, \"id\" | \"name\">\n\n  export type discussionboard_post_categoryOrderByWithAggregationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrderInput | SortOrder\n    _count?: discussionboard_post_categoryCountOrderByAggregateInput\n    _max?: discussionboard_post_categoryMaxOrderByAggregateInput\n    _min?: discussionboard_post_categoryMinOrderByAggregateInput\n  }\n\n  export type discussionboard_post_categoryScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_post_categoryScalarWhereWithAggregatesInput | discussionboard_post_categoryScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_post_categoryScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_post_categoryScalarWhereWithAggregatesInput | discussionboard_post_categoryScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_post_category\"> | string\n    name?: StringWithAggregatesFilter<\"discussionboard_post_category\"> | string\n    description?: StringNullableWithAggregatesFilter<\"discussionboard_post_category\"> | string | null\n  }\n\n  export type discussionboard_post_tagWhereInput = {\n    AND?: discussionboard_post_tagWhereInput | discussionboard_post_tagWhereInput[]\n    OR?: discussionboard_post_tagWhereInput[]\n    NOT?: discussionboard_post_tagWhereInput | discussionboard_post_tagWhereInput[]\n    id?: UuidFilter<\"discussionboard_post_tag\"> | string\n    name?: StringFilter<\"discussionboard_post_tag\"> | string\n  }\n\n  export type discussionboard_post_tagOrderByWithRelationInput = {\n    id?: SortOrder\n    name?: SortOrder\n  }\n\n  export type discussionboard_post_tagWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    name?: string\n    AND?: discussionboard_post_tagWhereInput | discussionboard_post_tagWhereInput[]\n    OR?: discussionboard_post_tagWhereInput[]\n    NOT?: discussionboard_post_tagWhereInput | discussionboard_post_tagWhereInput[]\n  }, \"id\" | \"name\">\n\n  export type discussionboard_post_tagOrderByWithAggregationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    _count?: discussionboard_post_tagCountOrderByAggregateInput\n    _max?: discussionboard_post_tagMaxOrderByAggregateInput\n    _min?: discussionboard_post_tagMinOrderByAggregateInput\n  }\n\n  export type discussionboard_post_tagScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_post_tagScalarWhereWithAggregatesInput | discussionboard_post_tagScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_post_tagScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_post_tagScalarWhereWithAggregatesInput | discussionboard_post_tagScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_post_tag\"> | string\n    name?: StringWithAggregatesFilter<\"discussionboard_post_tag\"> | string\n  }\n\n  export type discussionboard_post_attachmentWhereInput = {\n    AND?: discussionboard_post_attachmentWhereInput | discussionboard_post_attachmentWhereInput[]\n    OR?: discussionboard_post_attachmentWhereInput[]\n    NOT?: discussionboard_post_attachmentWhereInput | discussionboard_post_attachmentWhereInput[]\n    id?: UuidFilter<\"discussionboard_post_attachment\"> | string\n    post_id?: UuidFilter<\"discussionboard_post_attachment\"> | string\n    file_url?: StringFilter<\"discussionboard_post_attachment\"> | string\n    file_type?: StringFilter<\"discussionboard_post_attachment\"> | string\n    uploaded_at?: DateTimeFilter<\"discussionboard_post_attachment\"> | Date | string\n    post?: XOR<Discussionboard_postScalarRelationFilter, discussionboard_postWhereInput>\n  }\n\n  export type discussionboard_post_attachmentOrderByWithRelationInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    file_url?: SortOrder\n    file_type?: SortOrder\n    uploaded_at?: SortOrder\n    post?: discussionboard_postOrderByWithRelationInput\n  }\n\n  export type discussionboard_post_attachmentWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    post_id_file_url?: discussionboard_post_attachmentPost_idFile_urlCompoundUniqueInput\n    AND?: discussionboard_post_attachmentWhereInput | discussionboard_post_attachmentWhereInput[]\n    OR?: discussionboard_post_attachmentWhereInput[]\n    NOT?: discussionboard_post_attachmentWhereInput | discussionboard_post_attachmentWhereInput[]\n    post_id?: UuidFilter<\"discussionboard_post_attachment\"> | string\n    file_url?: StringFilter<\"discussionboard_post_attachment\"> | string\n    file_type?: StringFilter<\"discussionboard_post_attachment\"> | string\n    uploaded_at?: DateTimeFilter<\"discussionboard_post_attachment\"> | Date | string\n    post?: XOR<Discussionboard_postScalarRelationFilter, discussionboard_postWhereInput>\n  }, \"id\" | \"post_id_file_url\">\n\n  export type discussionboard_post_attachmentOrderByWithAggregationInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    file_url?: SortOrder\n    file_type?: SortOrder\n    uploaded_at?: SortOrder\n    _count?: discussionboard_post_attachmentCountOrderByAggregateInput\n    _max?: discussionboard_post_attachmentMaxOrderByAggregateInput\n    _min?: discussionboard_post_attachmentMinOrderByAggregateInput\n  }\n\n  export type discussionboard_post_attachmentScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_post_attachmentScalarWhereWithAggregatesInput | discussionboard_post_attachmentScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_post_attachmentScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_post_attachmentScalarWhereWithAggregatesInput | discussionboard_post_attachmentScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_post_attachment\"> | string\n    post_id?: UuidWithAggregatesFilter<\"discussionboard_post_attachment\"> | string\n    file_url?: StringWithAggregatesFilter<\"discussionboard_post_attachment\"> | string\n    file_type?: StringWithAggregatesFilter<\"discussionboard_post_attachment\"> | string\n    uploaded_at?: DateTimeWithAggregatesFilter<\"discussionboard_post_attachment\"> | Date | string\n  }\n\n  export type discussionboard_commentsWhereInput = {\n    AND?: discussionboard_commentsWhereInput | discussionboard_commentsWhereInput[]\n    OR?: discussionboard_commentsWhereInput[]\n    NOT?: discussionboard_commentsWhereInput | discussionboard_commentsWhereInput[]\n    id?: UuidFilter<\"discussionboard_comments\"> | string\n    post_id?: UuidFilter<\"discussionboard_comments\"> | string\n    author_id?: UuidFilter<\"discussionboard_comments\"> | string\n    parent_comment_id?: UuidNullableFilter<\"discussionboard_comments\"> | string | null\n    content?: StringFilter<\"discussionboard_comments\"> | string\n    is_edited?: BoolFilter<\"discussionboard_comments\"> | boolean\n    is_deleted?: BoolFilter<\"discussionboard_comments\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_comments\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_comments\"> | Date | string\n    post?: XOR<Discussionboard_postScalarRelationFilter, discussionboard_postWhereInput>\n    author?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    parent_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    recursive?: Discussionboard_commentsListRelationFilter\n    discussionboard_likes?: Discussionboard_likesListRelationFilter\n    discussionboard_reports?: Discussionboard_reportsListRelationFilter\n    discussionboard_moderation_action?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n    discussionboard_warning?: Discussionboard_warningListRelationFilter\n    discussionboard_notification?: Discussionboard_notificationListRelationFilter\n  }\n\n  export type discussionboard_commentsOrderByWithRelationInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    author_id?: SortOrder\n    parent_comment_id?: SortOrderInput | SortOrder\n    content?: SortOrder\n    is_edited?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    post?: discussionboard_postOrderByWithRelationInput\n    author?: discussionboard_userOrderByWithRelationInput\n    parent_comment?: discussionboard_commentsOrderByWithRelationInput\n    recursive?: discussionboard_commentsOrderByRelationAggregateInput\n    discussionboard_likes?: discussionboard_likesOrderByRelationAggregateInput\n    discussionboard_reports?: discussionboard_reportsOrderByRelationAggregateInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionOrderByRelationAggregateInput\n    discussionboard_report_review?: discussionboard_report_reviewOrderByRelationAggregateInput\n    discussionboard_warning?: discussionboard_warningOrderByRelationAggregateInput\n    discussionboard_notification?: discussionboard_notificationOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_commentsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussionboard_commentsWhereInput | discussionboard_commentsWhereInput[]\n    OR?: discussionboard_commentsWhereInput[]\n    NOT?: discussionboard_commentsWhereInput | discussionboard_commentsWhereInput[]\n    post_id?: UuidFilter<\"discussionboard_comments\"> | string\n    author_id?: UuidFilter<\"discussionboard_comments\"> | string\n    parent_comment_id?: UuidNullableFilter<\"discussionboard_comments\"> | string | null\n    content?: StringFilter<\"discussionboard_comments\"> | string\n    is_edited?: BoolFilter<\"discussionboard_comments\"> | boolean\n    is_deleted?: BoolFilter<\"discussionboard_comments\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_comments\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_comments\"> | Date | string\n    post?: XOR<Discussionboard_postScalarRelationFilter, discussionboard_postWhereInput>\n    author?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    parent_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    recursive?: Discussionboard_commentsListRelationFilter\n    discussionboard_likes?: Discussionboard_likesListRelationFilter\n    discussionboard_reports?: Discussionboard_reportsListRelationFilter\n    discussionboard_moderation_action?: Discussionboard_moderation_actionListRelationFilter\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n    discussionboard_warning?: Discussionboard_warningListRelationFilter\n    discussionboard_notification?: Discussionboard_notificationListRelationFilter\n  }, \"id\">\n\n  export type discussionboard_commentsOrderByWithAggregationInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    author_id?: SortOrder\n    parent_comment_id?: SortOrderInput | SortOrder\n    content?: SortOrder\n    is_edited?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussionboard_commentsCountOrderByAggregateInput\n    _max?: discussionboard_commentsMaxOrderByAggregateInput\n    _min?: discussionboard_commentsMinOrderByAggregateInput\n  }\n\n  export type discussionboard_commentsScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_commentsScalarWhereWithAggregatesInput | discussionboard_commentsScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_commentsScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_commentsScalarWhereWithAggregatesInput | discussionboard_commentsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_comments\"> | string\n    post_id?: UuidWithAggregatesFilter<\"discussionboard_comments\"> | string\n    author_id?: UuidWithAggregatesFilter<\"discussionboard_comments\"> | string\n    parent_comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_comments\"> | string | null\n    content?: StringWithAggregatesFilter<\"discussionboard_comments\"> | string\n    is_edited?: BoolWithAggregatesFilter<\"discussionboard_comments\"> | boolean\n    is_deleted?: BoolWithAggregatesFilter<\"discussionboard_comments\"> | boolean\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_comments\"> | Date | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussionboard_comments\"> | Date | string\n  }\n\n  export type discussionboard_likesWhereInput = {\n    AND?: discussionboard_likesWhereInput | discussionboard_likesWhereInput[]\n    OR?: discussionboard_likesWhereInput[]\n    NOT?: discussionboard_likesWhereInput | discussionboard_likesWhereInput[]\n    id?: UuidFilter<\"discussionboard_likes\"> | string\n    user_id?: UuidFilter<\"discussionboard_likes\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_likes\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_likes\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_likes\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_likes\"> | Date | string | null\n    user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n  }\n\n  export type discussionboard_likesOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    user?: discussionboard_userOrderByWithRelationInput\n    post?: discussionboard_postOrderByWithRelationInput\n    comment?: discussionboard_commentsOrderByWithRelationInput\n  }\n\n  export type discussionboard_likesWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id_post_id?: discussionboard_likesUser_idPost_idCompoundUniqueInput\n    user_id_comment_id?: discussionboard_likesUser_idComment_idCompoundUniqueInput\n    AND?: discussionboard_likesWhereInput | discussionboard_likesWhereInput[]\n    OR?: discussionboard_likesWhereInput[]\n    NOT?: discussionboard_likesWhereInput | discussionboard_likesWhereInput[]\n    user_id?: UuidFilter<\"discussionboard_likes\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_likes\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_likes\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_likes\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_likes\"> | Date | string | null\n    user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n  }, \"id\" | \"user_id_post_id\" | \"user_id_comment_id\">\n\n  export type discussionboard_likesOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussionboard_likesCountOrderByAggregateInput\n    _max?: discussionboard_likesMaxOrderByAggregateInput\n    _min?: discussionboard_likesMinOrderByAggregateInput\n  }\n\n  export type discussionboard_likesScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_likesScalarWhereWithAggregatesInput | discussionboard_likesScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_likesScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_likesScalarWhereWithAggregatesInput | discussionboard_likesScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_likes\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_likes\"> | string\n    post_id?: UuidNullableWithAggregatesFilter<\"discussionboard_likes\"> | string | null\n    comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_likes\"> | string | null\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_likes\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussionboard_likes\"> | Date | string | null\n  }\n\n  export type discussionboard_reportsWhereInput = {\n    AND?: discussionboard_reportsWhereInput | discussionboard_reportsWhereInput[]\n    OR?: discussionboard_reportsWhereInput[]\n    NOT?: discussionboard_reportsWhereInput | discussionboard_reportsWhereInput[]\n    id?: UuidFilter<\"discussionboard_reports\"> | string\n    user_id?: UuidFilter<\"discussionboard_reports\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_reports\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_reports\"> | string | null\n    reason_code?: StringFilter<\"discussionboard_reports\"> | string\n    reason_details?: StringNullableFilter<\"discussionboard_reports\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_reports\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_reports\"> | Date | string | null\n    user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n  }\n\n  export type discussionboard_reportsOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    reason_code?: SortOrder\n    reason_details?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    user?: discussionboard_userOrderByWithRelationInput\n    post?: discussionboard_postOrderByWithRelationInput\n    comment?: discussionboard_commentsOrderByWithRelationInput\n    discussionboard_report_review?: discussionboard_report_reviewOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_reportsWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id_post_id?: discussionboard_reportsUser_idPost_idCompoundUniqueInput\n    user_id_comment_id?: discussionboard_reportsUser_idComment_idCompoundUniqueInput\n    AND?: discussionboard_reportsWhereInput | discussionboard_reportsWhereInput[]\n    OR?: discussionboard_reportsWhereInput[]\n    NOT?: discussionboard_reportsWhereInput | discussionboard_reportsWhereInput[]\n    user_id?: UuidFilter<\"discussionboard_reports\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_reports\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_reports\"> | string | null\n    reason_code?: StringFilter<\"discussionboard_reports\"> | string\n    reason_details?: StringNullableFilter<\"discussionboard_reports\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_reports\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_reports\"> | Date | string | null\n    user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    discussionboard_report_review?: Discussionboard_report_reviewListRelationFilter\n  }, \"id\" | \"user_id_post_id\" | \"user_id_comment_id\">\n\n  export type discussionboard_reportsOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    reason_code?: SortOrder\n    reason_details?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrderInput | SortOrder\n    _count?: discussionboard_reportsCountOrderByAggregateInput\n    _max?: discussionboard_reportsMaxOrderByAggregateInput\n    _min?: discussionboard_reportsMinOrderByAggregateInput\n  }\n\n  export type discussionboard_reportsScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_reportsScalarWhereWithAggregatesInput | discussionboard_reportsScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_reportsScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_reportsScalarWhereWithAggregatesInput | discussionboard_reportsScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_reports\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_reports\"> | string\n    post_id?: UuidNullableWithAggregatesFilter<\"discussionboard_reports\"> | string | null\n    comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_reports\"> | string | null\n    reason_code?: StringWithAggregatesFilter<\"discussionboard_reports\"> | string\n    reason_details?: StringNullableWithAggregatesFilter<\"discussionboard_reports\"> | string | null\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_reports\"> | Date | string\n    deleted_at?: DateTimeNullableWithAggregatesFilter<\"discussionboard_reports\"> | Date | string | null\n  }\n\n  export type discussionboard_moderation_actionWhereInput = {\n    AND?: discussionboard_moderation_actionWhereInput | discussionboard_moderation_actionWhereInput[]\n    OR?: discussionboard_moderation_actionWhereInput[]\n    NOT?: discussionboard_moderation_actionWhereInput | discussionboard_moderation_actionWhereInput[]\n    id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    actor_id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    target_user_id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_moderation_action\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_moderation_action\"> | string | null\n    action_type?: StringFilter<\"discussionboard_moderation_action\"> | string\n    reason?: StringFilter<\"discussionboard_moderation_action\"> | string\n    created_at?: DateTimeFilter<\"discussionboard_moderation_action\"> | Date | string\n    actor?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    target_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    moderated_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    moderated_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n  }\n\n  export type discussionboard_moderation_actionOrderByWithRelationInput = {\n    id?: SortOrder\n    actor_id?: SortOrder\n    target_user_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    action_type?: SortOrder\n    reason?: SortOrder\n    created_at?: SortOrder\n    actor?: discussionboard_userOrderByWithRelationInput\n    target_user?: discussionboard_userOrderByWithRelationInput\n    moderated_post?: discussionboard_postOrderByWithRelationInput\n    moderated_comment?: discussionboard_commentsOrderByWithRelationInput\n  }\n\n  export type discussionboard_moderation_actionWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussionboard_moderation_actionWhereInput | discussionboard_moderation_actionWhereInput[]\n    OR?: discussionboard_moderation_actionWhereInput[]\n    NOT?: discussionboard_moderation_actionWhereInput | discussionboard_moderation_actionWhereInput[]\n    actor_id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    target_user_id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_moderation_action\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_moderation_action\"> | string | null\n    action_type?: StringFilter<\"discussionboard_moderation_action\"> | string\n    reason?: StringFilter<\"discussionboard_moderation_action\"> | string\n    created_at?: DateTimeFilter<\"discussionboard_moderation_action\"> | Date | string\n    actor?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    target_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    moderated_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    moderated_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n  }, \"id\">\n\n  export type discussionboard_moderation_actionOrderByWithAggregationInput = {\n    id?: SortOrder\n    actor_id?: SortOrder\n    target_user_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    action_type?: SortOrder\n    reason?: SortOrder\n    created_at?: SortOrder\n    _count?: discussionboard_moderation_actionCountOrderByAggregateInput\n    _max?: discussionboard_moderation_actionMaxOrderByAggregateInput\n    _min?: discussionboard_moderation_actionMinOrderByAggregateInput\n  }\n\n  export type discussionboard_moderation_actionScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_moderation_actionScalarWhereWithAggregatesInput | discussionboard_moderation_actionScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_moderation_actionScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_moderation_actionScalarWhereWithAggregatesInput | discussionboard_moderation_actionScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_moderation_action\"> | string\n    actor_id?: UuidWithAggregatesFilter<\"discussionboard_moderation_action\"> | string\n    target_user_id?: UuidWithAggregatesFilter<\"discussionboard_moderation_action\"> | string\n    post_id?: UuidNullableWithAggregatesFilter<\"discussionboard_moderation_action\"> | string | null\n    comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_moderation_action\"> | string | null\n    action_type?: StringWithAggregatesFilter<\"discussionboard_moderation_action\"> | string\n    reason?: StringWithAggregatesFilter<\"discussionboard_moderation_action\"> | string\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_moderation_action\"> | Date | string\n  }\n\n  export type discussionboard_report_reviewWhereInput = {\n    AND?: discussionboard_report_reviewWhereInput | discussionboard_report_reviewWhereInput[]\n    OR?: discussionboard_report_reviewWhereInput[]\n    NOT?: discussionboard_report_reviewWhereInput | discussionboard_report_reviewWhereInput[]\n    id?: UuidFilter<\"discussionboard_report_review\"> | string\n    report_id?: UuidFilter<\"discussionboard_report_review\"> | string\n    reviewer_id?: UuidFilter<\"discussionboard_report_review\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_report_review\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_report_review\"> | string | null\n    review_status?: StringFilter<\"discussionboard_report_review\"> | string\n    moderator_comment?: StringNullableFilter<\"discussionboard_report_review\"> | string | null\n    reviewed_at?: DateTimeFilter<\"discussionboard_report_review\"> | Date | string\n    report?: XOR<Discussionboard_reportsScalarRelationFilter, discussionboard_reportsWhereInput>\n    reviewer?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    reviewed_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    reviewed_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n  }\n\n  export type discussionboard_report_reviewOrderByWithRelationInput = {\n    id?: SortOrder\n    report_id?: SortOrder\n    reviewer_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    review_status?: SortOrder\n    moderator_comment?: SortOrderInput | SortOrder\n    reviewed_at?: SortOrder\n    report?: discussionboard_reportsOrderByWithRelationInput\n    reviewer?: discussionboard_userOrderByWithRelationInput\n    reviewed_post?: discussionboard_postOrderByWithRelationInput\n    reviewed_comment?: discussionboard_commentsOrderByWithRelationInput\n  }\n\n  export type discussionboard_report_reviewWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    report_id?: string\n    AND?: discussionboard_report_reviewWhereInput | discussionboard_report_reviewWhereInput[]\n    OR?: discussionboard_report_reviewWhereInput[]\n    NOT?: discussionboard_report_reviewWhereInput | discussionboard_report_reviewWhereInput[]\n    reviewer_id?: UuidFilter<\"discussionboard_report_review\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_report_review\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_report_review\"> | string | null\n    review_status?: StringFilter<\"discussionboard_report_review\"> | string\n    moderator_comment?: StringNullableFilter<\"discussionboard_report_review\"> | string | null\n    reviewed_at?: DateTimeFilter<\"discussionboard_report_review\"> | Date | string\n    report?: XOR<Discussionboard_reportsScalarRelationFilter, discussionboard_reportsWhereInput>\n    reviewer?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    reviewed_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    reviewed_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n  }, \"id\" | \"report_id\">\n\n  export type discussionboard_report_reviewOrderByWithAggregationInput = {\n    id?: SortOrder\n    report_id?: SortOrder\n    reviewer_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    review_status?: SortOrder\n    moderator_comment?: SortOrderInput | SortOrder\n    reviewed_at?: SortOrder\n    _count?: discussionboard_report_reviewCountOrderByAggregateInput\n    _max?: discussionboard_report_reviewMaxOrderByAggregateInput\n    _min?: discussionboard_report_reviewMinOrderByAggregateInput\n  }\n\n  export type discussionboard_report_reviewScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_report_reviewScalarWhereWithAggregatesInput | discussionboard_report_reviewScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_report_reviewScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_report_reviewScalarWhereWithAggregatesInput | discussionboard_report_reviewScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_report_review\"> | string\n    report_id?: UuidWithAggregatesFilter<\"discussionboard_report_review\"> | string\n    reviewer_id?: UuidWithAggregatesFilter<\"discussionboard_report_review\"> | string\n    post_id?: UuidNullableWithAggregatesFilter<\"discussionboard_report_review\"> | string | null\n    comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_report_review\"> | string | null\n    review_status?: StringWithAggregatesFilter<\"discussionboard_report_review\"> | string\n    moderator_comment?: StringNullableWithAggregatesFilter<\"discussionboard_report_review\"> | string | null\n    reviewed_at?: DateTimeWithAggregatesFilter<\"discussionboard_report_review\"> | Date | string\n  }\n\n  export type discussionboard_warningWhereInput = {\n    AND?: discussionboard_warningWhereInput | discussionboard_warningWhereInput[]\n    OR?: discussionboard_warningWhereInput[]\n    NOT?: discussionboard_warningWhereInput | discussionboard_warningWhereInput[]\n    id?: UuidFilter<\"discussionboard_warning\"> | string\n    issued_by_id?: UuidFilter<\"discussionboard_warning\"> | string\n    issued_to_id?: UuidFilter<\"discussionboard_warning\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_warning\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_warning\"> | string | null\n    warning_type?: StringFilter<\"discussionboard_warning\"> | string\n    message?: StringFilter<\"discussionboard_warning\"> | string\n    issued_at?: DateTimeFilter<\"discussionboard_warning\"> | Date | string\n    issuer?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    recipient?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    warning_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    warning_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    discussionboard_ban?: Discussionboard_banListRelationFilter\n  }\n\n  export type discussionboard_warningOrderByWithRelationInput = {\n    id?: SortOrder\n    issued_by_id?: SortOrder\n    issued_to_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    warning_type?: SortOrder\n    message?: SortOrder\n    issued_at?: SortOrder\n    issuer?: discussionboard_userOrderByWithRelationInput\n    recipient?: discussionboard_userOrderByWithRelationInput\n    warning_post?: discussionboard_postOrderByWithRelationInput\n    warning_comment?: discussionboard_commentsOrderByWithRelationInput\n    discussionboard_ban?: discussionboard_banOrderByRelationAggregateInput\n  }\n\n  export type discussionboard_warningWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussionboard_warningWhereInput | discussionboard_warningWhereInput[]\n    OR?: discussionboard_warningWhereInput[]\n    NOT?: discussionboard_warningWhereInput | discussionboard_warningWhereInput[]\n    issued_by_id?: UuidFilter<\"discussionboard_warning\"> | string\n    issued_to_id?: UuidFilter<\"discussionboard_warning\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_warning\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_warning\"> | string | null\n    warning_type?: StringFilter<\"discussionboard_warning\"> | string\n    message?: StringFilter<\"discussionboard_warning\"> | string\n    issued_at?: DateTimeFilter<\"discussionboard_warning\"> | Date | string\n    issuer?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    recipient?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    warning_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    warning_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    discussionboard_ban?: Discussionboard_banListRelationFilter\n  }, \"id\">\n\n  export type discussionboard_warningOrderByWithAggregationInput = {\n    id?: SortOrder\n    issued_by_id?: SortOrder\n    issued_to_id?: SortOrder\n    post_id?: SortOrderInput | SortOrder\n    comment_id?: SortOrderInput | SortOrder\n    warning_type?: SortOrder\n    message?: SortOrder\n    issued_at?: SortOrder\n    _count?: discussionboard_warningCountOrderByAggregateInput\n    _max?: discussionboard_warningMaxOrderByAggregateInput\n    _min?: discussionboard_warningMinOrderByAggregateInput\n  }\n\n  export type discussionboard_warningScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_warningScalarWhereWithAggregatesInput | discussionboard_warningScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_warningScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_warningScalarWhereWithAggregatesInput | discussionboard_warningScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_warning\"> | string\n    issued_by_id?: UuidWithAggregatesFilter<\"discussionboard_warning\"> | string\n    issued_to_id?: UuidWithAggregatesFilter<\"discussionboard_warning\"> | string\n    post_id?: UuidNullableWithAggregatesFilter<\"discussionboard_warning\"> | string | null\n    comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_warning\"> | string | null\n    warning_type?: StringWithAggregatesFilter<\"discussionboard_warning\"> | string\n    message?: StringWithAggregatesFilter<\"discussionboard_warning\"> | string\n    issued_at?: DateTimeWithAggregatesFilter<\"discussionboard_warning\"> | Date | string\n  }\n\n  export type discussionboard_banWhereInput = {\n    AND?: discussionboard_banWhereInput | discussionboard_banWhereInput[]\n    OR?: discussionboard_banWhereInput[]\n    NOT?: discussionboard_banWhereInput | discussionboard_banWhereInput[]\n    id?: UuidFilter<\"discussionboard_ban\"> | string\n    banned_user_id?: UuidFilter<\"discussionboard_ban\"> | string\n    banned_by_id?: UuidFilter<\"discussionboard_ban\"> | string\n    warning_id?: UuidNullableFilter<\"discussionboard_ban\"> | string | null\n    ban_type?: StringFilter<\"discussionboard_ban\"> | string\n    reason?: StringFilter<\"discussionboard_ban\"> | string\n    issued_at?: DateTimeFilter<\"discussionboard_ban\"> | Date | string\n    expires_at?: DateTimeNullableFilter<\"discussionboard_ban\"> | Date | string | null\n    banned_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    ban_actor?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    related_warning?: XOR<Discussionboard_warningNullableScalarRelationFilter, discussionboard_warningWhereInput> | null\n  }\n\n  export type discussionboard_banOrderByWithRelationInput = {\n    id?: SortOrder\n    banned_user_id?: SortOrder\n    banned_by_id?: SortOrder\n    warning_id?: SortOrderInput | SortOrder\n    ban_type?: SortOrder\n    reason?: SortOrder\n    issued_at?: SortOrder\n    expires_at?: SortOrderInput | SortOrder\n    banned_user?: discussionboard_userOrderByWithRelationInput\n    ban_actor?: discussionboard_userOrderByWithRelationInput\n    related_warning?: discussionboard_warningOrderByWithRelationInput\n  }\n\n  export type discussionboard_banWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussionboard_banWhereInput | discussionboard_banWhereInput[]\n    OR?: discussionboard_banWhereInput[]\n    NOT?: discussionboard_banWhereInput | discussionboard_banWhereInput[]\n    banned_user_id?: UuidFilter<\"discussionboard_ban\"> | string\n    banned_by_id?: UuidFilter<\"discussionboard_ban\"> | string\n    warning_id?: UuidNullableFilter<\"discussionboard_ban\"> | string | null\n    ban_type?: StringFilter<\"discussionboard_ban\"> | string\n    reason?: StringFilter<\"discussionboard_ban\"> | string\n    issued_at?: DateTimeFilter<\"discussionboard_ban\"> | Date | string\n    expires_at?: DateTimeNullableFilter<\"discussionboard_ban\"> | Date | string | null\n    banned_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    ban_actor?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    related_warning?: XOR<Discussionboard_warningNullableScalarRelationFilter, discussionboard_warningWhereInput> | null\n  }, \"id\">\n\n  export type discussionboard_banOrderByWithAggregationInput = {\n    id?: SortOrder\n    banned_user_id?: SortOrder\n    banned_by_id?: SortOrder\n    warning_id?: SortOrderInput | SortOrder\n    ban_type?: SortOrder\n    reason?: SortOrder\n    issued_at?: SortOrder\n    expires_at?: SortOrderInput | SortOrder\n    _count?: discussionboard_banCountOrderByAggregateInput\n    _max?: discussionboard_banMaxOrderByAggregateInput\n    _min?: discussionboard_banMinOrderByAggregateInput\n  }\n\n  export type discussionboard_banScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_banScalarWhereWithAggregatesInput | discussionboard_banScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_banScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_banScalarWhereWithAggregatesInput | discussionboard_banScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_ban\"> | string\n    banned_user_id?: UuidWithAggregatesFilter<\"discussionboard_ban\"> | string\n    banned_by_id?: UuidWithAggregatesFilter<\"discussionboard_ban\"> | string\n    warning_id?: UuidNullableWithAggregatesFilter<\"discussionboard_ban\"> | string | null\n    ban_type?: StringWithAggregatesFilter<\"discussionboard_ban\"> | string\n    reason?: StringWithAggregatesFilter<\"discussionboard_ban\"> | string\n    issued_at?: DateTimeWithAggregatesFilter<\"discussionboard_ban\"> | Date | string\n    expires_at?: DateTimeNullableWithAggregatesFilter<\"discussionboard_ban\"> | Date | string | null\n  }\n\n  export type discussionboard_notificationWhereInput = {\n    AND?: discussionboard_notificationWhereInput | discussionboard_notificationWhereInput[]\n    OR?: discussionboard_notificationWhereInput[]\n    NOT?: discussionboard_notificationWhereInput | discussionboard_notificationWhereInput[]\n    id?: UuidFilter<\"discussionboard_notification\"> | string\n    recipient_user_id?: UuidFilter<\"discussionboard_notification\"> | string\n    related_post_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    related_comment_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    actor_user_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    type?: StringFilter<\"discussionboard_notification\"> | string\n    message?: StringFilter<\"discussionboard_notification\"> | string\n    is_read?: BoolFilter<\"discussionboard_notification\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_notification\"> | Date | string\n    recipient_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    related_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    related_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    actor_user?: XOR<Discussionboard_userNullableScalarRelationFilter, discussionboard_userWhereInput> | null\n  }\n\n  export type discussionboard_notificationOrderByWithRelationInput = {\n    id?: SortOrder\n    recipient_user_id?: SortOrder\n    related_post_id?: SortOrderInput | SortOrder\n    related_comment_id?: SortOrderInput | SortOrder\n    actor_user_id?: SortOrderInput | SortOrder\n    type?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    recipient_user?: discussionboard_userOrderByWithRelationInput\n    related_post?: discussionboard_postOrderByWithRelationInput\n    related_comment?: discussionboard_commentsOrderByWithRelationInput\n    actor_user?: discussionboard_userOrderByWithRelationInput\n  }\n\n  export type discussionboard_notificationWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    recipient_user_id_type_related_post_id_related_comment_id_actor_user_id_created_at?: discussionboard_notificationRecipient_user_idTypeRelated_post_idRelated_comment_idActor_user_idCreated_atCompoundUniqueInput\n    AND?: discussionboard_notificationWhereInput | discussionboard_notificationWhereInput[]\n    OR?: discussionboard_notificationWhereInput[]\n    NOT?: discussionboard_notificationWhereInput | discussionboard_notificationWhereInput[]\n    recipient_user_id?: UuidFilter<\"discussionboard_notification\"> | string\n    related_post_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    related_comment_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    actor_user_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    type?: StringFilter<\"discussionboard_notification\"> | string\n    message?: StringFilter<\"discussionboard_notification\"> | string\n    is_read?: BoolFilter<\"discussionboard_notification\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_notification\"> | Date | string\n    recipient_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    related_post?: XOR<Discussionboard_postNullableScalarRelationFilter, discussionboard_postWhereInput> | null\n    related_comment?: XOR<Discussionboard_commentsNullableScalarRelationFilter, discussionboard_commentsWhereInput> | null\n    actor_user?: XOR<Discussionboard_userNullableScalarRelationFilter, discussionboard_userWhereInput> | null\n  }, \"id\" | \"recipient_user_id_type_related_post_id_related_comment_id_actor_user_id_created_at\">\n\n  export type discussionboard_notificationOrderByWithAggregationInput = {\n    id?: SortOrder\n    recipient_user_id?: SortOrder\n    related_post_id?: SortOrderInput | SortOrder\n    related_comment_id?: SortOrderInput | SortOrder\n    actor_user_id?: SortOrderInput | SortOrder\n    type?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n    _count?: discussionboard_notificationCountOrderByAggregateInput\n    _max?: discussionboard_notificationMaxOrderByAggregateInput\n    _min?: discussionboard_notificationMinOrderByAggregateInput\n  }\n\n  export type discussionboard_notificationScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_notificationScalarWhereWithAggregatesInput | discussionboard_notificationScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_notificationScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_notificationScalarWhereWithAggregatesInput | discussionboard_notificationScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_notification\"> | string\n    recipient_user_id?: UuidWithAggregatesFilter<\"discussionboard_notification\"> | string\n    related_post_id?: UuidNullableWithAggregatesFilter<\"discussionboard_notification\"> | string | null\n    related_comment_id?: UuidNullableWithAggregatesFilter<\"discussionboard_notification\"> | string | null\n    actor_user_id?: UuidNullableWithAggregatesFilter<\"discussionboard_notification\"> | string | null\n    type?: StringWithAggregatesFilter<\"discussionboard_notification\"> | string\n    message?: StringWithAggregatesFilter<\"discussionboard_notification\"> | string\n    is_read?: BoolWithAggregatesFilter<\"discussionboard_notification\"> | boolean\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_notification\"> | Date | string\n  }\n\n  export type discussionboard_notification_preferenceWhereInput = {\n    AND?: discussionboard_notification_preferenceWhereInput | discussionboard_notification_preferenceWhereInput[]\n    OR?: discussionboard_notification_preferenceWhereInput[]\n    NOT?: discussionboard_notification_preferenceWhereInput | discussionboard_notification_preferenceWhereInput[]\n    id?: UuidFilter<\"discussionboard_notification_preference\"> | string\n    user_id?: UuidFilter<\"discussionboard_notification_preference\"> | string\n    notify_reply?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_like?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_moderator_action?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_system_message?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }\n\n  export type discussionboard_notification_preferenceOrderByWithRelationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    notify_reply?: SortOrder\n    notify_like?: SortOrder\n    notify_moderator_action?: SortOrder\n    notify_system_message?: SortOrder\n    user?: discussionboard_userOrderByWithRelationInput\n  }\n\n  export type discussionboard_notification_preferenceWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    user_id?: string\n    AND?: discussionboard_notification_preferenceWhereInput | discussionboard_notification_preferenceWhereInput[]\n    OR?: discussionboard_notification_preferenceWhereInput[]\n    NOT?: discussionboard_notification_preferenceWhereInput | discussionboard_notification_preferenceWhereInput[]\n    notify_reply?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_like?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_moderator_action?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_system_message?: BoolFilter<\"discussionboard_notification_preference\"> | boolean\n    user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n  }, \"id\" | \"user_id\">\n\n  export type discussionboard_notification_preferenceOrderByWithAggregationInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    notify_reply?: SortOrder\n    notify_like?: SortOrder\n    notify_moderator_action?: SortOrder\n    notify_system_message?: SortOrder\n    _count?: discussionboard_notification_preferenceCountOrderByAggregateInput\n    _max?: discussionboard_notification_preferenceMaxOrderByAggregateInput\n    _min?: discussionboard_notification_preferenceMinOrderByAggregateInput\n  }\n\n  export type discussionboard_notification_preferenceScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_notification_preferenceScalarWhereWithAggregatesInput | discussionboard_notification_preferenceScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_notification_preferenceScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_notification_preferenceScalarWhereWithAggregatesInput | discussionboard_notification_preferenceScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_notification_preference\"> | string\n    user_id?: UuidWithAggregatesFilter<\"discussionboard_notification_preference\"> | string\n    notify_reply?: BoolWithAggregatesFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_like?: BoolWithAggregatesFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_moderator_action?: BoolWithAggregatesFilter<\"discussionboard_notification_preference\"> | boolean\n    notify_system_message?: BoolWithAggregatesFilter<\"discussionboard_notification_preference\"> | boolean\n  }\n\n  export type discussionboard_audit_logWhereInput = {\n    AND?: discussionboard_audit_logWhereInput | discussionboard_audit_logWhereInput[]\n    OR?: discussionboard_audit_logWhereInput[]\n    NOT?: discussionboard_audit_logWhereInput | discussionboard_audit_logWhereInput[]\n    id?: UuidFilter<\"discussionboard_audit_log\"> | string\n    actor_user_id?: UuidFilter<\"discussionboard_audit_log\"> | string\n    target_user_id?: UuidNullableFilter<\"discussionboard_audit_log\"> | string | null\n    action_type?: StringFilter<\"discussionboard_audit_log\"> | string\n    entity_type?: StringFilter<\"discussionboard_audit_log\"> | string\n    entity_id?: UuidNullableFilter<\"discussionboard_audit_log\"> | string | null\n    action_detail?: StringNullableFilter<\"discussionboard_audit_log\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_audit_log\"> | Date | string\n    fk_audit_actor_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    fk_audit_target_user?: XOR<Discussionboard_userNullableScalarRelationFilter, discussionboard_userWhereInput> | null\n  }\n\n  export type discussionboard_audit_logOrderByWithRelationInput = {\n    id?: SortOrder\n    actor_user_id?: SortOrder\n    target_user_id?: SortOrderInput | SortOrder\n    action_type?: SortOrder\n    entity_type?: SortOrder\n    entity_id?: SortOrderInput | SortOrder\n    action_detail?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    fk_audit_actor_user?: discussionboard_userOrderByWithRelationInput\n    fk_audit_target_user?: discussionboard_userOrderByWithRelationInput\n  }\n\n  export type discussionboard_audit_logWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    AND?: discussionboard_audit_logWhereInput | discussionboard_audit_logWhereInput[]\n    OR?: discussionboard_audit_logWhereInput[]\n    NOT?: discussionboard_audit_logWhereInput | discussionboard_audit_logWhereInput[]\n    actor_user_id?: UuidFilter<\"discussionboard_audit_log\"> | string\n    target_user_id?: UuidNullableFilter<\"discussionboard_audit_log\"> | string | null\n    action_type?: StringFilter<\"discussionboard_audit_log\"> | string\n    entity_type?: StringFilter<\"discussionboard_audit_log\"> | string\n    entity_id?: UuidNullableFilter<\"discussionboard_audit_log\"> | string | null\n    action_detail?: StringNullableFilter<\"discussionboard_audit_log\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_audit_log\"> | Date | string\n    fk_audit_actor_user?: XOR<Discussionboard_userScalarRelationFilter, discussionboard_userWhereInput>\n    fk_audit_target_user?: XOR<Discussionboard_userNullableScalarRelationFilter, discussionboard_userWhereInput> | null\n  }, \"id\">\n\n  export type discussionboard_audit_logOrderByWithAggregationInput = {\n    id?: SortOrder\n    actor_user_id?: SortOrder\n    target_user_id?: SortOrderInput | SortOrder\n    action_type?: SortOrder\n    entity_type?: SortOrder\n    entity_id?: SortOrderInput | SortOrder\n    action_detail?: SortOrderInput | SortOrder\n    created_at?: SortOrder\n    _count?: discussionboard_audit_logCountOrderByAggregateInput\n    _max?: discussionboard_audit_logMaxOrderByAggregateInput\n    _min?: discussionboard_audit_logMinOrderByAggregateInput\n  }\n\n  export type discussionboard_audit_logScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_audit_logScalarWhereWithAggregatesInput | discussionboard_audit_logScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_audit_logScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_audit_logScalarWhereWithAggregatesInput | discussionboard_audit_logScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_audit_log\"> | string\n    actor_user_id?: UuidWithAggregatesFilter<\"discussionboard_audit_log\"> | string\n    target_user_id?: UuidNullableWithAggregatesFilter<\"discussionboard_audit_log\"> | string | null\n    action_type?: StringWithAggregatesFilter<\"discussionboard_audit_log\"> | string\n    entity_type?: StringWithAggregatesFilter<\"discussionboard_audit_log\"> | string\n    entity_id?: UuidNullableWithAggregatesFilter<\"discussionboard_audit_log\"> | string | null\n    action_detail?: StringNullableWithAggregatesFilter<\"discussionboard_audit_log\"> | string | null\n    created_at?: DateTimeWithAggregatesFilter<\"discussionboard_audit_log\"> | Date | string\n  }\n\n  export type discussionboard_platform_settingWhereInput = {\n    AND?: discussionboard_platform_settingWhereInput | discussionboard_platform_settingWhereInput[]\n    OR?: discussionboard_platform_settingWhereInput[]\n    NOT?: discussionboard_platform_settingWhereInput | discussionboard_platform_settingWhereInput[]\n    id?: UuidFilter<\"discussionboard_platform_setting\"> | string\n    name?: StringFilter<\"discussionboard_platform_setting\"> | string\n    value?: StringFilter<\"discussionboard_platform_setting\"> | string\n    type?: StringFilter<\"discussionboard_platform_setting\"> | string\n    updated_at?: DateTimeFilter<\"discussionboard_platform_setting\"> | Date | string\n  }\n\n  export type discussionboard_platform_settingOrderByWithRelationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    value?: SortOrder\n    type?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_platform_settingWhereUniqueInput = Prisma.AtLeast<{\n    id?: string\n    name?: string\n    AND?: discussionboard_platform_settingWhereInput | discussionboard_platform_settingWhereInput[]\n    OR?: discussionboard_platform_settingWhereInput[]\n    NOT?: discussionboard_platform_settingWhereInput | discussionboard_platform_settingWhereInput[]\n    value?: StringFilter<\"discussionboard_platform_setting\"> | string\n    type?: StringFilter<\"discussionboard_platform_setting\"> | string\n    updated_at?: DateTimeFilter<\"discussionboard_platform_setting\"> | Date | string\n  }, \"id\" | \"name\">\n\n  export type discussionboard_platform_settingOrderByWithAggregationInput = {\n    id?: SortOrder\n    name?: SortOrder\n    value?: SortOrder\n    type?: SortOrder\n    updated_at?: SortOrder\n    _count?: discussionboard_platform_settingCountOrderByAggregateInput\n    _max?: discussionboard_platform_settingMaxOrderByAggregateInput\n    _min?: discussionboard_platform_settingMinOrderByAggregateInput\n  }\n\n  export type discussionboard_platform_settingScalarWhereWithAggregatesInput = {\n    AND?: discussionboard_platform_settingScalarWhereWithAggregatesInput | discussionboard_platform_settingScalarWhereWithAggregatesInput[]\n    OR?: discussionboard_platform_settingScalarWhereWithAggregatesInput[]\n    NOT?: discussionboard_platform_settingScalarWhereWithAggregatesInput | discussionboard_platform_settingScalarWhereWithAggregatesInput[]\n    id?: UuidWithAggregatesFilter<\"discussionboard_platform_setting\"> | string\n    name?: StringWithAggregatesFilter<\"discussionboard_platform_setting\"> | string\n    value?: StringWithAggregatesFilter<\"discussionboard_platform_setting\"> | string\n    type?: StringWithAggregatesFilter<\"discussionboard_platform_setting\"> | string\n    updated_at?: DateTimeWithAggregatesFilter<\"discussionboard_platform_setting\"> | Date | string\n  }\n\n  export type discussionboard_userCreateInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userCreateManyInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_userUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_userUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_user_profileCreateInput = {\n    id: string\n    display_name: string\n    avatar_url?: string | null\n    bio?: string | null\n    user_profile_user_id: discussionboard_userCreateNestedOneWithoutDiscussionboard_user_profileInput\n  }\n\n  export type discussionboard_user_profileUncheckedCreateInput = {\n    id: string\n    user_id: string\n    display_name: string\n    avatar_url?: string | null\n    bio?: string | null\n  }\n\n  export type discussionboard_user_profileUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    display_name?: StringFieldUpdateOperationsInput | string\n    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null\n    bio?: NullableStringFieldUpdateOperationsInput | string | null\n    user_profile_user_id?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_user_profileNestedInput\n  }\n\n  export type discussionboard_user_profileUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    display_name?: StringFieldUpdateOperationsInput | string\n    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null\n    bio?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_user_profileCreateManyInput = {\n    id: string\n    user_id: string\n    display_name: string\n    avatar_url?: string | null\n    bio?: string | null\n  }\n\n  export type discussionboard_user_profileUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    display_name?: StringFieldUpdateOperationsInput | string\n    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null\n    bio?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_user_profileUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    display_name?: StringFieldUpdateOperationsInput | string\n    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null\n    bio?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_memberCreateInput = {\n    id: string\n    granted_at: Date | string\n    member_user_id: discussionboard_userCreateNestedOneWithoutDiscussionboard_memberInput\n    discussionboard_post?: discussionboard_postCreateNestedManyWithoutMemberInput\n  }\n\n  export type discussionboard_memberUncheckedCreateInput = {\n    id: string\n    user_id: string\n    granted_at: Date | string\n    discussionboard_post?: discussionboard_postUncheckedCreateNestedManyWithoutMemberInput\n  }\n\n  export type discussionboard_memberUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    member_user_id?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_memberNestedInput\n    discussionboard_post?: discussionboard_postUpdateManyWithoutMemberNestedInput\n  }\n\n  export type discussionboard_memberUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_post?: discussionboard_postUncheckedUpdateManyWithoutMemberNestedInput\n  }\n\n  export type discussionboard_memberCreateManyInput = {\n    id: string\n    user_id: string\n    granted_at: Date | string\n  }\n\n  export type discussionboard_memberUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_memberUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderatorCreateInput = {\n    id: string\n    assigned_at: Date | string\n    moderator_user_id: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderatorInput\n  }\n\n  export type discussionboard_moderatorUncheckedCreateInput = {\n    id: string\n    user_id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_moderatorUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    moderator_user_id?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderatorNestedInput\n  }\n\n  export type discussionboard_moderatorUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderatorCreateManyInput = {\n    id: string\n    user_id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_moderatorUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderatorUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_adminCreateInput = {\n    id: string\n    assigned_at: Date | string\n    admin_user_id: discussionboard_userCreateNestedOneWithoutDiscussionboard_adminInput\n  }\n\n  export type discussionboard_adminUncheckedCreateInput = {\n    id: string\n    user_id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_adminUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    admin_user_id?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_adminNestedInput\n  }\n\n  export type discussionboard_adminUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_adminCreateManyInput = {\n    id: string\n    user_id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_adminUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_adminUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_postCreateInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postCreateManyInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_postUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_postUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_post_categoryCreateInput = {\n    id: string\n    name: string\n    description?: string | null\n    discussionboard_post?: discussionboard_postCreateNestedManyWithoutCategoryInput\n  }\n\n  export type discussionboard_post_categoryUncheckedCreateInput = {\n    id: string\n    name: string\n    description?: string | null\n    discussionboard_post?: discussionboard_postUncheckedCreateNestedManyWithoutCategoryInput\n  }\n\n  export type discussionboard_post_categoryUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    discussionboard_post?: discussionboard_postUpdateManyWithoutCategoryNestedInput\n  }\n\n  export type discussionboard_post_categoryUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n    discussionboard_post?: discussionboard_postUncheckedUpdateManyWithoutCategoryNestedInput\n  }\n\n  export type discussionboard_post_categoryCreateManyInput = {\n    id: string\n    name: string\n    description?: string | null\n  }\n\n  export type discussionboard_post_categoryUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_post_categoryUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_post_tagCreateInput = {\n    id: string\n    name: string\n  }\n\n  export type discussionboard_post_tagUncheckedCreateInput = {\n    id: string\n    name: string\n  }\n\n  export type discussionboard_post_tagUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n  }\n\n  export type discussionboard_post_tagUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n  }\n\n  export type discussionboard_post_tagCreateManyInput = {\n    id: string\n    name: string\n  }\n\n  export type discussionboard_post_tagUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n  }\n\n  export type discussionboard_post_tagUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n  }\n\n  export type discussionboard_post_attachmentCreateInput = {\n    id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_post_attachmentInput\n  }\n\n  export type discussionboard_post_attachmentUncheckedCreateInput = {\n    id: string\n    post_id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date | string\n  }\n\n  export type discussionboard_post_attachmentUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_post_attachmentNestedInput\n  }\n\n  export type discussionboard_post_attachmentUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_post_attachmentCreateManyInput = {\n    id: string\n    post_id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date | string\n  }\n\n  export type discussionboard_post_attachmentUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_post_attachmentUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_commentsCreateInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsCreateManyInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_commentsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_likesCreateInput = {\n    id: string\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_likesInput\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_likesInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_likesInput\n  }\n\n  export type discussionboard_likesUncheckedCreateInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_likesUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_likesNestedInput\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_likesNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_likesNestedInput\n  }\n\n  export type discussionboard_likesUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_likesCreateManyInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_likesUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_reportsCreateInput = {\n    id: string\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_reportsInput\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_reportsInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_reportsInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsUncheckedCreateInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_reportsNestedInput\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_reportsNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_reportsNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsCreateManyInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_reportsUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_moderation_actionCreateInput = {\n    id: string\n    action_type: string\n    reason: string\n    created_at: Date | string\n    actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_actor_idInput\n    target_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    moderated_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n    moderated_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateInput = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_actor_idNestedInput\n    target_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_target_user_idNestedInput\n    moderated_post?: discussionboard_postUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n    moderated_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionCreateManyInput = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewCreateInput = {\n    id: string\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n    report: discussionboard_reportsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewer: discussionboard_userCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateInput = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    report?: discussionboard_reportsUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_post?: discussionboard_postUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewCreateManyInput = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_warningCreateInput = {\n    id: string\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    issuer: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_by_idInput\n    recipient: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_to_idInput\n    warning_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_warningInput\n    warning_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_warningInput\n    discussionboard_ban?: discussionboard_banCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningUncheckedCreateInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    discussionboard_ban?: discussionboard_banUncheckedCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    issuer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_by_idNestedInput\n    recipient?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_to_idNestedInput\n    warning_post?: discussionboard_postUpdateOneWithoutDiscussionboard_warningNestedInput\n    warning_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_warningNestedInput\n    discussionboard_ban?: discussionboard_banUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_ban?: discussionboard_banUncheckedUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningCreateManyInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n  }\n\n  export type discussionboard_warningUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_banCreateInput = {\n    id: string\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n    banned_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_user_idInput\n    ban_actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_by_idInput\n    related_warning?: discussionboard_warningCreateNestedOneWithoutDiscussionboard_banInput\n  }\n\n  export type discussionboard_banUncheckedCreateInput = {\n    id: string\n    banned_user_id: string\n    banned_by_id: string\n    warning_id?: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    banned_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_user_idNestedInput\n    ban_actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_by_idNestedInput\n    related_warning?: discussionboard_warningUpdateOneWithoutDiscussionboard_banNestedInput\n  }\n\n  export type discussionboard_banUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_user_id?: StringFieldUpdateOperationsInput | string\n    banned_by_id?: StringFieldUpdateOperationsInput | string\n    warning_id?: NullableStringFieldUpdateOperationsInput | string | null\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_banCreateManyInput = {\n    id: string\n    banned_user_id: string\n    banned_by_id: string\n    warning_id?: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_banUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_user_id?: StringFieldUpdateOperationsInput | string\n    banned_by_id?: StringFieldUpdateOperationsInput | string\n    warning_id?: NullableStringFieldUpdateOperationsInput | string | null\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_notificationCreateInput = {\n    id: string\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    recipient_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_recipient_user_idInput\n    related_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_notificationInput\n    related_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_notificationInput\n    actor_user?: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_actor_user_idInput\n  }\n\n  export type discussionboard_notificationUncheckedCreateInput = {\n    id: string\n    recipient_user_id: string\n    related_post_id?: string | null\n    related_comment_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recipient_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_of_recipient_user_idNestedInput\n    related_post?: discussionboard_postUpdateOneWithoutDiscussionboard_notificationNestedInput\n    related_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_notificationNestedInput\n    actor_user?: discussionboard_userUpdateOneWithoutDiscussionboard_notification_of_actor_user_idNestedInput\n  }\n\n  export type discussionboard_notificationUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationCreateManyInput = {\n    id: string\n    recipient_user_id: string\n    related_post_id?: string | null\n    related_comment_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notification_preferenceCreateInput = {\n    id: string\n    notify_reply: boolean\n    notify_like: boolean\n    notify_moderator_action: boolean\n    notify_system_message: boolean\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_preferenceInput\n  }\n\n  export type discussionboard_notification_preferenceUncheckedCreateInput = {\n    id: string\n    user_id: string\n    notify_reply: boolean\n    notify_like: boolean\n    notify_moderator_action: boolean\n    notify_system_message: boolean\n  }\n\n  export type discussionboard_notification_preferenceUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notify_reply?: BoolFieldUpdateOperationsInput | boolean\n    notify_like?: BoolFieldUpdateOperationsInput | boolean\n    notify_moderator_action?: BoolFieldUpdateOperationsInput | boolean\n    notify_system_message?: BoolFieldUpdateOperationsInput | boolean\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_preferenceNestedInput\n  }\n\n  export type discussionboard_notification_preferenceUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    notify_reply?: BoolFieldUpdateOperationsInput | boolean\n    notify_like?: BoolFieldUpdateOperationsInput | boolean\n    notify_moderator_action?: BoolFieldUpdateOperationsInput | boolean\n    notify_system_message?: BoolFieldUpdateOperationsInput | boolean\n  }\n\n  export type discussionboard_notification_preferenceCreateManyInput = {\n    id: string\n    user_id: string\n    notify_reply: boolean\n    notify_like: boolean\n    notify_moderator_action: boolean\n    notify_system_message: boolean\n  }\n\n  export type discussionboard_notification_preferenceUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notify_reply?: BoolFieldUpdateOperationsInput | boolean\n    notify_like?: BoolFieldUpdateOperationsInput | boolean\n    notify_moderator_action?: BoolFieldUpdateOperationsInput | boolean\n    notify_system_message?: BoolFieldUpdateOperationsInput | boolean\n  }\n\n  export type discussionboard_notification_preferenceUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    notify_reply?: BoolFieldUpdateOperationsInput | boolean\n    notify_like?: BoolFieldUpdateOperationsInput | boolean\n    notify_moderator_action?: BoolFieldUpdateOperationsInput | boolean\n    notify_system_message?: BoolFieldUpdateOperationsInput | boolean\n  }\n\n  export type discussionboard_audit_logCreateInput = {\n    id: string\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n    fk_audit_actor_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_audit_log_of_actor_user_idInput\n    fk_audit_target_user?: discussionboard_userCreateNestedOneWithoutDiscussionboard_audit_log_of_target_user_idInput\n  }\n\n  export type discussionboard_audit_logUncheckedCreateInput = {\n    id: string\n    actor_user_id: string\n    target_user_id?: string | null\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n  }\n\n  export type discussionboard_audit_logUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    fk_audit_actor_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_audit_log_of_actor_user_idNestedInput\n    fk_audit_target_user?: discussionboard_userUpdateOneWithoutDiscussionboard_audit_log_of_target_user_idNestedInput\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_user_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_audit_logCreateManyInput = {\n    id: string\n    actor_user_id: string\n    target_user_id?: string | null\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n  }\n\n  export type discussionboard_audit_logUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_user_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_platform_settingCreateInput = {\n    id: string\n    name: string\n    value: string\n    type: string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_platform_settingUncheckedCreateInput = {\n    id: string\n    name: string\n    value: string\n    type: string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_platform_settingUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    value?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_platform_settingUncheckedUpdateInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    value?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_platform_settingCreateManyInput = {\n    id: string\n    name: string\n    value: string\n    type: string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_platform_settingUpdateManyMutationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    value?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_platform_settingUncheckedUpdateManyInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    value?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type UuidFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidFilter<$PrismaModel> | string\n  }\n\n  export type StringFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringFilter<$PrismaModel> | string\n  }\n\n  export type BoolFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolFilter<$PrismaModel> | boolean\n  }\n\n  export type DateTimeFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeFilter<$PrismaModel> | Date | string\n  }\n\n  export type Discussionboard_user_profileNullableScalarRelationFilter = {\n    is?: discussionboard_user_profileWhereInput | null\n    isNot?: discussionboard_user_profileWhereInput | null\n  }\n\n  export type Discussionboard_memberNullableScalarRelationFilter = {\n    is?: discussionboard_memberWhereInput | null\n    isNot?: discussionboard_memberWhereInput | null\n  }\n\n  export type Discussionboard_moderatorNullableScalarRelationFilter = {\n    is?: discussionboard_moderatorWhereInput | null\n    isNot?: discussionboard_moderatorWhereInput | null\n  }\n\n  export type Discussionboard_adminNullableScalarRelationFilter = {\n    is?: discussionboard_adminWhereInput | null\n    isNot?: discussionboard_adminWhereInput | null\n  }\n\n  export type Discussionboard_commentsListRelationFilter = {\n    every?: discussionboard_commentsWhereInput\n    some?: discussionboard_commentsWhereInput\n    none?: discussionboard_commentsWhereInput\n  }\n\n  export type Discussionboard_likesListRelationFilter = {\n    every?: discussionboard_likesWhereInput\n    some?: discussionboard_likesWhereInput\n    none?: discussionboard_likesWhereInput\n  }\n\n  export type Discussionboard_reportsListRelationFilter = {\n    every?: discussionboard_reportsWhereInput\n    some?: discussionboard_reportsWhereInput\n    none?: discussionboard_reportsWhereInput\n  }\n\n  export type Discussionboard_moderation_actionListRelationFilter = {\n    every?: discussionboard_moderation_actionWhereInput\n    some?: discussionboard_moderation_actionWhereInput\n    none?: discussionboard_moderation_actionWhereInput\n  }\n\n  export type Discussionboard_report_reviewListRelationFilter = {\n    every?: discussionboard_report_reviewWhereInput\n    some?: discussionboard_report_reviewWhereInput\n    none?: discussionboard_report_reviewWhereInput\n  }\n\n  export type Discussionboard_warningListRelationFilter = {\n    every?: discussionboard_warningWhereInput\n    some?: discussionboard_warningWhereInput\n    none?: discussionboard_warningWhereInput\n  }\n\n  export type Discussionboard_banListRelationFilter = {\n    every?: discussionboard_banWhereInput\n    some?: discussionboard_banWhereInput\n    none?: discussionboard_banWhereInput\n  }\n\n  export type Discussionboard_notificationListRelationFilter = {\n    every?: discussionboard_notificationWhereInput\n    some?: discussionboard_notificationWhereInput\n    none?: discussionboard_notificationWhereInput\n  }\n\n  export type Discussionboard_notification_preferenceNullableScalarRelationFilter = {\n    is?: discussionboard_notification_preferenceWhereInput | null\n    isNot?: discussionboard_notification_preferenceWhereInput | null\n  }\n\n  export type Discussionboard_audit_logListRelationFilter = {\n    every?: discussionboard_audit_logWhereInput\n    some?: discussionboard_audit_logWhereInput\n    none?: discussionboard_audit_logWhereInput\n  }\n\n  export type discussionboard_commentsOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_likesOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_reportsOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_moderation_actionOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_report_reviewOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_warningOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_banOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_notificationOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_audit_logOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_userCountOrderByAggregateInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    is_active?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_userMaxOrderByAggregateInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    is_active?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_userMinOrderByAggregateInput = {\n    id?: SortOrder\n    email?: SortOrder\n    password_hash?: SortOrder\n    is_active?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type UuidWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type StringWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type BoolWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedBoolFilter<$PrismaModel>\n    _max?: NestedBoolFilter<$PrismaModel>\n  }\n\n  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedDateTimeFilter<$PrismaModel>\n    _max?: NestedDateTimeFilter<$PrismaModel>\n  }\n\n  export type StringNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type Discussionboard_userScalarRelationFilter = {\n    is?: discussionboard_userWhereInput\n    isNot?: discussionboard_userWhereInput\n  }\n\n  export type SortOrderInput = {\n    sort: SortOrder\n    nulls?: NullsOrder\n  }\n\n  export type discussionboard_user_profileCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    display_name?: SortOrder\n    avatar_url?: SortOrder\n    bio?: SortOrder\n  }\n\n  export type discussionboard_user_profileMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    display_name?: SortOrder\n    avatar_url?: SortOrder\n    bio?: SortOrder\n  }\n\n  export type discussionboard_user_profileMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    display_name?: SortOrder\n    avatar_url?: SortOrder\n    bio?: SortOrder\n  }\n\n  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type Discussionboard_postListRelationFilter = {\n    every?: discussionboard_postWhereInput\n    some?: discussionboard_postWhereInput\n    none?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_memberCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    granted_at?: SortOrder\n  }\n\n  export type discussionboard_memberMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    granted_at?: SortOrder\n  }\n\n  export type discussionboard_memberMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    granted_at?: SortOrder\n  }\n\n  export type discussionboard_moderatorCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n  }\n\n  export type discussionboard_moderatorMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n  }\n\n  export type discussionboard_moderatorMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n  }\n\n  export type discussionboard_adminCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n  }\n\n  export type discussionboard_adminMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n  }\n\n  export type discussionboard_adminMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    assigned_at?: SortOrder\n  }\n\n  export type DateTimeNullableFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null\n  }\n\n  export type Discussionboard_memberScalarRelationFilter = {\n    is?: discussionboard_memberWhereInput\n    isNot?: discussionboard_memberWhereInput\n  }\n\n  export type Discussionboard_post_categoryScalarRelationFilter = {\n    is?: discussionboard_post_categoryWhereInput\n    isNot?: discussionboard_post_categoryWhereInput\n  }\n\n  export type Discussionboard_post_attachmentListRelationFilter = {\n    every?: discussionboard_post_attachmentWhereInput\n    some?: discussionboard_post_attachmentWhereInput\n    none?: discussionboard_post_attachmentWhereInput\n  }\n\n  export type discussionboard_post_attachmentOrderByRelationAggregateInput = {\n    _count?: SortOrder\n  }\n\n  export type discussionboard_postAuthor_member_idCreated_atCompoundUniqueInput = {\n    author_member_id: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_postCountOrderByAggregateInput = {\n    id?: SortOrder\n    author_member_id?: SortOrder\n    category_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_postMaxOrderByAggregateInput = {\n    id?: SortOrder\n    author_member_id?: SortOrder\n    category_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_postMinOrderByAggregateInput = {\n    id?: SortOrder\n    author_member_id?: SortOrder\n    category_id?: SortOrder\n    title?: SortOrder\n    body?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedDateTimeNullableFilter<$PrismaModel>\n    _max?: NestedDateTimeNullableFilter<$PrismaModel>\n  }\n\n  export type discussionboard_post_categoryCountOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrder\n  }\n\n  export type discussionboard_post_categoryMaxOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrder\n  }\n\n  export type discussionboard_post_categoryMinOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    description?: SortOrder\n  }\n\n  export type discussionboard_post_tagCountOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n  }\n\n  export type discussionboard_post_tagMaxOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n  }\n\n  export type discussionboard_post_tagMinOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n  }\n\n  export type Discussionboard_postScalarRelationFilter = {\n    is?: discussionboard_postWhereInput\n    isNot?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_post_attachmentPost_idFile_urlCompoundUniqueInput = {\n    post_id: string\n    file_url: string\n  }\n\n  export type discussionboard_post_attachmentCountOrderByAggregateInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    file_url?: SortOrder\n    file_type?: SortOrder\n    uploaded_at?: SortOrder\n  }\n\n  export type discussionboard_post_attachmentMaxOrderByAggregateInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    file_url?: SortOrder\n    file_type?: SortOrder\n    uploaded_at?: SortOrder\n  }\n\n  export type discussionboard_post_attachmentMinOrderByAggregateInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    file_url?: SortOrder\n    file_type?: SortOrder\n    uploaded_at?: SortOrder\n  }\n\n  export type UuidNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type Discussionboard_commentsNullableScalarRelationFilter = {\n    is?: discussionboard_commentsWhereInput | null\n    isNot?: discussionboard_commentsWhereInput | null\n  }\n\n  export type discussionboard_commentsCountOrderByAggregateInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    author_id?: SortOrder\n    parent_comment_id?: SortOrder\n    content?: SortOrder\n    is_edited?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_commentsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    author_id?: SortOrder\n    parent_comment_id?: SortOrder\n    content?: SortOrder\n    is_edited?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_commentsMinOrderByAggregateInput = {\n    id?: SortOrder\n    post_id?: SortOrder\n    author_id?: SortOrder\n    parent_comment_id?: SortOrder\n    content?: SortOrder\n    is_edited?: SortOrder\n    is_deleted?: SortOrder\n    created_at?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    mode?: QueryMode\n    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type Discussionboard_postNullableScalarRelationFilter = {\n    is?: discussionboard_postWhereInput | null\n    isNot?: discussionboard_postWhereInput | null\n  }\n\n  export type discussionboard_likesUser_idPost_idCompoundUniqueInput = {\n    user_id: string\n    post_id: string\n  }\n\n  export type discussionboard_likesUser_idComment_idCompoundUniqueInput = {\n    user_id: string\n    comment_id: string\n  }\n\n  export type discussionboard_likesCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_likesMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_likesMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_reportsUser_idPost_idCompoundUniqueInput = {\n    user_id: string\n    post_id: string\n  }\n\n  export type discussionboard_reportsUser_idComment_idCompoundUniqueInput = {\n    user_id: string\n    comment_id: string\n  }\n\n  export type discussionboard_reportsCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    reason_code?: SortOrder\n    reason_details?: SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_reportsMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    reason_code?: SortOrder\n    reason_details?: SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_reportsMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    reason_code?: SortOrder\n    reason_details?: SortOrder\n    created_at?: SortOrder\n    deleted_at?: SortOrder\n  }\n\n  export type discussionboard_moderation_actionCountOrderByAggregateInput = {\n    id?: SortOrder\n    actor_id?: SortOrder\n    target_user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    action_type?: SortOrder\n    reason?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_moderation_actionMaxOrderByAggregateInput = {\n    id?: SortOrder\n    actor_id?: SortOrder\n    target_user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    action_type?: SortOrder\n    reason?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_moderation_actionMinOrderByAggregateInput = {\n    id?: SortOrder\n    actor_id?: SortOrder\n    target_user_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    action_type?: SortOrder\n    reason?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type Discussionboard_reportsScalarRelationFilter = {\n    is?: discussionboard_reportsWhereInput\n    isNot?: discussionboard_reportsWhereInput\n  }\n\n  export type discussionboard_report_reviewCountOrderByAggregateInput = {\n    id?: SortOrder\n    report_id?: SortOrder\n    reviewer_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    review_status?: SortOrder\n    moderator_comment?: SortOrder\n    reviewed_at?: SortOrder\n  }\n\n  export type discussionboard_report_reviewMaxOrderByAggregateInput = {\n    id?: SortOrder\n    report_id?: SortOrder\n    reviewer_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    review_status?: SortOrder\n    moderator_comment?: SortOrder\n    reviewed_at?: SortOrder\n  }\n\n  export type discussionboard_report_reviewMinOrderByAggregateInput = {\n    id?: SortOrder\n    report_id?: SortOrder\n    reviewer_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    review_status?: SortOrder\n    moderator_comment?: SortOrder\n    reviewed_at?: SortOrder\n  }\n\n  export type discussionboard_warningCountOrderByAggregateInput = {\n    id?: SortOrder\n    issued_by_id?: SortOrder\n    issued_to_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    warning_type?: SortOrder\n    message?: SortOrder\n    issued_at?: SortOrder\n  }\n\n  export type discussionboard_warningMaxOrderByAggregateInput = {\n    id?: SortOrder\n    issued_by_id?: SortOrder\n    issued_to_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    warning_type?: SortOrder\n    message?: SortOrder\n    issued_at?: SortOrder\n  }\n\n  export type discussionboard_warningMinOrderByAggregateInput = {\n    id?: SortOrder\n    issued_by_id?: SortOrder\n    issued_to_id?: SortOrder\n    post_id?: SortOrder\n    comment_id?: SortOrder\n    warning_type?: SortOrder\n    message?: SortOrder\n    issued_at?: SortOrder\n  }\n\n  export type Discussionboard_warningNullableScalarRelationFilter = {\n    is?: discussionboard_warningWhereInput | null\n    isNot?: discussionboard_warningWhereInput | null\n  }\n\n  export type discussionboard_banCountOrderByAggregateInput = {\n    id?: SortOrder\n    banned_user_id?: SortOrder\n    banned_by_id?: SortOrder\n    warning_id?: SortOrder\n    ban_type?: SortOrder\n    reason?: SortOrder\n    issued_at?: SortOrder\n    expires_at?: SortOrder\n  }\n\n  export type discussionboard_banMaxOrderByAggregateInput = {\n    id?: SortOrder\n    banned_user_id?: SortOrder\n    banned_by_id?: SortOrder\n    warning_id?: SortOrder\n    ban_type?: SortOrder\n    reason?: SortOrder\n    issued_at?: SortOrder\n    expires_at?: SortOrder\n  }\n\n  export type discussionboard_banMinOrderByAggregateInput = {\n    id?: SortOrder\n    banned_user_id?: SortOrder\n    banned_by_id?: SortOrder\n    warning_id?: SortOrder\n    ban_type?: SortOrder\n    reason?: SortOrder\n    issued_at?: SortOrder\n    expires_at?: SortOrder\n  }\n\n  export type Discussionboard_userNullableScalarRelationFilter = {\n    is?: discussionboard_userWhereInput | null\n    isNot?: discussionboard_userWhereInput | null\n  }\n\n  export type discussionboard_notificationRecipient_user_idTypeRelated_post_idRelated_comment_idActor_user_idCreated_atCompoundUniqueInput = {\n    recipient_user_id: string\n    type: string\n    related_post_id: string\n    related_comment_id: string\n    actor_user_id: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationCountOrderByAggregateInput = {\n    id?: SortOrder\n    recipient_user_id?: SortOrder\n    related_post_id?: SortOrder\n    related_comment_id?: SortOrder\n    actor_user_id?: SortOrder\n    type?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_notificationMaxOrderByAggregateInput = {\n    id?: SortOrder\n    recipient_user_id?: SortOrder\n    related_post_id?: SortOrder\n    related_comment_id?: SortOrder\n    actor_user_id?: SortOrder\n    type?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_notificationMinOrderByAggregateInput = {\n    id?: SortOrder\n    recipient_user_id?: SortOrder\n    related_post_id?: SortOrder\n    related_comment_id?: SortOrder\n    actor_user_id?: SortOrder\n    type?: SortOrder\n    message?: SortOrder\n    is_read?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_notification_preferenceCountOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    notify_reply?: SortOrder\n    notify_like?: SortOrder\n    notify_moderator_action?: SortOrder\n    notify_system_message?: SortOrder\n  }\n\n  export type discussionboard_notification_preferenceMaxOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    notify_reply?: SortOrder\n    notify_like?: SortOrder\n    notify_moderator_action?: SortOrder\n    notify_system_message?: SortOrder\n  }\n\n  export type discussionboard_notification_preferenceMinOrderByAggregateInput = {\n    id?: SortOrder\n    user_id?: SortOrder\n    notify_reply?: SortOrder\n    notify_like?: SortOrder\n    notify_moderator_action?: SortOrder\n    notify_system_message?: SortOrder\n  }\n\n  export type discussionboard_audit_logCountOrderByAggregateInput = {\n    id?: SortOrder\n    actor_user_id?: SortOrder\n    target_user_id?: SortOrder\n    action_type?: SortOrder\n    entity_type?: SortOrder\n    entity_id?: SortOrder\n    action_detail?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_audit_logMaxOrderByAggregateInput = {\n    id?: SortOrder\n    actor_user_id?: SortOrder\n    target_user_id?: SortOrder\n    action_type?: SortOrder\n    entity_type?: SortOrder\n    entity_id?: SortOrder\n    action_detail?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_audit_logMinOrderByAggregateInput = {\n    id?: SortOrder\n    actor_user_id?: SortOrder\n    target_user_id?: SortOrder\n    action_type?: SortOrder\n    entity_type?: SortOrder\n    entity_id?: SortOrder\n    action_detail?: SortOrder\n    created_at?: SortOrder\n  }\n\n  export type discussionboard_platform_settingCountOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    value?: SortOrder\n    type?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_platform_settingMaxOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    value?: SortOrder\n    type?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_platform_settingMinOrderByAggregateInput = {\n    id?: SortOrder\n    name?: SortOrder\n    value?: SortOrder\n    type?: SortOrder\n    updated_at?: SortOrder\n  }\n\n  export type discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput = {\n    create?: XOR<discussionboard_user_profileCreateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput>\n    connectOrCreate?: discussionboard_user_profileCreateOrConnectWithoutUser_profile_user_idInput\n    connect?: discussionboard_user_profileWhereUniqueInput\n  }\n\n  export type discussionboard_memberCreateNestedOneWithoutMember_user_idInput = {\n    create?: XOR<discussionboard_memberCreateWithoutMember_user_idInput, discussionboard_memberUncheckedCreateWithoutMember_user_idInput>\n    connectOrCreate?: discussionboard_memberCreateOrConnectWithoutMember_user_idInput\n    connect?: discussionboard_memberWhereUniqueInput\n  }\n\n  export type discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput = {\n    create?: XOR<discussionboard_moderatorCreateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput>\n    connectOrCreate?: discussionboard_moderatorCreateOrConnectWithoutModerator_user_idInput\n    connect?: discussionboard_moderatorWhereUniqueInput\n  }\n\n  export type discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput = {\n    create?: XOR<discussionboard_adminCreateWithoutAdmin_user_idInput, discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput>\n    connectOrCreate?: discussionboard_adminCreateOrConnectWithoutAdmin_user_idInput\n    connect?: discussionboard_adminWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedManyWithoutAuthorInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutAuthorInput, discussionboard_commentsUncheckedCreateWithoutAuthorInput> | discussionboard_commentsCreateWithoutAuthorInput[] | discussionboard_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutAuthorInput | discussionboard_commentsCreateOrConnectWithoutAuthorInput[]\n    createMany?: discussionboard_commentsCreateManyAuthorInputEnvelope\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n  }\n\n  export type discussionboard_likesCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussionboard_likesCreateWithoutUserInput, discussionboard_likesUncheckedCreateWithoutUserInput> | discussionboard_likesCreateWithoutUserInput[] | discussionboard_likesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutUserInput | discussionboard_likesCreateOrConnectWithoutUserInput[]\n    createMany?: discussionboard_likesCreateManyUserInputEnvelope\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n  }\n\n  export type discussionboard_reportsCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutUserInput, discussionboard_reportsUncheckedCreateWithoutUserInput> | discussionboard_reportsCreateWithoutUserInput[] | discussionboard_reportsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutUserInput | discussionboard_reportsCreateOrConnectWithoutUserInput[]\n    createMany?: discussionboard_reportsCreateManyUserInputEnvelope\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionCreateNestedManyWithoutActorInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutActorInput, discussionboard_moderation_actionUncheckedCreateWithoutActorInput> | discussionboard_moderation_actionCreateWithoutActorInput[] | discussionboard_moderation_actionUncheckedCreateWithoutActorInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutActorInput | discussionboard_moderation_actionCreateOrConnectWithoutActorInput[]\n    createMany?: discussionboard_moderation_actionCreateManyActorInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput> | discussionboard_moderation_actionCreateWithoutTarget_userInput[] | discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput | discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput[]\n    createMany?: discussionboard_moderation_actionCreateManyTarget_userInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewCreateNestedManyWithoutReviewerInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewerInput, discussionboard_report_reviewUncheckedCreateWithoutReviewerInput> | discussionboard_report_reviewCreateWithoutReviewerInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewerInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewerInput | discussionboard_report_reviewCreateOrConnectWithoutReviewerInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewerInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningCreateNestedManyWithoutIssuerInput = {\n    create?: XOR<discussionboard_warningCreateWithoutIssuerInput, discussionboard_warningUncheckedCreateWithoutIssuerInput> | discussionboard_warningCreateWithoutIssuerInput[] | discussionboard_warningUncheckedCreateWithoutIssuerInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutIssuerInput | discussionboard_warningCreateOrConnectWithoutIssuerInput[]\n    createMany?: discussionboard_warningCreateManyIssuerInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningCreateNestedManyWithoutRecipientInput = {\n    create?: XOR<discussionboard_warningCreateWithoutRecipientInput, discussionboard_warningUncheckedCreateWithoutRecipientInput> | discussionboard_warningCreateWithoutRecipientInput[] | discussionboard_warningUncheckedCreateWithoutRecipientInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutRecipientInput | discussionboard_warningCreateOrConnectWithoutRecipientInput[]\n    createMany?: discussionboard_warningCreateManyRecipientInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_banCreateNestedManyWithoutBanned_userInput = {\n    create?: XOR<discussionboard_banCreateWithoutBanned_userInput, discussionboard_banUncheckedCreateWithoutBanned_userInput> | discussionboard_banCreateWithoutBanned_userInput[] | discussionboard_banUncheckedCreateWithoutBanned_userInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBanned_userInput | discussionboard_banCreateOrConnectWithoutBanned_userInput[]\n    createMany?: discussionboard_banCreateManyBanned_userInputEnvelope\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n  }\n\n  export type discussionboard_banCreateNestedManyWithoutBan_actorInput = {\n    create?: XOR<discussionboard_banCreateWithoutBan_actorInput, discussionboard_banUncheckedCreateWithoutBan_actorInput> | discussionboard_banCreateWithoutBan_actorInput[] | discussionboard_banUncheckedCreateWithoutBan_actorInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBan_actorInput | discussionboard_banCreateOrConnectWithoutBan_actorInput[]\n    createMany?: discussionboard_banCreateManyBan_actorInputEnvelope\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationCreateNestedManyWithoutRecipient_userInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRecipient_userInput, discussionboard_notificationUncheckedCreateWithoutRecipient_userInput> | discussionboard_notificationCreateWithoutRecipient_userInput[] | discussionboard_notificationUncheckedCreateWithoutRecipient_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRecipient_userInput | discussionboard_notificationCreateOrConnectWithoutRecipient_userInput[]\n    createMany?: discussionboard_notificationCreateManyRecipient_userInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationCreateNestedManyWithoutActor_userInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutActor_userInput, discussionboard_notificationUncheckedCreateWithoutActor_userInput> | discussionboard_notificationCreateWithoutActor_userInput[] | discussionboard_notificationUncheckedCreateWithoutActor_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutActor_userInput | discussionboard_notificationCreateOrConnectWithoutActor_userInput[]\n    createMany?: discussionboard_notificationCreateManyActor_userInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_notification_preferenceCreateNestedOneWithoutUserInput = {\n    create?: XOR<discussionboard_notification_preferenceCreateWithoutUserInput, discussionboard_notification_preferenceUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussionboard_notification_preferenceCreateOrConnectWithoutUserInput\n    connect?: discussionboard_notification_preferenceWhereUniqueInput\n  }\n\n  export type discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput> | discussionboard_audit_logCreateWithoutFk_audit_actor_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_actor_userInputEnvelope\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n  }\n\n  export type discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput> | discussionboard_audit_logCreateWithoutFk_audit_target_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_target_userInputEnvelope\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n  }\n\n  export type discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput = {\n    create?: XOR<discussionboard_user_profileCreateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput>\n    connectOrCreate?: discussionboard_user_profileCreateOrConnectWithoutUser_profile_user_idInput\n    connect?: discussionboard_user_profileWhereUniqueInput\n  }\n\n  export type discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput = {\n    create?: XOR<discussionboard_memberCreateWithoutMember_user_idInput, discussionboard_memberUncheckedCreateWithoutMember_user_idInput>\n    connectOrCreate?: discussionboard_memberCreateOrConnectWithoutMember_user_idInput\n    connect?: discussionboard_memberWhereUniqueInput\n  }\n\n  export type discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput = {\n    create?: XOR<discussionboard_moderatorCreateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput>\n    connectOrCreate?: discussionboard_moderatorCreateOrConnectWithoutModerator_user_idInput\n    connect?: discussionboard_moderatorWhereUniqueInput\n  }\n\n  export type discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput = {\n    create?: XOR<discussionboard_adminCreateWithoutAdmin_user_idInput, discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput>\n    connectOrCreate?: discussionboard_adminCreateOrConnectWithoutAdmin_user_idInput\n    connect?: discussionboard_adminWhereUniqueInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutAuthorInput, discussionboard_commentsUncheckedCreateWithoutAuthorInput> | discussionboard_commentsCreateWithoutAuthorInput[] | discussionboard_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutAuthorInput | discussionboard_commentsCreateOrConnectWithoutAuthorInput[]\n    createMany?: discussionboard_commentsCreateManyAuthorInputEnvelope\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n  }\n\n  export type discussionboard_likesUncheckedCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussionboard_likesCreateWithoutUserInput, discussionboard_likesUncheckedCreateWithoutUserInput> | discussionboard_likesCreateWithoutUserInput[] | discussionboard_likesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutUserInput | discussionboard_likesCreateOrConnectWithoutUserInput[]\n    createMany?: discussionboard_likesCreateManyUserInputEnvelope\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n  }\n\n  export type discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutUserInput, discussionboard_reportsUncheckedCreateWithoutUserInput> | discussionboard_reportsCreateWithoutUserInput[] | discussionboard_reportsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutUserInput | discussionboard_reportsCreateOrConnectWithoutUserInput[]\n    createMany?: discussionboard_reportsCreateManyUserInputEnvelope\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutActorInput, discussionboard_moderation_actionUncheckedCreateWithoutActorInput> | discussionboard_moderation_actionCreateWithoutActorInput[] | discussionboard_moderation_actionUncheckedCreateWithoutActorInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutActorInput | discussionboard_moderation_actionCreateOrConnectWithoutActorInput[]\n    createMany?: discussionboard_moderation_actionCreateManyActorInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput> | discussionboard_moderation_actionCreateWithoutTarget_userInput[] | discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput | discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput[]\n    createMany?: discussionboard_moderation_actionCreateManyTarget_userInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewerInput, discussionboard_report_reviewUncheckedCreateWithoutReviewerInput> | discussionboard_report_reviewCreateWithoutReviewerInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewerInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewerInput | discussionboard_report_reviewCreateOrConnectWithoutReviewerInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewerInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput = {\n    create?: XOR<discussionboard_warningCreateWithoutIssuerInput, discussionboard_warningUncheckedCreateWithoutIssuerInput> | discussionboard_warningCreateWithoutIssuerInput[] | discussionboard_warningUncheckedCreateWithoutIssuerInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutIssuerInput | discussionboard_warningCreateOrConnectWithoutIssuerInput[]\n    createMany?: discussionboard_warningCreateManyIssuerInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput = {\n    create?: XOR<discussionboard_warningCreateWithoutRecipientInput, discussionboard_warningUncheckedCreateWithoutRecipientInput> | discussionboard_warningCreateWithoutRecipientInput[] | discussionboard_warningUncheckedCreateWithoutRecipientInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutRecipientInput | discussionboard_warningCreateOrConnectWithoutRecipientInput[]\n    createMany?: discussionboard_warningCreateManyRecipientInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput = {\n    create?: XOR<discussionboard_banCreateWithoutBanned_userInput, discussionboard_banUncheckedCreateWithoutBanned_userInput> | discussionboard_banCreateWithoutBanned_userInput[] | discussionboard_banUncheckedCreateWithoutBanned_userInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBanned_userInput | discussionboard_banCreateOrConnectWithoutBanned_userInput[]\n    createMany?: discussionboard_banCreateManyBanned_userInputEnvelope\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n  }\n\n  export type discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput = {\n    create?: XOR<discussionboard_banCreateWithoutBan_actorInput, discussionboard_banUncheckedCreateWithoutBan_actorInput> | discussionboard_banCreateWithoutBan_actorInput[] | discussionboard_banUncheckedCreateWithoutBan_actorInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBan_actorInput | discussionboard_banCreateOrConnectWithoutBan_actorInput[]\n    createMany?: discussionboard_banCreateManyBan_actorInputEnvelope\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRecipient_userInput, discussionboard_notificationUncheckedCreateWithoutRecipient_userInput> | discussionboard_notificationCreateWithoutRecipient_userInput[] | discussionboard_notificationUncheckedCreateWithoutRecipient_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRecipient_userInput | discussionboard_notificationCreateOrConnectWithoutRecipient_userInput[]\n    createMany?: discussionboard_notificationCreateManyRecipient_userInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutActor_userInput, discussionboard_notificationUncheckedCreateWithoutActor_userInput> | discussionboard_notificationCreateWithoutActor_userInput[] | discussionboard_notificationUncheckedCreateWithoutActor_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutActor_userInput | discussionboard_notificationCreateOrConnectWithoutActor_userInput[]\n    createMany?: discussionboard_notificationCreateManyActor_userInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput = {\n    create?: XOR<discussionboard_notification_preferenceCreateWithoutUserInput, discussionboard_notification_preferenceUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussionboard_notification_preferenceCreateOrConnectWithoutUserInput\n    connect?: discussionboard_notification_preferenceWhereUniqueInput\n  }\n\n  export type discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput> | discussionboard_audit_logCreateWithoutFk_audit_actor_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_actor_userInputEnvelope\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n  }\n\n  export type discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput> | discussionboard_audit_logCreateWithoutFk_audit_target_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_target_userInputEnvelope\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n  }\n\n  export type StringFieldUpdateOperationsInput = {\n    set?: string\n  }\n\n  export type BoolFieldUpdateOperationsInput = {\n    set?: boolean\n  }\n\n  export type DateTimeFieldUpdateOperationsInput = {\n    set?: Date | string\n  }\n\n  export type discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput = {\n    create?: XOR<discussionboard_user_profileCreateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput>\n    connectOrCreate?: discussionboard_user_profileCreateOrConnectWithoutUser_profile_user_idInput\n    upsert?: discussionboard_user_profileUpsertWithoutUser_profile_user_idInput\n    disconnect?: discussionboard_user_profileWhereInput | boolean\n    delete?: discussionboard_user_profileWhereInput | boolean\n    connect?: discussionboard_user_profileWhereUniqueInput\n    update?: XOR<XOR<discussionboard_user_profileUpdateToOneWithWhereWithoutUser_profile_user_idInput, discussionboard_user_profileUpdateWithoutUser_profile_user_idInput>, discussionboard_user_profileUncheckedUpdateWithoutUser_profile_user_idInput>\n  }\n\n  export type discussionboard_memberUpdateOneWithoutMember_user_idNestedInput = {\n    create?: XOR<discussionboard_memberCreateWithoutMember_user_idInput, discussionboard_memberUncheckedCreateWithoutMember_user_idInput>\n    connectOrCreate?: discussionboard_memberCreateOrConnectWithoutMember_user_idInput\n    upsert?: discussionboard_memberUpsertWithoutMember_user_idInput\n    disconnect?: discussionboard_memberWhereInput | boolean\n    delete?: discussionboard_memberWhereInput | boolean\n    connect?: discussionboard_memberWhereUniqueInput\n    update?: XOR<XOR<discussionboard_memberUpdateToOneWithWhereWithoutMember_user_idInput, discussionboard_memberUpdateWithoutMember_user_idInput>, discussionboard_memberUncheckedUpdateWithoutMember_user_idInput>\n  }\n\n  export type discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput = {\n    create?: XOR<discussionboard_moderatorCreateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput>\n    connectOrCreate?: discussionboard_moderatorCreateOrConnectWithoutModerator_user_idInput\n    upsert?: discussionboard_moderatorUpsertWithoutModerator_user_idInput\n    disconnect?: discussionboard_moderatorWhereInput | boolean\n    delete?: discussionboard_moderatorWhereInput | boolean\n    connect?: discussionboard_moderatorWhereUniqueInput\n    update?: XOR<XOR<discussionboard_moderatorUpdateToOneWithWhereWithoutModerator_user_idInput, discussionboard_moderatorUpdateWithoutModerator_user_idInput>, discussionboard_moderatorUncheckedUpdateWithoutModerator_user_idInput>\n  }\n\n  export type discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput = {\n    create?: XOR<discussionboard_adminCreateWithoutAdmin_user_idInput, discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput>\n    connectOrCreate?: discussionboard_adminCreateOrConnectWithoutAdmin_user_idInput\n    upsert?: discussionboard_adminUpsertWithoutAdmin_user_idInput\n    disconnect?: discussionboard_adminWhereInput | boolean\n    delete?: discussionboard_adminWhereInput | boolean\n    connect?: discussionboard_adminWhereUniqueInput\n    update?: XOR<XOR<discussionboard_adminUpdateToOneWithWhereWithoutAdmin_user_idInput, discussionboard_adminUpdateWithoutAdmin_user_idInput>, discussionboard_adminUncheckedUpdateWithoutAdmin_user_idInput>\n  }\n\n  export type discussionboard_commentsUpdateManyWithoutAuthorNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutAuthorInput, discussionboard_commentsUncheckedCreateWithoutAuthorInput> | discussionboard_commentsCreateWithoutAuthorInput[] | discussionboard_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutAuthorInput | discussionboard_commentsCreateOrConnectWithoutAuthorInput[]\n    upsert?: discussionboard_commentsUpsertWithWhereUniqueWithoutAuthorInput | discussionboard_commentsUpsertWithWhereUniqueWithoutAuthorInput[]\n    createMany?: discussionboard_commentsCreateManyAuthorInputEnvelope\n    set?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    disconnect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    delete?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    update?: discussionboard_commentsUpdateWithWhereUniqueWithoutAuthorInput | discussionboard_commentsUpdateWithWhereUniqueWithoutAuthorInput[]\n    updateMany?: discussionboard_commentsUpdateManyWithWhereWithoutAuthorInput | discussionboard_commentsUpdateManyWithWhereWithoutAuthorInput[]\n    deleteMany?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n  }\n\n  export type discussionboard_likesUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussionboard_likesCreateWithoutUserInput, discussionboard_likesUncheckedCreateWithoutUserInput> | discussionboard_likesCreateWithoutUserInput[] | discussionboard_likesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutUserInput | discussionboard_likesCreateOrConnectWithoutUserInput[]\n    upsert?: discussionboard_likesUpsertWithWhereUniqueWithoutUserInput | discussionboard_likesUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussionboard_likesCreateManyUserInputEnvelope\n    set?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    disconnect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    delete?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    update?: discussionboard_likesUpdateWithWhereUniqueWithoutUserInput | discussionboard_likesUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussionboard_likesUpdateManyWithWhereWithoutUserInput | discussionboard_likesUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n  }\n\n  export type discussionboard_reportsUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutUserInput, discussionboard_reportsUncheckedCreateWithoutUserInput> | discussionboard_reportsCreateWithoutUserInput[] | discussionboard_reportsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutUserInput | discussionboard_reportsCreateOrConnectWithoutUserInput[]\n    upsert?: discussionboard_reportsUpsertWithWhereUniqueWithoutUserInput | discussionboard_reportsUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussionboard_reportsCreateManyUserInputEnvelope\n    set?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    disconnect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    delete?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    update?: discussionboard_reportsUpdateWithWhereUniqueWithoutUserInput | discussionboard_reportsUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussionboard_reportsUpdateManyWithWhereWithoutUserInput | discussionboard_reportsUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithoutActorNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutActorInput, discussionboard_moderation_actionUncheckedCreateWithoutActorInput> | discussionboard_moderation_actionCreateWithoutActorInput[] | discussionboard_moderation_actionUncheckedCreateWithoutActorInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutActorInput | discussionboard_moderation_actionCreateOrConnectWithoutActorInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutActorInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutActorInput[]\n    createMany?: discussionboard_moderation_actionCreateManyActorInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutActorInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutActorInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutActorInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutActorInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput> | discussionboard_moderation_actionCreateWithoutTarget_userInput[] | discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput | discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutTarget_userInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutTarget_userInput[]\n    createMany?: discussionboard_moderation_actionCreateManyTarget_userInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutTarget_userInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutTarget_userInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutTarget_userInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutTarget_userInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewerInput, discussionboard_report_reviewUncheckedCreateWithoutReviewerInput> | discussionboard_report_reviewCreateWithoutReviewerInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewerInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewerInput | discussionboard_report_reviewCreateOrConnectWithoutReviewerInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewerInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewerInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewerInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewerInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewerInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReviewerInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReviewerInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUpdateManyWithoutIssuerNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutIssuerInput, discussionboard_warningUncheckedCreateWithoutIssuerInput> | discussionboard_warningCreateWithoutIssuerInput[] | discussionboard_warningUncheckedCreateWithoutIssuerInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutIssuerInput | discussionboard_warningCreateOrConnectWithoutIssuerInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutIssuerInput | discussionboard_warningUpsertWithWhereUniqueWithoutIssuerInput[]\n    createMany?: discussionboard_warningCreateManyIssuerInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutIssuerInput | discussionboard_warningUpdateWithWhereUniqueWithoutIssuerInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutIssuerInput | discussionboard_warningUpdateManyWithWhereWithoutIssuerInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUpdateManyWithoutRecipientNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutRecipientInput, discussionboard_warningUncheckedCreateWithoutRecipientInput> | discussionboard_warningCreateWithoutRecipientInput[] | discussionboard_warningUncheckedCreateWithoutRecipientInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutRecipientInput | discussionboard_warningCreateOrConnectWithoutRecipientInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutRecipientInput | discussionboard_warningUpsertWithWhereUniqueWithoutRecipientInput[]\n    createMany?: discussionboard_warningCreateManyRecipientInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutRecipientInput | discussionboard_warningUpdateWithWhereUniqueWithoutRecipientInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutRecipientInput | discussionboard_warningUpdateManyWithWhereWithoutRecipientInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_banUpdateManyWithoutBanned_userNestedInput = {\n    create?: XOR<discussionboard_banCreateWithoutBanned_userInput, discussionboard_banUncheckedCreateWithoutBanned_userInput> | discussionboard_banCreateWithoutBanned_userInput[] | discussionboard_banUncheckedCreateWithoutBanned_userInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBanned_userInput | discussionboard_banCreateOrConnectWithoutBanned_userInput[]\n    upsert?: discussionboard_banUpsertWithWhereUniqueWithoutBanned_userInput | discussionboard_banUpsertWithWhereUniqueWithoutBanned_userInput[]\n    createMany?: discussionboard_banCreateManyBanned_userInputEnvelope\n    set?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    disconnect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    delete?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    update?: discussionboard_banUpdateWithWhereUniqueWithoutBanned_userInput | discussionboard_banUpdateWithWhereUniqueWithoutBanned_userInput[]\n    updateMany?: discussionboard_banUpdateManyWithWhereWithoutBanned_userInput | discussionboard_banUpdateManyWithWhereWithoutBanned_userInput[]\n    deleteMany?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n  }\n\n  export type discussionboard_banUpdateManyWithoutBan_actorNestedInput = {\n    create?: XOR<discussionboard_banCreateWithoutBan_actorInput, discussionboard_banUncheckedCreateWithoutBan_actorInput> | discussionboard_banCreateWithoutBan_actorInput[] | discussionboard_banUncheckedCreateWithoutBan_actorInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBan_actorInput | discussionboard_banCreateOrConnectWithoutBan_actorInput[]\n    upsert?: discussionboard_banUpsertWithWhereUniqueWithoutBan_actorInput | discussionboard_banUpsertWithWhereUniqueWithoutBan_actorInput[]\n    createMany?: discussionboard_banCreateManyBan_actorInputEnvelope\n    set?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    disconnect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    delete?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    update?: discussionboard_banUpdateWithWhereUniqueWithoutBan_actorInput | discussionboard_banUpdateWithWhereUniqueWithoutBan_actorInput[]\n    updateMany?: discussionboard_banUpdateManyWithWhereWithoutBan_actorInput | discussionboard_banUpdateManyWithWhereWithoutBan_actorInput[]\n    deleteMany?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRecipient_userInput, discussionboard_notificationUncheckedCreateWithoutRecipient_userInput> | discussionboard_notificationCreateWithoutRecipient_userInput[] | discussionboard_notificationUncheckedCreateWithoutRecipient_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRecipient_userInput | discussionboard_notificationCreateOrConnectWithoutRecipient_userInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutRecipient_userInput | discussionboard_notificationUpsertWithWhereUniqueWithoutRecipient_userInput[]\n    createMany?: discussionboard_notificationCreateManyRecipient_userInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutRecipient_userInput | discussionboard_notificationUpdateWithWhereUniqueWithoutRecipient_userInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutRecipient_userInput | discussionboard_notificationUpdateManyWithWhereWithoutRecipient_userInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUpdateManyWithoutActor_userNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutActor_userInput, discussionboard_notificationUncheckedCreateWithoutActor_userInput> | discussionboard_notificationCreateWithoutActor_userInput[] | discussionboard_notificationUncheckedCreateWithoutActor_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutActor_userInput | discussionboard_notificationCreateOrConnectWithoutActor_userInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutActor_userInput | discussionboard_notificationUpsertWithWhereUniqueWithoutActor_userInput[]\n    createMany?: discussionboard_notificationCreateManyActor_userInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutActor_userInput | discussionboard_notificationUpdateWithWhereUniqueWithoutActor_userInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutActor_userInput | discussionboard_notificationUpdateManyWithWhereWithoutActor_userInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput = {\n    create?: XOR<discussionboard_notification_preferenceCreateWithoutUserInput, discussionboard_notification_preferenceUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussionboard_notification_preferenceCreateOrConnectWithoutUserInput\n    upsert?: discussionboard_notification_preferenceUpsertWithoutUserInput\n    disconnect?: discussionboard_notification_preferenceWhereInput | boolean\n    delete?: discussionboard_notification_preferenceWhereInput | boolean\n    connect?: discussionboard_notification_preferenceWhereUniqueInput\n    update?: XOR<XOR<discussionboard_notification_preferenceUpdateToOneWithWhereWithoutUserInput, discussionboard_notification_preferenceUpdateWithoutUserInput>, discussionboard_notification_preferenceUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput> | discussionboard_audit_logCreateWithoutFk_audit_actor_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput[]\n    upsert?: discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_actor_userInput | discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_actor_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_actor_userInputEnvelope\n    set?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    disconnect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    delete?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    update?: discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_actor_userInput | discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_actor_userInput[]\n    updateMany?: discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_actor_userInput | discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_actor_userInput[]\n    deleteMany?: discussionboard_audit_logScalarWhereInput | discussionboard_audit_logScalarWhereInput[]\n  }\n\n  export type discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput> | discussionboard_audit_logCreateWithoutFk_audit_target_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput[]\n    upsert?: discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_target_userInput | discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_target_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_target_userInputEnvelope\n    set?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    disconnect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    delete?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    update?: discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_target_userInput | discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_target_userInput[]\n    updateMany?: discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_target_userInput | discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_target_userInput[]\n    deleteMany?: discussionboard_audit_logScalarWhereInput | discussionboard_audit_logScalarWhereInput[]\n  }\n\n  export type discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput = {\n    create?: XOR<discussionboard_user_profileCreateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput>\n    connectOrCreate?: discussionboard_user_profileCreateOrConnectWithoutUser_profile_user_idInput\n    upsert?: discussionboard_user_profileUpsertWithoutUser_profile_user_idInput\n    disconnect?: discussionboard_user_profileWhereInput | boolean\n    delete?: discussionboard_user_profileWhereInput | boolean\n    connect?: discussionboard_user_profileWhereUniqueInput\n    update?: XOR<XOR<discussionboard_user_profileUpdateToOneWithWhereWithoutUser_profile_user_idInput, discussionboard_user_profileUpdateWithoutUser_profile_user_idInput>, discussionboard_user_profileUncheckedUpdateWithoutUser_profile_user_idInput>\n  }\n\n  export type discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput = {\n    create?: XOR<discussionboard_memberCreateWithoutMember_user_idInput, discussionboard_memberUncheckedCreateWithoutMember_user_idInput>\n    connectOrCreate?: discussionboard_memberCreateOrConnectWithoutMember_user_idInput\n    upsert?: discussionboard_memberUpsertWithoutMember_user_idInput\n    disconnect?: discussionboard_memberWhereInput | boolean\n    delete?: discussionboard_memberWhereInput | boolean\n    connect?: discussionboard_memberWhereUniqueInput\n    update?: XOR<XOR<discussionboard_memberUpdateToOneWithWhereWithoutMember_user_idInput, discussionboard_memberUpdateWithoutMember_user_idInput>, discussionboard_memberUncheckedUpdateWithoutMember_user_idInput>\n  }\n\n  export type discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput = {\n    create?: XOR<discussionboard_moderatorCreateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput>\n    connectOrCreate?: discussionboard_moderatorCreateOrConnectWithoutModerator_user_idInput\n    upsert?: discussionboard_moderatorUpsertWithoutModerator_user_idInput\n    disconnect?: discussionboard_moderatorWhereInput | boolean\n    delete?: discussionboard_moderatorWhereInput | boolean\n    connect?: discussionboard_moderatorWhereUniqueInput\n    update?: XOR<XOR<discussionboard_moderatorUpdateToOneWithWhereWithoutModerator_user_idInput, discussionboard_moderatorUpdateWithoutModerator_user_idInput>, discussionboard_moderatorUncheckedUpdateWithoutModerator_user_idInput>\n  }\n\n  export type discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput = {\n    create?: XOR<discussionboard_adminCreateWithoutAdmin_user_idInput, discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput>\n    connectOrCreate?: discussionboard_adminCreateOrConnectWithoutAdmin_user_idInput\n    upsert?: discussionboard_adminUpsertWithoutAdmin_user_idInput\n    disconnect?: discussionboard_adminWhereInput | boolean\n    delete?: discussionboard_adminWhereInput | boolean\n    connect?: discussionboard_adminWhereUniqueInput\n    update?: XOR<XOR<discussionboard_adminUpdateToOneWithWhereWithoutAdmin_user_idInput, discussionboard_adminUpdateWithoutAdmin_user_idInput>, discussionboard_adminUncheckedUpdateWithoutAdmin_user_idInput>\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutAuthorInput, discussionboard_commentsUncheckedCreateWithoutAuthorInput> | discussionboard_commentsCreateWithoutAuthorInput[] | discussionboard_commentsUncheckedCreateWithoutAuthorInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutAuthorInput | discussionboard_commentsCreateOrConnectWithoutAuthorInput[]\n    upsert?: discussionboard_commentsUpsertWithWhereUniqueWithoutAuthorInput | discussionboard_commentsUpsertWithWhereUniqueWithoutAuthorInput[]\n    createMany?: discussionboard_commentsCreateManyAuthorInputEnvelope\n    set?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    disconnect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    delete?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    update?: discussionboard_commentsUpdateWithWhereUniqueWithoutAuthorInput | discussionboard_commentsUpdateWithWhereUniqueWithoutAuthorInput[]\n    updateMany?: discussionboard_commentsUpdateManyWithWhereWithoutAuthorInput | discussionboard_commentsUpdateManyWithWhereWithoutAuthorInput[]\n    deleteMany?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussionboard_likesCreateWithoutUserInput, discussionboard_likesUncheckedCreateWithoutUserInput> | discussionboard_likesCreateWithoutUserInput[] | discussionboard_likesUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutUserInput | discussionboard_likesCreateOrConnectWithoutUserInput[]\n    upsert?: discussionboard_likesUpsertWithWhereUniqueWithoutUserInput | discussionboard_likesUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussionboard_likesCreateManyUserInputEnvelope\n    set?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    disconnect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    delete?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    update?: discussionboard_likesUpdateWithWhereUniqueWithoutUserInput | discussionboard_likesUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussionboard_likesUpdateManyWithWhereWithoutUserInput | discussionboard_likesUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutUserInput, discussionboard_reportsUncheckedCreateWithoutUserInput> | discussionboard_reportsCreateWithoutUserInput[] | discussionboard_reportsUncheckedCreateWithoutUserInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutUserInput | discussionboard_reportsCreateOrConnectWithoutUserInput[]\n    upsert?: discussionboard_reportsUpsertWithWhereUniqueWithoutUserInput | discussionboard_reportsUpsertWithWhereUniqueWithoutUserInput[]\n    createMany?: discussionboard_reportsCreateManyUserInputEnvelope\n    set?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    disconnect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    delete?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    update?: discussionboard_reportsUpdateWithWhereUniqueWithoutUserInput | discussionboard_reportsUpdateWithWhereUniqueWithoutUserInput[]\n    updateMany?: discussionboard_reportsUpdateManyWithWhereWithoutUserInput | discussionboard_reportsUpdateManyWithWhereWithoutUserInput[]\n    deleteMany?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutActorInput, discussionboard_moderation_actionUncheckedCreateWithoutActorInput> | discussionboard_moderation_actionCreateWithoutActorInput[] | discussionboard_moderation_actionUncheckedCreateWithoutActorInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutActorInput | discussionboard_moderation_actionCreateOrConnectWithoutActorInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutActorInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutActorInput[]\n    createMany?: discussionboard_moderation_actionCreateManyActorInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutActorInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutActorInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutActorInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutActorInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput> | discussionboard_moderation_actionCreateWithoutTarget_userInput[] | discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput | discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutTarget_userInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutTarget_userInput[]\n    createMany?: discussionboard_moderation_actionCreateManyTarget_userInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutTarget_userInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutTarget_userInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutTarget_userInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutTarget_userInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewerInput, discussionboard_report_reviewUncheckedCreateWithoutReviewerInput> | discussionboard_report_reviewCreateWithoutReviewerInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewerInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewerInput | discussionboard_report_reviewCreateOrConnectWithoutReviewerInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewerInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewerInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewerInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewerInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewerInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReviewerInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReviewerInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutIssuerInput, discussionboard_warningUncheckedCreateWithoutIssuerInput> | discussionboard_warningCreateWithoutIssuerInput[] | discussionboard_warningUncheckedCreateWithoutIssuerInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutIssuerInput | discussionboard_warningCreateOrConnectWithoutIssuerInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutIssuerInput | discussionboard_warningUpsertWithWhereUniqueWithoutIssuerInput[]\n    createMany?: discussionboard_warningCreateManyIssuerInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutIssuerInput | discussionboard_warningUpdateWithWhereUniqueWithoutIssuerInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutIssuerInput | discussionboard_warningUpdateManyWithWhereWithoutIssuerInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutRecipientInput, discussionboard_warningUncheckedCreateWithoutRecipientInput> | discussionboard_warningCreateWithoutRecipientInput[] | discussionboard_warningUncheckedCreateWithoutRecipientInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutRecipientInput | discussionboard_warningCreateOrConnectWithoutRecipientInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutRecipientInput | discussionboard_warningUpsertWithWhereUniqueWithoutRecipientInput[]\n    createMany?: discussionboard_warningCreateManyRecipientInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutRecipientInput | discussionboard_warningUpdateWithWhereUniqueWithoutRecipientInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutRecipientInput | discussionboard_warningUpdateManyWithWhereWithoutRecipientInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput = {\n    create?: XOR<discussionboard_banCreateWithoutBanned_userInput, discussionboard_banUncheckedCreateWithoutBanned_userInput> | discussionboard_banCreateWithoutBanned_userInput[] | discussionboard_banUncheckedCreateWithoutBanned_userInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBanned_userInput | discussionboard_banCreateOrConnectWithoutBanned_userInput[]\n    upsert?: discussionboard_banUpsertWithWhereUniqueWithoutBanned_userInput | discussionboard_banUpsertWithWhereUniqueWithoutBanned_userInput[]\n    createMany?: discussionboard_banCreateManyBanned_userInputEnvelope\n    set?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    disconnect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    delete?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    update?: discussionboard_banUpdateWithWhereUniqueWithoutBanned_userInput | discussionboard_banUpdateWithWhereUniqueWithoutBanned_userInput[]\n    updateMany?: discussionboard_banUpdateManyWithWhereWithoutBanned_userInput | discussionboard_banUpdateManyWithWhereWithoutBanned_userInput[]\n    deleteMany?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n  }\n\n  export type discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput = {\n    create?: XOR<discussionboard_banCreateWithoutBan_actorInput, discussionboard_banUncheckedCreateWithoutBan_actorInput> | discussionboard_banCreateWithoutBan_actorInput[] | discussionboard_banUncheckedCreateWithoutBan_actorInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutBan_actorInput | discussionboard_banCreateOrConnectWithoutBan_actorInput[]\n    upsert?: discussionboard_banUpsertWithWhereUniqueWithoutBan_actorInput | discussionboard_banUpsertWithWhereUniqueWithoutBan_actorInput[]\n    createMany?: discussionboard_banCreateManyBan_actorInputEnvelope\n    set?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    disconnect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    delete?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    update?: discussionboard_banUpdateWithWhereUniqueWithoutBan_actorInput | discussionboard_banUpdateWithWhereUniqueWithoutBan_actorInput[]\n    updateMany?: discussionboard_banUpdateManyWithWhereWithoutBan_actorInput | discussionboard_banUpdateManyWithWhereWithoutBan_actorInput[]\n    deleteMany?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRecipient_userInput, discussionboard_notificationUncheckedCreateWithoutRecipient_userInput> | discussionboard_notificationCreateWithoutRecipient_userInput[] | discussionboard_notificationUncheckedCreateWithoutRecipient_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRecipient_userInput | discussionboard_notificationCreateOrConnectWithoutRecipient_userInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutRecipient_userInput | discussionboard_notificationUpsertWithWhereUniqueWithoutRecipient_userInput[]\n    createMany?: discussionboard_notificationCreateManyRecipient_userInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutRecipient_userInput | discussionboard_notificationUpdateWithWhereUniqueWithoutRecipient_userInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutRecipient_userInput | discussionboard_notificationUpdateManyWithWhereWithoutRecipient_userInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutActor_userInput, discussionboard_notificationUncheckedCreateWithoutActor_userInput> | discussionboard_notificationCreateWithoutActor_userInput[] | discussionboard_notificationUncheckedCreateWithoutActor_userInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutActor_userInput | discussionboard_notificationCreateOrConnectWithoutActor_userInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutActor_userInput | discussionboard_notificationUpsertWithWhereUniqueWithoutActor_userInput[]\n    createMany?: discussionboard_notificationCreateManyActor_userInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutActor_userInput | discussionboard_notificationUpdateWithWhereUniqueWithoutActor_userInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutActor_userInput | discussionboard_notificationUpdateManyWithWhereWithoutActor_userInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput = {\n    create?: XOR<discussionboard_notification_preferenceCreateWithoutUserInput, discussionboard_notification_preferenceUncheckedCreateWithoutUserInput>\n    connectOrCreate?: discussionboard_notification_preferenceCreateOrConnectWithoutUserInput\n    upsert?: discussionboard_notification_preferenceUpsertWithoutUserInput\n    disconnect?: discussionboard_notification_preferenceWhereInput | boolean\n    delete?: discussionboard_notification_preferenceWhereInput | boolean\n    connect?: discussionboard_notification_preferenceWhereUniqueInput\n    update?: XOR<XOR<discussionboard_notification_preferenceUpdateToOneWithWhereWithoutUserInput, discussionboard_notification_preferenceUpdateWithoutUserInput>, discussionboard_notification_preferenceUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput> | discussionboard_audit_logCreateWithoutFk_audit_actor_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput[]\n    upsert?: discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_actor_userInput | discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_actor_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_actor_userInputEnvelope\n    set?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    disconnect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    delete?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    update?: discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_actor_userInput | discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_actor_userInput[]\n    updateMany?: discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_actor_userInput | discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_actor_userInput[]\n    deleteMany?: discussionboard_audit_logScalarWhereInput | discussionboard_audit_logScalarWhereInput[]\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput = {\n    create?: XOR<discussionboard_audit_logCreateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput> | discussionboard_audit_logCreateWithoutFk_audit_target_userInput[] | discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput[]\n    connectOrCreate?: discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput | discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput[]\n    upsert?: discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_target_userInput | discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_target_userInput[]\n    createMany?: discussionboard_audit_logCreateManyFk_audit_target_userInputEnvelope\n    set?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    disconnect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    delete?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    connect?: discussionboard_audit_logWhereUniqueInput | discussionboard_audit_logWhereUniqueInput[]\n    update?: discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_target_userInput | discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_target_userInput[]\n    updateMany?: discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_target_userInput | discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_target_userInput[]\n    deleteMany?: discussionboard_audit_logScalarWhereInput | discussionboard_audit_logScalarWhereInput[]\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_user_profileInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_user_profileInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_user_profileInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_user_profileInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type NullableStringFieldUpdateOperationsInput = {\n    set?: string | null\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_user_profileNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_user_profileInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_user_profileInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_user_profileInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_user_profileInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_user_profileInput, discussionboard_userUpdateWithoutDiscussionboard_user_profileInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_user_profileInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_memberInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_memberInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_memberInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_memberInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedManyWithoutMemberInput = {\n    create?: XOR<discussionboard_postCreateWithoutMemberInput, discussionboard_postUncheckedCreateWithoutMemberInput> | discussionboard_postCreateWithoutMemberInput[] | discussionboard_postUncheckedCreateWithoutMemberInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutMemberInput | discussionboard_postCreateOrConnectWithoutMemberInput[]\n    createMany?: discussionboard_postCreateManyMemberInputEnvelope\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n  }\n\n  export type discussionboard_postUncheckedCreateNestedManyWithoutMemberInput = {\n    create?: XOR<discussionboard_postCreateWithoutMemberInput, discussionboard_postUncheckedCreateWithoutMemberInput> | discussionboard_postCreateWithoutMemberInput[] | discussionboard_postUncheckedCreateWithoutMemberInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutMemberInput | discussionboard_postCreateOrConnectWithoutMemberInput[]\n    createMany?: discussionboard_postCreateManyMemberInputEnvelope\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_memberNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_memberInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_memberInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_memberInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_memberInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_memberInput, discussionboard_userUpdateWithoutDiscussionboard_memberInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_memberInput>\n  }\n\n  export type discussionboard_postUpdateManyWithoutMemberNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutMemberInput, discussionboard_postUncheckedCreateWithoutMemberInput> | discussionboard_postCreateWithoutMemberInput[] | discussionboard_postUncheckedCreateWithoutMemberInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutMemberInput | discussionboard_postCreateOrConnectWithoutMemberInput[]\n    upsert?: discussionboard_postUpsertWithWhereUniqueWithoutMemberInput | discussionboard_postUpsertWithWhereUniqueWithoutMemberInput[]\n    createMany?: discussionboard_postCreateManyMemberInputEnvelope\n    set?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    disconnect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    delete?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    update?: discussionboard_postUpdateWithWhereUniqueWithoutMemberInput | discussionboard_postUpdateWithWhereUniqueWithoutMemberInput[]\n    updateMany?: discussionboard_postUpdateManyWithWhereWithoutMemberInput | discussionboard_postUpdateManyWithWhereWithoutMemberInput[]\n    deleteMany?: discussionboard_postScalarWhereInput | discussionboard_postScalarWhereInput[]\n  }\n\n  export type discussionboard_postUncheckedUpdateManyWithoutMemberNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutMemberInput, discussionboard_postUncheckedCreateWithoutMemberInput> | discussionboard_postCreateWithoutMemberInput[] | discussionboard_postUncheckedCreateWithoutMemberInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutMemberInput | discussionboard_postCreateOrConnectWithoutMemberInput[]\n    upsert?: discussionboard_postUpsertWithWhereUniqueWithoutMemberInput | discussionboard_postUpsertWithWhereUniqueWithoutMemberInput[]\n    createMany?: discussionboard_postCreateManyMemberInputEnvelope\n    set?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    disconnect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    delete?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    update?: discussionboard_postUpdateWithWhereUniqueWithoutMemberInput | discussionboard_postUpdateWithWhereUniqueWithoutMemberInput[]\n    updateMany?: discussionboard_postUpdateManyWithWhereWithoutMemberInput | discussionboard_postUpdateManyWithWhereWithoutMemberInput[]\n    deleteMany?: discussionboard_postScalarWhereInput | discussionboard_postScalarWhereInput[]\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_moderatorInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_moderatorInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderatorInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_moderatorInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderatorNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_moderatorInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderatorInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_moderatorInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_moderatorInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_moderatorInput, discussionboard_userUpdateWithoutDiscussionboard_moderatorInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderatorInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_adminInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_adminInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_adminInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_adminInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_adminNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_adminInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_adminInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_adminInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_adminInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_adminInput, discussionboard_userUpdateWithoutDiscussionboard_adminInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_adminInput>\n  }\n\n  export type discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput = {\n    create?: XOR<discussionboard_memberCreateWithoutDiscussionboard_postInput, discussionboard_memberUncheckedCreateWithoutDiscussionboard_postInput>\n    connectOrCreate?: discussionboard_memberCreateOrConnectWithoutDiscussionboard_postInput\n    connect?: discussionboard_memberWhereUniqueInput\n  }\n\n  export type discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput = {\n    create?: XOR<discussionboard_post_categoryCreateWithoutDiscussionboard_postInput, discussionboard_post_categoryUncheckedCreateWithoutDiscussionboard_postInput>\n    connectOrCreate?: discussionboard_post_categoryCreateOrConnectWithoutDiscussionboard_postInput\n    connect?: discussionboard_post_categoryWhereUniqueInput\n  }\n\n  export type discussionboard_post_attachmentCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_post_attachmentCreateWithoutPostInput, discussionboard_post_attachmentUncheckedCreateWithoutPostInput> | discussionboard_post_attachmentCreateWithoutPostInput[] | discussionboard_post_attachmentUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_post_attachmentCreateOrConnectWithoutPostInput | discussionboard_post_attachmentCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_post_attachmentCreateManyPostInputEnvelope\n    connect?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n  }\n\n  export type discussionboard_commentsCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutPostInput, discussionboard_commentsUncheckedCreateWithoutPostInput> | discussionboard_commentsCreateWithoutPostInput[] | discussionboard_commentsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutPostInput | discussionboard_commentsCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_commentsCreateManyPostInputEnvelope\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n  }\n\n  export type discussionboard_likesCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_likesCreateWithoutPostInput, discussionboard_likesUncheckedCreateWithoutPostInput> | discussionboard_likesCreateWithoutPostInput[] | discussionboard_likesUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutPostInput | discussionboard_likesCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_likesCreateManyPostInputEnvelope\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n  }\n\n  export type discussionboard_reportsCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutPostInput, discussionboard_reportsUncheckedCreateWithoutPostInput> | discussionboard_reportsCreateWithoutPostInput[] | discussionboard_reportsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutPostInput | discussionboard_reportsCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_reportsCreateManyPostInputEnvelope\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput> | discussionboard_moderation_actionCreateWithoutModerated_postInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_postInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput> | discussionboard_report_reviewCreateWithoutReviewed_postInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_postInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningCreateNestedManyWithoutWarning_postInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_postInput, discussionboard_warningUncheckedCreateWithoutWarning_postInput> | discussionboard_warningCreateWithoutWarning_postInput[] | discussionboard_warningUncheckedCreateWithoutWarning_postInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_postInput | discussionboard_warningCreateOrConnectWithoutWarning_postInput[]\n    createMany?: discussionboard_warningCreateManyWarning_postInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationCreateNestedManyWithoutRelated_postInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_postInput, discussionboard_notificationUncheckedCreateWithoutRelated_postInput> | discussionboard_notificationCreateWithoutRelated_postInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_postInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_postInput | discussionboard_notificationCreateOrConnectWithoutRelated_postInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_postInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_post_attachmentCreateWithoutPostInput, discussionboard_post_attachmentUncheckedCreateWithoutPostInput> | discussionboard_post_attachmentCreateWithoutPostInput[] | discussionboard_post_attachmentUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_post_attachmentCreateOrConnectWithoutPostInput | discussionboard_post_attachmentCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_post_attachmentCreateManyPostInputEnvelope\n    connect?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n  }\n\n  export type discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutPostInput, discussionboard_commentsUncheckedCreateWithoutPostInput> | discussionboard_commentsCreateWithoutPostInput[] | discussionboard_commentsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutPostInput | discussionboard_commentsCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_commentsCreateManyPostInputEnvelope\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n  }\n\n  export type discussionboard_likesUncheckedCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_likesCreateWithoutPostInput, discussionboard_likesUncheckedCreateWithoutPostInput> | discussionboard_likesCreateWithoutPostInput[] | discussionboard_likesUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutPostInput | discussionboard_likesCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_likesCreateManyPostInputEnvelope\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n  }\n\n  export type discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutPostInput, discussionboard_reportsUncheckedCreateWithoutPostInput> | discussionboard_reportsCreateWithoutPostInput[] | discussionboard_reportsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutPostInput | discussionboard_reportsCreateOrConnectWithoutPostInput[]\n    createMany?: discussionboard_reportsCreateManyPostInputEnvelope\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput> | discussionboard_moderation_actionCreateWithoutModerated_postInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_postInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput> | discussionboard_report_reviewCreateWithoutReviewed_postInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_postInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_postInput, discussionboard_warningUncheckedCreateWithoutWarning_postInput> | discussionboard_warningCreateWithoutWarning_postInput[] | discussionboard_warningUncheckedCreateWithoutWarning_postInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_postInput | discussionboard_warningCreateOrConnectWithoutWarning_postInput[]\n    createMany?: discussionboard_warningCreateManyWarning_postInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_postInput, discussionboard_notificationUncheckedCreateWithoutRelated_postInput> | discussionboard_notificationCreateWithoutRelated_postInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_postInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_postInput | discussionboard_notificationCreateOrConnectWithoutRelated_postInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_postInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type NullableDateTimeFieldUpdateOperationsInput = {\n    set?: Date | string | null\n  }\n\n  export type discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput = {\n    create?: XOR<discussionboard_memberCreateWithoutDiscussionboard_postInput, discussionboard_memberUncheckedCreateWithoutDiscussionboard_postInput>\n    connectOrCreate?: discussionboard_memberCreateOrConnectWithoutDiscussionboard_postInput\n    upsert?: discussionboard_memberUpsertWithoutDiscussionboard_postInput\n    connect?: discussionboard_memberWhereUniqueInput\n    update?: XOR<XOR<discussionboard_memberUpdateToOneWithWhereWithoutDiscussionboard_postInput, discussionboard_memberUpdateWithoutDiscussionboard_postInput>, discussionboard_memberUncheckedUpdateWithoutDiscussionboard_postInput>\n  }\n\n  export type discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput = {\n    create?: XOR<discussionboard_post_categoryCreateWithoutDiscussionboard_postInput, discussionboard_post_categoryUncheckedCreateWithoutDiscussionboard_postInput>\n    connectOrCreate?: discussionboard_post_categoryCreateOrConnectWithoutDiscussionboard_postInput\n    upsert?: discussionboard_post_categoryUpsertWithoutDiscussionboard_postInput\n    connect?: discussionboard_post_categoryWhereUniqueInput\n    update?: XOR<XOR<discussionboard_post_categoryUpdateToOneWithWhereWithoutDiscussionboard_postInput, discussionboard_post_categoryUpdateWithoutDiscussionboard_postInput>, discussionboard_post_categoryUncheckedUpdateWithoutDiscussionboard_postInput>\n  }\n\n  export type discussionboard_post_attachmentUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_post_attachmentCreateWithoutPostInput, discussionboard_post_attachmentUncheckedCreateWithoutPostInput> | discussionboard_post_attachmentCreateWithoutPostInput[] | discussionboard_post_attachmentUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_post_attachmentCreateOrConnectWithoutPostInput | discussionboard_post_attachmentCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_post_attachmentUpsertWithWhereUniqueWithoutPostInput | discussionboard_post_attachmentUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_post_attachmentCreateManyPostInputEnvelope\n    set?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    disconnect?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    delete?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    connect?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    update?: discussionboard_post_attachmentUpdateWithWhereUniqueWithoutPostInput | discussionboard_post_attachmentUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_post_attachmentUpdateManyWithWhereWithoutPostInput | discussionboard_post_attachmentUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_post_attachmentScalarWhereInput | discussionboard_post_attachmentScalarWhereInput[]\n  }\n\n  export type discussionboard_commentsUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutPostInput, discussionboard_commentsUncheckedCreateWithoutPostInput> | discussionboard_commentsCreateWithoutPostInput[] | discussionboard_commentsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutPostInput | discussionboard_commentsCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_commentsUpsertWithWhereUniqueWithoutPostInput | discussionboard_commentsUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_commentsCreateManyPostInputEnvelope\n    set?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    disconnect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    delete?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    update?: discussionboard_commentsUpdateWithWhereUniqueWithoutPostInput | discussionboard_commentsUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_commentsUpdateManyWithWhereWithoutPostInput | discussionboard_commentsUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n  }\n\n  export type discussionboard_likesUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_likesCreateWithoutPostInput, discussionboard_likesUncheckedCreateWithoutPostInput> | discussionboard_likesCreateWithoutPostInput[] | discussionboard_likesUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutPostInput | discussionboard_likesCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_likesUpsertWithWhereUniqueWithoutPostInput | discussionboard_likesUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_likesCreateManyPostInputEnvelope\n    set?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    disconnect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    delete?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    update?: discussionboard_likesUpdateWithWhereUniqueWithoutPostInput | discussionboard_likesUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_likesUpdateManyWithWhereWithoutPostInput | discussionboard_likesUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n  }\n\n  export type discussionboard_reportsUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutPostInput, discussionboard_reportsUncheckedCreateWithoutPostInput> | discussionboard_reportsCreateWithoutPostInput[] | discussionboard_reportsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutPostInput | discussionboard_reportsCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_reportsUpsertWithWhereUniqueWithoutPostInput | discussionboard_reportsUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_reportsCreateManyPostInputEnvelope\n    set?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    disconnect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    delete?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    update?: discussionboard_reportsUpdateWithWhereUniqueWithoutPostInput | discussionboard_reportsUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_reportsUpdateManyWithWhereWithoutPostInput | discussionboard_reportsUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput> | discussionboard_moderation_actionCreateWithoutModerated_postInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_postInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_postInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_postInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_postInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_postInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_postInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_postInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput> | discussionboard_report_reviewCreateWithoutReviewed_postInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_postInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_postInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_postInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_postInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_postInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_postInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_postInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUpdateManyWithoutWarning_postNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_postInput, discussionboard_warningUncheckedCreateWithoutWarning_postInput> | discussionboard_warningCreateWithoutWarning_postInput[] | discussionboard_warningUncheckedCreateWithoutWarning_postInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_postInput | discussionboard_warningCreateOrConnectWithoutWarning_postInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutWarning_postInput | discussionboard_warningUpsertWithWhereUniqueWithoutWarning_postInput[]\n    createMany?: discussionboard_warningCreateManyWarning_postInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutWarning_postInput | discussionboard_warningUpdateWithWhereUniqueWithoutWarning_postInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutWarning_postInput | discussionboard_warningUpdateManyWithWhereWithoutWarning_postInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUpdateManyWithoutRelated_postNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_postInput, discussionboard_notificationUncheckedCreateWithoutRelated_postInput> | discussionboard_notificationCreateWithoutRelated_postInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_postInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_postInput | discussionboard_notificationCreateOrConnectWithoutRelated_postInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_postInput | discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_postInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_postInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_postInput | discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_postInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutRelated_postInput | discussionboard_notificationUpdateManyWithWhereWithoutRelated_postInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_post_attachmentCreateWithoutPostInput, discussionboard_post_attachmentUncheckedCreateWithoutPostInput> | discussionboard_post_attachmentCreateWithoutPostInput[] | discussionboard_post_attachmentUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_post_attachmentCreateOrConnectWithoutPostInput | discussionboard_post_attachmentCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_post_attachmentUpsertWithWhereUniqueWithoutPostInput | discussionboard_post_attachmentUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_post_attachmentCreateManyPostInputEnvelope\n    set?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    disconnect?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    delete?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    connect?: discussionboard_post_attachmentWhereUniqueInput | discussionboard_post_attachmentWhereUniqueInput[]\n    update?: discussionboard_post_attachmentUpdateWithWhereUniqueWithoutPostInput | discussionboard_post_attachmentUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_post_attachmentUpdateManyWithWhereWithoutPostInput | discussionboard_post_attachmentUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_post_attachmentScalarWhereInput | discussionboard_post_attachmentScalarWhereInput[]\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutPostInput, discussionboard_commentsUncheckedCreateWithoutPostInput> | discussionboard_commentsCreateWithoutPostInput[] | discussionboard_commentsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutPostInput | discussionboard_commentsCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_commentsUpsertWithWhereUniqueWithoutPostInput | discussionboard_commentsUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_commentsCreateManyPostInputEnvelope\n    set?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    disconnect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    delete?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    update?: discussionboard_commentsUpdateWithWhereUniqueWithoutPostInput | discussionboard_commentsUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_commentsUpdateManyWithWhereWithoutPostInput | discussionboard_commentsUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_likesCreateWithoutPostInput, discussionboard_likesUncheckedCreateWithoutPostInput> | discussionboard_likesCreateWithoutPostInput[] | discussionboard_likesUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutPostInput | discussionboard_likesCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_likesUpsertWithWhereUniqueWithoutPostInput | discussionboard_likesUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_likesCreateManyPostInputEnvelope\n    set?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    disconnect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    delete?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    update?: discussionboard_likesUpdateWithWhereUniqueWithoutPostInput | discussionboard_likesUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_likesUpdateManyWithWhereWithoutPostInput | discussionboard_likesUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutPostInput, discussionboard_reportsUncheckedCreateWithoutPostInput> | discussionboard_reportsCreateWithoutPostInput[] | discussionboard_reportsUncheckedCreateWithoutPostInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutPostInput | discussionboard_reportsCreateOrConnectWithoutPostInput[]\n    upsert?: discussionboard_reportsUpsertWithWhereUniqueWithoutPostInput | discussionboard_reportsUpsertWithWhereUniqueWithoutPostInput[]\n    createMany?: discussionboard_reportsCreateManyPostInputEnvelope\n    set?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    disconnect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    delete?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    update?: discussionboard_reportsUpdateWithWhereUniqueWithoutPostInput | discussionboard_reportsUpdateWithWhereUniqueWithoutPostInput[]\n    updateMany?: discussionboard_reportsUpdateManyWithWhereWithoutPostInput | discussionboard_reportsUpdateManyWithWhereWithoutPostInput[]\n    deleteMany?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput> | discussionboard_moderation_actionCreateWithoutModerated_postInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_postInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_postInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_postInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_postInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_postInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_postInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_postInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput> | discussionboard_report_reviewCreateWithoutReviewed_postInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_postInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_postInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_postInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_postInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_postInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_postInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_postInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_postInput, discussionboard_warningUncheckedCreateWithoutWarning_postInput> | discussionboard_warningCreateWithoutWarning_postInput[] | discussionboard_warningUncheckedCreateWithoutWarning_postInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_postInput | discussionboard_warningCreateOrConnectWithoutWarning_postInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutWarning_postInput | discussionboard_warningUpsertWithWhereUniqueWithoutWarning_postInput[]\n    createMany?: discussionboard_warningCreateManyWarning_postInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutWarning_postInput | discussionboard_warningUpdateWithWhereUniqueWithoutWarning_postInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutWarning_postInput | discussionboard_warningUpdateManyWithWhereWithoutWarning_postInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_postInput, discussionboard_notificationUncheckedCreateWithoutRelated_postInput> | discussionboard_notificationCreateWithoutRelated_postInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_postInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_postInput | discussionboard_notificationCreateOrConnectWithoutRelated_postInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_postInput | discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_postInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_postInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_postInput | discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_postInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutRelated_postInput | discussionboard_notificationUpdateManyWithWhereWithoutRelated_postInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_postCreateNestedManyWithoutCategoryInput = {\n    create?: XOR<discussionboard_postCreateWithoutCategoryInput, discussionboard_postUncheckedCreateWithoutCategoryInput> | discussionboard_postCreateWithoutCategoryInput[] | discussionboard_postUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutCategoryInput | discussionboard_postCreateOrConnectWithoutCategoryInput[]\n    createMany?: discussionboard_postCreateManyCategoryInputEnvelope\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n  }\n\n  export type discussionboard_postUncheckedCreateNestedManyWithoutCategoryInput = {\n    create?: XOR<discussionboard_postCreateWithoutCategoryInput, discussionboard_postUncheckedCreateWithoutCategoryInput> | discussionboard_postCreateWithoutCategoryInput[] | discussionboard_postUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutCategoryInput | discussionboard_postCreateOrConnectWithoutCategoryInput[]\n    createMany?: discussionboard_postCreateManyCategoryInputEnvelope\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n  }\n\n  export type discussionboard_postUpdateManyWithoutCategoryNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutCategoryInput, discussionboard_postUncheckedCreateWithoutCategoryInput> | discussionboard_postCreateWithoutCategoryInput[] | discussionboard_postUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutCategoryInput | discussionboard_postCreateOrConnectWithoutCategoryInput[]\n    upsert?: discussionboard_postUpsertWithWhereUniqueWithoutCategoryInput | discussionboard_postUpsertWithWhereUniqueWithoutCategoryInput[]\n    createMany?: discussionboard_postCreateManyCategoryInputEnvelope\n    set?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    disconnect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    delete?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    update?: discussionboard_postUpdateWithWhereUniqueWithoutCategoryInput | discussionboard_postUpdateWithWhereUniqueWithoutCategoryInput[]\n    updateMany?: discussionboard_postUpdateManyWithWhereWithoutCategoryInput | discussionboard_postUpdateManyWithWhereWithoutCategoryInput[]\n    deleteMany?: discussionboard_postScalarWhereInput | discussionboard_postScalarWhereInput[]\n  }\n\n  export type discussionboard_postUncheckedUpdateManyWithoutCategoryNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutCategoryInput, discussionboard_postUncheckedCreateWithoutCategoryInput> | discussionboard_postCreateWithoutCategoryInput[] | discussionboard_postUncheckedCreateWithoutCategoryInput[]\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutCategoryInput | discussionboard_postCreateOrConnectWithoutCategoryInput[]\n    upsert?: discussionboard_postUpsertWithWhereUniqueWithoutCategoryInput | discussionboard_postUpsertWithWhereUniqueWithoutCategoryInput[]\n    createMany?: discussionboard_postCreateManyCategoryInputEnvelope\n    set?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    disconnect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    delete?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    connect?: discussionboard_postWhereUniqueInput | discussionboard_postWhereUniqueInput[]\n    update?: discussionboard_postUpdateWithWhereUniqueWithoutCategoryInput | discussionboard_postUpdateWithWhereUniqueWithoutCategoryInput[]\n    updateMany?: discussionboard_postUpdateManyWithWhereWithoutCategoryInput | discussionboard_postUpdateManyWithWhereWithoutCategoryInput[]\n    deleteMany?: discussionboard_postScalarWhereInput | discussionboard_postScalarWhereInput[]\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_post_attachmentInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_post_attachmentInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_post_attachmentInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_post_attachmentInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_postUpdateOneRequiredWithoutDiscussionboard_post_attachmentNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_post_attachmentInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_post_attachmentInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_post_attachmentInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_post_attachmentInput\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_post_attachmentInput, discussionboard_postUpdateWithoutDiscussionboard_post_attachmentInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_post_attachmentInput>\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_commentsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_commentsInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_commentsInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_commentsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_commentsInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_commentsInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutRecursiveInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutRecursiveInput, discussionboard_commentsUncheckedCreateWithoutRecursiveInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutRecursiveInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedManyWithoutParent_commentInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutParent_commentInput, discussionboard_commentsUncheckedCreateWithoutParent_commentInput> | discussionboard_commentsCreateWithoutParent_commentInput[] | discussionboard_commentsUncheckedCreateWithoutParent_commentInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutParent_commentInput | discussionboard_commentsCreateOrConnectWithoutParent_commentInput[]\n    createMany?: discussionboard_commentsCreateManyParent_commentInputEnvelope\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n  }\n\n  export type discussionboard_likesCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussionboard_likesCreateWithoutCommentInput, discussionboard_likesUncheckedCreateWithoutCommentInput> | discussionboard_likesCreateWithoutCommentInput[] | discussionboard_likesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutCommentInput | discussionboard_likesCreateOrConnectWithoutCommentInput[]\n    createMany?: discussionboard_likesCreateManyCommentInputEnvelope\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n  }\n\n  export type discussionboard_reportsCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutCommentInput, discussionboard_reportsUncheckedCreateWithoutCommentInput> | discussionboard_reportsCreateWithoutCommentInput[] | discussionboard_reportsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutCommentInput | discussionboard_reportsCreateOrConnectWithoutCommentInput[]\n    createMany?: discussionboard_reportsCreateManyCommentInputEnvelope\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput> | discussionboard_moderation_actionCreateWithoutModerated_commentInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_commentInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput> | discussionboard_report_reviewCreateWithoutReviewed_commentInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_commentInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningCreateNestedManyWithoutWarning_commentInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_commentInput, discussionboard_warningUncheckedCreateWithoutWarning_commentInput> | discussionboard_warningCreateWithoutWarning_commentInput[] | discussionboard_warningUncheckedCreateWithoutWarning_commentInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_commentInput | discussionboard_warningCreateOrConnectWithoutWarning_commentInput[]\n    createMany?: discussionboard_warningCreateManyWarning_commentInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationCreateNestedManyWithoutRelated_commentInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_commentInput, discussionboard_notificationUncheckedCreateWithoutRelated_commentInput> | discussionboard_notificationCreateWithoutRelated_commentInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_commentInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_commentInput | discussionboard_notificationCreateOrConnectWithoutRelated_commentInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_commentInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutParent_commentInput, discussionboard_commentsUncheckedCreateWithoutParent_commentInput> | discussionboard_commentsCreateWithoutParent_commentInput[] | discussionboard_commentsUncheckedCreateWithoutParent_commentInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutParent_commentInput | discussionboard_commentsCreateOrConnectWithoutParent_commentInput[]\n    createMany?: discussionboard_commentsCreateManyParent_commentInputEnvelope\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n  }\n\n  export type discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussionboard_likesCreateWithoutCommentInput, discussionboard_likesUncheckedCreateWithoutCommentInput> | discussionboard_likesCreateWithoutCommentInput[] | discussionboard_likesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutCommentInput | discussionboard_likesCreateOrConnectWithoutCommentInput[]\n    createMany?: discussionboard_likesCreateManyCommentInputEnvelope\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n  }\n\n  export type discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutCommentInput, discussionboard_reportsUncheckedCreateWithoutCommentInput> | discussionboard_reportsCreateWithoutCommentInput[] | discussionboard_reportsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutCommentInput | discussionboard_reportsCreateOrConnectWithoutCommentInput[]\n    createMany?: discussionboard_reportsCreateManyCommentInputEnvelope\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput> | discussionboard_moderation_actionCreateWithoutModerated_commentInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_commentInputEnvelope\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput> | discussionboard_report_reviewCreateWithoutReviewed_commentInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_commentInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_commentInput, discussionboard_warningUncheckedCreateWithoutWarning_commentInput> | discussionboard_warningCreateWithoutWarning_commentInput[] | discussionboard_warningUncheckedCreateWithoutWarning_commentInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_commentInput | discussionboard_warningCreateOrConnectWithoutWarning_commentInput[]\n    createMany?: discussionboard_warningCreateManyWarning_commentInputEnvelope\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n  }\n\n  export type discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_commentInput, discussionboard_notificationUncheckedCreateWithoutRelated_commentInput> | discussionboard_notificationCreateWithoutRelated_commentInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_commentInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_commentInput | discussionboard_notificationCreateOrConnectWithoutRelated_commentInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_commentInputEnvelope\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n  }\n\n  export type discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_commentsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_commentsInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_commentsInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_commentsInput\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_commentsInput, discussionboard_postUpdateWithoutDiscussionboard_commentsInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_commentsInput>\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_commentsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_commentsInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_commentsInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_commentsInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_commentsInput, discussionboard_userUpdateWithoutDiscussionboard_commentsInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_commentsInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutRecursiveNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutRecursiveInput, discussionboard_commentsUncheckedCreateWithoutRecursiveInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutRecursiveInput\n    upsert?: discussionboard_commentsUpsertWithoutRecursiveInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutRecursiveInput, discussionboard_commentsUpdateWithoutRecursiveInput>, discussionboard_commentsUncheckedUpdateWithoutRecursiveInput>\n  }\n\n  export type discussionboard_commentsUpdateManyWithoutParent_commentNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutParent_commentInput, discussionboard_commentsUncheckedCreateWithoutParent_commentInput> | discussionboard_commentsCreateWithoutParent_commentInput[] | discussionboard_commentsUncheckedCreateWithoutParent_commentInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutParent_commentInput | discussionboard_commentsCreateOrConnectWithoutParent_commentInput[]\n    upsert?: discussionboard_commentsUpsertWithWhereUniqueWithoutParent_commentInput | discussionboard_commentsUpsertWithWhereUniqueWithoutParent_commentInput[]\n    createMany?: discussionboard_commentsCreateManyParent_commentInputEnvelope\n    set?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    disconnect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    delete?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    update?: discussionboard_commentsUpdateWithWhereUniqueWithoutParent_commentInput | discussionboard_commentsUpdateWithWhereUniqueWithoutParent_commentInput[]\n    updateMany?: discussionboard_commentsUpdateManyWithWhereWithoutParent_commentInput | discussionboard_commentsUpdateManyWithWhereWithoutParent_commentInput[]\n    deleteMany?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n  }\n\n  export type discussionboard_likesUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussionboard_likesCreateWithoutCommentInput, discussionboard_likesUncheckedCreateWithoutCommentInput> | discussionboard_likesCreateWithoutCommentInput[] | discussionboard_likesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutCommentInput | discussionboard_likesCreateOrConnectWithoutCommentInput[]\n    upsert?: discussionboard_likesUpsertWithWhereUniqueWithoutCommentInput | discussionboard_likesUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussionboard_likesCreateManyCommentInputEnvelope\n    set?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    disconnect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    delete?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    update?: discussionboard_likesUpdateWithWhereUniqueWithoutCommentInput | discussionboard_likesUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussionboard_likesUpdateManyWithWhereWithoutCommentInput | discussionboard_likesUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n  }\n\n  export type discussionboard_reportsUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutCommentInput, discussionboard_reportsUncheckedCreateWithoutCommentInput> | discussionboard_reportsCreateWithoutCommentInput[] | discussionboard_reportsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutCommentInput | discussionboard_reportsCreateOrConnectWithoutCommentInput[]\n    upsert?: discussionboard_reportsUpsertWithWhereUniqueWithoutCommentInput | discussionboard_reportsUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussionboard_reportsCreateManyCommentInputEnvelope\n    set?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    disconnect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    delete?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    update?: discussionboard_reportsUpdateWithWhereUniqueWithoutCommentInput | discussionboard_reportsUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussionboard_reportsUpdateManyWithWhereWithoutCommentInput | discussionboard_reportsUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput> | discussionboard_moderation_actionCreateWithoutModerated_commentInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_commentInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_commentInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_commentInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_commentInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_commentInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_commentInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_commentInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput> | discussionboard_report_reviewCreateWithoutReviewed_commentInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_commentInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_commentInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_commentInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_commentInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_commentInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_commentInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_commentInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUpdateManyWithoutWarning_commentNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_commentInput, discussionboard_warningUncheckedCreateWithoutWarning_commentInput> | discussionboard_warningCreateWithoutWarning_commentInput[] | discussionboard_warningUncheckedCreateWithoutWarning_commentInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_commentInput | discussionboard_warningCreateOrConnectWithoutWarning_commentInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutWarning_commentInput | discussionboard_warningUpsertWithWhereUniqueWithoutWarning_commentInput[]\n    createMany?: discussionboard_warningCreateManyWarning_commentInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutWarning_commentInput | discussionboard_warningUpdateWithWhereUniqueWithoutWarning_commentInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutWarning_commentInput | discussionboard_warningUpdateManyWithWhereWithoutWarning_commentInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_commentInput, discussionboard_notificationUncheckedCreateWithoutRelated_commentInput> | discussionboard_notificationCreateWithoutRelated_commentInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_commentInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_commentInput | discussionboard_notificationCreateOrConnectWithoutRelated_commentInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_commentInput | discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_commentInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_commentInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_commentInput | discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_commentInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutRelated_commentInput | discussionboard_notificationUpdateManyWithWhereWithoutRelated_commentInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutParent_commentInput, discussionboard_commentsUncheckedCreateWithoutParent_commentInput> | discussionboard_commentsCreateWithoutParent_commentInput[] | discussionboard_commentsUncheckedCreateWithoutParent_commentInput[]\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutParent_commentInput | discussionboard_commentsCreateOrConnectWithoutParent_commentInput[]\n    upsert?: discussionboard_commentsUpsertWithWhereUniqueWithoutParent_commentInput | discussionboard_commentsUpsertWithWhereUniqueWithoutParent_commentInput[]\n    createMany?: discussionboard_commentsCreateManyParent_commentInputEnvelope\n    set?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    disconnect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    delete?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    connect?: discussionboard_commentsWhereUniqueInput | discussionboard_commentsWhereUniqueInput[]\n    update?: discussionboard_commentsUpdateWithWhereUniqueWithoutParent_commentInput | discussionboard_commentsUpdateWithWhereUniqueWithoutParent_commentInput[]\n    updateMany?: discussionboard_commentsUpdateManyWithWhereWithoutParent_commentInput | discussionboard_commentsUpdateManyWithWhereWithoutParent_commentInput[]\n    deleteMany?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussionboard_likesCreateWithoutCommentInput, discussionboard_likesUncheckedCreateWithoutCommentInput> | discussionboard_likesCreateWithoutCommentInput[] | discussionboard_likesUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_likesCreateOrConnectWithoutCommentInput | discussionboard_likesCreateOrConnectWithoutCommentInput[]\n    upsert?: discussionboard_likesUpsertWithWhereUniqueWithoutCommentInput | discussionboard_likesUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussionboard_likesCreateManyCommentInputEnvelope\n    set?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    disconnect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    delete?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    connect?: discussionboard_likesWhereUniqueInput | discussionboard_likesWhereUniqueInput[]\n    update?: discussionboard_likesUpdateWithWhereUniqueWithoutCommentInput | discussionboard_likesUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussionboard_likesUpdateManyWithWhereWithoutCommentInput | discussionboard_likesUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutCommentInput, discussionboard_reportsUncheckedCreateWithoutCommentInput> | discussionboard_reportsCreateWithoutCommentInput[] | discussionboard_reportsUncheckedCreateWithoutCommentInput[]\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutCommentInput | discussionboard_reportsCreateOrConnectWithoutCommentInput[]\n    upsert?: discussionboard_reportsUpsertWithWhereUniqueWithoutCommentInput | discussionboard_reportsUpsertWithWhereUniqueWithoutCommentInput[]\n    createMany?: discussionboard_reportsCreateManyCommentInputEnvelope\n    set?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    disconnect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    delete?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    connect?: discussionboard_reportsWhereUniqueInput | discussionboard_reportsWhereUniqueInput[]\n    update?: discussionboard_reportsUpdateWithWhereUniqueWithoutCommentInput | discussionboard_reportsUpdateWithWhereUniqueWithoutCommentInput[]\n    updateMany?: discussionboard_reportsUpdateManyWithWhereWithoutCommentInput | discussionboard_reportsUpdateManyWithWhereWithoutCommentInput[]\n    deleteMany?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput = {\n    create?: XOR<discussionboard_moderation_actionCreateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput> | discussionboard_moderation_actionCreateWithoutModerated_commentInput[] | discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput[]\n    connectOrCreate?: discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput | discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput[]\n    upsert?: discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_commentInput | discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_commentInput[]\n    createMany?: discussionboard_moderation_actionCreateManyModerated_commentInputEnvelope\n    set?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    disconnect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    delete?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    connect?: discussionboard_moderation_actionWhereUniqueInput | discussionboard_moderation_actionWhereUniqueInput[]\n    update?: discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_commentInput | discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_commentInput[]\n    updateMany?: discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_commentInput | discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_commentInput[]\n    deleteMany?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput> | discussionboard_report_reviewCreateWithoutReviewed_commentInput[] | discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput | discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_commentInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_commentInput[]\n    createMany?: discussionboard_report_reviewCreateManyReviewed_commentInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_commentInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_commentInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_commentInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_commentInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutWarning_commentInput, discussionboard_warningUncheckedCreateWithoutWarning_commentInput> | discussionboard_warningCreateWithoutWarning_commentInput[] | discussionboard_warningUncheckedCreateWithoutWarning_commentInput[]\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutWarning_commentInput | discussionboard_warningCreateOrConnectWithoutWarning_commentInput[]\n    upsert?: discussionboard_warningUpsertWithWhereUniqueWithoutWarning_commentInput | discussionboard_warningUpsertWithWhereUniqueWithoutWarning_commentInput[]\n    createMany?: discussionboard_warningCreateManyWarning_commentInputEnvelope\n    set?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    disconnect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    delete?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    connect?: discussionboard_warningWhereUniqueInput | discussionboard_warningWhereUniqueInput[]\n    update?: discussionboard_warningUpdateWithWhereUniqueWithoutWarning_commentInput | discussionboard_warningUpdateWithWhereUniqueWithoutWarning_commentInput[]\n    updateMany?: discussionboard_warningUpdateManyWithWhereWithoutWarning_commentInput | discussionboard_warningUpdateManyWithWhereWithoutWarning_commentInput[]\n    deleteMany?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput = {\n    create?: XOR<discussionboard_notificationCreateWithoutRelated_commentInput, discussionboard_notificationUncheckedCreateWithoutRelated_commentInput> | discussionboard_notificationCreateWithoutRelated_commentInput[] | discussionboard_notificationUncheckedCreateWithoutRelated_commentInput[]\n    connectOrCreate?: discussionboard_notificationCreateOrConnectWithoutRelated_commentInput | discussionboard_notificationCreateOrConnectWithoutRelated_commentInput[]\n    upsert?: discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_commentInput | discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_commentInput[]\n    createMany?: discussionboard_notificationCreateManyRelated_commentInputEnvelope\n    set?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    disconnect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    delete?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    connect?: discussionboard_notificationWhereUniqueInput | discussionboard_notificationWhereUniqueInput[]\n    update?: discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_commentInput | discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_commentInput[]\n    updateMany?: discussionboard_notificationUpdateManyWithWhereWithoutRelated_commentInput | discussionboard_notificationUpdateManyWithWhereWithoutRelated_commentInput[]\n    deleteMany?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_likesInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_likesInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_likesInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_likesInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_likesInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_likesInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_likesInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_likesInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutDiscussionboard_likesInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_likesInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_likesInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_likesInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_likesNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_likesInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_likesInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_likesInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_likesInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_likesInput, discussionboard_userUpdateWithoutDiscussionboard_likesInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_postUpdateOneWithoutDiscussionboard_likesNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_likesInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_likesInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_likesInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_likesInput\n    disconnect?: discussionboard_postWhereInput | boolean\n    delete?: discussionboard_postWhereInput | boolean\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_likesInput, discussionboard_postUpdateWithoutDiscussionboard_likesInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutDiscussionboard_likesNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_likesInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_likesInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_likesInput\n    upsert?: discussionboard_commentsUpsertWithoutDiscussionboard_likesInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_likesInput, discussionboard_commentsUpdateWithoutDiscussionboard_likesInput>, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_reportsInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_reportsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_reportsInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_reportsInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_reportsInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_reportsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_reportsInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_reportsInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutDiscussionboard_reportsInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_reportsInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_reportsInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_reportsInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_report_reviewCreateNestedManyWithoutReportInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReportInput, discussionboard_report_reviewUncheckedCreateWithoutReportInput> | discussionboard_report_reviewCreateWithoutReportInput[] | discussionboard_report_reviewUncheckedCreateWithoutReportInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReportInput | discussionboard_report_reviewCreateOrConnectWithoutReportInput[]\n    createMany?: discussionboard_report_reviewCreateManyReportInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateNestedManyWithoutReportInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReportInput, discussionboard_report_reviewUncheckedCreateWithoutReportInput> | discussionboard_report_reviewCreateWithoutReportInput[] | discussionboard_report_reviewUncheckedCreateWithoutReportInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReportInput | discussionboard_report_reviewCreateOrConnectWithoutReportInput[]\n    createMany?: discussionboard_report_reviewCreateManyReportInputEnvelope\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_reportsNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_reportsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_reportsInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_reportsInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_reportsInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_reportsInput, discussionboard_userUpdateWithoutDiscussionboard_reportsInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_postUpdateOneWithoutDiscussionboard_reportsNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_reportsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_reportsInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_reportsInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_reportsInput\n    disconnect?: discussionboard_postWhereInput | boolean\n    delete?: discussionboard_postWhereInput | boolean\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_reportsInput, discussionboard_postUpdateWithoutDiscussionboard_reportsInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutDiscussionboard_reportsNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_reportsInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_reportsInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_reportsInput\n    upsert?: discussionboard_commentsUpsertWithoutDiscussionboard_reportsInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_reportsInput, discussionboard_commentsUpdateWithoutDiscussionboard_reportsInput>, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithoutReportNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReportInput, discussionboard_report_reviewUncheckedCreateWithoutReportInput> | discussionboard_report_reviewCreateWithoutReportInput[] | discussionboard_report_reviewUncheckedCreateWithoutReportInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReportInput | discussionboard_report_reviewCreateOrConnectWithoutReportInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReportInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReportInput[]\n    createMany?: discussionboard_report_reviewCreateManyReportInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReportInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReportInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReportInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReportInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReportNestedInput = {\n    create?: XOR<discussionboard_report_reviewCreateWithoutReportInput, discussionboard_report_reviewUncheckedCreateWithoutReportInput> | discussionboard_report_reviewCreateWithoutReportInput[] | discussionboard_report_reviewUncheckedCreateWithoutReportInput[]\n    connectOrCreate?: discussionboard_report_reviewCreateOrConnectWithoutReportInput | discussionboard_report_reviewCreateOrConnectWithoutReportInput[]\n    upsert?: discussionboard_report_reviewUpsertWithWhereUniqueWithoutReportInput | discussionboard_report_reviewUpsertWithWhereUniqueWithoutReportInput[]\n    createMany?: discussionboard_report_reviewCreateManyReportInputEnvelope\n    set?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    disconnect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    delete?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    connect?: discussionboard_report_reviewWhereUniqueInput | discussionboard_report_reviewWhereUniqueInput[]\n    update?: discussionboard_report_reviewUpdateWithWhereUniqueWithoutReportInput | discussionboard_report_reviewUpdateWithWhereUniqueWithoutReportInput[]\n    updateMany?: discussionboard_report_reviewUpdateManyWithWhereWithoutReportInput | discussionboard_report_reviewUpdateManyWithWhereWithoutReportInput[]\n    deleteMany?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_moderation_action_of_actor_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_moderation_actionInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_moderation_actionInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutDiscussionboard_moderation_actionInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_moderation_actionInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_actor_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_moderation_action_of_actor_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_moderation_action_of_actor_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_target_user_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n  }\n\n  export type discussionboard_postUpdateOneWithoutDiscussionboard_moderation_actionNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_moderation_actionInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_moderation_actionInput\n    disconnect?: discussionboard_postWhereInput | boolean\n    delete?: discussionboard_postWhereInput | boolean\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_moderation_actionInput, discussionboard_postUpdateWithoutDiscussionboard_moderation_actionInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_moderation_actionInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutDiscussionboard_moderation_actionNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_moderation_actionInput\n    upsert?: discussionboard_commentsUpsertWithoutDiscussionboard_moderation_actionInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUpdateWithoutDiscussionboard_moderation_actionInput>, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_moderation_actionInput>\n  }\n\n  export type discussionboard_reportsCreateNestedOneWithoutDiscussionboard_report_reviewInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    connect?: discussionboard_reportsWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_report_reviewInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_report_reviewInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_report_reviewInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_report_reviewInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutDiscussionboard_report_reviewInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_reportsUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput = {\n    create?: XOR<discussionboard_reportsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_reportsCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    upsert?: discussionboard_reportsUpsertWithoutDiscussionboard_report_reviewInput\n    connect?: discussionboard_reportsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_reportsUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUpdateWithoutDiscussionboard_report_reviewInput>, discussionboard_reportsUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_report_reviewInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_report_reviewInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput, discussionboard_userUpdateWithoutDiscussionboard_report_reviewInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_postUpdateOneWithoutDiscussionboard_report_reviewNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_report_reviewInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_report_reviewInput\n    disconnect?: discussionboard_postWhereInput | boolean\n    delete?: discussionboard_postWhereInput | boolean\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput, discussionboard_postUpdateWithoutDiscussionboard_report_reviewInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutDiscussionboard_report_reviewNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_report_reviewInput\n    upsert?: discussionboard_commentsUpsertWithoutDiscussionboard_report_reviewInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUpdateWithoutDiscussionboard_report_reviewInput>, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_by_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_warning_of_issued_by_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_to_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_warning_of_issued_to_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_warningInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_warningInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_warningInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_warningInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutDiscussionboard_warningInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_warningInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_warningInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_warningInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_banCreateNestedManyWithoutRelated_warningInput = {\n    create?: XOR<discussionboard_banCreateWithoutRelated_warningInput, discussionboard_banUncheckedCreateWithoutRelated_warningInput> | discussionboard_banCreateWithoutRelated_warningInput[] | discussionboard_banUncheckedCreateWithoutRelated_warningInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutRelated_warningInput | discussionboard_banCreateOrConnectWithoutRelated_warningInput[]\n    createMany?: discussionboard_banCreateManyRelated_warningInputEnvelope\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n  }\n\n  export type discussionboard_banUncheckedCreateNestedManyWithoutRelated_warningInput = {\n    create?: XOR<discussionboard_banCreateWithoutRelated_warningInput, discussionboard_banUncheckedCreateWithoutRelated_warningInput> | discussionboard_banCreateWithoutRelated_warningInput[] | discussionboard_banUncheckedCreateWithoutRelated_warningInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutRelated_warningInput | discussionboard_banCreateOrConnectWithoutRelated_warningInput[]\n    createMany?: discussionboard_banCreateManyRelated_warningInputEnvelope\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_by_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_by_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_warning_of_issued_by_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_warning_of_issued_by_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_by_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_by_idInput>\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_to_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_to_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_warning_of_issued_to_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_warning_of_issued_to_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_to_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_to_idInput>\n  }\n\n  export type discussionboard_postUpdateOneWithoutDiscussionboard_warningNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_warningInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_warningInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_warningInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_warningInput\n    disconnect?: discussionboard_postWhereInput | boolean\n    delete?: discussionboard_postWhereInput | boolean\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_warningInput, discussionboard_postUpdateWithoutDiscussionboard_warningInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_warningInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutDiscussionboard_warningNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_warningInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_warningInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_warningInput\n    upsert?: discussionboard_commentsUpsertWithoutDiscussionboard_warningInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_warningInput, discussionboard_commentsUpdateWithoutDiscussionboard_warningInput>, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_warningInput>\n  }\n\n  export type discussionboard_banUpdateManyWithoutRelated_warningNestedInput = {\n    create?: XOR<discussionboard_banCreateWithoutRelated_warningInput, discussionboard_banUncheckedCreateWithoutRelated_warningInput> | discussionboard_banCreateWithoutRelated_warningInput[] | discussionboard_banUncheckedCreateWithoutRelated_warningInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutRelated_warningInput | discussionboard_banCreateOrConnectWithoutRelated_warningInput[]\n    upsert?: discussionboard_banUpsertWithWhereUniqueWithoutRelated_warningInput | discussionboard_banUpsertWithWhereUniqueWithoutRelated_warningInput[]\n    createMany?: discussionboard_banCreateManyRelated_warningInputEnvelope\n    set?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    disconnect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    delete?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    update?: discussionboard_banUpdateWithWhereUniqueWithoutRelated_warningInput | discussionboard_banUpdateWithWhereUniqueWithoutRelated_warningInput[]\n    updateMany?: discussionboard_banUpdateManyWithWhereWithoutRelated_warningInput | discussionboard_banUpdateManyWithWhereWithoutRelated_warningInput[]\n    deleteMany?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n  }\n\n  export type discussionboard_banUncheckedUpdateManyWithoutRelated_warningNestedInput = {\n    create?: XOR<discussionboard_banCreateWithoutRelated_warningInput, discussionboard_banUncheckedCreateWithoutRelated_warningInput> | discussionboard_banCreateWithoutRelated_warningInput[] | discussionboard_banUncheckedCreateWithoutRelated_warningInput[]\n    connectOrCreate?: discussionboard_banCreateOrConnectWithoutRelated_warningInput | discussionboard_banCreateOrConnectWithoutRelated_warningInput[]\n    upsert?: discussionboard_banUpsertWithWhereUniqueWithoutRelated_warningInput | discussionboard_banUpsertWithWhereUniqueWithoutRelated_warningInput[]\n    createMany?: discussionboard_banCreateManyRelated_warningInputEnvelope\n    set?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    disconnect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    delete?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    connect?: discussionboard_banWhereUniqueInput | discussionboard_banWhereUniqueInput[]\n    update?: discussionboard_banUpdateWithWhereUniqueWithoutRelated_warningInput | discussionboard_banUpdateWithWhereUniqueWithoutRelated_warningInput[]\n    updateMany?: discussionboard_banUpdateManyWithWhereWithoutRelated_warningInput | discussionboard_banUpdateManyWithWhereWithoutRelated_warningInput[]\n    deleteMany?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_ban_of_banned_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_by_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_ban_of_banned_by_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_warningCreateNestedOneWithoutDiscussionboard_banInput = {\n    create?: XOR<discussionboard_warningCreateWithoutDiscussionboard_banInput, discussionboard_warningUncheckedCreateWithoutDiscussionboard_banInput>\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutDiscussionboard_banInput\n    connect?: discussionboard_warningWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_user_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_ban_of_banned_user_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_ban_of_banned_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_user_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_user_idInput>\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_by_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_by_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_ban_of_banned_by_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_ban_of_banned_by_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_by_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_by_idInput>\n  }\n\n  export type discussionboard_warningUpdateOneWithoutDiscussionboard_banNestedInput = {\n    create?: XOR<discussionboard_warningCreateWithoutDiscussionboard_banInput, discussionboard_warningUncheckedCreateWithoutDiscussionboard_banInput>\n    connectOrCreate?: discussionboard_warningCreateOrConnectWithoutDiscussionboard_banInput\n    upsert?: discussionboard_warningUpsertWithoutDiscussionboard_banInput\n    disconnect?: discussionboard_warningWhereInput | boolean\n    delete?: discussionboard_warningWhereInput | boolean\n    connect?: discussionboard_warningWhereUniqueInput\n    update?: XOR<XOR<discussionboard_warningUpdateToOneWithWhereWithoutDiscussionboard_banInput, discussionboard_warningUpdateWithoutDiscussionboard_banInput>, discussionboard_warningUncheckedUpdateWithoutDiscussionboard_banInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_of_recipient_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_postCreateNestedOneWithoutDiscussionboard_notificationInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_notificationInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_notificationInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_notificationInput\n    connect?: discussionboard_postWhereUniqueInput\n  }\n\n  export type discussionboard_commentsCreateNestedOneWithoutDiscussionboard_notificationInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_notificationInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_notificationInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_notificationInput\n    connect?: discussionboard_commentsWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_actor_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_of_actor_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_of_recipient_user_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_of_recipient_user_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_notification_of_recipient_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n  }\n\n  export type discussionboard_postUpdateOneWithoutDiscussionboard_notificationNestedInput = {\n    create?: XOR<discussionboard_postCreateWithoutDiscussionboard_notificationInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_notificationInput>\n    connectOrCreate?: discussionboard_postCreateOrConnectWithoutDiscussionboard_notificationInput\n    upsert?: discussionboard_postUpsertWithoutDiscussionboard_notificationInput\n    disconnect?: discussionboard_postWhereInput | boolean\n    delete?: discussionboard_postWhereInput | boolean\n    connect?: discussionboard_postWhereUniqueInput\n    update?: XOR<XOR<discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_notificationInput, discussionboard_postUpdateWithoutDiscussionboard_notificationInput>, discussionboard_postUncheckedUpdateWithoutDiscussionboard_notificationInput>\n  }\n\n  export type discussionboard_commentsUpdateOneWithoutDiscussionboard_notificationNestedInput = {\n    create?: XOR<discussionboard_commentsCreateWithoutDiscussionboard_notificationInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_notificationInput>\n    connectOrCreate?: discussionboard_commentsCreateOrConnectWithoutDiscussionboard_notificationInput\n    upsert?: discussionboard_commentsUpsertWithoutDiscussionboard_notificationInput\n    disconnect?: discussionboard_commentsWhereInput | boolean\n    delete?: discussionboard_commentsWhereInput | boolean\n    connect?: discussionboard_commentsWhereUniqueInput\n    update?: XOR<XOR<discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_notificationInput, discussionboard_commentsUpdateWithoutDiscussionboard_notificationInput>, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_notificationInput>\n  }\n\n  export type discussionboard_userUpdateOneWithoutDiscussionboard_notification_of_actor_user_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_actor_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_of_actor_user_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_notification_of_actor_user_idInput\n    disconnect?: discussionboard_userWhereInput | boolean\n    delete?: discussionboard_userWhereInput | boolean\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUpdateWithoutDiscussionboard_notification_of_actor_user_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_actor_user_idInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_preferenceInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_preferenceInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_preferenceInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_preferenceNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_preferenceInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_preferenceInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_notification_preferenceInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUpdateWithoutDiscussionboard_notification_preferenceInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_preferenceInput>\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_audit_log_of_actor_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userCreateNestedOneWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_audit_log_of_target_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n  }\n\n  export type discussionboard_userUpdateOneRequiredWithoutDiscussionboard_audit_log_of_actor_user_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_audit_log_of_actor_user_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_audit_log_of_actor_user_idInput\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n  }\n\n  export type discussionboard_userUpdateOneWithoutDiscussionboard_audit_log_of_target_user_idNestedInput = {\n    create?: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n    connectOrCreate?: discussionboard_userCreateOrConnectWithoutDiscussionboard_audit_log_of_target_user_idInput\n    upsert?: discussionboard_userUpsertWithoutDiscussionboard_audit_log_of_target_user_idInput\n    disconnect?: discussionboard_userWhereInput | boolean\n    delete?: discussionboard_userWhereInput | boolean\n    connect?: discussionboard_userWhereUniqueInput\n    update?: XOR<XOR<discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput>, discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n  }\n\n  export type NestedUuidFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidFilter<$PrismaModel> | string\n  }\n\n  export type NestedStringFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringFilter<$PrismaModel> | string\n  }\n\n  export type NestedBoolFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolFilter<$PrismaModel> | boolean\n  }\n\n  export type NestedDateTimeFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeFilter<$PrismaModel> | Date | string\n  }\n\n  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type NestedIntFilter<$PrismaModel = never> = {\n    equals?: number | IntFieldRefInput<$PrismaModel>\n    in?: number[] | ListIntFieldRefInput<$PrismaModel>\n    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>\n    lt?: number | IntFieldRefInput<$PrismaModel>\n    lte?: number | IntFieldRefInput<$PrismaModel>\n    gt?: number | IntFieldRefInput<$PrismaModel>\n    gte?: number | IntFieldRefInput<$PrismaModel>\n    not?: NestedIntFilter<$PrismaModel> | number\n  }\n\n  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel>\n    in?: string[] | ListStringFieldRefInput<$PrismaModel>\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedStringFilter<$PrismaModel>\n    _max?: NestedStringFilter<$PrismaModel>\n  }\n\n  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: boolean | BooleanFieldRefInput<$PrismaModel>\n    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedBoolFilter<$PrismaModel>\n    _max?: NestedBoolFilter<$PrismaModel>\n  }\n\n  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string\n    _count?: NestedIntFilter<$PrismaModel>\n    _min?: NestedDateTimeFilter<$PrismaModel>\n    _max?: NestedDateTimeFilter<$PrismaModel>\n  }\n\n  export type NestedStringNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    contains?: string | StringFieldRefInput<$PrismaModel>\n    startsWith?: string | StringFieldRefInput<$PrismaModel>\n    endsWith?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type NestedIntNullableFilter<$PrismaModel = never> = {\n    equals?: number | IntFieldRefInput<$PrismaModel> | null\n    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null\n    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null\n    lt?: number | IntFieldRefInput<$PrismaModel>\n    lte?: number | IntFieldRefInput<$PrismaModel>\n    gt?: number | IntFieldRefInput<$PrismaModel>\n    gte?: number | IntFieldRefInput<$PrismaModel>\n    not?: NestedIntNullableFilter<$PrismaModel> | number | null\n  }\n\n  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null\n  }\n\n  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null\n    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null\n    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>\n    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedDateTimeNullableFilter<$PrismaModel>\n    _max?: NestedDateTimeNullableFilter<$PrismaModel>\n  }\n\n  export type NestedUuidNullableFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidNullableFilter<$PrismaModel> | string | null\n  }\n\n  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {\n    equals?: string | StringFieldRefInput<$PrismaModel> | null\n    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null\n    lt?: string | StringFieldRefInput<$PrismaModel>\n    lte?: string | StringFieldRefInput<$PrismaModel>\n    gt?: string | StringFieldRefInput<$PrismaModel>\n    gte?: string | StringFieldRefInput<$PrismaModel>\n    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null\n    _count?: NestedIntNullableFilter<$PrismaModel>\n    _min?: NestedStringNullableFilter<$PrismaModel>\n    _max?: NestedStringNullableFilter<$PrismaModel>\n  }\n\n  export type discussionboard_user_profileCreateWithoutUser_profile_user_idInput = {\n    id: string\n    display_name: string\n    avatar_url?: string | null\n    bio?: string | null\n  }\n\n  export type discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput = {\n    id: string\n    display_name: string\n    avatar_url?: string | null\n    bio?: string | null\n  }\n\n  export type discussionboard_user_profileCreateOrConnectWithoutUser_profile_user_idInput = {\n    where: discussionboard_user_profileWhereUniqueInput\n    create: XOR<discussionboard_user_profileCreateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput>\n  }\n\n  export type discussionboard_memberCreateWithoutMember_user_idInput = {\n    id: string\n    granted_at: Date | string\n    discussionboard_post?: discussionboard_postCreateNestedManyWithoutMemberInput\n  }\n\n  export type discussionboard_memberUncheckedCreateWithoutMember_user_idInput = {\n    id: string\n    granted_at: Date | string\n    discussionboard_post?: discussionboard_postUncheckedCreateNestedManyWithoutMemberInput\n  }\n\n  export type discussionboard_memberCreateOrConnectWithoutMember_user_idInput = {\n    where: discussionboard_memberWhereUniqueInput\n    create: XOR<discussionboard_memberCreateWithoutMember_user_idInput, discussionboard_memberUncheckedCreateWithoutMember_user_idInput>\n  }\n\n  export type discussionboard_moderatorCreateWithoutModerator_user_idInput = {\n    id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput = {\n    id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_moderatorCreateOrConnectWithoutModerator_user_idInput = {\n    where: discussionboard_moderatorWhereUniqueInput\n    create: XOR<discussionboard_moderatorCreateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput>\n  }\n\n  export type discussionboard_adminCreateWithoutAdmin_user_idInput = {\n    id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput = {\n    id: string\n    assigned_at: Date | string\n  }\n\n  export type discussionboard_adminCreateOrConnectWithoutAdmin_user_idInput = {\n    where: discussionboard_adminWhereUniqueInput\n    create: XOR<discussionboard_adminCreateWithoutAdmin_user_idInput, discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutAuthorInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutAuthorInput = {\n    id: string\n    post_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutAuthorInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutAuthorInput, discussionboard_commentsUncheckedCreateWithoutAuthorInput>\n  }\n\n  export type discussionboard_commentsCreateManyAuthorInputEnvelope = {\n    data: discussionboard_commentsCreateManyAuthorInput | discussionboard_commentsCreateManyAuthorInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_likesCreateWithoutUserInput = {\n    id: string\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_likesInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_likesInput\n  }\n\n  export type discussionboard_likesUncheckedCreateWithoutUserInput = {\n    id: string\n    post_id?: string | null\n    comment_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_likesCreateOrConnectWithoutUserInput = {\n    where: discussionboard_likesWhereUniqueInput\n    create: XOR<discussionboard_likesCreateWithoutUserInput, discussionboard_likesUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussionboard_likesCreateManyUserInputEnvelope = {\n    data: discussionboard_likesCreateManyUserInput | discussionboard_likesCreateManyUserInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_reportsCreateWithoutUserInput = {\n    id: string\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_reportsInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_reportsInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsUncheckedCreateWithoutUserInput = {\n    id: string\n    post_id?: string | null\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsCreateOrConnectWithoutUserInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    create: XOR<discussionboard_reportsCreateWithoutUserInput, discussionboard_reportsUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussionboard_reportsCreateManyUserInputEnvelope = {\n    data: discussionboard_reportsCreateManyUserInput | discussionboard_reportsCreateManyUserInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_moderation_actionCreateWithoutActorInput = {\n    id: string\n    action_type: string\n    reason: string\n    created_at: Date | string\n    target_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    moderated_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n    moderated_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateWithoutActorInput = {\n    id: string\n    target_user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionCreateOrConnectWithoutActorInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    create: XOR<discussionboard_moderation_actionCreateWithoutActorInput, discussionboard_moderation_actionUncheckedCreateWithoutActorInput>\n  }\n\n  export type discussionboard_moderation_actionCreateManyActorInputEnvelope = {\n    data: discussionboard_moderation_actionCreateManyActorInput | discussionboard_moderation_actionCreateManyActorInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_moderation_actionCreateWithoutTarget_userInput = {\n    id: string\n    action_type: string\n    reason: string\n    created_at: Date | string\n    actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_actor_idInput\n    moderated_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n    moderated_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput = {\n    id: string\n    actor_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionCreateOrConnectWithoutTarget_userInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    create: XOR<discussionboard_moderation_actionCreateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput>\n  }\n\n  export type discussionboard_moderation_actionCreateManyTarget_userInputEnvelope = {\n    data: discussionboard_moderation_actionCreateManyTarget_userInput | discussionboard_moderation_actionCreateManyTarget_userInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_report_reviewCreateWithoutReviewerInput = {\n    id: string\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n    report: discussionboard_reportsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateWithoutReviewerInput = {\n    id: string\n    report_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateOrConnectWithoutReviewerInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    create: XOR<discussionboard_report_reviewCreateWithoutReviewerInput, discussionboard_report_reviewUncheckedCreateWithoutReviewerInput>\n  }\n\n  export type discussionboard_report_reviewCreateManyReviewerInputEnvelope = {\n    data: discussionboard_report_reviewCreateManyReviewerInput | discussionboard_report_reviewCreateManyReviewerInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_warningCreateWithoutIssuerInput = {\n    id: string\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    recipient: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_to_idInput\n    warning_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_warningInput\n    warning_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_warningInput\n    discussionboard_ban?: discussionboard_banCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningUncheckedCreateWithoutIssuerInput = {\n    id: string\n    issued_to_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    discussionboard_ban?: discussionboard_banUncheckedCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningCreateOrConnectWithoutIssuerInput = {\n    where: discussionboard_warningWhereUniqueInput\n    create: XOR<discussionboard_warningCreateWithoutIssuerInput, discussionboard_warningUncheckedCreateWithoutIssuerInput>\n  }\n\n  export type discussionboard_warningCreateManyIssuerInputEnvelope = {\n    data: discussionboard_warningCreateManyIssuerInput | discussionboard_warningCreateManyIssuerInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_warningCreateWithoutRecipientInput = {\n    id: string\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    issuer: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_by_idInput\n    warning_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_warningInput\n    warning_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_warningInput\n    discussionboard_ban?: discussionboard_banCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningUncheckedCreateWithoutRecipientInput = {\n    id: string\n    issued_by_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    discussionboard_ban?: discussionboard_banUncheckedCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningCreateOrConnectWithoutRecipientInput = {\n    where: discussionboard_warningWhereUniqueInput\n    create: XOR<discussionboard_warningCreateWithoutRecipientInput, discussionboard_warningUncheckedCreateWithoutRecipientInput>\n  }\n\n  export type discussionboard_warningCreateManyRecipientInputEnvelope = {\n    data: discussionboard_warningCreateManyRecipientInput | discussionboard_warningCreateManyRecipientInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_banCreateWithoutBanned_userInput = {\n    id: string\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n    ban_actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_by_idInput\n    related_warning?: discussionboard_warningCreateNestedOneWithoutDiscussionboard_banInput\n  }\n\n  export type discussionboard_banUncheckedCreateWithoutBanned_userInput = {\n    id: string\n    banned_by_id: string\n    warning_id?: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banCreateOrConnectWithoutBanned_userInput = {\n    where: discussionboard_banWhereUniqueInput\n    create: XOR<discussionboard_banCreateWithoutBanned_userInput, discussionboard_banUncheckedCreateWithoutBanned_userInput>\n  }\n\n  export type discussionboard_banCreateManyBanned_userInputEnvelope = {\n    data: discussionboard_banCreateManyBanned_userInput | discussionboard_banCreateManyBanned_userInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_banCreateWithoutBan_actorInput = {\n    id: string\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n    banned_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_user_idInput\n    related_warning?: discussionboard_warningCreateNestedOneWithoutDiscussionboard_banInput\n  }\n\n  export type discussionboard_banUncheckedCreateWithoutBan_actorInput = {\n    id: string\n    banned_user_id: string\n    warning_id?: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banCreateOrConnectWithoutBan_actorInput = {\n    where: discussionboard_banWhereUniqueInput\n    create: XOR<discussionboard_banCreateWithoutBan_actorInput, discussionboard_banUncheckedCreateWithoutBan_actorInput>\n  }\n\n  export type discussionboard_banCreateManyBan_actorInputEnvelope = {\n    data: discussionboard_banCreateManyBan_actorInput | discussionboard_banCreateManyBan_actorInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_notificationCreateWithoutRecipient_userInput = {\n    id: string\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    related_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_notificationInput\n    related_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_notificationInput\n    actor_user?: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_actor_user_idInput\n  }\n\n  export type discussionboard_notificationUncheckedCreateWithoutRecipient_userInput = {\n    id: string\n    related_post_id?: string | null\n    related_comment_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateOrConnectWithoutRecipient_userInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    create: XOR<discussionboard_notificationCreateWithoutRecipient_userInput, discussionboard_notificationUncheckedCreateWithoutRecipient_userInput>\n  }\n\n  export type discussionboard_notificationCreateManyRecipient_userInputEnvelope = {\n    data: discussionboard_notificationCreateManyRecipient_userInput | discussionboard_notificationCreateManyRecipient_userInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_notificationCreateWithoutActor_userInput = {\n    id: string\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    recipient_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_recipient_user_idInput\n    related_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_notificationInput\n    related_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_notificationInput\n  }\n\n  export type discussionboard_notificationUncheckedCreateWithoutActor_userInput = {\n    id: string\n    recipient_user_id: string\n    related_post_id?: string | null\n    related_comment_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateOrConnectWithoutActor_userInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    create: XOR<discussionboard_notificationCreateWithoutActor_userInput, discussionboard_notificationUncheckedCreateWithoutActor_userInput>\n  }\n\n  export type discussionboard_notificationCreateManyActor_userInputEnvelope = {\n    data: discussionboard_notificationCreateManyActor_userInput | discussionboard_notificationCreateManyActor_userInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_notification_preferenceCreateWithoutUserInput = {\n    id: string\n    notify_reply: boolean\n    notify_like: boolean\n    notify_moderator_action: boolean\n    notify_system_message: boolean\n  }\n\n  export type discussionboard_notification_preferenceUncheckedCreateWithoutUserInput = {\n    id: string\n    notify_reply: boolean\n    notify_like: boolean\n    notify_moderator_action: boolean\n    notify_system_message: boolean\n  }\n\n  export type discussionboard_notification_preferenceCreateOrConnectWithoutUserInput = {\n    where: discussionboard_notification_preferenceWhereUniqueInput\n    create: XOR<discussionboard_notification_preferenceCreateWithoutUserInput, discussionboard_notification_preferenceUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussionboard_audit_logCreateWithoutFk_audit_actor_userInput = {\n    id: string\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n    fk_audit_target_user?: discussionboard_userCreateNestedOneWithoutDiscussionboard_audit_log_of_target_user_idInput\n  }\n\n  export type discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput = {\n    id: string\n    target_user_id?: string | null\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n  }\n\n  export type discussionboard_audit_logCreateOrConnectWithoutFk_audit_actor_userInput = {\n    where: discussionboard_audit_logWhereUniqueInput\n    create: XOR<discussionboard_audit_logCreateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput>\n  }\n\n  export type discussionboard_audit_logCreateManyFk_audit_actor_userInputEnvelope = {\n    data: discussionboard_audit_logCreateManyFk_audit_actor_userInput | discussionboard_audit_logCreateManyFk_audit_actor_userInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_audit_logCreateWithoutFk_audit_target_userInput = {\n    id: string\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n    fk_audit_actor_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_audit_log_of_actor_user_idInput\n  }\n\n  export type discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput = {\n    id: string\n    actor_user_id: string\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n  }\n\n  export type discussionboard_audit_logCreateOrConnectWithoutFk_audit_target_userInput = {\n    where: discussionboard_audit_logWhereUniqueInput\n    create: XOR<discussionboard_audit_logCreateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput>\n  }\n\n  export type discussionboard_audit_logCreateManyFk_audit_target_userInputEnvelope = {\n    data: discussionboard_audit_logCreateManyFk_audit_target_userInput | discussionboard_audit_logCreateManyFk_audit_target_userInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_user_profileUpsertWithoutUser_profile_user_idInput = {\n    update: XOR<discussionboard_user_profileUpdateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedUpdateWithoutUser_profile_user_idInput>\n    create: XOR<discussionboard_user_profileCreateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedCreateWithoutUser_profile_user_idInput>\n    where?: discussionboard_user_profileWhereInput\n  }\n\n  export type discussionboard_user_profileUpdateToOneWithWhereWithoutUser_profile_user_idInput = {\n    where?: discussionboard_user_profileWhereInput\n    data: XOR<discussionboard_user_profileUpdateWithoutUser_profile_user_idInput, discussionboard_user_profileUncheckedUpdateWithoutUser_profile_user_idInput>\n  }\n\n  export type discussionboard_user_profileUpdateWithoutUser_profile_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    display_name?: StringFieldUpdateOperationsInput | string\n    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null\n    bio?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_user_profileUncheckedUpdateWithoutUser_profile_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    display_name?: StringFieldUpdateOperationsInput | string\n    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null\n    bio?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_memberUpsertWithoutMember_user_idInput = {\n    update: XOR<discussionboard_memberUpdateWithoutMember_user_idInput, discussionboard_memberUncheckedUpdateWithoutMember_user_idInput>\n    create: XOR<discussionboard_memberCreateWithoutMember_user_idInput, discussionboard_memberUncheckedCreateWithoutMember_user_idInput>\n    where?: discussionboard_memberWhereInput\n  }\n\n  export type discussionboard_memberUpdateToOneWithWhereWithoutMember_user_idInput = {\n    where?: discussionboard_memberWhereInput\n    data: XOR<discussionboard_memberUpdateWithoutMember_user_idInput, discussionboard_memberUncheckedUpdateWithoutMember_user_idInput>\n  }\n\n  export type discussionboard_memberUpdateWithoutMember_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_post?: discussionboard_postUpdateManyWithoutMemberNestedInput\n  }\n\n  export type discussionboard_memberUncheckedUpdateWithoutMember_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_post?: discussionboard_postUncheckedUpdateManyWithoutMemberNestedInput\n  }\n\n  export type discussionboard_moderatorUpsertWithoutModerator_user_idInput = {\n    update: XOR<discussionboard_moderatorUpdateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedUpdateWithoutModerator_user_idInput>\n    create: XOR<discussionboard_moderatorCreateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedCreateWithoutModerator_user_idInput>\n    where?: discussionboard_moderatorWhereInput\n  }\n\n  export type discussionboard_moderatorUpdateToOneWithWhereWithoutModerator_user_idInput = {\n    where?: discussionboard_moderatorWhereInput\n    data: XOR<discussionboard_moderatorUpdateWithoutModerator_user_idInput, discussionboard_moderatorUncheckedUpdateWithoutModerator_user_idInput>\n  }\n\n  export type discussionboard_moderatorUpdateWithoutModerator_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderatorUncheckedUpdateWithoutModerator_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_adminUpsertWithoutAdmin_user_idInput = {\n    update: XOR<discussionboard_adminUpdateWithoutAdmin_user_idInput, discussionboard_adminUncheckedUpdateWithoutAdmin_user_idInput>\n    create: XOR<discussionboard_adminCreateWithoutAdmin_user_idInput, discussionboard_adminUncheckedCreateWithoutAdmin_user_idInput>\n    where?: discussionboard_adminWhereInput\n  }\n\n  export type discussionboard_adminUpdateToOneWithWhereWithoutAdmin_user_idInput = {\n    where?: discussionboard_adminWhereInput\n    data: XOR<discussionboard_adminUpdateWithoutAdmin_user_idInput, discussionboard_adminUncheckedUpdateWithoutAdmin_user_idInput>\n  }\n\n  export type discussionboard_adminUpdateWithoutAdmin_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_adminUncheckedUpdateWithoutAdmin_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_commentsUpsertWithWhereUniqueWithoutAuthorInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    update: XOR<discussionboard_commentsUpdateWithoutAuthorInput, discussionboard_commentsUncheckedUpdateWithoutAuthorInput>\n    create: XOR<discussionboard_commentsCreateWithoutAuthorInput, discussionboard_commentsUncheckedCreateWithoutAuthorInput>\n  }\n\n  export type discussionboard_commentsUpdateWithWhereUniqueWithoutAuthorInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    data: XOR<discussionboard_commentsUpdateWithoutAuthorInput, discussionboard_commentsUncheckedUpdateWithoutAuthorInput>\n  }\n\n  export type discussionboard_commentsUpdateManyWithWhereWithoutAuthorInput = {\n    where: discussionboard_commentsScalarWhereInput\n    data: XOR<discussionboard_commentsUpdateManyMutationInput, discussionboard_commentsUncheckedUpdateManyWithoutAuthorInput>\n  }\n\n  export type discussionboard_commentsScalarWhereInput = {\n    AND?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n    OR?: discussionboard_commentsScalarWhereInput[]\n    NOT?: discussionboard_commentsScalarWhereInput | discussionboard_commentsScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_comments\"> | string\n    post_id?: UuidFilter<\"discussionboard_comments\"> | string\n    author_id?: UuidFilter<\"discussionboard_comments\"> | string\n    parent_comment_id?: UuidNullableFilter<\"discussionboard_comments\"> | string | null\n    content?: StringFilter<\"discussionboard_comments\"> | string\n    is_edited?: BoolFilter<\"discussionboard_comments\"> | boolean\n    is_deleted?: BoolFilter<\"discussionboard_comments\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_comments\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_comments\"> | Date | string\n  }\n\n  export type discussionboard_likesUpsertWithWhereUniqueWithoutUserInput = {\n    where: discussionboard_likesWhereUniqueInput\n    update: XOR<discussionboard_likesUpdateWithoutUserInput, discussionboard_likesUncheckedUpdateWithoutUserInput>\n    create: XOR<discussionboard_likesCreateWithoutUserInput, discussionboard_likesUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussionboard_likesUpdateWithWhereUniqueWithoutUserInput = {\n    where: discussionboard_likesWhereUniqueInput\n    data: XOR<discussionboard_likesUpdateWithoutUserInput, discussionboard_likesUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussionboard_likesUpdateManyWithWhereWithoutUserInput = {\n    where: discussionboard_likesScalarWhereInput\n    data: XOR<discussionboard_likesUpdateManyMutationInput, discussionboard_likesUncheckedUpdateManyWithoutUserInput>\n  }\n\n  export type discussionboard_likesScalarWhereInput = {\n    AND?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n    OR?: discussionboard_likesScalarWhereInput[]\n    NOT?: discussionboard_likesScalarWhereInput | discussionboard_likesScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_likes\"> | string\n    user_id?: UuidFilter<\"discussionboard_likes\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_likes\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_likes\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_likes\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_likes\"> | Date | string | null\n  }\n\n  export type discussionboard_reportsUpsertWithWhereUniqueWithoutUserInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    update: XOR<discussionboard_reportsUpdateWithoutUserInput, discussionboard_reportsUncheckedUpdateWithoutUserInput>\n    create: XOR<discussionboard_reportsCreateWithoutUserInput, discussionboard_reportsUncheckedCreateWithoutUserInput>\n  }\n\n  export type discussionboard_reportsUpdateWithWhereUniqueWithoutUserInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    data: XOR<discussionboard_reportsUpdateWithoutUserInput, discussionboard_reportsUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussionboard_reportsUpdateManyWithWhereWithoutUserInput = {\n    where: discussionboard_reportsScalarWhereInput\n    data: XOR<discussionboard_reportsUpdateManyMutationInput, discussionboard_reportsUncheckedUpdateManyWithoutUserInput>\n  }\n\n  export type discussionboard_reportsScalarWhereInput = {\n    AND?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n    OR?: discussionboard_reportsScalarWhereInput[]\n    NOT?: discussionboard_reportsScalarWhereInput | discussionboard_reportsScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_reports\"> | string\n    user_id?: UuidFilter<\"discussionboard_reports\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_reports\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_reports\"> | string | null\n    reason_code?: StringFilter<\"discussionboard_reports\"> | string\n    reason_details?: StringNullableFilter<\"discussionboard_reports\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_reports\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_reports\"> | Date | string | null\n  }\n\n  export type discussionboard_moderation_actionUpsertWithWhereUniqueWithoutActorInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    update: XOR<discussionboard_moderation_actionUpdateWithoutActorInput, discussionboard_moderation_actionUncheckedUpdateWithoutActorInput>\n    create: XOR<discussionboard_moderation_actionCreateWithoutActorInput, discussionboard_moderation_actionUncheckedCreateWithoutActorInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateWithWhereUniqueWithoutActorInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    data: XOR<discussionboard_moderation_actionUpdateWithoutActorInput, discussionboard_moderation_actionUncheckedUpdateWithoutActorInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithWhereWithoutActorInput = {\n    where: discussionboard_moderation_actionScalarWhereInput\n    data: XOR<discussionboard_moderation_actionUpdateManyMutationInput, discussionboard_moderation_actionUncheckedUpdateManyWithoutActorInput>\n  }\n\n  export type discussionboard_moderation_actionScalarWhereInput = {\n    AND?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n    OR?: discussionboard_moderation_actionScalarWhereInput[]\n    NOT?: discussionboard_moderation_actionScalarWhereInput | discussionboard_moderation_actionScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    actor_id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    target_user_id?: UuidFilter<\"discussionboard_moderation_action\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_moderation_action\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_moderation_action\"> | string | null\n    action_type?: StringFilter<\"discussionboard_moderation_action\"> | string\n    reason?: StringFilter<\"discussionboard_moderation_action\"> | string\n    created_at?: DateTimeFilter<\"discussionboard_moderation_action\"> | Date | string\n  }\n\n  export type discussionboard_moderation_actionUpsertWithWhereUniqueWithoutTarget_userInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    update: XOR<discussionboard_moderation_actionUpdateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedUpdateWithoutTarget_userInput>\n    create: XOR<discussionboard_moderation_actionCreateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedCreateWithoutTarget_userInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateWithWhereUniqueWithoutTarget_userInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    data: XOR<discussionboard_moderation_actionUpdateWithoutTarget_userInput, discussionboard_moderation_actionUncheckedUpdateWithoutTarget_userInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithWhereWithoutTarget_userInput = {\n    where: discussionboard_moderation_actionScalarWhereInput\n    data: XOR<discussionboard_moderation_actionUpdateManyMutationInput, discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userInput>\n  }\n\n  export type discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewerInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    update: XOR<discussionboard_report_reviewUpdateWithoutReviewerInput, discussionboard_report_reviewUncheckedUpdateWithoutReviewerInput>\n    create: XOR<discussionboard_report_reviewCreateWithoutReviewerInput, discussionboard_report_reviewUncheckedCreateWithoutReviewerInput>\n  }\n\n  export type discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewerInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    data: XOR<discussionboard_report_reviewUpdateWithoutReviewerInput, discussionboard_report_reviewUncheckedUpdateWithoutReviewerInput>\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithWhereWithoutReviewerInput = {\n    where: discussionboard_report_reviewScalarWhereInput\n    data: XOR<discussionboard_report_reviewUpdateManyMutationInput, discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerInput>\n  }\n\n  export type discussionboard_report_reviewScalarWhereInput = {\n    AND?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n    OR?: discussionboard_report_reviewScalarWhereInput[]\n    NOT?: discussionboard_report_reviewScalarWhereInput | discussionboard_report_reviewScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_report_review\"> | string\n    report_id?: UuidFilter<\"discussionboard_report_review\"> | string\n    reviewer_id?: UuidFilter<\"discussionboard_report_review\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_report_review\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_report_review\"> | string | null\n    review_status?: StringFilter<\"discussionboard_report_review\"> | string\n    moderator_comment?: StringNullableFilter<\"discussionboard_report_review\"> | string | null\n    reviewed_at?: DateTimeFilter<\"discussionboard_report_review\"> | Date | string\n  }\n\n  export type discussionboard_warningUpsertWithWhereUniqueWithoutIssuerInput = {\n    where: discussionboard_warningWhereUniqueInput\n    update: XOR<discussionboard_warningUpdateWithoutIssuerInput, discussionboard_warningUncheckedUpdateWithoutIssuerInput>\n    create: XOR<discussionboard_warningCreateWithoutIssuerInput, discussionboard_warningUncheckedCreateWithoutIssuerInput>\n  }\n\n  export type discussionboard_warningUpdateWithWhereUniqueWithoutIssuerInput = {\n    where: discussionboard_warningWhereUniqueInput\n    data: XOR<discussionboard_warningUpdateWithoutIssuerInput, discussionboard_warningUncheckedUpdateWithoutIssuerInput>\n  }\n\n  export type discussionboard_warningUpdateManyWithWhereWithoutIssuerInput = {\n    where: discussionboard_warningScalarWhereInput\n    data: XOR<discussionboard_warningUpdateManyMutationInput, discussionboard_warningUncheckedUpdateManyWithoutIssuerInput>\n  }\n\n  export type discussionboard_warningScalarWhereInput = {\n    AND?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n    OR?: discussionboard_warningScalarWhereInput[]\n    NOT?: discussionboard_warningScalarWhereInput | discussionboard_warningScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_warning\"> | string\n    issued_by_id?: UuidFilter<\"discussionboard_warning\"> | string\n    issued_to_id?: UuidFilter<\"discussionboard_warning\"> | string\n    post_id?: UuidNullableFilter<\"discussionboard_warning\"> | string | null\n    comment_id?: UuidNullableFilter<\"discussionboard_warning\"> | string | null\n    warning_type?: StringFilter<\"discussionboard_warning\"> | string\n    message?: StringFilter<\"discussionboard_warning\"> | string\n    issued_at?: DateTimeFilter<\"discussionboard_warning\"> | Date | string\n  }\n\n  export type discussionboard_warningUpsertWithWhereUniqueWithoutRecipientInput = {\n    where: discussionboard_warningWhereUniqueInput\n    update: XOR<discussionboard_warningUpdateWithoutRecipientInput, discussionboard_warningUncheckedUpdateWithoutRecipientInput>\n    create: XOR<discussionboard_warningCreateWithoutRecipientInput, discussionboard_warningUncheckedCreateWithoutRecipientInput>\n  }\n\n  export type discussionboard_warningUpdateWithWhereUniqueWithoutRecipientInput = {\n    where: discussionboard_warningWhereUniqueInput\n    data: XOR<discussionboard_warningUpdateWithoutRecipientInput, discussionboard_warningUncheckedUpdateWithoutRecipientInput>\n  }\n\n  export type discussionboard_warningUpdateManyWithWhereWithoutRecipientInput = {\n    where: discussionboard_warningScalarWhereInput\n    data: XOR<discussionboard_warningUpdateManyMutationInput, discussionboard_warningUncheckedUpdateManyWithoutRecipientInput>\n  }\n\n  export type discussionboard_banUpsertWithWhereUniqueWithoutBanned_userInput = {\n    where: discussionboard_banWhereUniqueInput\n    update: XOR<discussionboard_banUpdateWithoutBanned_userInput, discussionboard_banUncheckedUpdateWithoutBanned_userInput>\n    create: XOR<discussionboard_banCreateWithoutBanned_userInput, discussionboard_banUncheckedCreateWithoutBanned_userInput>\n  }\n\n  export type discussionboard_banUpdateWithWhereUniqueWithoutBanned_userInput = {\n    where: discussionboard_banWhereUniqueInput\n    data: XOR<discussionboard_banUpdateWithoutBanned_userInput, discussionboard_banUncheckedUpdateWithoutBanned_userInput>\n  }\n\n  export type discussionboard_banUpdateManyWithWhereWithoutBanned_userInput = {\n    where: discussionboard_banScalarWhereInput\n    data: XOR<discussionboard_banUpdateManyMutationInput, discussionboard_banUncheckedUpdateManyWithoutBanned_userInput>\n  }\n\n  export type discussionboard_banScalarWhereInput = {\n    AND?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n    OR?: discussionboard_banScalarWhereInput[]\n    NOT?: discussionboard_banScalarWhereInput | discussionboard_banScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_ban\"> | string\n    banned_user_id?: UuidFilter<\"discussionboard_ban\"> | string\n    banned_by_id?: UuidFilter<\"discussionboard_ban\"> | string\n    warning_id?: UuidNullableFilter<\"discussionboard_ban\"> | string | null\n    ban_type?: StringFilter<\"discussionboard_ban\"> | string\n    reason?: StringFilter<\"discussionboard_ban\"> | string\n    issued_at?: DateTimeFilter<\"discussionboard_ban\"> | Date | string\n    expires_at?: DateTimeNullableFilter<\"discussionboard_ban\"> | Date | string | null\n  }\n\n  export type discussionboard_banUpsertWithWhereUniqueWithoutBan_actorInput = {\n    where: discussionboard_banWhereUniqueInput\n    update: XOR<discussionboard_banUpdateWithoutBan_actorInput, discussionboard_banUncheckedUpdateWithoutBan_actorInput>\n    create: XOR<discussionboard_banCreateWithoutBan_actorInput, discussionboard_banUncheckedCreateWithoutBan_actorInput>\n  }\n\n  export type discussionboard_banUpdateWithWhereUniqueWithoutBan_actorInput = {\n    where: discussionboard_banWhereUniqueInput\n    data: XOR<discussionboard_banUpdateWithoutBan_actorInput, discussionboard_banUncheckedUpdateWithoutBan_actorInput>\n  }\n\n  export type discussionboard_banUpdateManyWithWhereWithoutBan_actorInput = {\n    where: discussionboard_banScalarWhereInput\n    data: XOR<discussionboard_banUpdateManyMutationInput, discussionboard_banUncheckedUpdateManyWithoutBan_actorInput>\n  }\n\n  export type discussionboard_notificationUpsertWithWhereUniqueWithoutRecipient_userInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    update: XOR<discussionboard_notificationUpdateWithoutRecipient_userInput, discussionboard_notificationUncheckedUpdateWithoutRecipient_userInput>\n    create: XOR<discussionboard_notificationCreateWithoutRecipient_userInput, discussionboard_notificationUncheckedCreateWithoutRecipient_userInput>\n  }\n\n  export type discussionboard_notificationUpdateWithWhereUniqueWithoutRecipient_userInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    data: XOR<discussionboard_notificationUpdateWithoutRecipient_userInput, discussionboard_notificationUncheckedUpdateWithoutRecipient_userInput>\n  }\n\n  export type discussionboard_notificationUpdateManyWithWhereWithoutRecipient_userInput = {\n    where: discussionboard_notificationScalarWhereInput\n    data: XOR<discussionboard_notificationUpdateManyMutationInput, discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userInput>\n  }\n\n  export type discussionboard_notificationScalarWhereInput = {\n    AND?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n    OR?: discussionboard_notificationScalarWhereInput[]\n    NOT?: discussionboard_notificationScalarWhereInput | discussionboard_notificationScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_notification\"> | string\n    recipient_user_id?: UuidFilter<\"discussionboard_notification\"> | string\n    related_post_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    related_comment_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    actor_user_id?: UuidNullableFilter<\"discussionboard_notification\"> | string | null\n    type?: StringFilter<\"discussionboard_notification\"> | string\n    message?: StringFilter<\"discussionboard_notification\"> | string\n    is_read?: BoolFilter<\"discussionboard_notification\"> | boolean\n    created_at?: DateTimeFilter<\"discussionboard_notification\"> | Date | string\n  }\n\n  export type discussionboard_notificationUpsertWithWhereUniqueWithoutActor_userInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    update: XOR<discussionboard_notificationUpdateWithoutActor_userInput, discussionboard_notificationUncheckedUpdateWithoutActor_userInput>\n    create: XOR<discussionboard_notificationCreateWithoutActor_userInput, discussionboard_notificationUncheckedCreateWithoutActor_userInput>\n  }\n\n  export type discussionboard_notificationUpdateWithWhereUniqueWithoutActor_userInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    data: XOR<discussionboard_notificationUpdateWithoutActor_userInput, discussionboard_notificationUncheckedUpdateWithoutActor_userInput>\n  }\n\n  export type discussionboard_notificationUpdateManyWithWhereWithoutActor_userInput = {\n    where: discussionboard_notificationScalarWhereInput\n    data: XOR<discussionboard_notificationUpdateManyMutationInput, discussionboard_notificationUncheckedUpdateManyWithoutActor_userInput>\n  }\n\n  export type discussionboard_notification_preferenceUpsertWithoutUserInput = {\n    update: XOR<discussionboard_notification_preferenceUpdateWithoutUserInput, discussionboard_notification_preferenceUncheckedUpdateWithoutUserInput>\n    create: XOR<discussionboard_notification_preferenceCreateWithoutUserInput, discussionboard_notification_preferenceUncheckedCreateWithoutUserInput>\n    where?: discussionboard_notification_preferenceWhereInput\n  }\n\n  export type discussionboard_notification_preferenceUpdateToOneWithWhereWithoutUserInput = {\n    where?: discussionboard_notification_preferenceWhereInput\n    data: XOR<discussionboard_notification_preferenceUpdateWithoutUserInput, discussionboard_notification_preferenceUncheckedUpdateWithoutUserInput>\n  }\n\n  export type discussionboard_notification_preferenceUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notify_reply?: BoolFieldUpdateOperationsInput | boolean\n    notify_like?: BoolFieldUpdateOperationsInput | boolean\n    notify_moderator_action?: BoolFieldUpdateOperationsInput | boolean\n    notify_system_message?: BoolFieldUpdateOperationsInput | boolean\n  }\n\n  export type discussionboard_notification_preferenceUncheckedUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    notify_reply?: BoolFieldUpdateOperationsInput | boolean\n    notify_like?: BoolFieldUpdateOperationsInput | boolean\n    notify_moderator_action?: BoolFieldUpdateOperationsInput | boolean\n    notify_system_message?: BoolFieldUpdateOperationsInput | boolean\n  }\n\n  export type discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_actor_userInput = {\n    where: discussionboard_audit_logWhereUniqueInput\n    update: XOR<discussionboard_audit_logUpdateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedUpdateWithoutFk_audit_actor_userInput>\n    create: XOR<discussionboard_audit_logCreateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_actor_userInput>\n  }\n\n  export type discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_actor_userInput = {\n    where: discussionboard_audit_logWhereUniqueInput\n    data: XOR<discussionboard_audit_logUpdateWithoutFk_audit_actor_userInput, discussionboard_audit_logUncheckedUpdateWithoutFk_audit_actor_userInput>\n  }\n\n  export type discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_actor_userInput = {\n    where: discussionboard_audit_logScalarWhereInput\n    data: XOR<discussionboard_audit_logUpdateManyMutationInput, discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userInput>\n  }\n\n  export type discussionboard_audit_logScalarWhereInput = {\n    AND?: discussionboard_audit_logScalarWhereInput | discussionboard_audit_logScalarWhereInput[]\n    OR?: discussionboard_audit_logScalarWhereInput[]\n    NOT?: discussionboard_audit_logScalarWhereInput | discussionboard_audit_logScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_audit_log\"> | string\n    actor_user_id?: UuidFilter<\"discussionboard_audit_log\"> | string\n    target_user_id?: UuidNullableFilter<\"discussionboard_audit_log\"> | string | null\n    action_type?: StringFilter<\"discussionboard_audit_log\"> | string\n    entity_type?: StringFilter<\"discussionboard_audit_log\"> | string\n    entity_id?: UuidNullableFilter<\"discussionboard_audit_log\"> | string | null\n    action_detail?: StringNullableFilter<\"discussionboard_audit_log\"> | string | null\n    created_at?: DateTimeFilter<\"discussionboard_audit_log\"> | Date | string\n  }\n\n  export type discussionboard_audit_logUpsertWithWhereUniqueWithoutFk_audit_target_userInput = {\n    where: discussionboard_audit_logWhereUniqueInput\n    update: XOR<discussionboard_audit_logUpdateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedUpdateWithoutFk_audit_target_userInput>\n    create: XOR<discussionboard_audit_logCreateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedCreateWithoutFk_audit_target_userInput>\n  }\n\n  export type discussionboard_audit_logUpdateWithWhereUniqueWithoutFk_audit_target_userInput = {\n    where: discussionboard_audit_logWhereUniqueInput\n    data: XOR<discussionboard_audit_logUpdateWithoutFk_audit_target_userInput, discussionboard_audit_logUncheckedUpdateWithoutFk_audit_target_userInput>\n  }\n\n  export type discussionboard_audit_logUpdateManyWithWhereWithoutFk_audit_target_userInput = {\n    where: discussionboard_audit_logScalarWhereInput\n    data: XOR<discussionboard_audit_logUpdateManyMutationInput, discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_user_profileInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_user_profileInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_user_profileInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_user_profileInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_user_profileInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_user_profileInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_user_profileInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_user_profileInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_user_profileInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_user_profileInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_user_profileInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_user_profileInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_user_profileInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_user_profileInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_user_profileInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_memberInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_memberInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_memberInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_memberInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_memberInput>\n  }\n\n  export type discussionboard_postCreateWithoutMemberInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutMemberInput = {\n    id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutMemberInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutMemberInput, discussionboard_postUncheckedCreateWithoutMemberInput>\n  }\n\n  export type discussionboard_postCreateManyMemberInputEnvelope = {\n    data: discussionboard_postCreateManyMemberInput | discussionboard_postCreateManyMemberInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_memberInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_memberInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_memberInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_memberInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_memberInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_memberInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_memberInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_memberInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_memberInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_memberInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithWhereUniqueWithoutMemberInput = {\n    where: discussionboard_postWhereUniqueInput\n    update: XOR<discussionboard_postUpdateWithoutMemberInput, discussionboard_postUncheckedUpdateWithoutMemberInput>\n    create: XOR<discussionboard_postCreateWithoutMemberInput, discussionboard_postUncheckedCreateWithoutMemberInput>\n  }\n\n  export type discussionboard_postUpdateWithWhereUniqueWithoutMemberInput = {\n    where: discussionboard_postWhereUniqueInput\n    data: XOR<discussionboard_postUpdateWithoutMemberInput, discussionboard_postUncheckedUpdateWithoutMemberInput>\n  }\n\n  export type discussionboard_postUpdateManyWithWhereWithoutMemberInput = {\n    where: discussionboard_postScalarWhereInput\n    data: XOR<discussionboard_postUpdateManyMutationInput, discussionboard_postUncheckedUpdateManyWithoutMemberInput>\n  }\n\n  export type discussionboard_postScalarWhereInput = {\n    AND?: discussionboard_postScalarWhereInput | discussionboard_postScalarWhereInput[]\n    OR?: discussionboard_postScalarWhereInput[]\n    NOT?: discussionboard_postScalarWhereInput | discussionboard_postScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_post\"> | string\n    author_member_id?: UuidFilter<\"discussionboard_post\"> | string\n    category_id?: UuidFilter<\"discussionboard_post\"> | string\n    title?: StringFilter<\"discussionboard_post\"> | string\n    body?: StringFilter<\"discussionboard_post\"> | string\n    created_at?: DateTimeFilter<\"discussionboard_post\"> | Date | string\n    updated_at?: DateTimeFilter<\"discussionboard_post\"> | Date | string\n    deleted_at?: DateTimeNullableFilter<\"discussionboard_post\"> | Date | string | null\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_moderatorInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_moderatorInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_moderatorInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_moderatorInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderatorInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_moderatorInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_moderatorInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderatorInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_moderatorInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderatorInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_moderatorInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_moderatorInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderatorInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_moderatorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderatorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_adminInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_adminInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_adminInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_adminInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_adminInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_adminInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_adminInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_adminInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_adminInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_adminInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_adminInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_adminInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_adminInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_adminInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_adminInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_memberCreateWithoutDiscussionboard_postInput = {\n    id: string\n    granted_at: Date | string\n    member_user_id: discussionboard_userCreateNestedOneWithoutDiscussionboard_memberInput\n  }\n\n  export type discussionboard_memberUncheckedCreateWithoutDiscussionboard_postInput = {\n    id: string\n    user_id: string\n    granted_at: Date | string\n  }\n\n  export type discussionboard_memberCreateOrConnectWithoutDiscussionboard_postInput = {\n    where: discussionboard_memberWhereUniqueInput\n    create: XOR<discussionboard_memberCreateWithoutDiscussionboard_postInput, discussionboard_memberUncheckedCreateWithoutDiscussionboard_postInput>\n  }\n\n  export type discussionboard_post_categoryCreateWithoutDiscussionboard_postInput = {\n    id: string\n    name: string\n    description?: string | null\n  }\n\n  export type discussionboard_post_categoryUncheckedCreateWithoutDiscussionboard_postInput = {\n    id: string\n    name: string\n    description?: string | null\n  }\n\n  export type discussionboard_post_categoryCreateOrConnectWithoutDiscussionboard_postInput = {\n    where: discussionboard_post_categoryWhereUniqueInput\n    create: XOR<discussionboard_post_categoryCreateWithoutDiscussionboard_postInput, discussionboard_post_categoryUncheckedCreateWithoutDiscussionboard_postInput>\n  }\n\n  export type discussionboard_post_attachmentCreateWithoutPostInput = {\n    id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date | string\n  }\n\n  export type discussionboard_post_attachmentUncheckedCreateWithoutPostInput = {\n    id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date | string\n  }\n\n  export type discussionboard_post_attachmentCreateOrConnectWithoutPostInput = {\n    where: discussionboard_post_attachmentWhereUniqueInput\n    create: XOR<discussionboard_post_attachmentCreateWithoutPostInput, discussionboard_post_attachmentUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_post_attachmentCreateManyPostInputEnvelope = {\n    data: discussionboard_post_attachmentCreateManyPostInput | discussionboard_post_attachmentCreateManyPostInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_commentsCreateWithoutPostInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutPostInput = {\n    id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutPostInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutPostInput, discussionboard_commentsUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_commentsCreateManyPostInputEnvelope = {\n    data: discussionboard_commentsCreateManyPostInput | discussionboard_commentsCreateManyPostInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_likesCreateWithoutPostInput = {\n    id: string\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_likesInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_likesInput\n  }\n\n  export type discussionboard_likesUncheckedCreateWithoutPostInput = {\n    id: string\n    user_id: string\n    comment_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_likesCreateOrConnectWithoutPostInput = {\n    where: discussionboard_likesWhereUniqueInput\n    create: XOR<discussionboard_likesCreateWithoutPostInput, discussionboard_likesUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_likesCreateManyPostInputEnvelope = {\n    data: discussionboard_likesCreateManyPostInput | discussionboard_likesCreateManyPostInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_reportsCreateWithoutPostInput = {\n    id: string\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_reportsInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_reportsInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsUncheckedCreateWithoutPostInput = {\n    id: string\n    user_id: string\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsCreateOrConnectWithoutPostInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    create: XOR<discussionboard_reportsCreateWithoutPostInput, discussionboard_reportsUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_reportsCreateManyPostInputEnvelope = {\n    data: discussionboard_reportsCreateManyPostInput | discussionboard_reportsCreateManyPostInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_moderation_actionCreateWithoutModerated_postInput = {\n    id: string\n    action_type: string\n    reason: string\n    created_at: Date | string\n    actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_actor_idInput\n    target_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    moderated_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionCreateOrConnectWithoutModerated_postInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    create: XOR<discussionboard_moderation_actionCreateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput>\n  }\n\n  export type discussionboard_moderation_actionCreateManyModerated_postInputEnvelope = {\n    data: discussionboard_moderation_actionCreateManyModerated_postInput | discussionboard_moderation_actionCreateManyModerated_postInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_report_reviewCreateWithoutReviewed_postInput = {\n    id: string\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n    report: discussionboard_reportsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewer: discussionboard_userCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateOrConnectWithoutReviewed_postInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    create: XOR<discussionboard_report_reviewCreateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput>\n  }\n\n  export type discussionboard_report_reviewCreateManyReviewed_postInputEnvelope = {\n    data: discussionboard_report_reviewCreateManyReviewed_postInput | discussionboard_report_reviewCreateManyReviewed_postInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_warningCreateWithoutWarning_postInput = {\n    id: string\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    issuer: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_by_idInput\n    recipient: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_to_idInput\n    warning_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_warningInput\n    discussionboard_ban?: discussionboard_banCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningUncheckedCreateWithoutWarning_postInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    discussionboard_ban?: discussionboard_banUncheckedCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningCreateOrConnectWithoutWarning_postInput = {\n    where: discussionboard_warningWhereUniqueInput\n    create: XOR<discussionboard_warningCreateWithoutWarning_postInput, discussionboard_warningUncheckedCreateWithoutWarning_postInput>\n  }\n\n  export type discussionboard_warningCreateManyWarning_postInputEnvelope = {\n    data: discussionboard_warningCreateManyWarning_postInput | discussionboard_warningCreateManyWarning_postInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_notificationCreateWithoutRelated_postInput = {\n    id: string\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    recipient_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_recipient_user_idInput\n    related_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_notificationInput\n    actor_user?: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_actor_user_idInput\n  }\n\n  export type discussionboard_notificationUncheckedCreateWithoutRelated_postInput = {\n    id: string\n    recipient_user_id: string\n    related_comment_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateOrConnectWithoutRelated_postInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    create: XOR<discussionboard_notificationCreateWithoutRelated_postInput, discussionboard_notificationUncheckedCreateWithoutRelated_postInput>\n  }\n\n  export type discussionboard_notificationCreateManyRelated_postInputEnvelope = {\n    data: discussionboard_notificationCreateManyRelated_postInput | discussionboard_notificationCreateManyRelated_postInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_memberUpsertWithoutDiscussionboard_postInput = {\n    update: XOR<discussionboard_memberUpdateWithoutDiscussionboard_postInput, discussionboard_memberUncheckedUpdateWithoutDiscussionboard_postInput>\n    create: XOR<discussionboard_memberCreateWithoutDiscussionboard_postInput, discussionboard_memberUncheckedCreateWithoutDiscussionboard_postInput>\n    where?: discussionboard_memberWhereInput\n  }\n\n  export type discussionboard_memberUpdateToOneWithWhereWithoutDiscussionboard_postInput = {\n    where?: discussionboard_memberWhereInput\n    data: XOR<discussionboard_memberUpdateWithoutDiscussionboard_postInput, discussionboard_memberUncheckedUpdateWithoutDiscussionboard_postInput>\n  }\n\n  export type discussionboard_memberUpdateWithoutDiscussionboard_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    member_user_id?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_memberNestedInput\n  }\n\n  export type discussionboard_memberUncheckedUpdateWithoutDiscussionboard_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    granted_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_post_categoryUpsertWithoutDiscussionboard_postInput = {\n    update: XOR<discussionboard_post_categoryUpdateWithoutDiscussionboard_postInput, discussionboard_post_categoryUncheckedUpdateWithoutDiscussionboard_postInput>\n    create: XOR<discussionboard_post_categoryCreateWithoutDiscussionboard_postInput, discussionboard_post_categoryUncheckedCreateWithoutDiscussionboard_postInput>\n    where?: discussionboard_post_categoryWhereInput\n  }\n\n  export type discussionboard_post_categoryUpdateToOneWithWhereWithoutDiscussionboard_postInput = {\n    where?: discussionboard_post_categoryWhereInput\n    data: XOR<discussionboard_post_categoryUpdateWithoutDiscussionboard_postInput, discussionboard_post_categoryUncheckedUpdateWithoutDiscussionboard_postInput>\n  }\n\n  export type discussionboard_post_categoryUpdateWithoutDiscussionboard_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_post_categoryUncheckedUpdateWithoutDiscussionboard_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    name?: StringFieldUpdateOperationsInput | string\n    description?: NullableStringFieldUpdateOperationsInput | string | null\n  }\n\n  export type discussionboard_post_attachmentUpsertWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_post_attachmentWhereUniqueInput\n    update: XOR<discussionboard_post_attachmentUpdateWithoutPostInput, discussionboard_post_attachmentUncheckedUpdateWithoutPostInput>\n    create: XOR<discussionboard_post_attachmentCreateWithoutPostInput, discussionboard_post_attachmentUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_post_attachmentUpdateWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_post_attachmentWhereUniqueInput\n    data: XOR<discussionboard_post_attachmentUpdateWithoutPostInput, discussionboard_post_attachmentUncheckedUpdateWithoutPostInput>\n  }\n\n  export type discussionboard_post_attachmentUpdateManyWithWhereWithoutPostInput = {\n    where: discussionboard_post_attachmentScalarWhereInput\n    data: XOR<discussionboard_post_attachmentUpdateManyMutationInput, discussionboard_post_attachmentUncheckedUpdateManyWithoutPostInput>\n  }\n\n  export type discussionboard_post_attachmentScalarWhereInput = {\n    AND?: discussionboard_post_attachmentScalarWhereInput | discussionboard_post_attachmentScalarWhereInput[]\n    OR?: discussionboard_post_attachmentScalarWhereInput[]\n    NOT?: discussionboard_post_attachmentScalarWhereInput | discussionboard_post_attachmentScalarWhereInput[]\n    id?: UuidFilter<\"discussionboard_post_attachment\"> | string\n    post_id?: UuidFilter<\"discussionboard_post_attachment\"> | string\n    file_url?: StringFilter<\"discussionboard_post_attachment\"> | string\n    file_type?: StringFilter<\"discussionboard_post_attachment\"> | string\n    uploaded_at?: DateTimeFilter<\"discussionboard_post_attachment\"> | Date | string\n  }\n\n  export type discussionboard_commentsUpsertWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    update: XOR<discussionboard_commentsUpdateWithoutPostInput, discussionboard_commentsUncheckedUpdateWithoutPostInput>\n    create: XOR<discussionboard_commentsCreateWithoutPostInput, discussionboard_commentsUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_commentsUpdateWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    data: XOR<discussionboard_commentsUpdateWithoutPostInput, discussionboard_commentsUncheckedUpdateWithoutPostInput>\n  }\n\n  export type discussionboard_commentsUpdateManyWithWhereWithoutPostInput = {\n    where: discussionboard_commentsScalarWhereInput\n    data: XOR<discussionboard_commentsUpdateManyMutationInput, discussionboard_commentsUncheckedUpdateManyWithoutPostInput>\n  }\n\n  export type discussionboard_likesUpsertWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_likesWhereUniqueInput\n    update: XOR<discussionboard_likesUpdateWithoutPostInput, discussionboard_likesUncheckedUpdateWithoutPostInput>\n    create: XOR<discussionboard_likesCreateWithoutPostInput, discussionboard_likesUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_likesUpdateWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_likesWhereUniqueInput\n    data: XOR<discussionboard_likesUpdateWithoutPostInput, discussionboard_likesUncheckedUpdateWithoutPostInput>\n  }\n\n  export type discussionboard_likesUpdateManyWithWhereWithoutPostInput = {\n    where: discussionboard_likesScalarWhereInput\n    data: XOR<discussionboard_likesUpdateManyMutationInput, discussionboard_likesUncheckedUpdateManyWithoutPostInput>\n  }\n\n  export type discussionboard_reportsUpsertWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    update: XOR<discussionboard_reportsUpdateWithoutPostInput, discussionboard_reportsUncheckedUpdateWithoutPostInput>\n    create: XOR<discussionboard_reportsCreateWithoutPostInput, discussionboard_reportsUncheckedCreateWithoutPostInput>\n  }\n\n  export type discussionboard_reportsUpdateWithWhereUniqueWithoutPostInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    data: XOR<discussionboard_reportsUpdateWithoutPostInput, discussionboard_reportsUncheckedUpdateWithoutPostInput>\n  }\n\n  export type discussionboard_reportsUpdateManyWithWhereWithoutPostInput = {\n    where: discussionboard_reportsScalarWhereInput\n    data: XOR<discussionboard_reportsUpdateManyMutationInput, discussionboard_reportsUncheckedUpdateManyWithoutPostInput>\n  }\n\n  export type discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_postInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    update: XOR<discussionboard_moderation_actionUpdateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedUpdateWithoutModerated_postInput>\n    create: XOR<discussionboard_moderation_actionCreateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_postInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_postInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    data: XOR<discussionboard_moderation_actionUpdateWithoutModerated_postInput, discussionboard_moderation_actionUncheckedUpdateWithoutModerated_postInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_postInput = {\n    where: discussionboard_moderation_actionScalarWhereInput\n    data: XOR<discussionboard_moderation_actionUpdateManyMutationInput, discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postInput>\n  }\n\n  export type discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_postInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    update: XOR<discussionboard_report_reviewUpdateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedUpdateWithoutReviewed_postInput>\n    create: XOR<discussionboard_report_reviewCreateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_postInput>\n  }\n\n  export type discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_postInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    data: XOR<discussionboard_report_reviewUpdateWithoutReviewed_postInput, discussionboard_report_reviewUncheckedUpdateWithoutReviewed_postInput>\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_postInput = {\n    where: discussionboard_report_reviewScalarWhereInput\n    data: XOR<discussionboard_report_reviewUpdateManyMutationInput, discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postInput>\n  }\n\n  export type discussionboard_warningUpsertWithWhereUniqueWithoutWarning_postInput = {\n    where: discussionboard_warningWhereUniqueInput\n    update: XOR<discussionboard_warningUpdateWithoutWarning_postInput, discussionboard_warningUncheckedUpdateWithoutWarning_postInput>\n    create: XOR<discussionboard_warningCreateWithoutWarning_postInput, discussionboard_warningUncheckedCreateWithoutWarning_postInput>\n  }\n\n  export type discussionboard_warningUpdateWithWhereUniqueWithoutWarning_postInput = {\n    where: discussionboard_warningWhereUniqueInput\n    data: XOR<discussionboard_warningUpdateWithoutWarning_postInput, discussionboard_warningUncheckedUpdateWithoutWarning_postInput>\n  }\n\n  export type discussionboard_warningUpdateManyWithWhereWithoutWarning_postInput = {\n    where: discussionboard_warningScalarWhereInput\n    data: XOR<discussionboard_warningUpdateManyMutationInput, discussionboard_warningUncheckedUpdateManyWithoutWarning_postInput>\n  }\n\n  export type discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_postInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    update: XOR<discussionboard_notificationUpdateWithoutRelated_postInput, discussionboard_notificationUncheckedUpdateWithoutRelated_postInput>\n    create: XOR<discussionboard_notificationCreateWithoutRelated_postInput, discussionboard_notificationUncheckedCreateWithoutRelated_postInput>\n  }\n\n  export type discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_postInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    data: XOR<discussionboard_notificationUpdateWithoutRelated_postInput, discussionboard_notificationUncheckedUpdateWithoutRelated_postInput>\n  }\n\n  export type discussionboard_notificationUpdateManyWithWhereWithoutRelated_postInput = {\n    where: discussionboard_notificationScalarWhereInput\n    data: XOR<discussionboard_notificationUpdateManyMutationInput, discussionboard_notificationUncheckedUpdateManyWithoutRelated_postInput>\n  }\n\n  export type discussionboard_postCreateWithoutCategoryInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutCategoryInput = {\n    id: string\n    author_member_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutCategoryInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutCategoryInput, discussionboard_postUncheckedCreateWithoutCategoryInput>\n  }\n\n  export type discussionboard_postCreateManyCategoryInputEnvelope = {\n    data: discussionboard_postCreateManyCategoryInput | discussionboard_postCreateManyCategoryInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_postUpsertWithWhereUniqueWithoutCategoryInput = {\n    where: discussionboard_postWhereUniqueInput\n    update: XOR<discussionboard_postUpdateWithoutCategoryInput, discussionboard_postUncheckedUpdateWithoutCategoryInput>\n    create: XOR<discussionboard_postCreateWithoutCategoryInput, discussionboard_postUncheckedCreateWithoutCategoryInput>\n  }\n\n  export type discussionboard_postUpdateWithWhereUniqueWithoutCategoryInput = {\n    where: discussionboard_postWhereUniqueInput\n    data: XOR<discussionboard_postUpdateWithoutCategoryInput, discussionboard_postUncheckedUpdateWithoutCategoryInput>\n  }\n\n  export type discussionboard_postUpdateManyWithWhereWithoutCategoryInput = {\n    where: discussionboard_postScalarWhereInput\n    data: XOR<discussionboard_postUpdateManyMutationInput, discussionboard_postUncheckedUpdateManyWithoutCategoryInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_post_attachmentInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_post_attachmentInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_post_attachmentInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_post_attachmentInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_post_attachmentInput>\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_post_attachmentInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_post_attachmentInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_post_attachmentInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_post_attachmentInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_post_attachmentInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_post_attachmentInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_post_attachmentInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_post_attachmentInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_post_attachmentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_post_attachmentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_commentsInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_commentsInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_commentsInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_commentsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_commentsInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_commentsInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_commentsInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_commentsInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_commentsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_commentsInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutRecursiveInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutRecursiveInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutRecursiveInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutRecursiveInput, discussionboard_commentsUncheckedCreateWithoutRecursiveInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutParent_commentInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutParent_commentInput = {\n    id: string\n    post_id: string\n    author_id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutParent_commentInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutParent_commentInput, discussionboard_commentsUncheckedCreateWithoutParent_commentInput>\n  }\n\n  export type discussionboard_commentsCreateManyParent_commentInputEnvelope = {\n    data: discussionboard_commentsCreateManyParent_commentInput | discussionboard_commentsCreateManyParent_commentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_likesCreateWithoutCommentInput = {\n    id: string\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_likesInput\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_likesInput\n  }\n\n  export type discussionboard_likesUncheckedCreateWithoutCommentInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_likesCreateOrConnectWithoutCommentInput = {\n    where: discussionboard_likesWhereUniqueInput\n    create: XOR<discussionboard_likesCreateWithoutCommentInput, discussionboard_likesUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussionboard_likesCreateManyCommentInputEnvelope = {\n    data: discussionboard_likesCreateManyCommentInput | discussionboard_likesCreateManyCommentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_reportsCreateWithoutCommentInput = {\n    id: string\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_reportsInput\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_reportsInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsUncheckedCreateWithoutCommentInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReportInput\n  }\n\n  export type discussionboard_reportsCreateOrConnectWithoutCommentInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    create: XOR<discussionboard_reportsCreateWithoutCommentInput, discussionboard_reportsUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussionboard_reportsCreateManyCommentInputEnvelope = {\n    data: discussionboard_reportsCreateManyCommentInput | discussionboard_reportsCreateManyCommentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_moderation_actionCreateWithoutModerated_commentInput = {\n    id: string\n    action_type: string\n    reason: string\n    created_at: Date | string\n    actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_actor_idInput\n    target_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_moderation_action_of_target_user_idInput\n    moderated_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_moderation_actionInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    post_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionCreateOrConnectWithoutModerated_commentInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    create: XOR<discussionboard_moderation_actionCreateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput>\n  }\n\n  export type discussionboard_moderation_actionCreateManyModerated_commentInputEnvelope = {\n    data: discussionboard_moderation_actionCreateManyModerated_commentInput | discussionboard_moderation_actionCreateManyModerated_commentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_report_reviewCreateWithoutReviewed_commentInput = {\n    id: string\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n    report: discussionboard_reportsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewer: discussionboard_userCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_report_reviewInput\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    post_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateOrConnectWithoutReviewed_commentInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    create: XOR<discussionboard_report_reviewCreateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput>\n  }\n\n  export type discussionboard_report_reviewCreateManyReviewed_commentInputEnvelope = {\n    data: discussionboard_report_reviewCreateManyReviewed_commentInput | discussionboard_report_reviewCreateManyReviewed_commentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_warningCreateWithoutWarning_commentInput = {\n    id: string\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    issuer: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_by_idInput\n    recipient: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_to_idInput\n    warning_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_warningInput\n    discussionboard_ban?: discussionboard_banCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningUncheckedCreateWithoutWarning_commentInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    post_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    discussionboard_ban?: discussionboard_banUncheckedCreateNestedManyWithoutRelated_warningInput\n  }\n\n  export type discussionboard_warningCreateOrConnectWithoutWarning_commentInput = {\n    where: discussionboard_warningWhereUniqueInput\n    create: XOR<discussionboard_warningCreateWithoutWarning_commentInput, discussionboard_warningUncheckedCreateWithoutWarning_commentInput>\n  }\n\n  export type discussionboard_warningCreateManyWarning_commentInputEnvelope = {\n    data: discussionboard_warningCreateManyWarning_commentInput | discussionboard_warningCreateManyWarning_commentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_notificationCreateWithoutRelated_commentInput = {\n    id: string\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n    recipient_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_recipient_user_idInput\n    related_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_notificationInput\n    actor_user?: discussionboard_userCreateNestedOneWithoutDiscussionboard_notification_of_actor_user_idInput\n  }\n\n  export type discussionboard_notificationUncheckedCreateWithoutRelated_commentInput = {\n    id: string\n    recipient_user_id: string\n    related_post_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateOrConnectWithoutRelated_commentInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    create: XOR<discussionboard_notificationCreateWithoutRelated_commentInput, discussionboard_notificationUncheckedCreateWithoutRelated_commentInput>\n  }\n\n  export type discussionboard_notificationCreateManyRelated_commentInputEnvelope = {\n    data: discussionboard_notificationCreateManyRelated_commentInput | discussionboard_notificationCreateManyRelated_commentInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_commentsInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_commentsInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_commentsInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_commentsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_commentsInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_commentsInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_commentsInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_commentsInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_commentsInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_commentsInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_commentsInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_commentsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_commentsInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_commentsInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_commentsInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_commentsInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_commentsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutRecursiveInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutRecursiveInput, discussionboard_commentsUncheckedUpdateWithoutRecursiveInput>\n    create: XOR<discussionboard_commentsCreateWithoutRecursiveInput, discussionboard_commentsUncheckedCreateWithoutRecursiveInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutRecursiveInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutRecursiveInput, discussionboard_commentsUncheckedUpdateWithoutRecursiveInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutRecursiveInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutRecursiveInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithWhereUniqueWithoutParent_commentInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    update: XOR<discussionboard_commentsUpdateWithoutParent_commentInput, discussionboard_commentsUncheckedUpdateWithoutParent_commentInput>\n    create: XOR<discussionboard_commentsCreateWithoutParent_commentInput, discussionboard_commentsUncheckedCreateWithoutParent_commentInput>\n  }\n\n  export type discussionboard_commentsUpdateWithWhereUniqueWithoutParent_commentInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    data: XOR<discussionboard_commentsUpdateWithoutParent_commentInput, discussionboard_commentsUncheckedUpdateWithoutParent_commentInput>\n  }\n\n  export type discussionboard_commentsUpdateManyWithWhereWithoutParent_commentInput = {\n    where: discussionboard_commentsScalarWhereInput\n    data: XOR<discussionboard_commentsUpdateManyMutationInput, discussionboard_commentsUncheckedUpdateManyWithoutParent_commentInput>\n  }\n\n  export type discussionboard_likesUpsertWithWhereUniqueWithoutCommentInput = {\n    where: discussionboard_likesWhereUniqueInput\n    update: XOR<discussionboard_likesUpdateWithoutCommentInput, discussionboard_likesUncheckedUpdateWithoutCommentInput>\n    create: XOR<discussionboard_likesCreateWithoutCommentInput, discussionboard_likesUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussionboard_likesUpdateWithWhereUniqueWithoutCommentInput = {\n    where: discussionboard_likesWhereUniqueInput\n    data: XOR<discussionboard_likesUpdateWithoutCommentInput, discussionboard_likesUncheckedUpdateWithoutCommentInput>\n  }\n\n  export type discussionboard_likesUpdateManyWithWhereWithoutCommentInput = {\n    where: discussionboard_likesScalarWhereInput\n    data: XOR<discussionboard_likesUpdateManyMutationInput, discussionboard_likesUncheckedUpdateManyWithoutCommentInput>\n  }\n\n  export type discussionboard_reportsUpsertWithWhereUniqueWithoutCommentInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    update: XOR<discussionboard_reportsUpdateWithoutCommentInput, discussionboard_reportsUncheckedUpdateWithoutCommentInput>\n    create: XOR<discussionboard_reportsCreateWithoutCommentInput, discussionboard_reportsUncheckedCreateWithoutCommentInput>\n  }\n\n  export type discussionboard_reportsUpdateWithWhereUniqueWithoutCommentInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    data: XOR<discussionboard_reportsUpdateWithoutCommentInput, discussionboard_reportsUncheckedUpdateWithoutCommentInput>\n  }\n\n  export type discussionboard_reportsUpdateManyWithWhereWithoutCommentInput = {\n    where: discussionboard_reportsScalarWhereInput\n    data: XOR<discussionboard_reportsUpdateManyMutationInput, discussionboard_reportsUncheckedUpdateManyWithoutCommentInput>\n  }\n\n  export type discussionboard_moderation_actionUpsertWithWhereUniqueWithoutModerated_commentInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    update: XOR<discussionboard_moderation_actionUpdateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedUpdateWithoutModerated_commentInput>\n    create: XOR<discussionboard_moderation_actionCreateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedCreateWithoutModerated_commentInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateWithWhereUniqueWithoutModerated_commentInput = {\n    where: discussionboard_moderation_actionWhereUniqueInput\n    data: XOR<discussionboard_moderation_actionUpdateWithoutModerated_commentInput, discussionboard_moderation_actionUncheckedUpdateWithoutModerated_commentInput>\n  }\n\n  export type discussionboard_moderation_actionUpdateManyWithWhereWithoutModerated_commentInput = {\n    where: discussionboard_moderation_actionScalarWhereInput\n    data: XOR<discussionboard_moderation_actionUpdateManyMutationInput, discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentInput>\n  }\n\n  export type discussionboard_report_reviewUpsertWithWhereUniqueWithoutReviewed_commentInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    update: XOR<discussionboard_report_reviewUpdateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedUpdateWithoutReviewed_commentInput>\n    create: XOR<discussionboard_report_reviewCreateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedCreateWithoutReviewed_commentInput>\n  }\n\n  export type discussionboard_report_reviewUpdateWithWhereUniqueWithoutReviewed_commentInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    data: XOR<discussionboard_report_reviewUpdateWithoutReviewed_commentInput, discussionboard_report_reviewUncheckedUpdateWithoutReviewed_commentInput>\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithWhereWithoutReviewed_commentInput = {\n    where: discussionboard_report_reviewScalarWhereInput\n    data: XOR<discussionboard_report_reviewUpdateManyMutationInput, discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentInput>\n  }\n\n  export type discussionboard_warningUpsertWithWhereUniqueWithoutWarning_commentInput = {\n    where: discussionboard_warningWhereUniqueInput\n    update: XOR<discussionboard_warningUpdateWithoutWarning_commentInput, discussionboard_warningUncheckedUpdateWithoutWarning_commentInput>\n    create: XOR<discussionboard_warningCreateWithoutWarning_commentInput, discussionboard_warningUncheckedCreateWithoutWarning_commentInput>\n  }\n\n  export type discussionboard_warningUpdateWithWhereUniqueWithoutWarning_commentInput = {\n    where: discussionboard_warningWhereUniqueInput\n    data: XOR<discussionboard_warningUpdateWithoutWarning_commentInput, discussionboard_warningUncheckedUpdateWithoutWarning_commentInput>\n  }\n\n  export type discussionboard_warningUpdateManyWithWhereWithoutWarning_commentInput = {\n    where: discussionboard_warningScalarWhereInput\n    data: XOR<discussionboard_warningUpdateManyMutationInput, discussionboard_warningUncheckedUpdateManyWithoutWarning_commentInput>\n  }\n\n  export type discussionboard_notificationUpsertWithWhereUniqueWithoutRelated_commentInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    update: XOR<discussionboard_notificationUpdateWithoutRelated_commentInput, discussionboard_notificationUncheckedUpdateWithoutRelated_commentInput>\n    create: XOR<discussionboard_notificationCreateWithoutRelated_commentInput, discussionboard_notificationUncheckedCreateWithoutRelated_commentInput>\n  }\n\n  export type discussionboard_notificationUpdateWithWhereUniqueWithoutRelated_commentInput = {\n    where: discussionboard_notificationWhereUniqueInput\n    data: XOR<discussionboard_notificationUpdateWithoutRelated_commentInput, discussionboard_notificationUncheckedUpdateWithoutRelated_commentInput>\n  }\n\n  export type discussionboard_notificationUpdateManyWithWhereWithoutRelated_commentInput = {\n    where: discussionboard_notificationScalarWhereInput\n    data: XOR<discussionboard_notificationUpdateManyMutationInput, discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_likesInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_likesInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_likesInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_likesInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_likesInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_likesInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_likesInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_likesInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutDiscussionboard_likesInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutDiscussionboard_likesInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutDiscussionboard_likesInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_likesInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_likesInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_likesInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_likesInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_likesInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_likesInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_likesInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_likesInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_likesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_likesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_likesInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_likesInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_likesInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_likesInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_likesInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_likesInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_likesInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_likesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_likesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutDiscussionboard_likesInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_likesInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_likesInput>\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_likesInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_likesInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_likesInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_likesInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_likesInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutDiscussionboard_likesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_likesInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_reportsInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_reportsInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_reportsInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_reportsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_reportsInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_reportsInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_reportsInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_reportsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutDiscussionboard_reportsInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutDiscussionboard_reportsInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutDiscussionboard_reportsInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_reportsInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_report_reviewCreateWithoutReportInput = {\n    id: string\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n    reviewer: discussionboard_userCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_report_reviewInput\n    reviewed_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_report_reviewInput\n  }\n\n  export type discussionboard_report_reviewUncheckedCreateWithoutReportInput = {\n    id: string\n    reviewer_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateOrConnectWithoutReportInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    create: XOR<discussionboard_report_reviewCreateWithoutReportInput, discussionboard_report_reviewUncheckedCreateWithoutReportInput>\n  }\n\n  export type discussionboard_report_reviewCreateManyReportInputEnvelope = {\n    data: discussionboard_report_reviewCreateManyReportInput | discussionboard_report_reviewCreateManyReportInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_reportsInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_reportsInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_reportsInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_reportsInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_reportsInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_reportsInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_reportsInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_reportsInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_reportsInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_reportsInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_reportsInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_reportsInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_reportsInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_reportsInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutDiscussionboard_reportsInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_reportsInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_reportsInput>\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_reportsInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_reportsInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_reportsInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_reportsInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_reportsInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutDiscussionboard_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_reportsInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_report_reviewUpsertWithWhereUniqueWithoutReportInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    update: XOR<discussionboard_report_reviewUpdateWithoutReportInput, discussionboard_report_reviewUncheckedUpdateWithoutReportInput>\n    create: XOR<discussionboard_report_reviewCreateWithoutReportInput, discussionboard_report_reviewUncheckedCreateWithoutReportInput>\n  }\n\n  export type discussionboard_report_reviewUpdateWithWhereUniqueWithoutReportInput = {\n    where: discussionboard_report_reviewWhereUniqueInput\n    data: XOR<discussionboard_report_reviewUpdateWithoutReportInput, discussionboard_report_reviewUncheckedUpdateWithoutReportInput>\n  }\n\n  export type discussionboard_report_reviewUpdateManyWithWhereWithoutReportInput = {\n    where: discussionboard_report_reviewScalarWhereInput\n    data: XOR<discussionboard_report_reviewUpdateManyMutationInput, discussionboard_report_reviewUncheckedUpdateManyWithoutReportInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_moderation_actionInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_moderation_actionInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_moderation_actionInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutDiscussionboard_moderation_actionInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutDiscussionboard_moderation_actionInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutDiscussionboard_moderation_actionInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_actor_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_moderation_action_of_target_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_moderation_actionInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_moderation_actionInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_moderation_actionInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_moderation_actionInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_moderation_actionInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_moderation_actionInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_moderation_actionInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_moderation_actionInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutDiscussionboard_moderation_actionInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_moderation_actionInput>\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_moderation_actionInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_moderation_actionInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_moderation_actionInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_moderation_actionInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutDiscussionboard_moderation_actionInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_moderation_actionInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_reportsCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n    user: discussionboard_userCreateNestedOneWithoutDiscussionboard_reportsInput\n    post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_reportsInput\n    comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_reportsInput\n  }\n\n  export type discussionboard_reportsUncheckedCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_reportsCreateOrConnectWithoutDiscussionboard_report_reviewInput = {\n    where: discussionboard_reportsWhereUniqueInput\n    create: XOR<discussionboard_reportsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_report_reviewInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_report_reviewInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_report_reviewInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_report_reviewInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutDiscussionboard_report_reviewInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutDiscussionboard_report_reviewInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_reportsUpsertWithoutDiscussionboard_report_reviewInput = {\n    update: XOR<discussionboard_reportsUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n    create: XOR<discussionboard_reportsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    where?: discussionboard_reportsWhereInput\n  }\n\n  export type discussionboard_reportsUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput = {\n    where?: discussionboard_reportsWhereInput\n    data: XOR<discussionboard_reportsUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_reportsUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_reportsUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_reportsNestedInput\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_reportsNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_reportsNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_report_reviewInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_report_reviewInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_report_reviewInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_report_reviewInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutDiscussionboard_report_reviewInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_report_reviewInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_report_reviewInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_report_reviewInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_report_reviewInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_report_reviewInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_by_idInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_to_idInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_warningInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_warningInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_warningInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_warningInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_warningInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutDiscussionboard_warningInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_notification?: discussionboard_notificationCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutDiscussionboard_warningInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_notification?: discussionboard_notificationUncheckedCreateNestedManyWithoutRelated_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutDiscussionboard_warningInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_warningInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_warningInput>\n  }\n\n  export type discussionboard_banCreateWithoutRelated_warningInput = {\n    id: string\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n    banned_user: discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_user_idInput\n    ban_actor: discussionboard_userCreateNestedOneWithoutDiscussionboard_ban_of_banned_by_idInput\n  }\n\n  export type discussionboard_banUncheckedCreateWithoutRelated_warningInput = {\n    id: string\n    banned_user_id: string\n    banned_by_id: string\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banCreateOrConnectWithoutRelated_warningInput = {\n    where: discussionboard_banWhereUniqueInput\n    create: XOR<discussionboard_banCreateWithoutRelated_warningInput, discussionboard_banUncheckedCreateWithoutRelated_warningInput>\n  }\n\n  export type discussionboard_banCreateManyRelated_warningInputEnvelope = {\n    data: discussionboard_banCreateManyRelated_warningInput | discussionboard_banCreateManyRelated_warningInput[]\n    skipDuplicates?: boolean\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_by_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_by_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_by_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_by_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_by_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_to_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_warning_of_issued_to_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_to_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_to_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_warning_of_issued_to_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_warningInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_warningInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_warningInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_warningInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_warningInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_warningInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_warningInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_warningInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutDiscussionboard_warningInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_warningInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_warningInput>\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_warningInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_warningInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_warningInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_warningInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_warningInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutDiscussionboard_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_banUpsertWithWhereUniqueWithoutRelated_warningInput = {\n    where: discussionboard_banWhereUniqueInput\n    update: XOR<discussionboard_banUpdateWithoutRelated_warningInput, discussionboard_banUncheckedUpdateWithoutRelated_warningInput>\n    create: XOR<discussionboard_banCreateWithoutRelated_warningInput, discussionboard_banUncheckedCreateWithoutRelated_warningInput>\n  }\n\n  export type discussionboard_banUpdateWithWhereUniqueWithoutRelated_warningInput = {\n    where: discussionboard_banWhereUniqueInput\n    data: XOR<discussionboard_banUpdateWithoutRelated_warningInput, discussionboard_banUncheckedUpdateWithoutRelated_warningInput>\n  }\n\n  export type discussionboard_banUpdateManyWithWhereWithoutRelated_warningInput = {\n    where: discussionboard_banScalarWhereInput\n    data: XOR<discussionboard_banUpdateManyMutationInput, discussionboard_banUncheckedUpdateManyWithoutRelated_warningInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_user_idInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_by_idInput>\n  }\n\n  export type discussionboard_warningCreateWithoutDiscussionboard_banInput = {\n    id: string\n    warning_type: string\n    message: string\n    issued_at: Date | string\n    issuer: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_by_idInput\n    recipient: discussionboard_userCreateNestedOneWithoutDiscussionboard_warning_of_issued_to_idInput\n    warning_post?: discussionboard_postCreateNestedOneWithoutDiscussionboard_warningInput\n    warning_comment?: discussionboard_commentsCreateNestedOneWithoutDiscussionboard_warningInput\n  }\n\n  export type discussionboard_warningUncheckedCreateWithoutDiscussionboard_banInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n  }\n\n  export type discussionboard_warningCreateOrConnectWithoutDiscussionboard_banInput = {\n    where: discussionboard_warningWhereUniqueInput\n    create: XOR<discussionboard_warningCreateWithoutDiscussionboard_banInput, discussionboard_warningUncheckedCreateWithoutDiscussionboard_banInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_user_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_user_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_user_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_by_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_ban_of_banned_by_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_by_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_by_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_ban_of_banned_by_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_warningUpsertWithoutDiscussionboard_banInput = {\n    update: XOR<discussionboard_warningUpdateWithoutDiscussionboard_banInput, discussionboard_warningUncheckedUpdateWithoutDiscussionboard_banInput>\n    create: XOR<discussionboard_warningCreateWithoutDiscussionboard_banInput, discussionboard_warningUncheckedCreateWithoutDiscussionboard_banInput>\n    where?: discussionboard_warningWhereInput\n  }\n\n  export type discussionboard_warningUpdateToOneWithWhereWithoutDiscussionboard_banInput = {\n    where?: discussionboard_warningWhereInput\n    data: XOR<discussionboard_warningUpdateWithoutDiscussionboard_banInput, discussionboard_warningUncheckedUpdateWithoutDiscussionboard_banInput>\n  }\n\n  export type discussionboard_warningUpdateWithoutDiscussionboard_banInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    issuer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_by_idNestedInput\n    recipient?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_to_idNestedInput\n    warning_post?: discussionboard_postUpdateOneWithoutDiscussionboard_warningNestedInput\n    warning_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateWithoutDiscussionboard_banInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n  }\n\n  export type discussionboard_postCreateWithoutDiscussionboard_notificationInput = {\n    id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    member: discussionboard_memberCreateNestedOneWithoutDiscussionboard_postInput\n    category: discussionboard_post_categoryCreateNestedOneWithoutDiscussionboard_postInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_postInput\n  }\n\n  export type discussionboard_postUncheckedCreateWithoutDiscussionboard_notificationInput = {\n    id: string\n    author_member_id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutPostInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_postInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_postInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_postInput\n  }\n\n  export type discussionboard_postCreateOrConnectWithoutDiscussionboard_notificationInput = {\n    where: discussionboard_postWhereUniqueInput\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_notificationInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_notificationInput>\n  }\n\n  export type discussionboard_commentsCreateWithoutDiscussionboard_notificationInput = {\n    id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    post: discussionboard_postCreateNestedOneWithoutDiscussionboard_commentsInput\n    author: discussionboard_userCreateNestedOneWithoutDiscussionboard_commentsInput\n    parent_comment?: discussionboard_commentsCreateNestedOneWithoutRecursiveInput\n    recursive?: discussionboard_commentsCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningCreateNestedManyWithoutWarning_commentInput\n  }\n\n  export type discussionboard_commentsUncheckedCreateWithoutDiscussionboard_notificationInput = {\n    id: string\n    post_id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    recursive?: discussionboard_commentsUncheckedCreateNestedManyWithoutParent_commentInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutCommentInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutModerated_commentInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewed_commentInput\n    discussionboard_warning?: discussionboard_warningUncheckedCreateNestedManyWithoutWarning_commentInput\n  }\n\n  export type discussionboard_commentsCreateOrConnectWithoutDiscussionboard_notificationInput = {\n    where: discussionboard_commentsWhereUniqueInput\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_notificationInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_notificationInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_actor_user_idInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_recipient_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_postUpsertWithoutDiscussionboard_notificationInput = {\n    update: XOR<discussionboard_postUpdateWithoutDiscussionboard_notificationInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_notificationInput>\n    create: XOR<discussionboard_postCreateWithoutDiscussionboard_notificationInput, discussionboard_postUncheckedCreateWithoutDiscussionboard_notificationInput>\n    where?: discussionboard_postWhereInput\n  }\n\n  export type discussionboard_postUpdateToOneWithWhereWithoutDiscussionboard_notificationInput = {\n    where?: discussionboard_postWhereInput\n    data: XOR<discussionboard_postUpdateWithoutDiscussionboard_notificationInput, discussionboard_postUncheckedUpdateWithoutDiscussionboard_notificationInput>\n  }\n\n  export type discussionboard_postUpdateWithoutDiscussionboard_notificationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutDiscussionboard_notificationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n  }\n\n  export type discussionboard_commentsUpsertWithoutDiscussionboard_notificationInput = {\n    update: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_notificationInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_notificationInput>\n    create: XOR<discussionboard_commentsCreateWithoutDiscussionboard_notificationInput, discussionboard_commentsUncheckedCreateWithoutDiscussionboard_notificationInput>\n    where?: discussionboard_commentsWhereInput\n  }\n\n  export type discussionboard_commentsUpdateToOneWithWhereWithoutDiscussionboard_notificationInput = {\n    where?: discussionboard_commentsWhereInput\n    data: XOR<discussionboard_commentsUpdateWithoutDiscussionboard_notificationInput, discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_notificationInput>\n  }\n\n  export type discussionboard_commentsUpdateWithoutDiscussionboard_notificationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutDiscussionboard_notificationInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_actor_user_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_of_actor_user_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_notification_of_actor_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_actor_user_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_of_actor_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_notification_preferenceInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_preferenceInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_notification_preferenceInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_preferenceInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_notification_preferenceInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_preferenceInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_notification_preferenceInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_notification_preferenceInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_notification_preferenceInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_preferenceInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_notification_preferenceInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_notification_preferenceInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_target_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n  }\n\n  export type discussionboard_userCreateWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logCreateNestedManyWithoutFk_audit_actor_userInput\n  }\n\n  export type discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    id: string\n    email: string\n    password_hash: string\n    is_active: boolean\n    created_at: Date | string\n    updated_at: Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedCreateNestedOneWithoutUser_profile_user_idInput\n    discussionboard_member?: discussionboard_memberUncheckedCreateNestedOneWithoutMember_user_idInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedCreateNestedOneWithoutModerator_user_idInput\n    discussionboard_admin?: discussionboard_adminUncheckedCreateNestedOneWithoutAdmin_user_idInput\n    discussionboard_comments?: discussionboard_commentsUncheckedCreateNestedManyWithoutAuthorInput\n    discussionboard_likes?: discussionboard_likesUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_reports?: discussionboard_reportsUncheckedCreateNestedManyWithoutUserInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutActorInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedCreateNestedManyWithoutTarget_userInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedCreateNestedManyWithoutReviewerInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedCreateNestedManyWithoutIssuerInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedCreateNestedManyWithoutRecipientInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedCreateNestedManyWithoutBanned_userInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedCreateNestedManyWithoutBan_actorInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutRecipient_userInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedCreateNestedManyWithoutActor_userInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedCreateNestedOneWithoutUserInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedCreateNestedManyWithoutFk_audit_actor_userInput\n  }\n\n  export type discussionboard_userCreateOrConnectWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    where: discussionboard_userWhereUniqueInput\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_actor_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_target_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userNestedInput\n  }\n\n  export type discussionboard_userUpsertWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    update: XOR<discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n    create: XOR<discussionboard_userCreateWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUncheckedCreateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n    where?: discussionboard_userWhereInput\n  }\n\n  export type discussionboard_userUpdateToOneWithWhereWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    where?: discussionboard_userWhereInput\n    data: XOR<discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput, discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput>\n  }\n\n  export type discussionboard_userUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUpdateManyWithoutFk_audit_actor_userNestedInput\n  }\n\n  export type discussionboard_userUncheckedUpdateWithoutDiscussionboard_audit_log_of_target_user_idInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    email?: StringFieldUpdateOperationsInput | string\n    password_hash?: StringFieldUpdateOperationsInput | string\n    is_active?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_user_profile?: discussionboard_user_profileUncheckedUpdateOneWithoutUser_profile_user_idNestedInput\n    discussionboard_member?: discussionboard_memberUncheckedUpdateOneWithoutMember_user_idNestedInput\n    discussionboard_moderator?: discussionboard_moderatorUncheckedUpdateOneWithoutModerator_user_idNestedInput\n    discussionboard_admin?: discussionboard_adminUncheckedUpdateOneWithoutAdmin_user_idNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutAuthorNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutUserNestedInput\n    discussionboard_moderation_action_of_actor_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutActorNestedInput\n    discussionboard_moderation_action_of_target_user_id?: discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerNestedInput\n    discussionboard_warning_of_issued_by_id?: discussionboard_warningUncheckedUpdateManyWithoutIssuerNestedInput\n    discussionboard_warning_of_issued_to_id?: discussionboard_warningUncheckedUpdateManyWithoutRecipientNestedInput\n    discussionboard_ban_of_banned_user_id?: discussionboard_banUncheckedUpdateManyWithoutBanned_userNestedInput\n    discussionboard_ban_of_banned_by_id?: discussionboard_banUncheckedUpdateManyWithoutBan_actorNestedInput\n    discussionboard_notification_of_recipient_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userNestedInput\n    discussionboard_notification_of_actor_user_id?: discussionboard_notificationUncheckedUpdateManyWithoutActor_userNestedInput\n    discussionboard_notification_preference?: discussionboard_notification_preferenceUncheckedUpdateOneWithoutUserNestedInput\n    discussionboard_audit_log_of_actor_user_id?: discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userNestedInput\n  }\n\n  export type discussionboard_commentsCreateManyAuthorInput = {\n    id: string\n    post_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_likesCreateManyUserInput = {\n    id: string\n    post_id?: string | null\n    comment_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_reportsCreateManyUserInput = {\n    id: string\n    post_id?: string | null\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_moderation_actionCreateManyActorInput = {\n    id: string\n    target_user_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_moderation_actionCreateManyTarget_userInput = {\n    id: string\n    actor_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateManyReviewerInput = {\n    id: string\n    report_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_warningCreateManyIssuerInput = {\n    id: string\n    issued_to_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n  }\n\n  export type discussionboard_warningCreateManyRecipientInput = {\n    id: string\n    issued_by_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n  }\n\n  export type discussionboard_banCreateManyBanned_userInput = {\n    id: string\n    banned_by_id: string\n    warning_id?: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banCreateManyBan_actorInput = {\n    id: string\n    banned_user_id: string\n    warning_id?: string | null\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_notificationCreateManyRecipient_userInput = {\n    id: string\n    related_post_id?: string | null\n    related_comment_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateManyActor_userInput = {\n    id: string\n    recipient_user_id: string\n    related_post_id?: string | null\n    related_comment_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_audit_logCreateManyFk_audit_actor_userInput = {\n    id: string\n    target_user_id?: string | null\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n  }\n\n  export type discussionboard_audit_logCreateManyFk_audit_target_userInput = {\n    id: string\n    actor_user_id: string\n    action_type: string\n    entity_type: string\n    entity_id?: string | null\n    action_detail?: string | null\n    created_at: Date | string\n  }\n\n  export type discussionboard_commentsUpdateWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyWithoutAuthorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_likesUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_likesNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_likesNestedInput\n  }\n\n  export type discussionboard_likesUncheckedUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_reportsUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_reportsNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_reportsNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyWithoutUserInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_moderation_actionUpdateWithoutActorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    target_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_target_user_idNestedInput\n    moderated_post?: discussionboard_postUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n    moderated_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateWithoutActorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutActorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionUpdateWithoutTarget_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_actor_idNestedInput\n    moderated_post?: discussionboard_postUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n    moderated_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateWithoutTarget_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutTarget_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUpdateWithoutReviewerInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    report?: discussionboard_reportsUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_post?: discussionboard_postUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateWithoutReviewerInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReviewerInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_warningUpdateWithoutIssuerInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recipient?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_to_idNestedInput\n    warning_post?: discussionboard_postUpdateOneWithoutDiscussionboard_warningNestedInput\n    warning_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_warningNestedInput\n    discussionboard_ban?: discussionboard_banUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateWithoutIssuerInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_ban?: discussionboard_banUncheckedUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutIssuerInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_warningUpdateWithoutRecipientInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    issuer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_by_idNestedInput\n    warning_post?: discussionboard_postUpdateOneWithoutDiscussionboard_warningNestedInput\n    warning_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_warningNestedInput\n    discussionboard_ban?: discussionboard_banUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateWithoutRecipientInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_ban?: discussionboard_banUncheckedUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutRecipientInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_banUpdateWithoutBanned_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    ban_actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_by_idNestedInput\n    related_warning?: discussionboard_warningUpdateOneWithoutDiscussionboard_banNestedInput\n  }\n\n  export type discussionboard_banUncheckedUpdateWithoutBanned_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_by_id?: StringFieldUpdateOperationsInput | string\n    warning_id?: NullableStringFieldUpdateOperationsInput | string | null\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_banUncheckedUpdateManyWithoutBanned_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_by_id?: StringFieldUpdateOperationsInput | string\n    warning_id?: NullableStringFieldUpdateOperationsInput | string | null\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_banUpdateWithoutBan_actorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    banned_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_user_idNestedInput\n    related_warning?: discussionboard_warningUpdateOneWithoutDiscussionboard_banNestedInput\n  }\n\n  export type discussionboard_banUncheckedUpdateWithoutBan_actorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_user_id?: StringFieldUpdateOperationsInput | string\n    warning_id?: NullableStringFieldUpdateOperationsInput | string | null\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_banUncheckedUpdateManyWithoutBan_actorInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_user_id?: StringFieldUpdateOperationsInput | string\n    warning_id?: NullableStringFieldUpdateOperationsInput | string | null\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_notificationUpdateWithoutRecipient_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    related_post?: discussionboard_postUpdateOneWithoutDiscussionboard_notificationNestedInput\n    related_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_notificationNestedInput\n    actor_user?: discussionboard_userUpdateOneWithoutDiscussionboard_notification_of_actor_user_idNestedInput\n  }\n\n  export type discussionboard_notificationUncheckedUpdateWithoutRecipient_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutRecipient_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUpdateWithoutActor_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recipient_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_of_recipient_user_idNestedInput\n    related_post?: discussionboard_postUpdateOneWithoutDiscussionboard_notificationNestedInput\n    related_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_notificationNestedInput\n  }\n\n  export type discussionboard_notificationUncheckedUpdateWithoutActor_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutActor_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_audit_logUpdateWithoutFk_audit_actor_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    fk_audit_target_user?: discussionboard_userUpdateOneWithoutDiscussionboard_audit_log_of_target_user_idNestedInput\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateWithoutFk_audit_actor_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_actor_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_audit_logUpdateWithoutFk_audit_target_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    fk_audit_actor_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_audit_log_of_actor_user_idNestedInput\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateWithoutFk_audit_target_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_user_id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_audit_logUncheckedUpdateManyWithoutFk_audit_target_userInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_user_id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    entity_type?: StringFieldUpdateOperationsInput | string\n    entity_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_detail?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_postCreateManyMemberInput = {\n    id: string\n    category_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_postUpdateWithoutMemberInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    category?: discussionboard_post_categoryUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutMemberInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateManyWithoutMemberInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    category_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_post_attachmentCreateManyPostInput = {\n    id: string\n    file_url: string\n    file_type: string\n    uploaded_at: Date | string\n  }\n\n  export type discussionboard_commentsCreateManyPostInput = {\n    id: string\n    author_id: string\n    parent_comment_id?: string | null\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_likesCreateManyPostInput = {\n    id: string\n    user_id: string\n    comment_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_reportsCreateManyPostInput = {\n    id: string\n    user_id: string\n    comment_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_moderation_actionCreateManyModerated_postInput = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    comment_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateManyReviewed_postInput = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_warningCreateManyWarning_postInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    comment_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateManyRelated_postInput = {\n    id: string\n    recipient_user_id: string\n    related_comment_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_post_attachmentUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_post_attachmentUncheckedUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_post_attachmentUncheckedUpdateManyWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    file_url?: StringFieldUpdateOperationsInput | string\n    file_type?: StringFieldUpdateOperationsInput | string\n    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_commentsUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    parent_comment?: discussionboard_commentsUpdateOneWithoutRecursiveNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    parent_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_likesUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_likesNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_likesNestedInput\n  }\n\n  export type discussionboard_likesUncheckedUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_reportsUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_reportsNestedInput\n    comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_reportsNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyWithoutPostInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_moderation_actionUpdateWithoutModerated_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_actor_idNestedInput\n    target_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_target_user_idNestedInput\n    moderated_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateWithoutModerated_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUpdateWithoutReviewed_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    report?: discussionboard_reportsUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateWithoutReviewed_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_warningUpdateWithoutWarning_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    issuer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_by_idNestedInput\n    recipient?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_to_idNestedInput\n    warning_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_warningNestedInput\n    discussionboard_ban?: discussionboard_banUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateWithoutWarning_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_ban?: discussionboard_banUncheckedUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutWarning_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUpdateWithoutRelated_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recipient_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_of_recipient_user_idNestedInput\n    related_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_notificationNestedInput\n    actor_user?: discussionboard_userUpdateOneWithoutDiscussionboard_notification_of_actor_user_idNestedInput\n  }\n\n  export type discussionboard_notificationUncheckedUpdateWithoutRelated_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutRelated_postInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_postCreateManyCategoryInput = {\n    id: string\n    author_member_id: string\n    title: string\n    body: string\n    created_at: Date | string\n    updated_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_postUpdateWithoutCategoryInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    member?: discussionboard_memberUpdateOneRequiredWithoutDiscussionboard_postNestedInput\n    discussionboard_post_attachment?: discussionboard_post_attachmentUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateWithoutCategoryInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_post_attachment?: discussionboard_post_attachmentUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_comments?: discussionboard_commentsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutPostNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_postNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_postNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_postNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_postNestedInput\n  }\n\n  export type discussionboard_postUncheckedUpdateManyWithoutCategoryInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    author_member_id?: StringFieldUpdateOperationsInput | string\n    title?: StringFieldUpdateOperationsInput | string\n    body?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_commentsCreateManyParent_commentInput = {\n    id: string\n    post_id: string\n    author_id: string\n    content: string\n    is_edited: boolean\n    is_deleted: boolean\n    created_at: Date | string\n    updated_at: Date | string\n  }\n\n  export type discussionboard_likesCreateManyCommentInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_reportsCreateManyCommentInput = {\n    id: string\n    user_id: string\n    post_id?: string | null\n    reason_code: string\n    reason_details?: string | null\n    created_at: Date | string\n    deleted_at?: Date | string | null\n  }\n\n  export type discussionboard_moderation_actionCreateManyModerated_commentInput = {\n    id: string\n    actor_id: string\n    target_user_id: string\n    post_id?: string | null\n    action_type: string\n    reason: string\n    created_at: Date | string\n  }\n\n  export type discussionboard_report_reviewCreateManyReviewed_commentInput = {\n    id: string\n    report_id: string\n    reviewer_id: string\n    post_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_warningCreateManyWarning_commentInput = {\n    id: string\n    issued_by_id: string\n    issued_to_id: string\n    post_id?: string | null\n    warning_type: string\n    message: string\n    issued_at: Date | string\n  }\n\n  export type discussionboard_notificationCreateManyRelated_commentInput = {\n    id: string\n    recipient_user_id: string\n    related_post_id?: string | null\n    actor_user_id?: string | null\n    type: string\n    message: string\n    is_read: boolean\n    created_at: Date | string\n  }\n\n  export type discussionboard_commentsUpdateWithoutParent_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    post?: discussionboard_postUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    author?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_commentsNestedInput\n    recursive?: discussionboard_commentsUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateWithoutParent_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recursive?: discussionboard_commentsUncheckedUpdateManyWithoutParent_commentNestedInput\n    discussionboard_likes?: discussionboard_likesUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_reports?: discussionboard_reportsUncheckedUpdateManyWithoutCommentNestedInput\n    discussionboard_moderation_action?: discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentNestedInput\n    discussionboard_warning?: discussionboard_warningUncheckedUpdateManyWithoutWarning_commentNestedInput\n    discussionboard_notification?: discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentNestedInput\n  }\n\n  export type discussionboard_commentsUncheckedUpdateManyWithoutParent_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    post_id?: StringFieldUpdateOperationsInput | string\n    author_id?: StringFieldUpdateOperationsInput | string\n    content?: StringFieldUpdateOperationsInput | string\n    is_edited?: BoolFieldUpdateOperationsInput | boolean\n    is_deleted?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_likesUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_likesNestedInput\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_likesNestedInput\n  }\n\n  export type discussionboard_likesUncheckedUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_likesUncheckedUpdateManyWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_reportsUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_reportsNestedInput\n    post?: discussionboard_postUpdateOneWithoutDiscussionboard_reportsNestedInput\n    discussionboard_report_review?: discussionboard_report_reviewUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    discussionboard_report_review?: discussionboard_report_reviewUncheckedUpdateManyWithoutReportNestedInput\n  }\n\n  export type discussionboard_reportsUncheckedUpdateManyWithoutCommentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    reason_code?: StringFieldUpdateOperationsInput | string\n    reason_details?: NullableStringFieldUpdateOperationsInput | string | null\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_moderation_actionUpdateWithoutModerated_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_actor_idNestedInput\n    target_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_moderation_action_of_target_user_idNestedInput\n    moderated_post?: discussionboard_postUpdateOneWithoutDiscussionboard_moderation_actionNestedInput\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateWithoutModerated_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_moderation_actionUncheckedUpdateManyWithoutModerated_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    actor_id?: StringFieldUpdateOperationsInput | string\n    target_user_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    action_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUpdateWithoutReviewed_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    report?: discussionboard_reportsUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_post?: discussionboard_postUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateWithoutReviewed_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReviewed_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    report_id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_warningUpdateWithoutWarning_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    issuer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_by_idNestedInput\n    recipient?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_warning_of_issued_to_idNestedInput\n    warning_post?: discussionboard_postUpdateOneWithoutDiscussionboard_warningNestedInput\n    discussionboard_ban?: discussionboard_banUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateWithoutWarning_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    discussionboard_ban?: discussionboard_banUncheckedUpdateManyWithoutRelated_warningNestedInput\n  }\n\n  export type discussionboard_warningUncheckedUpdateManyWithoutWarning_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    issued_by_id?: StringFieldUpdateOperationsInput | string\n    issued_to_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    warning_type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUpdateWithoutRelated_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    recipient_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_notification_of_recipient_user_idNestedInput\n    related_post?: discussionboard_postUpdateOneWithoutDiscussionboard_notificationNestedInput\n    actor_user?: discussionboard_userUpdateOneWithoutDiscussionboard_notification_of_actor_user_idNestedInput\n  }\n\n  export type discussionboard_notificationUncheckedUpdateWithoutRelated_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_notificationUncheckedUpdateManyWithoutRelated_commentInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    recipient_user_id?: StringFieldUpdateOperationsInput | string\n    related_post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    actor_user_id?: NullableStringFieldUpdateOperationsInput | string | null\n    type?: StringFieldUpdateOperationsInput | string\n    message?: StringFieldUpdateOperationsInput | string\n    is_read?: BoolFieldUpdateOperationsInput | boolean\n    created_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewCreateManyReportInput = {\n    id: string\n    reviewer_id: string\n    post_id?: string | null\n    comment_id?: string | null\n    review_status: string\n    moderator_comment?: string | null\n    reviewed_at: Date | string\n  }\n\n  export type discussionboard_report_reviewUpdateWithoutReportInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    reviewer?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_post?: discussionboard_postUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n    reviewed_comment?: discussionboard_commentsUpdateOneWithoutDiscussionboard_report_reviewNestedInput\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateWithoutReportInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_report_reviewUncheckedUpdateManyWithoutReportInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    reviewer_id?: StringFieldUpdateOperationsInput | string\n    post_id?: NullableStringFieldUpdateOperationsInput | string | null\n    comment_id?: NullableStringFieldUpdateOperationsInput | string | null\n    review_status?: StringFieldUpdateOperationsInput | string\n    moderator_comment?: NullableStringFieldUpdateOperationsInput | string | null\n    reviewed_at?: DateTimeFieldUpdateOperationsInput | Date | string\n  }\n\n  export type discussionboard_banCreateManyRelated_warningInput = {\n    id: string\n    banned_user_id: string\n    banned_by_id: string\n    ban_type: string\n    reason: string\n    issued_at: Date | string\n    expires_at?: Date | string | null\n  }\n\n  export type discussionboard_banUpdateWithoutRelated_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n    banned_user?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_user_idNestedInput\n    ban_actor?: discussionboard_userUpdateOneRequiredWithoutDiscussionboard_ban_of_banned_by_idNestedInput\n  }\n\n  export type discussionboard_banUncheckedUpdateWithoutRelated_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_user_id?: StringFieldUpdateOperationsInput | string\n    banned_by_id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n  export type discussionboard_banUncheckedUpdateManyWithoutRelated_warningInput = {\n    id?: StringFieldUpdateOperationsInput | string\n    banned_user_id?: StringFieldUpdateOperationsInput | string\n    banned_by_id?: StringFieldUpdateOperationsInput | string\n    ban_type?: StringFieldUpdateOperationsInput | string\n    reason?: StringFieldUpdateOperationsInput | string\n    issued_at?: DateTimeFieldUpdateOperationsInput | Date | string\n    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null\n  }\n\n\n\n  /**\n   * Batch Payload for updateMany & deleteMany & createMany\n   */\n\n  export type BatchPayload = {\n    count: number\n  }\n\n  /**\n   * DMMF\n   */\n  export const dmmf: runtime.BaseDMMF\n}",
        "node_modules/.prisma/client/runtime/index-browser.d.ts": "declare class AnyNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\ndeclare type Args<T, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            operations: {\r\n                [K in F]: {\r\n                    args: any;\r\n                };\r\n            };\r\n        };\r\n    };\r\n} ? T[symbol]['types']['operations'][F]['args'] : any;\r\n\r\ndeclare class DbNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare function Decimal(n: Decimal.Value): Decimal;\r\n\r\nexport declare namespace Decimal {\r\n    export type Constructor = typeof Decimal;\r\n    export type Instance = Decimal;\r\n    export type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n    export type Modulo = Rounding | 9;\r\n    export type Value = string | number | Decimal;\r\n\r\n    // http://mikemcl.github.io/decimal.js/#constructor-properties\r\n    export interface Config {\r\n        precision?: number;\r\n        rounding?: Rounding;\r\n        toExpNeg?: number;\r\n        toExpPos?: number;\r\n        minE?: number;\r\n        maxE?: number;\r\n        crypto?: boolean;\r\n        modulo?: Modulo;\r\n        defaults?: boolean;\r\n    }\r\n}\r\n\r\nexport declare class Decimal {\r\n    readonly d: number[];\r\n    readonly e: number;\r\n    readonly s: number;\r\n\r\n    constructor(n: Decimal.Value);\r\n\r\n    absoluteValue(): Decimal;\r\n    abs(): Decimal;\r\n\r\n    ceil(): Decimal;\r\n\r\n    clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n\r\n    comparedTo(n: Decimal.Value): number;\r\n    cmp(n: Decimal.Value): number;\r\n\r\n    cosine(): Decimal;\r\n    cos(): Decimal;\r\n\r\n    cubeRoot(): Decimal;\r\n    cbrt(): Decimal;\r\n\r\n    decimalPlaces(): number;\r\n    dp(): number;\r\n\r\n    dividedBy(n: Decimal.Value): Decimal;\r\n    div(n: Decimal.Value): Decimal;\r\n\r\n    dividedToIntegerBy(n: Decimal.Value): Decimal;\r\n    divToInt(n: Decimal.Value): Decimal;\r\n\r\n    equals(n: Decimal.Value): boolean;\r\n    eq(n: Decimal.Value): boolean;\r\n\r\n    floor(): Decimal;\r\n\r\n    greaterThan(n: Decimal.Value): boolean;\r\n    gt(n: Decimal.Value): boolean;\r\n\r\n    greaterThanOrEqualTo(n: Decimal.Value): boolean;\r\n    gte(n: Decimal.Value): boolean;\r\n\r\n    hyperbolicCosine(): Decimal;\r\n    cosh(): Decimal;\r\n\r\n    hyperbolicSine(): Decimal;\r\n    sinh(): Decimal;\r\n\r\n    hyperbolicTangent(): Decimal;\r\n    tanh(): Decimal;\r\n\r\n    inverseCosine(): Decimal;\r\n    acos(): Decimal;\r\n\r\n    inverseHyperbolicCosine(): Decimal;\r\n    acosh(): Decimal;\r\n\r\n    inverseHyperbolicSine(): Decimal;\r\n    asinh(): Decimal;\r\n\r\n    inverseHyperbolicTangent(): Decimal;\r\n    atanh(): Decimal;\r\n\r\n    inverseSine(): Decimal;\r\n    asin(): Decimal;\r\n\r\n    inverseTangent(): Decimal;\r\n    atan(): Decimal;\r\n\r\n    isFinite(): boolean;\r\n\r\n    isInteger(): boolean;\r\n    isInt(): boolean;\r\n\r\n    isNaN(): boolean;\r\n\r\n    isNegative(): boolean;\r\n    isNeg(): boolean;\r\n\r\n    isPositive(): boolean;\r\n    isPos(): boolean;\r\n\r\n    isZero(): boolean;\r\n\r\n    lessThan(n: Decimal.Value): boolean;\r\n    lt(n: Decimal.Value): boolean;\r\n\r\n    lessThanOrEqualTo(n: Decimal.Value): boolean;\r\n    lte(n: Decimal.Value): boolean;\r\n\r\n    logarithm(n?: Decimal.Value): Decimal;\r\n    log(n?: Decimal.Value): Decimal;\r\n\r\n    minus(n: Decimal.Value): Decimal;\r\n    sub(n: Decimal.Value): Decimal;\r\n\r\n    modulo(n: Decimal.Value): Decimal;\r\n    mod(n: Decimal.Value): Decimal;\r\n\r\n    naturalExponential(): Decimal;\r\n    exp(): Decimal;\r\n\r\n    naturalLogarithm(): Decimal;\r\n    ln(): Decimal;\r\n\r\n    negated(): Decimal;\r\n    neg(): Decimal;\r\n\r\n    plus(n: Decimal.Value): Decimal;\r\n    add(n: Decimal.Value): Decimal;\r\n\r\n    precision(includeZeros?: boolean): number;\r\n    sd(includeZeros?: boolean): number;\r\n\r\n    round(): Decimal;\r\n\r\n    sine() : Decimal;\r\n    sin() : Decimal;\r\n\r\n    squareRoot(): Decimal;\r\n    sqrt(): Decimal;\r\n\r\n    tangent() : Decimal;\r\n    tan() : Decimal;\r\n\r\n    times(n: Decimal.Value): Decimal;\r\n    mul(n: Decimal.Value) : Decimal;\r\n\r\n    toBinary(significantDigits?: number): string;\r\n    toBinary(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toDecimalPlaces(decimalPlaces?: number): Decimal;\r\n    toDecimalPlaces(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n    toDP(decimalPlaces?: number): Decimal;\r\n    toDP(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toExponential(decimalPlaces?: number): string;\r\n    toExponential(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFixed(decimalPlaces?: number): string;\r\n    toFixed(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFraction(max_denominator?: Decimal.Value): Decimal[];\r\n\r\n    toHexadecimal(significantDigits?: number): string;\r\n    toHexadecimal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n    toHex(significantDigits?: number): string;\r\n    toHex(significantDigits: number, rounding?: Decimal.Rounding): string;\r\n\r\n    toJSON(): string;\r\n\r\n    toNearest(n: Decimal.Value, rounding?: Decimal.Rounding): Decimal;\r\n\r\n    toNumber(): number;\r\n\r\n    toOctal(significantDigits?: number): string;\r\n    toOctal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toPower(n: Decimal.Value): Decimal;\r\n    pow(n: Decimal.Value): Decimal;\r\n\r\n    toPrecision(significantDigits?: number): string;\r\n    toPrecision(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toSignificantDigits(significantDigits?: number): Decimal;\r\n    toSignificantDigits(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n    toSD(significantDigits?: number): Decimal;\r\n    toSD(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toString(): string;\r\n\r\n    truncated(): Decimal;\r\n    trunc(): Decimal;\r\n\r\n    valueOf(): string;\r\n\r\n    static abs(n: Decimal.Value): Decimal;\r\n    static acos(n: Decimal.Value): Decimal;\r\n    static acosh(n: Decimal.Value): Decimal;\r\n    static add(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static asin(n: Decimal.Value): Decimal;\r\n    static asinh(n: Decimal.Value): Decimal;\r\n    static atan(n: Decimal.Value): Decimal;\r\n    static atanh(n: Decimal.Value): Decimal;\r\n    static atan2(y: Decimal.Value, x: Decimal.Value): Decimal;\r\n    static cbrt(n: Decimal.Value): Decimal;\r\n    static ceil(n: Decimal.Value): Decimal;\r\n    static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    static clone(object?: Decimal.Config): Decimal.Constructor;\r\n    static config(object: Decimal.Config): Decimal.Constructor;\r\n    static cos(n: Decimal.Value): Decimal;\r\n    static cosh(n: Decimal.Value): Decimal;\r\n    static div(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static exp(n: Decimal.Value): Decimal;\r\n    static floor(n: Decimal.Value): Decimal;\r\n    static hypot(...n: Decimal.Value[]): Decimal;\r\n    static isDecimal(object: any): object is Decimal;\r\n    static ln(n: Decimal.Value): Decimal;\r\n    static log(n: Decimal.Value, base?: Decimal.Value): Decimal;\r\n    static log2(n: Decimal.Value): Decimal;\r\n    static log10(n: Decimal.Value): Decimal;\r\n    static max(...n: Decimal.Value[]): Decimal;\r\n    static min(...n: Decimal.Value[]): Decimal;\r\n    static mod(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static mul(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static noConflict(): Decimal.Constructor;   // Browser only\r\n    static pow(base: Decimal.Value, exponent: Decimal.Value): Decimal;\r\n    static random(significantDigits?: number): Decimal;\r\n    static round(n: Decimal.Value): Decimal;\r\n    static set(object: Decimal.Config): Decimal.Constructor;\r\n    static sign(n: Decimal.Value): number;\r\n    static sin(n: Decimal.Value): Decimal;\r\n    static sinh(n: Decimal.Value): Decimal;\r\n    static sqrt(n: Decimal.Value): Decimal;\r\n    static sub(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static sum(...n: Decimal.Value[]): Decimal;\r\n    static tan(n: Decimal.Value): Decimal;\r\n    static tanh(n: Decimal.Value): Decimal;\r\n    static trunc(n: Decimal.Value): Decimal;\r\n\r\n    static readonly default?: Decimal.Constructor;\r\n    static readonly Decimal?: Decimal.Constructor;\r\n\r\n    static readonly precision: number;\r\n    static readonly rounding: Decimal.Rounding;\r\n    static readonly toExpNeg: number;\r\n    static readonly toExpPos: number;\r\n    static readonly minE: number;\r\n    static readonly maxE: number;\r\n    static readonly crypto: boolean;\r\n    static readonly modulo: Decimal.Modulo;\r\n\r\n    static readonly ROUND_UP: 0;\r\n    static readonly ROUND_DOWN: 1;\r\n    static readonly ROUND_CEIL: 2;\r\n    static readonly ROUND_FLOOR: 3;\r\n    static readonly ROUND_HALF_UP: 4;\r\n    static readonly ROUND_HALF_DOWN: 5;\r\n    static readonly ROUND_HALF_EVEN: 6;\r\n    static readonly ROUND_HALF_CEIL: 7;\r\n    static readonly ROUND_HALF_FLOOR: 8;\r\n    static readonly EUCLID: 9;\r\n}\r\n\r\ndeclare type Exact<A, W> = (A extends unknown ? (W extends A ? {\r\n    [K in keyof A]: Exact<A[K], W[K]>;\r\n} : W) : never) | (A extends Narrowable ? A : never);\r\n\r\nexport declare function getRuntime(): GetRuntimeOutput;\r\n\r\ndeclare type GetRuntimeOutput = {\r\n    id: RuntimeName;\r\n    prettyName: string;\r\n    isEdge: boolean;\r\n};\r\n\r\ndeclare class JsonNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\n/**\r\n * Generates more strict variant of an enum which, unlike regular enum,\r\n * throws on non-existing property access. This can be useful in following situations:\r\n * - we have an API, that accepts both `undefined` and `SomeEnumType` as an input\r\n * - enum values are generated dynamically from DMMF.\r\n *\r\n * In that case, if using normal enums and no compile-time typechecking, using non-existing property\r\n * will result in `undefined` value being used, which will be accepted. Using strict enum\r\n * in this case will help to have a runtime exception, telling you that you are probably doing something wrong.\r\n *\r\n * Note: if you need to check for existence of a value in the enum you can still use either\r\n * `in` operator or `hasOwnProperty` function.\r\n *\r\n * @param definition\r\n * @returns\r\n */\r\nexport declare function makeStrictEnum<T extends Record<PropertyKey, string | number>>(definition: T): T;\r\n\r\ndeclare type Narrowable = string | number | bigint | boolean | [];\r\n\r\ndeclare class NullTypesEnumValue extends ObjectEnumValue {\r\n    _getNamespace(): string;\r\n}\r\n\r\n/**\r\n * Base class for unique values of object-valued enums.\r\n */\r\ndeclare abstract class ObjectEnumValue {\r\n    constructor(arg?: symbol);\r\n    abstract _getNamespace(): string;\r\n    _getName(): string;\r\n    toString(): string;\r\n}\r\n\r\nexport declare const objectEnumValues: {\r\n    classes: {\r\n        DbNull: typeof DbNull;\r\n        JsonNull: typeof JsonNull;\r\n        AnyNull: typeof AnyNull;\r\n    };\r\n    instances: {\r\n        DbNull: DbNull;\r\n        JsonNull: JsonNull;\r\n        AnyNull: AnyNull;\r\n    };\r\n};\r\n\r\ndeclare type Operation = 'findFirst' | 'findFirstOrThrow' | 'findUnique' | 'findUniqueOrThrow' | 'findMany' | 'create' | 'createMany' | 'createManyAndReturn' | 'update' | 'updateMany' | 'updateManyAndReturn' | 'upsert' | 'delete' | 'deleteMany' | 'aggregate' | 'count' | 'groupBy' | '$queryRaw' | '$executeRaw' | '$queryRawUnsafe' | '$executeRawUnsafe' | 'findRaw' | 'aggregateRaw' | '$runCommandRaw';\r\n\r\ndeclare namespace Public {\r\n    export {\r\n        validator\r\n    }\r\n}\r\nexport { Public }\r\n\r\ndeclare type RuntimeName = 'workerd' | 'deno' | 'netlify' | 'node' | 'bun' | 'edge-light' | '';\r\n\r\ndeclare function validator<V>(): <S>(select: Exact<S, V>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation>(client: C, model: M, operation: O): <S>(select: Exact<S, Args<C[M], O>>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation, P extends keyof Args<C[M], O>>(client: C, model: M, operation: O, prop: P): <S>(select: Exact<S, Args<C[M], O>[P]>) => S;\r\n\r\nexport { }\r\n",
        "node_modules/.prisma/client/runtime/library.d.ts": "/**\r\n * @param this\r\n */\r\ndeclare function $extends(this: Client, extension: ExtensionArgs | ((client: Client) => Client)): Client;\r\n\r\ndeclare type AccelerateEngineConfig = {\r\n    inlineSchema: EngineConfig['inlineSchema'];\r\n    inlineSchemaHash: EngineConfig['inlineSchemaHash'];\r\n    env: EngineConfig['env'];\r\n    generator?: {\r\n        previewFeatures: string[];\r\n    };\r\n    inlineDatasources: EngineConfig['inlineDatasources'];\r\n    overrideDatasources: EngineConfig['overrideDatasources'];\r\n    clientVersion: EngineConfig['clientVersion'];\r\n    engineVersion: EngineConfig['engineVersion'];\r\n    logEmitter: EngineConfig['logEmitter'];\r\n    logQueries?: EngineConfig['logQueries'];\r\n    logLevel?: EngineConfig['logLevel'];\r\n    tracingHelper: EngineConfig['tracingHelper'];\r\n    accelerateUtils?: AccelerateUtils;\r\n};\r\n\r\ndeclare type AccelerateUtils = EngineConfig['accelerateUtils'];\r\n\r\nexport declare type Action = keyof typeof DMMF_2.ModelAction | 'executeRaw' | 'queryRaw' | 'runCommandRaw';\r\n\r\ndeclare type ActiveConnectorType = Exclude<ConnectorType, 'postgres' | 'prisma+postgres'>;\r\n\r\n/**\r\n * An interface that exposes some basic information about the\r\n * adapter like its name and provider type.\r\n */\r\ndeclare interface AdapterInfo {\r\n    readonly provider: Provider;\r\n    readonly adapterName: (typeof officialPrismaAdapters)[number] | (string & {});\r\n}\r\n\r\nexport declare type Aggregate = '_count' | '_max' | '_min' | '_avg' | '_sum';\r\n\r\nexport declare type AllModelsToStringIndex<TypeMap extends TypeMapDef, Args extends Record<string, any>, K extends PropertyKey> = Args extends {\r\n    [P in K]: {\r\n        $allModels: infer AllModels;\r\n    };\r\n} ? {\r\n    [P in K]: Record<TypeMap['meta']['modelProps'], AllModels>;\r\n} : {};\r\n\r\ndeclare class AnyNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare type ApplyOmit<T, OmitConfig> = Compute<{\r\n    [K in keyof T as OmitValue<OmitConfig, K> extends true ? never : K]: T[K];\r\n}>;\r\n\r\nexport declare type Args<T, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            operations: {\r\n                [K in F]: {\r\n                    args: any;\r\n                };\r\n            };\r\n        };\r\n    };\r\n} ? T[symbol]['types']['operations'][F]['args'] : any;\r\n\r\nexport declare type Args_3<T, F extends Operation> = Args<T, F>;\r\n\r\n/**\r\n * Original `quaint::ValueType` enum tag from Prisma's `quaint`.\r\n * Query arguments marked with this type are sanitized before being sent to the database.\r\n * Notice while a query argument may be `null`, `ArgType` is guaranteed to be defined.\r\n */\r\ndeclare type ArgType = 'Int32' | 'Int64' | 'Float' | 'Double' | 'Text' | 'Enum' | 'EnumArray' | 'Bytes' | 'Boolean' | 'Char' | 'Array' | 'Numeric' | 'Json' | 'Xml' | 'Uuid' | 'DateTime' | 'Date' | 'Time' | 'Unknown';\r\n\r\n/**\r\n * Attributes is a map from string to attribute values.\r\n *\r\n * Note: only the own enumerable keys are counted as valid attribute keys.\r\n */\r\ndeclare interface Attributes {\r\n    [attributeKey: string]: AttributeValue | undefined;\r\n}\r\n\r\n/**\r\n * Attribute values may be any non-nullish primitive value except an object.\r\n *\r\n * null or undefined attribute values are invalid and will result in undefined behavior.\r\n */\r\ndeclare type AttributeValue = string | number | boolean | Array<null | undefined | string> | Array<null | undefined | number> | Array<null | undefined | boolean>;\r\n\r\nexport declare type BaseDMMF = {\r\n    readonly datamodel: Omit<DMMF_2.Datamodel, 'indexes'>;\r\n};\r\n\r\ndeclare type BatchArgs = {\r\n    queries: BatchQuery[];\r\n    transaction?: {\r\n        isolationLevel?: IsolationLevel;\r\n    };\r\n};\r\n\r\ndeclare type BatchInternalParams = {\r\n    requests: RequestParams[];\r\n    customDataProxyFetch?: CustomDataProxyFetch;\r\n};\r\n\r\ndeclare type BatchQuery = {\r\n    model: string | undefined;\r\n    operation: string;\r\n    args: JsArgs | RawQueryArgs;\r\n};\r\n\r\ndeclare type BatchQueryEngineResult<T> = QueryEngineResultData<T> | Error;\r\n\r\ndeclare type BatchQueryOptionsCb = (args: BatchQueryOptionsCbArgs) => Promise<any>;\r\n\r\ndeclare type BatchQueryOptionsCbArgs = {\r\n    args: BatchArgs;\r\n    query: (args: BatchArgs, __internalParams?: BatchInternalParams) => Promise<unknown[]>;\r\n    __internalParams: BatchInternalParams;\r\n};\r\n\r\ndeclare type BatchResponse = MultiBatchResponse | CompactedBatchResponse;\r\n\r\ndeclare type BatchTransactionOptions = {\r\n    isolationLevel?: IsolationLevel;\r\n};\r\n\r\ndeclare interface BinaryTargetsEnvValue {\r\n    fromEnvVar: string | null;\r\n    value: string;\r\n    native?: boolean;\r\n}\r\n\r\nexport declare type Call<F extends Fn, P> = (F & {\r\n    params: P;\r\n})['returns'];\r\n\r\ndeclare interface CallSite {\r\n    getLocation(): LocationInFile | null;\r\n}\r\n\r\nexport declare type Cast<A, W> = A extends W ? A : W;\r\n\r\ndeclare type Client = ReturnType<typeof getPrismaClient> extends new () => infer T ? T : never;\r\n\r\nexport declare type ClientArg = {\r\n    [MethodName in string]: unknown;\r\n};\r\n\r\nexport declare type ClientArgs = {\r\n    client: ClientArg;\r\n};\r\n\r\nexport declare type ClientBuiltInProp = keyof DynamicClientExtensionThisBuiltin<never, never, never>;\r\n\r\nexport declare type ClientOptionDef = undefined | {\r\n    [K in string]: any;\r\n};\r\n\r\nexport declare type ClientOtherOps = {\r\n    $queryRaw<T = unknown>(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise<T>;\r\n    $queryRawTyped<T>(query: TypedSql<unknown[], T>): PrismaPromise<T[]>;\r\n    $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;\r\n    $executeRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise<number>;\r\n    $executeRawUnsafe(query: string, ...values: any[]): PrismaPromise<number>;\r\n    $runCommandRaw(command: InputJsonObject): PrismaPromise<JsonObject>;\r\n};\r\n\r\ndeclare type ColumnType = (typeof ColumnTypeEnum)[keyof typeof ColumnTypeEnum];\r\n\r\ndeclare const ColumnTypeEnum: {\r\n    readonly Int32: 0;\r\n    readonly Int64: 1;\r\n    readonly Float: 2;\r\n    readonly Double: 3;\r\n    readonly Numeric: 4;\r\n    readonly Boolean: 5;\r\n    readonly Character: 6;\r\n    readonly Text: 7;\r\n    readonly Date: 8;\r\n    readonly Time: 9;\r\n    readonly DateTime: 10;\r\n    readonly Json: 11;\r\n    readonly Enum: 12;\r\n    readonly Bytes: 13;\r\n    readonly Set: 14;\r\n    readonly Uuid: 15;\r\n    readonly Int32Array: 64;\r\n    readonly Int64Array: 65;\r\n    readonly FloatArray: 66;\r\n    readonly DoubleArray: 67;\r\n    readonly NumericArray: 68;\r\n    readonly BooleanArray: 69;\r\n    readonly CharacterArray: 70;\r\n    readonly TextArray: 71;\r\n    readonly DateArray: 72;\r\n    readonly TimeArray: 73;\r\n    readonly DateTimeArray: 74;\r\n    readonly JsonArray: 75;\r\n    readonly EnumArray: 76;\r\n    readonly BytesArray: 77;\r\n    readonly UuidArray: 78;\r\n    readonly UnknownNumber: 128;\r\n};\r\n\r\ndeclare type CompactedBatchResponse = {\r\n    type: 'compacted';\r\n    plan: object;\r\n    arguments: Record<string, {}>[];\r\n    nestedSelection: string[];\r\n    keys: string[];\r\n    expectNonEmpty: boolean;\r\n};\r\n\r\ndeclare type CompilerWasmLoadingConfig = {\r\n    /**\r\n     * WASM-bindgen runtime for corresponding module\r\n     */\r\n    getRuntime: () => Promise<{\r\n        __wbg_set_wasm(exports: unknown): void;\r\n        QueryCompiler: QueryCompilerConstructor;\r\n    }>;\r\n    /**\r\n     * Loads the raw wasm module for the wasm compiler engine. This configuration is\r\n     * generated specifically for each type of client, eg. Node.js client and Edge\r\n     * clients will have different implementations.\r\n     * @remarks this is a callback on purpose, we only load the wasm if needed.\r\n     * @remarks only used by ClientEngine\r\n     */\r\n    getQueryCompilerWasmModule: () => Promise<unknown>;\r\n};\r\n\r\nexport declare type Compute<T> = T extends Function ? T : {\r\n    [K in keyof T]: T[K];\r\n} & unknown;\r\n\r\nexport declare type ComputeDeep<T> = T extends Function ? T : {\r\n    [K in keyof T]: ComputeDeep<T[K]>;\r\n} & unknown;\r\n\r\ndeclare type ComputedField = {\r\n    name: string;\r\n    needs: string[];\r\n    compute: ResultArgsFieldCompute;\r\n};\r\n\r\ndeclare type ComputedFieldsMap = {\r\n    [fieldName: string]: ComputedField;\r\n};\r\n\r\ndeclare type ConnectionInfo = {\r\n    schemaName?: string;\r\n    maxBindValues?: number;\r\n};\r\n\r\ndeclare type ConnectorType = 'mysql' | 'mongodb' | 'sqlite' | 'postgresql' | 'postgres' | 'prisma+postgres' | 'sqlserver' | 'cockroachdb';\r\n\r\ndeclare interface Context {\r\n    /**\r\n     * Get a value from the context.\r\n     *\r\n     * @param key key which identifies a context value\r\n     */\r\n    getValue(key: symbol): unknown;\r\n    /**\r\n     * Create a new context which inherits from this context and has\r\n     * the given key set to the given value.\r\n     *\r\n     * @param key context key for which to set the value\r\n     * @param value value to set for the given key\r\n     */\r\n    setValue(key: symbol, value: unknown): Context;\r\n    /**\r\n     * Return a new context which inherits from this context but does\r\n     * not contain a value for the given key.\r\n     *\r\n     * @param key context key for which to clear a value\r\n     */\r\n    deleteValue(key: symbol): Context;\r\n}\r\n\r\ndeclare type Context_2<T> = T extends {\r\n    [K: symbol]: {\r\n        ctx: infer C;\r\n    };\r\n} ? C & T & {\r\n    /**\r\n     * @deprecated Use `$name` instead.\r\n     */\r\n    name?: string;\r\n    $name?: string;\r\n    $parent?: unknown;\r\n} : T & {\r\n    /**\r\n     * @deprecated Use `$name` instead.\r\n     */\r\n    name?: string;\r\n    $name?: string;\r\n    $parent?: unknown;\r\n};\r\n\r\nexport declare type Count<O> = {\r\n    [K in keyof O]: Count<number>;\r\n} & {};\r\n\r\nexport declare function createParam(name: string): Param<unknown, string>;\r\n\r\n/**\r\n * Custom fetch function for `DataProxyEngine`.\r\n *\r\n * We can't use the actual type of `globalThis.fetch` because this will result\r\n * in API Extractor referencing Node.js type definitions in the `.d.ts` bundle\r\n * for the client runtime. We can only use such types in internal types that\r\n * don't end up exported anywhere.\r\n\r\n * It's also not possible to write a definition of `fetch` that would accept the\r\n * actual `fetch` function from different environments such as Node.js and\r\n * Cloudflare Workers (with their extensions to `RequestInit` and `Response`).\r\n * `fetch` is used in both covariant and contravariant positions in\r\n * `CustomDataProxyFetch`, making it invariant, so we need the exact same type.\r\n * Even if we removed the argument and left `fetch` in covariant position only,\r\n * then for an extension-supplied function to be assignable to `customDataProxyFetch`,\r\n * the platform-specific (or custom) `fetch` function needs to be assignable\r\n * to our `fetch` definition. This, in turn, requires the third-party `Response`\r\n * to be a subtype of our `Response` (which is not a problem, we could declare\r\n * a minimal `Response` type that only includes what we use) *and* requires the\r\n * third-party `RequestInit` to be a supertype of our `RequestInit` (i.e. we\r\n * have to declare all properties any `RequestInit` implementation in existence\r\n * could possibly have), which is not possible.\r\n *\r\n * Since `@prisma/extension-accelerate` redefines the type of\r\n * `__internalParams.customDataProxyFetch` to its own type anyway (probably for\r\n * exactly this reason), our definition is never actually used and is completely\r\n * ignored, so it doesn't matter, and we can just use `unknown` as the type of\r\n * `fetch` here.\r\n */\r\ndeclare type CustomDataProxyFetch = (fetch: unknown) => unknown;\r\n\r\ndeclare class DataLoader<T = unknown> {\r\n    private options;\r\n    batches: {\r\n        [key: string]: Job[];\r\n    };\r\n    private tickActive;\r\n    constructor(options: DataLoaderOptions<T>);\r\n    request(request: T): Promise<any>;\r\n    private dispatchBatches;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare type DataLoaderOptions<T> = {\r\n    singleLoader: (request: T) => Promise<any>;\r\n    batchLoader: (request: T[]) => Promise<any[]>;\r\n    batchBy: (request: T) => string | undefined;\r\n    batchOrder: (requestA: T, requestB: T) => number;\r\n};\r\n\r\ndeclare type Datamodel = ReadonlyDeep_2<{\r\n    models: Model[];\r\n    enums: DatamodelEnum[];\r\n    types: Model[];\r\n    indexes: Index[];\r\n}>;\r\n\r\ndeclare type DatamodelEnum = ReadonlyDeep_2<{\r\n    name: string;\r\n    values: EnumValue[];\r\n    dbName?: string | null;\r\n    documentation?: string;\r\n}>;\r\n\r\ndeclare function datamodelEnumToSchemaEnum(datamodelEnum: DatamodelEnum): SchemaEnum;\r\n\r\ndeclare type Datasource = {\r\n    url?: string;\r\n};\r\n\r\ndeclare type Datasources = {\r\n    [name in string]: Datasource;\r\n};\r\n\r\ndeclare class DbNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\nexport declare const Debug: typeof debugCreate & {\r\n    enable(namespace: any): void;\r\n    disable(): any;\r\n    enabled(namespace: string): boolean;\r\n    log: (...args: string[]) => void;\r\n    formatters: {};\r\n};\r\n\r\n/**\r\n * Create a new debug instance with the given namespace.\r\n *\r\n * @example\r\n * ```ts\r\n * import Debug from '@prisma/debug'\r\n * const debug = Debug('prisma:client')\r\n * debug('Hello World')\r\n * ```\r\n */\r\ndeclare function debugCreate(namespace: string): ((...args: any[]) => void) & {\r\n    color: string;\r\n    enabled: boolean;\r\n    namespace: string;\r\n    log: (...args: string[]) => void;\r\n    extend: () => void;\r\n};\r\n\r\nexport declare function Decimal(n: Decimal.Value): Decimal;\r\n\r\nexport declare namespace Decimal {\r\n    export type Constructor = typeof Decimal;\r\n    export type Instance = Decimal;\r\n    export type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n    export type Modulo = Rounding | 9;\r\n    export type Value = string | number | Decimal;\r\n\r\n    // http://mikemcl.github.io/decimal.js/#constructor-properties\r\n    export interface Config {\r\n        precision?: number;\r\n        rounding?: Rounding;\r\n        toExpNeg?: number;\r\n        toExpPos?: number;\r\n        minE?: number;\r\n        maxE?: number;\r\n        crypto?: boolean;\r\n        modulo?: Modulo;\r\n        defaults?: boolean;\r\n    }\r\n}\r\n\r\nexport declare class Decimal {\r\n    readonly d: number[];\r\n    readonly e: number;\r\n    readonly s: number;\r\n\r\n    constructor(n: Decimal.Value);\r\n\r\n    absoluteValue(): Decimal;\r\n    abs(): Decimal;\r\n\r\n    ceil(): Decimal;\r\n\r\n    clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\r\n\r\n    comparedTo(n: Decimal.Value): number;\r\n    cmp(n: Decimal.Value): number;\r\n\r\n    cosine(): Decimal;\r\n    cos(): Decimal;\r\n\r\n    cubeRoot(): Decimal;\r\n    cbrt(): Decimal;\r\n\r\n    decimalPlaces(): number;\r\n    dp(): number;\r\n\r\n    dividedBy(n: Decimal.Value): Decimal;\r\n    div(n: Decimal.Value): Decimal;\r\n\r\n    dividedToIntegerBy(n: Decimal.Value): Decimal;\r\n    divToInt(n: Decimal.Value): Decimal;\r\n\r\n    equals(n: Decimal.Value): boolean;\r\n    eq(n: Decimal.Value): boolean;\r\n\r\n    floor(): Decimal;\r\n\r\n    greaterThan(n: Decimal.Value): boolean;\r\n    gt(n: Decimal.Value): boolean;\r\n\r\n    greaterThanOrEqualTo(n: Decimal.Value): boolean;\r\n    gte(n: Decimal.Value): boolean;\r\n\r\n    hyperbolicCosine(): Decimal;\r\n    cosh(): Decimal;\r\n\r\n    hyperbolicSine(): Decimal;\r\n    sinh(): Decimal;\r\n\r\n    hyperbolicTangent(): Decimal;\r\n    tanh(): Decimal;\r\n\r\n    inverseCosine(): Decimal;\r\n    acos(): Decimal;\r\n\r\n    inverseHyperbolicCosine(): Decimal;\r\n    acosh(): Decimal;\r\n\r\n    inverseHyperbolicSine(): Decimal;\r\n    asinh(): Decimal;\r\n\r\n    inverseHyperbolicTangent(): Decimal;\r\n    atanh(): Decimal;\r\n\r\n    inverseSine(): Decimal;\r\n    asin(): Decimal;\r\n\r\n    inverseTangent(): Decimal;\r\n    atan(): Decimal;\r\n\r\n    isFinite(): boolean;\r\n\r\n    isInteger(): boolean;\r\n    isInt(): boolean;\r\n\r\n    isNaN(): boolean;\r\n\r\n    isNegative(): boolean;\r\n    isNeg(): boolean;\r\n\r\n    isPositive(): boolean;\r\n    isPos(): boolean;\r\n\r\n    isZero(): boolean;\r\n\r\n    lessThan(n: Decimal.Value): boolean;\r\n    lt(n: Decimal.Value): boolean;\r\n\r\n    lessThanOrEqualTo(n: Decimal.Value): boolean;\r\n    lte(n: Decimal.Value): boolean;\r\n\r\n    logarithm(n?: Decimal.Value): Decimal;\r\n    log(n?: Decimal.Value): Decimal;\r\n\r\n    minus(n: Decimal.Value): Decimal;\r\n    sub(n: Decimal.Value): Decimal;\r\n\r\n    modulo(n: Decimal.Value): Decimal;\r\n    mod(n: Decimal.Value): Decimal;\r\n\r\n    naturalExponential(): Decimal;\r\n    exp(): Decimal;\r\n\r\n    naturalLogarithm(): Decimal;\r\n    ln(): Decimal;\r\n\r\n    negated(): Decimal;\r\n    neg(): Decimal;\r\n\r\n    plus(n: Decimal.Value): Decimal;\r\n    add(n: Decimal.Value): Decimal;\r\n\r\n    precision(includeZeros?: boolean): number;\r\n    sd(includeZeros?: boolean): number;\r\n\r\n    round(): Decimal;\r\n\r\n    sine() : Decimal;\r\n    sin() : Decimal;\r\n\r\n    squareRoot(): Decimal;\r\n    sqrt(): Decimal;\r\n\r\n    tangent() : Decimal;\r\n    tan() : Decimal;\r\n\r\n    times(n: Decimal.Value): Decimal;\r\n    mul(n: Decimal.Value) : Decimal;\r\n\r\n    toBinary(significantDigits?: number): string;\r\n    toBinary(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toDecimalPlaces(decimalPlaces?: number): Decimal;\r\n    toDecimalPlaces(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n    toDP(decimalPlaces?: number): Decimal;\r\n    toDP(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toExponential(decimalPlaces?: number): string;\r\n    toExponential(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFixed(decimalPlaces?: number): string;\r\n    toFixed(decimalPlaces: number, rounding: Decimal.Rounding): string;\r\n\r\n    toFraction(max_denominator?: Decimal.Value): Decimal[];\r\n\r\n    toHexadecimal(significantDigits?: number): string;\r\n    toHexadecimal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n    toHex(significantDigits?: number): string;\r\n    toHex(significantDigits: number, rounding?: Decimal.Rounding): string;\r\n\r\n    toJSON(): string;\r\n\r\n    toNearest(n: Decimal.Value, rounding?: Decimal.Rounding): Decimal;\r\n\r\n    toNumber(): number;\r\n\r\n    toOctal(significantDigits?: number): string;\r\n    toOctal(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toPower(n: Decimal.Value): Decimal;\r\n    pow(n: Decimal.Value): Decimal;\r\n\r\n    toPrecision(significantDigits?: number): string;\r\n    toPrecision(significantDigits: number, rounding: Decimal.Rounding): string;\r\n\r\n    toSignificantDigits(significantDigits?: number): Decimal;\r\n    toSignificantDigits(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n    toSD(significantDigits?: number): Decimal;\r\n    toSD(significantDigits: number, rounding: Decimal.Rounding): Decimal;\r\n\r\n    toString(): string;\r\n\r\n    truncated(): Decimal;\r\n    trunc(): Decimal;\r\n\r\n    valueOf(): string;\r\n\r\n    static abs(n: Decimal.Value): Decimal;\r\n    static acos(n: Decimal.Value): Decimal;\r\n    static acosh(n: Decimal.Value): Decimal;\r\n    static add(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static asin(n: Decimal.Value): Decimal;\r\n    static asinh(n: Decimal.Value): Decimal;\r\n    static atan(n: Decimal.Value): Decimal;\r\n    static atanh(n: Decimal.Value): Decimal;\r\n    static atan2(y: Decimal.Value, x: Decimal.Value): Decimal;\r\n    static cbrt(n: Decimal.Value): Decimal;\r\n    static ceil(n: Decimal.Value): Decimal;\r\n    static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\r\n    static clone(object?: Decimal.Config): Decimal.Constructor;\r\n    static config(object: Decimal.Config): Decimal.Constructor;\r\n    static cos(n: Decimal.Value): Decimal;\r\n    static cosh(n: Decimal.Value): Decimal;\r\n    static div(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static exp(n: Decimal.Value): Decimal;\r\n    static floor(n: Decimal.Value): Decimal;\r\n    static hypot(...n: Decimal.Value[]): Decimal;\r\n    static isDecimal(object: any): object is Decimal;\r\n    static ln(n: Decimal.Value): Decimal;\r\n    static log(n: Decimal.Value, base?: Decimal.Value): Decimal;\r\n    static log2(n: Decimal.Value): Decimal;\r\n    static log10(n: Decimal.Value): Decimal;\r\n    static max(...n: Decimal.Value[]): Decimal;\r\n    static min(...n: Decimal.Value[]): Decimal;\r\n    static mod(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static mul(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static noConflict(): Decimal.Constructor;   // Browser only\r\n    static pow(base: Decimal.Value, exponent: Decimal.Value): Decimal;\r\n    static random(significantDigits?: number): Decimal;\r\n    static round(n: Decimal.Value): Decimal;\r\n    static set(object: Decimal.Config): Decimal.Constructor;\r\n    static sign(n: Decimal.Value): number;\r\n    static sin(n: Decimal.Value): Decimal;\r\n    static sinh(n: Decimal.Value): Decimal;\r\n    static sqrt(n: Decimal.Value): Decimal;\r\n    static sub(x: Decimal.Value, y: Decimal.Value): Decimal;\r\n    static sum(...n: Decimal.Value[]): Decimal;\r\n    static tan(n: Decimal.Value): Decimal;\r\n    static tanh(n: Decimal.Value): Decimal;\r\n    static trunc(n: Decimal.Value): Decimal;\r\n\r\n    static readonly default?: Decimal.Constructor;\r\n    static readonly Decimal?: Decimal.Constructor;\r\n\r\n    static readonly precision: number;\r\n    static readonly rounding: Decimal.Rounding;\r\n    static readonly toExpNeg: number;\r\n    static readonly toExpPos: number;\r\n    static readonly minE: number;\r\n    static readonly maxE: number;\r\n    static readonly crypto: boolean;\r\n    static readonly modulo: Decimal.Modulo;\r\n\r\n    static readonly ROUND_UP: 0;\r\n    static readonly ROUND_DOWN: 1;\r\n    static readonly ROUND_CEIL: 2;\r\n    static readonly ROUND_FLOOR: 3;\r\n    static readonly ROUND_HALF_UP: 4;\r\n    static readonly ROUND_HALF_DOWN: 5;\r\n    static readonly ROUND_HALF_EVEN: 6;\r\n    static readonly ROUND_HALF_CEIL: 7;\r\n    static readonly ROUND_HALF_FLOOR: 8;\r\n    static readonly EUCLID: 9;\r\n}\r\n\r\n/**\r\n * Interface for any Decimal.js-like library\r\n * Allows us to accept Decimal.js from different\r\n * versions and some compatible alternatives\r\n */\r\nexport declare interface DecimalJsLike {\r\n    d: number[];\r\n    e: number;\r\n    s: number;\r\n    toFixed(): string;\r\n}\r\n\r\nexport declare type DefaultArgs = InternalArgs<{}, {}, {}, {}>;\r\n\r\nexport declare type DefaultSelection<Payload extends OperationPayload, Args = {}, GlobalOmitOptions = {}> = Args extends {\r\n    omit: infer LocalOmit;\r\n} ? ApplyOmit<UnwrapPayload<{\r\n    default: Payload;\r\n}>['default'], PatchFlat<LocalOmit, ExtractGlobalOmit<GlobalOmitOptions, Uncapitalize<Payload['name']>>>> : ApplyOmit<UnwrapPayload<{\r\n    default: Payload;\r\n}>['default'], ExtractGlobalOmit<GlobalOmitOptions, Uncapitalize<Payload['name']>>>;\r\n\r\nexport declare function defineDmmfProperty(target: object, runtimeDataModel: RuntimeDataModel): void;\r\n\r\ndeclare function defineExtension(ext: ExtensionArgs | ((client: Client) => Client)): (client: Client) => Client;\r\n\r\ndeclare const denylist: readonly [\"$connect\", \"$disconnect\", \"$on\", \"$transaction\", \"$use\", \"$extends\"];\r\n\r\ndeclare type Deprecation = ReadonlyDeep_2<{\r\n    sinceVersion: string;\r\n    reason: string;\r\n    plannedRemovalVersion?: string;\r\n}>;\r\n\r\ndeclare type DeserializedResponse = Array<Record<string, unknown>>;\r\n\r\nexport declare function deserializeJsonResponse(result: unknown): unknown;\r\n\r\nexport declare function deserializeRawResult(response: RawResponse): DeserializedResponse;\r\n\r\nexport declare type DevTypeMapDef = {\r\n    meta: {\r\n        modelProps: string;\r\n    };\r\n    model: {\r\n        [Model in PropertyKey]: {\r\n            [Operation in PropertyKey]: DevTypeMapFnDef;\r\n        };\r\n    };\r\n    other: {\r\n        [Operation in PropertyKey]: DevTypeMapFnDef;\r\n    };\r\n};\r\n\r\nexport declare type DevTypeMapFnDef = {\r\n    args: any;\r\n    result: any;\r\n    payload: OperationPayload;\r\n};\r\n\r\nexport declare namespace DMMF {\r\n    export {\r\n        datamodelEnumToSchemaEnum,\r\n        Document_2 as Document,\r\n        Mappings,\r\n        OtherOperationMappings,\r\n        DatamodelEnum,\r\n        SchemaEnum,\r\n        EnumValue,\r\n        Datamodel,\r\n        uniqueIndex,\r\n        PrimaryKey,\r\n        Model,\r\n        FieldKind,\r\n        FieldNamespace,\r\n        FieldLocation,\r\n        Field,\r\n        FieldDefault,\r\n        FieldDefaultScalar,\r\n        Index,\r\n        IndexType,\r\n        IndexField,\r\n        SortOrder,\r\n        Schema,\r\n        Query,\r\n        QueryOutput,\r\n        TypeRef,\r\n        InputTypeRef,\r\n        SchemaArg,\r\n        OutputType,\r\n        SchemaField,\r\n        OutputTypeRef,\r\n        Deprecation,\r\n        InputType,\r\n        FieldRefType,\r\n        FieldRefAllowType,\r\n        ModelMapping,\r\n        ModelAction\r\n    }\r\n}\r\n\r\ndeclare namespace DMMF_2 {\r\n    export {\r\n        datamodelEnumToSchemaEnum,\r\n        Document_2 as Document,\r\n        Mappings,\r\n        OtherOperationMappings,\r\n        DatamodelEnum,\r\n        SchemaEnum,\r\n        EnumValue,\r\n        Datamodel,\r\n        uniqueIndex,\r\n        PrimaryKey,\r\n        Model,\r\n        FieldKind,\r\n        FieldNamespace,\r\n        FieldLocation,\r\n        Field,\r\n        FieldDefault,\r\n        FieldDefaultScalar,\r\n        Index,\r\n        IndexType,\r\n        IndexField,\r\n        SortOrder,\r\n        Schema,\r\n        Query,\r\n        QueryOutput,\r\n        TypeRef,\r\n        InputTypeRef,\r\n        SchemaArg,\r\n        OutputType,\r\n        SchemaField,\r\n        OutputTypeRef,\r\n        Deprecation,\r\n        InputType,\r\n        FieldRefType,\r\n        FieldRefAllowType,\r\n        ModelMapping,\r\n        ModelAction\r\n    }\r\n}\r\n\r\nexport declare function dmmfToRuntimeDataModel(dmmfDataModel: DMMF_2.Datamodel): RuntimeDataModel;\r\n\r\ndeclare type Document_2 = ReadonlyDeep_2<{\r\n    datamodel: Datamodel;\r\n    schema: Schema;\r\n    mappings: Mappings;\r\n}>;\r\n\r\n/**\r\n * A generic driver adapter factory that allows the user to instantiate a\r\n * driver adapter. The query and result types are specific to the adapter.\r\n */\r\ndeclare interface DriverAdapterFactory<Query, Result> extends AdapterInfo {\r\n    /**\r\n     * Instantiate a driver adapter.\r\n     */\r\n    connect(): Promise<Queryable<Query, Result>>;\r\n}\r\n\r\n/** Client */\r\nexport declare type DynamicClientExtensionArgs<C_, TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof C_]: unknown;\r\n} & {\r\n    [K: symbol]: {\r\n        ctx: Optional<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList> & {\r\n            $parent: Optional<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList>;\r\n        };\r\n    };\r\n};\r\n\r\nexport declare type DynamicClientExtensionThis<TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof ExtArgs['client']]: Return<ExtArgs['client'][P]>;\r\n} & {\r\n    [P in Exclude<TypeMap['meta']['modelProps'], keyof ExtArgs['client']>]: DynamicModelExtensionThis<TypeMap, ModelKey<TypeMap, P>, ExtArgs>;\r\n} & {\r\n    [P in Exclude<keyof TypeMap['other']['operations'], keyof ExtArgs['client']>]: P extends keyof ClientOtherOps ? ClientOtherOps[P] : never;\r\n} & {\r\n    [P in Exclude<ClientBuiltInProp, keyof ExtArgs['client']>]: DynamicClientExtensionThisBuiltin<TypeMap, TypeMapCb, ExtArgs>[P];\r\n} & {\r\n    [K: symbol]: {\r\n        types: TypeMap['other'];\r\n    };\r\n};\r\n\r\nexport declare type DynamicClientExtensionThisBuiltin<TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    $extends: ExtendsHook<'extends', TypeMapCb, ExtArgs, Call<TypeMapCb, {\r\n        extArgs: ExtArgs;\r\n    }>>;\r\n    $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: {\r\n        isolationLevel?: TypeMap['meta']['txIsolationLevel'];\r\n    }): Promise<UnwrapTuple<P>>;\r\n    $transaction<R>(fn: (client: Omit<DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>, ITXClientDenyList>) => Promise<R>, options?: {\r\n        maxWait?: number;\r\n        timeout?: number;\r\n        isolationLevel?: TypeMap['meta']['txIsolationLevel'];\r\n    }): Promise<R>;\r\n    $disconnect(): Promise<void>;\r\n    $connect(): Promise<void>;\r\n};\r\n\r\n/** Model */\r\nexport declare type DynamicModelExtensionArgs<M_, TypeMap extends TypeMapDef, TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>> = {\r\n    [K in keyof M_]: K extends '$allModels' ? {\r\n        [P in keyof M_[K]]?: unknown;\r\n    } & {\r\n        [K: symbol]: {};\r\n    } : K extends TypeMap['meta']['modelProps'] ? {\r\n        [P in keyof M_[K]]?: unknown;\r\n    } & {\r\n        [K: symbol]: {\r\n            ctx: DynamicModelExtensionThis<TypeMap, ModelKey<TypeMap, K>, ExtArgs> & {\r\n                $parent: DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>;\r\n            } & {\r\n                $name: ModelKey<TypeMap, K>;\r\n            } & {\r\n                /**\r\n                 * @deprecated Use `$name` instead.\r\n                 */\r\n                name: ModelKey<TypeMap, K>;\r\n            };\r\n        };\r\n    } : never;\r\n};\r\n\r\nexport declare type DynamicModelExtensionFluentApi<TypeMap extends TypeMapDef, M extends PropertyKey, P extends PropertyKey, Null> = {\r\n    [K in keyof TypeMap['model'][M]['payload']['objects']]: <A>(args?: Exact<A, Path<TypeMap['model'][M]['operations'][P]['args']['select'], [K]>>) => PrismaPromise<Path<DynamicModelExtensionFnResultBase<TypeMap, M, {\r\n        select: {\r\n            [P in K]: A;\r\n        };\r\n    }, P>, [K]> | Null> & DynamicModelExtensionFluentApi<TypeMap, (TypeMap['model'][M]['payload']['objects'][K] & {})['name'], P, Null | Select<TypeMap['model'][M]['payload']['objects'][K], null>>;\r\n};\r\n\r\nexport declare type DynamicModelExtensionFnResult<TypeMap extends TypeMapDef, M extends PropertyKey, A, P extends PropertyKey, Null> = P extends FluentOperation ? DynamicModelExtensionFluentApi<TypeMap, M, P, Null> & PrismaPromise<DynamicModelExtensionFnResultBase<TypeMap, M, A, P> | Null> : PrismaPromise<DynamicModelExtensionFnResultBase<TypeMap, M, A, P>>;\r\n\r\nexport declare type DynamicModelExtensionFnResultBase<TypeMap extends TypeMapDef, M extends PropertyKey, A, P extends PropertyKey> = GetResult<TypeMap['model'][M]['payload'], A, P & Operation, TypeMap['globalOmitOptions']>;\r\n\r\nexport declare type DynamicModelExtensionFnResultNull<P extends PropertyKey> = P extends 'findUnique' | 'findFirst' ? null : never;\r\n\r\nexport declare type DynamicModelExtensionOperationFn<TypeMap extends TypeMapDef, M extends PropertyKey, P extends PropertyKey> = {} extends TypeMap['model'][M]['operations'][P]['args'] ? <A extends TypeMap['model'][M]['operations'][P]['args']>(args?: Exact<A, TypeMap['model'][M]['operations'][P]['args']>) => DynamicModelExtensionFnResult<TypeMap, M, A, P, DynamicModelExtensionFnResultNull<P>> : <A extends TypeMap['model'][M]['operations'][P]['args']>(args: Exact<A, TypeMap['model'][M]['operations'][P]['args']>) => DynamicModelExtensionFnResult<TypeMap, M, A, P, DynamicModelExtensionFnResultNull<P>>;\r\n\r\nexport declare type DynamicModelExtensionThis<TypeMap extends TypeMapDef, M extends PropertyKey, ExtArgs extends Record<string, any>> = {\r\n    [P in keyof ExtArgs['model'][Uncapitalize<M & string>]]: Return<ExtArgs['model'][Uncapitalize<M & string>][P]>;\r\n} & {\r\n    [P in Exclude<keyof TypeMap['model'][M]['operations'], keyof ExtArgs['model'][Uncapitalize<M & string>]>]: DynamicModelExtensionOperationFn<TypeMap, M, P>;\r\n} & {\r\n    [P in Exclude<'fields', keyof ExtArgs['model'][Uncapitalize<M & string>]>]: TypeMap['model'][M]['fields'];\r\n} & {\r\n    [K: symbol]: {\r\n        types: TypeMap['model'][M];\r\n    };\r\n};\r\n\r\n/** Query */\r\nexport declare type DynamicQueryExtensionArgs<Q_, TypeMap extends TypeMapDef> = {\r\n    [K in keyof Q_]: K extends '$allOperations' ? (args: {\r\n        model?: string;\r\n        operation: string;\r\n        args: any;\r\n        query: (args: any) => PrismaPromise<any>;\r\n    }) => Promise<any> : K extends '$allModels' ? {\r\n        [P in keyof Q_[K] | keyof TypeMap['model'][keyof TypeMap['model']]['operations'] | '$allOperations']?: P extends '$allOperations' ? DynamicQueryExtensionCb<TypeMap, 'model', keyof TypeMap['model'], keyof TypeMap['model'][keyof TypeMap['model']]['operations']> : P extends keyof TypeMap['model'][keyof TypeMap['model']]['operations'] ? DynamicQueryExtensionCb<TypeMap, 'model', keyof TypeMap['model'], P> : never;\r\n    } : K extends TypeMap['meta']['modelProps'] ? {\r\n        [P in keyof Q_[K] | keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations'] | '$allOperations']?: P extends '$allOperations' ? DynamicQueryExtensionCb<TypeMap, 'model', ModelKey<TypeMap, K>, keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations']> : P extends keyof TypeMap['model'][ModelKey<TypeMap, K>]['operations'] ? DynamicQueryExtensionCb<TypeMap, 'model', ModelKey<TypeMap, K>, P> : never;\r\n    } : K extends keyof TypeMap['other']['operations'] ? DynamicQueryExtensionCb<[TypeMap], 0, 'other', K> : never;\r\n};\r\n\r\nexport declare type DynamicQueryExtensionCb<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = <A extends DynamicQueryExtensionCbArgs<TypeMap, _0, _1, _2>>(args: A) => Promise<TypeMap[_0][_1][_2]['result']>;\r\n\r\nexport declare type DynamicQueryExtensionCbArgs<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = (_1 extends unknown ? _2 extends unknown ? {\r\n    args: DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>;\r\n    model: _0 extends 0 ? undefined : _1;\r\n    operation: _2;\r\n    query: <A extends DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>>(args: A) => PrismaPromise<TypeMap[_0][_1]['operations'][_2]['result']>;\r\n} : never : never) & {\r\n    query: (args: DynamicQueryExtensionCbArgsArgs<TypeMap, _0, _1, _2>) => PrismaPromise<TypeMap[_0][_1]['operations'][_2]['result']>;\r\n};\r\n\r\nexport declare type DynamicQueryExtensionCbArgsArgs<TypeMap extends TypeMapDef, _0 extends PropertyKey, _1 extends PropertyKey, _2 extends PropertyKey> = _2 extends '$queryRaw' | '$executeRaw' ? Sql : TypeMap[_0][_1]['operations'][_2]['args'];\r\n\r\n/** Result */\r\nexport declare type DynamicResultExtensionArgs<R_, TypeMap extends TypeMapDef> = {\r\n    [K in keyof R_]: {\r\n        [P in keyof R_[K]]?: {\r\n            needs?: DynamicResultExtensionNeeds<TypeMap, ModelKey<TypeMap, K>, R_[K][P]>;\r\n            compute(data: DynamicResultExtensionData<TypeMap, ModelKey<TypeMap, K>, R_[K][P]>): any;\r\n        };\r\n    };\r\n};\r\n\r\nexport declare type DynamicResultExtensionData<TypeMap extends TypeMapDef, M extends PropertyKey, S> = GetFindResult<TypeMap['model'][M]['payload'], {\r\n    select: S;\r\n}, {}>;\r\n\r\nexport declare type DynamicResultExtensionNeeds<TypeMap extends TypeMapDef, M extends PropertyKey, S> = {\r\n    [K in keyof S]: K extends keyof TypeMap['model'][M]['payload']['scalars'] ? S[K] : never;\r\n} & {\r\n    [N in keyof TypeMap['model'][M]['payload']['scalars']]?: boolean;\r\n};\r\n\r\n/**\r\n * Placeholder value for \"no text\".\r\n */\r\nexport declare const empty: Sql;\r\n\r\nexport declare type EmptyToUnknown<T> = T;\r\n\r\ndeclare interface Engine<InteractiveTransactionPayload = unknown> {\r\n    /** The name of the engine. This is meant to be consumed externally */\r\n    readonly name: string;\r\n    onBeforeExit(callback: () => Promise<void>): void;\r\n    start(): Promise<void>;\r\n    stop(): Promise<void>;\r\n    version(forceRun?: boolean): Promise<string> | string;\r\n    request<T>(query: JsonQuery, options: RequestOptions<InteractiveTransactionPayload>): Promise<QueryEngineResultData<T>>;\r\n    requestBatch<T>(queries: JsonQuery[], options: RequestBatchOptions<InteractiveTransactionPayload>): Promise<BatchQueryEngineResult<T>[]>;\r\n    transaction(action: 'start', headers: Transaction_2.TransactionHeaders, options: Transaction_2.Options): Promise<Transaction_2.InteractiveTransactionInfo<unknown>>;\r\n    transaction(action: 'commit', headers: Transaction_2.TransactionHeaders, info: Transaction_2.InteractiveTransactionInfo<unknown>): Promise<void>;\r\n    transaction(action: 'rollback', headers: Transaction_2.TransactionHeaders, info: Transaction_2.InteractiveTransactionInfo<unknown>): Promise<void>;\r\n    metrics(options: MetricsOptionsJson): Promise<Metrics>;\r\n    metrics(options: MetricsOptionsPrometheus): Promise<string>;\r\n    applyPendingMigrations(): Promise<void>;\r\n}\r\n\r\ndeclare interface EngineConfig {\r\n    cwd: string;\r\n    dirname: string;\r\n    enableDebugLogs?: boolean;\r\n    allowTriggerPanic?: boolean;\r\n    prismaPath?: string;\r\n    generator?: GeneratorConfig;\r\n    /**\r\n     * @remarks this field is used internally by Policy, do not rename or remove\r\n     */\r\n    overrideDatasources: Datasources;\r\n    showColors?: boolean;\r\n    logQueries?: boolean;\r\n    logLevel?: 'info' | 'warn';\r\n    env: Record<string, string>;\r\n    flags?: string[];\r\n    clientVersion: string;\r\n    engineVersion: string;\r\n    previewFeatures?: string[];\r\n    engineEndpoint?: string;\r\n    activeProvider?: string;\r\n    logEmitter: LogEmitter;\r\n    transactionOptions: Transaction_2.Options;\r\n    /**\r\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`.\r\n     * If set, this is only used in the library engine, and all queries would be performed through it,\r\n     * rather than Prisma's Rust drivers.\r\n     * @remarks only used by LibraryEngine.ts\r\n     */\r\n    adapter?: SqlDriverAdapterFactory;\r\n    /**\r\n     * The contents of the schema encoded into a string\r\n     */\r\n    inlineSchema: string;\r\n    /**\r\n     * The contents of the datasource url saved in a string\r\n     * @remarks only used by DataProxyEngine.ts\r\n     * @remarks this field is used internally by Policy, do not rename or remove\r\n     */\r\n    inlineDatasources: GetPrismaClientConfig['inlineDatasources'];\r\n    /**\r\n     * The string hash that was produced for a given schema\r\n     * @remarks only used by DataProxyEngine.ts\r\n     */\r\n    inlineSchemaHash: string;\r\n    /**\r\n     * The helper for interaction with OTEL tracing\r\n     * @remarks enabling is determined by the client and @prisma/instrumentation package\r\n     */\r\n    tracingHelper: TracingHelper;\r\n    /**\r\n     * Information about whether we have not found a schema.prisma file in the\r\n     * default location, and that we fell back to finding the schema.prisma file\r\n     * in the current working directory. This usually means it has been bundled.\r\n     */\r\n    isBundled?: boolean;\r\n    /**\r\n     * Web Assembly module loading configuration\r\n     */\r\n    engineWasm?: EngineWasmLoadingConfig;\r\n    compilerWasm?: CompilerWasmLoadingConfig;\r\n    /**\r\n     * Allows Accelerate to use runtime utilities from the client. These are\r\n     * necessary for the AccelerateEngine to function correctly.\r\n     */\r\n    accelerateUtils?: {\r\n        resolveDatasourceUrl: typeof resolveDatasourceUrl;\r\n        getBatchRequestPayload: typeof getBatchRequestPayload;\r\n        prismaGraphQLToJSError: typeof prismaGraphQLToJSError;\r\n        PrismaClientUnknownRequestError: typeof PrismaClientUnknownRequestError;\r\n        PrismaClientInitializationError: typeof PrismaClientInitializationError;\r\n        PrismaClientKnownRequestError: typeof PrismaClientKnownRequestError;\r\n        debug: (...args: any[]) => void;\r\n        engineVersion: string;\r\n        clientVersion: string;\r\n    };\r\n}\r\n\r\ndeclare type EngineEvent<E extends EngineEventType> = E extends QueryEventType ? QueryEvent : LogEvent;\r\n\r\ndeclare type EngineEventType = QueryEventType | LogEventType;\r\n\r\ndeclare type EngineSpan = {\r\n    id: EngineSpanId;\r\n    parentId: string | null;\r\n    name: string;\r\n    startTime: HrTime;\r\n    endTime: HrTime;\r\n    kind: EngineSpanKind;\r\n    attributes?: Record<string, unknown>;\r\n    links?: EngineSpanId[];\r\n};\r\n\r\ndeclare type EngineSpanId = string;\r\n\r\ndeclare type EngineSpanKind = 'client' | 'internal';\r\n\r\ndeclare type EngineWasmLoadingConfig = {\r\n    /**\r\n     * WASM-bindgen runtime for corresponding module\r\n     */\r\n    getRuntime: () => Promise<{\r\n        __wbg_set_wasm(exports: unknown): void;\r\n        QueryEngine: QueryEngineConstructor;\r\n    }>;\r\n    /**\r\n     * Loads the raw wasm module for the wasm query engine. This configuration is\r\n     * generated specifically for each type of client, eg. Node.js client and Edge\r\n     * clients will have different implementations.\r\n     * @remarks this is a callback on purpose, we only load the wasm if needed.\r\n     * @remarks only used by LibraryEngine\r\n     */\r\n    getQueryEngineWasmModule: () => Promise<unknown>;\r\n};\r\n\r\ndeclare type EnumValue = ReadonlyDeep_2<{\r\n    name: string;\r\n    dbName: string | null;\r\n}>;\r\n\r\ndeclare type EnvPaths = {\r\n    rootEnvPath: string | null;\r\n    schemaEnvPath: string | undefined;\r\n};\r\n\r\ndeclare interface EnvValue {\r\n    fromEnvVar: null | string;\r\n    value: null | string;\r\n}\r\n\r\nexport declare type Equals<A, B> = (<T>() => T extends A ? 1 : 2) extends (<T>() => T extends B ? 1 : 2) ? 1 : 0;\r\n\r\ndeclare type Error_2 = {\r\n    kind: 'GenericJs';\r\n    id: number;\r\n} | {\r\n    kind: 'UnsupportedNativeDataType';\r\n    type: string;\r\n} | {\r\n    kind: 'InvalidIsolationLevel';\r\n    level: string;\r\n} | {\r\n    kind: 'LengthMismatch';\r\n    column?: string;\r\n} | {\r\n    kind: 'UniqueConstraintViolation';\r\n    fields: string[];\r\n} | {\r\n    kind: 'NullConstraintViolation';\r\n    fields: string[];\r\n} | {\r\n    kind: 'ForeignKeyConstraintViolation';\r\n    constraint?: {\r\n        fields: string[];\r\n    } | {\r\n        index: string;\r\n    } | {\r\n        foreignKey: {};\r\n    };\r\n} | {\r\n    kind: 'DatabaseDoesNotExist';\r\n    db?: string;\r\n} | {\r\n    kind: 'DatabaseAlreadyExists';\r\n    db?: string;\r\n} | {\r\n    kind: 'DatabaseAccessDenied';\r\n    db?: string;\r\n} | {\r\n    kind: 'AuthenticationFailed';\r\n    user?: string;\r\n} | {\r\n    kind: 'TransactionWriteConflict';\r\n} | {\r\n    kind: 'TableDoesNotExist';\r\n    table?: string;\r\n} | {\r\n    kind: 'ColumnNotFound';\r\n    column?: string;\r\n} | {\r\n    kind: 'TooManyConnections';\r\n    cause: string;\r\n} | {\r\n    kind: 'SocketTimeout';\r\n} | {\r\n    kind: 'postgres';\r\n    code: string;\r\n    severity: string;\r\n    message: string;\r\n    detail: string | undefined;\r\n    column: string | undefined;\r\n    hint: string | undefined;\r\n} | {\r\n    kind: 'mysql';\r\n    code: number;\r\n    message: string;\r\n    state: string;\r\n} | {\r\n    kind: 'sqlite';\r\n    /**\r\n     * Sqlite extended error code: https://www.sqlite.org/rescode.html\r\n     */\r\n    extendedCode: number;\r\n    message: string;\r\n};\r\n\r\ndeclare type ErrorCapturingFunction<T> = T extends (...args: infer A) => Promise<infer R> ? (...args: A) => Promise<Result_4<ErrorCapturingInterface<R>>> : T extends (...args: infer A) => infer R ? (...args: A) => Result_4<ErrorCapturingInterface<R>> : T;\r\n\r\ndeclare type ErrorCapturingInterface<T> = {\r\n    [K in keyof T]: ErrorCapturingFunction<T[K]>;\r\n};\r\n\r\ndeclare interface ErrorCapturingSqlDriverAdapter extends ErrorCapturingInterface<SqlDriverAdapter> {\r\n    readonly errorRegistry: ErrorRegistry;\r\n}\r\n\r\ndeclare type ErrorFormat = 'pretty' | 'colorless' | 'minimal';\r\n\r\ndeclare type ErrorRecord = {\r\n    error: unknown;\r\n};\r\n\r\ndeclare interface ErrorRegistry {\r\n    consumeError(id: number): ErrorRecord | undefined;\r\n}\r\n\r\ndeclare interface ErrorWithBatchIndex {\r\n    batchRequestIdx?: number;\r\n}\r\n\r\ndeclare type EventCallback<E extends ExtendedEventType> = [E] extends ['beforeExit'] ? () => Promise<void> : [E] extends [LogLevel] ? (event: EngineEvent<E>) => void : never;\r\n\r\nexport declare type Exact<A, W> = (A extends unknown ? (W extends A ? {\r\n    [K in keyof A]: Exact<A[K], W[K]>;\r\n} : W) : never) | (A extends Narrowable ? A : never);\r\n\r\n/**\r\n * Defines Exception.\r\n *\r\n * string or an object with one of (message or name or code) and optional stack\r\n */\r\ndeclare type Exception = ExceptionWithCode | ExceptionWithMessage | ExceptionWithName | string;\r\n\r\ndeclare interface ExceptionWithCode {\r\n    code: string | number;\r\n    name?: string;\r\n    message?: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare interface ExceptionWithMessage {\r\n    code?: string | number;\r\n    message: string;\r\n    name?: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare interface ExceptionWithName {\r\n    code?: string | number;\r\n    message?: string;\r\n    name: string;\r\n    stack?: string;\r\n}\r\n\r\ndeclare type ExtendedEventType = LogLevel | 'beforeExit';\r\n\r\ndeclare type ExtendedSpanOptions = SpanOptions & {\r\n    /** The name of the span */\r\n    name: string;\r\n    internal?: boolean;\r\n    middleware?: boolean;\r\n    /** Whether it propagates context (?=true) */\r\n    active?: boolean;\r\n    /** The context to append the span to */\r\n    context?: Context;\r\n};\r\n\r\n/** $extends, defineExtension */\r\nexport declare interface ExtendsHook<Variant extends 'extends' | 'define', TypeMapCb extends TypeMapCbDef, ExtArgs extends Record<string, any>, TypeMap extends TypeMapDef = Call<TypeMapCb, {\r\n    extArgs: ExtArgs;\r\n}>> {\r\n    extArgs: ExtArgs;\r\n    <R_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels']?: unknown;\r\n    }, R, M_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels']?: unknown;\r\n    }, M, Q_ extends {\r\n        [K in TypeMap['meta']['modelProps'] | '$allModels' | keyof TypeMap['other']['operations'] | '$allOperations']?: unknown;\r\n    }, C_ extends {\r\n        [K in string]?: unknown;\r\n    }, C, Args extends InternalArgs = InternalArgs<R, M, {}, C>, MergedArgs extends InternalArgs = MergeExtArgs<TypeMap, ExtArgs, Args>>(extension: ((client: DynamicClientExtensionThis<TypeMap, TypeMapCb, ExtArgs>) => {\r\n        $extends: {\r\n            extArgs: Args;\r\n        };\r\n    }) | {\r\n        name?: string;\r\n        query?: DynamicQueryExtensionArgs<Q_, TypeMap>;\r\n        result?: DynamicResultExtensionArgs<R_, TypeMap> & R;\r\n        model?: DynamicModelExtensionArgs<M_, TypeMap, TypeMapCb, ExtArgs> & M;\r\n        client?: DynamicClientExtensionArgs<C_, TypeMap, TypeMapCb, ExtArgs> & C;\r\n    }): {\r\n        extends: DynamicClientExtensionThis<Call<TypeMapCb, {\r\n            extArgs: MergedArgs;\r\n        }>, TypeMapCb, MergedArgs>;\r\n        define: (client: any) => {\r\n            $extends: {\r\n                extArgs: Args;\r\n            };\r\n        };\r\n    }[Variant];\r\n}\r\n\r\nexport declare type ExtensionArgs = Optional<RequiredExtensionArgs>;\r\n\r\ndeclare namespace Extensions {\r\n    export {\r\n        defineExtension,\r\n        getExtensionContext\r\n    }\r\n}\r\nexport { Extensions }\r\n\r\ndeclare namespace Extensions_2 {\r\n    export {\r\n        InternalArgs,\r\n        DefaultArgs,\r\n        GetPayloadResultExtensionKeys,\r\n        GetPayloadResultExtensionObject,\r\n        GetPayloadResult,\r\n        GetSelect,\r\n        GetOmit,\r\n        DynamicQueryExtensionArgs,\r\n        DynamicQueryExtensionCb,\r\n        DynamicQueryExtensionCbArgs,\r\n        DynamicQueryExtensionCbArgsArgs,\r\n        DynamicResultExtensionArgs,\r\n        DynamicResultExtensionNeeds,\r\n        DynamicResultExtensionData,\r\n        DynamicModelExtensionArgs,\r\n        DynamicModelExtensionThis,\r\n        DynamicModelExtensionOperationFn,\r\n        DynamicModelExtensionFnResult,\r\n        DynamicModelExtensionFnResultBase,\r\n        DynamicModelExtensionFluentApi,\r\n        DynamicModelExtensionFnResultNull,\r\n        DynamicClientExtensionArgs,\r\n        DynamicClientExtensionThis,\r\n        ClientBuiltInProp,\r\n        DynamicClientExtensionThisBuiltin,\r\n        ExtendsHook,\r\n        MergeExtArgs,\r\n        AllModelsToStringIndex,\r\n        TypeMapDef,\r\n        DevTypeMapDef,\r\n        DevTypeMapFnDef,\r\n        ClientOptionDef,\r\n        ClientOtherOps,\r\n        TypeMapCbDef,\r\n        ModelKey,\r\n        RequiredExtensionArgs as UserArgs\r\n    }\r\n}\r\n\r\nexport declare type ExtractGlobalOmit<Options, ModelName extends string> = Options extends {\r\n    omit: {\r\n        [K in ModelName]: infer GlobalOmit;\r\n    };\r\n} ? GlobalOmit : {};\r\n\r\ndeclare type Field = ReadonlyDeep_2<{\r\n    kind: FieldKind;\r\n    name: string;\r\n    isRequired: boolean;\r\n    isList: boolean;\r\n    isUnique: boolean;\r\n    isId: boolean;\r\n    isReadOnly: boolean;\r\n    isGenerated?: boolean;\r\n    isUpdatedAt?: boolean;\r\n    /**\r\n     * Describes the data type in the same the way it is defined in the Prisma schema:\r\n     * BigInt, Boolean, Bytes, DateTime, Decimal, Float, Int, JSON, String, $ModelName\r\n     */\r\n    type: string;\r\n    /**\r\n     * Native database type, if specified.\r\n     * For example, `@db.VarChar(191)` is encoded as `['VarChar', ['191']]`,\r\n     * `@db.Text` is encoded as `['Text', []]`.\r\n     */\r\n    nativeType?: [string, string[]] | null;\r\n    dbName?: string | null;\r\n    hasDefaultValue: boolean;\r\n    default?: FieldDefault | FieldDefaultScalar | FieldDefaultScalar[];\r\n    relationFromFields?: string[];\r\n    relationToFields?: string[];\r\n    relationOnDelete?: string;\r\n    relationOnUpdate?: string;\r\n    relationName?: string;\r\n    documentation?: string;\r\n}>;\r\n\r\ndeclare type FieldDefault = ReadonlyDeep_2<{\r\n    name: string;\r\n    args: Array<string | number>;\r\n}>;\r\n\r\ndeclare type FieldDefaultScalar = string | boolean | number;\r\n\r\ndeclare type FieldKind = 'scalar' | 'object' | 'enum' | 'unsupported';\r\n\r\ndeclare type FieldLocation = 'scalar' | 'inputObjectTypes' | 'outputObjectTypes' | 'enumTypes' | 'fieldRefTypes';\r\n\r\ndeclare type FieldNamespace = 'model' | 'prisma';\r\n\r\n/**\r\n * A reference to a specific field of a specific model\r\n */\r\nexport declare interface FieldRef<Model, FieldType> {\r\n    readonly modelName: Model;\r\n    readonly name: string;\r\n    readonly typeName: FieldType;\r\n    readonly isList: boolean;\r\n}\r\n\r\ndeclare type FieldRefAllowType = TypeRef<'scalar' | 'enumTypes'>;\r\n\r\ndeclare type FieldRefType = ReadonlyDeep_2<{\r\n    name: string;\r\n    allowTypes: FieldRefAllowType[];\r\n    fields: SchemaArg[];\r\n}>;\r\n\r\ndeclare type FluentOperation = 'findUnique' | 'findUniqueOrThrow' | 'findFirst' | 'findFirstOrThrow' | 'create' | 'update' | 'upsert' | 'delete';\r\n\r\nexport declare interface Fn<Params = unknown, Returns = unknown> {\r\n    params: Params;\r\n    returns: Returns;\r\n}\r\n\r\ndeclare interface GeneratorConfig {\r\n    name: string;\r\n    output: EnvValue | null;\r\n    isCustomOutput?: boolean;\r\n    provider: EnvValue;\r\n    config: {\r\n        /** `output` is a reserved name and will only be available directly at `generator.output` */\r\n        output?: never;\r\n        /** `provider` is a reserved name and will only be available directly at `generator.provider` */\r\n        provider?: never;\r\n        /** `binaryTargets` is a reserved name and will only be available directly at `generator.binaryTargets` */\r\n        binaryTargets?: never;\r\n        /** `previewFeatures` is a reserved name and will only be available directly at `generator.previewFeatures` */\r\n        previewFeatures?: never;\r\n    } & {\r\n        [key: string]: string | string[] | undefined;\r\n    };\r\n    binaryTargets: BinaryTargetsEnvValue[];\r\n    previewFeatures: string[];\r\n    envPaths?: EnvPaths;\r\n    sourceFilePath: string;\r\n}\r\n\r\nexport declare type GetAggregateResult<P extends OperationPayload, A> = {\r\n    [K in keyof A as K extends Aggregate ? K : never]: K extends '_count' ? A[K] extends true ? number : Count<A[K]> : {\r\n        [J in keyof A[K] & string]: P['scalars'][J] | null;\r\n    };\r\n};\r\n\r\ndeclare function getBatchRequestPayload(batch: JsonQuery[], transaction?: TransactionOptions_3<unknown>): QueryEngineBatchRequest;\r\n\r\nexport declare type GetBatchResult = {\r\n    count: number;\r\n};\r\n\r\nexport declare type GetCountResult<A> = A extends {\r\n    select: infer S;\r\n} ? (S extends true ? number : Count<S>) : number;\r\n\r\ndeclare function getExtensionContext<T>(that: T): Context_2<T>;\r\n\r\nexport declare type GetFindResult<P extends OperationPayload, A, GlobalOmitOptions> = Equals<A, any> extends 1 ? DefaultSelection<P, A, GlobalOmitOptions> : A extends {\r\n    select: infer S extends object;\r\n} & Record<string, unknown> | {\r\n    include: infer I extends object;\r\n} & Record<string, unknown> ? {\r\n    [K in keyof S | keyof I as (S & I)[K] extends false | undefined | Skip | null ? never : K]: (S & I)[K] extends object ? P extends SelectablePayloadFields<K, (infer O)[]> ? O extends OperationPayload ? GetFindResult<O, (S & I)[K], GlobalOmitOptions>[] : never : P extends SelectablePayloadFields<K, infer O | null> ? O extends OperationPayload ? GetFindResult<O, (S & I)[K], GlobalOmitOptions> | SelectField<P, K> & null : never : K extends '_count' ? Count<GetFindResult<P, (S & I)[K], GlobalOmitOptions>> : never : P extends SelectablePayloadFields<K, (infer O)[]> ? O extends OperationPayload ? DefaultSelection<O, {}, GlobalOmitOptions>[] : never : P extends SelectablePayloadFields<K, infer O | null> ? O extends OperationPayload ? DefaultSelection<O, {}, GlobalOmitOptions> | SelectField<P, K> & null : never : P extends {\r\n        scalars: {\r\n            [k in K]: infer O;\r\n        };\r\n    } ? O : K extends '_count' ? Count<P['objects']> : never;\r\n} & (A extends {\r\n    include: any;\r\n} & Record<string, unknown> ? DefaultSelection<P, A & {\r\n    omit: A['omit'];\r\n}, GlobalOmitOptions> : unknown) : DefaultSelection<P, A, GlobalOmitOptions>;\r\n\r\nexport declare type GetGroupByResult<P extends OperationPayload, A> = A extends {\r\n    by: string[];\r\n} ? Array<GetAggregateResult<P, A> & {\r\n    [K in A['by'][number]]: P['scalars'][K];\r\n}> : A extends {\r\n    by: string;\r\n} ? Array<GetAggregateResult<P, A> & {\r\n    [K in A['by']]: P['scalars'][K];\r\n}> : {}[];\r\n\r\nexport declare type GetOmit<BaseKeys extends string, R extends InternalArgs['result'][string], ExtraType = never> = {\r\n    [K in (string extends keyof R ? never : keyof R) | BaseKeys]?: boolean | ExtraType;\r\n};\r\n\r\nexport declare type GetPayloadResult<Base extends Record<any, any>, R extends InternalArgs['result'][string]> = Omit<Base, GetPayloadResultExtensionKeys<R>> & GetPayloadResultExtensionObject<R>;\r\n\r\nexport declare type GetPayloadResultExtensionKeys<R extends InternalArgs['result'][string], KR extends keyof R = string extends keyof R ? never : keyof R> = KR;\r\n\r\nexport declare type GetPayloadResultExtensionObject<R extends InternalArgs['result'][string]> = {\r\n    [K in GetPayloadResultExtensionKeys<R>]: R[K] extends () => {\r\n        compute: (...args: any) => infer C;\r\n    } ? C : never;\r\n};\r\n\r\nexport declare function getPrismaClient(config: GetPrismaClientConfig): {\r\n    new (optionsArg?: PrismaClientOptions): {\r\n        _originalClient: any;\r\n        _runtimeDataModel: RuntimeDataModel;\r\n        _requestHandler: RequestHandler;\r\n        _connectionPromise?: Promise<any> | undefined;\r\n        _disconnectionPromise?: Promise<any> | undefined;\r\n        _engineConfig: EngineConfig;\r\n        _accelerateEngineConfig: AccelerateEngineConfig;\r\n        _clientVersion: string;\r\n        _errorFormat: ErrorFormat;\r\n        _tracingHelper: TracingHelper;\r\n        _middlewares: MiddlewareHandler<QueryMiddleware>;\r\n        _previewFeatures: string[];\r\n        _activeProvider: string;\r\n        _globalOmit?: GlobalOmitOptions | undefined;\r\n        _extensions: MergedExtensionsList;\r\n        /**\r\n         * @remarks This is used internally by Policy, do not rename or remove\r\n         */\r\n        _engine: Engine;\r\n        /**\r\n         * A fully constructed/applied Client that references the parent\r\n         * PrismaClient. This is used for Client extensions only.\r\n         */\r\n        _appliedParent: any;\r\n        _createPrismaPromise: PrismaPromiseFactory;\r\n        /**\r\n         * Hook a middleware into the client\r\n         * @param middleware to hook\r\n         */\r\n        $use(middleware: QueryMiddleware): void;\r\n        $on<E extends ExtendedEventType>(eventType: E, callback: EventCallback<E>): any;\r\n        $connect(): Promise<void>;\r\n        /**\r\n         * Disconnect from the database\r\n         */\r\n        $disconnect(): Promise<void>;\r\n        /**\r\n         * Executes a raw query and always returns a number\r\n         */\r\n        $executeRawInternal(transaction: PrismaPromiseTransaction | undefined, clientMethod: string, args: RawQueryArgs, middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>): Promise<number>;\r\n        /**\r\n         * Executes a raw query provided through a safe tag function\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $executeRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Unsafe counterpart of `$executeRaw` that is susceptible to SQL injections\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $executeRawUnsafe(query: string, ...values: RawValue[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Executes a raw command only for MongoDB\r\n         *\r\n         * @param command\r\n         * @returns\r\n         */\r\n        $runCommandRaw(command: Record<string, JsInputValue>): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Executes a raw query and returns selected data\r\n         */\r\n        $queryRawInternal(transaction: PrismaPromiseTransaction | undefined, clientMethod: string, args: RawQueryArgs, middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>): Promise<any>;\r\n        /**\r\n         * Executes a raw query provided through a safe tag function\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $queryRaw(query: TemplateStringsArray | Sql, ...values: any[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Counterpart to $queryRaw, that returns strongly typed results\r\n         * @param typedSql\r\n         */\r\n        $queryRawTyped(typedSql: UnknownTypedSql): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Unsafe counterpart of `$queryRaw` that is susceptible to SQL injections\r\n         * @see https://github.com/prisma/prisma/issues/7142\r\n         *\r\n         * @param query\r\n         * @param values\r\n         * @returns\r\n         */\r\n        $queryRawUnsafe(query: string, ...values: RawValue[]): PrismaPromise_2<unknown, any>;\r\n        /**\r\n         * Execute a batch of requests in a transaction\r\n         * @param requests\r\n         * @param options\r\n         */\r\n        _transactionWithArray({ promises, options, }: {\r\n            promises: Array<PrismaPromise_2<any>>;\r\n            options?: BatchTransactionOptions;\r\n        }): Promise<any>;\r\n        /**\r\n         * Perform a long-running transaction\r\n         * @param callback\r\n         * @param options\r\n         * @returns\r\n         */\r\n        _transactionWithCallback({ callback, options, }: {\r\n            callback: (client: Client) => Promise<unknown>;\r\n            options?: TransactionOptions_2;\r\n        }): Promise<unknown>;\r\n        _createItxClient(transaction: PrismaPromiseInteractiveTransaction): Client;\r\n        /**\r\n         * Execute queries within a transaction\r\n         * @param input a callback or a query list\r\n         * @param options to set timeouts (callback)\r\n         * @returns\r\n         */\r\n        $transaction(input: any, options?: any): Promise<any>;\r\n        /**\r\n         * Runs the middlewares over params before executing a request\r\n         * @param internalParams\r\n         * @returns\r\n         */\r\n        _request(internalParams: InternalRequestParams): Promise<any>;\r\n        _executeRequest({ args, clientMethod, dataPath, callsite, action, model, argsMapper, transaction, unpacker, otelParentCtx, customDataProxyFetch, }: InternalRequestParams): Promise<any>;\r\n        $metrics: MetricsClient;\r\n        /**\r\n         * Shortcut for checking a preview flag\r\n         * @param feature preview flag\r\n         * @returns\r\n         */\r\n        _hasPreviewFlag(feature: string): boolean;\r\n        $applyPendingMigrations(): Promise<void>;\r\n        $extends: typeof $extends;\r\n        readonly [Symbol.toStringTag]: string;\r\n    };\r\n};\r\n\r\n/**\r\n * Config that is stored into the generated client. When the generated client is\r\n * loaded, this same config is passed to {@link getPrismaClient} which creates a\r\n * closure with that config around a non-instantiated [[PrismaClient]].\r\n */\r\nexport declare type GetPrismaClientConfig = {\r\n    runtimeDataModel: RuntimeDataModel;\r\n    generator?: GeneratorConfig;\r\n    relativeEnvPaths?: {\r\n        rootEnvPath?: string | null;\r\n        schemaEnvPath?: string | null;\r\n    };\r\n    relativePath: string;\r\n    dirname: string;\r\n    clientVersion: string;\r\n    engineVersion: string;\r\n    datasourceNames: string[];\r\n    activeProvider: ActiveConnectorType;\r\n    /**\r\n     * The contents of the schema encoded into a string\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineSchema: string;\r\n    /**\r\n     * A special env object just for the data proxy edge runtime.\r\n     * Allows bundlers to inject their own env variables (Vercel).\r\n     * Allows platforms to declare global variables as env (Workers).\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    injectableEdgeEnv?: () => LoadedEnv;\r\n    /**\r\n     * The contents of the datasource url saved in a string.\r\n     * This can either be an env var name or connection string.\r\n     * It is needed by the client to connect to the Data Proxy.\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineDatasources: {\r\n        [name in string]: {\r\n            url: EnvValue;\r\n        };\r\n    };\r\n    /**\r\n     * The string hash that was produced for a given schema\r\n     * @remarks only used for the purpose of data proxy\r\n     */\r\n    inlineSchemaHash: string;\r\n    /**\r\n     * A marker to indicate that the client was not generated via `prisma\r\n     * generate` but was generated via `generate --postinstall` script instead.\r\n     * @remarks used to error for Vercel/Netlify for schema caching issues\r\n     */\r\n    postinstall?: boolean;\r\n    /**\r\n     * Information about the CI where the Prisma Client has been generated. The\r\n     * name of the CI environment is stored at generation time because CI\r\n     * information is not always available at runtime. Moreover, the edge client\r\n     * has no notion of environment variables, so this works around that.\r\n     * @remarks used to error for Vercel/Netlify for schema caching issues\r\n     */\r\n    ciName?: string;\r\n    /**\r\n     * Information about whether we have not found a schema.prisma file in the\r\n     * default location, and that we fell back to finding the schema.prisma file\r\n     * in the current working directory. This usually means it has been bundled.\r\n     */\r\n    isBundled?: boolean;\r\n    /**\r\n     * A boolean that is `false` when the client was generated with --no-engine. At\r\n     * runtime, this means the client will be bound to be using the Data Proxy.\r\n     */\r\n    copyEngine?: boolean;\r\n    /**\r\n     * Optional wasm loading configuration\r\n     */\r\n    engineWasm?: EngineWasmLoadingConfig;\r\n    compilerWasm?: CompilerWasmLoadingConfig;\r\n};\r\n\r\nexport declare type GetResult<Payload extends OperationPayload, Args, OperationName extends Operation = 'findUniqueOrThrow', GlobalOmitOptions = {}> = {\r\n    findUnique: GetFindResult<Payload, Args, GlobalOmitOptions> | null;\r\n    findUniqueOrThrow: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    findFirst: GetFindResult<Payload, Args, GlobalOmitOptions> | null;\r\n    findFirstOrThrow: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    findMany: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    create: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    createMany: GetBatchResult;\r\n    createManyAndReturn: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    update: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    updateMany: GetBatchResult;\r\n    updateManyAndReturn: GetFindResult<Payload, Args, GlobalOmitOptions>[];\r\n    upsert: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    delete: GetFindResult<Payload, Args, GlobalOmitOptions>;\r\n    deleteMany: GetBatchResult;\r\n    aggregate: GetAggregateResult<Payload, Args>;\r\n    count: GetCountResult<Args>;\r\n    groupBy: GetGroupByResult<Payload, Args>;\r\n    $queryRaw: unknown;\r\n    $queryRawTyped: unknown;\r\n    $executeRaw: number;\r\n    $queryRawUnsafe: unknown;\r\n    $executeRawUnsafe: number;\r\n    $runCommandRaw: JsonObject;\r\n    findRaw: JsonObject;\r\n    aggregateRaw: JsonObject;\r\n}[OperationName];\r\n\r\nexport declare function getRuntime(): GetRuntimeOutput;\r\n\r\ndeclare type GetRuntimeOutput = {\r\n    id: RuntimeName;\r\n    prettyName: string;\r\n    isEdge: boolean;\r\n};\r\n\r\nexport declare type GetSelect<Base extends Record<any, any>, R extends InternalArgs['result'][string], KR extends keyof R = string extends keyof R ? never : keyof R> = {\r\n    [K in KR | keyof Base]?: K extends KR ? boolean : Base[K];\r\n};\r\n\r\ndeclare type GlobalOmitOptions = {\r\n    [modelName: string]: {\r\n        [fieldName: string]: boolean;\r\n    };\r\n};\r\n\r\ndeclare type HandleErrorParams = {\r\n    args: JsArgs;\r\n    error: any;\r\n    clientMethod: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    modelName?: string;\r\n    globalOmit?: GlobalOmitOptions;\r\n};\r\n\r\ndeclare type HrTime = [number, number];\r\n\r\n/**\r\n * Defines High-Resolution Time.\r\n *\r\n * The first number, HrTime[0], is UNIX Epoch time in seconds since 00:00:00 UTC on 1 January 1970.\r\n * The second number, HrTime[1], represents the partial second elapsed since Unix Epoch time represented by first number in nanoseconds.\r\n * For example, 2021-01-01T12:30:10.150Z in UNIX Epoch time in milliseconds is represented as 1609504210150.\r\n * The first number is calculated by converting and truncating the Epoch time in milliseconds to seconds:\r\n * HrTime[0] = Math.trunc(1609504210150 / 1000) = 1609504210.\r\n * The second number is calculated by converting the digits after the decimal point of the subtraction, (1609504210150 / 1000) - HrTime[0], to nanoseconds:\r\n * HrTime[1] = Number((1609504210.150 - HrTime[0]).toFixed(9)) * 1e9 = 150000000.\r\n * This is represented in HrTime format as [1609504210, 150000000].\r\n */\r\ndeclare type HrTime_2 = [number, number];\r\n\r\ndeclare type Index = ReadonlyDeep_2<{\r\n    model: string;\r\n    type: IndexType;\r\n    isDefinedOnField: boolean;\r\n    name?: string;\r\n    dbName?: string;\r\n    algorithm?: string;\r\n    clustered?: boolean;\r\n    fields: IndexField[];\r\n}>;\r\n\r\ndeclare type IndexField = ReadonlyDeep_2<{\r\n    name: string;\r\n    sortOrder?: SortOrder;\r\n    length?: number;\r\n    operatorClass?: string;\r\n}>;\r\n\r\ndeclare type IndexType = 'id' | 'normal' | 'unique' | 'fulltext';\r\n\r\n/**\r\n * Matches a JSON array.\r\n * Unlike \\`JsonArray\\`, readonly arrays are assignable to this type.\r\n */\r\nexport declare interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {\r\n}\r\n\r\n/**\r\n * Matches a JSON object.\r\n * Unlike \\`JsonObject\\`, this type allows undefined and read-only properties.\r\n */\r\nexport declare type InputJsonObject = {\r\n    readonly [Key in string]?: InputJsonValue | null;\r\n};\r\n\r\n/**\r\n * Matches any valid value that can be used as an input for operations like\r\n * create and update as the value of a JSON field. Unlike \\`JsonValue\\`, this\r\n * type allows read-only arrays and read-only object properties and disallows\r\n * \\`null\\` at the top level.\r\n *\r\n * \\`null\\` cannot be used as the value of a JSON field because its meaning\r\n * would be ambiguous. Use \\`Prisma.JsonNull\\` to store the JSON null value or\r\n * \\`Prisma.DbNull\\` to clear the JSON value and set the field to the database\r\n * NULL value instead.\r\n *\r\n * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values\r\n */\r\nexport declare type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | {\r\n    toJSON(): unknown;\r\n};\r\n\r\ndeclare type InputType = ReadonlyDeep_2<{\r\n    name: string;\r\n    constraints: {\r\n        maxNumFields: number | null;\r\n        minNumFields: number | null;\r\n        fields?: string[];\r\n    };\r\n    meta?: {\r\n        source?: string;\r\n        grouping?: string;\r\n    };\r\n    fields: SchemaArg[];\r\n}>;\r\n\r\ndeclare type InputTypeRef = TypeRef<'scalar' | 'inputObjectTypes' | 'enumTypes' | 'fieldRefTypes'>;\r\n\r\ndeclare type InteractiveTransactionInfo<Payload = unknown> = {\r\n    /**\r\n     * Transaction ID returned by the query engine.\r\n     */\r\n    id: string;\r\n    /**\r\n     * Arbitrary payload the meaning of which depends on the `Engine` implementation.\r\n     * For example, `DataProxyEngine` needs to associate different API endpoints with transactions.\r\n     * In `LibraryEngine` and `BinaryEngine` it is currently not used.\r\n     */\r\n    payload: Payload;\r\n};\r\n\r\ndeclare type InteractiveTransactionOptions<Payload> = Transaction_2.InteractiveTransactionInfo<Payload>;\r\n\r\nexport declare type InternalArgs<R = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, M = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, Q = {\r\n    [K in string]: {\r\n        [K in string]: unknown;\r\n    };\r\n}, C = {\r\n    [K in string]: unknown;\r\n}> = {\r\n    result: {\r\n        [K in keyof R]: {\r\n            [P in keyof R[K]]: () => R[K][P];\r\n        };\r\n    };\r\n    model: {\r\n        [K in keyof M]: {\r\n            [P in keyof M[K]]: () => M[K][P];\r\n        };\r\n    };\r\n    query: {\r\n        [K in keyof Q]: {\r\n            [P in keyof Q[K]]: () => Q[K][P];\r\n        };\r\n    };\r\n    client: {\r\n        [K in keyof C]: () => C[K];\r\n    };\r\n};\r\n\r\ndeclare type InternalRequestParams = {\r\n    /**\r\n     * The original client method being called.\r\n     * Even though the rootField / operation can be changed,\r\n     * this method stays as it is, as it's what the user's\r\n     * code looks like\r\n     */\r\n    clientMethod: string;\r\n    /**\r\n     * Name of js model that triggered the request. Might be used\r\n     * for warnings or error messages\r\n     */\r\n    jsModelName?: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    unpacker?: Unpacker;\r\n    otelParentCtx?: Context;\r\n    /** Used to \"desugar\" a user input into an \"expanded\" one */\r\n    argsMapper?: (args?: UserArgs_2) => UserArgs_2;\r\n    /** Used to convert args for middleware and back */\r\n    middlewareArgsMapper?: MiddlewareArgsMapper<unknown, unknown>;\r\n    /** Used for Accelerate client extension via Data Proxy */\r\n    customDataProxyFetch?: CustomDataProxyFetch;\r\n} & Omit<QueryMiddlewareParams, 'runInTransaction'>;\r\n\r\ndeclare type IsolationLevel = 'READ UNCOMMITTED' | 'READ COMMITTED' | 'REPEATABLE READ' | 'SNAPSHOT' | 'SERIALIZABLE';\r\n\r\ndeclare function isSkip(value: unknown): value is Skip;\r\n\r\nexport declare function isTypedSql(value: unknown): value is UnknownTypedSql;\r\n\r\nexport declare type ITXClientDenyList = (typeof denylist)[number];\r\n\r\nexport declare const itxClientDenyList: readonly (string | symbol)[];\r\n\r\ndeclare interface Job {\r\n    resolve: (data: any) => void;\r\n    reject: (data: any) => void;\r\n    request: any;\r\n}\r\n\r\n/**\r\n * Create a SQL query for a list of values.\r\n */\r\nexport declare function join(values: readonly RawValue[], separator?: string, prefix?: string, suffix?: string): Sql;\r\n\r\nexport declare type JsArgs = {\r\n    select?: Selection_2;\r\n    include?: Selection_2;\r\n    omit?: Omission;\r\n    [argName: string]: JsInputValue;\r\n};\r\n\r\nexport declare type JsInputValue = null | undefined | string | number | boolean | bigint | Uint8Array | Date | DecimalJsLike | ObjectEnumValue | RawParameters | JsonConvertible | FieldRef<string, unknown> | JsInputValue[] | Skip | {\r\n    [key: string]: JsInputValue;\r\n};\r\n\r\ndeclare type JsonArgumentValue = number | string | boolean | null | RawTaggedValue | JsonArgumentValue[] | {\r\n    [key: string]: JsonArgumentValue;\r\n};\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches a JSON array.\r\n */\r\nexport declare interface JsonArray extends Array<JsonValue> {\r\n}\r\n\r\nexport declare type JsonBatchQuery = {\r\n    batch: JsonQuery[];\r\n    transaction?: {\r\n        isolationLevel?: IsolationLevel;\r\n    };\r\n};\r\n\r\nexport declare interface JsonConvertible {\r\n    toJSON(): unknown;\r\n}\r\n\r\ndeclare type JsonFieldSelection = {\r\n    arguments?: Record<string, JsonArgumentValue> | RawTaggedValue;\r\n    selection: JsonSelectionSet;\r\n};\r\n\r\ndeclare class JsonNull extends NullTypesEnumValue {\r\n    #private;\r\n}\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches a JSON object.\r\n * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from.\r\n */\r\nexport declare type JsonObject = {\r\n    [Key in string]?: JsonValue;\r\n};\r\n\r\nexport declare type JsonQuery = {\r\n    modelName?: string;\r\n    action: JsonQueryAction;\r\n    query: JsonFieldSelection;\r\n};\r\n\r\ndeclare type JsonQueryAction = 'findUnique' | 'findUniqueOrThrow' | 'findFirst' | 'findFirstOrThrow' | 'findMany' | 'createOne' | 'createMany' | 'createManyAndReturn' | 'updateOne' | 'updateMany' | 'updateManyAndReturn' | 'deleteOne' | 'deleteMany' | 'upsertOne' | 'aggregate' | 'groupBy' | 'executeRaw' | 'queryRaw' | 'runCommandRaw' | 'findRaw' | 'aggregateRaw';\r\n\r\ndeclare type JsonSelectionSet = {\r\n    $scalars?: boolean;\r\n    $composites?: boolean;\r\n} & {\r\n    [fieldName: string]: boolean | JsonFieldSelection;\r\n};\r\n\r\n/**\r\n * From https://github.com/sindresorhus/type-fest/\r\n * Matches any valid JSON value.\r\n */\r\nexport declare type JsonValue = string | number | boolean | JsonObject | JsonArray | null;\r\n\r\nexport declare type JsOutputValue = null | string | number | boolean | bigint | Uint8Array | Date | Decimal | JsOutputValue[] | {\r\n    [key: string]: JsOutputValue;\r\n};\r\n\r\nexport declare type JsPromise<T> = Promise<T> & {};\r\n\r\ndeclare type KnownErrorParams = {\r\n    code: string;\r\n    clientVersion: string;\r\n    meta?: Record<string, unknown>;\r\n    batchRequestIdx?: number;\r\n};\r\n\r\n/**\r\n * A pointer from the current {@link Span} to another span in the same trace or\r\n * in a different trace.\r\n * Few examples of Link usage.\r\n * 1. Batch Processing: A batch of elements may contain elements associated\r\n *    with one or more traces/spans. Since there can only be one parent\r\n *    SpanContext, Link is used to keep reference to SpanContext of all\r\n *    elements in the batch.\r\n * 2. Public Endpoint: A SpanContext in incoming client request on a public\r\n *    endpoint is untrusted from service provider perspective. In such case it\r\n *    is advisable to start a new trace with appropriate sampling decision.\r\n *    However, it is desirable to associate incoming SpanContext to new trace\r\n *    initiated on service provider side so two traces (from Client and from\r\n *    Service Provider) can be correlated.\r\n */\r\ndeclare interface Link {\r\n    /** The {@link SpanContext} of a linked span. */\r\n    context: SpanContext;\r\n    /** A set of {@link SpanAttributes} on the link. */\r\n    attributes?: SpanAttributes;\r\n    /** Count of attributes of the link that were dropped due to collection limits */\r\n    droppedAttributesCount?: number;\r\n}\r\n\r\ndeclare type LoadedEnv = {\r\n    message?: string;\r\n    parsed: {\r\n        [x: string]: string;\r\n    };\r\n} | undefined;\r\n\r\ndeclare type LocationInFile = {\r\n    fileName: string;\r\n    lineNumber: number | null;\r\n    columnNumber: number | null;\r\n};\r\n\r\ndeclare type LogDefinition = {\r\n    level: LogLevel;\r\n    emit: 'stdout' | 'event';\r\n};\r\n\r\n/**\r\n * Typings for the events we emit.\r\n *\r\n * @remarks\r\n * If this is updated, our edge runtime shim needs to be updated as well.\r\n */\r\ndeclare type LogEmitter = {\r\n    on<E extends EngineEventType>(event: E, listener: (event: EngineEvent<E>) => void): LogEmitter;\r\n    emit(event: QueryEventType, payload: QueryEvent): boolean;\r\n    emit(event: LogEventType, payload: LogEvent): boolean;\r\n};\r\n\r\ndeclare type LogEvent = {\r\n    timestamp: Date;\r\n    message: string;\r\n    target: string;\r\n};\r\n\r\ndeclare type LogEventType = 'info' | 'warn' | 'error';\r\n\r\ndeclare type LogLevel = 'info' | 'query' | 'warn' | 'error';\r\n\r\n/**\r\n * Generates more strict variant of an enum which, unlike regular enum,\r\n * throws on non-existing property access. This can be useful in following situations:\r\n * - we have an API, that accepts both `undefined` and `SomeEnumType` as an input\r\n * - enum values are generated dynamically from DMMF.\r\n *\r\n * In that case, if using normal enums and no compile-time typechecking, using non-existing property\r\n * will result in `undefined` value being used, which will be accepted. Using strict enum\r\n * in this case will help to have a runtime exception, telling you that you are probably doing something wrong.\r\n *\r\n * Note: if you need to check for existence of a value in the enum you can still use either\r\n * `in` operator or `hasOwnProperty` function.\r\n *\r\n * @param definition\r\n * @returns\r\n */\r\nexport declare function makeStrictEnum<T extends Record<PropertyKey, string | number>>(definition: T): T;\r\n\r\nexport declare function makeTypedQueryFactory(sql: string): (...values: any[]) => TypedSql<any[], unknown>;\r\n\r\ndeclare type Mappings = ReadonlyDeep_2<{\r\n    modelOperations: ModelMapping[];\r\n    otherOperations: {\r\n        read: string[];\r\n        write: string[];\r\n    };\r\n}>;\r\n\r\n/**\r\n * Class that holds the list of all extensions, applied to particular instance,\r\n * as well as resolved versions of the components that need to apply on\r\n * different levels. Main idea of this class: avoid re-resolving as much of the\r\n * stuff as possible when new extensions are added while also delaying the\r\n * resolve until the point it is actually needed. For example, computed fields\r\n * of the model won't be resolved unless the model is actually queried. Neither\r\n * adding extensions with `client` component only cause other components to\r\n * recompute.\r\n */\r\ndeclare class MergedExtensionsList {\r\n    private head?;\r\n    private constructor();\r\n    static empty(): MergedExtensionsList;\r\n    static single(extension: ExtensionArgs): MergedExtensionsList;\r\n    isEmpty(): boolean;\r\n    append(extension: ExtensionArgs): MergedExtensionsList;\r\n    getAllComputedFields(dmmfModelName: string): ComputedFieldsMap | undefined;\r\n    getAllClientExtensions(): ClientArg | undefined;\r\n    getAllModelExtensions(dmmfModelName: string): ModelArg | undefined;\r\n    getAllQueryCallbacks(jsModelName: string, operation: string): any;\r\n    getAllBatchQueryCallbacks(): BatchQueryOptionsCb[];\r\n}\r\n\r\nexport declare type MergeExtArgs<TypeMap extends TypeMapDef, ExtArgs extends Record<any, any>, Args extends Record<any, any>> = ComputeDeep<ExtArgs & Args & AllModelsToStringIndex<TypeMap, Args, 'result'> & AllModelsToStringIndex<TypeMap, Args, 'model'>>;\r\n\r\nexport declare type Metric<T> = {\r\n    key: string;\r\n    value: T;\r\n    labels: Record<string, string>;\r\n    description: string;\r\n};\r\n\r\nexport declare type MetricHistogram = {\r\n    buckets: MetricHistogramBucket[];\r\n    sum: number;\r\n    count: number;\r\n};\r\n\r\nexport declare type MetricHistogramBucket = [maxValue: number, count: number];\r\n\r\nexport declare type Metrics = {\r\n    counters: Metric<number>[];\r\n    gauges: Metric<number>[];\r\n    histograms: Metric<MetricHistogram>[];\r\n};\r\n\r\nexport declare class MetricsClient {\r\n    private _client;\r\n    constructor(client: Client);\r\n    /**\r\n     * Returns all metrics gathered up to this point in prometheus format.\r\n     * Result of this call can be exposed directly to prometheus scraping endpoint\r\n     *\r\n     * @param options\r\n     * @returns\r\n     */\r\n    prometheus(options?: MetricsOptions): Promise<string>;\r\n    /**\r\n     * Returns all metrics gathered up to this point in prometheus format.\r\n     *\r\n     * @param options\r\n     * @returns\r\n     */\r\n    json(options?: MetricsOptions): Promise<Metrics>;\r\n}\r\n\r\ndeclare type MetricsOptions = {\r\n    /**\r\n     * Labels to add to every metrics in key-value format\r\n     */\r\n    globalLabels?: Record<string, string>;\r\n};\r\n\r\ndeclare type MetricsOptionsCommon = {\r\n    globalLabels?: Record<string, string>;\r\n};\r\n\r\ndeclare type MetricsOptionsJson = {\r\n    format: 'json';\r\n} & MetricsOptionsCommon;\r\n\r\ndeclare type MetricsOptionsPrometheus = {\r\n    format: 'prometheus';\r\n} & MetricsOptionsCommon;\r\n\r\ndeclare type MiddlewareArgsMapper<RequestArgs, MiddlewareArgs> = {\r\n    requestArgsToMiddlewareArgs(requestArgs: RequestArgs): MiddlewareArgs;\r\n    middlewareArgsToRequestArgs(middlewareArgs: MiddlewareArgs): RequestArgs;\r\n};\r\n\r\ndeclare class MiddlewareHandler<M extends Function> {\r\n    private _middlewares;\r\n    use(middleware: M): void;\r\n    get(id: number): M | undefined;\r\n    has(id: number): boolean;\r\n    length(): number;\r\n}\r\n\r\ndeclare type Model = ReadonlyDeep_2<{\r\n    name: string;\r\n    dbName: string | null;\r\n    schema: string | null;\r\n    fields: Field[];\r\n    uniqueFields: string[][];\r\n    uniqueIndexes: uniqueIndex[];\r\n    documentation?: string;\r\n    primaryKey: PrimaryKey | null;\r\n    isGenerated?: boolean;\r\n}>;\r\n\r\ndeclare enum ModelAction {\r\n    findUnique = \"findUnique\",\r\n    findUniqueOrThrow = \"findUniqueOrThrow\",\r\n    findFirst = \"findFirst\",\r\n    findFirstOrThrow = \"findFirstOrThrow\",\r\n    findMany = \"findMany\",\r\n    create = \"create\",\r\n    createMany = \"createMany\",\r\n    createManyAndReturn = \"createManyAndReturn\",\r\n    update = \"update\",\r\n    updateMany = \"updateMany\",\r\n    updateManyAndReturn = \"updateManyAndReturn\",\r\n    upsert = \"upsert\",\r\n    delete = \"delete\",\r\n    deleteMany = \"deleteMany\",\r\n    groupBy = \"groupBy\",\r\n    count = \"count\",// TODO: count does not actually exist in DMMF\r\n    aggregate = \"aggregate\",\r\n    findRaw = \"findRaw\",\r\n    aggregateRaw = \"aggregateRaw\"\r\n}\r\n\r\nexport declare type ModelArg = {\r\n    [MethodName in string]: unknown;\r\n};\r\n\r\nexport declare type ModelArgs = {\r\n    model: {\r\n        [ModelName in string]: ModelArg;\r\n    };\r\n};\r\n\r\nexport declare type ModelKey<TypeMap extends TypeMapDef, M extends PropertyKey> = M extends keyof TypeMap['model'] ? M : Capitalize<M & string>;\r\n\r\ndeclare type ModelMapping = ReadonlyDeep_2<{\r\n    model: string;\r\n    plural: string;\r\n    findUnique?: string | null;\r\n    findUniqueOrThrow?: string | null;\r\n    findFirst?: string | null;\r\n    findFirstOrThrow?: string | null;\r\n    findMany?: string | null;\r\n    create?: string | null;\r\n    createMany?: string | null;\r\n    createManyAndReturn?: string | null;\r\n    update?: string | null;\r\n    updateMany?: string | null;\r\n    updateManyAndReturn?: string | null;\r\n    upsert?: string | null;\r\n    delete?: string | null;\r\n    deleteMany?: string | null;\r\n    aggregate?: string | null;\r\n    groupBy?: string | null;\r\n    count?: string | null;\r\n    findRaw?: string | null;\r\n    aggregateRaw?: string | null;\r\n}>;\r\n\r\nexport declare type ModelQueryOptionsCb = (args: ModelQueryOptionsCbArgs) => Promise<any>;\r\n\r\nexport declare type ModelQueryOptionsCbArgs = {\r\n    model: string;\r\n    operation: string;\r\n    args: JsArgs;\r\n    query: (args: JsArgs) => Promise<unknown>;\r\n};\r\n\r\ndeclare type MultiBatchResponse = {\r\n    type: 'multi';\r\n    plans: object[];\r\n};\r\n\r\nexport declare type NameArgs = {\r\n    name?: string;\r\n};\r\n\r\nexport declare type Narrow<A> = {\r\n    [K in keyof A]: A[K] extends Function ? A[K] : Narrow<A[K]>;\r\n} | (A extends Narrowable ? A : never);\r\n\r\nexport declare type Narrowable = string | number | bigint | boolean | [];\r\n\r\nexport declare type NeverToUnknown<T> = [T] extends [never] ? unknown : T;\r\n\r\ndeclare class NullTypesEnumValue extends ObjectEnumValue {\r\n    _getNamespace(): string;\r\n}\r\n\r\n/**\r\n * Base class for unique values of object-valued enums.\r\n */\r\nexport declare abstract class ObjectEnumValue {\r\n    constructor(arg?: symbol);\r\n    abstract _getNamespace(): string;\r\n    _getName(): string;\r\n    toString(): string;\r\n}\r\n\r\nexport declare const objectEnumValues: {\r\n    classes: {\r\n        DbNull: typeof DbNull;\r\n        JsonNull: typeof JsonNull;\r\n        AnyNull: typeof AnyNull;\r\n    };\r\n    instances: {\r\n        DbNull: DbNull;\r\n        JsonNull: JsonNull;\r\n        AnyNull: AnyNull;\r\n    };\r\n};\r\n\r\ndeclare const officialPrismaAdapters: readonly [\"@prisma/adapter-planetscale\", \"@prisma/adapter-neon\", \"@prisma/adapter-libsql\", \"@prisma/adapter-d1\", \"@prisma/adapter-pg\", \"@prisma/adapter-pg-worker\"];\r\n\r\nexport declare type Omission = Record<string, boolean | Skip>;\r\n\r\ndeclare type Omit_2<T, K extends string | number | symbol> = {\r\n    [P in keyof T as P extends K ? never : P]: T[P];\r\n};\r\nexport { Omit_2 as Omit }\r\n\r\nexport declare type OmitValue<Omit, Key> = Key extends keyof Omit ? Omit[Key] : false;\r\n\r\nexport declare type Operation = 'findFirst' | 'findFirstOrThrow' | 'findUnique' | 'findUniqueOrThrow' | 'findMany' | 'create' | 'createMany' | 'createManyAndReturn' | 'update' | 'updateMany' | 'updateManyAndReturn' | 'upsert' | 'delete' | 'deleteMany' | 'aggregate' | 'count' | 'groupBy' | '$queryRaw' | '$executeRaw' | '$queryRawUnsafe' | '$executeRawUnsafe' | 'findRaw' | 'aggregateRaw' | '$runCommandRaw';\r\n\r\nexport declare type OperationPayload = {\r\n    name: string;\r\n    scalars: {\r\n        [ScalarName in string]: unknown;\r\n    };\r\n    objects: {\r\n        [ObjectName in string]: unknown;\r\n    };\r\n    composites: {\r\n        [CompositeName in string]: unknown;\r\n    };\r\n};\r\n\r\nexport declare type Optional<O, K extends keyof any = keyof O> = {\r\n    [P in K & keyof O]?: O[P];\r\n} & {\r\n    [P in Exclude<keyof O, K>]: O[P];\r\n};\r\n\r\nexport declare type OptionalFlat<T> = {\r\n    [K in keyof T]?: T[K];\r\n};\r\n\r\nexport declare type OptionalKeys<O> = {\r\n    [K in keyof O]-?: {} extends Pick_2<O, K> ? K : never;\r\n}[keyof O];\r\n\r\ndeclare type Options = {\r\n    clientVersion: string;\r\n};\r\n\r\nexport declare type Or<A extends 1 | 0, B extends 1 | 0> = {\r\n    0: {\r\n        0: 0;\r\n        1: 1;\r\n    };\r\n    1: {\r\n        0: 1;\r\n        1: 1;\r\n    };\r\n}[A][B];\r\n\r\ndeclare type OtherOperationMappings = ReadonlyDeep_2<{\r\n    read: string[];\r\n    write: string[];\r\n}>;\r\n\r\ndeclare type OutputType = ReadonlyDeep_2<{\r\n    name: string;\r\n    fields: SchemaField[];\r\n}>;\r\n\r\ndeclare type OutputTypeRef = TypeRef<'scalar' | 'outputObjectTypes' | 'enumTypes'>;\r\n\r\nexport declare function Param<$Type, $Value extends string>(name: $Value): Param<$Type, $Value>;\r\n\r\nexport declare type Param<out $Type, $Value extends string> = {\r\n    readonly name: $Value;\r\n};\r\n\r\nexport declare type PatchFlat<O1, O2> = O1 & Omit_2<O2, keyof O1>;\r\n\r\nexport declare type Path<O, P, Default = never> = O extends unknown ? P extends [infer K, ...infer R] ? K extends keyof O ? Path<O[K], R> : Default : O : never;\r\n\r\nexport declare type Payload<T, F extends Operation = never> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            payload: any;\r\n        };\r\n    };\r\n} ? T[symbol]['types']['payload'] : any;\r\n\r\nexport declare type PayloadToResult<P, O extends Record_2<any, any> = RenameAndNestPayloadKeys<P>> = {\r\n    [K in keyof O]?: O[K][K] extends any[] ? PayloadToResult<O[K][K][number]>[] : O[K][K] extends object ? PayloadToResult<O[K][K]> : O[K][K];\r\n};\r\n\r\ndeclare type Pick_2<T, K extends string | number | symbol> = {\r\n    [P in keyof T as P extends K ? P : never]: T[P];\r\n};\r\nexport { Pick_2 as Pick }\r\n\r\ndeclare type PrimaryKey = ReadonlyDeep_2<{\r\n    name: string | null;\r\n    fields: string[];\r\n}>;\r\n\r\nexport declare class PrismaClientInitializationError extends Error {\r\n    clientVersion: string;\r\n    errorCode?: string;\r\n    retryable?: boolean;\r\n    constructor(message: string, clientVersion: string, errorCode?: string);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientKnownRequestError extends Error implements ErrorWithBatchIndex {\r\n    code: string;\r\n    meta?: Record<string, unknown>;\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n    constructor(message: string, { code, clientVersion, meta, batchRequestIdx }: KnownErrorParams);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare type PrismaClientOptions = {\r\n    /**\r\n     * Overwrites the primary datasource url from your schema.prisma file\r\n     */\r\n    datasourceUrl?: string;\r\n    /**\r\n     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale.\r\n     */\r\n    adapter?: SqlDriverAdapterFactory | null;\r\n    /**\r\n     * Overwrites the datasource url from your schema.prisma file\r\n     */\r\n    datasources?: Datasources;\r\n    /**\r\n     * @default \"colorless\"\r\n     */\r\n    errorFormat?: ErrorFormat;\r\n    /**\r\n     * The default values for Transaction options\r\n     * maxWait ?= 2000\r\n     * timeout ?= 5000\r\n     */\r\n    transactionOptions?: Transaction_2.Options;\r\n    /**\r\n     * @example\r\n     * \\`\\`\\`\r\n     * // Defaults to stdout\r\n     * log: ['query', 'info', 'warn']\r\n     *\r\n     * // Emit as events\r\n     * log: [\r\n     *  { emit: 'stdout', level: 'query' },\r\n     *  { emit: 'stdout', level: 'info' },\r\n     *  { emit: 'stdout', level: 'warn' }\r\n     * ]\r\n     * \\`\\`\\`\r\n     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).\r\n     */\r\n    log?: Array<LogLevel | LogDefinition>;\r\n    omit?: GlobalOmitOptions;\r\n    /**\r\n     * @internal\r\n     * You probably don't want to use this. \\`__internal\\` is used by internal tooling.\r\n     */\r\n    __internal?: {\r\n        debug?: boolean;\r\n        engine?: {\r\n            cwd?: string;\r\n            binaryPath?: string;\r\n            endpoint?: string;\r\n            allowTriggerPanic?: boolean;\r\n        };\r\n        /** This can be used for testing purposes */\r\n        configOverride?: (config: GetPrismaClientConfig) => GetPrismaClientConfig;\r\n    };\r\n};\r\n\r\nexport declare class PrismaClientRustPanicError extends Error {\r\n    clientVersion: string;\r\n    constructor(message: string, clientVersion: string);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientUnknownRequestError extends Error implements ErrorWithBatchIndex {\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n    constructor(message: string, { clientVersion, batchRequestIdx }: UnknownErrorParams);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\nexport declare class PrismaClientValidationError extends Error {\r\n    name: string;\r\n    clientVersion: string;\r\n    constructor(message: string, { clientVersion }: Options);\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare function prismaGraphQLToJSError({ error, user_facing_error }: RequestError, clientVersion: string, activeProvider: string): PrismaClientKnownRequestError | PrismaClientUnknownRequestError;\r\n\r\ndeclare type PrismaOperationSpec<TArgs, TAction = string> = {\r\n    args: TArgs;\r\n    action: TAction;\r\n    model: string;\r\n};\r\n\r\nexport declare interface PrismaPromise<T> extends Promise<T> {\r\n    [Symbol.toStringTag]: 'PrismaPromise';\r\n}\r\n\r\n/**\r\n * Prisma's `Promise` that is backwards-compatible. All additions on top of the\r\n * original `Promise` are optional so that it can be backwards-compatible.\r\n * @see [[createPrismaPromise]]\r\n */\r\ndeclare interface PrismaPromise_2<TResult, TSpec extends PrismaOperationSpec<unknown> = any> extends Promise<TResult> {\r\n    get spec(): TSpec;\r\n    /**\r\n     * Extension of the original `.then` function\r\n     * @param onfulfilled same as regular promises\r\n     * @param onrejected same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    then<R1 = TResult, R2 = never>(onfulfilled?: (value: TResult) => R1 | PromiseLike<R1>, onrejected?: (error: unknown) => R2 | PromiseLike<R2>, transaction?: PrismaPromiseTransaction): Promise<R1 | R2>;\r\n    /**\r\n     * Extension of the original `.catch` function\r\n     * @param onrejected same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    catch<R = never>(onrejected?: ((reason: any) => R | PromiseLike<R>) | undefined | null, transaction?: PrismaPromiseTransaction): Promise<TResult | R>;\r\n    /**\r\n     * Extension of the original `.finally` function\r\n     * @param onfinally same as regular promises\r\n     * @param transaction transaction options\r\n     */\r\n    finally(onfinally?: (() => void) | undefined | null, transaction?: PrismaPromiseTransaction): Promise<TResult>;\r\n    /**\r\n     * Called when executing a batch of regular tx\r\n     * @param transaction transaction options for batch tx\r\n     */\r\n    requestTransaction?(transaction: PrismaPromiseBatchTransaction): PromiseLike<unknown>;\r\n}\r\n\r\ndeclare type PrismaPromiseBatchTransaction = {\r\n    kind: 'batch';\r\n    id: number;\r\n    isolationLevel?: IsolationLevel;\r\n    index: number;\r\n    lock: PromiseLike<void>;\r\n};\r\n\r\ndeclare type PrismaPromiseCallback = (transaction?: PrismaPromiseTransaction) => Promise<unknown>;\r\n\r\n/**\r\n * Creates a [[PrismaPromise]]. It is Prisma's implementation of `Promise` which\r\n * is essentially a proxy for `Promise`. All the transaction-compatible client\r\n * methods return one, this allows for pre-preparing queries without executing\r\n * them until `.then` is called. It's the foundation of Prisma's query batching.\r\n * @param callback that will be wrapped within our promise implementation\r\n * @see [[PrismaPromise]]\r\n * @returns\r\n */\r\ndeclare type PrismaPromiseFactory = <T extends PrismaOperationSpec<unknown>>(callback: PrismaPromiseCallback, op?: T) => PrismaPromise_2<unknown>;\r\n\r\ndeclare type PrismaPromiseInteractiveTransaction<PayloadType = unknown> = {\r\n    kind: 'itx';\r\n    id: string;\r\n    payload: PayloadType;\r\n};\r\n\r\ndeclare type PrismaPromiseTransaction<PayloadType = unknown> = PrismaPromiseBatchTransaction | PrismaPromiseInteractiveTransaction<PayloadType>;\r\n\r\nexport declare const PrivateResultType: unique symbol;\r\n\r\ndeclare type Provider = 'mysql' | 'postgres' | 'sqlite';\r\n\r\ndeclare namespace Public {\r\n    export {\r\n        validator\r\n    }\r\n}\r\nexport { Public }\r\n\r\ndeclare namespace Public_2 {\r\n    export {\r\n        Args,\r\n        Result,\r\n        Payload,\r\n        PrismaPromise,\r\n        Operation,\r\n        Exact\r\n    }\r\n}\r\n\r\ndeclare type Query = ReadonlyDeep_2<{\r\n    name: string;\r\n    args: SchemaArg[];\r\n    output: QueryOutput;\r\n}>;\r\n\r\ndeclare interface Queryable<Query, Result> extends AdapterInfo {\r\n    /**\r\n     * Execute a query and return its result.\r\n     */\r\n    queryRaw(params: Query): Promise<Result>;\r\n    /**\r\n     * Execute a query and return the number of affected rows.\r\n     */\r\n    executeRaw(params: Query): Promise<number>;\r\n}\r\n\r\ndeclare type QueryCompiler = {\r\n    compile(request: string): string;\r\n    compileBatch(batchRequest: string): BatchResponse;\r\n};\r\n\r\ndeclare interface QueryCompilerConstructor {\r\n    new (options: QueryCompilerOptions): QueryCompiler;\r\n}\r\n\r\ndeclare type QueryCompilerOptions = {\r\n    datamodel: string;\r\n    provider: Provider;\r\n    connectionInfo: ConnectionInfo;\r\n};\r\n\r\ndeclare type QueryEngineBatchGraphQLRequest = {\r\n    batch: QueryEngineRequest[];\r\n    transaction?: boolean;\r\n    isolationLevel?: IsolationLevel;\r\n};\r\n\r\ndeclare type QueryEngineBatchRequest = QueryEngineBatchGraphQLRequest | JsonBatchQuery;\r\n\r\ndeclare type QueryEngineConfig = {\r\n    datamodel: string;\r\n    configDir: string;\r\n    logQueries: boolean;\r\n    ignoreEnvVarErrors: boolean;\r\n    datasourceOverrides: Record<string, string>;\r\n    env: Record<string, string | undefined>;\r\n    logLevel: QueryEngineLogLevel;\r\n    engineProtocol: QueryEngineProtocol;\r\n    enableTracing: boolean;\r\n};\r\n\r\ndeclare interface QueryEngineConstructor {\r\n    new (config: QueryEngineConfig, logger: (log: string) => void, adapter?: ErrorCapturingSqlDriverAdapter): QueryEngineInstance;\r\n}\r\n\r\ndeclare type QueryEngineInstance = {\r\n    connect(headers: string, requestId: string): Promise<void>;\r\n    disconnect(headers: string, requestId: string): Promise<void>;\r\n    /**\r\n     * @param requestStr JSON.stringified `QueryEngineRequest | QueryEngineBatchRequest`\r\n     * @param headersStr JSON.stringified `QueryEngineRequestHeaders`\r\n     */\r\n    query(requestStr: string, headersStr: string, transactionId: string | undefined, requestId: string): Promise<string>;\r\n    sdlSchema?(): Promise<string>;\r\n    startTransaction(options: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    commitTransaction(id: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    rollbackTransaction(id: string, traceHeaders: string, requestId: string): Promise<string>;\r\n    metrics?(options: string): Promise<string>;\r\n    applyPendingMigrations?(): Promise<void>;\r\n    trace(requestId: string): Promise<string | null>;\r\n};\r\n\r\ndeclare type QueryEngineLogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\r\n\r\ndeclare type QueryEngineProtocol = 'graphql' | 'json';\r\n\r\ndeclare type QueryEngineRequest = {\r\n    query: string;\r\n    variables: Object;\r\n};\r\n\r\ndeclare type QueryEngineResultData<T> = {\r\n    data: T;\r\n};\r\n\r\ndeclare type QueryEvent = {\r\n    timestamp: Date;\r\n    query: string;\r\n    params: string;\r\n    duration: number;\r\n    target: string;\r\n};\r\n\r\ndeclare type QueryEventType = 'query';\r\n\r\ndeclare type QueryIntrospectionBuiltinType = 'int' | 'bigint' | 'float' | 'double' | 'string' | 'enum' | 'bytes' | 'bool' | 'char' | 'decimal' | 'json' | 'xml' | 'uuid' | 'datetime' | 'date' | 'time' | 'int-array' | 'bigint-array' | 'float-array' | 'double-array' | 'string-array' | 'char-array' | 'bytes-array' | 'bool-array' | 'decimal-array' | 'json-array' | 'xml-array' | 'uuid-array' | 'datetime-array' | 'date-array' | 'time-array' | 'null' | 'unknown';\r\n\r\ndeclare type QueryMiddleware = (params: QueryMiddlewareParams, next: (params: QueryMiddlewareParams) => Promise<unknown>) => Promise<unknown>;\r\n\r\ndeclare type QueryMiddlewareParams = {\r\n    /** The model this is executed on */\r\n    model?: string;\r\n    /** The action that is being handled */\r\n    action: Action;\r\n    /** TODO what is this */\r\n    dataPath: string[];\r\n    /** TODO what is this */\r\n    runInTransaction: boolean;\r\n    args?: UserArgs_2;\r\n};\r\n\r\nexport declare type QueryOptions = {\r\n    query: {\r\n        [ModelName in string]: {\r\n            [ModelAction in string]: ModelQueryOptionsCb;\r\n        } | QueryOptionsCb;\r\n    };\r\n};\r\n\r\nexport declare type QueryOptionsCb = (args: QueryOptionsCbArgs) => Promise<any>;\r\n\r\nexport declare type QueryOptionsCbArgs = {\r\n    model?: string;\r\n    operation: string;\r\n    args: JsArgs | RawQueryArgs;\r\n    query: (args: JsArgs | RawQueryArgs) => Promise<unknown>;\r\n};\r\n\r\ndeclare type QueryOutput = ReadonlyDeep_2<{\r\n    name: string;\r\n    isRequired: boolean;\r\n    isList: boolean;\r\n}>;\r\n\r\n/**\r\n * Create raw SQL statement.\r\n */\r\nexport declare function raw(value: string): Sql;\r\n\r\nexport declare type RawParameters = {\r\n    __prismaRawParameters__: true;\r\n    values: string;\r\n};\r\n\r\nexport declare type RawQueryArgs = Sql | UnknownTypedSql | [query: string, ...values: RawValue[]];\r\n\r\ndeclare type RawResponse = {\r\n    columns: string[];\r\n    types: QueryIntrospectionBuiltinType[];\r\n    rows: unknown[][];\r\n};\r\n\r\ndeclare type RawTaggedValue = {\r\n    $type: 'Raw';\r\n    value: unknown;\r\n};\r\n\r\n/**\r\n * Supported value or SQL instance.\r\n */\r\nexport declare type RawValue = Value | Sql;\r\n\r\nexport declare type ReadonlyDeep<T> = {\r\n    readonly [K in keyof T]: ReadonlyDeep<T[K]>;\r\n};\r\n\r\ndeclare type ReadonlyDeep_2<O> = {\r\n    +readonly [K in keyof O]: ReadonlyDeep_2<O[K]>;\r\n};\r\n\r\ndeclare type Record_2<T extends string | number | symbol, U> = {\r\n    [P in T]: U;\r\n};\r\nexport { Record_2 as Record }\r\n\r\nexport declare type RenameAndNestPayloadKeys<P> = {\r\n    [K in keyof P as K extends 'scalars' | 'objects' | 'composites' ? keyof P[K] : never]: P[K];\r\n};\r\n\r\ndeclare type RequestBatchOptions<InteractiveTransactionPayload> = {\r\n    transaction?: TransactionOptions_3<InteractiveTransactionPayload>;\r\n    traceparent?: string;\r\n    numTry?: number;\r\n    containsWrite: boolean;\r\n    customDataProxyFetch?: CustomDataProxyFetch;\r\n};\r\n\r\ndeclare interface RequestError {\r\n    error: string;\r\n    user_facing_error: {\r\n        is_panic: boolean;\r\n        message: string;\r\n        meta?: Record<string, unknown>;\r\n        error_code?: string;\r\n        batch_request_idx?: number;\r\n    };\r\n}\r\n\r\ndeclare class RequestHandler {\r\n    client: Client;\r\n    dataloader: DataLoader<RequestParams>;\r\n    private logEmitter?;\r\n    constructor(client: Client, logEmitter?: LogEmitter);\r\n    request(params: RequestParams): Promise<any>;\r\n    mapQueryEngineResult({ dataPath, unpacker }: RequestParams, response: QueryEngineResultData<any>): any;\r\n    /**\r\n     * Handles the error and logs it, logging the error is done synchronously waiting for the event\r\n     * handlers to finish.\r\n     */\r\n    handleAndLogRequestError(params: HandleErrorParams): never;\r\n    handleRequestError({ error, clientMethod, callsite, transaction, args, modelName, globalOmit, }: HandleErrorParams): never;\r\n    sanitizeMessage(message: any): any;\r\n    unpack(data: unknown, dataPath: string[], unpacker?: Unpacker): any;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\n\r\ndeclare type RequestOptions<InteractiveTransactionPayload> = {\r\n    traceparent?: string;\r\n    numTry?: number;\r\n    interactiveTransaction?: InteractiveTransactionOptions<InteractiveTransactionPayload>;\r\n    isWrite: boolean;\r\n    customDataProxyFetch?: CustomDataProxyFetch;\r\n};\r\n\r\ndeclare type RequestParams = {\r\n    modelName?: string;\r\n    action: Action;\r\n    protocolQuery: JsonQuery;\r\n    dataPath: string[];\r\n    clientMethod: string;\r\n    callsite?: CallSite;\r\n    transaction?: PrismaPromiseTransaction;\r\n    extensions: MergedExtensionsList;\r\n    args?: any;\r\n    headers?: Record<string, string>;\r\n    unpacker?: Unpacker;\r\n    otelParentCtx?: Context;\r\n    otelChildCtx?: Context;\r\n    globalOmit?: GlobalOmitOptions;\r\n    customDataProxyFetch?: CustomDataProxyFetch;\r\n};\r\n\r\ndeclare type RequiredExtensionArgs = NameArgs & ResultArgs & ModelArgs & ClientArgs & QueryOptions;\r\nexport { RequiredExtensionArgs }\r\nexport { RequiredExtensionArgs as UserArgs }\r\n\r\nexport declare type RequiredKeys<O> = {\r\n    [K in keyof O]-?: {} extends Pick_2<O, K> ? never : K;\r\n}[keyof O];\r\n\r\ndeclare function resolveDatasourceUrl({ inlineDatasources, overrideDatasources, env, clientVersion, }: {\r\n    inlineDatasources: GetPrismaClientConfig['inlineDatasources'];\r\n    overrideDatasources: Datasources;\r\n    env: Record<string, string | undefined>;\r\n    clientVersion: string;\r\n}): string;\r\n\r\nexport declare type Result<T, A, F extends Operation> = T extends {\r\n    [K: symbol]: {\r\n        types: {\r\n            payload: any;\r\n        };\r\n    };\r\n} ? GetResult<T[symbol]['types']['payload'], A, F> : GetResult<{\r\n    composites: {};\r\n    objects: {};\r\n    scalars: {};\r\n    name: '';\r\n}, {}, F>;\r\n\r\nexport declare type Result_2<T, A, F extends Operation> = Result<T, A, F>;\r\n\r\ndeclare namespace Result_3 {\r\n    export {\r\n        Count,\r\n        GetFindResult,\r\n        SelectablePayloadFields,\r\n        SelectField,\r\n        DefaultSelection,\r\n        UnwrapPayload,\r\n        ApplyOmit,\r\n        OmitValue,\r\n        GetCountResult,\r\n        Aggregate,\r\n        GetAggregateResult,\r\n        GetBatchResult,\r\n        GetGroupByResult,\r\n        GetResult,\r\n        ExtractGlobalOmit\r\n    }\r\n}\r\n\r\ndeclare type Result_4<T> = {\r\n    map<U>(fn: (value: T) => U): Result_4<U>;\r\n    flatMap<U>(fn: (value: T) => Result_4<U>): Result_4<U>;\r\n} & ({\r\n    readonly ok: true;\r\n    readonly value: T;\r\n} | {\r\n    readonly ok: false;\r\n    readonly error: Error_2;\r\n});\r\n\r\nexport declare type ResultArg = {\r\n    [FieldName in string]: ResultFieldDefinition;\r\n};\r\n\r\nexport declare type ResultArgs = {\r\n    result: {\r\n        [ModelName in string]: ResultArg;\r\n    };\r\n};\r\n\r\nexport declare type ResultArgsFieldCompute = (model: any) => unknown;\r\n\r\nexport declare type ResultFieldDefinition = {\r\n    needs?: {\r\n        [FieldName in string]: boolean;\r\n    };\r\n    compute: ResultArgsFieldCompute;\r\n};\r\n\r\nexport declare type Return<T> = T extends (...args: any[]) => infer R ? R : T;\r\n\r\nexport declare type RuntimeDataModel = {\r\n    readonly models: Record<string, RuntimeModel>;\r\n    readonly enums: Record<string, RuntimeEnum>;\r\n    readonly types: Record<string, RuntimeModel>;\r\n};\r\n\r\ndeclare type RuntimeEnum = Omit<DMMF_2.DatamodelEnum, 'name'>;\r\n\r\ndeclare type RuntimeModel = Omit<DMMF_2.Model, 'name'>;\r\n\r\ndeclare type RuntimeName = 'workerd' | 'deno' | 'netlify' | 'node' | 'bun' | 'edge-light' | '';\r\n\r\ndeclare type Schema = ReadonlyDeep_2<{\r\n    rootQueryType?: string;\r\n    rootMutationType?: string;\r\n    inputObjectTypes: {\r\n        model?: InputType[];\r\n        prisma: InputType[];\r\n    };\r\n    outputObjectTypes: {\r\n        model: OutputType[];\r\n        prisma: OutputType[];\r\n    };\r\n    enumTypes: {\r\n        model?: SchemaEnum[];\r\n        prisma: SchemaEnum[];\r\n    };\r\n    fieldRefTypes: {\r\n        prisma?: FieldRefType[];\r\n    };\r\n}>;\r\n\r\ndeclare type SchemaArg = ReadonlyDeep_2<{\r\n    name: string;\r\n    comment?: string;\r\n    isNullable: boolean;\r\n    isRequired: boolean;\r\n    inputTypes: InputTypeRef[];\r\n    deprecation?: Deprecation;\r\n}>;\r\n\r\ndeclare type SchemaEnum = ReadonlyDeep_2<{\r\n    name: string;\r\n    values: string[];\r\n}>;\r\n\r\ndeclare type SchemaField = ReadonlyDeep_2<{\r\n    name: string;\r\n    isNullable?: boolean;\r\n    outputType: OutputTypeRef;\r\n    args: SchemaArg[];\r\n    deprecation?: Deprecation;\r\n    documentation?: string;\r\n}>;\r\n\r\nexport declare type Select<T, U> = T extends U ? T : never;\r\n\r\nexport declare type SelectablePayloadFields<K extends PropertyKey, O> = {\r\n    objects: {\r\n        [k in K]: O;\r\n    };\r\n} | {\r\n    composites: {\r\n        [k in K]: O;\r\n    };\r\n};\r\n\r\nexport declare type SelectField<P extends SelectablePayloadFields<any, any>, K extends PropertyKey> = P extends {\r\n    objects: Record<K, any>;\r\n} ? P['objects'][K] : P extends {\r\n    composites: Record<K, any>;\r\n} ? P['composites'][K] : never;\r\n\r\ndeclare type Selection_2 = Record<string, boolean | Skip | JsArgs>;\r\nexport { Selection_2 as Selection }\r\n\r\nexport declare function serializeJsonQuery({ modelName, action, args, runtimeDataModel, extensions, callsite, clientMethod, errorFormat, clientVersion, previewFeatures, globalOmit, }: SerializeParams): JsonQuery;\r\n\r\ndeclare type SerializeParams = {\r\n    runtimeDataModel: RuntimeDataModel;\r\n    modelName?: string;\r\n    action: Action;\r\n    args?: JsArgs;\r\n    extensions?: MergedExtensionsList;\r\n    callsite?: CallSite;\r\n    clientMethod: string;\r\n    clientVersion: string;\r\n    errorFormat: ErrorFormat;\r\n    previewFeatures: string[];\r\n    globalOmit?: GlobalOmitOptions;\r\n};\r\n\r\ndeclare class Skip {\r\n    constructor(param?: symbol);\r\n    ifUndefined<T>(value: T | undefined): T | Skip;\r\n}\r\n\r\nexport declare const skip: Skip;\r\n\r\ndeclare type SortOrder = 'asc' | 'desc';\r\n\r\n/**\r\n * An interface that represents a span. A span represents a single operation\r\n * within a trace. Examples of span might include remote procedure calls or a\r\n * in-process function calls to sub-components. A Trace has a single, top-level\r\n * \"root\" Span that in turn may have zero or more child Spans, which in turn\r\n * may have children.\r\n *\r\n * Spans are created by the {@link Tracer.startSpan} method.\r\n */\r\ndeclare interface Span {\r\n    /**\r\n     * Returns the {@link SpanContext} object associated with this Span.\r\n     *\r\n     * Get an immutable, serializable identifier for this span that can be used\r\n     * to create new child spans. Returned SpanContext is usable even after the\r\n     * span ends.\r\n     *\r\n     * @returns the SpanContext object associated with this Span.\r\n     */\r\n    spanContext(): SpanContext;\r\n    /**\r\n     * Sets an attribute to the span.\r\n     *\r\n     * Sets a single Attribute with the key and value passed as arguments.\r\n     *\r\n     * @param key the key for this attribute.\r\n     * @param value the value for this attribute. Setting a value null or\r\n     *              undefined is invalid and will result in undefined behavior.\r\n     */\r\n    setAttribute(key: string, value: SpanAttributeValue): this;\r\n    /**\r\n     * Sets attributes to the span.\r\n     *\r\n     * @param attributes the attributes that will be added.\r\n     *                   null or undefined attribute values\r\n     *                   are invalid and will result in undefined behavior.\r\n     */\r\n    setAttributes(attributes: SpanAttributes): this;\r\n    /**\r\n     * Adds an event to the Span.\r\n     *\r\n     * @param name the name of the event.\r\n     * @param [attributesOrStartTime] the attributes that will be added; these are\r\n     *     associated with this event. Can be also a start time\r\n     *     if type is {@type TimeInput} and 3rd param is undefined\r\n     * @param [startTime] start time of the event.\r\n     */\r\n    addEvent(name: string, attributesOrStartTime?: SpanAttributes | TimeInput, startTime?: TimeInput): this;\r\n    /**\r\n     * Adds a single link to the span.\r\n     *\r\n     * Links added after the creation will not affect the sampling decision.\r\n     * It is preferred span links be added at span creation.\r\n     *\r\n     * @param link the link to add.\r\n     */\r\n    addLink(link: Link): this;\r\n    /**\r\n     * Adds multiple links to the span.\r\n     *\r\n     * Links added after the creation will not affect the sampling decision.\r\n     * It is preferred span links be added at span creation.\r\n     *\r\n     * @param links the links to add.\r\n     */\r\n    addLinks(links: Link[]): this;\r\n    /**\r\n     * Sets a status to the span. If used, this will override the default Span\r\n     * status. Default is {@link SpanStatusCode.UNSET}. SetStatus overrides the value\r\n     * of previous calls to SetStatus on the Span.\r\n     *\r\n     * @param status the SpanStatus to set.\r\n     */\r\n    setStatus(status: SpanStatus): this;\r\n    /**\r\n     * Updates the Span name.\r\n     *\r\n     * This will override the name provided via {@link Tracer.startSpan}.\r\n     *\r\n     * Upon this update, any sampling behavior based on Span name will depend on\r\n     * the implementation.\r\n     *\r\n     * @param name the Span name.\r\n     */\r\n    updateName(name: string): this;\r\n    /**\r\n     * Marks the end of Span execution.\r\n     *\r\n     * Call to End of a Span MUST not have any effects on child spans. Those may\r\n     * still be running and can be ended later.\r\n     *\r\n     * Do not return `this`. The Span generally should not be used after it\r\n     * is ended so chaining is not desired in this context.\r\n     *\r\n     * @param [endTime] the time to set as Span's end time. If not provided,\r\n     *     use the current time as the span's end time.\r\n     */\r\n    end(endTime?: TimeInput): void;\r\n    /**\r\n     * Returns the flag whether this span will be recorded.\r\n     *\r\n     * @returns true if this Span is active and recording information like events\r\n     *     with the `AddEvent` operation and attributes using `setAttributes`.\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Sets exception as a span event\r\n     * @param exception the exception the only accepted values are string or Error\r\n     * @param [time] the time to set as Span's event time. If not provided,\r\n     *     use the current time.\r\n     */\r\n    recordException(exception: Exception, time?: TimeInput): void;\r\n}\r\n\r\n/**\r\n * @deprecated please use {@link Attributes}\r\n */\r\ndeclare type SpanAttributes = Attributes;\r\n\r\n/**\r\n * @deprecated please use {@link AttributeValue}\r\n */\r\ndeclare type SpanAttributeValue = AttributeValue;\r\n\r\ndeclare type SpanCallback<R> = (span?: Span, context?: Context) => R;\r\n\r\n/**\r\n * A SpanContext represents the portion of a {@link Span} which must be\r\n * serialized and propagated along side of a {@link Baggage}.\r\n */\r\ndeclare interface SpanContext {\r\n    /**\r\n     * The ID of the trace that this span belongs to. It is worldwide unique\r\n     * with practically sufficient probability by being made as 16 randomly\r\n     * generated bytes, encoded as a 32 lowercase hex characters corresponding to\r\n     * 128 bits.\r\n     */\r\n    traceId: string;\r\n    /**\r\n     * The ID of the Span. It is globally unique with practically sufficient\r\n     * probability by being made as 8 randomly generated bytes, encoded as a 16\r\n     * lowercase hex characters corresponding to 64 bits.\r\n     */\r\n    spanId: string;\r\n    /**\r\n     * Only true if the SpanContext was propagated from a remote parent.\r\n     */\r\n    isRemote?: boolean;\r\n    /**\r\n     * Trace flags to propagate.\r\n     *\r\n     * It is represented as 1 byte (bitmap). Bit to represent whether trace is\r\n     * sampled or not. When set, the least significant bit documents that the\r\n     * caller may have recorded trace data. A caller who does not record trace\r\n     * data out-of-band leaves this flag unset.\r\n     *\r\n     * see {@link TraceFlags} for valid flag values.\r\n     */\r\n    traceFlags: number;\r\n    /**\r\n     * Tracing-system-specific info to propagate.\r\n     *\r\n     * The tracestate field value is a `list` as defined below. The `list` is a\r\n     * series of `list-members` separated by commas `,`, and a list-member is a\r\n     * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\r\n     * surrounding `list-members` are ignored. There can be a maximum of 32\r\n     * `list-members` in a `list`.\r\n     * More Info: https://www.w3.org/TR/trace-context/#tracestate-field\r\n     *\r\n     * Examples:\r\n     *     Single tracing system (generic format):\r\n     *         tracestate: rojo=00f067aa0ba902b7\r\n     *     Multiple tracing systems (with different formatting):\r\n     *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE\r\n     */\r\n    traceState?: TraceState;\r\n}\r\n\r\ndeclare enum SpanKind {\r\n    /** Default value. Indicates that the span is used internally. */\r\n    INTERNAL = 0,\r\n    /**\r\n     * Indicates that the span covers server-side handling of an RPC or other\r\n     * remote request.\r\n     */\r\n    SERVER = 1,\r\n    /**\r\n     * Indicates that the span covers the client-side wrapper around an RPC or\r\n     * other remote request.\r\n     */\r\n    CLIENT = 2,\r\n    /**\r\n     * Indicates that the span describes producer sending a message to a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    PRODUCER = 3,\r\n    /**\r\n     * Indicates that the span describes consumer receiving a message from a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    CONSUMER = 4\r\n}\r\n\r\n/**\r\n * Options needed for span creation\r\n */\r\ndeclare interface SpanOptions {\r\n    /**\r\n     * The SpanKind of a span\r\n     * @default {@link SpanKind.INTERNAL}\r\n     */\r\n    kind?: SpanKind;\r\n    /** A span's attributes */\r\n    attributes?: SpanAttributes;\r\n    /** {@link Link}s span to other spans */\r\n    links?: Link[];\r\n    /** A manually specified start time for the created `Span` object. */\r\n    startTime?: TimeInput;\r\n    /** The new span should be a root span. (Ignore parent from context). */\r\n    root?: boolean;\r\n}\r\n\r\ndeclare interface SpanStatus {\r\n    /** The status code of this message. */\r\n    code: SpanStatusCode;\r\n    /** A developer-facing error message. */\r\n    message?: string;\r\n}\r\n\r\n/**\r\n * An enumeration of status codes.\r\n */\r\ndeclare enum SpanStatusCode {\r\n    /**\r\n     * The default status.\r\n     */\r\n    UNSET = 0,\r\n    /**\r\n     * The operation has been validated by an Application developer or\r\n     * Operator to have completed successfully.\r\n     */\r\n    OK = 1,\r\n    /**\r\n     * The operation contains an error.\r\n     */\r\n    ERROR = 2\r\n}\r\n\r\n/**\r\n * A SQL instance can be nested within each other to build SQL strings.\r\n */\r\nexport declare class Sql {\r\n    readonly values: Value[];\r\n    readonly strings: string[];\r\n    constructor(rawStrings: readonly string[], rawValues: readonly RawValue[]);\r\n    get sql(): string;\r\n    get statement(): string;\r\n    get text(): string;\r\n    inspect(): {\r\n        sql: string;\r\n        statement: string;\r\n        text: string;\r\n        values: unknown[];\r\n    };\r\n}\r\n\r\ndeclare interface SqlDriverAdapter extends SqlQueryable {\r\n    /**\r\n     * Execute multiple SQL statements separated by semicolon.\r\n     */\r\n    executeScript(script: string): Promise<void>;\r\n    /**\r\n     * Start new transaction.\r\n     */\r\n    startTransaction(isolationLevel?: IsolationLevel): Promise<Transaction>;\r\n    /**\r\n     * Optional method that returns extra connection info\r\n     */\r\n    getConnectionInfo?(): ConnectionInfo;\r\n    /**\r\n     * Dispose of the connection and release any resources.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport declare interface SqlDriverAdapterFactory extends DriverAdapterFactory<SqlQuery, SqlResultSet> {\r\n    connect(): Promise<SqlDriverAdapter>;\r\n}\r\n\r\ndeclare type SqlQuery = {\r\n    sql: string;\r\n    args: Array<unknown>;\r\n    argTypes: Array<ArgType>;\r\n};\r\n\r\ndeclare interface SqlQueryable extends Queryable<SqlQuery, SqlResultSet> {\r\n}\r\n\r\ndeclare interface SqlResultSet {\r\n    /**\r\n     * List of column types appearing in a database query, in the same order as `columnNames`.\r\n     * They are used within the Query Engine to convert values from JS to Quaint values.\r\n     */\r\n    columnTypes: Array<ColumnType>;\r\n    /**\r\n     * List of column names appearing in a database query, in the same order as `columnTypes`.\r\n     */\r\n    columnNames: Array<string>;\r\n    /**\r\n     * List of rows retrieved from a database query.\r\n     * Each row is a list of values, whose length matches `columnNames` and `columnTypes`.\r\n     */\r\n    rows: Array<Array<unknown>>;\r\n    /**\r\n     * The last ID of an `INSERT` statement, if any.\r\n     * This is required for `AUTO_INCREMENT` columns in databases based on MySQL and SQLite.\r\n     */\r\n    lastInsertId?: string;\r\n}\r\n\r\n/**\r\n * Create a SQL object from a template string.\r\n */\r\nexport declare function sqltag(strings: readonly string[], ...values: readonly RawValue[]): Sql;\r\n\r\n/**\r\n * Defines TimeInput.\r\n *\r\n * hrtime, epoch milliseconds, performance.now() or Date\r\n */\r\ndeclare type TimeInput = HrTime_2 | number | Date;\r\n\r\nexport declare type ToTuple<T> = T extends any[] ? T : [T];\r\n\r\ndeclare interface TraceState {\r\n    /**\r\n     * Create a new TraceState which inherits from this TraceState and has the\r\n     * given key set.\r\n     * The new entry will always be added in the front of the list of states.\r\n     *\r\n     * @param key key of the TraceState entry.\r\n     * @param value value of the TraceState entry.\r\n     */\r\n    set(key: string, value: string): TraceState;\r\n    /**\r\n     * Return a new TraceState which inherits from this TraceState but does not\r\n     * contain the given key.\r\n     *\r\n     * @param key the key for the TraceState entry to be removed.\r\n     */\r\n    unset(key: string): TraceState;\r\n    /**\r\n     * Returns the value to which the specified key is mapped, or `undefined` if\r\n     * this map contains no mapping for the key.\r\n     *\r\n     * @param key with which the specified value is to be associated.\r\n     * @returns the value to which the specified key is mapped, or `undefined` if\r\n     *     this map contains no mapping for the key.\r\n     */\r\n    get(key: string): string | undefined;\r\n    /**\r\n     * Serializes the TraceState to a `list` as defined below. The `list` is a\r\n     * series of `list-members` separated by commas `,`, and a list-member is a\r\n     * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\r\n     * surrounding `list-members` are ignored. There can be a maximum of 32\r\n     * `list-members` in a `list`.\r\n     *\r\n     * @returns the serialized string.\r\n     */\r\n    serialize(): string;\r\n}\r\n\r\ndeclare interface TracingHelper {\r\n    isEnabled(): boolean;\r\n    getTraceParent(context?: Context): string;\r\n    dispatchEngineSpans(spans: EngineSpan[]): void;\r\n    getActiveContext(): Context | undefined;\r\n    runInChildSpan<R>(nameOrOptions: string | ExtendedSpanOptions, callback: SpanCallback<R>): R;\r\n}\r\n\r\ndeclare interface Transaction extends AdapterInfo, SqlQueryable {\r\n    /**\r\n     * Transaction options.\r\n     */\r\n    readonly options: TransactionOptions;\r\n    /**\r\n     * Commit the transaction.\r\n     */\r\n    commit(): Promise<void>;\r\n    /**\r\n     * Roll back the transaction.\r\n     */\r\n    rollback(): Promise<void>;\r\n}\r\n\r\ndeclare namespace Transaction_2 {\r\n    export {\r\n        TransactionOptions_2 as Options,\r\n        InteractiveTransactionInfo,\r\n        TransactionHeaders\r\n    }\r\n}\r\n\r\ndeclare type TransactionHeaders = {\r\n    traceparent?: string;\r\n};\r\n\r\ndeclare type TransactionOptions = {\r\n    usePhantomQuery: boolean;\r\n};\r\n\r\ndeclare type TransactionOptions_2 = {\r\n    maxWait?: number;\r\n    timeout?: number;\r\n    isolationLevel?: IsolationLevel;\r\n};\r\n\r\ndeclare type TransactionOptions_3<InteractiveTransactionPayload> = {\r\n    kind: 'itx';\r\n    options: InteractiveTransactionOptions<InteractiveTransactionPayload>;\r\n} | {\r\n    kind: 'batch';\r\n    options: BatchTransactionOptions;\r\n};\r\n\r\nexport declare class TypedSql<Values extends readonly unknown[], Result> {\r\n    [PrivateResultType]: Result;\r\n    constructor(sql: string, values: Values);\r\n    get sql(): string;\r\n    get values(): Values;\r\n}\r\n\r\nexport declare type TypeMapCbDef = Fn<{\r\n    extArgs: InternalArgs;\r\n}, TypeMapDef>;\r\n\r\n/** Shared */\r\nexport declare type TypeMapDef = Record<any, any>;\r\n\r\ndeclare type TypeRef<AllowedLocations extends FieldLocation> = {\r\n    isList: boolean;\r\n    type: string;\r\n    location: AllowedLocations;\r\n    namespace?: FieldNamespace;\r\n};\r\n\r\ndeclare namespace Types {\r\n    export {\r\n        Result_3 as Result,\r\n        Extensions_2 as Extensions,\r\n        Utils,\r\n        Public_2 as Public,\r\n        isSkip,\r\n        Skip,\r\n        skip,\r\n        UnknownTypedSql,\r\n        OperationPayload as Payload\r\n    }\r\n}\r\nexport { Types }\r\n\r\ndeclare type uniqueIndex = ReadonlyDeep_2<{\r\n    name: string;\r\n    fields: string[];\r\n}>;\r\n\r\ndeclare type UnknownErrorParams = {\r\n    clientVersion: string;\r\n    batchRequestIdx?: number;\r\n};\r\n\r\nexport declare type UnknownTypedSql = TypedSql<unknown[], unknown>;\r\n\r\ndeclare type Unpacker = (data: any) => any;\r\n\r\nexport declare type UnwrapPayload<P> = {} extends P ? unknown : {\r\n    [K in keyof P]: P[K] extends {\r\n        scalars: infer S;\r\n        composites: infer C;\r\n    }[] ? Array<S & UnwrapPayload<C>> : P[K] extends {\r\n        scalars: infer S;\r\n        composites: infer C;\r\n    } | null ? S & UnwrapPayload<C> | Select<P[K], null> : never;\r\n};\r\n\r\nexport declare type UnwrapPromise<P> = P extends Promise<infer R> ? R : P;\r\n\r\nexport declare type UnwrapTuple<Tuple extends readonly unknown[]> = {\r\n    [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>;\r\n};\r\n\r\n/**\r\n * Input that flows from the user into the Client.\r\n */\r\ndeclare type UserArgs_2 = any;\r\n\r\ndeclare namespace Utils {\r\n    export {\r\n        EmptyToUnknown,\r\n        NeverToUnknown,\r\n        PatchFlat,\r\n        Omit_2 as Omit,\r\n        Pick_2 as Pick,\r\n        ComputeDeep,\r\n        Compute,\r\n        OptionalFlat,\r\n        ReadonlyDeep,\r\n        Narrowable,\r\n        Narrow,\r\n        Exact,\r\n        Cast,\r\n        Record_2 as Record,\r\n        UnwrapPromise,\r\n        UnwrapTuple,\r\n        Path,\r\n        Fn,\r\n        Call,\r\n        RequiredKeys,\r\n        OptionalKeys,\r\n        Optional,\r\n        Return,\r\n        ToTuple,\r\n        RenameAndNestPayloadKeys,\r\n        PayloadToResult,\r\n        Select,\r\n        Equals,\r\n        Or,\r\n        JsPromise\r\n    }\r\n}\r\n\r\ndeclare function validator<V>(): <S>(select: Exact<S, V>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation>(client: C, model: M, operation: O): <S>(select: Exact<S, Args<C[M], O>>) => S;\r\n\r\ndeclare function validator<C, M extends Exclude<keyof C, `$${string}`>, O extends keyof C[M] & Operation, P extends keyof Args<C[M], O>>(client: C, model: M, operation: O, prop: P): <S>(select: Exact<S, Args<C[M], O>[P]>) => S;\r\n\r\n/**\r\n * Values supported by SQL engine.\r\n */\r\nexport declare type Value = unknown;\r\n\r\nexport declare function warnEnvConflicts(envPaths: any): void;\r\n\r\nexport declare const warnOnce: (key: string, message: string, ...args: unknown[]) => void;\r\n\r\nexport { }\r\n",
        "node_modules/.prisma/client/wasm.d.ts": "export * from \"./index\"",
        "node_modules/@prisma/client/index.d.ts": "export * from '.prisma/client/default'"
      },
      "document": "# Prisma Markdown\n\n> Generated by [`prisma-markdown`](https://github.com/samchon/prisma-markdown)\n\n- [Core](#core)\n- [DiscussionBoard](#discussionboard)\n- [Comments](#comments)\n- [Interaction](#interaction)\n- [Moderation](#moderation)\n- [Notification](#notification)\n- [Admin](#admin)\n\n## Core\n\n```mermaid\nerDiagram\n\"discussionboard_user\" {\n  String id PK\n  String email UK\n  String password_hash\n  Boolean is_active\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussionboard_user_profile\" {\n  String id PK\n  String user_id FK,UK\n  String display_name\n  String(80000) avatar_url \"nullable\"\n  String bio \"nullable\"\n}\n\"discussionboard_member\" {\n  String id PK\n  String user_id FK,UK\n  DateTime granted_at\n}\n\"discussionboard_moderator\" {\n  String id PK\n  String user_id FK,UK\n  DateTime assigned_at\n}\n\"discussionboard_admin\" {\n  String id PK\n  String user_id FK,UK\n  DateTime assigned_at\n}\n\"discussionboard_user_profile\" |o--|| \"discussionboard_user\" : user_profile_user_id\n\"discussionboard_member\" |o--|| \"discussionboard_user\" : member_user_id\n\"discussionboard_moderator\" |o--|| \"discussionboard_user\" : moderator_user_id\n\"discussionboard_admin\" |o--|| \"discussionboard_user\" : admin_user_id\n```\n\n### `discussionboard_user`\n\n[User Master Record] - This implements the foundational user management requirement noted in the requirements analysis (02_discussionboard_functional_requirements.md Section 3.1: User Registration & Authentication). \n\nThis model captures core authentication and identity data for all discussion board participants—regardless of role (member, moderator, admin). Maintains strict 3NF compliance by isolating authentication data (email, credential info, status) from profile and role specialization, preventing duplication or transitive dependencies. For example, all roles reference this entity, and profile/details are managed in separate tables.\n\nKey relationships: Links 1:1 to discussionboard_user_profile. Related 1:N with role specializations (member/moderator/admin), posts, comments, and all historical user actions.\nSpecial behaviors: Only one email per user. Role management handled via join/role specialization tables. Soft deactivation supported by 'is_active' flag.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Globally unique identifier for the user. Implements the requirements for traceable, referential user identity across all core tables (see 02_discussionboard_functional_requirements.md). 3NF enforced as surrogate key. For example, all foreign key relationships use this for core user reference.\n- `email`: [Authentication Email] - Implements unique login credential per user requirement. Business meaning: Used for login, notifications, and password recovery. Ensures normalization by existing only on user root entity and not duplicated elsewhere. Enforced unique constraint. E.g., user login process.\n- `password_hash`: [Password Hash] - Securely stores password hash for authentication workflow per 02_discussionboard_functional_requirements.md. Ensures separation from credential-independent profile info. Used for login verification.\n- `is_active`: [Active Status] - Tracks whether the user account is enabled or deactivated (requirement: Admin can deactivate). Normalization: not duplicated elsewhere. For account suspension procedures.\n- `created_at`: [Creation Timestamp] - When user joined. Required for audit and analytics (see success criteria in 01_discussionboard_overview_and_scope.md). Used in user growth/activation KPIs.\n- `updated_at`: [Last Update Timestamp] - Business: Audit and admin review. Ensures clean separation—no transitive dependency.\n\n### `discussionboard_user_profile`\n\n[User Profile] - Implements user display/personalization requirements (02_discussionboard_functional_requirements.md, 3.1) distinct from root authentication. Holds display name, optional avatar, and bio—strictly 3NF as contact details, credentials, role, and settings are elsewhere. Used for member directories, post attributions, notifications.\n\nKey relationships: 1:1 with discussionboard_user (foreign key = unique). Not duplicated in role tables.\nSpecial behaviors: 1:1 uniqueness enforced. All user display data (NOT used for authentication).\n\nProperties as follows:\n\n- `id`: [Primary Key] - Globally unique identifier for the profile. Surrogate key for normalization. Ensures all profile retrieval and modifications are auditable.\n- `user_id`: [Foreign Key: discussionboard_user] - User this profile belongs to. Implements 1:1 user-profile relationship (requirement: one profile per account, never duplicated). Enforces normalization. E.g., to get profile when showing post author.\n- `display_name`: [Display Name] - User's chosen name, shown publicly on posts/comments. Not used for authentication. Maintains 3NF by separating identity from credential tables. E.g., 'JohnDoe'.\n- `avatar_url`: [Avatar Image] - Optional user image link. Not duplicated anywhere. Maintains normalized structure. Used on post lists/user bios.\n- `bio`: [User Bio] - Self-description or background, used on profiles/mouseover displays. Normalization: No business logic outside of display.\n\n### `discussionboard_member`\n\n[Member Role] - Implements domain model for general user participation rights (see user roles in 03_discussionboard_user_roles_and_permissions.md and participation requirements in 02_discussionboard_functional_requirements.md 3.2-3.4). This captures all accounts with base-level actions (posting, commenting, liking). All users with platform presence are members. 3NF: Only stores role-specific facts, no credential/profile fields duplicated.\n\nKey relationships: 1:1 with discussionboard_user. Related 1:N to posts, comments, likes, reports. Role is atomic, all privileges via explicit role presence.\nSpecial behaviors: Role assignment/demotion flows strictly auditable via foreign key.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Each member has a dedicated, globally unique role assignment entry for traceability (even if admin or moderator). Enforces 3NF by using only a surrogate key.\n- `user_id`: [Foreign Key: discussionboard_user] - Account assigned this member role. Enforces 1:1 mapping, not duplicated for other roles. Needed for permissions matrix. E.g., to check if a user can create posts.\n- `granted_at`: [Membership Grant Timestamp] - When membership began. Required for audits, demotions, or calculating active duration. Maintains third normal form by not holding user or credential data.\n\n### `discussionboard_moderator`\n\n[Moderator Role] - Implements elevated moderator assignment for trusted members, referencing business rules in 03_discussionboard_user_roles_and_permissions.md and moderation functions in 02_discussionboard_functional_requirements.md 3.5. Only users explicitly assigned this role are allowed moderation tools. 3NF-preserving: only stores moderator-specific info (no duplication of credentials/profile).\n\nKey relationships: 1:1 to discussionboard_user (atomic assignment). Related 1:N to reports, moderation actions.\nSpecial behaviors: Grant/revoke flows auditable. All permission checks cleanly reference this mapping.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Unique identifier for moderator role assignment. Enforces traceability, audit, and clean separation. Used for all moderator-level permission checks.\n- `user_id`: [Foreign Key: discussionboard_user] - User granted moderator authority (must also be a member). 1:1 constraint by unique index. Never duplicated nor nullable. E.g., lookup for report review access.\n- `assigned_at`: [Moderator Grant Timestamp] - When moderator role was assigned. Auditing and compliance for all moderator promotions. Normalization: Never holds non-moderator info.\n\n### `discussionboard_admin`\n\n[Admin Role] - Implements system administrator privilege assignment as per 03_discussionboard_user_roles_and_permissions.md and 02_discussionboard_functional_requirements.md (platform-wide management, user promotion/role reassignment). All platform-wide permissions are checked against this table. 3NF-compliant: only houses admin assignment data, never duplicates user or moderator/member details.\n\nKey relationships: 1:1 to discussionboard_user; referenced when determining admin dashboard/settings access. All permission checks reference this mapping.\nSpecial behaviors: Admin can demote/promote all other roles. Auditing via assignment timestamps. No transitive/admin details outside this entry.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Surrogate key for admin role assignment. Allows auditing/change tracking for all promotions/demotions. Clean, normalized design.\n- `user_id`: [Foreign Key: discussionboard_user] - User assigned admin authority. Enforced 1:1 by unique index, not nullable. 3NF: Never duplicated.\n- `assigned_at`: [Admin Assignment Timestamp] - When the admin role was assigned; fulfills trace and change-audit requirements for privileged role escalation. Normalized by excluding non-admin details.\n\n## DiscussionBoard\n\n```mermaid\nerDiagram\n\"discussionboard_post\" {\n  String id PK\n  String author_member_id FK\n  String category_id FK\n  String title\n  String body\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussionboard_post_category\" {\n  String id PK\n  String name UK\n  String description \"nullable\"\n}\n\"discussionboard_post_tag\" {\n  String id PK\n  String name UK\n}\n\"discussionboard_post_attachment\" {\n  String id PK\n  String post_id FK\n  String(80000) file_url\n  String file_type\n  DateTime uploaded_at\n}\n\"discussionboard_post\" }o--|| \"discussionboard_post_category\" : category\n\"discussionboard_post_attachment\" }o--|| \"discussionboard_post\" : post\n```\n\n### `discussionboard_post`\n\n[Discussion Posts] - Implements Sections 3.2 (Creating & Managing Posts) and 3.1 (User Registration & Authentication) as detailed in the requirements (02_discussionboard_functional_requirements.md).\n\nStores the main discussion board contributions (posts), tracking author, category, creation/edit timestamps, and supports soft deletion. Ensures strict 3NF: posts do not contain redundant author or category data, referencing normalized member and category tables instead. Usage example: a post about economic policy references its author (member) and its category (e.g., 'Economics') without duplicating user/category info.\n\nKey relationships: discussionboard_member (author), discussionboard_post_category (category), attachments, tags, etc. Special behaviors: soft-delete is tracked via deleted_at; author/category FKs are required and not nullable.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Unique identifier for each post as mandated for atomic access and historical auditing (Section 3.2).\n- `author_member_id`: [Author Member FK] - References the member authoring the post (see Section 3.2 in requirements). Maintains normalization by only referencing the member, not duplicating member data. E.g., used for showing all posts by a member.\n- `category_id`: [Category FK] - Associates post with a category (Section 3.2). Provides link to normalized category without duplication of data. E.g., 'Politics' or 'Economics'.\n- `title`: [Post Title] - Implements discussion title per Section 3.2. Used for search/listings. Always non-null, atomic text.\n- `body`: [Post Content Body] - Main text body, supports formatting. Fully normalized; not nullable.\n- `created_at`: [Creation Timestamp] - Records when the post was made (Section 3.2, 3.9).\n- `updated_at`: [Update Timestamp] - Last time this post was edited (Section 3.2). Used for audit/versioning display.\n- `deleted_at`: [Deleted Timestamp] - Soft-deletion timestamp if post is hidden/deleted by member or moderator. Nullable if not deleted.\n\n### `discussionboard_post_category`\n\n[Discussion Post Categories] - Implements Section 3.2 and 3.6 (Admin). Categories like 'Politics' or 'Economics'—referenced by posts, maintained separately for normalization. Usage: admins manage categories; posts always reference a category. Special: cannot delete if referenced by a post.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Uniquely identifies category; normalization ensures only atomic references used.\n- `name`: [Category Name] - Per Section 3.2; e.g., 'Economics'. Used for filters/views. Unique and non-null.\n- `description`: [Category Description] - Extended human-readable info for admin/member UIs. Optional, normalized.\n\n### `discussionboard_post_tag`\n\n[Discussion Post Tags] - Implements tagging per Section 3.2 to enable content filtering/search without denormalization. Each tag is stored atomically and referenced by M:N join (not included here). E.g., post tagged 'inflation'. Usage: tag table ensures uniqueness; pure key-name pairs only.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Unique atomic tag identity.\n- `name`: [Tag Name] - Required label, e.g. 'inflation'. Uniqueness enforced; normalized/atomic.\n\n### `discussionboard_post_attachment`\n\n[Post Attachments] - Implements file/image management for posts (Section 3.2). Each attachment references one post, with file URL/type metadata. Maintains normalization with atomic URI/type; all files managed outside main post record; supports cascading delete on post removal.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Unique attachment identity for tracking and referencing.\n- `post_id`: [Post FK] - Attachment's parent post (Section 3.2). Referenced (not duplicated) for strict normalization. Cascades on post delete.\n- `file_url`: [Attachment File URL] - Atomic URI (e.g., https://cdn.site/file.jpg). Required.\n- `file_type`: [Attachment MIME Type] - e.g. 'image/jpeg'. Required; normalized for filters.\n- `uploaded_at`: [Upload Timestamp] - Required point-in-time, supporting audit and ordering.\n\n## Comments\n\n```mermaid\nerDiagram\n\"discussionboard_comments\" {\n  String id PK\n  String post_id FK\n  String author_id FK\n  String parent_comment_id FK \"nullable\"\n  String content\n  Boolean is_edited\n  Boolean is_deleted\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussionboard_comments\" }o--o| \"discussionboard_comments\" : parent_comment\n```\n\n### `discussionboard_comments`\n\n[Comment Model] - This implements the comment functionality as outlined under functional requirements (sections 3.3, 3.4, 3.5) and supports threaded/nested comments for both 'Politics' and 'Economics' board categories. \n\nAllows users to participate in ongoing discussions by adding, editing, and deleting their own comments, with support for threaded conversations, reporting, moderation, and in-line engagement (likes). Maintains 3NF by separating this entity from users, posts, likes, and reports. For example, a user can comment on a post, reply to other comments (recursively), and have their comment moderated or reported independently. \n\nKey relationships: Links to posts, users (authors), and parent comment (if threaded). Supports foreign keys to reporting, moderation, and liking mechanisms in other models.\nSpecial behaviors: Enforces only one parent per comment for tree structure, supports soft deletion, and maintains a precise audit trail without any pre-calculated metrics.\n\nProperties as follows:\n\n- `id`\n  > [Comment Primary Key] - Implements the unique identification (see 3NF and requirements mapping).\n  >\n  > Globally unique identifier for each comment. Ensures 1NF uniqueness, enables precise referencing, and guarantees auditability and traceability across threads and moderation actions.\n- `post_id`\n  > [Foreign Key: Post] - Implements the post-comment linkage as per requirement 3.3.\n  >\n  > Associates each comment with its parent post (mandatory). Ensures 2NF by linking to the full post entity, not duplicating post info. For example, when displaying a comment, the app can show the related post's category or title.\n- `author_id`\n  > [Foreign Key: Author] - Implements comment authorship per requirements 3.3, 3.4.\n  >\n  > Links the comment directly to its user (author). Maintains normalization by not storing author details redundantly; user details are referenced via foreign key.\n- `parent_comment_id`\n  > [Foreign Key: Parent Comment] - Supports threaded/reply comments as per 3.3.\n  >\n  > Self-referential link for comment thread nesting (optional; null for root-level comments). Maintains normalization by linking only to one parent, supporting recursive conversation trees without redundancy.\n- `content`\n  > [Comment Content] - Implements actual user message storage per requirement 3.3.\n  >\n  > Holds the content/message of the comment. Ensures normalization by storing only the user's entry, not derived or precomputed data. For example, users can edit this field within role constraints. No denormalized summary or rendering is stored in regular tables.\n- `is_edited`\n  > [Edit Tracking Flag] - Supports edit-audit functionality per requirement 3.3 (editing own comments).\n  >\n  > Boolean indicating whether comment content has been modified since creation. Ensures normalization by storing only atomic edit status; edit history belongs in a separate snapshot/audit table if needed.\n- `is_deleted`\n  > [Soft Delete Flag] - Enables reversible deletion per 3.3 and moderation (3.5).\n  >\n  > Flags comments as deleted (soft) without actual removal from database. Supports auditability and role-based recovery, ensuring no information loss for moderation history.\n- `created_at`\n  > [Creation Timestamp] - Records when the comment was posted (requirements 3.3, 3.9).\n  >\n  > Stores creation time of the comment. Ensures normalization as an atomic, non-derived value, and provides audit trail foundation.\n- `updated_at`\n  > [Last Update Timestamp] - Tracks edits, moderation actions as in 3.3, 3.5, 3.9.\n  >\n  > Records latest update timestamp (edit, moderation, recovery, etc). Maintains audit and traceability without derived/polyglot aggregates.\n\n## Interaction\n\n```mermaid\nerDiagram\n\"discussionboard_likes\" {\n  String id PK\n  String user_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  DateTime created_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussionboard_reports\" {\n  String id PK\n  String user_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String reason_code\n  String reason_details \"nullable\"\n  DateTime created_at\n  DateTime deleted_at \"nullable\"\n}\n```\n\n### `discussionboard_likes`\n\nUser Content Like - This implements the user engagement and interaction requirements (see sections 3.4 and 3.8 of the requirements analysis).\n\nEnables the platform’s core like/voting system, allowing users to like posts or comments once, supporting quantifiable content popularity and user involvement. Maintains strict 3NF normalization by separating atomic like events, with no aggregate/calculated fields present. For example, when a user clicks 'like' on a post, a record is created here, which can later be used for denormalized like counts in mv_ tables only.\n\nKey relationships: references to both posts and comments for polymorphic liking, user reference, and indexes support multi-content type lookups.\nSpecial behaviors: Uniqueness enforced so a user may only like a given post OR comment once, but not both at once (polymorphic uniqueness). All deletions are soft-deletes for audit/compliant removal tracking.\n\nProperties as follows:\n\n- `id`: Primary Key - Implements entity uniqueness. Each like interaction is uniquely identified for precise auditing and event tracking.\n- `user_id`: User Foreign Key - Implements user traceability for interaction, mapping to discussionboard_user. Ensures which member created this like. For example, required when listing personal likes. Not nullable/required.\n- `post_id`: Polymorphic Foreign Key: Post - Implements which post the like is attached to (where applicable), mapping to discussionboard_post. NULL if the like is for a comment. Enforces atomic association. For example, a user clicking like on a post will set this field. Nullable for polymorphism.\n- `comment_id`: Polymorphic Foreign Key: Comment - Implements comment interaction scope, mapping to discussionboard_comments. NULL if the like is for a post. For example, liking a comment sets this field. Supports normalization and polymorphic association.\n- `created_at`: Creation Timestamp - Implements requirement for auditable, timestamped actions. When the like event was created. Ensures atomicity by being non-null and standard across events.\n- `deleted_at`: Soft-delete Timestamp - Enables reversible removal of like event in compliance with audit logging. Null if like is active, set if removed. Maintains normalization; never used as a logical indicator, only as an event timestamp.\n\n### `discussionboard_reports`\n\nUser Content Report - This implements abuse/spam reporting requirements from sections 3.4, 3.5, 3.6, and 3.9.\n\nAllows users to report specific posts or comments for guideline violations, abuse, or spam. Maintains 3NF normalization by capturing only atomic reporting events (no report counts or summaries in table). For example, when a user flags a comment or post for review, a record is created here, with reason captured, for review by moderators/admins via reporting tools.\n\nKey relationships: references user (reporter), post (or comment), and enables polymorphic targeting of reports. Moderation actions are maintained elsewhere. Enforces business rules for no duplicate reports from the same user for the same content and logs reporting context for trace/audit.\nSpecial behaviors: Uniqueness constraints prevent double-reporting by same user per content type. Deletions are soft-deletes for compliance and history retention.\n\nProperties as follows:\n\n- `id`: Primary Key - Uniquely identifies each report for compliance, auditing, moderation, and traceability.\n- `user_id`: Reporter Foreign Key - References the user (from discussionboard_user) who submitted the report. Maintains accountability and supports user-based moderation analytics. Not nullable; always required.\n- `post_id`: Polymorphic Foreign Key: Post - Identifies the post that is being reported (if applicable). NULL if report targets a comment. Ensures correct, strictly normalized associativity, and prevents overlap with comment_id.\n- `comment_id`: Polymorphic Foreign Key: Comment - Identifies the comment being reported (if any). NULL if post is targeted. Supports polymorphic reporting of both content types. Enforces correct normalization.\n- `reason_code`: Short Reason Code - Implements requirements for capturing structured event context (e.g. 'spam', 'abuse', 'off-topic'). Enables filtering and workflow logic. Follows a pre-set value list handled in application/business logic. 3NF maintained as reason text is never duplicated (codes only here).\n- `reason_details`: Detailed Reason (optional) - Implements reporting context capture for case auditing, moderation analytics, and transparency. Allows user to enter details or evidence. Nullable for cases where only the code is needed.\n- `created_at`: Report Creation Timestamp - Indicates when the report was made. Implements audit trail (requirement: 3.9 and moderation review within 24hr SLA). Non-null, ensures each report is audited with precise event time.\n- `deleted_at`: Soft-delete Timestamp - Enables soft-removal (not physical deletion) of reports for moderation or review compliance. Null if active, non-null when deleted. Ensures normalization and auditable workflow.\n\n## Moderation\n\n```mermaid\nerDiagram\n\"discussionboard_moderation_action\" {\n  String id PK\n  String actor_id FK\n  String target_user_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String action_type\n  String reason\n  DateTime created_at\n}\n\"discussionboard_report_review\" {\n  String id PK\n  String report_id FK,UK\n  String reviewer_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String review_status\n  String moderator_comment \"nullable\"\n  DateTime reviewed_at\n}\n\"discussionboard_warning\" {\n  String id PK\n  String issued_by_id FK\n  String issued_to_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String warning_type\n  String message\n  DateTime issued_at\n}\n\"discussionboard_ban\" {\n  String id PK\n  String banned_user_id FK\n  String banned_by_id FK\n  String warning_id FK \"nullable\"\n  String ban_type\n  String reason\n  DateTime issued_at\n  DateTime expires_at \"nullable\"\n}\n\"discussionboard_ban\" }o--o| \"discussionboard_warning\" : related_warning\n```\n\n### `discussionboard_moderation_action`\n\n[Moderation Actions Log] - This implements the moderation action audit requirement from the requirements documentation (sections 02.3.5, 02.3.6, and 03).\nRecords every direct moderation activity such as hide, delete, warning issuance, and user muting/ban performed by moderators or admins. Maintains 3NF compliance by referencing target users, actions, posts, and comments instead of duplicating their data. For example, every time a moderator deletes a post or issues a warning, a new record is created here linking who did what, to which item, and why.\nKey relationships: links to moderator/admin (actor), target user, affected post/comment (if applicable).\nSpecial behaviors: strictly append-only (no updates); supports complete audit trail of moderation interventions.\n\nProperties as follows:\n\n- `id`: [Primary key] - Standard internal identifier. Uniquely identifies each moderation action; ensures atomic representation of each occurrence.\n- `actor_id`: [Action originator] - Implements the 'who performed the action' requirement. References the moderator or admin user account executing the moderation. Ensures normalization by linking to user, not duplicating actor data. For example, when moderator #1234 deletes a comment, this field is #1234.\n- `target_user_id`: [User targeted] - Fulfills the 'target of moderation' tracking requirement. Links to the affected user account (e.g., reported member). Ensures single source of truth for user data and enables traceability. For example, for a ban of user X, this references user X.\n- `post_id`: [Affected post] - Implements moderation linkage for post-level actions. References the post if this action affects a specific post. Normalization preserved (nullable, as not all actions are post-related). For example, deleting a post links here; issuing a ban does not.\n- `comment_id`: [Affected comment] - Moderation linkage to comment. References the comment if the action is on a specific comment. Kept nullable to preserve 3NF and flexibility. For example, hiding a comment references its id here.\n- `action_type`: [Action type] - Implements requirement to enumerate distinct moderation activities. Type of moderation: e.g., 'delete_post', 'hide_comment', etc. Maintains normalization.\n- `reason`: [Reason] - Fulfills rationale for moderation. Stores moderator/admin's reason/comment. Ensures accountability, searchable, used for appeals.\n- `created_at`: [Timestamp] - Implements time-based audit tracking. True creation time of the action record, guarantees traceability.\n\n### `discussionboard_report_review`\n\n[Report Review Log] - Implements requirements for moderation report review workflow (sections 02.3.4, 02.3.5, 03).\nTracks moderator or admin handling of user-submitted reports on posts/comments. Maintains 3NF by referencing report, reviewer, affected post/comment, and action taken. For example, when a moderator reviews a reported post and marks it as 'resolved,' a record is created here linking to all relevant entities.\nKey relationships: links to the report, reviewer, optionally post/comment.\nSpecial behaviors: append-only, supports full reporting workflow and audit.\n\nProperties as follows:\n\n- `id`: [Primary key] - Unique identifier for report reviews.\n- `report_id`: [The report being reviewed] - Links to a specific user report for moderation review.\n- `reviewer_id`: [Moderator/admin reviewer] - References user carrying out the review.\n- `post_id`: [Reviewed post] - Links reviewed post, nullable because not all reports are about posts.\n- `comment_id`: [Reviewed comment] - Links reviewed comment, nullable because not all reports are about comments.\n- `review_status`: [Outcome status] - Status for reviewed reports: e.g., 'resolved', 'rejected', 'pending'.\n- `moderator_comment`: [Review notes] - Optional comments from reviewer.\n- `reviewed_at`: [Review timestamp] - Auditable time of moderation review.\n\n### `discussionboard_warning`\n\n[Warnings Issued Log] - Implements moderator warning history per requirements (sections 02.3.5, 02.3.6, 03).\nStores warnings given by moderators/admins to users for guideline-violating behavior. Maintains 3NF by linking recipient, issuer, and optionally the relevant post/comment. For example, when a moderator issues a warning for an offensive comment, that instance is logged here.\nKey relationships: issued_by (moderator/admin), issued_to (target user), post/comment (context, nullable).\nSpecial behaviors: historical only (warnings are never updated, only issued).\n\nProperties as follows:\n\n- `id`: [Primary key] - Globally unique identifier of each warning.\n- `issued_by_id`: [Issuer] - Moderator/admin user issuing the warning.\n- `issued_to_id`: [Recipient] - User who receives the warning.\n- `post_id`: [Related post] - Cause for warning (optional, nullable).\n- `comment_id`: [Related comment] - Cause for warning (optional, nullable).\n- `warning_type`: [Type of warning] - Categorical reason: e.g., 'abuse', 'spam', etc.\n- `message`: [Moderator message] - Human-explained rationale.\n- `issued_at`: [Issue timestamp] - The date/time warning was given.\n\n### `discussionboard_ban`\n\n[User Ban Log] - This model realizes the user suspension/ban requirements (sections 02.3.5, 02.3.6, 03).\nRecords every instance of an account being banned or muted, whether temporarily or permanently, by moderator/admin decision. Maintains 3NF by relating only to ban actors and affected users, no calculated ban metrics.\nKey relationships: 'banned_by_id' (moderator/admin), 'banned_user_id' (target member), warning reference for context, no circular dependencies.\nSpecial behaviors: all bans are point-in-time records, may be queried for active status by expiry date.\n\nProperties as follows:\n\n- `id`: [Primary key] - Unique ban instance ID; ensures each ban/mute event is singular and traceable.\n- `banned_user_id`: [Banned user] - Who is subjected to the ban/mute, referencing the user entity.\n- `banned_by_id`: [Moderator/admin] - Initiating user performing the ban/mute.\n- `warning_id`: [Related warning] - Optionally reference a specific prior warning that resulted in the ban/mute.\n- `ban_type`: [Ban type] - Type category; e.g., 'mute', 'temp_ban', 'perm_ban', etc.\n- `reason`: [Ban reason] - Human-entered explanation for audit, traceability, and user appeals.\n- `issued_at`: [Ban start time] - When ban was placed.\n- `expires_at`: [Ban expiry] - When unban occurs (nullable for permanent bans).\n\n## Notification\n\n```mermaid\nerDiagram\n\"discussionboard_notification\" {\n  String id PK\n  String recipient_user_id FK\n  String related_post_id FK \"nullable\"\n  String related_comment_id FK \"nullable\"\n  String actor_user_id FK \"nullable\"\n  String type\n  String message\n  Boolean is_read\n  DateTime created_at\n}\n\"discussionboard_notification_preference\" {\n  String id PK\n  String user_id FK,UK\n  Boolean notify_reply\n  Boolean notify_like\n  Boolean notify_moderator_action\n  Boolean notify_system_message\n}\n```\n\n### `discussionboard_notification`\n\n[Notification delivery and history] - This implements the 'User Notifications' and system-triggered alert requirements from the functional requirements (Section 3.7).\n\nThis table records each notification sent to users (members, moderators, admins) regarding activity on posts, comments, moderator actions, and system events. Maintains full normalization (3NF) by storing atomic notification data and strictly referencing user and activity entities. For example, when a user receives a reply to their comment or a moderator action on their post, a new record is created here and references the relevant entities.\n\nKey relationships: References recipient user ([discussionboard_user](#discussionboard_user)), optional linkage to post ([discussionboard_post](#discussionboard_post)) or comment ([discussionboard_comments](#discussionboard_comments)), and moderator/admin actor when relevant. \nSpecial behaviors: Supports targeting individual users; system messages have nullable activity references. All user/system notifications are auditable. No denormalized or calculated fields.\n\nProperties as follows:\n\n- `id`: [Primary key] - Implements unique identification of each notification. Ensures atomic records. For example, used to reference or audit notification events.\n- `recipient_user_id`: [Notification recipient] - Implements which user receives the notification, mapped to requirements for personalized notifications. For example, used to display notifications on user dashboard. Normalization: ensures recipient is atomically referenced and avoids denormalization. REQUIRED.\n- `related_post_id`: [Related post] - Associates notification with a post if applicable (e.g., reply, like on post). Fully normalized by optional reference. For example, used when notifying about replies or moderation of a post.\n- `related_comment_id`: [Related comment] - Associates notification with a comment if applicable (e.g., reply to comment, moderation). Normalized as optional reference. For example, used for notifications about comment mentions.\n- `actor_user_id`: [Notification actor/user] - (Optional) The user who triggered this notification (e.g., who liked/commented, moderator/admin who performed action). If the event is system-triggered, this is null. For example, used for 'X replied to your post.' Ensures actor is atomically referenced, prevents denormalization.\n- `type`: [Notification type] - Classifies the type of notification in accordance with Section 3.7's events (e.g., 'reply', 'like', 'moderator_action', 'system_message', etc.). Fully normalized. For example, enables UI filtering and template selection. Constraint: limited to allowed notification types via application logic.\n- `message`: [Notification body] - Human-readable message content sent to user. Implements functional requirement for notifications to explain events. Maintains normalization by storing only atomic message text; templates and aggregation are managed elsewhere. For example, 'Alice replied to your post.'\n- `is_read`: [Read/unread flag] - Tracks whether the notification has been marked as read by the recipient, as required by notification preference and in-app UX. Normalized as a pure flag. For example, unread messages appear in notification dropdown. Constraint: only toggled by recipient.\n- `created_at`: [Notification creation time] - Implements audit and sorting requirements for notification recency. Ensures full normalization; atomic timestamp. For example, used to order notifications in UI and for cleanup logic.\n\n### `discussionboard_notification_preference`\n\n[User notification preferences] - Implements the notification preference system specified in requirements Section 3.7, giving users fine-grained control over what notifications they receive and how. All data is fully normalized.\n\nBusiness purpose: Enables per-user customization (mute, enable, push preference, etc.) for different notification types and channels. For example, a member might mute 'like' notifications but enable 'moderator_action' notifications on mobile.\n\nTechnical context: Direct link to each user ([discussionboard_user](#discussionboard_user)), with one row per user (enforced by a unique constraint). No denormalization.\n\nUsage example: Used when generating notifications or respecting user muting/settings for different event types.\n\nSpecial behaviors: All boolean flags, atomic, fully normalized. No computed columns.\n\nProperties as follows:\n\n- `id`: [Primary key] - Implements unique identification for each user's notification preference record. Normalized; required for foreign key relationships and referencing.\n- `user_id`\n  > [User owning preferences] - Implements one-to-one mapping from user to notification preferences, as required by the per-user customization use case. Fully normalized: enforced by unique constraint. For example, fetching preferences when user changes settings. Enforces referential integrity; on user deletion, preference row is cleaned up.\n  >\n  > Special behavior: unique per user.\n- `notify_reply`: [Reply notification toggle] - User's option to receive notifications about direct replies. Implements user preference granularity requirement. For example, if false, the user does not get reply-related notifications. Fully normalized, no calculation.\n- `notify_like`: [Like notification toggle] - User's choice to receive/not receive notifications when their post or comment is liked. Maintains normalization. Example: toggling off keeps the user from being notified for likes.\n- `notify_moderator_action`: [Moderator action notification toggle] - Implements ability for users to be alerted when a moderator acts on their content. Normalization ensured. For example, disables notifications for moderation unless true.\n- `notify_system_message`: [System message notification toggle] - Whether user receives platform-wide messages or announcements. Normalization ensured. For example, used for site policy change notifications.\n\n## Admin\n\n```mermaid\nerDiagram\n\"discussionboard_audit_log\" {\n  String id PK\n  String actor_user_id FK\n  String target_user_id FK \"nullable\"\n  String action_type\n  String entity_type\n  String entity_id \"nullable\"\n  String action_detail \"nullable\"\n  DateTime created_at\n}\n\"discussionboard_platform_setting\" {\n  String id PK\n  String name UK\n  String value\n  String type\n  DateTime updated_at\n}\n```\n\n### `discussionboard_audit_log`\n\n[Audit Logging for Sensitive Actions] - This implements the audit logging and traceability requirements from the user management and security sections, specifically from 'Audit Logging' in the User Roles & Permissions and 'Access & Security' in the Functional Requirements documents. \n\nAllows full traceability and accountability across admin and privileged actions (e.g., role changes, bans, moderation actions). Maintains full 3NF normalization by separating audit trail details from direct business data, storing only atomic data and foreign key references. For example, every time a ban is issued, or a user changes role, an entry is created here independently of the action's core data tables.\n\nKey relationships: references the user (actor) performing the action, the affected user (target), and provides linkage via entity_type/entity_id for polymorphic connections to the target business object. \nSpecial behaviors: Should be written only by internal privileged actions, not by user-driven business flows. Designed for audit and compliance reviews. No calculated fields, strictly normalized.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Implements identity and uniqueness for each audit log entry. Fulfills the uniqueness requirement per audit record. Ensures normalization by enabling atomic audit entries. Always generated as a UUID.\n- `actor_user_id`: [Action Actor] - Implements the requirement to store the user responsible for each privileged action. Links to the user who performed the action. Ensures 3NF by storing only the user id as a reference; all other actor information must be joined as needed. For example, references the admin who issued a ban.\n- `target_user_id`: [Action Target] - Fulfills the requirement to capture who is affected by the action, if applicable (e.g., in bans, warnings, or demotions). Nullable for actions targeting system settings rather than specific users. Keeps direct reference only to target user id to stay normalized.\n- `action_type`: [Action Type] - Implements the action classification requirement. Business meaning: describes the category (e.g., 'ban', 'role_change', 'settings_update'). Ensures normalization by not encoding business logic; only keeps atomic values (string), never details or summaries.\n- `entity_type`: [Entity Type] - Implements the need for polymorphic audit trail. Records the type of entity affected (e.g., 'user', 'post', 'comment', 'setting'). Ensures 3NF by representing entity type as atomic data, not as a foreign key or denormalized structure.\n- `entity_id`: [Entity Reference] - Fulfills requirement to record which object was modified. Nullable for actions that do not target a specific entity. Ensures normalization by storing atomic reference only.\n- `action_detail`: [Action Detail] - Implements extensible context for audit records. Stores optional contextual details, such as old/new role in a role change. Ensures normalization by keeping these as atomic strings, not by embedding object graphs.\n- `created_at`: [Timestamp] - Implements audit trail requirement for time traceability. Business meaning: when the privileged action took place. Ensures normalization by using a single atomic datetime. Example: records ban date or role assignment time.\n\n### `discussionboard_platform_setting`\n\n[Platform Configuration Management] - This implements requirements for platform-wide admin-configurable settings, drawn from 'Administration' in both the overview and functional requirements documents (see Admin: Platform Configuration, and Functionality: Platform-wide Settings). \n\nSolves the business problem of enabling admin users to manage platform-wide booleans, options, and policies in a normalized way. \nMaintains 3NF by storing one setting per row, keyed by setting name, value, and type—never groups or arrays. For example, \"MaxPostAttachments\" or \"EnableModerationQueue\" are single atomic settings stored here.\n\nKey relationships: No foreign keys; settings are manipulated by admin flows only. \nSpecial behaviors: Names are unique; mutating a setting should update only the single normalized row. No pre-calculated values or summaries—strictly atomic and normalized.\n\nProperties as follows:\n\n- `id`: [Primary Key] - Unique identifier for each platform setting. 3NF compliance: prevents duplicate or ambiguous settings by row identity.\n- `name`: [Setting Name] - Implements the need to uniquely identify every platform setting. Should be a descriptive string (e.g., 'EnableModerationQueue'). Ensures normalization by not encoding arrays or objects, only simple strings.\n- `value`: [Setting Value] - Implements storing current configuration/data. Can hold any atomic value as string (booleans='true'/'false', numbers as string, etc.). Ensures 3NF by keeping each value atomic and not embedding larger config structures.\n- `type`: [Data Type Marker] - Fulfills the requirement to distinguish setting value interpretation (e.g., 'boolean', 'int', 'string'). Maintains normalization by storing type marker atomically. Example: allows parsing and validation at the application level.\n- `updated_at`: [Last Updated Timestamp] - Supports auditability for platform changes. Maintains normalization by using a single atomic datetime. For example, allows the system to show when moderation settings were last updated.\n",
      "diagrams": {
        "Core": "```mermaid\nerDiagram\n\"discussionboard_user\" {\n  String id PK\n  String email UK\n  String password_hash\n  Boolean is_active\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussionboard_user_profile\" {\n  String id PK\n  String user_id FK,UK\n  String display_name\n  String(80000) avatar_url \"nullable\"\n  String bio \"nullable\"\n}\n\"discussionboard_member\" {\n  String id PK\n  String user_id FK,UK\n  DateTime granted_at\n}\n\"discussionboard_moderator\" {\n  String id PK\n  String user_id FK,UK\n  DateTime assigned_at\n}\n\"discussionboard_admin\" {\n  String id PK\n  String user_id FK,UK\n  DateTime assigned_at\n}\n\"discussionboard_user_profile\" |o--|| \"discussionboard_user\" : user_profile_user_id\n\"discussionboard_member\" |o--|| \"discussionboard_user\" : member_user_id\n\"discussionboard_moderator\" |o--|| \"discussionboard_user\" : moderator_user_id\n\"discussionboard_admin\" |o--|| \"discussionboard_user\" : admin_user_id\n```",
        "DiscussionBoard": "```mermaid\nerDiagram\n\"discussionboard_post\" {\n  String id PK\n  String author_member_id FK\n  String category_id FK\n  String title\n  String body\n  DateTime created_at\n  DateTime updated_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussionboard_post_category\" {\n  String id PK\n  String name UK\n  String description \"nullable\"\n}\n\"discussionboard_post_tag\" {\n  String id PK\n  String name UK\n}\n\"discussionboard_post_attachment\" {\n  String id PK\n  String post_id FK\n  String(80000) file_url\n  String file_type\n  DateTime uploaded_at\n}\n\"discussionboard_post\" }o--|| \"discussionboard_post_category\" : category\n\"discussionboard_post_attachment\" }o--|| \"discussionboard_post\" : post\n```",
        "Comments": "```mermaid\nerDiagram\n\"discussionboard_comments\" {\n  String id PK\n  String post_id FK\n  String author_id FK\n  String parent_comment_id FK \"nullable\"\n  String content\n  Boolean is_edited\n  Boolean is_deleted\n  DateTime created_at\n  DateTime updated_at\n}\n\"discussionboard_comments\" }o--o| \"discussionboard_comments\" : parent_comment\n```",
        "Interaction": "```mermaid\nerDiagram\n\"discussionboard_likes\" {\n  String id PK\n  String user_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  DateTime created_at\n  DateTime deleted_at \"nullable\"\n}\n\"discussionboard_reports\" {\n  String id PK\n  String user_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String reason_code\n  String reason_details \"nullable\"\n  DateTime created_at\n  DateTime deleted_at \"nullable\"\n}\n```",
        "Moderation": "```mermaid\nerDiagram\n\"discussionboard_moderation_action\" {\n  String id PK\n  String actor_id FK\n  String target_user_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String action_type\n  String reason\n  DateTime created_at\n}\n\"discussionboard_report_review\" {\n  String id PK\n  String report_id FK,UK\n  String reviewer_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String review_status\n  String moderator_comment \"nullable\"\n  DateTime reviewed_at\n}\n\"discussionboard_warning\" {\n  String id PK\n  String issued_by_id FK\n  String issued_to_id FK\n  String post_id FK \"nullable\"\n  String comment_id FK \"nullable\"\n  String warning_type\n  String message\n  DateTime issued_at\n}\n\"discussionboard_ban\" {\n  String id PK\n  String banned_user_id FK\n  String banned_by_id FK\n  String warning_id FK \"nullable\"\n  String ban_type\n  String reason\n  DateTime issued_at\n  DateTime expires_at \"nullable\"\n}\n\"discussionboard_ban\" }o--o| \"discussionboard_warning\" : related_warning\n```",
        "Notification": "```mermaid\nerDiagram\n\"discussionboard_notification\" {\n  String id PK\n  String recipient_user_id FK\n  String related_post_id FK \"nullable\"\n  String related_comment_id FK \"nullable\"\n  String actor_user_id FK \"nullable\"\n  String type\n  String message\n  Boolean is_read\n  DateTime created_at\n}\n\"discussionboard_notification_preference\" {\n  String id PK\n  String user_id FK,UK\n  Boolean notify_reply\n  Boolean notify_like\n  Boolean notify_moderator_action\n  Boolean notify_system_message\n}\n```",
        "Admin": "```mermaid\nerDiagram\n\"discussionboard_audit_log\" {\n  String id PK\n  String actor_user_id FK\n  String target_user_id FK \"nullable\"\n  String action_type\n  String entity_type\n  String entity_id \"nullable\"\n  String action_detail \"nullable\"\n  DateTime created_at\n}\n\"discussionboard_platform_setting\" {\n  String id PK\n  String name UK\n  String value\n  String type\n  DateTime updated_at\n}\n```"
      }
    },
    "step": 0
  },
  {
    "type": "interface",
    "id": "21e075a4-413c-4a8c-a398-50848ab1dbbf",
    "document": {
      "operations": [
        {
          "specification": "List all user master records from the discussionboard_user table, with support for advanced search, pagination, and filter capabilities as commonly required for a user management dashboard. This endpoint provides administrators with the ability to retrieve all users for auditing, onboarding, offboarding, or analytics while referencing the Prisma DB table 'discussionboard_user'. The operation must implement all relevant security and filtering as described in the requirements analysis.",
          "description": "This API operation retrieves a searchable, paginated list of user master records from the discussionboard_user table. It supports query capabilities for filtering by activation status, creation/update timestamp, and partial email matches. The endpoint is designed to be used primarily by administrators and moderators for user oversight and management per the defined permissions matrix. Security: Only accessible to admin or moderator roles. Validation: Supports strong input validation on paging and filters, and must log all access for auditability. Related operations: administrators may utilize this in conjunction with the user single-record GET for comprehensive user management workflows.",
          "summary": "Retrieve a paginated, searchable list of users (discussionboard_user).",
          "parameters": [],
          "requestBody": {
            "description": "Filtering, paging, and search parameters for listing user master records.",
            "typeName": "IDiscussionboardUser.IRequest"
          },
          "responseBody": {
            "description": "Paginated, filtered results of user master records.",
            "typeName": "IPageDiscussionboardUser"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/users",
          "method": "patch"
        },
        {
          "specification": "Fetch a single user master record from the discussionboard_user table by its unique identifier, supporting all use cases outlined for user management, display, and audit as referenced in the Prisma DB schema and requirements analysis.",
          "description": "This API retrieves the complete information for an individual user, identified by their UUID. It is intended for use by administrators and moderators in user management scenarios, such as reviewing, editing, or auditing user details. The response includes all core attributes (email, activation status, creation/update timestamps) and maintains security by strictly permitting access to authorized roles. Related operations may include list retrieval and update endpoints.",
          "summary": "Get a single user (discussionboard_user) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "User's unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Full user master record including authentication and status fields.",
            "typeName": "IDiscussionboardUser"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/users/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new user master record in the discussionboard_user table, as required for user registration or admin creation flows per requirements. Supports use cases such as direct admin onboarding or user self-registration, handling all prerequisite validations.",
          "description": "This endpoint creates a new user master record, writing to the discussionboard_user table. It handles validation for unique emails, initial password hash assignment, and sets is_active to its default state according to business rules. Security considerations ensure only authorized roles can invoke direct creation. The operation also triggers any necessary audit logging for compliance. Related operations: used in tandem with user profile creation, member role assignment, and authentication flows.",
          "summary": "Create a new user (discussionboard_user) record.",
          "parameters": [],
          "requestBody": {
            "description": "User registration or admin onboarding details.",
            "typeName": "IDiscussionboardUser.ICreate"
          },
          "responseBody": {
            "description": "Created user master record including system-generated fields.",
            "typeName": "IDiscussionboardUser"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/users",
          "method": "post"
        },
        {
          "specification": "Update attributes of an existing discussionboard_user record via its unique identifier, fulfilling requirements for administrative management and user-initiated updates (e.g., password reset, status changes).",
          "description": "This API operation allows modification of selected user fields (email, password hash, is_active), targeting a specific user by UUID. Security and validation rules enforce role-based restrictions and data integrity per requirements. The endpoint is heavily audited to track all changes for compliance, and is designed for admin or moderator-initiated actions. Related endpoints: single user GET, user list PATCH. Error handling robustly communicates invalid updates or permission violations.",
          "summary": "Update a user (discussionboard_user) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "User's unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields and values for updating the user record.",
            "typeName": "IDiscussionboardUser.IUpdate"
          },
          "responseBody": {
            "description": "Updated user master record reflecting all changes.",
            "typeName": "IDiscussionboardUser"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/users/{id}",
          "method": "put"
        },
        {
          "specification": "Delete (deactivate) a user record from discussionboard_user, implementing the administrative user removal workflow as defined in requirements. May implement soft deletion by toggling is_active per schema comments.",
          "description": "Deletes (or deactivates) a user account by UUID. This API supports administrative removal flows, including compliance logging. It is designed for admin-level actions, as user deletion can have significant platform/customer impact. The operation typically issues a soft-delete (e.g., toggling is_active to false) and is fully audited, in line with platform integrity and regulatory demands. Related: Admin dashboard user controls, audit log write.",
          "summary": "Delete (deactivate) a user (discussionboard_user) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "User's unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Confirmation of deletion or user status change.",
            "typeName": "IDiscussionboardUser"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/users/{id}",
          "method": "delete"
        },
        {
          "specification": "Retrieve a paginated, searchable list of user profiles from discussionboard_user_profile to enable admin and moderator UIs to search, browse, and filter display information for members.",
          "description": "This endpoint allows privileged users to retrieve and browse user profile records, supporting full-text and field-level search and filters (display_name, bio, etc.). The response is paginated and designed to support member directories, user management workflows, and audit reporting. Security: limited to moderators and admins. Validation: robust query filtering and result formatting per requirements analysis. Related: GET/PATCH/PUT/DELETE profile endpoints.",
          "summary": "List user profiles (discussionboard_user_profile) with search/pagination.",
          "parameters": [],
          "requestBody": {
            "description": "Profile list filtering, search, and pagination request.",
            "typeName": "IDiscussionboardUserProfile.IRequest"
          },
          "responseBody": {
            "description": "Paginated, filtered user profile records.",
            "typeName": "IPageDiscussionboardUserProfile"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/userProfiles",
          "method": "patch"
        },
        {
          "specification": "Retrieve a single user profile by its unique identifier from discussionboard_user_profile, supporting profile display, admin edit views, and audit scenarios.",
          "description": "Fetches all stored display and personal information for an individual user's profile by UUID. Used for profile detail views in administration/moderation dashboards, as well as for member self-service editing. Security/permissions checks ensure only proper roles may access. Data structure matches schema commentary and requirements.",
          "summary": "Get a user profile (discussionboard_user_profile) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "User profile unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Complete user profile record.",
            "typeName": "IDiscussionboardUserProfile"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/userProfiles/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new user profile in discussionboard_user_profile, supporting both registration workflows and post-registration profile edits. Used when onboarding new members or correcting initial profile incomplete data.",
          "description": "This operation creates a new user profile, referencing the parent user record, and populates display_name, avatar_url, and bio. Security: Only admin/moderator roles allowed direct creation via this API. Validation: requires unique user_id and all required fields as per schema. Successful creation triggers audit log entries. Related: member onboarding, profile edit flows.",
          "summary": "Create a new user profile (discussionboard_user_profile) record.",
          "parameters": [],
          "requestBody": {
            "description": "Profile creation (display name, avatar, bio, user_id).",
            "typeName": "IDiscussionboardUserProfile.ICreate"
          },
          "responseBody": {
            "description": "Newly created user profile record.",
            "typeName": "IDiscussionboardUserProfile"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/userProfiles",
          "method": "post"
        },
        {
          "specification": "Update an existing discussionboard_user_profile record by UUID, as required for member self-edits, admin correction, or routine maintenance. Must conform to all validation and security policies in requirements.",
          "description": "Allows modification to a single user profile by its UUID, supporting all permitted fields (display name, avatar, bio, etc.). Security controls enforce that only authorized roles may make such edits. Audit log entries created for each change. The endpoint supports tight input validation for data quality.",
          "summary": "Update a user profile (discussionboard_user_profile) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "User profile unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Profile fields and values for update.",
            "typeName": "IDiscussionboardUserProfile.IUpdate"
          },
          "responseBody": {
            "description": "Updated user profile record.",
            "typeName": "IDiscussionboardUserProfile"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/userProfiles/{id}",
          "method": "put"
        },
        {
          "specification": "Delete a user profile by UUID, supporting administrative removals (e.g., GDPR workflows, onboarding error correction). Updates user profile status in discussionboard_user_profile.",
          "description": "Removes the user profile entry with the specified UUID. This endpoint is used primarily by admins for compliance-driven and support-driven cleanup tasks. Operation is logged for auditability, and security enforces administrative privilege.",
          "summary": "Delete a user profile (discussionboard_user_profile) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "User profile unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Confirmation of profile deletion (or state change).",
            "typeName": "IDiscussionboardUserProfile"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/userProfiles/{id}",
          "method": "delete"
        },
        {
          "specification": "Retrieve a paginated, searchable list of discussionboard_member records, supporting administrative and moderation dashboards which track participation and role assignment.",
          "description": "This API returns a paginated collection of all members assigned to the platform, including details such as grant timestamp and related user account identifiers. Filters include active/inactive status, joining date, etc. Security: Only admins and moderators can access for role management or audit workflows. Related: GET member, PATCH/PUT/DELETE endpoints for role adjustment.",
          "summary": "List platform members (discussionboard_member) with search/pagination.",
          "parameters": [],
          "requestBody": {
            "description": "Filtering, paging, and search parameters for member role records.",
            "typeName": "IDiscussionboardMember.IRequest"
          },
          "responseBody": {
            "description": "Paginated, filtered member role assignments.",
            "typeName": "IPageDiscussionboardMember"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/members",
          "method": "patch"
        },
        {
          "specification": "Retrieve a specific member role assignment record from discussionboard_member by UUID, for use cases such as platform membership audit, admin role management, or moderator privilege verification.",
          "description": "Fetches the record of a specific member role assignment, referenced by its UUID. Supports administration dashboard use cases, auditing, and role validation. Security: accessible only to admins and moderators. Related: PATCH member list, PUT/DELETE member for role management.",
          "summary": "Get a specific member (discussionboard_member) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Member role assignment unique identifier (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Single member role assignment record.",
            "typeName": "IDiscussionboardMember"
          },
          "authorization": {
            "role": [
              "admin",
              "moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/members/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new member in the discussionboard system. This operation registers a new member entity, typically called by administrators. The endpoint creates a record in the discussionboard_member table, which represents a user with general participation rights in the platform, such as posting and commenting. It is separate from moderator/admin role assignments, adhering to strict 3NF in the data model. Only permitted actors (e.g., admins) should perform this action. Related requirements are found in the user roles and permissions document.",
          "description": "This API endpoint allows an administrator or system operator to create a new member in the discussionboard_member table. The member role grants basic participation privileges according to the permissions matrix in the requirements documentation. The creation process requires associating the new member with a valid discussionboard_user (user_id). This ensures that all new members have a corresponding authenticated user record, and that there is no role duplication or data inconsistency. The request validates the provided user and ensures that no existing member role is already attached to the given user_id. If the user_id is not found or already registered as a member, the API will return an error.",
          "summary": "Create a new discussionboard_member entity based on the discussionboard_member table.",
          "parameters": [],
          "requestBody": {
            "description": "Information required to create a new member (must include user_id and grant timestamp).",
            "typeName": "IDiscussionboardMember.ICreate"
          },
          "responseBody": {
            "description": "The newly created member entity.",
            "typeName": "IDiscussionboardMember"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/members",
          "method": "post"
        },
        {
          "specification": "Update existing member information or membership grant time in the discussionboard_member table. The endpoint is designed for admin-only usage and updates fields such as grant timestamp or potentially other member-specific metadata. The operation matches the member role assignment update flow outlined in admin requirements.",
          "description": "This API endpoint allows administrators to update information of an existing member in the discussionboard_member table. Typically, only the grant timestamp or similar metadata may be updated, as member roles themselves are atomic. The endpoint strictly requires sufficient privileges and validates the specified id (primary key) to ensure the member entity exists. Unauthorized or inappropriate attempts to escalate privileges are restricted by business logic, and audit logs are maintained for such role modifications.",
          "summary": "Update an existing discussionboard_member entity by id in the discussionboard_member table.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_member entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Updated member data (must match updatable discussionboard_member fields).",
            "typeName": "IDiscussionboardMember.IUpdate"
          },
          "responseBody": {
            "description": "The updated discussionboard_member entity.",
            "typeName": "IDiscussionboardMember"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/members/{id}",
          "method": "put"
        },
        {
          "specification": "Delete (revoke) a member role from a user in the discussionboard_member table. Only usable by administrators. The endpoint revokes membership, removing the base-level participation role from the specified user. This does not delete the underlying user record but only the role assignment, following audit and security best practices.",
          "description": "This API endpoint enables an administrator to remove a member role assignment from a particular user by the member's primary key (id). This revocation is closely audited, ensuring traceability. The endpoint validates the specified id, deletes the member role only if it exists, and refuses to remove membership from users who are currently serving as moderator/admin (unless business policies specifically permit cascading removal). Operations are logged for compliance.",
          "summary": "Delete a discussionboard_member entity (revoke member role) in the discussionboard_member table by id.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_member entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Result or deleted entity data.",
            "typeName": "IDiscussionboardMember"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/members/{id}",
          "method": "delete"
        },
        {
          "specification": "Get a paginated, filterable list of moderator assignments from the discussionboard_moderator table. This endpoint provides searching, sorting, and filtering capabilities for admin-level queries. Used for audit, dashboarding, and role management.",
          "description": "This endpoint returns a list of moderator role assignments with support for pagination, search filters (such as assigned_at date, or associated user), and sorting. Admins can use this API to review all current and past moderator assignments. The output includes grants with their associated user ids, assignment timestamps, and moderator assignment metadata. Query parameters allow for narrowing the list based on assignment time or specific users. This is a critical part of the admin's dashboard role and security monitoring workflows.",
          "summary": "List/search all discussionboard_moderator entities (with pagination and filters) in the discussionboard_moderator table.",
          "parameters": [],
          "requestBody": {
            "description": "Search filters, pagination, and sort info for moderator assignment retrieval.",
            "typeName": "IDiscussionboardModerator.IRequest"
          },
          "responseBody": {
            "description": "Paginated result set of moderator entities.",
            "typeName": "IPageDiscussionboardModerator"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderators",
          "method": "patch"
        },
        {
          "specification": "Retrieve details for a single moderator by id from the discussionboard_moderator table. This endpoint provides information about the moderator role assignment, association to the user account, and assignment timestamp, according to the requirements for role hierarchy and traceability.",
          "description": "This API operation fetches a specific moderator assignment record from the discussionboard_moderator table based on the provided id (UUID). The response details the moderator's associated user account and assignment metadata, supporting admin review, dashboard, and audit functionality. Error handling ensures non-existent ids are reported gracefully.",
          "summary": "Get a single discussionboard_moderator entity by id from the discussionboard_moderator table.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_moderator entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "The moderator assignment entity details.",
            "typeName": "IDiscussionboardModerator"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderators/{id}",
          "method": "get"
        },
        {
          "specification": "Assign a moderator role to a user by creating a new entry in the discussionboard_moderator table. This is an admin-only function for granting moderator privileges, following the explicit promotion flow in the requirements documentation. It registers the user as a moderator alongside metadata, such as assignment time.",
          "description": "This endpoint allows admins to create and assign new moderator roles to existing users. The process ensures that only users who are already members (but not already moderators or admins) are eligible. The request must specify the user_id and assignment date/time. The endpoint validates input and records the new assignment for future audits. Creation is tightly audited and triggers related permission changes for the specified user.",
          "summary": "Create a new discussionboard_moderator assignment in the discussionboard_moderator table.",
          "parameters": [],
          "requestBody": {
            "description": "Moderator assignment information (user_id and assignment time).",
            "typeName": "IDiscussionboardModerator.ICreate"
          },
          "responseBody": {
            "description": "The newly created moderator assignment entity.",
            "typeName": "IDiscussionboardModerator"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderators",
          "method": "post"
        },
        {
          "specification": "Update an existing moderator assignment in the discussionboard_moderator table. Admins may need to adjust metadata or correct assignment details.",
          "description": "This endpoint allows an admin to update the assignment properties (e.g., timestamps) of an existing moderator entity by id. Business logic restricts changing the actual user_id or role, as role escalation/demotion should use separate business flows. The operation is logged and validated for admin-only use, and errors are reported if the id is invalid or immutable properties are attempted to be updated.",
          "summary": "Update a discussionboard_moderator entity by id in the discussionboard_moderator table.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_moderator entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Updatable moderator assignment fields (assignment time, etc).",
            "typeName": "IDiscussionboardModerator.IUpdate"
          },
          "responseBody": {
            "description": "The updated moderator assignment entity.",
            "typeName": "IDiscussionboardModerator"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderators/{id}",
          "method": "put"
        },
        {
          "specification": "Revoke moderator privileges from a user by deleting a discussionboard_moderator entry by id. Used for demotion or role removal per requirements, with audit trail support.",
          "description": "This endpoint allows an admin to remove moderator status from a user by deleting the corresponding discussionboard_moderator role entry using its id. This action is audited and validated. It does not delete the underlying user or member records, only the moderator assignment. Errors are thrown if cascading deletes aren’t permitted or if the id is not found.",
          "summary": "Delete a discussionboard_moderator entry (revoke moderator role) by id in the discussionboard_moderator table.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_moderator entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Deleted role record or result confirmation.",
            "typeName": "IDiscussionboardModerator"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderators/{id}",
          "method": "delete"
        },
        {
          "specification": "Get a paginated, filterable list of admin assignments from the discussionboard_admin table. This provides searching and filtering for privileged role management and compliance reporting.",
          "description": "This endpoint offers admins an overview and search interface for all platform administrator assignments in the discussionboard_admin table. The payload supports pagination, keyword search, and filtering by assignment date or user. It forms the basis for privileged account audits, access controls, and compliance verification. The operation is restricted to high privilege user roles; data is indexed for efficiency.",
          "summary": "List/search all discussionboard_admin entities (paginated, with filters) in the discussionboard_admin table.",
          "parameters": [],
          "requestBody": {
            "description": "Search filters, pagination, and sorting information for retrieving admin assignments.",
            "typeName": "IDiscussionboardAdmin.IRequest"
          },
          "responseBody": {
            "description": "Paginated result set of administrator entities.",
            "typeName": "IPageDiscussionboardAdmin"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/admins",
          "method": "patch"
        },
        {
          "specification": "Retrieve a single administrator role assignment from the discussionboard_admin table by id, including assignment timestamp and user association details.",
          "description": "Fetch the details of a platform administrator role assignment by its id (UUID) from the discussionboard_admin table. This supports dashboard and audit workflows, validating the provided id and returning associated user and role metadata. Errors for non-existent ids are handled gracefully. Only users with sufficient privileges (other admins) can perform this query according to the permission model.",
          "summary": "Get a single discussionboard_admin entity by id from the discussionboard_admin table.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_admin entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Platform administrator assignment entity details.",
            "typeName": "IDiscussionboardAdmin"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/admins/{id}",
          "method": "get"
        },
        {
          "specification": "Assign a new admin role to a user by creating an entry in the discussionboard_admin table. This is the highest privilege assignment and is restricted to authenticated admins.",
          "description": "This endpoint lets an authorized administrator create a new admin assignment (promotion) for a user, typically by specifying the target user_id and the assignment timestamp. It validates eligibility, checks for duplicate admin assignments, and ensures a single active admin assignment per user. Assignments are tightly audited, and only current admins may perform this action as per the permissions matrix.",
          "summary": "Create a new discussionboard_admin role assignment in the discussionboard_admin table.",
          "parameters": [],
          "requestBody": {
            "description": "Admin role assignment information (user_id and assignment timestamp).",
            "typeName": "IDiscussionboardAdmin.ICreate"
          },
          "responseBody": {
            "description": "The newly created admin role assignment entity.",
            "typeName": "IDiscussionboardAdmin"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/admins",
          "method": "post"
        },
        {
          "specification": "Update the properties (e.g., assignment timestamp) of a platform admin assignment in the discussionboard_admin table by id. Limited to high privilege users, following audit and compliance requirements.",
          "description": "Update the assignment-related metadata (such as assigned_at) of an existing administrator role entity by its id. Only admins may perform this operation, and audit logs are updated accordingly. Changing the actual user_id or demotion is explicitly not handled by this endpoint, which is meant only for metadata updates.",
          "summary": "Update a discussionboard_admin role assignment by id in the discussionboard_admin table.",
          "parameters": [
            {
              "name": "id",
              "description": "Target discussionboard_admin entity id (UUID).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Updatable admin assignment fields, such as assignment time.",
            "typeName": "IDiscussionboardAdmin.IUpdate"
          },
          "responseBody": {
            "description": "The updated administrator assignment entity.",
            "typeName": "IDiscussionboardAdmin"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/admins/{id}",
          "method": "put"
        },
        {
          "specification": "This operation deletes an admin role assignment from the discussionboard_admin table. This is used by platform super administrators to remove admin capabilities from a specific user. It enforces the business rules outlined in the requirements, where only users with sufficient privileges (admins) can assign or revoke admin roles. The operation permanently removes the admin record linked to the user, and must ensure via authorization that only a valid user with sufficient privileges can perform the deletion. It supports traceability and compliance, as all changes to roles are also logged in audit tables. On success, the target user immediately loses all admin privileges.",
          "description": "This API operation deletes an administrator record from the discussionboard_admin entity. As per the requirements documents, admin role records are maintained distinctly from user, moderator, and member entries, supporting 3NF and full audit compliance. Deletion of an admin role is a restricted operation, only allowed for authenticated super admins via bearer token, ensuring robust authorization checks. Security is paramount, as role escalation and privilege management are tracked through audit logging (discussionboard_audit_log). Attempting to delete an admin role that does not exist results in a not-found error; permission errors trigger a forbidden error. This API supports platform maintenance, role reconfiguration, and compliance with the roles and permissions design clarified in the requirements and schema.",
          "summary": "Delete an admin record from discussionboard_admin table by its ID (admin-only).",
          "parameters": [
            {
              "name": "id",
              "description": "Target admin assignment ID for deletion",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/admins/{id}",
          "method": "delete"
        },
        {
          "specification": "This operation retrieves a paginated, filtered list of posts from the discussionboard_post table. This method, used for complex post queries, supports searching by category, author, keywords, date ranges, and more. It strictly adheres to normalization by referencing foreign keys for category and author. Results support admin and moderator views, enabling retrieval of hidden/deleted posts dependent on role. Pagination, sorting, and advanced filtering are provided via the request body type. Only approved, active posts are returned to non-admins and non-moderators; admin or moderator tokens allow access to posts regardless of status.",
          "description": "Retrieves a list of discussion posts from the discussionboard_post entity, with advanced query and pagination support in the request body. This operation fulfills the requirements for filtered, paged, and searchable list retrieval across all board categories. By referencing associated entities like member (author), category, attachments, and moderation status, this endpoint provides broad discoverability and content management. Members see only visible posts; moderators/admins can query hidden/deleted posts, supporting moderation workflows. Validation rules ensure query filters are well-formed; errors in filtering result in 400 responses. Rate limiting and role-based visibility are enforced. Related endpoints include GET /discussionboard/posts/{id} (detail fetch), POST /discussionboard/posts (create), and moderation actions.",
          "summary": "Retrieve a list of discussionboard_post entries with filtering, search, and pagination.",
          "parameters": [],
          "requestBody": {
            "description": "Filtering and pagination options for list retrieval of posts.",
            "typeName": "IDiscussionboardPost.IRequest"
          },
          "responseBody": {
            "description": "Paginated list of post summaries matching filters.",
            "typeName": "IPageIDiscussionboardPost.ISummary"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/posts",
          "method": "patch"
        },
        {
          "specification": "This operation retrieves a single discussion post by its ID from the discussionboard_post table, including category, author, and all related primary fields. It follows strict normalization, referencing foreign keys for member and category, and represents a central part of discussion navigation. Auditing is supported through access logs, and visibility of deleted/hidden posts is controlled by role. Only moderators/admins may see hidden/deleted posts. The endpoint is fundamental to detailed post viewing, UI detail pages, and deep links.",
          "description": "Fetches the details of a specific discussion post from the discussionboard_post entity using its unique ID. The response includes the post metadata (title, body, timestamps), associated author/member profile, category, post status (deleted/active), and attaches as per normalization rules. Visibility is governed by role: general members cannot view moderated/deleted content; admin/moderator tokens enable complete access. Not-found errors are returned for invalid IDs or restricted access. This operation complements the list, create, update and moderation endpoints.",
          "summary": "Get discussionboard_post details by ID, with all associated normalized references.",
          "parameters": [
            {
              "name": "id",
              "description": "ID of the post to retrieve",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Detailed discussion post information, including author and category fields.",
            "typeName": "IDiscussionboardPost"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/posts/{id}",
          "method": "get"
        },
        {
          "specification": "This operation creates a new discussion post in the discussionboard_post table. The request body must conform to the IDiscussionboardPost.ICreate interface, encapsulating all required fields such as title, body, category, and the member reference (author). Additional validations are applied for text length, category existence, and attachment constraints (if present). Only authenticated members may create posts; moderation logic may enforce automatic review or post visibility. Successful creation returns the full post object with all normalized references populated. Audit logging is performed for traceability.",
          "description": "Enables logged-in members to create a new discussion post in the discussionboard_post entity. The incoming request body supplies all necessary information (title, body, category, and optionally attachments). Validations check category existence, normalized author pointer, and input length constraints. Attachments are added via secondary operations post-creation. Errors due to missing fields, invalid references, or authorization failure return appropriate status codes and structured error responses. This operation is strictly restricted to non-deleted, active members. On success, returns the created post including generated ID and all populated fields.",
          "summary": "Create a new discussionboard_post (member role).",
          "parameters": [],
          "requestBody": {
            "description": "Details for the new discussion post to be created.",
            "typeName": "IDiscussionboardPost.ICreate"
          },
          "responseBody": {
            "description": "The newly created discussion post with normalized references.",
            "typeName": "IDiscussionboardPost"
          },
          "authorization": {
            "role": [
              "member"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/posts",
          "method": "post"
        },
        {
          "specification": "This operation updates an existing discussion post in the discussionboard_post table, as identified by its unique ID. The request body must utilize the IDiscussionboardPost.IUpdate interface to specify updated fields, such as title, body, or category. Only post owners (members) or privileged users (moderators/admins) are authorized for this operation. All field changes are validated for normalization (e.g., category FK), content constraints (title/body length), and attachment policy. Audit and modification tracking are enforced. The updated post object is returned on success.",
          "description": "Updates an existing post in the discussionboard_post entity, referenced by its unique ID path parameter. The operation supports only authorized updates—either by the original post author or by moderators/admins for moderation. The request body includes only those fields allowed for update as per the requirements analysis. Authorization checks ensure proper role-based access and enforce the correct update scope. Audit logging occurs for all operations, and error handling provides structured responses for invalid IDs, constraint violations, or insufficient permissions. This API supports post editing as described in platform features and moderation flows.",
          "summary": "Update a discussionboard_post by ID, with authenticated/member/editor enforcement.",
          "parameters": [
            {
              "name": "id",
              "description": "ID of the post to update",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields to be updated in the post. Only updatable fields must be supplied.",
            "typeName": "IDiscussionboardPost.IUpdate"
          },
          "responseBody": {
            "description": "The updated post record after changes have been applied.",
            "typeName": "IDiscussionboardPost"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/posts/{id}",
          "method": "put"
        },
        {
          "specification": "This operation deletes a specific discussion post by its ID from the discussionboard_post table. The operation performs soft deletion, marking the deleted_at field, and is accessible only to the owning member, moderators, or admins (enforced via role-based permission). Deletion triggers downstream cleanup (e.g., hidden from list endpoints), audit logging, and content removal from indexed search. Attempts to delete an already-deleted or nonexistent post return errors. Soft deletion ensures information remains for moderation/audit compliance, in line with the requirements.",
          "description": "Deletes a discussion post from the discussionboard_post entity identified by its unique ID. The deletion is soft, flipping the deleted_at timestamp. Only allowed by (a) the original member author if post is not already deleted, (b) moderators for moderation, or (c) admins for compliance. Authorizations provide platform protection against non-owned or already-deleted posts. This operation is referenced in the requirements for content management, moderation, and audit. It is tightly integrated with downstream features such as post indexes and content analytics.",
          "summary": "Soft delete a discussionboard_post by ID (member/privileged roles).",
          "parameters": [
            {
              "name": "id",
              "description": "ID of the post to soft delete",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/posts/{id}",
          "method": "delete"
        },
        {
          "specification": "This operation retrieves a paginated and filtered list of all discussionboard_post_category records, supporting search by name, description, and creation date ranges. The operation supports admin-only full access but can be used for public listing of available categories for members. Supports pagination for management UIs and advanced browsing, enforcing strict normalization. The request body must include filtering/sorting options per IDiscussionboardPostCategory.IRequest. This endpoint forms the basis for both management and user-facing category listing.",
          "description": "Retrieves a list of discussionboard_post_category records from the discussionboard_post_category entity. Input via the request body enables filtering, searching, and pagination by name, description, and any other indexed fields. Admin role users can view and manage all entries, while member endpoints may support limited usage for category discovery. Pagination is strongly enforced via the schema, supporting UI collections and configuration panels. Errors are returned for invalid filter objects or excessive result/page sizes. This functionality is critical for category maintenance, filtering, and administration as outlined in the requirements.",
          "summary": "Retrieve a list of discussionboard_post_category entries with filtering and pagination (admin, public listing).",
          "parameters": [],
          "requestBody": {
            "description": "Filtering and pagination info for post categories.",
            "typeName": "IDiscussionboardPostCategory.IRequest"
          },
          "responseBody": {
            "description": "Paginated category list matching filter/criteria.",
            "typeName": "IPageIDiscussionboardPostCategory"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/postCategories",
          "method": "patch"
        },
        {
          "specification": "This operation retrieves a specific discussionboard_post_category record by its ID from the database. The returned category includes normalized fields (name, description) and is utilized in both admin UIs and user filtering scenarios. This operation is managed by admin users for configuration purposes and is protected by strict authorization and validation. Attempts to access non-existent categories return a not-found error. The endpoint is central to platform category taxonomy management and filtering systems.",
          "description": "Retrieves a single discussionboard_post_category record by ID. Used by admins in category management, and by members for advanced filtering/context. Success responses contain all normalized category fields (name, description), with strict validation of the ID parameter. Permission denied or not-found errors apply for non-admin or invalid ID requests. The endpoint aligns with requirements for both platform configuration and discoverability by users.",
          "summary": "Get a single discussionboard_post_category by ID (admin).",
          "parameters": [
            {
              "name": "id",
              "description": "ID of the post category to retrieve",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Details of the found post category.",
            "typeName": "IDiscussionboardPostCategory"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/postCategories/{id}",
          "method": "get"
        },
        {
          "specification": "This operation creates a new record in the discussionboard_post_category table. Used by platform admins to add new post categories, the request body must conform to IDiscussionboardPostCategory.ICreate and contains all required normalized fields (name, description). Uniqueness of category name is enforced. This operation is only accessible to authenticated admins. On success, the operation returns the new category record with its assigned ID. All changes trigger audit logging as described in platform requirements.",
          "description": "Enables platform admins to create a new discussionboard_post_category entity. Input validation ensures the category name is unique and the description field, if present, is properly formed. All operations are strictly permission-checked. Name-based uniqueness is validated prior to insertion; on conflict, an error is returned to the client. Audit logging captures all creations. On success, returns the normalized record, including generated unique ID. The endpoint is referenced in requirements for category taxonomy maintenance and administrative workflows.",
          "summary": "Create a new discussionboard_post_category (admin only).",
          "parameters": [],
          "requestBody": {
            "description": "Details for the new post category to create.",
            "typeName": "IDiscussionboardPostCategory.ICreate"
          },
          "responseBody": {
            "description": "The newly created post category record.",
            "typeName": "IDiscussionboardPostCategory"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/postCategories",
          "method": "post"
        },
        {
          "specification": "This operation updates a discussionboard_post_category record, identified by its ID. The request body must conform to IDiscussionboardPostCategory.IUpdate, strictly controlling which fields may be updated. Uniqueness of name, proper formatting for the description, and full normalization are enforced on updates. Only authenticated admin users can perform category updates. All field changes are validated, and any attempt to update a category with a duplicate name is rejected. Platform audit logs all category changes for compliance. On success, returns the updated entity.",
          "description": "Allows platform admins to update existing discussionboard_post_category entries by unique ID. Modification is strictly permission-checked for admin tokens. Supported fields in the request body include only those defined in requirements. Attempting to change a category to a duplicate name or providing invalid values returns an appropriate error. Audit logging ensures traceability of all configuration activity. Used in admin UIs for maintenance, per requirements.",
          "summary": "Update a discussionboard_post_category by ID (admin).",
          "parameters": [
            {
              "name": "id",
              "description": "ID of the post category to update",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields to update on the category; only updatable fields required.",
            "typeName": "IDiscussionboardPostCategory.IUpdate"
          },
          "responseBody": {
            "description": "The updated post category record.",
            "typeName": "IDiscussionboardPostCategory"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/postCategories/{id}",
          "method": "put"
        },
        {
          "specification": "This operation deletes an existing discussionboard_post_category record via its ID. This is an admin-only operation, validated strictly against possible constraints (e.g., categories in use by posts cannot be deleted). Soft or hard deletion is determined by application policy, but in all cases audit logs are updated accordingly. Attempting to delete a category in use or a missing record produces errors. Category-deletion is critical for platform taxonomy management and is only allowed by privileged admins, as described in requirements and schema comments.",
          "description": "Deletes a post category record from the discussionboard_post_category entity using its unique ID. Strict business rules apply—categories assigned to existing posts cannot be deleted or must be handled gracefully depending on platform policy. Operation is strictly controlled for admin authority; all deletions are tracked in audit logs. If the category is referenced by any post, attempts to delete will fail and return an appropriate error. Errors also produced if category does not exist. This API is tied to admin workflows and platform taxonomy maintenance.",
          "summary": "Delete a discussionboard_post_category by ID (admin only, constraint-enforced).",
          "parameters": [
            {
              "name": "id",
              "description": "ID of the category to delete",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/postCategories/{id}",
          "method": "delete"
        },
        {
          "specification": "This operation retrieves a paginated and filtered list of all discussionboard_post_tag records, supporting search by name and creation date ranges. The endpoint is designed for admin management of tags, supporting filtering, searching, pagination, and enforcing tag uniqueness. The request body must follow the IDiscussionboardPostTag.IRequest schema for filter parameters. This endpoint is important for admin-side content taxonomies, filters, and UI management. Members may use a subset for post filtering/discovery. The results support efficient tag management as described in the requirements and schema.",
          "description": "Fetches a paged, filtered list of discussionboard_post_tag entities from the database. Request body carries pagination, search, filter, and sorting info, enabling advanced management of tag taxonomies. Name-based search and high-volume control are included for admin UIs. Strict validation limits excessive page sizes or bad filters. Visibility of tags by members is supported via separate endpoints where needed. Errors on invalid parameters return 400; all results maintain full normalization for downstream analytics or configuration flows. This endpoint is referenced in taxonomic/tag filter design, admin workflows, and content analytics requirements.",
          "summary": "Retrieve a list of discussionboard_post_tag entities with filtering and pagination (admin UI, taxonomy).",
          "parameters": [],
          "requestBody": {
            "description": "Filtering and pagination details for tag retrieval (admin).",
            "typeName": "IDiscussionboardPostTag.IRequest"
          },
          "responseBody": {
            "description": "Paginated tag list that matches search/filters.",
            "typeName": "IPageIDiscussionboardPostTag"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/postTags",
          "method": "patch"
        },
        {
          "specification": "Implements GET to retrieve details of a specific post tag by ID for the discussion board. This operation covers retrieving metadata about a tag, used for categorizing or filtering posts. Associated with the 'discussionboard_post_tag' table, this endpoint ensures users (with appropriate permissions) can fetch a tag's name and related properties by its unique identifier.",
          "description": "This operation fetches a single post tag by its unique ID from the discussion board. The 'discussionboard_post_tag' table is an atomic, normalized table storing only the tag identifier and name, ensuring efficient tag management and search. Security is managed at the API layer and typically only admins (or backend) can delete tags, but all authenticated users may read tags for filtering purposes.\n\nThis operation will take as parameter the tag's ID (UUID) and returns the name and properties of the tag. The endpoint supports auditing—accesses may be logged for content analytics and security compliance. Input must be validated for correct UUID format. Error responses include tag not found (404) or invalid input (400).",
          "summary": "Get a specific post tag (discussionboard_post_tag) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "The unique identifier (UUID) of the post tag to retrieve.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Details of the discussionboard_post_tag.",
            "typeName": "IDiscussionboardPostTag"
          },
          "path": "/discussionboard/postTags/{id}",
          "method": "get"
        },
        {
          "specification": "Implements POST endpoint to create a new post tag for the discussion board. This operation is tied to the 'discussionboard_post_tag' table and enables admins or privileged users to create new tags for use in post categorization and filtering. It supports API validation for tag name uniqueness and format.",
          "description": "This operation allows for the creation of a new post tag in the discussion board system. The 'discussionboard_post_tag' table maintains all available tags in an atomic, normalized form, used by posts to enable filtering and search by topic or attribute.\n\nThe request body must include the desired tag name and optional metadata if supported. Input validation enforces name uniqueness and length/pattern requirements. Only admins (or specific roles) may invoke this endpoint.\n\nThe endpoint will create the record, store audit/log entries as required, and return the full created tag entity or a reference to it. Errors can include duplicate name (409), input format error (400), or unauthorized access (403).",
          "summary": "Create a new post tag (discussionboard_post_tag).",
          "parameters": [],
          "requestBody": {
            "description": "Data for creating a new post tag.",
            "typeName": "IDiscussionboardPostTag.ICreate"
          },
          "responseBody": {
            "description": "The created discussionboard_post_tag info.",
            "typeName": "IDiscussionboardPostTag"
          },
          "path": "/discussionboard/postTags",
          "method": "post"
        },
        {
          "specification": "Implements PUT to update an existing post tag in the discussion board. Linked to the 'discussionboard_post_tag' table, this operation allows changing the tag name or metadata via its unique ID. The operation is designed for admin access with business rule enforcement for name uniqueness.",
          "description": "Update an existing post tag by its unique identifier. The 'discussionboard_post_tag' table maintains all tag metadata and is kept atomic and normalized to avoid duplication. Only specific users (typically admins) may modify tag data via this endpoint.\n\nThe request must specify the tag ID in the URL and the new data in the request body (e.g., tag name). Validation enforces uniqueness and formatting. Mutation is audit-logged for compliance. Errors include tag not found (404), name conflict (409), or input error (400).",
          "summary": "Update a specific post tag (discussionboard_post_tag) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier (UUID) of the tag to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Updated tag data.",
            "typeName": "IDiscussionboardPostTag.IUpdate"
          },
          "responseBody": {
            "description": "Updated discussionboard_post_tag info.",
            "typeName": "IDiscussionboardPostTag"
          },
          "path": "/discussionboard/postTags/{id}",
          "method": "put"
        },
        {
          "specification": "Implements DELETE for removal of a single post tag by ID from the discussion board. This endpoint manipulates the 'discussionboard_post_tag' table and is usually restricted to admin or privileged use.",
          "description": "Delete a post tag from the system by its UUID. The 'discussionboard_post_tag' table holds all available tags in a normalized manner. This endpoint is protected and generally only admins can delete tags, especially since tags may be referenced by posts.\n\nTag deletion initiates audit logging and ensures referential integrity (cannot delete if referenced, or cascade if supported). Errors include not found (404), invalid input (400), or constraint violation (409/423).",
          "summary": "Delete a post tag (discussionboard_post_tag) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "The UUID of the tag to remove.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Confirmation of deletion (or error).",
            "typeName": "IDeleteResponse"
          },
          "path": "/discussionboard/postTags/{id}",
          "method": "delete"
        },
        {
          "specification": "Implements PATCH to search and list all post attachments for the discussion board. This endpoint provides filtered retrieval from the 'discussionboard_post_attachment' table with search, filter, and pagination support via request body.",
          "description": "This operation lists and filters all post attachments in the system. The 'discussionboard_post_attachment' table maintains atomic metadata for each file attached to a post (e.g., images, documents), allowing users to search by filename, type, post ID, or upload time. This API supports paging, searching, and sorting.\n\nOnly authorized users may access attachment info, which is useful for moderation, admin tools, or user viewing. Input can specify query parameters such as postId, type, or date ranges. Response includes paged result set with metadata, total count, and files info. Validation ensures only supported query fields are accepted. Errors include unauthorized (403), input error (400), or internal error (500).",
          "summary": "Search & list post attachments (discussionboard_post_attachment).",
          "parameters": [],
          "requestBody": {
            "description": "Attachment search and pagination filters.",
            "typeName": "IDiscussionboardPostAttachment.IRequest"
          },
          "responseBody": {
            "description": "List of matching attachments with pagination info.",
            "typeName": "IPageIDiscussionboardPostAttachment"
          },
          "path": "/discussionboard/postAttachments",
          "method": "patch"
        },
        {
          "specification": "Implements GET by ID to retrieve a single post attachment's details. Operates on the 'discussionboard_post_attachment' table and returns metadata about an attachment such as file URL, type, associated post, and upload timestamp.",
          "description": "Get the details for a specific post attachment by UUID. The 'discussionboard_post_attachment' table stores atomic data linking file uploads to posts, supporting retrieval for user download, preview, or moderation.\n\nUsers must provide the attachment's UUID in the URL. Access control may restrict by user/post or role. The response includes file URL, type, and metadata. Errors: not found (404), invalid id (400), or access denied (403).",
          "summary": "Get a specific post attachment (discussionboard_post_attachment) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Attachment's UUID.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Attachment metadata.",
            "typeName": "IDiscussionboardPostAttachment"
          },
          "path": "/discussionboard/postAttachments/{id}",
          "method": "get"
        },
        {
          "specification": "Implements POST endpoint for uploading or creating new post attachments. Tied to the 'discussionboard_post_attachment' table, enables users (with permission) to add file metadata associated with posts.",
          "description": "This adds a new post attachment record, corresponding to an uploaded file/image. The request body must include post ID, file URL, file type, and upload metadata as per 'discussionboard_post_attachment' schema. The endpoint validates permissions, uploads, file type, and size constraints at API/business logic layer.\n\nOn success, a new attachment record is added and full details are returned. Audit logging is performed (especially for user uploads) for moderation traceability. Errors: input format error (400), file rejected (415/422), unauthorized (403), or post not found (404).",
          "summary": "Create a new post attachment (discussionboard_post_attachment).",
          "parameters": [],
          "requestBody": {
            "description": "Attachment creation info.",
            "typeName": "IDiscussionboardPostAttachment.ICreate"
          },
          "responseBody": {
            "description": "Created post attachment object.",
            "typeName": "IDiscussionboardPostAttachment"
          },
          "path": "/discussionboard/postAttachments",
          "method": "post"
        },
        {
          "specification": "Updates a specific post attachment by ID for the discussion board. Modifies the metadata only (e.g., file type, description), using the 'discussionboard_post_attachment' table. Does not move or replace the file—only updates metadata references.",
          "description": "Update the atomic metadata of a post attachment by providing its UUID and the updated fields. The request body specifies which metadata to update (e.g., type). This endpoint allows editing/correction of uploaded file information (not the file content).\n\nIt checks for existing attachment, validates the update fields (including ownership/security context), updates the metadata, and persists audit logs. Errors: not found (404), forbidden (403), input error (400), or locked (409).",
          "summary": "Update a specific post attachment (discussionboard_post_attachment) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "The UUID of the attachment to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields to update for attachment metadata.",
            "typeName": "IDiscussionboardPostAttachment.IUpdate"
          },
          "responseBody": {
            "description": "Updated attachment metadata.",
            "typeName": "IDiscussionboardPostAttachment"
          },
          "path": "/discussionboard/postAttachments/{id}",
          "method": "put"
        },
        {
          "specification": "Deletes a single post attachment by ID from the 'discussionboard_post_attachment' table. This endpoint is usually for the original uploader or admin/moderator, depending on permissions and usage. Carries out atomic deletion of file reference and (possibly) file on S3/CDN.",
          "description": "Delete a post attachment by UUID. The endpoint verifies the attachment exists, checks user permissions, and removes the attachment metadata from the database (and may trigger removal from file storage as per business logic).\n\nOperation is audit-logged for compliance (file deletion is irreversible except in special admin recovery). Errors: not found (404), forbidden (403), conflict (409), or invalid UUID (400).",
          "summary": "Delete a post attachment (discussionboard_post_attachment) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Post attachment UUID to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Confirmation of attachment deletion.",
            "typeName": "IDeleteResponse"
          },
          "path": "/discussionboard/postAttachments/{id}",
          "method": "delete"
        },
        {
          "specification": "Implements PATCH to search and retrieve comments for the discussion board. Returns paged/filterable comment list from 'discussionboard_comments' with support for filtering by post ID, author, parent, is_deleted, and paginated result set.",
          "description": "Search and list all comments with flexible filters—by post, author, parent comment (for threading/nesting), and deletion status. Operates on the 'discussionboard_comments' table, which normalizes all comments irrespective of depth or content length.\n\nRequest body defines flexible filter set (UUIDs, text, date ranges, flags for edits/deletes). Supports pagination, sorting, and text search. Output is a paginated list of comments plus total counts. Only authorized users may access, and access is logged for moderation/audit. Errors: input error (400), forbidden (403), or internal (500).",
          "summary": "Search and list comments (discussionboard_comments) with filter and paging.",
          "parameters": [],
          "requestBody": {
            "description": "Comment search/filter definition and pagination info.",
            "typeName": "IDiscussionboardComments.IRequest"
          },
          "responseBody": {
            "description": "Paginated comment result set.",
            "typeName": "IPageIDiscussionboardComments"
          },
          "path": "/discussionboard/comments",
          "method": "patch"
        },
        {
          "specification": "Implements GET to retrieve a specific comment by its UUID. Operates on the 'discussionboard_comments' table, providing full metadata and supporting audit, moderation and in-context display. Permission may depend on thread visibility and deletion flags.",
          "description": "Retrieves one comment by ID—the 'discussionboard_comments' table stores content, author, post relation, edit status, and visibility flags. The endpoint validates that the comment exists (and is visible to the caller if not admin/mod), and returns its atomic data.\n\nAudit logging and permission checks apply. If found and authorized, full comment metadata is returned. Errors: comment not found (404), forbidden (403), or input error (400).",
          "summary": "Get a specific comment (discussionboard_comments) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "UUID of the comment to fetch.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Atomic comment record.",
            "typeName": "IDiscussionboardComments"
          },
          "path": "/discussionboard/comments/{id}",
          "method": "get"
        },
        {
          "specification": "Implements POST to create a new comment in the discussion board. Adds a new 'discussionboard_comments' record, validating inputs: post ID, parent comment (if a reply), author context, and comment text. Input also supports nesting and content moderation tagging as required.",
          "description": "This operation enables authenticated users to add comments to posts or as replies in the system. The 'discussionboard_comments' table represents each atomic comment, supporting hierarchical threading by parent comment ID and audit logging for content moderation.\n\nThe request body includes the owning post's UUID, parent comment UUID if a reply, content string, and user context (inferred from session). Input is validated for text length, nesting rules, and POST/author/parent relationship integrity. On success, the newly created comment record is returned. Errors: post or parent not found (404), input invalid (400), unauthorized (403), or locked (409).",
          "summary": "Create a new comment (discussionboard_comments).",
          "parameters": [],
          "requestBody": {
            "description": "All info required to insert a new comment.",
            "typeName": "IDiscussionboardComments.ICreate"
          },
          "responseBody": {
            "description": "Created comment data.",
            "typeName": "IDiscussionboardComments"
          },
          "path": "/discussionboard/comments",
          "method": "post"
        },
        {
          "specification": "Update an existing comment in the discussion board. This operation allows the user to edit a comment, typically limited to the comment's author or users with appropriate permissions (such as moderators/admins). The underlying Prisma schema is 'discussionboard_comments', which handles threaded discussions and supports audit trails for edits. This operation must enforce business logic around who can edit (authors, moderators, admins) and mark the comment as edited in the database. References 3NF compliance by only updating atomic fields (content, is_edited, updated_at), not denormalized data. Auditing should be supported via update timestamp and edit flags; related moderation/audit logs should be generated as needed. Error conditions include: comment not found, permission denied, or invalid input.",
          "description": "This operation updates the content of a specific comment in the discussion board. The Prisma schema 'discussionboard_comments' enforces that each comment is uniquely identified (id), and associates it with a post (post_id), an author (author_id), and optionally a parent comment (for threading). Only the user who authored the comment, or a user with moderator/admin privileges, can perform updates. The operation will update the 'content', set 'is_edited' to true, and update the 'updated_at' timestamp. If the user is a moderator or admin, an audit log or moderation record should be issued. Proper validation is required: if the comment doesn't exist, is already deleted, or the user isn't authorized, an error is returned. After updating, the operation returns the full updated comment entity including all fields necessary for display and auditing.",
          "summary": "Update an existing comment (discussionboard_comments table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the comment to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Updated content and optional edit info for the comment.",
            "typeName": "IDiscussionboardComment.IUpdate"
          },
          "responseBody": {
            "description": "The updated comment object.",
            "typeName": "IDiscussionboardComment"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/comments/{id}",
          "method": "put"
        },
        {
          "specification": "Delete (soft-delete) a comment in the discussion board. This endpoint targets the 'discussionboard_comments' Prisma schema table and supports the requirements for allowing both content authors and moderators/admins to remove inappropriate or undesired comments. Rather than physically deleting the comment, this operation sets the 'is_deleted' flag and updates relevant timestamps to enable future recovery or audit. It supports audit logging and compliance requirements. Business rules enforce who can delete a comment (the original author, moderators, or admins) and ensure that deletions are appropriately logged for transparency. Errors may occur if the comment does not exist, is already deleted, or the user lacks appropriate permission. On successful deletion, returns the updated comment object.",
          "description": "Soft-deletes the specified comment using its unique identifier, as defined in the 'discussionboard_comments' table. This operation marks the comment as deleted by updating the 'is_deleted' flag and the timestamps, rather than removing it from the database. Only the comment author, moderators, or admins are allowed to perform this action. The deletion is logged for moderation and audit trail. The response includes the updated comment entity, reflecting the new deletion status and updated audit fields. If the comment is already deleted or not found, or the user lacks sufficient privileges, returns an error.",
          "summary": "Soft-delete (mark as deleted) a comment (discussionboard_comments table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the comment to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "The soft-deleted comment object with updated fields.",
            "typeName": "IDiscussionboardComment"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/comments/{id}",
          "method": "delete"
        },
        {
          "specification": "Search and filter likes in the discussion board. This PATCH operation returns a paginated, filterable list of likes that belong to posts or comments, reflecting the structure of the 'discussionboard_likes' table. The likes table records which user liked which post or comment (polymorphic), with soft-deletion support. Supports filtering by user, post, comment, date, as well as sort order and pagination, supporting analytics, audit, and user engagement feature needs. This is particularly important for admin or moderation dashboards, or for users checking their engagement history.",
          "description": "Returns a paginated and filterable list of likes in the discussion board, based on criteria provided in the request body. The 'discussionboard_likes' table supports polymorphic likes for both posts and comments, recorded with timestamps and user references. Input allows filtering by user, target (post/comment), like status (active, deleted), and sorting/pagination controls. Used by admins, moderators for engagement analysis, or for displaying user activity feeds. Response includes array of like objects and pagination metadata. Proper permissions ensure that only authorized users (e.g., own likes for members, all likes for admin/moderator) can use expanded query options.",
          "summary": "List and search likes (discussionboard_likes table, paginated/filterable).",
          "parameters": [],
          "requestBody": {
            "description": "Filter, search, and pagination parameters for likes search.",
            "typeName": "IDiscussionboardLike.IRequest"
          },
          "responseBody": {
            "description": "Paginated list of like objects and metadata.",
            "typeName": "IPageIDiscussionboardLike"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/likes",
          "method": "patch"
        },
        {
          "specification": "Retrieve detailed information about a specific like event in the discussion board. This operation references the 'discussionboard_likes' schema, where each like is uniquely identified and associated with either a post or a comment. Used in auditing, user activity feeds, moderation, and to display like-related details. May include information such as who liked, what content was liked, when, and status (active, deleted). Errors arise if the like does not exist or if permission is denied (e.g., if the like is only visible to the owner or admins).",
          "description": "Returns the full details of a specific like by its unique identifier. The 'discussionboard_likes' table contains records of user likes for both posts and comments. This operation exposes all relevant attributes, including content type (post/comment), user identity, timestamp, and status. Used for audit trails and for displaying engagement details on user profiles or dashboards. Proper permission checks are required: users may retrieve their own like records, moderators/admins may retrieve any like. If the like is missing or permission is denied, returns an error.",
          "summary": "Get a specific like by ID (discussionboard_likes table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the like event.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Like record details for the specified like ID.",
            "typeName": "IDiscussionboardLike"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/likes/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new like in the discussion board system. This operation inserts a record into 'discussionboard_likes', supporting requirements for tracking user engagement on posts/comments. The table supports polymorphic referencing (post_id or comment_id) and is designed to ensure a user can only like a given item once (unique constraints). Handles business logic for like creation, including checking for duplicates and updating associated timestamps. Supports audit and analytics needs. Permissions: Only authenticated members, moderators, or admins may create likes; must reference existing, non-deleted target. Returns the created like entity.",
          "description": "Creates a new like entry in the 'discussionboard_likes' table, pointing to a specific post or comment and registering a user's engagement. The request includes details such as which content is liked (post or comment ID), and the system enforces that each user can only like each item once and the content must exist and not be deleted. The new like is recorded along with metadata such as the acting user and timestamp. The response contains the complete like record. If a like on the same item by this user already exists (and is not deleted), or if input references non-existent or deleted content, returns an error.",
          "summary": "Create a new like event (discussionboard_likes table).",
          "parameters": [],
          "requestBody": {
            "description": "Payload for creating a like (includes user, post or comment ID).",
            "typeName": "IDiscussionboardLike.ICreate"
          },
          "responseBody": {
            "description": "The newly created like record.",
            "typeName": "IDiscussionboardLike"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/likes",
          "method": "post"
        },
        {
          "specification": "Update a like event in discussion board (e.g., for undoing a like or modifying polymorphism details). Targets 'discussionboard_likes' table, where likes can be updated by the owner (undo/redo like, update fields), or by admins for moderation or recoverability. The operation checks unique and permission constraints and updates relevant fields, such as re-assigning a like to a different content item if business logic admits. All changes are audited and permission-checked. Errors: non-existent like, update forbidden by business or permission rules.",
          "description": "Updates an existing like event using its unique ID. The request body specifies which field(s) to update—likely either to redo a like (if previously soft-deleted), or to change the liked target if permitted. Handles input validation and permission (- only owners, admins, or moderators may update). All updates are logged. The response is the updated like record. Errors if the like does not exist, or updates are not allowed per business rules.",
          "summary": "Update a specific like (discussionboard_likes table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the like event to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Payload for updating a like event.",
            "typeName": "IDiscussionboardLike.IUpdate"
          },
          "responseBody": {
            "description": "Updated like object reflecting applied changes.",
            "typeName": "IDiscussionboardLike"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/likes/{id}",
          "method": "put"
        },
        {
          "specification": "Delete (soft-delete) a like event from the discussion board. This operation targets the 'discussionboard_likes' table and supports user engagement management standards, such as allowing users to undo likes or supporting moderation rollbacks. Instead of physically removing a like, it sets the 'deleted_at' timestamp, allowing for recoverability and audit. Permission rules state that only the like's owner or an admin/moderator can perform this action. Returns the updated like entity with new status. Errors: like not found, permission denied, or already deleted.",
          "description": "Soft-deletes (unlikes) a like event for a post or comment, based on its unique identifier (id). The operation sets the 'deleted_at' timestamp, thus undoing the like while maintaining historical/audit records. Only the user who created the like or privileged users (admins/moderators) can perform the action. The endpoint returns the updated like entity after the soft-delete. If the like event does not exist, is already deleted, or the requester lacks permission, an error is returned.",
          "summary": "Soft-delete (unlike) a like on post or comment (discussionboard_likes table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the like event to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "The like record after soft-deletion.",
            "typeName": "IDiscussionboardLike"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/likes/{id}",
          "method": "delete"
        },
        {
          "specification": "Filter, search, and paginate reported content in the discussion board for moderation or user self-audit. Implements report searching/analytics use cases against the 'discussionboard_reports' table, supporting polymorphic reporting of posts and comments. Admins/moderators can search all reports; members may search only their own. Functional for moderation dashboards, abuse analytics, and user report history tools. Supports filters (by user, type, date, content target), sort and pagination for efficient handling of large data sets.",
          "description": "Returns a paginated and filterable list of reported content in the discussion board. The backend 'discussionboard_reports' records all content reports, referencing either posts or comments, and includes who reported, report reason/code, timestamps, and status. Admins/moderators can filter by all criteria; regular members are restricted to their own reports. The response provides an array of report records and pagination metadata. Input allows precise control over sorting, filtering, and paging scope. Use cases: moderator queue, abuse/spam trends, user report histories.",
          "summary": "List/Search reported content (discussionboard_reports table, paginated/filterable).",
          "parameters": [],
          "requestBody": {
            "description": "Request parameters for filtering/searching reported content.",
            "typeName": "IDiscussionboardReport.IRequest"
          },
          "responseBody": {
            "description": "Paginated collection of report records and metadata.",
            "typeName": "IPageIDiscussionboardReport"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reports",
          "method": "patch"
        },
        {
          "specification": "Retrieve details of a single report in the discussion board system. Used for auditing, moderation, or display of report status to members who filed them. Draws data from the 'discussionboard_reports' table, which supports polymorphic reporting for both posts and comments, records reason, timestamp, and user info. Visibility is governed by role: members see their own reports, moderators/admins can access any report.",
          "description": "Returns the full data for a report, identified by its unique ID. The backend table 'discussionboard_reports' provides structured data for compliance, moderation workflow, and user notification. The result includes content references (post or comment), reporter, reason codes, creation and soft-delete timestamps. Access control ensures only those with legitimate need have access (reporter, moderator, or admin). Errors on missing reports or insufficient permissions.",
          "summary": "Get a specific report by ID (discussionboard_reports table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the content report to retrieve.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Report object with full fields for the specific ID.",
            "typeName": "IDiscussionboardReport"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reports/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new content report in the discussion board. This operation fulfills the abuse, spam, and guideline violation reporting feature by allowing users to submit a report targeting a specific post or comment. Maps to the 'discussionboard_reports' table, which enforces unique (user,target) reporting and audit compliance. Required fields: reported target (post or comment), reporter, reason code, and optional details. The system ensures that duplicate reporting by the same user is not allowed. Permission: only authenticated users may report. Returns the created report record.",
          "description": "Creates a new report for an abusive or spam content item—either a post or comment—by inserting into the 'discussionboard_reports' table. The input identifies the content (post or comment ID), type of violation, and details, associated with the reporting user's account. On success, returns the full created report record including references and audit fields. Errors for double-reporting by same user on a target, nonexistent or already moderated/deleted content, or if input is incomplete. All actions are auditable; appropriate notifications generated for moderator queue.",
          "summary": "Create a new content report (discussionboard_reports table).",
          "parameters": [],
          "requestBody": {
            "description": "Input data for report creation (target ref, reason, details).",
            "typeName": "IDiscussionboardReport.ICreate"
          },
          "responseBody": {
            "description": "Newly created report object.",
            "typeName": "IDiscussionboardReport"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reports",
          "method": "post"
        },
        {
          "specification": "Update an existing content report (e.g., to change details or withdraw a report) in the discussion board. This targets the 'discussionboard_reports' table and allows reporters to edit details (before review), or admins/moderators to annotate or update status. The operation applies business rules around who may update (only own reports pre-review, moderators/admins post-review). Supports full audit compliance. Returns the updated report entity on success; errors if not found or permissions invalid.",
          "description": "Updates the specified content report by ID in the 'discussionboard_reports' table. Input may contain changes to fields such as reason code or details. Permissions depend on status: users may update their own unreveiwed reports, admins can update any, and moderators update as permitted by workflow policy. All updates reflect instantly in audit logs. The operation returns the full updated report object. Errors for missing report, insufficient permission, or if the report has been reviewed/locked against change.",
          "summary": "Update a content report by ID (discussionboard_reports table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique ID of the content report to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Update payload for a content report.",
            "typeName": "IDiscussionboardReport.IUpdate"
          },
          "responseBody": {
            "description": "Updated report object post-apply.",
            "typeName": "IDiscussionboardReport"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reports/{id}",
          "method": "put"
        },
        {
          "specification": "Soft-delete (withdraw) a content report in the discussion board. This operation, mapped to the 'discussionboard_reports' table, marks the report as deleted for audit and moderation purposes, instead of permanent removal. Users may withdraw their own reports before review; admins/moderators may delete during moderation/appeal. Soft-deletion is effected via setting the deleted_at field. All actions logged for compliance. Returns the report object after soft-delete. Errors: missing report, not allowed to delete (e.g., already reviewed/locked), lack of permission.",
          "description": "Withdraws or soft-deletes a specifically identified content report, by updating its 'deleted_at' field in the 'discussionboard_reports' table. Only the original reporter (before moderation) or privileged users (moderator, admin) may perform this operation. On success, returns the updated report record with deletion timestamp. Errors arise if the report does not exist, was already deleted, has been reviewed/locked, or the user lacks sufficient privileges. All deletions are audit logged for compliance.",
          "summary": "Soft-delete (withdraw) a content report (discussionboard_reports table).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the report to withdraw soft-delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "The report record after soft-deletion.",
            "typeName": "IDiscussionboardReport"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reports/{id}",
          "method": "delete"
        },
        {
          "specification": "Implements a paginated, searchable, and sortable retrieval of moderation action logs in the discussion board platform. Results allow filtering by actor, target user, action type, or affected content. Provides moderation transparency for audit or review needs. Associated Prisma table: discussionboard_moderation_action.",
          "description": "This operation enables authorized users (such as moderators and admins) to retrieve a filtered, paginated list of all moderation actions taken across the platform. The endpoint supports searching by moderator/admin (actor), target user, post or comment, action type (e.g. delete_post, hide_comment, warning), date range, or specific keywords in reason/notes fields. The request enforces role-based authorization. Results include actor/target user information, content targeted (if any), action type and reason, and timestamp of the action. Pagination, sorting (by created_at, action_type, actor), and customizable filters are supported for efficient review. Only privileged users can use this endpoint; regular members do not have access. Error handling includes invalid query validation, insufficient permissions, and server issues. This operation is typically used in conjunction with detailed moderation action or audit endpoints.",
          "summary": "Retrieve a list of moderation actions (discussionboard_moderation_action) with searching, filtering, and pagination.",
          "parameters": [],
          "requestBody": {
            "description": "List/search/pagination parameters for moderation actions lookup request.",
            "typeName": "IDiscussionboardModerationAction.IRequest"
          },
          "responseBody": {
            "description": "Paged list of moderation actions with relevant details and pagination metadata.",
            "typeName": "IPageIDiscussionboardModerationAction"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderationActions",
          "method": "patch"
        },
        {
          "specification": "Retrieves full details about a specific moderation action using its unique ID. Associated Prisma table: discussionboard_moderation_action.",
          "description": "This operation allows authorized moderators or admins to retrieve all available information about a particular moderation action, including actor, target user, affected post or comment, action type, rationale, and timestamp. Useful for moderation history review, escalation, appeals, or audit purposes. Only the action's unique ID is required as a path parameter. Ensures permissions restrict access to privileged users; regular users cannot access this data. Error responses include not-found, insufficient-permission, and server issues.",
          "summary": "Look up a single moderation action (discussionboard_moderation_action) by its ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the moderation action to retrieve.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Detailed information for a single moderation action.",
            "typeName": "IDiscussionboardModerationAction"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderationActions/{id}",
          "method": "get"
        },
        {
          "specification": "Allows authorized moderators or admins to record a new moderation action, such as deleting content, hiding posts, issuing warnings, or muting users. Associated Prisma table: discussionboard_moderation_action.",
          "description": "This endpoint enables the creation and logging of a new moderation action entry, recording all relevant metadata such as the acting moderator/admin (actor), target user, affected post/comment (if any), action type, reason, and timestamp. Input validation enforces all required foreign keys, action classification strings, and timestamp format. The endpoint enforces role-based permissions to prevent member users from creating moderation actions. Successful creation returns the new record's ID and core data. This operation is closely related to audit logging and user suspension flows; downstream systems may subscribe to these events for notification or compliance workflows. Error handling includes validation failures, permission denied, or integrity constraint issues.",
          "summary": "Create a new moderation action (discussionboard_moderation_action).",
          "parameters": [],
          "requestBody": {
            "description": "All fields required for a new moderation action, including actor, target, type, reason, references, and timestamp.",
            "typeName": "IDiscussionboardModerationAction.ICreate"
          },
          "responseBody": {
            "description": "Resulting moderation action after creation, including assigned ID.",
            "typeName": "IDiscussionboardModerationAction"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderationActions",
          "method": "post"
        },
        {
          "specification": "Updates an existing moderation action record, supporting corrections or post-hoc annotation of internal audit actions. Associated Prisma table: discussionboard_moderation_action.",
          "description": "This endpoint allows authorized moderators/admins to update details of a previously created moderation action, such as editing the reason, additional notes, or fixing metadata errors. All updates are traced for audit. Only specific fields are permitted to be updated (e.g., action_type, reason, references); actor or target user cannot typically be changed unless correcting mistakes with admin-level privileges. The request requires the moderation action's ID in the route and the update data in the request body. Returns the updated record on success. Permission and data validation errors are handled explicitly. Related endpoints include moderation action detail and audit log write.",
          "summary": "Update an existing moderation action (discussionboard_moderation_action) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the moderation action to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields to update in the moderation action. Immutable fields must be excluded or ignored.",
            "typeName": "IDiscussionboardModerationAction.IUpdate"
          },
          "responseBody": {
            "description": "The moderation action after successful update.",
            "typeName": "IDiscussionboardModerationAction"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderationActions/{id}",
          "method": "put"
        },
        {
          "specification": "Deletes (removes from search, soft-delete) a moderation action by its ID. Associated Prisma table: discussionboard_moderation_action.",
          "description": "This operation allows authorized moderators or admins to delete (typically soft-delete for audit compliance) a specific moderation action from the system, as identified by its unique ID. This action is logged for audit. The user must provide the moderation action ID as a path parameter. Deletions are typically restricted by business rules, e.g., only actions without downstream dependency or when performed in error. Error scenarios include not found, insufficient permissions, or cascading cleanup constraints. Closely related to moderation and audit endpoints for transparency.",
          "summary": "Delete a moderation action (discussionboard_moderation_action) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the moderation action to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Details or status after delete operation. Typically returns the deleted moderation action or a confirmation message.",
            "typeName": "IDiscussionboardModerationAction"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/moderationActions/{id}",
          "method": "delete"
        },
        {
          "specification": "Provides paginated, filtered retrieval of moderation report review logs, allowing search by reviewer, report status, or affected content. Associated Prisma table: discussionboard_report_review.",
          "description": "This endpoint enables authorized moderators and administrators to retrieve a list of report review records, supporting search and filters by reviewer ID, report status (resolved/rejected/pending), associated post/comment, review timestamps, and other optional metadata. Pagination and sorting are built-in for efficient workflows. Permission checks ensure members cannot access this review data. Used for moderation oversight, audit, and review dashboard UI. Partial or fuzzy matching supported on reviewer comments or notes. Errors include invalid queries, unauthorized access, or server issues.",
          "summary": "Search and paginate through report review logs (discussionboard_report_review).",
          "parameters": [],
          "requestBody": {
            "description": "Request data for searching, filtering, and paginating through report reviews.",
            "typeName": "IDiscussionboardReportReview.IRequest"
          },
          "responseBody": {
            "description": "Paged list of report review records with their metadata and related entity references.",
            "typeName": "IPageIDiscussionboardReportReview"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reportReviews",
          "method": "patch"
        },
        {
          "specification": "Retrieves all available details about a specific report review using its unique ID. Associated Prisma table: discussionboard_report_review.",
          "description": "This operation allows privileged users (moderators, admins) to get a full record of a report review, identified by its unique ID. Response includes reviewing moderator/admin, target entities (report, post, comment), review status, notes, and timestamp. Used for litigation, appeals, and audit trails. The only required input is the review's unique ID. Only privileged users are authorized. Errors include record-not-found and insufficient-permission.",
          "summary": "Retrieve a single report review (discussionboard_report_review) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique report review ID to look up.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Detailed report review record.",
            "typeName": "IDiscussionboardReportReview"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reportReviews/{id}",
          "method": "get"
        },
        {
          "specification": "Creates a new review record for a user report—records the outcome, reviewer, and affected content. Associated Prisma table: discussionboard_report_review.",
          "description": "This operation enables a moderator or admin to record the review of a user-submitted abuse/spam report, capturing the reviewed report ID, reviewer user ID, review status, linked post or comment, and optional notes/comments. Validation ensures required relations and correct status codes (e.g. resolved/rejected). Used in moderation workflows and reporting dashboards. Permissions enforce only authorized reviewers. Error handling includes invalid input, duplicate reviews, or insufficient permission.",
          "summary": "Create a new report review (discussionboard_report_review).",
          "parameters": [],
          "requestBody": {
            "description": "Report review creation info, specifying the reviewed report, reviewer, decision/status, notes, etc.",
            "typeName": "IDiscussionboardReportReview.ICreate"
          },
          "responseBody": {
            "description": "The complete report review record as created.",
            "typeName": "IDiscussionboardReportReview"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reportReviews",
          "method": "post"
        },
        {
          "specification": "Updates a report review record, supporting correction of status, reviewer notes, or linked content references. Associated Prisma table: discussionboard_report_review.",
          "description": "This operation enables updating selected fields of a report review record, such as modifying review status, adding notes, or adjusting linked content/post references. Update traceability is enforced via audit. Only moderators/admins are authorized. Record is identified by its unique ID; updated data is supplied in the request body. Returns updated record or error for validation/permission issues. Typically linked with moderation dashboards and audit log flows.",
          "summary": "Update an existing report review (discussionboard_report_review) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the report review to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields to update for the report review record.",
            "typeName": "IDiscussionboardReportReview.IUpdate"
          },
          "responseBody": {
            "description": "The report review record after update.",
            "typeName": "IDiscussionboardReportReview"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reportReviews/{id}",
          "method": "put"
        },
        {
          "specification": "Deletes a report review record by ID; usually a soft-delete for audit compliance. Associated Prisma table: discussionboard_report_review.",
          "description": "Authorized moderators and admins can remove (soft-delete) a report review, identified by its unique ID. Deletion is audited and subject to business logic (e.g., only allowable in specific states). Record is not physically deleted for traceability. Path parameter is the review ID. Related to moderation and audit data flows. Errors include unauthorized access, record not found, or business rule constraint violations.",
          "summary": "Delete a report review (discussionboard_report_review) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the report review to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Deleted review record or confirmation message.",
            "typeName": "IDiscussionboardReportReview"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/reportReviews/{id}",
          "method": "delete"
        },
        {
          "specification": "Retrieves a paginated, searchable listing of warning records, filtered by issuer, recipient, type, or relation to reported content. Associated Prisma table: discussionboard_warning.",
          "description": "This endpoint provides moderators and admins with access to lists of warnings issued on the platform, supporting filters such as issued_by, issued_to, warning_type, related post/comment, and date ranges. Pagination, sorting, and keyword search enable efficient review. Only privileged users may access this endpoint. Used for audit, user appeal, or compliance tracing. Errors include invalid queries, insufficient permissions, and server issues.",
          "summary": "Search, filter, and page through warnings issued (discussionboard_warning).",
          "parameters": [],
          "requestBody": {
            "description": "Filtering and search options for warnings list request.",
            "typeName": "IDiscussionboardWarning.IRequest"
          },
          "responseBody": {
            "description": "Paginated list of warning records with metadata and references.",
            "typeName": "IPageIDiscussionboardWarning"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/warnings",
          "method": "patch"
        },
        {
          "specification": "Retrieves detailed information about a specific warning issued, using the warning's unique ID. Associated Prisma table: discussionboard_warning.",
          "description": "Privileged users (moderators, admins) can retrieve information for a single warning record, including issuer, recipient, rationale, type, related post/comment, and timestamp. Used in user appeals, moderation dashboards, and audit reviews. Input is only the warning's unique ID as a path parameter. Return includes all normalized warning data. Access is denied to non-privileged users or if the record does not exist. Typical errors: not found, unauthorized, server failures.",
          "summary": "Get details for a specific warning (discussionboard_warning) by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique warning ID to retrieve.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Complete warning record for the given ID.",
            "typeName": "IDiscussionboardWarning"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/warnings/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new warning record for a user. This operation is linked to the discussionboard_warning table and allows a moderator or admin to issue a warning to a user for a specific behavior. Each warning must reference the issuer, recipient, and optionally, the related post or comment, as well as the warning type and message. All assignments are auditable and traceable. This endpoint is used when moderators or admins want to formally warn a user, which can later be used as grounds for a ban or escalated moderation action.",
          "path": "/discussionboard/warnings",
          "method": "post",
          "description": "This POST endpoint adds a new warning to the discussionboard_warning table. The warning includes information about who issued it, the user receiving the warning, and can relate to specific posts or comments for context. The warning_type categorizes the infraction (such as 'abuse', 'spam', etc.) and the message provides a human-readable rationale for the warning. Moderators and admins are able to use this endpoint as part of their toolkit for progressive disciplinary actions. Soft deletion or edits to warnings are not allowed here—warnings are permanent for compliance and auditability. This API integrates closely with audit logs to ensure transparency and is expected to trigger notifications to the affected user. Typical use involves user-facing moderation UIs. Warnings reference the discussionboard_user, discussionboard_post, and discussionboard_comments tables, and must be used in compliance with the platform's moderation policies.",
          "summary": "Create a new warning in discussionboard_warning table.",
          "parameters": [],
          "requestBody": {
            "description": "Information about the new warning to issue.",
            "typeName": "IDiscussionboardWarning.ICreate"
          },
          "responseBody": {
            "description": "The created warning record.",
            "typeName": "IDiscussionboardWarning"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Update an existing warning in the discussionboard_warning table. This updates the warning_type or message, or links it to different references as needed by a moderator or admin (e.g., clarify rationale, attach to a different post or comment). Primarily used for correction or clarification of issued warnings. Only moderators or admins may update warnings, and all updates should be audit-logged.",
          "path": "/discussionboard/warnings/{id}",
          "method": "put",
          "description": "This PUT endpoint is used to edit an existing warning. The warning is uniquely identified by its id path parameter. Allowed edits typically include modifying the warning_type or message, possibly adjusting associated post/comment references. All such modifications are subject to audit by the discussionboard_audit_log. This operation restricts update permissions to the original issuer, moderator, or admin roles. Other fields (such as issued_by, issued_to, and issued_at) are immutable for audit purposes. Edits are designed for correction, not for hiding infraction history.",
          "summary": "Edit a warning in discussionboard_warning table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the warning to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "The updated data for the warning (modifying type, message, or references).",
            "typeName": "IDiscussionboardWarning.IUpdate"
          },
          "responseBody": {
            "description": "The updated warning record.",
            "typeName": "IDiscussionboardWarning"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Delete a warning entry from the discussionboard_warning table. This operation supports both hard and soft delete policies, depending on administrative configuration. Only moderators or admins may delete warnings. The endpoint ensures audit logging for traceability and compliance with the platform’s disciplinary process. Deletion may also notify the affected user.",
          "path": "/discussionboard/warnings/{id}",
          "method": "delete",
          "description": "This DELETE endpoint removes a warning from the system, identified by its id. The operation can be either a hard or soft delete depending on system settings, but for most compliance/audit scenarios, soft deletes are preferred. Only moderation and admin roles can perform deletions. The system logs the deletion event, and may trigger a notification to the warning recipient.",
          "summary": "Delete a warning from discussionboard_warning table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the warning to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "List or search bans from the discussionboard_ban table with complex filtering, search, and pagination support. This endpoint allows admins and moderators to query ban history by user, date, ban type, status (active/expired), or related warnings. Useful for administrative review and reporting. PATCH method is selected for flexible query request bodies.",
          "path": "/discussionboard/bans",
          "method": "patch",
          "description": "This PATCH endpoint provides advanced ban listing and search capabilities, leveraging flexible request bodies for filtering by user, ban type, time range, status, or warning linkage. Results are paginated and can be sorted by relevant ban fields. Primarily accessed by admin and moderator UIs for audit, ban review, and compliance monitoring. Relies on the discussionboard_ban table and references users, warnings, and issuer relationships for joined queries. Support for fine-grained search eliminates the need for multiple simple GET endpoints, centralizing administrative search logic for bans.",
          "summary": "Search/list bans from discussionboard_ban table (advanced query).",
          "parameters": [],
          "requestBody": {
            "description": "Filter and pagination settings for searching bans.",
            "typeName": "IPageIDiscussionboardBan.IRequest"
          },
          "responseBody": {
            "description": "Paginated result of bans matching the search criteria.",
            "typeName": "IPageIDiscussionboardBan"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Retrieve detailed info about a specific ban entry from the discussionboard_ban table. This endpoint is essential for moderators or admins reviewing the context, rationale, and timeline for an account mute/ban action. The response includes issuer, recipient, type, start/expiry, and associated warning if any. Used primarily on admin and moderator audit/review pages.",
          "path": "/discussionboard/bans/{id}",
          "method": "get",
          "description": "This GET endpoint returns a detailed ban record from the discussionboard_ban table by id. Exposes all relevant details for moderation/ban audits: involved users, ban timing (issued/expires), rationale, and warning links. Only accessible by moderator and admin roles. The endpoint underpins UI flows for inspecting specific bans, appeals processing, or reviewing ban histories per user.",
          "summary": "Get a specific ban entry from discussionboard_ban table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the ban record to fetch.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Complete ban details, including issuer, recipient, type, times, and warning link.",
            "typeName": "IDiscussionboardBan"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Create a new ban record in the discussionboard_ban table. This endpoint supports issuing temporary or permanent bans, with mandatory references to issuer, recipient, rationale, and optionally a related warning. Used by moderators/admins as the main ban/mute workflow, captures full audit data for compliance and history. The API enforces that only eligible roles can initiate new bans and validates active bans for the target.",
          "path": "/discussionboard/bans",
          "method": "post",
          "description": "This POST endpoint creates a ban record for a user, given required details like the banned user's id, the issuer, type (e.g., mute/temp/perm), reason, and time periods. If the ban is related to a prior warning, the warning_id may be set. The system audits all ban actions and triggers notifications to the affected user. Logic will check and prevent overlapping active bans as per business rules. Used as the primary enforcement mechanism for moderation escalation beyond warnings.",
          "summary": "Create a new ban record in discussionboard_ban table.",
          "parameters": [],
          "requestBody": {
            "description": "Fields for new ban record (user, issuer, type, reason, and expiry).",
            "typeName": "IDiscussionboardBan.ICreate"
          },
          "responseBody": {
            "description": "The newly created ban record.",
            "typeName": "IDiscussionboardBan"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Update a ban record in the discussionboard_ban table. Moderators/admins can adjust ban expiry, type, reason, or attach a warning after creation. Some fields, like issuer and issued_at, remain immutable. Audit logs must capture all updates. This allows corrections, extensions, or classification of bans for compliance.",
          "path": "/discussionboard/bans/{id}",
          "method": "put",
          "description": "This PUT endpoint edits an existing ban record - for instance, to adjust the expiry or type of an active ban due to appeals or changing circumstances. Allowed for moderators and admins only. Requires a full update payload; certain fields cannot be changed (banned_by_id, issued_at). Edits are always logged in audit trails. The endpoint is essential for ban workflow flexibility and error correction.",
          "summary": "Update a ban record in discussionboard_ban table.",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the ban record to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Payload of ban updates: expiry, type, reason, related warning.",
            "typeName": "IDiscussionboardBan.IUpdate"
          },
          "responseBody": {
            "description": "The updated ban record.",
            "typeName": "IDiscussionboardBan"
          },
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Delete (remove) a ban record from the discussionboard_ban table. Supports ban reversals (unban), admin removals, or correction of ban errors. Only admins or moderators can delete a ban record, and all deletions must be logged for compliance. Deletion action triggers events in audit log and may cause related notifications.",
          "path": "/discussionboard/bans/{id}",
          "method": "delete",
          "description": "This DELETE endpoint removes a ban record by id—serving as the reversal of a mute/ban or to support ban record cleanup. Only accessible to moderator/admin roles, who must provide a valid reason in audit logs. The deleted ban entry may be retained for audit history depending on system configuration. Used when restoring user access, correcting moderation mistakes, or processing appeal outcomes.",
          "summary": "Delete a ban record from discussionboard_ban table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the ban to delete (unban).",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "List/search notifications for a user using the discussionboard_notification table. Supports flexible querying via request body: filter by recipient, read status, type, time, and supports pagination. Used by users to view their notifications and for internal system administration/audit.",
          "path": "/discussionboard/notifications",
          "method": "patch",
          "description": "This PATCH endpoint queries notifications using complex filters (user, type, status, date, read/unread, etc.), replacing simpler GET list methods with a flexible search contract. Results are paginated and can be sorted by recency or priority. Mainly accessed by users in notification feed UIs, as well as by admins auditing notifications. The discussionboard_notification table is referenced for all entries, joined as needed to users, posts, and comments. This contract allows both self-service notification feeds as well as administrative history reviews. Security/authorization ensures users only see their own notifications unless elevated roles.",
          "summary": "List/search notifications from discussionboard_notification table (advanced query).",
          "parameters": [],
          "requestBody": {
            "description": "Filter and pagination data for notifications search.",
            "typeName": "IPageIDiscussionboardNotification.IRequest"
          },
          "responseBody": {
            "description": "Paginated results of matching notification records.",
            "typeName": "IPageIDiscussionboardNotification"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Get detailed information on a specific notification by its id, referencing the discussionboard_notification table. This operation is available to the user who received the notification or, for audit purposes, to admins/moderators. Provides all associated event data: post, comment, actor, and type.",
          "path": "/discussionboard/notifications/{id}",
          "method": "get",
          "description": "This GET endpoint fetches a notification record by id for detailed display in the notification center or audit UI. The notification includes message content, related post/comment, actor, and event type. Only the recipient user, or admins/moderators for audit, are authorized. This ensures members have access to their own system notifications, while elevated roles may view notification flows for compliance/audit.",
          "summary": "Get a specific notification by id from discussionboard_notification table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the notification to retrieve.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Full notification details, including event context.",
            "typeName": "IDiscussionboardNotification"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Create a new notification record in the discussionboard_notification table. Used internally to send a personalized in-app notification to a member, moderator, or admin on specific system events such as replies, likes, moderator actions, or system announcements. Typically used by backend logic, not directly by member UIs.",
          "path": "/discussionboard/notifications",
          "method": "post",
          "description": "This POST endpoint adds a notification to the system for a specific user, with all associated context (recipient, event type, related entities). These records are normally generated by system back-end services in response to valid actions (reply, like, moderation, system message), not by end users. Admins or system controllers may use it for generating announcements or backfilling notification flows. Only system-valid actors can invoke this contract.",
          "summary": "Create a new notification record in discussionboard_notification table.",
          "parameters": [],
          "requestBody": {
            "description": "All notification data (recipient, type, message, related event context).",
            "typeName": "IDiscussionboardNotification.ICreate"
          },
          "responseBody": {
            "description": "Created notification record.",
            "typeName": "IDiscussionboardNotification"
          },
          "authorization": {
            "role": [
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Update a notification record in the discussionboard_notification table—for instance, to mark as read/unread, update type, or message for admin flows. Used when fixing notification errors or for marking notifications as processed. Only the intended user, system, or admin/moderator can update the record. All such changes are logged for legal/event compliance.",
          "path": "/discussionboard/notifications/{id}",
          "method": "put",
          "description": "This PUT endpoint modifies an existing notification, such as marking it as read, altering event type, or updating message text. The target is identified by the id. Typical use cases include marking notifications as read by their recipient or correcting data via admin tools. These changes must be tracked in the audit log, especially for moderator/admin updates. No key/PK fields may be changed. Proper authorization ensures members can only update their own notification status, while elevated roles may correct any notification's details.",
          "summary": "Update a notification record in discussionboard_notification table (e.g. mark as read).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the notification to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Notification updates (e.g. mark as read, update message, adjust event data).",
            "typeName": "IDiscussionboardNotification.IUpdate"
          },
          "responseBody": {
            "description": "The updated notification record.",
            "typeName": "IDiscussionboardNotification"
          },
          "authorization": {
            "role": [
              "member",
              "moderator",
              "admin"
            ],
            "type": "Bearer"
          }
        },
        {
          "specification": "Delete a notification by its unique ID, enabling a user to remove a notification from the system. This operation references the discussionboard_notification table. Users can only delete notifications addressed to them. The endpoint enforces authentication and verifies notification ownership before performing the deletion. The notification is typically not physically deleted, but marked as removed/hidden in the system (soft delete). All deletions are auditable for administrators via audit logging. Related notifications can only be deleted if they belong to the requesting user. Errors include not found, permission denied, or already deleted.",
          "description": "This API operation allows an authenticated user to delete (soft-delete) a notification referenced by its unique identifier. The operation ensures that users can only delete notifications specifically addressed to them by verifying ownership against the discussionboard_notification table. The requested notification is marked as deleted without physical removal, supporting audit and compliance requirements defined in the system's policies. This operation is closely tied to the notification preferences and user activity auditing features and is restricted to the recipient of the notification (members, moderators, or admins). Administrators may audit all deletion actions using the audit log. If the notification has already been deleted or does not exist, the response will indicate the appropriate error. Related endpoints: PATCH /discussionboard/notifications to list notifications, and GET /discussionboard/notifications/{id} to view details before deletion.",
          "summary": "Delete a notification by its unique ID from the discussionboard_notification table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier for the notification to be deleted.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "discussionboard_user",
              "discussionboard_member",
              "discussionboard_moderator",
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/notifications/{id}",
          "method": "delete"
        },
        {
          "specification": "Get a list of notification preferences with support for filtering, paging, and searching. This endpoint operates on the discussionboard_notification_preference table. It returns notification preferences for multiple users (admin view) or for a single authenticated user (profile view). Searchable fields include notification type toggles (reply, like, moderator_action, system_message) and user ID. Admins can filter by any field; regular users may only view their own preferences. This endpoint supports pagination/sorting for admin dashboards or large installations.",
          "description": "This endpoint retrieves notification preference settings from the discussionboard_notification_preference table, with support for advanced searching and pagination. Users can fetch their own notification preferences (for profile management), while administrators may filter across multiple users to audit or configure preferences in bulk. The operation accommodates large datasets by including pagination parameters. Fields like notify_reply, notify_like, notify_moderator_action, and notify_system_message can be filtered or searched as needed for administrative oversight. Only the authenticated user or admins can access these preferences, with results limited appropriately.",
          "summary": "List notification preferences from the discussionboard_notification_preference table, with filtering and pagination.",
          "parameters": [],
          "requestBody": {
            "description": "Parameters for searching/filtering notification preferences (pagination, filters, sort).",
            "typeName": "IDiscussionboardNotificationPreference.IRequest"
          },
          "responseBody": {
            "description": "Paginated set of notification preference settings.",
            "typeName": "IPageIDiscussionboardNotificationPreference"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_moderator",
              "discussionboard_member"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/notificationPreferences",
          "method": "patch"
        },
        {
          "specification": "Get a specific user's notification preference by ID. This operation is used to retrieve detailed notification preference settings for a single user, generally by that user or by a privileged role. Operates on the discussionboard_notification_preference table. Validates role/ownership so only the owner or admins can fetch the preference record. Used for displaying or editing notification delivery settings on a user's profile page.",
          "description": "This endpoint returns the notification preference details for the record identified by the unique ID from the discussionboard_notification_preference table. The operation is restricted to the user who owns the preferences or an administrator managing users. Data returned includes settings for reply, likes, moderator actions, and system messages notification toggles. Related APIs: PATCH for listing/filtering all preferences, PUT for updating preferences, POST for creating preferences.",
          "summary": "Get notification preference detail by ID from the discussionboard_notification_preference table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the notification preference record.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Detailed notification preference settings for a user.",
            "typeName": "IDiscussionboardNotificationPreference"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_member"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/notificationPreferences/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new set of notification preferences for a user. This endpoint inserts a row into the discussionboard_notification_preference table, associating preference settings with the user. The operation is allowed only for self-owners upon registration/onboarding, or by administrators when managing users. Validation enforces unique per-user preference entry. Used during user account creation or when a user opts into notification settings for the first time. Returns the created preference entry and its generated ID.",
          "description": "This API operation creates a new notification preference record for an authenticated user by inserting a new row into the discussionboard_notification_preference table. Only one entry can exist per user. The operation validates that the user does not already have a preference record; if it does, the proper error is thrown. The returned object includes all fields relevant to notification preferences and the associated user ID. Used for onboarding or resetting preferences to a default state. Related endpoints include PATCH for searching and GET for retrieving an existing record.",
          "summary": "Create notification preferences for a user in discussionboard_notification_preference.",
          "parameters": [],
          "requestBody": {
            "description": "Initial notification preference settings to be created.",
            "typeName": "IDiscussionboardNotificationPreference.ICreate"
          },
          "responseBody": {
            "description": "Created notification preference record.",
            "typeName": "IDiscussionboardNotificationPreference"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_member"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/notificationPreferences",
          "method": "post"
        },
        {
          "specification": "Update an existing user's notification preference settings by ID. This operation modifies the record in the discussionboard_notification_preference table. Only the owner or an admin can perform this update, and the API validates role and ownership to enforce this. The endpoint is used for changing per-event notification toggles like 'notify_reply', 'notify_like', etc. Rendered in the user's notification settings UI.",
          "description": "This endpoint updates the notification preference settings for a specific user preference record identified by its ID in discussionboard_notification_preference. The API enforces that only the owner or an administrator may modify the preferences. Fields that can be updated include reply, like, moderator action, and system message notification toggles. The endpoint returns the updated notification preferences data after modification. Related operations: GET for viewing preferences and PATCH for listing multiple preferences.",
          "summary": "Update notification preference settings by ID in discussionboard_notification_preference table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the notification preference record to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Updated notification preference toggles and settings.",
            "typeName": "IDiscussionboardNotificationPreference.IUpdate"
          },
          "responseBody": {
            "description": "Updated notification preference record.",
            "typeName": "IDiscussionboardNotificationPreference"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_member"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/notificationPreferences/{id}",
          "method": "put"
        },
        {
          "specification": "Delete a notification preference record for a user by unique ID. This operation deletes a row in the discussionboard_notification_preference table. Only the record owner or admins may delete this record. Deletion is generally used in the context of user account deletion or preference resets. Auditing is enforced for admin deletions.",
          "description": "Authenticated users or administrators can use this endpoint to delete a notification preference record, identified by its unique ID, from the discussionboard_notification_preference table. The deletion is restricted to the owner or administrative users. Typically used for account deletion or resetting preferences to their default state. The API ensures audit trail compliance for admin-triggered deletions. If the record does not exist or the caller is not authorized, an error is thrown.",
          "summary": "Delete notification preferences by ID from the discussionboard_notification_preference table.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the notification preference record to be deleted.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_member"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/notificationPreferences/{id}",
          "method": "delete"
        },
        {
          "specification": "Search, filter, and list audit logs for privileged actions across the discussion board platform. This endpoint references the discussionboard_audit_log table and returns audit log entries supporting pagination, search, and filtering. Filtering fields include actor user, target user, action type, entity type, entity ID, timestamp, etc. Admins or moderators can view filtered logs for compliance, investigation, or operational review. Large datasets are paginated.",
          "description": "This operation retrieves a list of audit log records from the discussionboard_audit_log table. Filters can be applied for actor, target, action type, entity references, and timestamps. Used by administrators and moderators to review the history of privileged actions such as bans, role changes, and platform configuration updates. Pagination is provided for handling large datasets, and the operation is restricted to privileged roles only. Related endpoints: GET for detailed audit entry, POST for inserting logs (used mostly internally), PUT for corrections/annotations.",
          "summary": "List/search audit log entries for privileged actions from the discussionboard_audit_log table.",
          "parameters": [],
          "requestBody": {
            "description": "Filtering, pagination, and searching fields for audit logs.",
            "typeName": "IDiscussionboardAuditLog.IRequest"
          },
          "responseBody": {
            "description": "Paginated list of audit log records.",
            "typeName": "IPageIDiscussionboardAuditLog"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/auditLogs",
          "method": "patch"
        },
        {
          "specification": "Retrieve detail of a specific audit log entry by its unique ID. Returns all fields for a single record in the discussionboard_audit_log table, including actor, action, entity affected, and related details. Admins and moderators can use this operation for compliance, case resolution, or reviewing specific security incidents. Strict access control to privileged users only.",
          "description": "This endpoint allows an administrator or moderator to retrieve detailed information on a single audit log entry by its unique identifier. The returned data includes actor/target user IDs, action type, affected entity, and timestamps. Used in incident investigation flows or compliance reviews as required by platform security policy. Related endpoints: PATCH for bulk search and listing, POST for inserting new logs after privileged actions.",
          "summary": "Get detailed information for an audit log entry from discussionboard_audit_log by ID.",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the audit log entry.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Detailed audit log record for the specified entry.",
            "typeName": "IDiscussionboardAuditLog"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/auditLogs/{id}",
          "method": "get"
        },
        {
          "specification": "Insert a new audit log entry after a privileged action is performed (e.g., user ban, role change, settings update). The operation adds a row to the discussionboard_audit_log table with all pertinent action/event information. Only internal admin or moderator workflows may use this endpoint—general users have no access. Validates completeness of action metadata, including actor, action, affected entity, and timestamp. This is generally triggered programmatically by privileged workflows and highly auditable.",
          "description": "This API operation records a new privileged action—such as user bans, moderator role assignments, or platform configuration changes—by inserting an audit record into discussionboard_audit_log. Only authentication with admin or moderator rights is accepted. The request body contains all required event context for recording, and on success, the created audit entry (including ID and timestamps) is returned. Used in tandem with security-sensitive workflows for complete accountability.",
          "summary": "Create (insert) a new audit log entry in discussionboard_audit_log (admin/moderator only).",
          "parameters": [],
          "requestBody": {
            "description": "Fields describing the privileged event to be logged.",
            "typeName": "IDiscussionboardAuditLog.ICreate"
          },
          "responseBody": {
            "description": "Created audit log record, including ID and timestamps.",
            "typeName": "IDiscussionboardAuditLog"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/auditLogs",
          "method": "post"
        },
        {
          "specification": "Update/correct a previously recorded audit log entry by ID. This endpoint operates on the discussionboard_audit_log table and is available only to admins or moderators. It is used in rare cases to annotate, amend, or correct audit trail records, for example after a review or compliance request. The unique ID specifies which record to update. All updates are themselves audited for traceability.",
          "description": "Perform an update to an existing audit log entry, identified by its unique ID in the discussionboard_audit_log table. This operation permits administrators or moderators to append additional context, correct metadata, or annotate existing records. Because the audit log is a sensitive table, all updates themselves are logged to ensure complete traceability and non-repudiation. Errors are returned if the entry does not exist or the caller lacks privileges. Related operations: GET for retrieving a record, PATCH for search, POST for new entries.",
          "summary": "Update an audit log entry in discussionboard_audit_log by ID (privileged use only).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the audit log entry to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Audit log fields to update (e.g., detail, correction, annotation).",
            "typeName": "IDiscussionboardAuditLog.IUpdate"
          },
          "responseBody": {
            "description": "Updated audit log record.",
            "typeName": "IDiscussionboardAuditLog"
          },
          "authorization": {
            "role": [
              "discussionboard_admin",
              "discussionboard_moderator"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/auditLogs/{id}",
          "method": "put"
        },
        {
          "specification": "Delete an audit log entry from discussionboard_audit_log by its unique ID. Operation available only to administrators. Deletion is strongly audited, usually performed only after compliance reviews or expired retention periods. The entry is typically soft-deleted to preserve compliance and traceability. If the entry does not exist or is already deleted, an error is returned. Related tables (e.g., user, ban log, etc.) are not modified. Admin role required.",
          "description": "This endpoint allows administrators to delete a privileged audit log entry by its unique ID. Deletions are soft by default, preserving a trace for regulatory or compliance requirements. This operation is restricted to admin users and all deletions are themselves logged to the audit log for traceability. If the record does not exist, a not-found error is shown. Related endpoints: PATCH for listing/filtering logs, GET for detail view, PUT for corrections. No impact on related tables—purely for audit record management.",
          "summary": "Delete an audit log entry from discussionboard_audit_log by ID (admin only, soft-delete).",
          "parameters": [
            {
              "name": "id",
              "description": "Unique identifier of the audit log entry to be deleted.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": null,
          "authorization": {
            "role": [
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/auditLogs/{id}",
          "method": "delete"
        },
        {
          "specification": "Search, filter, and list platform configuration settings, as managed by administrators. This endpoint operates on the discussionboard_platform_setting table and provides admins with convenient querying over platform settings for UI display or configuration management. Supports searching by setting name, value, type, and recently updated. Paged output for large installations. Not accessible by general users or moderators; admin only.",
          "description": "Enables administrators to retrieve a paginated and searchable list of platform configuration settings from the discussionboard_platform_setting table. Supports filtering by setting name, value, type, and last updated date. Used for displaying platform configuration UI, tracking changes, and supporting system configuration auditing. Only admin role is permitted. Related endpoints: POST and PUT for creating and updating settings, GET for individual setting detail.",
          "summary": "List/search platform configuration settings from the discussionboard_platform_setting table (admin only).",
          "parameters": [],
          "requestBody": {
            "description": "Search and filter fields for querying platform settings (e.g., name, type, paging).",
            "typeName": "IDiscussionboardPlatformSetting.IRequest"
          },
          "responseBody": {
            "description": "Paginated list of platform settings matching search/filters.",
            "typeName": "IPageIDiscussionboardPlatformSetting"
          },
          "authorization": {
            "role": [
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/platformSettings",
          "method": "patch"
        },
        {
          "specification": "Fetch a specific platform-wide configuration setting by ID. This operation targets the 'discussionboard_platform_setting' table and allows administrators to view granular settings such as feature toggles, limits, or other system options. The returned setting helps ensure admins can audit or verify single settings—useful for troubleshooting or for when updating a specific value. Access to this API is restricted to users with an 'admin' role. Returns full details of the setting, including name, value, and type.",
          "description": "Retrieves a single platform configuration setting by its unique identifier ('id'). This operation is essential for system administrators to fetch current configuration details, validate values before updates, and perform audits as mandated in admin and platform configuration requirements in the business documentation.\n\nPermissions are strictly enforced—only users with 'admin' privileges, authenticated via Bearer token, are authorized to invoke this endpoint. The returned object includes all properties of the 'discussionboard_platform_setting' record as defined by the schema, such as id, name, value, type, and updated_at.\n\nIndicates errors clearly when the ID does not correspond to an existing setting, or if the caller lacks adequate permissions. This endpoint is typically paired with PUT or DELETE operations for full config management cycles.",
          "summary": "Get a specific platform setting by ID from 'discussionboard_platform_setting'.",
          "parameters": [
            {
              "name": "id",
              "description": "Globally unique identifier for the platform setting to fetch.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Full platform setting configuration object.",
            "typeName": "IDiscussionboardPlatformSetting"
          },
          "authorization": {
            "role": [
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/platformSettings/{id}",
          "method": "get"
        },
        {
          "specification": "Create a new platform configuration setting. This endpoint directly maps to the 'discussionboard_platform_setting' table, enabling administrators to add new settings. Used for introducing new feature toggles, thresholds, or policy switches. Only admins, authenticated via Bearer token, are allowed. Input is validated for uniqueness of 'name'.",
          "description": "Enables an authenticated admin to create a new configuration record in the platform settings table. The operation expects a payload (name, value, type) as per the schema. Automatically records the updated_at timestamp. Ensures 'name' uniqueness per table constraints; returns proper error if duplicate exists, or if incomplete/invalid data is provided.\n\nDesigned to support expansion of platform features—when new settings/routes/features are rolled out, new records can be created via this API. This endpoint is tightly access-controlled (admin only via Bearer token).\n\nSuccessful response returns the full created entity, confirming project extension and configuration flexibility as described in platform requirements.",
          "summary": "Create a new configuration setting in 'discussionboard_platform_setting'.",
          "parameters": [],
          "requestBody": {
            "description": "Data needed to create a platform setting (name, value, type).",
            "typeName": "IDiscussionboardPlatformSetting.ICreate"
          },
          "responseBody": {
            "description": "Created setting record.",
            "typeName": "IDiscussionboardPlatformSetting"
          },
          "authorization": {
            "role": [
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/platformSettings",
          "method": "post"
        },
        {
          "specification": "Update an existing platform configuration setting by its unique ID. This operation modifies records in the 'discussionboard_platform_setting' table. It supports updates to the 'name', 'value', or 'type' fields. Requires an admin with Bearer token authentication. Used for changing platform feature toggles, updating limits, or reclassifying existing settings.",
          "description": "Allows an authenticated administrator to update the details of a platform configuration setting, such as name, value, or type. The ID of the target setting is a required path parameter. Only admins can perform this operation, following policy and platform management requirements.\n\nValidation logic ensures the uniqueness of 'name' is preserved across all records. Handles invalid IDs, duplicate names, and data validation errors.\n\nReturns the updated setting object, as required for auditability and admin interface refreshes. Pairs with GET (by ID) and DELETE for full lifecycle management of platform-wide settings. Authenticated via Bearer token with 'discussionboard_admin' role only.",
          "summary": "Update platform setting record by ID in 'discussionboard_platform_setting'.",
          "parameters": [
            {
              "name": "id",
              "description": "Platform setting identifier (PK) to update.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Fields to update for the setting.",
            "typeName": "IDiscussionboardPlatformSetting.IUpdate"
          },
          "responseBody": {
            "description": "Updated setting record.",
            "typeName": "IDiscussionboardPlatformSetting"
          },
          "authorization": {
            "role": [
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/platformSettings/{id}",
          "method": "put"
        },
        {
          "specification": "Delete a platform configuration setting by ID. This directly affects a record in the 'discussionboard_platform_setting' table. Used by platform administrators to remove obsolete, deprecated, or erroneous settings. Strongly access-controlled for platform integrity. Only authenticated admins may invoke it.",
          "description": "Removes a single platform configuration setting, as identified by its unique ID. This is integral to platform management and maintenance, letting administrators retire unused settings and keep configuration lean. Checks for valid existence and subject to business constraints (e.g., settings may not be deleted if in active use—a business rule handled at service layer).\n\nAccess is strictly controlled: only users with 'discussionboard_admin' role and proper Bearer token are permitted. Operation returns success/failure indication. Usually paired with GET and POST/PUT for complete settings lifecycle.",
          "summary": "Delete a specific platform-wide setting by ID from 'discussionboard_platform_setting'.",
          "parameters": [
            {
              "name": "id",
              "description": "Globally unique identifier for the setting to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": null,
          "responseBody": {
            "description": "Confirmation of deletion (success or failure).",
            "typeName": "IDeleteResult"
          },
          "authorization": {
            "role": [
              "discussionboard_admin"
            ],
            "type": "Bearer"
          },
          "path": "/discussionboard/platformSettings/{id}",
          "method": "delete"
        }
      ],
      "components": {
        "schemas": {
          "IDiscussionboardUser.IRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "(Optional) Filter by the user's email address, case-insensitive and partial matches allowed. This is useful for user search and management workflows, directly supporting member lookup by email.\n\nBased on the 'email' column in the Prisma schema, which is unique and used for authentication, audit, and notifications."
              },
              "is_active": {
                "type": "boolean",
                "description": "(Optional) Filter by active status. If specified, returns only users whose 'is_active' matches this value. Used to query active or deactivated (soft-deleted) accounts for admin dashboards and compliance operations.\n\nFrom the 'is_active' column of 'discussionboard_user', which supports admin control and account suspension as described in requirements."
              },
              "created_at_from": {
                "type": "string",
                "format": "date-time",
                "description": "(Optional) Filter for users created after this ISO 8601 timestamp. Used for admin audits or tracking new registrations.\n\nBased on 'created_at' column in the Prisma user master table."
              },
              "created_at_to": {
                "type": "string",
                "format": "date-time",
                "description": "(Optional) Filter for users created before this ISO 8601 timestamp."
              },
              "updated_at_from": {
                "type": "string",
                "format": "date-time",
                "description": "(Optional) Filter for users updated after this ISO 8601 timestamp. Used to track recent profile/account changes."
              },
              "updated_at_to": {
                "type": "string",
                "format": "date-time",
                "description": "(Optional) Filter for users updated before this ISO 8601 timestamp."
              },
              "page": {
                "type": "integer",
                "format": "int32",
                "description": "The page number for pagination. Defaults to 1 if omitted.\n\nStandard in paginated API contracts, as described in requirements."
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "The number of records per page for pagination. Default is 100, maximum may be enforced per business policy."
              }
            },
            "description": "Request parameters for searching, filtering, and paginating user master records (discussionboard_user). All properties are optional for flexible filtering in user management workflows.\n\nEach property aligns with a field in the core user master record table, supporting requirements for admin/moderator user management, audit, and analytics.",
            "required": []
          },
          "IPageDiscussionboardUser": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardUser"
                },
                "description": "Array of discussionboard_user objects for this page of results."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "A page of user master records, including pagination details and the user records found.\n\nThis aligns with the standard IPage structure, paginating results from 'discussionboard_user' queries, supporting admin/member search UI, auditing, and analytics."
          },
          "IDiscussionboardUser": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Globally unique identifier for the user. Implements traceable, referential identity across all tables per the requirements. Surrogate key from Prisma."
              },
              "email": {
                "type": "string",
                "description": "Unique email address for user authentication, profile and notification. Direct mapping to 'email' column in user master."
              },
              "password_hash": {
                "type": "string",
                "description": "Password hash for secure authentication. Stored as a hash value—do not expose directly except during internal workflows or in highly privileged admin contexts (it may be omitted in most list/detail responses for security)."
              },
              "is_active": {
                "type": "boolean",
                "description": "Tracks if user is active/enabled (true) or deactivated (false for soft delete). Used for role audits and compliance. Directly from 'is_active' column."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of user creation (join time). Required for audits, analytics, onboarding metrics. Maps to 'created_at' in schema."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last update time. Used for audit, tracking profile/account changes. Maps to 'updated_at' in schema."
              }
            },
            "required": [
              "id",
              "email",
              "is_active",
              "created_at",
              "updated_at"
            ],
            "description": "Master user record for each account on the discussion board. Represents authentication and account management data, as required for registration, login, audits, role assignment/checks (see requirements doc Section 3.1, Prisma discussionboard_user). Privileged operations may include 'password_hash', but regular responses should usually omit."
          },
          "IDiscussionboardUser.ICreate": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Required. User's email address for registration, notifications, login. Must be unique across all users. Maps to 'email' in schema."
              },
              "password": {
                "type": "string",
                "description": "Required. Cleartext password to be hashed and stored as 'password_hash' (handled internally). Provided only on account creation, not returned once stored. Maps to 'password_hash' after being hashed."
              }
            },
            "required": [
              "email",
              "password"
            ],
            "description": "Body for creating a new user. Only the unique email and raw password (to be hashed internally) are required on creation. 'is_active', 'created_at', and 'updated_at' will be set by system logic. This supports both admin onboarding and member registration per requirements."
          },
          "IDiscussionboardUser.IUpdate": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "(Optional) Update email address. Must remain unique, and follow business/domain rules."
              },
              "password": {
                "type": "string",
                "description": "(Optional) New password in cleartext. Will be securely hashed before being stored in 'password_hash'. Not returned in response."
              },
              "is_active": {
                "type": "boolean",
                "description": "(Optional) Update active status for the account (for admin use: suspend/reactivate account per compliance procedures)."
              }
            },
            "description": "Body for updating existing user account. Fields are all optional—a PATCH style input. Only admin, moderator, or user self-service logic can change these fields according to role-based policies. This aligns with Prisma user master.",
            "required": []
          },
          "IDiscussionboardUserProfile.IRequest": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "(Optional) Filter by display name (partial or exact match). Used for admin/member lookup workflows.\n\nFrom 'display_name' in user profiles."
              },
              "bio": {
                "type": "string",
                "description": "(Optional) Filter by user bio content (text search). Supports admin/member search, compliance workflows. From 'bio'."
              },
              "page": {
                "type": "integer",
                "format": "int32",
                "description": "Page number for pagination (default: 1)."
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "Number of results per page, with system default insurance (e.g., 100 max)."
              }
            },
            "description": "Request body for advanced search, filter, and pagination of user profile records. Corresponds to fields in 'discussionboard_user_profile'. All fields are optional for broad or narrow searches.",
            "required": []
          },
          "IPageDiscussionboardUserProfile": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardUserProfile"
                },
                "description": "Array of user profile records for this page."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "Paged result for user profile queries, including pagination info and user profiles returned. Used for admin/member directory views."
          },
          "IDiscussionboardUserProfile": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Primary key for the user profile, uniquely generated and mapped to 'id' in Prisma."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Foreign key referencing 'discussionboard_user'. 1:1 mapping, required for lookups, profile ownership."
              },
              "display_name": {
                "type": "string",
                "description": "Display name shown publicly on posts/comments. Matches 'display_name' in profile schema. Required."
              },
              "avatar_url": {
                "type": "string",
                "description": "(Optional) URL to user avatar image. Large string value, may be null. From 'avatar_url' column in user profile."
              },
              "bio": {
                "type": "string",
                "description": "(Optional) User's bio—background, summary, or information for public display. Can be null. From 'bio' field."
              }
            },
            "required": [
              "id",
              "user_id",
              "display_name"
            ],
            "description": "Represents a user's profile on the system. Provides public-facing display info, as separated from authentication data (see requirements Sections 3.1, 3.2; Prisma 'discussionboard_user_profile'). All fields directly map to form fields and display controls."
          },
          "IDiscussionboardUserProfile.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the user this profile is for. Required, strict 1:1 mapping with 'discussionboard_user', foreign key constraint enforced."
              },
              "display_name": {
                "type": "string",
                "description": "Display name for member directories and attribution. Must be unique if business rule applies, required."
              },
              "avatar_url": {
                "type": "string",
                "description": "(Optional) URL of avatar image for the user (can be omitted/null)."
              },
              "bio": {
                "type": "string",
                "description": "(Optional) User's biography/summary, for public display."
              }
            },
            "required": [
              "user_id",
              "display_name"
            ],
            "description": "Input body for creating a new user profile, used in onboarding/registration flows or admin onboarding."
          },
          "IDiscussionboardUserProfile.IUpdate": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "(Optional) New value for display name."
              },
              "avatar_url": {
                "type": "string",
                "description": "(Optional) Update avatar URL (may be set to null to clear avatar)."
              },
              "bio": {
                "type": "string",
                "description": "(Optional) Update for bio/about content."
              }
            },
            "description": "Input body to update existing user profile fields. Used for member self-service and admin profile corrections or display adjustments.",
            "required": []
          },
          "IDiscussionboardMember.IRequest": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "(Optional) Filter by the user associated with this member role assignment. Used for admin member management and auditing."
              },
              "granted_at_from": {
                "type": "string",
                "format": "date-time",
                "description": "(Optional) Filter for memberships granted after this timestamp."
              },
              "granted_at_to": {
                "type": "string",
                "format": "date-time",
                "description": "(Optional) Filter for memberships granted before this timestamp."
              },
              "page": {
                "type": "integer",
                "format": "int32",
                "description": "Pagination page number (default: 1)."
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "Result count per page (default: system maximum)."
              }
            },
            "description": "Advanced search/filter body for the discussionboard_member entity, supporting admin/member dashboards.",
            "required": []
          },
          "IPageDiscussionboardMember": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardMember"
                },
                "description": "Array of discussionboard_member entities matching filter and pagination."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "Paged list of discussionboard_member objects, including pagination/query info needed for large data sets and admin/member search tools."
          },
          "IDiscussionboardMember": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "고유 멤버 역할 할당 키. 모든 discussionboard_member 엔트리를 식별하며, 필요 시 추적 및 변경 로그를 지원합니다.\n\nPrisma discussionboard_member.id에 해당합니다."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "이 멤버 역할이 부여된 discussionboard_user와의 1:1 관계(외래키, 유니크). 회원 API, 권한 검증, 대시보드에서 사용자 정보를 조회할 때 필수적으로 활용합니다.\n\nPrisma discussionboard_member.user_id에 해당합니다."
              },
              "granted_at": {
                "type": "string",
                "format": "date-time",
                "description": "이 멤버 역할이 처음 부여된 일시(부여 시각). 오디팅, 멤버십 이력 관리, 역할 승격/강등 관리, 가입 일자 기준 조회 등에 활용합니다.\n\nPrisma discussionboard_member.granted_at에 해당합니다."
              }
            },
            "required": [
              "id",
              "user_id",
              "granted_at"
            ],
            "description": "플랫폼 내 일반 참여자의 역할 데이터를 나타냅니다.\n\n모든 discussionboard_user는 최소 discussionboard_member 역할을 1:1로 할당받으며, 게시글/댓글 작성이나 좋아요 기능 등 일반 참여에 대한 권한이 이 엔티티를 통해 관리됩니다. 역할 변경(승격/강등) 내역은 granted_at을 참조해 오디트 가능합니다. 회원 관리/역할 관리 대시보드 기능과 밀접히 연결되어 있습니다."
          },
          "IPage.IPagination": {
            "type": "object",
            "description": "페이지네이션 정보 객체입니다.\n\n이 타입은 데이터 페이징 결과의 현재 페이지, 페이지 당 항목 수, 전체 레코드 수, 총 페이지 수 등 필수 정보를 제공합니다. 모든 IPage<T> 타입에서 참조되어, 목록 조회의 페이징 처리를 표준화합니다.",
            "properties": {
              "current": {
                "type": "integer",
                "description": "현재 페이지 번호(1부터 시작)."
              },
              "limit": {
                "type": "integer",
                "description": "페이지 당 반환하는 결과 레코드 최대 수.\n\n시스템 디폴트값(예: 100) 또는 쿼리에서 지정한 limit 값. "
              },
              "records": {
                "type": "integer",
                "description": "해당 조건으로 조회될 전체 레코드 개수."
              },
              "pages": {
                "type": "integer",
                "description": "전체 페이지 수(= records/limit, 올림 연산 결과)."
              }
            },
            "required": [
              "current",
              "limit",
              "records",
              "pages"
            ]
          },
          "IDiscussionboardMember.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "멤버로 지정할 discussionboard_user의 고유 식별자(외래키).\n\n역할 부여 API에서 반드시 지정되는 값입니다."
              },
              "granted_at": {
                "type": "string",
                "format": "date-time",
                "description": "멤버 역할이 실제로 부여되는 시각(통상 API 호출 시점의 서버 시간을 사용).\n\n오디팅, 멤버십 이력 관리, 가입 일자 기준 조회 등에 활용됩니다."
              }
            },
            "required": [
              "user_id",
              "granted_at"
            ],
            "description": "신규 멤버 역할 할당을 위한 요청 본문(based on discussionboard_member 테이블). user_id(대상 유저), granted_at(부여일시) 필수입니다. 일반적으로 어드민 패널, 대시보드, 회원 가입 후 자동 부여 등에서 사용됩니다."
          },
          "IDiscussionboardMember.IUpdate": {
            "type": "object",
            "properties": {
              "granted_at": {
                "type": "string",
                "format": "date-time",
                "description": "멤버 역할의 부여/변경 시각 갱신용. 업무상 API로 멤버 기간을 조절할 때 사용."
              }
            },
            "required": [
              "granted_at"
            ],
            "description": "멤버 역할 정보(부여 일시 등)만 수정 가능한 업데이트 타입입니다. grant_at을 변경할 때 사용합니다. user_id, id 등 PK/FK는 수정 불가."
          },
          "IDiscussionboardModerator.IRequest": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "특정 유저의 moderator 역할 여부 확인/검색시 사용되는 discussionboard_user의 고유 아이디.\n\n검색 조건(optional)."
              },
              "assigned_at_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "임명일(이상) 기준 필터"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "임명일(이상) 기준 필터"
              },
              "assigned_at_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "임명일(이하) 기준 필터"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "임명일(이하) 기준 필터"
              },
              "page": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "조회할 페이지 번호(1-base, 기본값=1)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "조회할 페이지 번호(1-base, 기본값=1)"
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "페이지당 반환할 행 개수(기본값=100)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "페이지당 반환할 행 개수(기본값=100)"
              }
            },
            "required": [],
            "description": "모더레이터 역할 할당 리스트 조회/검색을 위한 요청 타입입니다. 주로 어드민 대시보드, 역할 관리 UI 등에서 활용되며, 유저별/기간별/페이지네이션 조건을 사용할 수 있습니다."
          },
          "IPageDiscussionboardModerator": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardModerator"
                },
                "description": "조회된 moderator 역할 배열"
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "모더레이터 역할 할당 목록의 페이지 결과를 담는 컨테이너 타입입니다. pagination(페이지 메타), data(목록) 필드 구성."
          },
          "IDiscussionboardModerator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "모더레이터 역할 할당의 고유 키(ID). PK.\n\n모든 discussionboard_moderator 엔트리를 식별합니다."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "실제 모더레이터로 임명되는 discussionboard_user의 고유 아이디(FK, 유니크). 유저-역할간 1:1 관계를 보장합니다."
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "이 역할이 최초 할당된 날짜/시간. 추적(승격/강등 로그, 오디팅)에 활용."
              }
            },
            "required": [
              "id",
              "user_id",
              "assigned_at"
            ],
            "description": "플랫폼 내 모더레이터(중재자, 관리자)의 역할 데이터 레코드를 나타냅니다. 어드민 패널 등 역할 관리, 오디트 시스템에서 주로 사용됩니다."
          },
          "IDiscussionboardModerator.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Moderator로 지정할 discussionboard_user의 식별자.\n\n역할 부여에 반드시 필요."
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "임명(할당) 일시. 신규 모더레이터 생성시 사용."
              }
            },
            "required": [
              "user_id",
              "assigned_at"
            ],
            "description": "신규 모더레이터 역할 할당을 위한 요청 타입입니다. user_id(유저)와 assigned_at(임명시간) 필요. 어드민이 역할을 부여할 때 사용."
          },
          "IDiscussionboardModerator.IUpdate": {
            "type": "object",
            "properties": {
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "임명된 날짜/시간을 다시 지정하거나 수정할 때 사용합니다."
              }
            },
            "required": [
              "assigned_at"
            ],
            "description": "모더레이터 역할 배정 정보(임명 일시 등)만 수정하는 타입입니다."
          },
          "IDiscussionboardAdmin.IRequest": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "어드민 역할자(운영진) 중 특정 유저 아이디로 필터시 사용됩니다."
              },
              "assigned_at_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "임명일(이상) 기준 필터"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "임명일(이상) 기준 필터"
              },
              "assigned_at_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "임명일(이하) 기준 필터"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "임명일(이하) 기준 필터"
              },
              "page": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "조회할 페이지 번호(1-base, 기본값=1)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "조회할 페이지 번호(1-base, 기본값=1)"
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "페이지당 반환할 행 개수(기본값=100)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "페이지당 반환할 행 개수(기본값=100)"
              }
            },
            "required": [],
            "description": "어드민 역할 할당의 검색/조회 요청입니다. user_id, 임명일, 페이지네이션 등 다양한 조건을 조합해 관리 UI/대시보드에서 활용합니다."
          },
          "IPageDiscussionboardAdmin": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardAdmin"
                }
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "어드민 역할 할당 목록의 페이지 결과입니다. pagination(메타정보), data(엔티티 배열) 필드로 구성."
          },
          "IDiscussionboardAdmin": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "어드민 역할 할당 고유 식별자(PK). discussionboard_admin.id와 1:1로 매핑."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "실제 어드민 권한이 부여된 discussionboard_user의 고유 아이디(FK, 유니크)."
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "운영진으로 지명된 시간/일자. 오디트 기록."
              }
            },
            "required": [
              "id",
              "user_id",
              "assigned_at"
            ],
            "description": "플랫폼 어드민(최고 관리자) 역할 할당 이력을 나타내는 타입입니다. PK/FK 관리, 오디트 로깅, 권한 검증 로직의 기초가 됩니다."
          },
          "IDiscussionboardAdmin.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "어드민 권한을 부여할 대상 유저의 UUID.\n\n역할 승격에 필요."
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "어드민 권한 부여 시각."
              }
            },
            "required": [
              "user_id",
              "assigned_at"
            ],
            "description": "관리자 역할 생성 요청 본문 예시. 신규 어드민 승격 및 임명시 user_id, assigned_at 필수."
          },
          "IDiscussionboardAdmin.IUpdate": {
            "type": "object",
            "properties": {
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time when the admin role was assigned, following ISO 8601 format.\n\nThis is used to track changes in administrative privilege history, supporting audit and compliance workflows for role changes as required in business rules."
              }
            },
            "required": [
              "assigned_at"
            ],
            "description": "Data required to update an existing admin assignment in the discussionboard_admin table.\n\nIncludes the timestamp of assignment, which is crucial for tracking privilege escalation or changes according to business processes."
          },
          "IDiscussionboardPost.IRequest": {
            "type": "object",
            "properties": {
              "category_id": {
                "type": "string",
                "format": "uuid",
                "description": "Category identifier for filtering posts, referencing discussionboard_post_category.\n\nAllows queries by category, such as 'Politics' or 'Economics', supporting filtered search as described in requirements."
              },
              "author_member_id": {
                "type": "string",
                "format": "uuid",
                "description": "Member ID of the post author.\n\nSupports filtering posts by author for profile pages and moderation."
              },
              "keywords": {
                "type": "string",
                "description": "Free-text search string for post title/body keyword or phrase matching.\n\nUsed to enable robust search and discovery features outlined in requirements."
              },
              "created_at_from": {
                "type": "string",
                "format": "date-time",
                "description": "Lower bound for created_at field (inclusive).\n\nAllows filtering posts created after a specific timestamp."
              },
              "created_at_to": {
                "type": "string",
                "format": "date-time",
                "description": "Upper bound for created_at field (inclusive).\n\nFilters posts created up to this time."
              },
              "include_deleted": {
                "type": "boolean",
                "description": "If true, include soft-deleted posts in the result set.\n\nUsually only settable by admin or moderator roles for audit/moderation oversight."
              },
              "pagination": {
                "$ref": "#/components/schemas/IPage.IRequest",
                "description": "Pagination and page size configuration.\n\nConsistent with the standard paging and result set windowing."
              }
            },
            "description": "Filtering, search, and pagination parameters for listing discussion posts in the board.\n\nEnables advanced filtering (category, author, search keywords, creation dates), paging, and administrative audit controls as detailed in functional requirements.",
            "required": []
          },
          "IPageIDiscussionboardPost.ISummary": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "Page information, including current, limit, total, and page count."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardPost.ISummary"
                },
                "description": "The array of summarized post objects matching the search/filters."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "A paginated set of post summaries, as returned by list/search endpoints for discussionboard_post entities.\n\nEnables result set navigation and efficient client-side rendering of large datasets."
          },
          "IDiscussionboardPost.ISummary": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the post as primary key.\n\nUsed for navigation to detail view or post-specific actions."
              },
              "title": {
                "type": "string",
                "description": "The title of the post, used for preview and search lists."
              },
              "category_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID for the category this post belongs to.\n\nReferences discussionboard_post_category and is used for filtering/grouping UI."
              },
              "author_member_id": {
                "type": "string",
                "format": "uuid",
                "description": "Member ID of the authoring user.\n\nUsed for attribution, filtering by user, and moderation UI."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the post was created.\n\nSupports sorting, recency filtering, and audit logic."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of last update, supporting audit trails and version tracking."
              },
              "deleted_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "If set, indicates the post has been soft-deleted (hidden).\n\nReturned for admin/moderator queries per requirements."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "If set, indicates the post has been soft-deleted (hidden).\n\nReturned for admin/moderator queries per requirements."
              }
            },
            "required": [
              "id",
              "title",
              "category_id",
              "author_member_id",
              "created_at",
              "updated_at"
            ],
            "description": "Summary of a discussion post object suitable for list view or search result display.\n\nIncludes key fields for UI preview, search, and ordering. Used in paginated collections."
          },
          "IDiscussionboardPost": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Primary key for the post record.\n\nGlobally unique identifier for each post, as required for audit trails and traceability."
              },
              "author_member_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the member who authored the post.\n\nReferences discussionboard_member, supporting user detail drilldown and composition rules."
              },
              "category_id": {
                "type": "string",
                "format": "uuid",
                "description": "Identifier for post's category (e.g. 'Politics', 'Economics').\n\nSupports association of post to functional categories, as required for discoverability."
              },
              "title": {
                "type": "string",
                "description": "Post title, as shown to users and in search operations.\n\nUniquely identifies post content for summary views and indexing."
              },
              "body": {
                "type": "string",
                "description": "Main post content.\n\nSupports markup (plain text/Markdown), enables long form discussion in compliance with requirements."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when post was first created.\n\nEnables audit, history/sort/order, and analytics."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification timestamp for the post.\n\nTracks history for audit trails."
              },
              "deleted_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of soft deletion if post is hidden from standard views.\n\nSet by admin or moderator actions for audit/compliance."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Timestamp of soft deletion if post is hidden from standard views.\n\nSet by admin or moderator actions for audit/compliance."
              }
            },
            "required": [
              "id",
              "author_member_id",
              "category_id",
              "title",
              "body",
              "created_at",
              "updated_at"
            ],
            "description": "A normalized post record as persisted in the discussionboard_post table.\n\nIncludes all fields essential for detailed view, moderation actions, and audit compliance."
          },
          "IDiscussionboardPost.ICreate": {
            "type": "object",
            "properties": {
              "author_member_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID for the member posting content. Required for authorship attribution; validated for membership as per requirements."
              },
              "category_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID for the category under which this post is filed. Only valid values available from discussionboard_post_category. Supports content organization, filtering, and admin taxonomy workflows."
              },
              "title": {
                "type": "string",
                "description": "Title of the post. Required; serves as search anchor and headline for summarization."
              },
              "body": {
                "type": "string",
                "description": "Main text content of the post. May support limited markup, as per UI requirements."
              }
            },
            "required": [
              "author_member_id",
              "category_id",
              "title",
              "body"
            ],
            "description": "Fields required for creating a new post within the discussion board.\n\nCorrelates to the required fields in creation endpoints, supporting input by members and validation for admin workflows."
          },
          "IDiscussionboardPost.IUpdate": {
            "type": "object",
            "properties": {
              "category_id": {
                "type": "string",
                "format": "uuid",
                "description": "Optional new category. If present, post will be reassigned. Must reference valid discussionboard_post_category."
              },
              "title": {
                "type": "string",
                "description": "Optional new title for the post."
              },
              "body": {
                "type": "string",
                "description": "Optional new content body. Use to apply edits to text."
              },
              "deleted_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp if post is being soft-deleted. Can be set or cleared by privilege holder only."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Timestamp if post is being soft-deleted. Can be set or cleared by privilege holder only."
              }
            },
            "description": "Fields for updating attributes of a post (title, body, category, deleted_at).\n\nSupports edit and moderation flows. All fields optional unless endpoint requires specific ones.",
            "required": []
          },
          "IDiscussionboardPostCategory.IRequest": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Partial/category name for filtering or searching categories by name substring."
              },
              "description": {
                "type": "string",
                "description": "Text content for category description filter/search match."
              },
              "pagination": {
                "$ref": "#/components/schemas/IPage.IRequest",
                "description": "Standard paging configuration for result windows."
              }
            },
            "description": "Request schema for searching/listing post categories, supporting text search, filtering, and paging.\n\nUsed by admin dashboards and configuration panels.",
            "required": []
          },
          "IPageIDiscussionboardPostCategory": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "Pagination metadata (page, limit, total, etc)."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardPostCategory"
                },
                "description": "Array of post category objects, suitable for UI display or selection."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "A paginated set of post categories as returned by list/search endpoints, supplying both summary and detail data for configuration/UI rendering."
          },
          "IDiscussionboardPostCategory": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Primary key for post category.\n\nIdentifies unique category for filtering and administration."
              },
              "name": {
                "type": "string",
                "description": "Category name, such as 'Economics' or 'Politics'. Must be unique in table."
              },
              "description": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Human-readable full category explanatory text. Allows category discovery and admin notes."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Human-readable full category explanatory text. Allows category discovery and admin notes."
              }
            },
            "required": [
              "id",
              "name"
            ],
            "description": "Discussion post category entity, as maintained in discussionboard_post_category.\n\nIncludes unique name, description, and UUID for search, maintenance, and constraint validation."
          },
          "IDiscussionboardPostCategory.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Full name for new discussion category, required for taxonomy organization. Must be unique."
              },
              "description": {
                "type": "string",
                "description": "Optional description providing extra context or usage notes for admins and users."
              }
            },
            "required": [
              "name"
            ],
            "description": "Creation contract for admin or setup flows to define a new post category within the board, per requirements for flexible configuration and discoverability."
          },
          "IDiscussionboardPostCategory.IUpdate": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Optional new name for the category. If set, must be unique."
              },
              "description": {
                "type": "string",
                "description": "Optional new description for the category."
              }
            },
            "description": "Fields for updating a post category. Enable admin maintenance or reclassification of board categories.",
            "required": []
          },
          "IDiscussionboardPostTag.IRequest": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Partial tag name, supporting search/find pattern for tags."
              },
              "pagination": {
                "$ref": "#/components/schemas/IPage.IRequest",
                "description": "Standard pagination options for tag search results."
              }
            },
            "description": "Request contract for searching, listing, or filtering post tags, with support for partial name match and paging.",
            "required": []
          },
          "IPage.IRequest": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "format": "uint32",
                "description": "Page number for pagination. Optional; defaults to 1."
              },
              "limit": {
                "type": "integer",
                "format": "uint32",
                "description": "Records per page. Optional; defaults to 100."
              }
            },
            "description": "Standard pagination request type used across paginated result sets.\n\n@see IPage.IRequest in documentation.",
            "required": []
          },
          "IPageIDiscussionboardPostTag": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "페이지네이션 정보를 담고 있습니다.\n\n예를 들어, 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수와 같은 정보를 포함합니다. 이는 목록형 API의 필수 요소로, 페이징 처리와 프론트 UI 연동의 핵심을 담당합니다."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardPostTag"
                },
                "description": "페이지별로 조회된 discussionboard_post_tag 레코드 목록입니다.\n\n각 항목은 게시글 태그 엔티티(단일 태그 포함)를 표현하며, 이 배열은 선택된 조건에 맞는 결과 집합을 페이징 기준에 따라 반환합니다."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "게시글 태그 레코드의 페이지네이션 지원 결과 컨테이너 타입입니다.\n\n쿼리 조건에 일치하는 태그 목록과 페이징 정보가 포함되어 있습니다. 주로 관리자 UI와 대량 데이터 조회 API 응답 본문에서 사용됩니다.\n\n원본 Prisma 스키마: discussionboard_post_tag (tag 분류 시스템, 중복 없는 태그 기본키 관리 테이블)."
          },
          "IDiscussionboardPostTag": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "게시글 태그를 고유하게 식별하는 UUID입니다.\n\nPrisma discussionboard_post_tag.id에서 유래했으며, 쿼리 및 레퍼런스 연산에서 주요 식별자 역할을 합니다. 중복 없는 원자적 레코드 키입니다."
              },
              "name": {
                "type": "string",
                "description": "태그 이름(문자열). 예: 'inflation'\n\ndiscussionboard_post_tag.name에 매핑되며, 유일(unique)이 보장됩니다. 게시글 분류, 검색, 필터에 사용됩니다."
              }
            },
            "required": [
              "id",
              "name"
            ],
            "description": "게시글 태그 정보 테이블 레코드.\n\ndiscussionboard_post_tag의 단일 row를 표현합니다. 주요 목적은 포스트 태그 관리, 토픽 기반 분류, 검색 시스템 지원, 관리자 UI의 태그편집/생성/조회 동작입니다."
          },
          "IDiscussionboardPostTag.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "새로 등록할 태그 이름(문자열).\n\ndiscussionboard_post_tag.name 컬럼으로, 고유(unique) 값이어야 하며 빈 문자열은 허용하지 않습니다. 예: 'inflation', 'trade' 등 청취자 편의성 및 필터링 지원을 위해 명확한 단어 사용이 권장됩니다."
              }
            },
            "required": [
              "name"
            ],
            "description": "게시글 태그 신규 생성(등록) 요청 바디 구조입니다.\n\ndiscussionboard_post_tag 레코드 신규 입력을 위한 계약으로, 관리 UI 또는 API 연동시 필수로 사용합니다."
          },
          "IDiscussionboardPostTag.IUpdate": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "변경 희망 태그 이름(문자열).\n\ndiscussionboard_post_tag.name의 업데이트용 필드입니다. 태그의 오탈자 정정, 명칭 표준화 등 관리용으로 호출합니다."
              }
            },
            "required": [
              "name"
            ],
            "description": "게시글 태그 정보(이름) 변경 요청 바디 구조입니다.\n\n기존 discussionboard_post_tag 레코드의 name 필드 수정에 사용됩니다."
          },
          "IDeleteResponse": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "삭제(삭제 요청 처리) 성공 여부를 Boolean으로 반환합니다.\n\nAPI 레벨에서 동작의 성공/실패를 명확하게 알리기 위한 용도입니다."
              },
              "message": {
                "type": "string",
                "description": "삭제 요청 결과 메시지(예시: 성공/실패 이유, 부가 정보 등)를 전달합니다.\n\n클라이언트 또는 사용자에게 상세 결과 상황을 안내할 때 활용됩니다."
              }
            },
            "required": [
              "success",
              "message"
            ],
            "description": "리소스 삭제 API 호출 시 표준적으로 반환되는 결과 컨테이너 타입입니다.\n\n삭제 성공 여부와 상태 메시지를 제공합니다. 단순 삭제 외에도 소프트딜리션, 권한 오류 등 상태값 변동이 발생했을 때 상세 안내를 포함할 수 있습니다."
          },
          "IDiscussionboardPostAttachment.IRequest": {
            "type": "object",
            "properties": {
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "검색/필터링을 위한 게시글 ID (UUID).\n\n특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다. discussionboard_post_attachment.post_id FK와 연결됩니다."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "검색/필터링을 위한 게시글 ID (UUID).\n\n특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다. discussionboard_post_attachment.post_id FK와 연결됩니다."
                  }
                ],
                "description": "검색/필터링을 위한 게시글 ID (UUID).\n\n특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다. discussionboard_post_attachment.post_id FK와 연결됩니다."
              },
              "file_type": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\n\n특정 파일 종류만 검색할 때 지정합니다."
                  },
                  {
                    "type": "null",
                    "description": "파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\n\n특정 파일 종류만 검색할 때 지정합니다."
                  }
                ],
                "description": "파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\n\n특정 파일 종류만 검색할 때 지정합니다."
              },
              "created_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "업로드 시점(이상, from) ISO 8601 타임스탬프.\n\n주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링)."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "업로드 시점(이상, from) ISO 8601 타임스탬프.\n\n주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링)."
                  }
                ],
                "description": "업로드 시점(이상, from) ISO 8601 타임스탬프.\n\n주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링)."
              },
              "created_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "업로드 시점(이하, to) ISO 8601 타임스탬프.\n\n주어진 날짜/시간 이전 첨부파일 조회조건."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "업로드 시점(이하, to) ISO 8601 타임스탬프.\n\n주어진 날짜/시간 이전 첨부파일 조회조건."
                  }
                ],
                "description": "업로드 시점(이하, to) ISO 8601 타임스탬프.\n\n주어진 날짜/시간 이전 첨부파일 조회조건."
              },
              "page": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "조회 페이지 번호(1-base, Pagination, 선택)."
                  },
                  {
                    "type": "null",
                    "format": "int32",
                    "description": "조회 페이지 번호(1-base, Pagination, 선택)."
                  }
                ],
                "description": "조회 페이지 번호(1-base, Pagination, 선택)."
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "페이지당 항목 수(선택, default=100)."
                  },
                  {
                    "type": "null",
                    "format": "int32",
                    "description": "페이지당 항목 수(선택, default=100)."
                  }
                ],
                "description": "페이지당 항목 수(선택, default=100)."
              }
            },
            "description": "게시글 첨부파일 검색, 필터링, 페이지네이션 요청 바디 타입. discussionboard_post_attachment 테이블의 파일 메타데이터를 조회/선택적으로 탐색할 때 사용됩니다.",
            "required": []
          },
          "IPageIDiscussionboardPostAttachment": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "첨부파일 목록 조회시 사용되는 페이지네이션 정보.\n\n예: 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardPostAttachment"
                },
                "description": "파일 단위의 첨부파일 정보(객체 배열)."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "게시글 첨부파일 목록 결과(페이지네이션 지원).\n\n첨부파일 정보 집합과 페이징 메타가 함께 반환됩니다. discussionboard_post_attachment 테이블의 파일 메타/업로드 내역을 대표합니다."
          },
          "IDiscussionboardPostAttachment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "첨부파일 객체의 고유 UUID입니다.\n\ndiscussionboard_post_attachment.id를 직접 참조하며, 파일의 단일 식별 키로 활용됩니다."
              },
              "post_id": {
                "type": "string",
                "format": "uuid",
                "description": "첨부파일이 소속된 게시글(포스트) UUID입니다.\n\ndiscussionboard_post_attachment.post_id에 대한 FK. 게시글 삭제시 연쇄 삭제 등 비즈니스 로직과 연동됩니다."
              },
              "file_url": {
                "type": "string",
                "description": "업로드된 파일의 접근(다운로드/서빙)용 절대 URL (최대 8만자).\n\nPrisma discussionboard_post_attachment.file_url – S3, CDN 등 외부 파일 경로 포함 가능."
              },
              "file_type": {
                "type": "string",
                "description": "파일 MIME 타입 문자열 (예: 'image/png', 'application/pdf').\n\ndiscussionboard_post_attachment.file_type. 서버/클라이언트에서 미디어 판별에 사용됨."
              },
              "uploaded_at": {
                "type": "string",
                "format": "date-time",
                "description": "업로드 시점(타임스탬프, ISO 표기)\n\ndiscussionboard_post_attachment.uploaded_at. 파일의 업로드 및 정렬 기준."
              }
            },
            "required": [
              "id",
              "post_id",
              "file_url",
              "file_type",
              "uploaded_at"
            ],
            "description": "게시글 첨부파일 단일 객체 정보.\n\ndiscussionboard_post_attachment의 개별 행(row)를 표현합니다. 파일 업로드/리스트, 미디어 콘텐츠 관리의 핵심 타입입니다."
          },
          "IDiscussionboardPostAttachment.ICreate": {
            "type": "object",
            "properties": {
              "post_id": {
                "type": "string",
                "format": "uuid",
                "description": "첨부파일을 등록할 게시글(포스트)의 UUID.\n\ndiscussionboard_post_attachment.post_id FK로, 파일 업로드시 반드시 지정해야 합니다."
              },
              "file_url": {
                "type": "string",
                "description": "첨부파일 접근용 절대 URL (S3/CDN 경로 등).\n\ndiscussionboard_post_attachment.file_url 신규 등록 값. 대용량이므로 최대 길이 준수 필요(8만자 미만 권장)."
              },
              "file_type": {
                "type": "string",
                "description": "업로드 파일의 MIME 타입.\n\n이미지라면 'image/jpeg', 문서일 경우 'application/pdf' 등. 서버-클라이언트 호환성을 고려하여 표준값 입력 필요."
              }
            },
            "required": [
              "post_id",
              "file_url",
              "file_type"
            ],
            "description": "게시글 첨부파일 신규 등록 API 요청용 구조체.\n\ndiscussionboard_post_attachment 테이블의 업로드 신규 레코드와 맵핑됩니다."
          },
          "IDiscussionboardPostAttachment.IUpdate": {
            "type": "object",
            "properties": {
              "file_url": {
                "type": "string",
                "description": "수정하려는 파일 접근 URL.\n\nS3, CDN 등 외부 저장소 경로가 변경되었을 때나 미디어 파일 유지보수시 입력."
              },
              "file_type": {
                "type": "string",
                "description": "수정할 MIME 타입 값입니다.\n\n예: 파일 포맷이 변경된 경우, 잘못 입력된 타입을 정정할 때 사용."
              }
            },
            "description": "게시글 첨부파일 메타데이터(파일 url/mime type 등) 변경 API 요청 구조.\n\ndiscussionboard_post_attachment 테이블의 기존 레코드(파일) 정보를 수정할 때 사용됩니다.",
            "required": []
          },
          "IDiscussionboardComments.IRequest": {
            "type": "object",
            "properties": {
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\n\ndiscussionboard_comments.post_id 필드에 대한 FK."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\n\ndiscussionboard_comments.post_id 필드에 대한 FK."
                  }
                ],
                "description": "특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\n\ndiscussionboard_comments.post_id 필드에 대한 FK."
              },
              "author_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\n\n특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\n\n특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다."
                  }
                ],
                "description": "댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\n\n특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다."
              },
              "parent_comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\n\nthreaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\n\nthreaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다."
                  }
                ],
                "description": "대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\n\nthreaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다."
              },
              "is_deleted": {
                "oneOf": [
                  {
                    "type": "boolean",
                    "description": "삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\n\n일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다."
                  },
                  {
                    "type": "null",
                    "description": "삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\n\n일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다."
                  }
                ],
                "description": "삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\n\n일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다."
              },
              "is_edited": {
                "oneOf": [
                  {
                    "type": "boolean",
                    "description": "편집(수정)된 댓글 여부 필터.\n\n사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null)."
                  },
                  {
                    "type": "null",
                    "description": "편집(수정)된 댓글 여부 필터.\n\n사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null)."
                  }
                ],
                "description": "편집(수정)된 댓글 여부 필터.\n\n사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null)."
              },
              "created_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "생성 시점 필터(이후, from, ISO 8601)."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "생성 시점 필터(이후, from, ISO 8601)."
                  }
                ],
                "description": "생성 시점 필터(이후, from, ISO 8601)."
              },
              "created_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "생성 시점 필터(이전, to, ISO 8601)."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "생성 시점 필터(이전, to, ISO 8601)."
                  }
                ],
                "description": "생성 시점 필터(이전, to, ISO 8601)."
              },
              "page": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "조회할 페이지 번호(1-based, optional)."
                  },
                  {
                    "type": "null",
                    "format": "int32",
                    "description": "조회할 페이지 번호(1-based, optional)."
                  }
                ],
                "description": "조회할 페이지 번호(1-based, optional)."
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "페이지당 항목 개수(default=100, optional)."
                  },
                  {
                    "type": "null",
                    "format": "int32",
                    "description": "페이지당 항목 개수(default=100, optional)."
                  }
                ],
                "description": "페이지당 항목 개수(default=100, optional)."
              }
            },
            "description": "댓글 목록, 필터링, 검색 및 페이징 요청 바디 구조체입니다.\n\ndiscussionboard_comments의 다양한 조회 조건을 프론트, 백엔드, moderation API가 유연히 요청할 수 있게 설계된 타입입니다.",
            "required": []
          },
          "IPageIDiscussionboardComments": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "댓글 목록 페이지 네이션 정보.\n\n현재 페이지, 페이지당 항목, 전체 레코드 수, 전체 페이지 수 등 메타 정보."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardComments"
                },
                "description": "discussionboard_comments에 대한 comment row 객체의 배열.\n\n페이지 조건에 맞는 댓글 조회 결과 목록입니다."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "댓글 목록, 필터/페이징 결과 컨테이너 타입.\n\ndiscussionboard_comments의 복수 row 리턴 구조로, moderation 및 게시글 코멘트 뷰에 일괄 사용됩니다."
          },
          "IDiscussionboardComments": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "고유 식별자입니다. 각 댓글을 고유하게 식별하는 UUID입니다.\n\nPrisma discussionboard_comments의 id 컬럼에 해당합니다. 토론 스레드 내에서 각 댓글의 트레이스 및 참조를 위함입니다."
              },
              "post_id": {
                "type": "string",
                "format": "uuid",
                "description": "이 댓글이 소속된 게시글의 고유 UUID입니다. 토론 내 게시물-댓글 관계를 정의합니다.\n\nPrisma discussionboard_comments의 post_id 컬럼에 해당하며, 게시글 삭제 시 댓글도 종속적으로 삭제됩니다."
              },
              "author_id": {
                "type": "string",
                "format": "uuid",
                "description": "이 댓글을 작성한 사용자의 고유 UUID입니다.\n\nPrisma discussionboard_comments의 author_id 컬럼에 해당하며, 댓글 작성자의 식별 및 활동 추적에 이용됩니다."
              },
              "parent_comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로 취급됩니다.\n\nPrisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로 취급됩니다.\n\nPrisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다."
                  }
                ],
                "description": "계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로 취급됩니다.\n\nPrisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다."
              },
              "content": {
                "type": "string",
                "description": "댓글에 작성된 텍스트 본문입니다. 사용자가 작성한 메시지이며, 길이 제한 및 금칙어 등의 비즈니스 규칙이 적용될 수 있습니다.\n\nPrisma discussionboard_comments의 content 컬럼에 해당합니다."
              },
              "is_edited": {
                "type": "boolean",
                "description": "댓글 내용이 최초 생성 이후 수정된 적이 있는가를 나타냅니다.\n\nPrisma discussionboard_comments의 is_edited 컬럼에 해당합니다."
              },
              "is_deleted": {
                "type": "boolean",
                "description": "댓글이 소프트 삭제되었는지 여부를 나타냅니다. 물리 삭제가 아닌 경우 참으로 표시되며, 실제 데이터는 유지됩니다.\n\nPrisma discussionboard_comments의 is_deleted 컬럼에 해당합니다."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "댓글 최초 작성 시각(ISO 8601 표준)입니다.\n\nPrisma discussionboard_comments의 created_at 컬럼에 해당합니다."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "댓글의 최종 수정(혹은 삭제 표시 등) 시각입니다. 수정을 하지 않았다면 작성 시각과 동일합니다.\n\nPrisma discussionboard_comments의 updated_at 컬럼에 해당합니다."
              }
            },
            "required": [
              "id",
              "post_id",
              "author_id",
              "content",
              "is_edited",
              "is_deleted",
              "created_at",
              "updated_at"
            ],
            "description": "댓글 단건 엔터티. 하나의 게시물에 소속된 댓글(및 대댓글 포함). 계층적 구조가 포함되며, 댓글 삭제/수정 여부 및 생성/수정 시각을 기록합니다.\n\nPrisma discussionboard_comments 테이블 전체를 대표하며, 모든 댓글 API의 응답 구조에 사용됩니다."
          },
          "IDiscussionboardComments.ICreate": {
            "type": "object",
            "properties": {
              "post_id": {
                "type": "string",
                "format": "uuid",
                "description": "댓글을 달고자 하는 게시글의 UUID입니다.\n\nPrisma discussionboard_comments.post_id에 해당하며, 반드시 존재하는 게시글이어야만 합니다."
              },
              "parent_comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\n\nPrisma discussionboard_comments.parent_comment_id에 해당합니다."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\n\nPrisma discussionboard_comments.parent_comment_id에 해당합니다."
                  }
                ],
                "description": "대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\n\nPrisma discussionboard_comments.parent_comment_id에 해당합니다."
              },
              "content": {
                "type": "string",
                "description": "댓글의 텍스트 본문. 반드시 입력되어야 하며, 플랫폼 정책에 따라 길이 제한 또는 필터링이 적용될 수 있습니다.\n\nPrisma discussionboard_comments.content에 해당합니다."
              }
            },
            "required": [
              "post_id",
              "content"
            ],
            "description": "댓글 등록용 요청 객체. 일반 댓글 또는 대댓글 등록 모두 지원합니다.\n\nPrisma discussionboard_comments CREATE 시 요구되는 모든 정보(게시글ID, 부모댓글ID, 내용)를 포함하며, 클라이언트에서 서버로 전달되는 API의 본문 요청 타입입니다."
          },
          "IDiscussionboardComment.IUpdate": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "수정할 댓글의 내용. 수정 시 반드시 본문이 포함되어야 하며, 정책에 따라 길이제한·필터링 등이 적용될 수 있습니다.\n\nPrisma discussionboard_comments.content에 해당합니다."
              }
            },
            "required": [
              "content"
            ],
            "description": "댓글 수정 요청 객체. 수정 대상 댓글의 UUID는 URL 파라미터 등에서 별도로 명시하며, 본문에는 새 내용만 입력합니다.\n\nPrisma discussionboard_comments UPDATE 목적의 요청 타입입니다."
          },
          "IDiscussionboardComment": {
            "$ref": "#/components/schemas/IDiscussionboardComments",
            "description": "댓글 단건 엔터티에 대한 alias 및 참조 용. 구조와 설명은 IDiscussionboardComments와 동일합니다."
          },
          "IDiscussionboardLike.IRequest": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "좋아요를 만든 사용자(UUID). 필터 조건으로 사용 시 입력. Prisma discussionboard_likes.user_id 컬럼에 해당."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma discussionboard_likes.post_id 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma discussionboard_likes.post_id 컬럼."
                  }
                ],
                "description": "해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma discussionboard_likes.post_id 컬럼."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma discussionboard_likes.comment_id 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma discussionboard_likes.comment_id 컬럼."
                  }
                ],
                "description": "해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma discussionboard_likes.comment_id 컬럼."
              },
              "created_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "(선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "(선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색."
                  }
                ],
                "description": "(선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색."
              },
              "created_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "(선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "(선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색."
                  }
                ],
                "description": "(선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색."
              },
              "include_deleted": {
                "type": "boolean",
                "description": "삭제(soft delete)된 좋아요 포함 여부. 기본값(false)인 경우 deleted_at이 null인 데이터만 반환."
              },
              "page": {
                "type": "integer",
                "format": "uint32",
                "description": "페이지 번호(1-base). 기본값은 1."
              },
              "limit": {
                "type": "integer",
                "format": "uint32",
                "description": "한 페이지당 반환 row 수. 기본값 및 최대값(예:1000)은 정책에 따라 조정."
              }
            },
            "required": [
              "page",
              "limit"
            ],
            "description": "좋아요(Like) 엔터티 검색 및 페이징 리스트 반환 요청 타입. 다양한 필터(작성자, 게시글/댓글, 기간, 삭제여부 등)와 페이징이 포함됨."
          },
          "IPageIDiscussionboardLike": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardLike"
                },
                "description": "좋아요 엔터티 목록. 한 페이지에 포함된 discussionboard_likes 레코드들의 배열."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "좋아요 목록의 페이지네이션 컨테이너. 페이징 정보와 좋아요 데이터 배열을 함께 제공합니다."
          },
          "IDiscussionboardLike": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "좋아요 데이터의 고유 식별자(UUID).\n\nPrisma discussionboard_likes.id 컬럼 참조."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "좋아요를 누른 사용자(UUID). Prisma discussionboard_likes.user_id 컬럼."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\n\nPrisma discussionboard_likes.post_id 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\n\nPrisma discussionboard_likes.post_id 컬럼."
                  }
                ],
                "description": "좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\n\nPrisma discussionboard_likes.post_id 컬럼."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\n\nPrisma discussionboard_likes.comment_id 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\n\nPrisma discussionboard_likes.comment_id 컬럼."
                  }
                ],
                "description": "좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\n\nPrisma discussionboard_likes.comment_id 컬럼."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "좋아요 이벤트의 생성일시(ISO 8601). Prisma discussionboard_likes.created_at 컬럼."
              },
              "deleted_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma discussionboard_likes.deleted_at 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma discussionboard_likes.deleted_at 컬럼."
                  }
                ],
                "description": "좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma discussionboard_likes.deleted_at 컬럼."
              }
            },
            "required": [
              "id",
              "user_id",
              "created_at"
            ],
            "description": "좋아요 데이터 단일 엔터티. 게시글/댓글에 대한 유저의 Like 기록 단위.\n\nPrisma discussionboard_likes 테이블 전체 구조 반영."
          },
          "IDiscussionboardLike.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "좋아요를 만드는 사용자(UUID). 클라이언트의 인증 정보와 일치해야 함. Prisma discussionboard_likes.user_id."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력."
                  }
                ],
                "description": "좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력."
                  }
                ],
                "description": "좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력."
              }
            },
            "required": [
              "user_id"
            ],
            "description": "좋아요(Like) 등록 요청 데이터. 게시글 또는 댓글을 하나만 지정해야 하며, 클라이언트가 인증된 사용자와 일치해야 함.\n\nPrisma discussionboard_likes CREATE 시 필요한 payload."
          },
          "IDiscussionboardLike.IUpdate": {
            "type": "object",
            "properties": {
              "deleted_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null."
                  }
                ],
                "description": "좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null."
              }
            },
            "description": "좋아요 기록 수정 요청 객체. 해제(소프트 삭제) 또는 복구 목적. 수정 가능한 필드는 deleted_at 등 상태 전환 속성만 허용함.",
            "required": []
          },
          "IDiscussionboardReport.IRequest": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "신고를 생성한 회원 UUID. 해당 사용자의 신고만 조회할 때 필터로 지정.\n\nPrisma discussionboard_reports.user_id 컬럼."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\n\nPrisma discussionboard_reports.post_id 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\n\nPrisma discussionboard_reports.post_id 컬럼."
                  }
                ],
                "description": "신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\n\nPrisma discussionboard_reports.post_id 컬럼."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\n\nPrisma discussionboard_reports.comment_id 컬럼."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\n\nPrisma discussionboard_reports.comment_id 컬럼."
                  }
                ],
                "description": "신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\n\nPrisma discussionboard_reports.comment_id 컬럼."
              },
              "reason_code": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\n\nPrisma discussionboard_reports.reason_code 컬럼."
                  },
                  {
                    "type": "null",
                    "description": "신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\n\nPrisma discussionboard_reports.reason_code 컬럼."
                  }
                ],
                "description": "신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\n\nPrisma discussionboard_reports.reason_code 컬럼."
              },
              "created_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터."
                  }
                ],
                "description": "신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터."
              },
              "created_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터."
                  }
                ],
                "description": "신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터."
              },
              "include_deleted": {
                "type": "boolean",
                "description": "삭제(soft delete)된 신고 포함 여부. 기본값 false."
              },
              "page": {
                "type": "integer",
                "format": "uint32",
                "description": "페이지 번호(1-base). 기본값 1."
              },
              "limit": {
                "type": "integer",
                "format": "uint32",
                "description": "페이지 당 row 개수. 기본 및 최대는 정책에 따라 조정."
              }
            },
            "required": [
              "page",
              "limit"
            ],
            "description": "신고 목록(페이징) API의 검색 조건 객체. 사용자 ID, 신고 대상(post/comment), 사유코드, 생성일 등 다양한 조건으로 필터링하며, 삭제 포함 여부/페이징 지원."
          },
          "IPageIDiscussionboardReport": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardReport"
                },
                "description": "신고 데이터 각 페이지당 레코드 배열."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "신고 목록 페이징 데이터 컨테이너. pagination과 신고 엔터티 배열."
          },
          "IDiscussionboardReport": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "신고 고유 식별자(UUID).\n\nPrisma discussionboard_reports.id 컬럼."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "신고를 제기한 회원 UUID.\n\nPrisma discussionboard_reports.user_id 컬럼."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재."
                  }
                ],
                "description": "신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "신고 대상 댓글 UUID. 댓글 대상일 때 해당."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "신고 대상 댓글 UUID. 댓글 대상일 때 해당."
                  }
                ],
                "description": "신고 대상 댓글 UUID. 댓글 대상일 때 해당."
              },
              "reason_code": {
                "type": "string",
                "description": "신고 사유 코드(정책에서 사전 정의, 예: 'abuse', 'spam' 등).\n\nPrisma discussionboard_reports.reason_code 컬럼."
              },
              "reason_details": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma discussionboard_reports.reason_details 컬럼."
                  },
                  {
                    "type": "null",
                    "description": "신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma discussionboard_reports.reason_details 컬럼."
                  }
                ],
                "description": "신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma discussionboard_reports.reason_details 컬럼."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "신고 생성일시(ISO 8601). Prisma discussionboard_reports.created_at 컬럼."
              },
              "deleted_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "신고의 소프트삭제 일시. 삭제 되지 않은 경우 null."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "신고의 소프트삭제 일시. 삭제 되지 않은 경우 null."
                  }
                ],
                "description": "신고의 소프트삭제 일시. 삭제 되지 않은 경우 null."
              }
            },
            "required": [
              "id",
              "user_id",
              "reason_code",
              "created_at"
            ],
            "description": "신고 데이터 단일 엔터티. 게시글 또는 댓글에 대한 abuse/spam 신고 이벤트.\n\nPrisma discussionboard_reports 테이블 전체 구조 반영."
          },
          "IDiscussionboardReport.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier (UUID) of the user submitting the report.\n\nRefer to the 'discussionboard_user' table and the requirements in 02_discussionboard_functional_requirements.md Section 3.4 (Reporting). This property enables system-level association of user-originated abuse or spam reports with their reporter, supporting audit trails, notification, and moderation workflows."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the post being reported, if the report targets a post.\n\nRefer to the 'discussionboard_post' table. This field supports polymorphic reporting scenarios (reported content is a post). Nullable: set to null when reporting a comment instead. Ensures normalization by referencing the core post entity only when appropriate. Corresponds to design patterns in schema-04-interaction.prisma (discussionboard_reports)."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "The UUID of the post being reported, if the report targets a post.\n\nRefer to the 'discussionboard_post' table. This field supports polymorphic reporting scenarios (reported content is a post). Nullable: set to null when reporting a comment instead. Ensures normalization by referencing the core post entity only when appropriate. Corresponds to design patterns in schema-04-interaction.prisma (discussionboard_reports)."
                  }
                ],
                "description": "The UUID of the post being reported, if the report targets a post.\n\nRefer to the 'discussionboard_post' table. This field supports polymorphic reporting scenarios (reported content is a post). Nullable: set to null when reporting a comment instead. Ensures normalization by referencing the core post entity only when appropriate. Corresponds to design patterns in schema-04-interaction.prisma (discussionboard_reports)."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the comment being reported, if the report targets a comment.\n\nRefer to the 'discussionboard_comments' table. This field supports polymorphic reporting scenarios (reported content is a comment). Nullable: set to null when reporting a post instead. This enables consistent, atomic tracking of report targets."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "The UUID of the comment being reported, if the report targets a comment.\n\nRefer to the 'discussionboard_comments' table. This field supports polymorphic reporting scenarios (reported content is a comment). Nullable: set to null when reporting a post instead. This enables consistent, atomic tracking of report targets."
                  }
                ],
                "description": "The UUID of the comment being reported, if the report targets a comment.\n\nRefer to the 'discussionboard_comments' table. This field supports polymorphic reporting scenarios (reported content is a comment). Nullable: set to null when reporting a post instead. This enables consistent, atomic tracking of report targets."
              },
              "reason_code": {
                "type": "string",
                "description": "A structured code representing the reason for the report (e.g., 'abuse', 'spam', or 'off-topic').\n\nThis property must match preapproved system values to allow downstream moderation analytics and workflow automation. The value is validated at the application level. Ensures systematization of abuse categories as required in reporting workflows."
              },
              "reason_details": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optional, extended rationale or context for the report as entered by the reporting user.\n\nNullable. Useful for appeals and detailed moderation review per 02_discussionboard_functional_requirements.md Section 3.4. Not mandatory; if omitted, the reason_code should provide high-level context."
                  },
                  {
                    "type": "null",
                    "description": "Optional, extended rationale or context for the report as entered by the reporting user.\n\nNullable. Useful for appeals and detailed moderation review per 02_discussionboard_functional_requirements.md Section 3.4. Not mandatory; if omitted, the reason_code should provide high-level context."
                  }
                ],
                "description": "Optional, extended rationale or context for the report as entered by the reporting user.\n\nNullable. Useful for appeals and detailed moderation review per 02_discussionboard_functional_requirements.md Section 3.4. Not mandatory; if omitted, the reason_code should provide high-level context."
              }
            },
            "required": [
              "user_id",
              "reason_code"
            ],
            "description": "Represents the payload for creating a new item in the 'discussionboard_reports' table (abuse/spam/guideline violation reports).\n\nAligns with the reporting requirements described in 3.4 and 3.5 of the requirements analysis and supports the polymorphic reporting of both posts and comments. All fields must be strictly normalized and validated as per discussionboard schema-04-interaction.prisma."
          },
          "IDiscussionboardReport.IUpdate": {
            "type": "object",
            "properties": {
              "reason_code": {
                "type": "string",
                "description": "Updated code for the report reason (e.g., 'abuse', 'spam').\n\nMay be used to change or clarify the violation category. Application logic validates values as per platform rules."
              },
              "reason_details": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optionally revised or appended contextual information for the report.\n\nEditable before or during moderation workflow, supporting detail correction or appeals as described in requirements Section 3.4 and corresponding moderation flows."
                  },
                  {
                    "type": "null",
                    "description": "Optionally revised or appended contextual information for the report.\n\nEditable before or during moderation workflow, supporting detail correction or appeals as described in requirements Section 3.4 and corresponding moderation flows."
                  }
                ],
                "description": "Optionally revised or appended contextual information for the report.\n\nEditable before or during moderation workflow, supporting detail correction or appeals as described in requirements Section 3.4 and corresponding moderation flows."
              }
            },
            "required": [
              "reason_code"
            ],
            "description": "Update payload for a report in the 'discussionboard_reports' table.\n\nUses fields relevant for revision prior to or during moderation review. Aligns with flexible reporting flows as defined in the requirements analysis (Section 3.4, 3.5)."
          },
          "IDiscussionboardModerationAction.IRequest": {
            "type": "object",
            "properties": {
              "actor_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter by the moderator/admin (actor) who performed the moderation action.\n\nNullable, to allow unfiltered or broad searches. Corresponds to 'actor_id' field of 'discussionboard_moderation_action'. Used for moderation transparency in audit dashboards."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter by the moderator/admin (actor) who performed the moderation action.\n\nNullable, to allow unfiltered or broad searches. Corresponds to 'actor_id' field of 'discussionboard_moderation_action'. Used for moderation transparency in audit dashboards."
                  }
                ],
                "description": "Optionally filter by the moderator/admin (actor) who performed the moderation action.\n\nNullable, to allow unfiltered or broad searches. Corresponds to 'actor_id' field of 'discussionboard_moderation_action'. Used for moderation transparency in audit dashboards."
              },
              "target_user_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter by the target user who received moderation action.\n\nThis allows searches for all moderation events affecting a specific user, supporting audit and appeals functionality."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter by the target user who received moderation action.\n\nThis allows searches for all moderation events affecting a specific user, supporting audit and appeals functionality."
                  }
                ],
                "description": "Optionally filter by the target user who received moderation action.\n\nThis allows searches for all moderation events affecting a specific user, supporting audit and appeals functionality."
              },
              "action_type": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optionally filter by action type (e.g. 'delete_post', 'hide_comment', 'ban_user').\n\nNullable for broad queries. This enables targeted searches for type-specific moderation activity as per the requirements for moderator/admin oversight."
                  },
                  {
                    "type": "null",
                    "description": "Optionally filter by action type (e.g. 'delete_post', 'hide_comment', 'ban_user').\n\nNullable for broad queries. This enables targeted searches for type-specific moderation activity as per the requirements for moderator/admin oversight."
                  }
                ],
                "description": "Optionally filter by action type (e.g. 'delete_post', 'hide_comment', 'ban_user').\n\nNullable for broad queries. This enables targeted searches for type-specific moderation activity as per the requirements for moderator/admin oversight."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter for moderation actions impacting a particular post.\n\nNullable—corresponds to the 'post_id' of 'discussionboard_moderation_action'. Important for post-centric audit workflows."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter for moderation actions impacting a particular post.\n\nNullable—corresponds to the 'post_id' of 'discussionboard_moderation_action'. Important for post-centric audit workflows."
                  }
                ],
                "description": "Optionally filter for moderation actions impacting a particular post.\n\nNullable—corresponds to the 'post_id' of 'discussionboard_moderation_action'. Important for post-centric audit workflows."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter for moderation actions affecting a specific comment.\n\nNullable—enables searches for comment-based moderation (e.g., hidden or deleted comments)."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter for moderation actions affecting a specific comment.\n\nNullable—enables searches for comment-based moderation (e.g., hidden or deleted comments)."
                  }
                ],
                "description": "Optionally filter for moderation actions affecting a specific comment.\n\nNullable—enables searches for comment-based moderation (e.g., hidden or deleted comments)."
              },
              "created_at_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optionally filter for moderation actions created after this ISO 8601 timestamp.\n\nNullable. Enables auditing by date range for moderation history."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "Optionally filter for moderation actions created after this ISO 8601 timestamp.\n\nNullable. Enables auditing by date range for moderation history."
                  }
                ],
                "description": "Optionally filter for moderation actions created after this ISO 8601 timestamp.\n\nNullable. Enables auditing by date range for moderation history."
              },
              "created_at_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optionally filter for moderation actions created before this ISO 8601 timestamp.\n\nNullable. Used for date range filtering as per requirements for dashboard review."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "Optionally filter for moderation actions created before this ISO 8601 timestamp.\n\nNullable. Used for date range filtering as per requirements for dashboard review."
                  }
                ],
                "description": "Optionally filter for moderation actions created before this ISO 8601 timestamp.\n\nNullable. Used for date range filtering as per requirements for dashboard review."
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The maximum number of moderation actions to return (pagination limit).\n\nNullable; defaults to a platform default if omitted. Avoids excessive data transfer in admin workflows."
                  },
                  {
                    "type": "null",
                    "minimum": 1,
                    "description": "The maximum number of moderation actions to return (pagination limit).\n\nNullable; defaults to a platform default if omitted. Avoids excessive data transfer in admin workflows."
                  }
                ],
                "description": "The maximum number of moderation actions to return (pagination limit).\n\nNullable; defaults to a platform default if omitted. Avoids excessive data transfer in admin workflows."
              },
              "offset": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Zero-based offset of the first moderation action to return (pagination offset).\n\nNullable; enables paged retrieval for large result sets."
                  },
                  {
                    "type": "null",
                    "minimum": 0,
                    "description": "Zero-based offset of the first moderation action to return (pagination offset).\n\nNullable; enables paged retrieval for large result sets."
                  }
                ],
                "description": "Zero-based offset of the first moderation action to return (pagination offset).\n\nNullable; enables paged retrieval for large result sets."
              }
            },
            "description": "Query/filter/pagination request object for listing moderation actions.\n\nSupports advanced searching, filtering, and pagination for the discussionboard_moderation_action table, enabling comprehensive moderation review and dashboard analytics.",
            "required": []
          },
          "IPageIDiscussionboardModerationAction": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "Pagination metadata: current page, limit, total records, total pages.\n\nRequired for paged/efficient admin dashboard consumption of moderation actions."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardModerationAction"
                },
                "description": "Array of moderation action records for this page.\n\nEach element represents a row from discussionboard_moderation_action, fully normalized, ready for detailed rendering or further audit workflows."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "Paged container for moderation action results.\n\nReturns a result list and pagination metadata for moderation dashboards and admin audit tools."
          },
          "IDiscussionboardModerationAction": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique UUID (primary key) for this moderation action.\n\nDirectly mirrors the 'id' column from discussionboard_moderation_action. Required for detailed lookup and audit traceability."
              },
              "actor_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the user (admin/moderator) who performed the moderation action.\n\nReferences the 'actor_id' in the moderation audit and is essential for establishing system accountability (actor/issuer relationship)."
              },
              "target_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the user who received or was targeted by the moderation action.\n\nEstablishes referential traceability as per requirements for reporting, appeal, and audit (connects disciplinary action to the affected user)."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable UUID of the post affected by this moderation action, if applicable.\n\nPopulated for content moderation targeting a specific post (e.g., deleted/hidden posts)."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable UUID of the post affected by this moderation action, if applicable.\n\nPopulated for content moderation targeting a specific post (e.g., deleted/hidden posts)."
                  }
                ],
                "description": "Nullable UUID of the post affected by this moderation action, if applicable.\n\nPopulated for content moderation targeting a specific post (e.g., deleted/hidden posts)."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable UUID of the comment affected by this moderation action, if applicable.\n\nSupports ticketing, escalation, and moderation workflows at the comment (thread) level."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable UUID of the comment affected by this moderation action, if applicable.\n\nSupports ticketing, escalation, and moderation workflows at the comment (thread) level."
                  }
                ],
                "description": "Nullable UUID of the comment affected by this moderation action, if applicable.\n\nSupports ticketing, escalation, and moderation workflows at the comment (thread) level."
              },
              "action_type": {
                "type": "string",
                "description": "The type of moderation action (e.g., 'delete_post', 'ban_user', 'hide_comment', etc.).\n\nEnables categorical review, analytics, and streamlined workflow automation as per requirements for content governance."
              },
              "reason": {
                "type": "string",
                "description": "Textual rationale for the moderation action as entered by the moderator/admin.\n\nCritical for supporting user appeals and ensuring system transparency; referenced in user notification and appeals dashboards."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (ISO 8601) recording when the moderation action was performed (row creation time).\n\nUsed for audit review, analytics, and regulatory compliance."
              }
            },
            "required": [
              "id",
              "actor_id",
              "target_user_id",
              "action_type",
              "reason",
              "created_at"
            ],
            "description": "Represents a single moderation action event as recorded in discussionboard_moderation_action.\n\nContains all atomic fields needed for detailed review, appeals handling, and moderation dashboards. Follows audit and traceability best practices in platform governance."
          },
          "IDiscussionboardModerationAction.ICreate": {
            "type": "object",
            "properties": {
              "actor_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID for the moderator/admin performing the moderation action.\n\nRequired to establish issuer responsibility as per compliance and regulatory requirements (see requirements documents 02.3.5, 03)."
              },
              "target_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the user who is the subject/recipient of the moderation action.\n\nDirectly reflects affected users in disciplinary actions and supports audit, appeals, and notification."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable UUID of a post affected by the moderation action, if relevant.\n\nUsed for post-centric moderation (deletes, hides). Set to null if unrelated or the moderation event targets a comment or user action."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable UUID of a post affected by the moderation action, if relevant.\n\nUsed for post-centric moderation (deletes, hides). Set to null if unrelated or the moderation event targets a comment or user action."
                  }
                ],
                "description": "Nullable UUID of a post affected by the moderation action, if relevant.\n\nUsed for post-centric moderation (deletes, hides). Set to null if unrelated or the moderation event targets a comment or user action."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable UUID of a comment affected by this moderation action, if relevant.\n\nUsed for moderation of comment chains or individual comments. Set to null for non-comment events."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable UUID of a comment affected by this moderation action, if relevant.\n\nUsed for moderation of comment chains or individual comments. Set to null for non-comment events."
                  }
                ],
                "description": "Nullable UUID of a comment affected by this moderation action, if relevant.\n\nUsed for moderation of comment chains or individual comments. Set to null for non-comment events."
              },
              "action_type": {
                "type": "string",
                "description": "Categorical string indicating the nature of the moderation event (e.g., 'delete_post', 'warning', 'ban_user').\n\nBusiness logic validates admissible values as per platform rulebook (see requirements 02.3.5)."
              },
              "reason": {
                "type": "string",
                "description": "The moderator/admin rationale for the action, as a freeform string to document the basis for moderation.\n\nUsed for appeals, transparency, and audit."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the moderation action took place (operation time, ISO 8601).\n\nSupports time-based analytics, SLAs, and audit trace reconstruction."
              }
            },
            "required": [
              "actor_id",
              "target_user_id",
              "action_type",
              "reason",
              "created_at"
            ],
            "description": "Creation payload to log a new moderation action.\n\nThis is the write-end for 'discussionboard_moderation_action' as per the audit, governance, and appeals workflows in platform requirements."
          },
          "IDiscussionboardModerationAction.IUpdate": {
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string",
                "description": "Category/type for the moderation action (e.g., 'warning', 'delete_post').\n\nMay support correction/annotation during post-hoc audit or appeals process."
              },
              "reason": {
                "type": "string",
                "description": "The updated rationale or moderator notes as freeform text.\n\nSupports traceability and transparency (justification review in audits)."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable UUID for updating the post reference affected by this action (if applicable).\n\nMay be required if moderation affects a new post on correction."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable UUID for updating the post reference affected by this action (if applicable).\n\nMay be required if moderation affects a new post on correction."
                  }
                ],
                "description": "Nullable UUID for updating the post reference affected by this action (if applicable).\n\nMay be required if moderation affects a new post on correction."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable UUID for updating the comment reference affected by moderation (if applicable).\n\nEndpoints provide business logic enforcing referential integrity."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable UUID for updating the comment reference affected by moderation (if applicable).\n\nEndpoints provide business logic enforcing referential integrity."
                  }
                ],
                "description": "Nullable UUID for updating the comment reference affected by moderation (if applicable).\n\nEndpoints provide business logic enforcing referential integrity."
              }
            },
            "description": "Update payload for modifying fields of a moderation action.\n\nUsed for correcting, annotating, or clarifying action records as allowed under requirements for appeals and audit.",
            "required": []
          },
          "IDiscussionboardReportReview.IRequest": {
            "type": "object",
            "properties": {
              "reviewer_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter reviews by the moderator/admin (reviewer) who handled the report.\n\nNullable for broad or unfiltered searches. Corresponds to 'reviewer_id' in 'discussionboard_report_review'."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter reviews by the moderator/admin (reviewer) who handled the report.\n\nNullable for broad or unfiltered searches. Corresponds to 'reviewer_id' in 'discussionboard_report_review'."
                  }
                ],
                "description": "Optionally filter reviews by the moderator/admin (reviewer) who handled the report.\n\nNullable for broad or unfiltered searches. Corresponds to 'reviewer_id' in 'discussionboard_report_review'."
              },
              "report_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally restrict to reviews for a specific report/event, by UUID.\n\nNullable to support broad audit queries. Provides targeted history for report outcomes."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally restrict to reviews for a specific report/event, by UUID.\n\nNullable to support broad audit queries. Provides targeted history for report outcomes."
                  }
                ],
                "description": "Optionally restrict to reviews for a specific report/event, by UUID.\n\nNullable to support broad audit queries. Provides targeted history for report outcomes."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter by the post ID reviewed in connection with the report.\n\nNullable; enables traceability to specific content and escalation tracking."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter by the post ID reviewed in connection with the report.\n\nNullable; enables traceability to specific content and escalation tracking."
                  }
                ],
                "description": "Optionally filter by the post ID reviewed in connection with the report.\n\nNullable; enables traceability to specific content and escalation tracking."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally filter by comment ID if the review is related to a comment report.\n\nNullable for thread-specific audit flows."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally filter by comment ID if the review is related to a comment report.\n\nNullable for thread-specific audit flows."
                  }
                ],
                "description": "Optionally filter by comment ID if the review is related to a comment report.\n\nNullable for thread-specific audit flows."
              },
              "review_status": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "String filter for status of report review (e.g., 'resolved', 'pending', 'rejected').\n\nNullable, allowing for holistic or targeted queries depending on audit needs."
                  },
                  {
                    "type": "null",
                    "description": "String filter for status of report review (e.g., 'resolved', 'pending', 'rejected').\n\nNullable, allowing for holistic or targeted queries depending on audit needs."
                  }
                ],
                "description": "String filter for status of report review (e.g., 'resolved', 'pending', 'rejected').\n\nNullable, allowing for holistic or targeted queries depending on audit needs."
              },
              "reviewed_at_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp for earliest review date (inclusive), for time window search.\n\nNullable, enabling efficient audit process for compliance spans."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp for earliest review date (inclusive), for time window search.\n\nNullable, enabling efficient audit process for compliance spans."
                  }
                ],
                "description": "ISO 8601 timestamp for earliest review date (inclusive), for time window search.\n\nNullable, enabling efficient audit process for compliance spans."
              },
              "reviewed_at_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp for latest review date (inclusive), for time window search.\n\nNullable—enables time range queries for workflow analytics."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp for latest review date (inclusive), for time window search.\n\nNullable—enables time range queries for workflow analytics."
                  }
                ],
                "description": "ISO 8601 timestamp for latest review date (inclusive), for time window search.\n\nNullable—enables time range queries for workflow analytics."
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Max number of items to return (pagination limit).\n\nNullable; defaults to platform standard if omitted. Avoids excessive page sizes."
                  },
                  {
                    "type": "null",
                    "minimum": 1,
                    "description": "Max number of items to return (pagination limit).\n\nNullable; defaults to platform standard if omitted. Avoids excessive page sizes."
                  }
                ],
                "description": "Max number of items to return (pagination limit).\n\nNullable; defaults to platform standard if omitted. Avoids excessive page sizes."
              },
              "offset": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Zero-based result offset for pagination.\n\nNullable; supports efficient dashboard drilldown and history review."
                  },
                  {
                    "type": "null",
                    "minimum": 0,
                    "description": "Zero-based result offset for pagination.\n\nNullable; supports efficient dashboard drilldown and history review."
                  }
                ],
                "description": "Zero-based result offset for pagination.\n\nNullable; supports efficient dashboard drilldown and history review."
              }
            },
            "description": "Query/filter request for paginating and searching report review logs.\n\nUsed in moderation dashboards and admin audit panels for traceable report resolution workflows.",
            "required": []
          },
          "IPageIDiscussionboardReportReview": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "Pagination information: current page, results per page, total records, and page count.\n\nRequired for normalization and supporting dashboard UIs for report reviews."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardReportReview"
                },
                "description": "Array of reviewed report records for this page.\n\nEach entry is a detailed, atomic record—prepared for appeals, moderation metrics, or audit review."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "Paged result container for report review search/list endpoints.\n\nSupports efficient retrieval of review histories and moderation workflow analysis."
          },
          "IDiscussionboardReportReview": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Globally unique identifier for this report review in 'discussionboard_report_review'.\n\nRequired for lookup, reference from workflow dashboards, and audit compliance."
              },
              "report_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the abuse/spam report under review.\n\nCorresponds to 'id' in 'discussionboard_reports', supporting full referential trace during moderation workflow."
              },
              "reviewer_id": {
                "type": "string",
                "format": "uuid",
                "description": "Moderator or admin (UUID) who reviewed the report.\n\nProvides traceability, accountability, and analytics for compliance."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "If applicable, the UUID of the post connected to the reviewed report.\n\nNull if the report is not linked to a post. Supports post-centric review flows."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "If applicable, the UUID of the post connected to the reviewed report.\n\nNull if the report is not linked to a post. Supports post-centric review flows."
                  }
                ],
                "description": "If applicable, the UUID of the post connected to the reviewed report.\n\nNull if the report is not linked to a post. Supports post-centric review flows."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "If applicable, the UUID of the comment connected to the reviewed report.\n\nNull unless the review event targets comment-level content."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "If applicable, the UUID of the comment connected to the reviewed report.\n\nNull unless the review event targets comment-level content."
                  }
                ],
                "description": "If applicable, the UUID of the comment connected to the reviewed report.\n\nNull unless the review event targets comment-level content."
              },
              "review_status": {
                "type": "string",
                "description": "Resolution status for the reviewed report (e.g., 'resolved', 'rejected', 'pending').\n\nUsed for dashboards, reporting appeals, and analytics."
              },
              "moderator_comment": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optional notes/justification by the reviewing moderator or admin.\n\nSupports audit, transparency, and appeals support in moderation workflows. Nullable if no comment provided."
                  },
                  {
                    "type": "null",
                    "description": "Optional notes/justification by the reviewing moderator or admin.\n\nSupports audit, transparency, and appeals support in moderation workflows. Nullable if no comment provided."
                  }
                ],
                "description": "Optional notes/justification by the reviewing moderator or admin.\n\nSupports audit, transparency, and appeals support in moderation workflows. Nullable if no comment provided."
              },
              "reviewed_at": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 timestamp (reviewed_at) when the review was submitted or finalized.\n\nUsed for audit, analytics, and process SLAs."
              }
            },
            "required": [
              "id",
              "report_id",
              "reviewer_id",
              "review_status",
              "reviewed_at"
            ],
            "description": "Represents a finalized review of a user report (abuse/spam).\n\nContains all atomic fields for reference and appeal, enabling audit/analytics as specified in moderation/reporting workflows."
          },
          "IDiscussionboardReportReview.ICreate": {
            "type": "object",
            "properties": {
              "report_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID of the reported abuse/spam/violation event being reviewed.\n\nImplementing full audit and referential integrity to 'discussionboard_reports'. Required per moderation process."
              },
              "reviewer_id": {
                "type": "string",
                "format": "uuid",
                "description": "UUID for the reviewing moderator/admin user.\n\nIdentifies responsible actor for compliance tracking."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional: UUID of the post associated with this review (if any).\n\nNull for comment-only reports. Used to link resolution outcomes with specific content in compliance tracking."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional: UUID of the post associated with this review (if any).\n\nNull for comment-only reports. Used to link resolution outcomes with specific content in compliance tracking."
                  }
                ],
                "description": "Optional: UUID of the post associated with this review (if any).\n\nNull for comment-only reports. Used to link resolution outcomes with specific content in compliance tracking."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional: UUID of the comment associated (if any) for comment-level reviews.\n\nNull indicates the review is not comment-centric."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional: UUID of the comment associated (if any) for comment-level reviews.\n\nNull indicates the review is not comment-centric."
                  }
                ],
                "description": "Optional: UUID of the comment associated (if any) for comment-level reviews.\n\nNull indicates the review is not comment-centric."
              },
              "review_status": {
                "type": "string",
                "description": "Resolution outcome for the reviewed report (e.g. 'resolved', 'pending', 'rejected').\n\nRequired for workflow state tracking and compliance."
              },
              "moderator_comment": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optional notes/explanation added by reviewer to clarify outcome.\n\nNullable—used for transparency and workflow completeness. Recommended for detailed moderation reviews."
                  },
                  {
                    "type": "null",
                    "description": "Optional notes/explanation added by reviewer to clarify outcome.\n\nNullable—used for transparency and workflow completeness. Recommended for detailed moderation reviews."
                  }
                ],
                "description": "Optional notes/explanation added by reviewer to clarify outcome.\n\nNullable—used for transparency and workflow completeness. Recommended for detailed moderation reviews."
              },
              "reviewed_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (ISO 8601) for when the review was conducted.\n\nMandated for audit, SLA, and analytics workflows."
              }
            },
            "required": [
              "report_id",
              "reviewer_id",
              "review_status",
              "reviewed_at"
            ],
            "description": "Request payload for creating a new report review event.\n\nRecords all state transitions for moderation workflows as outlined in platform reporting and moderation requirements."
          },
          "IDiscussionboardReportReview.IUpdate": {
            "type": "object",
            "properties": {
              "review_status": {
                "type": "string",
                "description": "Updated string for the review's status (e.g., 'resolved', 'pending', 'rejected').\n\nEnables post-hoc correction, annotation, or process-tracking adjustments."
              },
              "moderator_comment": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Updated notes/justification from the moderator or admin reviewing the report.\n\nNullable, used for ongoing transparency as required in audit/appeals processes."
                  },
                  {
                    "type": "null",
                    "description": "Updated notes/justification from the moderator or admin reviewing the report.\n\nNullable, used for ongoing transparency as required in audit/appeals processes."
                  }
                ],
                "description": "Updated notes/justification from the moderator or admin reviewing the report.\n\nNullable, used for ongoing transparency as required in audit/appeals processes."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional UUID linking the review to a post (if applicable after update).\n\nNullable for workflows that adjust content linkage as part of an appeal or correction."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional UUID linking the review to a post (if applicable after update).\n\nNullable for workflows that adjust content linkage as part of an appeal or correction."
                  }
                ],
                "description": "Optional UUID linking the review to a post (if applicable after update).\n\nNullable for workflows that adjust content linkage as part of an appeal or correction."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional UUID linking the review to a comment (if applicable after update).\n\nEnables corrections or clarifications during the appeals or moderation refinement process."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional UUID linking the review to a comment (if applicable after update).\n\nEnables corrections or clarifications during the appeals or moderation refinement process."
                  }
                ],
                "description": "Optional UUID linking the review to a comment (if applicable after update).\n\nEnables corrections or clarifications during the appeals or moderation refinement process."
              }
            },
            "description": "Update payload for a report review record.\n\nUsed for correction, appeal documentation, or linking to new content references as allowed in post-hoc review/audit.",
            "required": []
          },
          "IDiscussionboardWarning.IRequest": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Warning의 고유 식별자(UUID)입니다.\n\n해당 경고 기록을 특정하여 검색할 때 사용됩니다. 관리/감사 흐름에서는 필요시 이 필드를 기준으로 특정 경고만 조회할 수 있습니다."
              },
              "issued_by_id": {
                "type": "string",
                "format": "uuid",
                "description": "경고를 발급한 담당(관리자/모더레이터) 계정의 사용자 ID(UUID)입니다.\n\n발급자에 의해 필터링 및 감사 로그에서 사용됩니다."
              },
              "issued_to_id": {
                "type": "string",
                "format": "uuid",
                "description": "경고를 받은 대상 사용자 ID(UUID)입니다.\n\n경고 내역을 사용자별로 필터링하거나, 유저 상세 화면에서 전체 경고내역을 조회할 때 활용됩니다."
              },
              "warning_type": {
                "type": "string",
                "description": "경고 유형(예: abuse, spam 등)\n\n업무 분류를 목적으로 사용합니다. 관리자/모더레이터가 경고 기록을 유형별로 통계, 필터링하거나, 이후 ban 정책/자동화 규칙에 연동할 때 기준이 됩니다."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "경고가 특정 포스트에 대한 경우, 해당 포스트의 UUID입니다.\n\n관련 포스트 단위로 필터링하거나 경고 내역에 구체적 맥락을 부여할 때 사용됩니다."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "경고가 특정 포스트에 대한 경우, 해당 포스트의 UUID입니다.\n\n관련 포스트 단위로 필터링하거나 경고 내역에 구체적 맥락을 부여할 때 사용됩니다."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "경고와 관련된 코멘트가 있는 경우, 해당 코멘트의 UUID입니다.\n\n경고와 코멘트의 연동감사·구체적 맥락 부여에 사용됩니다."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "경고와 관련된 코멘트가 있는 경우, 해당 코멘트의 UUID입니다.\n\n경고와 코멘트의 연동감사·구체적 맥락 부여에 사용됩니다."
              },
              "issued_at": {
                "type": "string",
                "format": "date-time",
                "description": "경고가 발행된 UTC 시각(ISO8601 Date Time)\n\n경고 발급 시점 기준으로 정렬, 범위 검색 등에 사용됩니다."
              },
              "page": {
                "oneOf": [
                  {
                    "type": "integer",
                    "description": "페이지 번호 (페이지네이션 요청용)\n\n대량 데이터 요청에서 결과 페이지를 제어합니다."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "페이지 번호 (페이지네이션 요청용)\n\n대량 데이터 요청에서 결과 페이지를 제어합니다."
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "description": "페이지 당 결과 수 (페이지네이션 요청용)\n\n기본값 또는 클라이언트 지정 값으로 제한합니다."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "페이지 당 결과 수 (페이지네이션 요청용)\n\n기본값 또는 클라이언트 지정 값으로 제한합니다."
              }
            },
            "description": "경고(Warnings) 목록 또는 상세 검색 요청 파라미터.\n\n특정 경고의 조건(발급자, 수신자, 유형, 포스트/댓글, 기간 등)으로 필터링 검색 및 페이지네이션을 위한 입력 스키마입니다. 모든 필드는 선택적이며, 필요한 조건만 전달 가능합니다.",
            "required": []
          },
          "IPageIDiscussionboardWarning": {
            "type": "object",
            "description": "경고 기록 목록의 페이지네이션 결과 컨테이너\n\n경고 목록을 페이지 단위로 조회할 때, 실제 데이터 목록과 전체 페이지/레코드 정보를 제공합니다. 관리/감사 UI 및 사용자 프로필 경고 내역 등에서 사용합니다.",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardWarning"
                },
                "description": "해당 페이지 내 경고 레코드 배열"
              }
            },
            "required": [
              "pagination",
              "data"
            ]
          },
          "IDiscussionboardWarning": {
            "type": "object",
            "description": "경고(WARNING) 단일 레코드 데이터\n\n모더레이터 또는 관리자에 의해 특정 유저에게 발급된 공식 경고 기록. 경고 수신자, 발급자, 발급 사유/유형 및 연관된 게시글/댓글, 실제 메시지와 타임스탬프를 제공합니다. 이 정보는 ban 근거 자료, 사용자 프로필의 경고 내역, 관리자 대시보드 등에 직접 노출됩니다.",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "경고 고유 식별자(UUID)\n\n디비 내에서 유일성을 보증하는 기본 키입니다."
              },
              "issued_by_id": {
                "type": "string",
                "format": "uuid",
                "description": "경고 발급자(관리자/모더레이터) 사용자의 UUID\n\n행위자 감사, 권한 관리, 향후 dispute 처리에서 활용합니다."
              },
              "issued_to_id": {
                "type": "string",
                "format": "uuid",
                "description": "경고 대상 사용자 UUID\n\n경고 이력 추적, 사용자 별 경고 집계 등에 사용됩니다."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "경고와 연관된 게시글 UUID (nullable)\n\n구체적 게시글이나 맥락 제공/감사 시 활용합니다."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "경고와 연관된 게시글 UUID (nullable)\n\n구체적 게시글이나 맥락 제공/감사 시 활용합니다."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "경고와 연관된 댓글 UUID (nullable)\n\n해당 경고와 직접 연결된 댓글이 있는 경우 참조됩니다."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "경고와 연관된 댓글 UUID (nullable)\n\n해당 경고와 직접 연결된 댓글이 있는 경우 참조됩니다."
              },
              "warning_type": {
                "type": "string",
                "description": "경고 유형 -- abuse, spam, 기타 플랫폼 정책에 따른 유형을 저장합니다.\n\n관리/모더레이터가 경고 정책 및 토큰 기반 제재를 누적 또는 분류할 때 활용됩니다."
              },
              "message": {
                "type": "string",
                "description": "실제 발급 메시지(설명)\n\n경고의 사유 또는 상세 설명으로, 사용자에게 제공되는 실제 안내 메시지입니다."
              },
              "issued_at": {
                "type": "string",
                "format": "date-time",
                "description": "경고 발급 시각(UTC 시간, ISO8601 양식)\n\n발급 이력 또는 기간별 통계 등에 사용합니다."
              }
            },
            "required": [
              "id",
              "issued_by_id",
              "issued_to_id",
              "warning_type",
              "message",
              "issued_at"
            ]
          },
          "IDiscussionboardWarning.ICreate": {
            "type": "object",
            "description": "새 경고 발급 생성 요청에 필요한 필드\n\n플랫폼 관리자나 모더레이터가 사용자에게 신규 경고를 발급할 때 전달하는 데이터 구조입니다. 정책·자동화 시스템에서 직접 호출할 수 있습니다.",
            "properties": {
              "issued_by_id": {
                "type": "string",
                "format": "uuid",
                "description": "경고를 발급하는 담당(관리자/모더레이터) 계정의 사용자ID(UUID)\n\n행위자 감사 등에서 활용."
              },
              "issued_to_id": {
                "type": "string",
                "format": "uuid",
                "description": "경고를 받는 사용자 ID(UUID)\n\n경고의 수신자입니다."
              },
              "warning_type": {
                "type": "string",
                "description": "경고의 유형(예: abuse, spam 등)\n\n플랫폼 정책 분류, 추후 ban의 기준, 통계 등에서 활용함."
              },
              "message": {
                "type": "string",
                "description": "경고 메시지(실제 설명)\n\n플랫폼/관리자/모더레이터가 경고의 사유를 명확히 남길 때 사용됩니다."
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "해당 경고와 연관된 게시글의 UUID(선택)\n\n게시글 단위로 맥락화할 때 사용, 반드시 필요하지 않음."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "해당 경고와 연관된 게시글의 UUID(선택)\n\n게시글 단위로 맥락화할 때 사용, 반드시 필요하지 않음."
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "해당 경고와 관련된 댓글 UUID(선택)\n\n코멘트 맥락 제공을 위한 선택 제출 필드."
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "해당 경고와 관련된 댓글 UUID(선택)\n\n코멘트 맥락 제공을 위한 선택 제출 필드."
              }
            },
            "required": [
              "issued_by_id",
              "issued_to_id",
              "warning_type",
              "message"
            ]
          },
          "IDiscussionboardWarning.IUpdate": {
            "type": "object",
            "description": "경고 수정(메시지, 유형 등) 요청\n\n경고의 메시지, 유형, 참조 링크(포스트/코멘트)를 수정해야 할 때 사용합니다. 발급/수정은 감사 내역에 저장됩니다.",
            "properties": {
              "warning_type": {
                "type": "string",
                "description": "갱신할 경고 유형. (예: abuse, spam 등)"
              },
              "message": {
                "type": "string",
                "description": "갱신할 경고 메시지(설명)"
              },
              "post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "수정할 게시글 reference (nullable)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "수정할 게시글 reference (nullable)"
              },
              "comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "수정할 댓글 reference (nullable)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "수정할 댓글 reference (nullable)"
              }
            },
            "required": [
              "warning_type",
              "message"
            ]
          },
          "IPageIDiscussionboardBan.IRequest": {
            "type": "object",
            "description": "계정 밴(Ban) 검색 및 페이지네이션 요청 구조\n\n특정 사용자의 밴 목록, 유형, 기간, ban 관련 경고 연동 여부 등 복수필터링·검색에 활용. 목록 API의 body 입력에 맞춥니다.",
            "properties": {
              "banned_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "밴을 받은 사용자 UUID로 정확하게 검색할 때 사용합니다."
              },
              "banned_by_id": {
                "type": "string",
                "format": "uuid",
                "description": "밴을 발급한 담당자 UUID"
              },
              "ban_type": {
                "type": "string",
                "description": "밴 유형 (mute, temp_ban, perm_ban 등 구분)"
              },
              "from_issued_at": {
                "type": "string",
                "format": "date-time",
                "description": "발동 시각(이후) 필터(검색시작 구간)"
              },
              "to_issued_at": {
                "type": "string",
                "format": "date-time",
                "description": "발동 시각(이전) 필터(검색종료 구간)"
              },
              "status": {
                "oneOf": [
                  {
                    "const": "active",
                    "description": "밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등)"
                  },
                  {
                    "const": "expired",
                    "description": "밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등)"
                  }
                ],
                "description": "밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등)"
              },
              "warning_id": {
                "type": "string",
                "format": "uuid",
                "description": "해당 밴과 연관된 warning의 UUID (검색목적)"
              },
              "page": {
                "type": "integer",
                "description": "조회 대상 페이지 번호(페이지네이션)"
              },
              "limit": {
                "type": "integer",
                "description": "페이지 당 레코드 수"
              }
            },
            "required": []
          },
          "IPageIDiscussionboardBan": {
            "type": "object",
            "description": "계정 밴(Ban) 레코드 페이지네이션 결과\n\n밴 목록을 페이징 단위로 조회하며, 전체 건수와 실제 ban 데이터 배열을 포함",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardBan"
                },
                "description": "밴 레코드 배열"
              }
            },
            "required": [
              "pagination",
              "data"
            ]
          },
          "IDiscussionboardBan": {
            "type": "object",
            "description": "계정 밴(Ban) 단일 레코드(상세)\n\n관리자/모더레이터가 발급하는 platform-level 계정 밴 기록. 밴 대상(유저), 발급자, 타입(일시정지/영구/뮤트) 및 관련 warning 연결, 시작-만료 시점 등 포함됨.\n사용자 프로필, 대시보드, 관리 UI 등에서 사용됩니다.",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "밴 고유 식별자(UUID)"
              },
              "banned_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "밴의 대상 유저 UUID"
              },
              "banned_by_id": {
                "type": "string",
                "format": "uuid",
                "description": "밴을 수행한 담당자 UUID(Admin/Moderator)"
              },
              "warning_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "관련 warning UUID (nullable)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "관련 warning UUID (nullable)"
              },
              "ban_type": {
                "type": "string",
                "description": "밴 종류(enum: mute, temp_ban, perm_ban 등)."
              },
              "reason": {
                "type": "string",
                "description": "밴 사유/설명(관리자·모더레이터 직접 입력)"
              },
              "issued_at": {
                "type": "string",
                "format": "date-time",
                "description": "밴 발급/시작일시(UTC) ISO 8601"
              },
              "expires_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "밴 해제 예정 시각(영구 밴의 경우 null) ISO 8601"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "밴 해제 예정 시각(영구 밴의 경우 null) ISO 8601"
              }
            },
            "required": [
              "id",
              "banned_user_id",
              "banned_by_id",
              "ban_type",
              "reason",
              "issued_at"
            ]
          },
          "IDiscussionboardBan.ICreate": {
            "type": "object",
            "description": "밴(Ban) 신규 생성 요청 구조\n\n플랫폼에서 관리자/모더레이터가 계정 밴 행위를 할 때 사용. 밴 유형, 타겟, 사유, 관련 warning, 만료시점 포함됨.",
            "properties": {
              "banned_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "밴 적용 대상 사용자 UUID"
              },
              "banned_by_id": {
                "type": "string",
                "format": "uuid",
                "description": "밴을 발급한 관리자/모더레이터 UUID"
              },
              "ban_type": {
                "type": "string",
                "description": "밴 유형: mute, temp_ban, perm_ban 등"
              },
              "reason": {
                "type": "string",
                "description": "밴의 사유/설명 (관리자/모더레이터 작성)"
              },
              "warning_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "이 밴과 직접 연관된 warning UUID (nullable)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "이 밴과 직접 연관된 warning UUID (nullable)"
              },
              "issued_at": {
                "type": "string",
                "format": "date-time",
                "description": "밴 시작일시(UTC, ISO8601 양식)"
              },
              "expires_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "밴 해제/만료일시(영구 밴의 경우 null)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "밴 해제/만료일시(영구 밴의 경우 null)"
              }
            },
            "required": [
              "banned_user_id",
              "banned_by_id",
              "ban_type",
              "reason",
              "issued_at"
            ]
          },
          "IDiscussionboardBan.IUpdate": {
            "type": "object",
            "description": "Ban 정보 수정 요청 구조\n\n관리자/모더레이터가 기 발급된 밴의 만료일 수정, 타입 정정, 설명수정 등 권한변경 목적.",
            "properties": {
              "ban_type": {
                "type": "string",
                "description": "변경할 밴 타입"
              },
              "reason": {
                "type": "string",
                "description": "변경할 이유·설명"
              },
              "expires_at": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "밴 종료일 수정(혹은 영구→일시, 일시→영구 등)"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "밴 종료일 수정(혹은 영구→일시, 일시→영구 등)"
              },
              "warning_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "수정 시 경고 연동 정보"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "수정 시 경고 연동 정보"
              }
            },
            "required": [
              "ban_type",
              "reason"
            ]
          },
          "IPageIDiscussionboardNotification.IRequest": {
            "type": "object",
            "description": "알림(Notification) 목록/검색 요청 파라미터 구조\n\n사용자가 받은 알림 목록/읽음/미확인/유형별 필터, 기간별 조회 등에 사용하는 요청. 본인의 알림 목록 조회 혹은 관리자 감사시 사용됩니다.",
            "properties": {
              "recipient_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "알림을 받은 사용자 UUID. 본인 알림 목록에 필수 사용됨."
              },
              "type": {
                "type": "string",
                "description": "알림 유형 - reply, like, moderator_action, system_message 등 유형별 필터링용"
              },
              "is_read": {
                "type": "boolean",
                "description": "읽음/읽지않음 상태로 필터링"
              },
              "from_created_at": {
                "type": "string",
                "format": "date-time",
                "description": "생성시각 이후(FROM) 범위 검색"
              },
              "to_created_at": {
                "type": "string",
                "format": "date-time",
                "description": "생성시각 이전(TO) 범위 검색"
              },
              "page": {
                "type": "integer",
                "description": "조회페이지(페이징)"
              },
              "limit": {
                "type": "integer",
                "description": "페이지당 레코드수"
              }
            },
            "required": []
          },
          "IPageIDiscussionboardNotification": {
            "type": "object",
            "description": "알림(Notification) 페이지네이션 결과 컨테이너\n\n알림 내역을 한 페이지 단위로 조회 시 페이징 정보와 실제 알림 데이터 배열을 포함합니다.",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardNotification"
                },
                "description": "해당 페이지 알림 레코드 배열"
              }
            },
            "required": [
              "pagination",
              "data"
            ]
          },
          "IDiscussionboardNotification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the notification record, as per the discussionboard_notification table. This primary key value is used to trace, fetch, or audit notifications. Maps directly to the 'id' DB field."
              },
              "recipient_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Foreign key referencing the recipient user. The user who receives this notification. Enforces personalization requirements and proper targeting. Normalized—no duplication of user data here."
              },
              "related_post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the related post for which this notification applies (e.g., a reply, like, or moderation action). Null if notification is not post-specific. Strictly atomic—never contains post data."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the related post for which this notification applies (e.g., a reply, like, or moderation action). Null if notification is not post-specific. Strictly atomic—never contains post data."
                  }
                ],
                "description": "Optional foreign key referencing the related post for which this notification applies (e.g., a reply, like, or moderation action). Null if notification is not post-specific. Strictly atomic—never contains post data."
              },
              "related_comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the comment involved if relevant (e.g., a reply to a comment, or moderation of a comment). Null if notification is not comment-specific. Fully normalized."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the comment involved if relevant (e.g., a reply to a comment, or moderation of a comment). Null if notification is not comment-specific. Fully normalized."
                  }
                ],
                "description": "Optional foreign key referencing the comment involved if relevant (e.g., a reply to a comment, or moderation of a comment). Null if notification is not comment-specific. Fully normalized."
              },
              "actor_user_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the actor (who originated this notification, e.g., the liker, replier, or moderator). Null for system messages or passive actions. Maintains the business context of the event origin."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the actor (who originated this notification, e.g., the liker, replier, or moderator). Null for system messages or passive actions. Maintains the business context of the event origin."
                  }
                ],
                "description": "Optional foreign key referencing the actor (who originated this notification, e.g., the liker, replier, or moderator). Null for system messages or passive actions. Maintains the business context of the event origin."
              },
              "type": {
                "type": "string",
                "description": "Type string for notification classification. Maps to allowed business events: e.g., 'reply', 'like', 'moderator_action', 'system_message'. Drives how notification is presented in the UI and how preferences are handled."
              },
              "message": {
                "type": "string",
                "description": "Human-readable message string, delivered to the recipient as explanation/context. The message always describes what happened, who was involved, and what content was affected. Directly from the discussionboard_notification.message column."
              },
              "is_read": {
                "type": "boolean",
                "description": "Whether the notification has been marked as read by the recipient. Used by notification preference UIs, unread message counts, etc."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the notification was generated (ISO 8601, time zone aware). Critical for UI ordering, querying, and audit logs."
              }
            },
            "required": [
              "id",
              "recipient_user_id",
              "type",
              "message",
              "is_read",
              "created_at"
            ],
            "description": "A single notification sent to a user, tied to a post, comment, like, moderator action, or system event. Core fields are normalized according to the discussionboard_notification table and all properties are derived from the table's DB schema documentation and requirements. Contains atomic fields for all relationships, as well as notification content and read status.\n\nThis type allows for all queries (GET, list, audit) and powers notification UI displays as well as notification processing and compliance workflows."
          },
          "IDiscussionboardNotification.ICreate": {
            "type": "object",
            "properties": {
              "recipient_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Foreign key referencing the user who should receive this notification. Must always be present and reflect a valid user. Determines notification targeting as per discussionboard_notification DB mapping."
              },
              "related_post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the target post for notifications about specific posts (replies, likes, moderation). Null if not post-specific. 3NF-compliant."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the target post for notifications about specific posts (replies, likes, moderation). Null if not post-specific. 3NF-compliant."
                  }
                ],
                "description": "Optional foreign key referencing the target post for notifications about specific posts (replies, likes, moderation). Null if not post-specific. 3NF-compliant."
              },
              "related_comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the comment involved, if the notification concerns a comment. Null otherwise. 3NF."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional foreign key referencing the comment involved, if the notification concerns a comment. Null otherwise. 3NF."
                  }
                ],
                "description": "Optional foreign key referencing the comment involved, if the notification concerns a comment. Null otherwise. 3NF."
              },
              "actor_user_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional foreign key pointing to the actor user who triggered this notification (the person who replied, liked, or acted). Null for system/automated notifications."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional foreign key pointing to the actor user who triggered this notification (the person who replied, liked, or acted). Null for system/automated notifications."
                  }
                ],
                "description": "Optional foreign key pointing to the actor user who triggered this notification (the person who replied, liked, or acted). Null for system/automated notifications."
              },
              "type": {
                "type": "string",
                "description": "Business-type string to indicate notification purpose—e.g., 'reply', 'like', 'moderator_action', 'system_message'. Drives notification routing and user preference logic. Must match allowed types implemented in business logic."
              },
              "message": {
                "type": "string",
                "description": "Explanatory content delivered to the notification recipient, as per notification requirements. Should clearly indicate who/what action triggered the notification. Max length and formatting are managed by application code."
              }
            },
            "required": [
              "recipient_user_id",
              "type",
              "message"
            ],
            "description": "Request body type for creating a new notification record. Derived from DB model discussionboard_notification and requirements document (Section 3.7). Required by system-internal logic or admin UIs to deliver notifications, always normalized and mapped according to core notification DB structure."
          },
          "IDiscussionboardNotification.IUpdate": {
            "type": "object",
            "properties": {
              "related_post_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally update the post this notification is tied to. Null if unrelated to a post. Follows atomic/normalized structure of the DB."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally update the post this notification is tied to. Null if unrelated to a post. Follows atomic/normalized structure of the DB."
                  }
                ],
                "description": "Optionally update the post this notification is tied to. Null if unrelated to a post. Follows atomic/normalized structure of the DB."
              },
              "related_comment_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally update the related comment (for replies/mentions/moderation). Null if not applicable. Adheres to the normalized schema."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally update the related comment (for replies/mentions/moderation). Null if not applicable. Adheres to the normalized schema."
                  }
                ],
                "description": "Optionally update the related comment (for replies/mentions/moderation). Null if not applicable. Adheres to the normalized schema."
              },
              "actor_user_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optionally set or update the actor user who originated this notification (if changed or re-assigned)."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optionally set or update the actor user who originated this notification (if changed or re-assigned)."
                  }
                ],
                "description": "Optionally set or update the actor user who originated this notification (if changed or re-assigned)."
              },
              "type": {
                "type": "string",
                "description": "Optionally update the kind of notification (e.g., if the event type is recategorized). Must stay within allowed business values."
              },
              "message": {
                "type": "string",
                "description": "Optionally update the notification's explanatory message. Used for admin corrections or localized updates."
              },
              "is_read": {
                "type": "boolean",
                "description": "Allows updating read/unread status, supporting member UI flows. When set to true, notification is marked as read."
              }
            },
            "description": "Request body for updating an existing notification record. Used to mark as read, adjust content, or fix actor/post associations. Update semantics align with the business/DB design: only atomic, normalized fields and never denormalized graphs.",
            "required": []
          },
          "IDiscussionboardNotificationPreference.IRequest": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Filter to a specific user's notification preferences (optional). Used in admin and member UI listing/filter flows."
              },
              "notify_reply": {
                "type": "boolean",
                "description": "Filter by whether user has enabled reply notifications (optional). Part of admin advanced search."
              },
              "notify_like": {
                "type": "boolean",
                "description": "Filter by whether user receives like notifications. Used in admin/config flows."
              },
              "notify_moderator_action": {
                "type": "boolean",
                "description": "Filter by whether moderator action notifications are enabled for the user."
              },
              "notify_system_message": {
                "type": "boolean",
                "description": "Filter by whether system messages are enabled for the user."
              },
              "page": {
                "type": "integer",
                "minimum": 1,
                "description": "Page number for paginated results. Used as part of all list/search requests to notification preferences."
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "description": "Number of records per page in paginated list of notification preferences. Used for UI collections, defaults managed by service layer."
              }
            },
            "description": "Request type for finding/filtering notification preferences in bulk. Used in PATCH /discussionboard/notificationPreferences and supports admin UIs, user preference management, or batch config.",
            "required": []
          },
          "IPageIDiscussionboardNotificationPreference": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "Pagination metadata (current page, per-page limit, total record count, etc.) as per platform-wide paging contract. Required for all paginated list responses."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardNotificationPreference"
                },
                "description": "List of notification preference records. Each represents a user's current notification channel/type preferences."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "Paginated list response for notification preference records. Contains collection of IDiscussionboardNotificationPreference entities and pagination context for UI and workflow management. Used in admin dashboards, settings UIs, and exports."
          },
          "IDiscussionboardNotificationPreference": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for this notification preference record. Surrogate key for fetching and updating settings."
              },
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "The foreign key (to discussionboard_user) indicating which user owns this set of preferences. Always unique per user."
              },
              "notify_reply": {
                "type": "boolean",
                "description": "Does the user receive notifications on direct replies? Default is true; user can opt out. Used when showing reply-related events."
              },
              "notify_like": {
                "type": "boolean",
                "description": "Controls whether user receives likes notifications for their posts/comments. UIs show this as an individual toggle."
              },
              "notify_moderator_action": {
                "type": "boolean",
                "description": "Does user get notification about moderator actions (warns, hides, etc) that affect them? Managed per user, default is true per requirements analysis."
              },
              "notify_system_message": {
                "type": "boolean",
                "description": "Enables or disables in-app system message/announcement notifications for this user."
              }
            },
            "required": [
              "id",
              "user_id",
              "notify_reply",
              "notify_like",
              "notify_moderator_action",
              "notify_system_message"
            ],
            "description": "Entity representing a user's notification preference toggles. Maps exactly to discussionboard_notification_preference DB table. Used to control notification routing and appearance of notification settings UIs."
          },
          "IDiscussionboardNotificationPreference.ICreate": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Foreign key referencing the user for whom notification preferences are set. Only one record per user is allowed."
              },
              "notify_reply": {
                "type": "boolean",
                "description": "Initial setting for reply notifications (true/false). Default and config in admin or onboarding flows."
              },
              "notify_like": {
                "type": "boolean",
                "description": "Initial setting for like notifications on the user's content. Used in onboarding/config APIs."
              },
              "notify_moderator_action": {
                "type": "boolean",
                "description": "Initial flag for whether the user is notified about moderator actions affecting their content."
              },
              "notify_system_message": {
                "type": "boolean",
                "description": "Initial opt-in status for receiving system announcements."
              }
            },
            "required": [
              "user_id",
              "notify_reply",
              "notify_like",
              "notify_moderator_action",
              "notify_system_message"
            ],
            "description": "Request body for creating a user's notification preferences. Used at onboarding or by admins in user management. All booleans required, matching the DB table, and application logic enforces per-user uniqueness."
          },
          "IDiscussionboardNotificationPreference.IUpdate": {
            "type": "object",
            "properties": {
              "notify_reply": {
                "type": "boolean",
                "description": "Update for whether reply notifications are enabled."
              },
              "notify_like": {
                "type": "boolean",
                "description": "Update for whether like notifications are enabled."
              },
              "notify_moderator_action": {
                "type": "boolean",
                "description": "Update for whether moderator action notifications are enabled."
              },
              "notify_system_message": {
                "type": "boolean",
                "description": "Update for whether system message notifications are enabled."
              }
            },
            "description": "Update body for patching a user's notification preference record. No user_id or id—immutable after creation. Used in member UIs or admin config panels. All fields are optional booleans; omit to leave unchanged.",
            "required": []
          },
          "IDiscussionboardAuditLog.IRequest": {
            "type": "object",
            "properties": {
              "actor_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Filter results to audit logs acted on by the specified user. Enables targeted compliance review for a particular admin or moderator."
              },
              "target_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "Restrict audit logs to those that affected a specific user, e.g. all moderation actions on a particular account. Used for user-centric investigations."
              },
              "action_type": {
                "type": "string",
                "description": "Only include audit logs regarding a given action type (e.g., 'ban', 'role_change', etc.). Matches table definition."
              },
              "entity_type": {
                "type": "string",
                "description": "Filter to logs affecting a specific entity type (e.g., 'user', 'comment', 'setting'). Enables entity-centric audit reviews."
              },
              "entity_id": {
                "type": "string",
                "format": "uuid",
                "description": "Restrict logs to those referencing a single entity id (e.g., all logs for a particular post)."
              },
              "created_at_from": {
                "type": "string",
                "format": "date-time",
                "description": "If set, only logs created at or after this timestamp (inclusive) are included. For audit range search."
              },
              "created_at_to": {
                "type": "string",
                "format": "date-time",
                "description": "If set, only logs created at or before this timestamp (inclusive) are included. For audit range search."
              },
              "page": {
                "type": "integer",
                "minimum": 1,
                "description": "Page number in paginated audit log search results."
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "description": "Number of records to return per page in search/list."
              }
            },
            "description": "Request schema for listing/searching audit log entries, used for privileged action queries, admin dashboards, and compliance reviews. Each field matches a core DB column in discussionboard_audit_log, supporting advanced filtering and efficient audit investigation.",
            "required": []
          },
          "IPageIDiscussionboardAuditLog": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination",
                "description": "Pagination metadata describing current page/limit/record totals as referenced in platform-wide paging documentation."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardAuditLog"
                },
                "description": "Array of audit log records matching filter/search criteria."
              }
            },
            "required": [
              "pagination",
              "data"
            ],
            "description": "Paginated audit log result set. Used in compliance dashboards and reporting. Provides collection of audit log records and full pagination info."
          },
          "IDiscussionboardAuditLog": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the audit log record. Surrogate DB key, atomically identifies each log record."
              },
              "actor_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "User who performed the privileged action. Foreign key to discussionboard_user. Used for compliance, actor attribution, and platform security review."
              },
              "target_user_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "User who was the target of the action, or null if system/global. Nullable, depending on audit log type. E.g., target of a ban, demotion, etc."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "User who was the target of the action, or null if system/global. Nullable, depending on audit log type. E.g., target of a ban, demotion, etc."
                  }
                ],
                "description": "User who was the target of the action, or null if system/global. Nullable, depending on audit log type. E.g., target of a ban, demotion, etc."
              },
              "action_type": {
                "type": "string",
                "description": "Business type string describing the action performed (e.g. 'ban', 'role_change', 'settings_update'). Critical for reasoning about log flow and categorization in dashboards."
              },
              "entity_type": {
                "type": "string",
                "description": "Type of entity impacted by this audit action (e.g., 'user', 'comment', 'setting', 'post'). Used for filtering/audit classification."
              },
              "entity_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Nullable reference to the specific entity affected (user, post, comment, etc). Used to trace all changes to a specific object."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Nullable reference to the specific entity affected (user, post, comment, etc). Used to trace all changes to a specific object."
                  }
                ],
                "description": "Nullable reference to the specific entity affected (user, post, comment, etc). Used to trace all changes to a specific object."
              },
              "action_detail": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optional field storing additional information about the action (diffs, old/new values, rationale, etc.). Greatly aids in compliance and incident resolution; not always present for simple actions."
                  },
                  {
                    "type": "null",
                    "description": "Optional field storing additional information about the action (diffs, old/new values, rationale, etc.). Greatly aids in compliance and incident resolution; not always present for simple actions."
                  }
                ],
                "description": "Optional field storing additional information about the action (diffs, old/new values, rationale, etc.). Greatly aids in compliance and incident resolution; not always present for simple actions."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (ISO 8601, UTC-with-zone) when the action was performed, for audit traceability and compliance. Always populated."
              }
            },
            "required": [
              "id",
              "actor_user_id",
              "action_type",
              "entity_type",
              "created_at"
            ],
            "description": "Single privileged action audit log, normalized 1:1 with discussionboard_audit_log table. Provides complete compliance traceability for all admin/moderator actions affecting users, entities or system configuration. Used in all reporting and audit flows."
          },
          "IDiscussionboardAuditLog.ICreate": {
            "type": "object",
            "properties": {
              "actor_user_id": {
                "type": "string",
                "format": "uuid",
                "description": "ID of user (admin/mod) performing the action to be logged (actor). Always required. Used for entity attribution in audit trail per schema."
              },
              "target_user_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "User affected by the action. Set if the action targets a specific user; null for global/system actions."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "User affected by the action. Set if the action targets a specific user; null for global/system actions."
                  }
                ],
                "description": "User affected by the action. Set if the action targets a specific user; null for global/system actions."
              },
              "action_type": {
                "type": "string",
                "description": "Action type (e.g. 'ban', 'role_change', 'setting_update', etc). Populates action_type DB field and is the primary audit classification."
              },
              "entity_type": {
                "type": "string",
                "description": "The entity type impacted, such as 'user', 'post', 'comment', 'setting'. Enables polymorphic audit review."
              },
              "entity_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional reference to affected entity, if applicable (user/post/comment). Null where system/global."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "Optional reference to affected entity, if applicable (user/post/comment). Null where system/global."
                  }
                ],
                "description": "Optional reference to affected entity, if applicable (user/post/comment). Null where system/global."
              },
              "action_detail": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Optional string describing specifics of the change (e.g., old/new values, human notes). Used for compliance reporting and deep trace investigations."
                  },
                  {
                    "type": "null",
                    "description": "Optional string describing specifics of the change (e.g., old/new values, human notes). Used for compliance reporting and deep trace investigations."
                  }
                ],
                "description": "Optional string describing specifics of the change (e.g., old/new values, human notes). Used for compliance reporting and deep trace investigations."
              }
            },
            "required": [
              "actor_user_id",
              "action_type",
              "entity_type"
            ],
            "description": "Request body for creating a privileged action audit log entry. Used internally after sensitive workflows. Optional fields provide richer context for forensic review. Fully normalized and traceable. One entry per action; always references the performing user, type, and entity context per compliance requirements."
          },
          "IDiscussionboardAuditLog.IUpdate": {
            "type": "object",
            "description": "discussionboardAuditLog 업데이트 요청을 위한 객체입니다.\n\n이 타입은 감사 로그(entry) 레코드의 수정 가능한 필드를 명확히 정의해줍니다. 주로 플랫폼 운영자(관리자 및 모더레이터)가 기존의 감사 로그 레코드(annotation, audit detail 등)에 코멘트 추가나 메타데이터 정정 작업을 할 때 사용합니다.\n\nPrisma discussionboard_audit_log 테이블의 컬럼명 및 주석에 기반하여 모든 속성을 정의합니다. 불변 속성(예: actor_user_id, created_at 등)은 업데이트되지 않으며, 수정 가능한 일부 필드(action_detail 등)만 포함됩니다.\n\n변경내용은 반드시 audit trail에 별도로 남겨야 하며, 주요 컴플라이언스 요구사항을 충족하도록 반영되어야 합니다.",
            "properties": {
              "action_type": {
                "type": "string",
                "description": "Prisma discussionboard_audit_log 테이블의 action_type 컬럼에 해당합니다.\n\n수정 가능한 경우, 감사 행위의 유형(예: ban, role_change, settings_update 등) 문자열을 재정의 할 수 있습니다. 일반적으로 타입 변경은 드물고, 주로 노트/코멘트 보정에 사용됩니다. 필요한 경우에만 수정하세요."
              },
              "entity_type": {
                "type": "string",
                "description": "감사 로그의 대상이 되는 엔티티의 타입(예: user, post, comment, setting 등)입니다. discussionboard_audit_log의 entity_type 컬럼에 해당하며, 해당 엔티티가 무엇인지 명확히 구분해 기록하는데 사용됩니다."
              },
              "entity_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid",
                    "description": "감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\n\n특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우 null이 허용됩니다."
                  },
                  {
                    "type": "null",
                    "format": "uuid",
                    "description": "감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\n\n특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우 null이 허용됩니다."
                  }
                ],
                "description": "감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\n\n특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우 null이 허용됩니다."
              },
              "action_detail": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\n\ndiscussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role: member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\n\nnull 또는 빈 문자열일 수 있습니다."
                  },
                  {
                    "type": "null",
                    "description": "감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\n\ndiscussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role: member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\n\nnull 또는 빈 문자열일 수 있습니다."
                  }
                ],
                "description": "감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\n\ndiscussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role: member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\n\nnull 또는 빈 문자열일 수 있습니다."
              }
            },
            "required": []
          },
          "IDiscussionboardPlatformSetting.IRequest": {
            "type": "object",
            "description": "플랫폼 환경설정 목록/검색 요청 타입입니다.\n\n이 타입은 discussionboard_platform_setting 테이블의 설정 레코드를 검색, 정렬 및 페이징하려는 관리자(관리자 전용)를 위한 필터, 정렬, 페이징 옵션을 제공합니다. 검색 필드로는 name, type, value, updated_at 등이 있습니다. 관리용 UI의 검색 바, 상세 필터 등에서 사용합니다.\n\n구현 시 유저는 name이나 type, value, updated_at 범위 등으로 검색할 수 있으며, 대량 데이터셋을 효율적으로 조회할 수 있도록 페이징 파라미터도 제공합니다.",
            "properties": {
              "name": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다."
                  },
                  {
                    "type": "null",
                    "description": "플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다."
                  }
                ],
                "description": "플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다."
              },
              "type": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\n\n예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다."
                  },
                  {
                    "type": "null",
                    "description": "플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\n\n예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다."
                  }
                ],
                "description": "플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\n\n예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다."
              },
              "value": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\n\n예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다."
                  },
                  {
                    "type": "null",
                    "description": "플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\n\n예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다."
                  }
                ],
                "description": "플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\n\n예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다."
              },
              "updated_from": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "검색 범위 필드입니다. updated_at >= updated_from.\n\n특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "검색 범위 필드입니다. updated_at >= updated_from.\n\n특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용."
                  }
                ],
                "description": "검색 범위 필드입니다. updated_at >= updated_from.\n\n특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용."
              },
              "updated_to": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "검색 범위 필드입니다. updated_at <= updated_to.\n\n특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다."
                  },
                  {
                    "type": "null",
                    "format": "date-time",
                    "description": "검색 범위 필드입니다. updated_at <= updated_to.\n\n특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다."
                  }
                ],
                "description": "검색 범위 필드입니다. updated_at <= updated_to.\n\n특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다."
              },
              "page": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 1,
                    "description": "페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주."
                  },
                  {
                    "type": "null",
                    "minimum": 1,
                    "description": "페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주."
                  }
                ],
                "description": "페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주."
              },
              "limit": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 1,
                    "description": "페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용)."
                  },
                  {
                    "type": "null",
                    "minimum": 1,
                    "description": "페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용)."
                  }
                ],
                "description": "페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용)."
              }
            },
            "required": []
          },
          "IPageIDiscussionboardPlatformSetting": {
            "type": "object",
            "description": "discussionboard_platform_setting의 페이징 컬렉션 응답 타입입니다.\n\n이 타입은 플랫폼 환경설정 레코드 검색 시 결과 목록 및 페이지네이션 정보를 함께 묶어 반환합니다. 일반적으로 관리자 UI에서 환경설정 목록을 페이지 단위로 제공할 때 사용합니다.\n\n관계형 데이터 조회, 대량 설정 데이터 핸들링, 또는 엑셀 다운로드 등에서 활용됩니다.",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/IPage.IPagination"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IDiscussionboardPlatformSetting"
                }
              }
            },
            "required": [
              "pagination",
              "data"
            ]
          },
          "IDiscussionboardPlatformSetting": {
            "type": "object",
            "description": "discussionboard_platform_setting 테이블의 단일 환경설정 엔트리 구조입니다.\n\n이 타입은 각 플랫폼 환경설정 레코드를 의미하며, 설정의 식별자, 이름, 값, 타입, 갱신 일시 컬럼 등 모든 주요 정보를 포함합니다. 관리자가 UI나 API에서 단일 환경설정의 상세 정보를 조회(읽기), 업데이트(쓰기) 또는 삭제시, 그리고 검색 결과 리스트용 아이템에 사용됩니다.\n\ndescription(설명)은 별도에 없지만, 각 컬럼의 역할과 사용처를 Prisma schema의 주석에 기반하여 상세하게 기술했습니다.",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "discussionboard_platform_setting의 기본 키. 각 환경설정 레코드를 고유하게 식별하는 UUID입니다."
              },
              "name": {
                "type": "string",
                "description": "환경설정 이름. 플랫폼 전체에서 단일하게 유니크하며, 어떤 기능/정책/설정인지 식별합니다.\n\n예: 'EnableModerationQueue', 'MaxPostAttachments' 등"
              },
              "value": {
                "type": "string",
                "description": "설정 값. 반드시 문자열(text)로 저장되며, 값의 의미/타입 판별은 'type' 필드를 참고하여 해석해야 합니다.\n\n예: 'true', '123', '사용중' 등"
              },
              "type": {
                "type": "string",
                "description": "env 값의 타입 구분자. 값의 해석을 위한 메타정보로써 보통 'boolean', 'int', 'string' 등의 값으로 표시됩니다. UI/백엔드 상 검증, 파싱에 사용합니다."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "마지막 수정 시각. 플랫폼 환경설정 변경의 트래킹, 이력 관리, 정렬 및 필터에 활용합니다. ISO8601 타임스탬프."
              }
            },
            "required": [
              "id",
              "name",
              "value",
              "type",
              "updated_at"
            ]
          },
          "IDiscussionboardPlatformSetting.ICreate": {
            "type": "object",
            "description": "플랫폼 환경설정 신규 생성 요청 바디 타입입니다.\n\ndiscussionboard_platform_setting 테이블에 레코드 추가시 필요한 모든 필드(이름, 값, 타입 등)가 정의되어 있습니다. 주로 관리자 전용 UI/관리패널에서 새 설정 추가시 API에 사용합니다.\n\n모든 컬럼은 반드시 유효하게(중복 없음, 데이터 타입 일치 등) 입력되어야 합니다. 생성 시 updated_at은 시스템에서 자동 지정됩니다.",
            "properties": {
              "name": {
                "type": "string",
                "description": "생성할 환경설정의 이름. 반드시 유일해야 하며, 알기 쉽고 명확해야 합니다. 예: 'EnableModerationQueue', 'PostImageMaxSize' 등"
              },
              "value": {
                "type": "string",
                "description": "환경설정의 값. 항상 문자열로 저장해야 하며, 실제 저장/적용시에는 type에 맞게 파싱 혹은 활용합니다. 예: 'false', '200' 등"
              },
              "type": {
                "type": "string",
                "description": "환경설정 값의 타입. 값이 실제로 boolean인지, 정수, 문자열인지 구분해서 저장합니다. 예: 'boolean', 'int', 'string' 등"
              }
            },
            "required": [
              "name",
              "value",
              "type"
            ]
          },
          "IDiscussionboardPlatformSetting.IUpdate": {
            "type": "object",
            "description": "플랫폼 환경설정 변경(수정) 요청 객체 타입입니다.\n\n관리자가 기존 환경설정 레코드(이름, 값, 타입 등)를 수정할 때 사용합니다. discussionboard_platform_setting 테이블 기반이며, 일부 필드만(주로 value, type) 갱신할 수도 있습니다. 필드는 선택적이지만, 수정 대상 컬럼명에 맞게 정확히 전달해야 합니다. updated_at은 자동 관리됩니다.",
            "properties": {
              "name": {
                "type": "string",
                "description": "변경할 환경설정의 이름(필요시). 관리 정책 상 이름 변경은 드물지만 지원 가능하도록 허용합니다."
              },
              "value": {
                "type": "string",
                "description": "변경할 설정의 값. 항상 문자열로 입력 및 저장됩니다."
              },
              "type": {
                "type": "string",
                "description": "설정 값의 타입. 'boolean', 'int', 'string' 등으로 값의 해석을 위해 함께 변경할 수 있습니다."
              }
            },
            "required": []
          },
          "IDeleteResult": {
            "type": "object",
            "description": "데이터 삭제 또는 삭제시도 후 반환되는 표준 응답 객체입니다.\n\n이 타입은 주로 삭제(soft/hard delete) 후 결과 메시지 또는 성공/실패 플래그를 전달합니다. 백엔드 API 전반(관리용, 데이터 삭제 엔드포인트 등)에서 재사용할 수 있도록 설계되었습니다.",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "삭제 작업의 성공 여부. true면 삭제 완료, false면 삭제 실패/미수행 등 의미."
              },
              "message": {
                "type": "string",
                "description": "삭제 결과 메시지. 성공시에도 간단한 안내 메시지(예: '삭제 완료'), 실패 혹은 조건부 불가(예: '참조된 데이터가 있어 삭제 불가') 등도 포함합니다."
              }
            },
            "required": [
              "success",
              "message"
            ]
          }
        }
      }
    },
    "files": {
      ".env.local": "API_PORT=37001",
      ".eslintrc.cjs": "module.exports = {\n  root: true,\n  plugins: [\"@typescript-eslint\", \"deprecation\"],\n  extends: [\"plugin:@typescript-eslint/recommended\"],\n  parser: \"@typescript-eslint/parser\",\n  parserOptions: {\n    project: [\"tsconfig.json\", \"test/tsconfig.json\"],\n  },\n  overrides: [\n    {\n      files: [\"src/**/*.ts\", \"test/**/*.ts\"],\n      rules: {\n        \"@typescript-eslint/consistent-type-definitions\": \"off\",\n        \"@typescript-eslint/no-empty-function\": \"off\",\n        \"@typescript-eslint/no-empty-interface\": \"off\",\n        \"@typescript-eslint/no-explicit-any\": \"off\",\n        \"@typescript-eslint/no-inferrable-types\": \"off\",\n        \"@typescript-eslint/no-namespace\": \"off\",\n        \"@typescript-eslint/no-non-null-assertion\": \"off\",\n        \"@typescript-eslint/no-unused-vars\": \"off\",\n        \"@typescript-eslint/no-var-requires\": \"off\",\n        \"@typescript-eslint/no-floating-promises\": \"error\",\n        \"@typescript-eslint/no-require-imports\": \"off\",\n        \"@typescript-eslint/no-empty-object-type\": \"off\",\n      },\n    },\n  ],\n};\n",
      ".github/workflows/build.yml": "name: build\non:\n  pull_request:\n    paths:\n      - 'src/**'\n      - 'test/**'\n      - 'package.json'\njobs:\n  Ubuntu:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20.x\n      - uses: pnpm/action-setup@v4\n        with:\n          version: 8\n      \n      - name: Install Backend-Server\n        run: pnpm install\n\n      - name: Build Swagger\n        run: npm run build:swagger\n\n      - name: Build SDK\n        run: npm run build:sdk\n\n      - name: Compile Backend-Server\n        run: npm run build\n\n      - name: Run Test Program\n        run: npm run test -- --simultaneous 16\n\n      - name: EsLint\n        run: npm run eslint\n",
      ".github/workflows/typos.yml": "name: typos\non:\n  pull_request:\n\njobs:\n  typos:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Actions Repository\n        uses: actions/checkout@v4\n\n      - uses: crate-ci/typos@master\n        with:\n          config: ./typos.toml\n",
      ".gitignore": ".git/\nbin/\ndist/\nlib/\nnode_modules/\npackages/api/lib/\n\n.env\npackage-lock.json\npnpm-lock.yaml",
      ".prettierignore": "dist\nbin\nnode_modules\npackages\nsrc/api/functional\nsrc/api/utils/NestiaSimulator.ts\nREADME.md\ntsconfig.json",
      ".vscode/launch.json": "{\n  // Use IntelliSense to learn about possible Node.js debug attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n  {\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Backend Test\",\n    \"program\": \"${workspaceRoot}/test/index.ts\",\n    \"cwd\": \"${workspaceRoot}\",\n    \"args\": [\n      // //----\n      // // Not possible to reset DB in debugging mode\n      // //\n      // // Therefore, if you need DB reset, then do it \n      // // through `npm run reset-for-debugging` command\n      // //----\n      // \"--reset\", \"false\",\n      // \"--mode\", \"local\",\n      \n      //----\n      // You can run specific test functions\n      //\n      // If you want to include or exclude multiple words,\n      // then separate them with space character\n      //----\n      // \"--include\", \"some-words-to-include\",\n      // \"--exclude\", \"some-word another-word\",\n  ],\n    \"outFiles\": [\"${workspaceRoot}/bin/**/*.js\"],\n  }\n]\n}",
      ".vscode/settings.json": "{\n  \"editor.tabSize\": 2,\n  \"editor.formatOnSave\": true,\n  \"[javascript][typescript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.codeActionsOnSave\": {\n      \"source.fixAll.eslint\": \"explicit\"\n    },\n  }\n}",
      "LICENSE": "MIT License\n\nCopyright (c) 2022 Jeongho Nam\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "README.md": "# AutoBE Generated Backend Server\n\n![AutoBE Logo](https://github.com/user-attachments/assets/a90d14be-fd50-4dc7-ae9d-ca66c2124f31)\n\nA backend repository generated by [`@autobe`](https://github.com/wrtnlabs/autobe).\n\nThis backend program was automatically generated using [`@autobe`](https://github.com/wrtnlabs/autobe), the AI vibe coding agent for backend servers of below stack.\n\n- TypeScript\n- NestJS / Nestia\n- Prisma\n- Postgres\n\n## Project Structure\n\nThis template project has categorized directories like below.\n\nAs you can see from the below, all of the Backend source files are placed into the [src](src/) directory. When you build the TypeScript source files, compiled files would be placed into the `lib` directory following the [tsconfig.json](tsconfig.json) configuration. Otherwise you build client [SDK](#32-sdk) library for npm publishing and their compiled files would be placed into the [packages](packages) directory.\n\n  - [packages/api/](packages/api): SDK module built by `npm run build:api`\n  - [src/](src): Backend source directory\n    - [src/api/](src/api/): Client SDK that would be published to the `@ORGANIZATION/PROJECT-api`\n      - [**src/api/functional/**](src/api/functional/): API functions generated by the [`nestia`](https://github.com/samchon/nestia)\n      - [**src/api/structures/**](src/api/structures/): DTO structures\n    - [src/controllers/](src/controllers/): Controller classes of the Main Program\n  - [**test/**](test): Test Automation Program\n    - [test/features](test/features): List of test functions\n  - [nestia.config.ts](nestia.config.ts): Configuration file of [`nestia`](https://github.com/samchon/nestia)\n  - [package.json](package.json): NPM configuration\n  - [tsconfig.json](tsconfig.json): TypeScript configuration for the main program\n\n## NPM Run Commands\n\nList of the run commands defined in the [package.json](package.json) are like below:\n\n  - Test\n    - **`test`**: Run test automation program\n    - `benchmark`: Run performance benchmark program\n  - Build\n    - `build`: Build everything\n    - `build:main`: Build main program (`src` directory)\n    - `build:test` Build test automation program (`test` directory)\n    - `build:sdk`: Build SDK into main program only\n    - `build:swagger`: Build Swagger Documents\n    - **`dev`**: Incremental build for development (test program)\n  - Deploy\n    - `package:api`: Build and deploy the SDK library to the NPM\n    - `start`: Start the backend server\n    - `start:dev`: Start the backend server with incremental build and reload\n  - Webpack\n    - `webpack`: Run webpack bundler\n    - `webpack:start`: Start the backend server built by webpack\n    - `webpack:test`: Run test program to the webpack built\n\n## Specialization\n\nTransform this template project to be yours.\n\nWhen you've created a new backend project through this template project, you can specialize it to be suitable for you by changing some words. Replace below words through IDE specific function like `Edit > Replace in Files` (*Ctrl + Shift + H*), who've been supported by the VSCode.\n\n| Before       | After\n|--------------|----------------------------------------\n| ORGANIZATION | Your account or corporation name\n| PROJECT      | Your own project name\n| AUTHOR       | Author name\n| https://github.com/samchon/nestia-start | Your repository URL",
      "build/env.ts": "import fs from \"fs\";\n\nif (fs.existsSync(`${__dirname}/../.env`) === false)\n  fs.copyFileSync(`${__dirname}/../.env.local`, `${__dirname}/../.env`);\n",
      "docs/benchmarks/AMD Ryzen 9 7940HS w Radeon 780M Graphics.md": "# Benchmark Report\n> Generated by [`@nestia/benchmark`](https://github.com/samchon/nestia)\n\n  - Specifications\n    - CPU: AMD Ryzen 9 7940HS w/ Radeon 780M Graphics     \n    - RAM: 31 GB\n    - NodeJS Version: v20.10.0\n    - Backend Server: 1 core / 1 thread\n  - Arguments\n    - Count: 40,000\n    - Threads: 4\n    - Simultaneous: 32\n  - Time\n    - Start: 2024-10-29T19:14:35.941Z\n    - Complete: 2024-10-29T19:16:11.418Z\n    - Elapsed: 95,477 ms\n\nType | Count | Success | Mean. | Stdev. | Minimum | Maximum\n----|----|----|----|----|----|----\nTotal | 41,586 | 41,586 | 69.24 | 73.05 | 5 | 546\n\n> Unit: milliseconds\n\n## Memory Consumptions\n```mermaid\nxychart-beta\n  x-axis \"Time (second)\"\n  y-axis \"Memory (MB)\"\n  line \"Resident Set Size\" [122, 156, 159, 142, 154, 165, 184, 185, 187, 189, 200, 205, 209, 217, 221, 225, 229, 224, 230, 235, 242, 250, 256, 262, 267, 272, 234, 237, 249, 259, 266, 273, 285, 292, 291, 216, 225, 235, 243, 200, 208, 214, 186, 186, 171, 177, 187, 199, 185, 192, 205, 171, 180, 158, 170, 179, 163, 163, 176, 188, 193, 202, 213, 219, 230, 239, 256, 265, 283, 301, 240, 249, 257, 267, 284, 282, 290, 202, 213, 166, 178, 188, 200, 203, 208, 180, 191, 199, 175]\n  line \"Heap Total\" [85, 116, 120, 103, 114, 124, 146, 146, 147, 148, 158, 166, 170, 176, 180, 184, 187, 185, 190, 195, 203, 211, 217, 222, 225, 229, 194, 197, 209, 218, 225, 232, 241, 249, 247, 176, 185, 194, 202, 160, 168, 173, 146, 146, 130, 136, 146, 158, 145, 151, 165, 129, 139, 116, 128, 137, 120, 123, 136, 148, 152, 161, 172, 179, 189, 198, 215, 223, 241, 257, 200, 209, 216, 227, 244, 242, 249, 163, 174, 127, 136, 147, 159, 162, 166, 138, 150, 158, 132]\n  line \"Heap Used + External\" [69, 94, 62, 82, 88, 107, 71, 83, 93, 107, 136, 72, 76, 85, 92, 106, 139, 48, 68, 69, 86, 95, 108, 116, 140, 175, 67, 74, 88, 112, 125, 136, 142, 169, 180, 91, 104, 105, 121, 60, 71, 91, 64, 74, 86, 110, 121, 135, 76, 82, 103, 70, 93, 66, 91, 107, 76, 75, 95, 101, 115, 127, 136, 154, 165, 168, 196, 193, 214, 232, 84, 94, 101, 118, 145, 147, 149, 86, 96, 72, 90, 112, 126, 133, 132, 78, 87, 107, 88]\n  line \"Heap Used Only\" [66, 89, 59, 78, 83, 100, 68, 79, 88, 101, 129, 68, 72, 80, 86, 100, 131, 45, 64, 65, 81, 90, 103, 110, 133, 168, 64, 71, 84, 108, 120, 130, 136, 162, 173, 88, 100, 101, 117, 58, 68, 87, 61, 71, 83, 107, 118, 130, 73, 79, 99, 67, 89, 63, 88, 103, 74, 72, 91, 98, 111, 123, 132, 149, 160, 163, 190, 187, 208, 225, 81, 90, 97, 114, 140, 143, 145, 83, 93, 70, 87, 108, 122, 130, 128, 76, 84, 104, 85]\n```\n\n> - 🟦 Resident Set Size\n> - 🟢 Heap Total\n> - 🔴 Heap Used + External\n> - 🟡 Heap Used Only\n\n## Endpoints\nType | Count | Success | Mean. | Stdev. | Minimum | Maximum\n----|----|----|----|----|----|----\nPATCH /bbs/articles/:section | 6,439 | 6,439 | 108.37 | 76.56 | 6 | 546\nPUT /bbs/articles/:section/:id | 380 | 380 | 78.52 | 69.03 | 6 | 296\nGET /bbs/articles/:section/:id | 917 | 917 | 77.65 | 69.84 | 6 | 463\nDELETE /bbs/articles/:section/:id | 201 | 201 | 73.89 | 63.55 | 7 | 307\nPOST /bbs/articles/:section | 33,649 | 33,649 | 61.39 | 70.04 | 5 | 546\n\n> Unit: milliseconds\n\n## Failures\nMethod | Path | Count | Failures\n-------|------|-------|----------",
      "nest-cli.json": "{\n  \"$schema\": \"https://json.schemastore.org/nest-cli\",\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\",\n  \"entryFile\": \"executable/server\",\n  \"compilerOptions\": {\n    \"deleteOutDir\": true\n  }\n}\n",
      "nestia.config.ts": "// nestia configuration file\nimport type sdk from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n\nimport { MyModule } from \"./src/MyModule\";\n\nconst NESTIA_CONFIG: sdk.INestiaConfig = {\n  input: () => NestFactory.create(MyModule),\n  output: \"src/api\",\n  swagger: {\n    output: \"packages/api/swagger.json\",\n    servers: [\n      {\n        url: \"http://localhost:37001\",\n        description: \"Local Server\",\n      },\n    ],\n    beautify: true,\n  },\n  distribute: \"packages/api\",\n  primitive: false,\n  simulate: true,\n  keyword: true,\n};\nexport default NESTIA_CONFIG;\n",
      "package.json": "{\n  \"private\": true,\n  \"name\": \"@ORGANIZATION/PROJECT\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Starter kit of Nestia\",\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"benchmark\": \"node bin/test/benchmark\",\n    \"test\": \"node bin/test\",\n    \"test:webpack\": \"npm run webpack && node bin/test/webpack.js\",\n    \"------------------------BUILDS------------------------\": \"\",\n    \"build\": \"npm run build:prisma && npm run build:sdk && npm run build:main && npm run build:test\",\n    \"build:api\": \"rimraf packages/api/lib && nestia all && rimraf packages/api/lib && tsc -p packages/api/tsconfig.json && rollup -c packages/api/rollup.config.js\",\n    \"build:main\": \"rimraf lib && tsc\",\n    \"build:sdk\": \"rimraf src/api/functional && nestia sdk\",\n    \"build:prisma\": \"npx prisma generate --schema prisma/schema\",\n    \"build:swagger\": \"npx nestia swagger\",\n    \"build:test\": \"rimraf bin && tsc -p test/tsconfig.json\",\n    \"dev\": \"npm run build:test -- --watch\",\n    \"eslint\": \"eslint src && eslint test\",\n    \"eslint:fix\": \"eslint --fix src && eslint --fix test\",\n    \"prepare\": \"ts-patch install && ts-node build/env.ts && npm run build:prisma\",\n    \"prettier\": \"prettier src --write && prettier test --write\",\n    \"------------------------WEBPACK------------------------\": \"\",\n    \"webpack\": \"rimraf dist && webpack\",\n    \"webpack:start\": \"cd dist && node dist/server\",\n    \"webpack:test\": \"npm run webpack && node bin/test/webpack.js\",\n    \"------------------------DEPLOYS------------------------\": \"\",\n    \"package:api\": \"npm run build:api && cd packages/api && npm publish\",\n    \"start\": \"node lib/executable/server\",\n    \"start:dev\": \"nest start --watch\",\n    \"start:swagger\": \"ts-node src/executable/swagger.ts\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/samchon/nestia-start\"\n  },\n  \"keywords\": [\n    \"nestia\",\n    \"template\",\n    \"boilerplate\"\n  ],\n  \"author\": \"AUTHOR\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/samchon/nestia-start/issues\"\n  },\n  \"homepage\": \"https://github.com/samchon/nestia-start#readme\",\n  \"devDependencies\": {\n    \"@nestia/benchmark\": \"^7.1.0\",\n    \"@nestia/e2e\": \"^7.1.0\",\n    \"@nestia/sdk\": \"^7.1.0\",\n    \"@nestjs/cli\": \"^11.0.7\",\n    \"@rollup/plugin-terser\": \"^0.4.4\",\n    \"@rollup/plugin-typescript\": \"^11.1.6\",\n    \"@trivago/prettier-plugin-sort-imports\": \"^4.3.0\",\n    \"@types/cli\": \"^0.11.21\",\n    \"@types/cli-progress\": \"^3.11.5\",\n    \"@types/express\": \"^4.17.21\",\n    \"@types/inquirer\": \"^8.2.5\",\n    \"@types/node\": \"^18.11.0\",\n    \"@types/uuid\": \"^8.3.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.1.0\",\n    \"@typescript-eslint/parser\": \"^8.1.0\",\n    \"chalk\": \"^4.1.2\",\n    \"cli\": \"^1.0.1\",\n    \"cli-progress\": \"^3.12.0\",\n    \"copy-webpack-plugin\": \"^11.0.0\",\n    \"eslint-plugin-deprecation\": \"^3.0.0\",\n    \"express\": \"^4.18.2\",\n    \"nestia\": \"^7.1.0\",\n    \"prettier\": \"^3.2.4\",\n    \"prettier-plugin-prisma\": \"^5.0.0\",\n    \"prisma-markdown\": \"^3.0.1\",\n    \"rimraf\": \"^3.0.2\",\n    \"rollup\": \"^4.18.0\",\n    \"source-map-support\": \"^0.5.21\",\n    \"swagger-ui-express\": \"^5.0.0\",\n    \"ts-loader\": \"^9.5.1\",\n    \"ts-node\": \"^10.9.1\",\n    \"ts-patch\": \"^3.3.0\",\n    \"typescript\": \"~5.8.3\",\n    \"typescript-transform-paths\": \"^3.5.5\",\n    \"webpack\": \"^5.89.0\",\n    \"webpack-cli\": \"^5.1.4\",\n    \"write-file-webpack-plugin\": \"^4.5.1\"\n  },\n  \"dependencies\": {\n    \"@nestia/core\": \"^7.1.0\",\n    \"@nestia/fetcher\": \"^7.1.0\",\n    \"@nestjs/common\": \"^11.1.3\",\n    \"@nestjs/core\": \"^11.1.3\",\n    \"@nestjs/platform-express\": \"^11.1.3\",\n    \"@prisma/client\": \"^6.11.1\",\n    \"commander\": \"10.0.0\",\n    \"dotenv\": \"^16.3.1\",\n    \"dotenv-expand\": \"^10.0.0\",\n    \"inquirer\": \"8.2.5\",\n    \"prisma\": \"^6.11.1\",\n    \"serialize-error\": \"^4.1.0\",\n    \"tgrid\": \"^1.1.0\",\n    \"tstl\": \"^3.0.0\",\n    \"typia\": \"^9.5.0\",\n    \"uuid\": \"^9.0.0\"\n  },\n  \"stackblitz\": {\n    \"startCommand\": \"npm run prepare && npm run build:test && npm run test -- --simultaneous 1\"\n  }\n}\n",
      "packages/api/.gitignore": "lib/\nnode_modules/\n\nswagger.json\nopenai.json",
      "packages/api/LICENSE": "MIT License\n\nCopyright (c) 2021 ORGANIZATION\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "packages/api/README.md": "# SDK Library\nThis is a SDK library generated by [`nestia`](https://nestia.io).\n\nWith this SDK library, you can easily and safely interact with backend server.\n\nJust import and call some API functions like gif image below:\n\n![nestia-sdk-demo](https://user-images.githubusercontent.com/13158709/215004990-368c589d-7101-404e-b81b-fbc936382f05.gif)\n\n> Left is server code, and right is client code utilizing the SDK\n\n\n\n\n# What [`Nestia`](https://nestia.io) is:\n![Nestia Logo](https://nestia.io/logo.png)\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/samchon/nestia/blob/master/LICENSE)\n[![npm version](https://img.shields.io/npm/v/@nestia/core.svg)](https://www.npmjs.com/package/@nestia/core)\n[![Downloads](https://img.shields.io/npm/dm/@nestia/core.svg)](https://www.npmjs.com/package/@nestia/core)\n[![Build Status](https://github.com/samchon/nestia/workflows/build/badge.svg)](https://github.com/samchon/nestia/actions?query=workflow%3Abuild)\n[![Guide Documents](https://img.shields.io/badge/guide-documents-forestgreen)](https://nestia.io/docs/)\n\nNestia is a set of helper libraries for NestJS, supporting below features:\n\n  - `@nestia/core`: super-fast decorators\n  - `@nestia/sdk`:\n    - Swagger generator evolved than ever\n    - SDK library generator for clients\n    - Mockup Simulator for client applications\n    - Automatic E2E test functions generator\n  - `@nestia/migrate`: migration from Swagger to NestJS\n  - `nestia`: just CLI (command line interface) tool\n\n> **Note**\n> \n> - **Only one line** required, with pure TypeScript type\n> - Enhance performance **30x** up\n>   - Runtime validator is **20,000x faster** than `class-validator`\n>   - JSON serialization is **200x faster** than `class-transformer`\n> - Software Development Kit\n>   - SDK is a collection of `fetch` functions with type definitions like [tRPC](https://trpc.io/)\n>   - Mockup simulator means embedded backend simulator in SDK\n>     - similar with [msw](https://mswjs.io/), but fully automated",
      "packages/api/package.json": "{\n  \"name\": \"@ORGANIZATION/PROJECT-api\",\n  \"version\": \"0.1.0\",\n  \"description\": \"SDK library generated by Nestia\",\n  \"main\": \"lib/index.js\",\n  \"module\": \"lib/index.mjs\",\n  \"typings\": \"lib/index.d.ts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/samchon/nestia\"\n  },\n  \"author\": \"Jeongho Nam\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/samchon/nestia/issues\"\n  },\n  \"homepage\": \"https://nestia.io\",\n  \"files\": [\n    \"lib\",\n    \"package.json\",\n    \"swagger.json\",\n    \"openai.json\",\n    \"README.md\"\n  ],\n  \"dependencies\": {\n    \"@nestia/fetcher\": \"^7.0.3\",\n    \"tgrid\": \"^1.1.0\",\n    \"typia\": \"^9.4.0\"\n  }\n}",
      "packages/api/rollup.config.js": "const typescript = require(\"@rollup/plugin-typescript\");\nconst terser = require(\"@rollup/plugin-terser\");\n\nmodule.exports = {\n  input: `${__dirname}/../../src/api/index.ts`,\n  output: {\n    dir: `${__dirname}/lib`,\n    format: \"esm\",\n    entryFileNames: \"[name].mjs\",\n    sourcemap: true,\n  },\n  plugins: [\n    typescript({\n      tsconfig: `${__dirname}/tsconfig.json`,\n      module: \"ESNext\",\n      target: \"ESNext\",\n    }),\n    terser({\n      format: {\n        comments: \"some\",\n        beautify: true,\n        ecma: \"2020\",\n      },\n      compress: false,\n      mangle: false,\n      module: true,\n    }),\n  ],\n};\n",
      "packages/api/tsconfig.json": "{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n    /* Projects */\n    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n    /* Language and Environment */\n    \"target\": \"ES5\", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    \"lib\": [\n      \"DOM\",\n      \"ES2015\"\n    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */// \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    // \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\n    /* Modules */\n    \"module\": \"commonjs\", /* Specify what module code is generated. */// \"rootDir\": \"./\",                                  /* Specify the root folder within your source files. */\n    // \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */\n    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\n    // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n    // \"resolveJsonModule\": true,                        /* Enable importing .json files. */\n    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n    /* Emit */\n    \"declaration\": true, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */// \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    \"sourceMap\": true, /* Create source map files for emitted JavaScript files. */// \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n    \"outDir\": \"./lib\", /* Specify an output folder for all emitted files. */// \"removeComments\": true,                           /* Disable emitting comments. */\n    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\n    \"downlevelIteration\": true, /* Emit more compliant, but verbose and less performant JavaScript for iteration. */// \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    \"newLine\": \"lf\", /* Set the newline character for emitting files. */// \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */// \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true, /* Ensure that casing is correct in imports. *//* Type Checking */\n    \"strict\": true, /* Enable all strict type-checking options. */// \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\n    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\n    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\n    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\n    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true, /* Skip type checking all .d.ts files. */\n    \"plugins\": [\n      {\n        \"transform\": \"typia/lib/transform\"\n      }\n    ],\n    \"strictNullChecks\": true\n  },\n  \"include\": [\n    \"../../src/api\"\n  ]\n}",
      "prettier.config.js": "module.exports = {\n  // DEFAULT CONFIGURATIONS\n  parser: \"typescript\",\n  printWidth: 80,\n  semi: true,\n  tabWidth: 2,\n  trailingComma: \"all\",\n\n  // PLUG-IN CONFIGURATIONS\n  plugins: [\"@trivago/prettier-plugin-sort-imports\"],\n  importOrder: [\n    \"<THIRD_PARTY_MODULES>\",\n    \"^@ORGANIZATION/PROJECT-api(.*)$\",\n    \"^[./]\",\n  ],\n  importOrderSeparation: true,\n  importOrderSortSpecifiers: true,\n  importOrderParserPlugins: [\"decorators-legacy\", \"typescript\"],\n};\n",
      "src/MyBackend.ts": "import { WebSocketAdaptor } from \"@nestia/core\";\nimport { INestApplication } from \"@nestjs/common\";\nimport { NestFactory } from \"@nestjs/core\";\n\nimport { MyConfiguration } from \"./MyConfiguration\";\nimport { MyModule } from \"./MyModule\";\n\nexport class MyBackend {\n  private application_?: INestApplication;\n\n  public async open(): Promise<void> {\n    //----\n    // OPEN THE BACKEND SERVER\n    //----\n    // MOUNT CONTROLLERS\n    this.application_ = await NestFactory.create(MyModule, { logger: false });\n    await WebSocketAdaptor.upgrade(this.application_);\n\n    // DO OPEN\n    this.application_.enableCors();\n    await this.application_.listen(MyConfiguration.API_PORT(), \"0.0.0.0\");\n\n    //----\n    // POST-PROCESSES\n    //----\n    // INFORM TO THE PM2\n    if (process.send) process.send(\"ready\");\n\n    // WHEN KILL COMMAND COMES\n    process.on(\"SIGINT\", async () => {\n      await this.close();\n      process.exit(0);\n    });\n  }\n\n  public async close(): Promise<void> {\n    if (this.application_ === undefined) return;\n\n    // DO CLOSE\n    await this.application_.close();\n    delete this.application_;\n  }\n}\n",
      "src/MyConfiguration.ts": "import fs from \"fs\";\nimport path from \"path\";\n\nimport { MyGlobal } from \"./MyGlobal\";\n\nexport namespace MyConfiguration {\n  export const API_PORT = () => Number(MyGlobal.env.API_PORT);\n\n  export const ROOT = (() => {\n    const split: string[] = __dirname.split(path.sep);\n    return split.at(-1) === \"src\" && split.at(-2) === \"bin\"\n      ? path.resolve(__dirname + \"/../..\")\n      : fs.existsSync(__dirname + \"/.env\")\n        ? __dirname\n        : path.resolve(__dirname + \"/..\");\n  })();\n}\n",
      "src/MyGlobal.ts": "import dotenv from \"dotenv\";\nimport dotenvExpand from \"dotenv-expand\";\nimport { Singleton } from \"tstl\";\nimport typia from \"typia\";\n\n/* eslint-disable */\nexport class MyGlobal {\n  public static testing: boolean = false;\n  public static get env(): MyGlobal.IEnvironments {\n    return environments.get();\n  }\n}\nexport namespace MyGlobal {\n  export interface IEnvironments {\n    API_PORT: `${number}`;\n  }\n}\n\nconst environments = new Singleton(() => {\n  const env = dotenv.config();\n  dotenvExpand.expand(env);\n  return typia.assert<MyGlobal.IEnvironments>(process.env);\n});\n",
      "src/api/HttpError.ts": "export { HttpError } from \"@nestia/fetcher\";\n",
      "src/api/IConnection.ts": "export type { IConnection } from \"@nestia/fetcher\";\n",
      "src/api/Primitive.ts": "export type { Primitive } from \"typia\";\n",
      "src/api/Resolved.ts": "export type { Resolved } from \"typia\";\n",
      "src/api/index.ts": "import * as api from \"./module\";\n\nexport * from \"./module\";\nexport default api;\n",
      "src/api/module.ts": "export type * from \"./IConnection\";\nexport * from \"./HttpError\";\n\nexport * as functional from \"./functional\";\n",
      "src/executable/server.ts": "import { MyBackend } from \"../MyBackend\";\n\nconst EXTENSION = __filename.substring(__filename.length - 2);\nif (EXTENSION === \"js\") require(\"source-map-support/register\");\n\nasync function main(): Promise<void> {\n  // BACKEND SEVER\n  const backend: MyBackend = new MyBackend();\n  await backend.open();\n\n  // UNEXPECTED ERRORS\n  global.process.on(\"uncaughtException\", console.error);\n  global.process.on(\"unhandledRejection\", console.error);\n}\nmain().catch((exp) => {\n  console.log(exp);\n  process.exit(-1);\n});\n",
      "src/executable/swagger.ts": "import cp from \"child_process\";\nimport express from \"express\";\n\nconst execute = (command: string): void => {\n  console.log(`\\n$ ${command}\\n`);\n  cp.execSync(command, { stdio: \"inherit\" });\n};\n\nconst main = async (): Promise<void> => {\n  if (!process.argv.some((str) => str === \"--skipBuild\"))\n    execute(\"npm run build:swagger\");\n\n  const docs = await import(\"../../packages/api/swagger.json\" as any);\n\n  const app = express();\n  const swaggerUi = require(\"swagger-ui-express\");\n  app.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(docs));\n  app.listen(37810);\n\n  console.log(\"\\n\");\n  console.log(\"-----------------------------------------------------------\");\n  console.log(\"\\n Swagger UI Address: http://127.0.0.1:37810/api-docs \\n\");\n  console.log(\"-----------------------------------------------------------\");\n};\nmain().catch((exp) => {\n  console.log(exp);\n  process.exit(-1);\n});\n",
      "src/utils/ErrorUtil.ts": "import serializeError = require(\"serialize-error\");\n\nexport namespace ErrorUtil {\n  export const toJSON = (err: any): object =>\n    err instanceof Object && err.toJSON instanceof Function\n      ? err.toJSON()\n      : serializeError(err);\n}\n",
      "src/utils/MapUtil.ts": "export namespace MapUtil {\n  export function take<Key, T>(\n    dict: Map<Key, T>,\n    key: Key,\n    generator: () => T,\n  ): T {\n    const oldbie: T | undefined = dict.get(key);\n    if (oldbie) return oldbie;\n\n    const value: T = generator();\n    dict.set(key, value);\n    return value;\n  }\n}\n",
      "test/TestAutomation.ts": "import { DynamicExecutor } from \"@nestia/e2e\";\nimport chalk from \"chalk\";\nimport { sleep_for } from \"tstl\";\n\nimport { MyConfiguration } from \"../src/MyConfiguration\";\nimport api from \"../src/api\";\nimport { ArgumentParser } from \"./helpers/ArgumentParser\";\n\nexport namespace TestAutomation {\n  export interface IProps<T> {\n    open(options: IOptions): Promise<T>;\n    close(backend: T): Promise<void>;\n  }\n\n  export interface IOptions {\n    simultaneous: number;\n    include?: string[];\n    exclude?: string[];\n  }\n\n  export const execute = async <T,>(props: IProps<T>): Promise<void> => {\n    // OPEN BACKEND\n    const options: IOptions = await getOptions();\n    const backend: T = await props.open(options);\n\n    // DO TEST\n    const connection: api.IConnection = {\n      host: `http://127.0.0.1:${MyConfiguration.API_PORT()}`,\n    };\n    const report: DynamicExecutor.IReport = await DynamicExecutor.validate({\n      prefix: \"test\",\n      location: __dirname + \"/features\",\n      parameters: () => [\n        {\n          host: connection.host,\n          encryption: connection.encryption,\n        },\n      ],\n      filter: (func) =>\n        (!options.include?.length ||\n          (options.include ?? []).some((str) => func.includes(str))) &&\n        (!options.exclude?.length ||\n          (options.exclude ?? []).every((str) => !func.includes(str))),\n      onComplete: (exec) => {\n        const trace = (str: string) =>\n          console.log(`  - ${chalk.green(exec.name)}: ${str}`);\n        if (exec.error === null) {\n          const elapsed: number =\n            new Date(exec.completed_at).getTime() -\n            new Date(exec.started_at).getTime();\n          trace(`${chalk.yellow(elapsed.toLocaleString())} ms`);\n        } else trace(chalk.red(exec.error.name));\n      },\n      simultaneous: options.simultaneous,\n    });\n\n    // TERMINATE - WAIT FOR BACKGROUND EVENTS\n    await sleep_for(2500);\n    await props.close(backend);\n\n    const failures: DynamicExecutor.IExecution[] = report.executions.filter(\n      (exec) => exec.error !== null,\n    );\n    if (failures.length === 0) {\n      console.log(\"Success\");\n      console.log(\"Elapsed time\", report.time.toLocaleString(), `ms`);\n    } else {\n      for (const f of failures) console.log(f.error);\n      process.exit(-1);\n    }\n\n    console.log(\n      [\n        `All: #${report.executions.length}`,\n        `Success: #${report.executions.length - failures.length}`,\n        `Failed: #${failures.length}`,\n      ].join(\"\\n\"),\n    );\n  };\n}\n\nconst getOptions = () =>\n  ArgumentParser.parse<TestAutomation.IOptions>(\n    async (command, prompt, action) => {\n      command.option(\n        \"--simultaneous <number>\",\n        \"number of simultaneous requests\",\n      );\n      command.option(\"--include <string...>\", \"include feature files\");\n      command.option(\"--exclude <string...>\", \"exclude feature files\");\n\n      return action(async (options) => {\n        options.simultaneous = Number(\n          options.simultaneous ??\n            (await prompt.number(\"simultaneous\")(\n              \"Number of simultaneous requests to make\",\n            )),\n        );\n        if (isNaN(options.simultaneous) || options.simultaneous <= 0)\n          options.simultaneous = 1;\n        return options as TestAutomation.IOptions;\n      });\n    },\n  );\n",
      "test/benchmark/index.ts": "import { DynamicBenchmarker } from \"@nestia/benchmark\";\nimport cliProgress from \"cli-progress\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport { IPointer } from \"tstl\";\n\nimport { MyBackend } from \"../../src/MyBackend\";\nimport { MyConfiguration } from \"../../src/MyConfiguration\";\nimport { MyGlobal } from \"../../src/MyGlobal\";\nimport { ArgumentParser } from \"../helpers/ArgumentParser\";\n\ninterface IOptions {\n  include?: string[];\n  exclude?: string[];\n  count: number;\n  threads: number;\n  simultaneous: number;\n}\n\nconst getOptions = () =>\n  ArgumentParser.parse<IOptions>(async (command, prompt, action) => {\n    // command.option(\"--mode <string>\", \"target mode\");\n    // command.option(\"--reset <true|false>\", \"reset local DB or not\");\n    command.option(\"--include <string...>\", \"include feature files\");\n    command.option(\"--exclude <string...>\", \"exclude feature files\");\n    command.option(\"--count <number>\", \"number of requests to make\");\n    command.option(\"--threads <number>\", \"number of threads to use\");\n    command.option(\n      \"--simultaneous <number>\",\n      \"number of simultaneous requests to make\",\n    );\n    return action(async (options) => {\n      // if (typeof options.reset === \"string\")\n      //     options.reset = options.reset === \"true\";\n      // options.mode ??= await prompt.select(\"mode\")(\"Select mode\")([\n      //     \"LOCAL\",\n      //     \"DEV\",\n      //     \"REAL\",\n      // ]);\n      // options.reset ??= await prompt.boolean(\"reset\")(\"Reset local DB\");\n      options.count = Number(\n        options.count ??\n          (await prompt.number(\"count\")(\"Number of requests to make\")),\n      );\n      options.threads = Number(\n        options.threads ??\n          (await prompt.number(\"threads\")(\"Number of threads to use\")),\n      );\n      options.simultaneous = Number(\n        options.simultaneous ??\n          (await prompt.number(\"simultaneous\")(\n            \"Number of simultaneous requests to make\",\n          )),\n      );\n      return options as IOptions;\n    });\n  });\n\nconst main = async (): Promise<void> => {\n  // CONFIGURATIONS\n  const options: IOptions = await getOptions();\n  MyGlobal.testing = true;\n\n  // BACKEND SERVER\n  const backend: MyBackend = new MyBackend();\n  await backend.open();\n\n  // DO BENCHMARK\n  const prev: IPointer<number> = { value: 0 };\n  const bar: cliProgress.SingleBar = new cliProgress.SingleBar(\n    {},\n    cliProgress.Presets.shades_classic,\n  );\n  bar.start(options.count, 0);\n\n  const report: DynamicBenchmarker.IReport = await DynamicBenchmarker.master({\n    servant: `${__dirname}/servant.js`,\n    count: options.count,\n    threads: options.threads,\n    simultaneous: options.simultaneous,\n    filter: (func) =>\n      (!options.include?.length ||\n        (options.include ?? []).some((str) => func.includes(str))) &&\n      (!options.exclude?.length ||\n        (options.exclude ?? []).every((str) => !func.includes(str))),\n    progress: (value: number) => {\n      if (value >= 100 + prev.value) {\n        bar.update(value);\n        prev.value = value;\n      }\n    },\n    stdio: \"ignore\",\n  });\n  bar.stop();\n\n  // DOCUMENTATION\n  try {\n    await fs.promises.mkdir(`${MyConfiguration.ROOT}/docs/benchmarks`, {\n      recursive: true,\n    });\n  } catch {}\n  await fs.promises.writeFile(\n    `${MyConfiguration.ROOT}/docs/benchmarks/${os\n      .cpus()[0]\n      .model.trim()\n      .split(\"\\\\\")\n      .join(\"\")\n      .split(\"/\")\n      .join(\"\")}.md`,\n    DynamicBenchmarker.markdown(report),\n    \"utf8\",\n  );\n\n  // CLOSE\n  await backend.close();\n};\nmain().catch((exp) => {\n  console.error(exp);\n  process.exit(-1);\n});\n",
      "test/benchmark/servant.ts": "import { DynamicBenchmarker } from \"@nestia/benchmark\";\n\nimport { MyConfiguration } from \"../../src/MyConfiguration\";\n\nDynamicBenchmarker.servant({\n  connection: {\n    host: `http://127.0.0.1:${MyConfiguration.API_PORT()}`,\n  },\n  location: `${__dirname}/../features`,\n  parameters: (connection) => [connection],\n  prefix: \"test_api_\",\n}).catch((exp) => {\n  console.error(exp);\n  process.exit(-1);\n});\n",
      "test/helpers/ArgumentParser.ts": "import commander from \"commander\";\nimport * as inquirer from \"inquirer\";\n\nexport namespace ArgumentParser {\n  export type Inquiry<T> = (\n    command: commander.Command,\n    prompt: (opt?: inquirer.StreamOptions) => inquirer.PromptModule,\n    action: (closure: (options: Partial<T>) => Promise<T>) => Promise<T>,\n  ) => Promise<T>;\n\n  export interface Prompt {\n    select: (\n      name: string,\n    ) => (\n      message: string,\n    ) => <Choice extends string>(choices: Choice[]) => Promise<Choice>;\n    boolean: (name: string) => (message: string) => Promise<boolean>;\n    number: (name: string) => (message: string) => Promise<number>;\n  }\n\n  export const parse = async <T,>(\n    inquiry: (\n      command: commander.Command,\n      prompt: Prompt,\n      action: (closure: (options: Partial<T>) => Promise<T>) => Promise<T>,\n    ) => Promise<T>,\n  ): Promise<T> => {\n    // TAKE OPTIONS\n    const action = (closure: (options: Partial<T>) => Promise<T>) =>\n      new Promise<T>((resolve, reject) => {\n        commander.program.action(async (options) => {\n          try {\n            resolve(await closure(options));\n          } catch (exp) {\n            reject(exp);\n          }\n        });\n        commander.program.parseAsync().catch(reject);\n      });\n\n    const select =\n      (name: string) =>\n      (message: string) =>\n      async <Choice extends string>(choices: Choice[]): Promise<Choice> =>\n        (\n          await inquirer.createPromptModule()({\n            type: \"list\",\n            name,\n            message,\n            choices,\n          })\n        )[name];\n    const boolean = (name: string) => async (message: string) =>\n      (\n        await inquirer.createPromptModule()({\n          type: \"confirm\",\n          name,\n          message,\n        })\n      )[name] as boolean;\n    const number = (name: string) => async (message: string) =>\n      Number(\n        (\n          await inquirer.createPromptModule()({\n            type: \"number\",\n            name,\n            message,\n          })\n        )[name],\n      );\n\n    const output: T | Error = await (async () => {\n      try {\n        return await inquiry(\n          commander.program,\n          { select, boolean, number },\n          action,\n        );\n      } catch (error) {\n        return error as Error;\n      }\n    })();\n\n    // RETURNS\n    if (output instanceof Error) throw output;\n    return output;\n  };\n}\n",
      "test/index.ts": "import { MyBackend } from \"../src/MyBackend\";\nimport { MyGlobal } from \"../src/MyGlobal\";\nimport { TestAutomation } from \"./TestAutomation\";\n\nconst main = async (): Promise<void> => {\n  MyGlobal.testing = true;\n  await TestAutomation.execute({\n    open: async () => {\n      const backend: MyBackend = new MyBackend();\n      await backend.open();\n      return backend;\n    },\n    close: (backend) => backend.close(),\n  });\n};\nmain().catch((exp) => {\n  console.log(exp);\n  process.exit(-1);\n});\n",
      "test/tsconfig.json": "{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../bin\",\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n  },\n  \"include\": [\".\", \"../src\"]\n}",
      "test/webpack.ts": "import cp from \"child_process\";\nimport { sleep_for } from \"tstl\";\n\nimport { MyConfiguration } from \"../src/MyConfiguration\";\nimport { MyGlobal } from \"../src/MyGlobal\";\nimport { TestAutomation } from \"./TestAutomation\";\n\nconst wait = async (): Promise<void> => {\n  while (true)\n    try {\n      await fetch(`http://localhost:${MyConfiguration.API_PORT()}/dsafdsafsd`);\n      return;\n    } catch (exp) {\n      await sleep_for(100);\n    }\n};\n\nconst main = async (): Promise<void> => {\n  MyGlobal.testing = true;\n  await TestAutomation.execute({\n    open: async () => {\n      const backend: cp.ChildProcess = cp.fork(\n        `${MyConfiguration.ROOT}/dist/server.js`,\n        {\n          cwd: `${MyConfiguration.ROOT}/dist`,\n        },\n      );\n      await wait();\n      return backend;\n    },\n    close: async (backend) => {\n      backend.kill();\n    },\n  });\n};\nmain().catch((exp) => {\n  console.log(exp);\n  process.exit(-1);\n});\n",
      "tsconfig.json": "{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \"target\": \"ES2015\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    // \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\n\n    /* Modules */\n    \"module\": \"commonjs\",                                /* Specify what module code is generated. */\n    // \"rootDir\": \"./\",                                  /* Specify the root folder within your source files. */\n    // \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */\n    \"paths\": {\n      \"@ORGANIZATION/PROJECT-api/lib/*\": [\"./src/api/*\"],\n      \"@ORGANIZATION/PROJECT-api\": [\"./src/api\"],\n    },                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\n    // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n    // \"resolveJsonModule\": true,                        /* Enable importing .json files. */\n    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n\n    /* Emit */\n    // \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\n    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n    \"outDir\": \"./lib\",                                   /* Specify an output folder for all emitted files. */\n    // \"removeComments\": true,                           /* Disable emitting comments. */\n    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\n    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    \"newLine\": \"lf\",                                /* Set the newline character for emitting files. */\n    \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\n    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true,            /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \"strict\": true,                                      /* Enable all strict type-checking options. */\n    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\n    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\n    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\n    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\n    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true,                                 /* Skip type checking all .d.ts files. */\n    \"plugins\": [\n      { \"transform\": \"typescript-transform-paths\" },\n      { \"transform\": \"typia/lib/transform\" },\n      { \n        \"transform\": \"@nestia/core/lib/transform\",\n        /**\n         * Validate request body.\n         * \n         *   - \"assert\": Use typia.assert() function\n         *   - \"is\": Use typia.is() function\n         *   - \"validate\": Use typia.validate() function\n         *   - \"assertEquals\": Use typia.assertEquals() function\n         *   - \"equals\": Use typia.equals() function\n         *   - \"validateEquals\": Use typia.validateEquals() function\n         */\n        \"validate\": \"validate\",\n        /**\n         * Validate JSON typed response body.\n         * \n         *   - \"assert\": Use typia.assertStringify() function\n         *   - \"is\": Use typia.isStringify() function\n         *   - \"validate\": Use typia.validateStringify() function\n         *   - \"validate.log\": typia.validateStringify(), but do not throw and just log it\n         *   - \"stringify\": Use typia.stringify() function, but dangerous\n         *   - null: Just use JSON.stringify() function, without boosting\n         */\n        \"stringify\": \"assert\",\n      },\n    ]\n  },\n  \"include\": [\n    \"src\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"packages\",\n  ]\n}\n",
      "typos.toml": "[default]\nlocale = 'en-us'\nextend-ignore-re = [\n  \"(?Rm)^.*(<!--|#|//)\\\\s*spellchecker:disable-line(-->|\\n)?$\",\n  \"(?s)(<!--|#|//)\\\\s*spellchecker:off\\\\s*(-->|\\n).*?(<!--|#|//)\\\\s*spellchecker:on\",\n]\n\n[default.extend-words]\nJeongho = \"Jeongho\"\nNam = \"Nam\"\ntypia = \"typia\"\n\n[files]\nextend-exclude = [\"*.json\"]",
      "webpack.config.js": "const path = require(\"path\");\n\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nconst WriteFilePlugin = require(\"write-file-webpack-plugin\");\nconst { IgnorePlugin } = require(\"webpack\");\n\nconst lazyImports = [\n  \"@fastify/static\",\n  \"@fastify/view\",\n  \"@nestjs/microservices\",\n  \"@nestjs/websockets\",\n  \"class-transformer\",\n  \"class-validator\",\n];\n\n// @reference https://tech-blog.s-yoshiki.com/entry/297\nmodule.exports = {\n  // CUSTOMIZE HERE\n  entry: {\n    server: \"./src/executable/server.ts\",\n  },\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"[name].js\",\n  },\n  optimization: {\n    minimize: true,\n  },\n\n  // JUST KEEP THEM\n  mode: \"production\",\n  target: \"node\",\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        loader: \"ts-loader\",\n      },\n    ],\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"],\n  },\n  plugins: [\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: \".env\",\n          to: \"[name][ext]\",\n        },\n        // {\n        //   from: \"./node_modules/.prisma/client/*.node\",\n        //   to: () => Promise.resolve(\"[path][name][ext]\"),\n        //   globOptions: {\n        //     dot: true,\n        //   },\n        // },\n      ],\n    }),\n    new WriteFilePlugin(),\n    new IgnorePlugin({\n      checkResource: (resource) => {\n        if (lazyImports.some((modulo) => resource.startsWith(modulo))) {\n          try {\n            require.resolve(resource);\n          } catch (err) {\n            return true;\n          }\n        }\n        return false;\n      },\n    }),\n  ],\n};\n",
      "src/MyModule.ts": "import { Module } from \"@nestjs/common\";\n\nimport { DiscussionboardUsersController } from \"./controllers/discussionboard/users/DiscussionboardUsersController\";\nimport { DiscussionboardUserprofilesController } from \"./controllers/discussionboard/userProfiles/DiscussionboardUserprofilesController\";\nimport { DiscussionboardMembersController } from \"./controllers/discussionboard/members/DiscussionboardMembersController\";\nimport { DiscussionboardModeratorsController } from \"./controllers/discussionboard/moderators/DiscussionboardModeratorsController\";\nimport { DiscussionboardAdminsController } from \"./controllers/discussionboard/admins/DiscussionboardAdminsController\";\nimport { DiscussionboardPostsController } from \"./controllers/discussionboard/posts/DiscussionboardPostsController\";\nimport { DiscussionboardPostcategoriesController } from \"./controllers/discussionboard/postCategories/DiscussionboardPostcategoriesController\";\nimport { DiscussionboardPosttagsController } from \"./controllers/discussionboard/postTags/DiscussionboardPosttagsController\";\nimport { DiscussionboardPostattachmentsController } from \"./controllers/discussionboard/postAttachments/DiscussionboardPostattachmentsController\";\nimport { DiscussionboardCommentsController } from \"./controllers/discussionboard/comments/DiscussionboardCommentsController\";\nimport { DiscussionboardLikesController } from \"./controllers/discussionboard/likes/DiscussionboardLikesController\";\nimport { DiscussionboardReportsController } from \"./controllers/discussionboard/reports/DiscussionboardReportsController\";\nimport { DiscussionboardModerationactionsController } from \"./controllers/discussionboard/moderationActions/DiscussionboardModerationactionsController\";\nimport { DiscussionboardReportreviewsController } from \"./controllers/discussionboard/reportReviews/DiscussionboardReportreviewsController\";\nimport { DiscussionboardWarningsController } from \"./controllers/discussionboard/warnings/DiscussionboardWarningsController\";\nimport { DiscussionboardBansController } from \"./controllers/discussionboard/bans/DiscussionboardBansController\";\nimport { DiscussionboardNotificationsController } from \"./controllers/discussionboard/notifications/DiscussionboardNotificationsController\";\nimport { DiscussionboardNotificationpreferencesController } from \"./controllers/discussionboard/notificationPreferences/DiscussionboardNotificationpreferencesController\";\nimport { DiscussionboardAuditlogsController } from \"./controllers/discussionboard/auditLogs/DiscussionboardAuditlogsController\";\nimport { DiscussionboardPlatformsettingsController } from \"./controllers/discussionboard/platformSettings/DiscussionboardPlatformsettingsController\";\n\n@Module({\n  controllers: [\n    DiscussionboardUsersController,\n    DiscussionboardUserprofilesController,\n    DiscussionboardMembersController,\n    DiscussionboardModeratorsController,\n    DiscussionboardAdminsController,\n    DiscussionboardPostsController,\n    DiscussionboardPostcategoriesController,\n    DiscussionboardPosttagsController,\n    DiscussionboardPostattachmentsController,\n    DiscussionboardCommentsController,\n    DiscussionboardLikesController,\n    DiscussionboardReportsController,\n    DiscussionboardModerationactionsController,\n    DiscussionboardReportreviewsController,\n    DiscussionboardWarningsController,\n    DiscussionboardBansController,\n    DiscussionboardNotificationsController,\n    DiscussionboardNotificationpreferencesController,\n    DiscussionboardAuditlogsController,\n    DiscussionboardPlatformsettingsController,\n  ],\n})\nexport class MyModule {}\n",
      "src/controllers/discussionboard/users/DiscussionboardUsersController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUser } from \"../../../api/structures/IDiscussionboardUser\";\nimport { IPageDiscussionboardUser } from \"../../../api/structures/IPageDiscussionboardUser\";\n\n@Controller(\"/discussionboard/users\")\nexport class DiscussionboardUsersController {\n  /**\n   * Create a new user (discussionboard_user) record.\n   *\n   * This endpoint creates a new user master record, writing to the\n   * discussionboard_user table. It handles validation for unique emails,\n   * initial password hash assignment, and sets is_active to its default state\n   * according to business rules. Security considerations ensure only\n   * authorized roles can invoke direct creation. The operation also triggers\n   * any necessary audit logging for compliance. Related operations: used in\n   * tandem with user profile creation, member role assignment, and\n   * authentication flows.\n   *\n   * @param connection\n   * @param body User registration or admin onboarding details.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardUser.ICreate,\n  ): Promise<IDiscussionboardUser> {\n    body;\n    return typia.random<IDiscussionboardUser>();\n  }\n\n  /**\n   * Retrieve a paginated, searchable list of users (discussionboard_user).\n   *\n   * This API operation retrieves a searchable, paginated list of user master\n   * records from the discussionboard_user table. It supports query\n   * capabilities for filtering by activation status, creation/update\n   * timestamp, and partial email matches. The endpoint is designed to be used\n   * primarily by administrators and moderators for user oversight and\n   * management per the defined permissions matrix. Security: Only accessible\n   * to admin or moderator roles. Validation: Supports strong input validation\n   * on paging and filters, and must log all access for auditability. Related\n   * operations: administrators may utilize this in conjunction with the user\n   * single-record GET for comprehensive user management workflows.\n   *\n   * @param connection\n   * @param body Filtering, paging, and search parameters for listing user\n   *   master records.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardUser.IRequest,\n  ): Promise<IPageDiscussionboardUser> {\n    body;\n    return typia.random<IPageDiscussionboardUser>();\n  }\n\n  /**\n   * Get a single user (discussionboard_user) by ID.\n   *\n   * This API retrieves the complete information for an individual user,\n   * identified by their UUID. It is intended for use by administrators and\n   * moderators in user management scenarios, such as reviewing, editing, or\n   * auditing user details. The response includes all core attributes (email,\n   * activation status, creation/update timestamps) and maintains security by\n   * strictly permitting access to authorized roles. Related operations may\n   * include list retrieval and update endpoints.\n   *\n   * @param connection\n   * @param id User's unique identifier (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardUser> {\n    id;\n    return typia.random<IDiscussionboardUser>();\n  }\n\n  /**\n   * Update a user (discussionboard_user) by ID.\n   *\n   * This API operation allows modification of selected user fields (email,\n   * password hash, is_active), targeting a specific user by UUID. Security\n   * and validation rules enforce role-based restrictions and data integrity\n   * per requirements. The endpoint is heavily audited to track all changes\n   * for compliance, and is designed for admin or moderator-initiated actions.\n   * Related endpoints: single user GET, user list PATCH. Error handling\n   * robustly communicates invalid updates or permission violations.\n   *\n   * @param connection\n   * @param id User's unique identifier (UUID).\n   * @param body Fields and values for updating the user record.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardUser.IUpdate,\n  ): Promise<IDiscussionboardUser> {\n    id;\n    body;\n    return typia.random<IDiscussionboardUser>();\n  }\n\n  /**\n   * Delete (deactivate) a user (discussionboard_user) by ID.\n   *\n   * Deletes (or deactivates) a user account by UUID. This API supports\n   * administrative removal flows, including compliance logging. It is\n   * designed for admin-level actions, as user deletion can have significant\n   * platform/customer impact. The operation typically issues a soft-delete\n   * (e.g., toggling is_active to false) and is fully audited, in line with\n   * platform integrity and regulatory demands. Related: Admin dashboard user\n   * controls, audit log write.\n   *\n   * @param connection\n   * @param id User's unique identifier (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardUser> {\n    id;\n    return typia.random<IDiscussionboardUser>();\n  }\n}\n",
      "src/controllers/discussionboard/userProfiles/DiscussionboardUserprofilesController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUserProfile } from \"../../../api/structures/IDiscussionboardUserProfile\";\nimport { IPageDiscussionboardUserProfile } from \"../../../api/structures/IPageDiscussionboardUserProfile\";\n\n@Controller(\"/discussionboard/userProfiles\")\nexport class DiscussionboardUserprofilesController {\n  /**\n   * Create a new user profile (discussionboard_user_profile) record.\n   *\n   * This operation creates a new user profile, referencing the parent user\n   * record, and populates display_name, avatar_url, and bio. Security: Only\n   * admin/moderator roles allowed direct creation via this API. Validation:\n   * requires unique user_id and all required fields as per schema. Successful\n   * creation triggers audit log entries. Related: member onboarding, profile\n   * edit flows.\n   *\n   * @param connection\n   * @param body Profile creation (display name, avatar, bio, user_id).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardUserProfile.ICreate,\n  ): Promise<IDiscussionboardUserProfile> {\n    body;\n    return typia.random<IDiscussionboardUserProfile>();\n  }\n\n  /**\n   * List user profiles (discussionboard_user_profile) with search/pagination.\n   *\n   * This endpoint allows privileged users to retrieve and browse user profile\n   * records, supporting full-text and field-level search and filters\n   * (display_name, bio, etc.). The response is paginated and designed to\n   * support member directories, user management workflows, and audit\n   * reporting. Security: limited to moderators and admins. Validation: robust\n   * query filtering and result formatting per requirements analysis. Related:\n   * GET/PATCH/PUT/DELETE profile endpoints.\n   *\n   * @param connection\n   * @param body Profile list filtering, search, and pagination request.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardUserProfile.IRequest,\n  ): Promise<IPageDiscussionboardUserProfile> {\n    body;\n    return typia.random<IPageDiscussionboardUserProfile>();\n  }\n\n  /**\n   * Get a user profile (discussionboard_user_profile) by ID.\n   *\n   * Fetches all stored display and personal information for an individual\n   * user's profile by UUID. Used for profile detail views in\n   * administration/moderation dashboards, as well as for member self-service\n   * editing. Security/permissions checks ensure only proper roles may access.\n   * Data structure matches schema commentary and requirements.\n   *\n   * @param connection\n   * @param id User profile unique identifier (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardUserProfile> {\n    id;\n    return typia.random<IDiscussionboardUserProfile>();\n  }\n\n  /**\n   * Update a user profile (discussionboard_user_profile) by ID.\n   *\n   * Allows modification to a single user profile by its UUID, supporting all\n   * permitted fields (display name, avatar, bio, etc.). Security controls\n   * enforce that only authorized roles may make such edits. Audit log entries\n   * created for each change. The endpoint supports tight input validation for\n   * data quality.\n   *\n   * @param connection\n   * @param id User profile unique identifier (UUID).\n   * @param body Profile fields and values for update.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardUserProfile.IUpdate,\n  ): Promise<IDiscussionboardUserProfile> {\n    id;\n    body;\n    return typia.random<IDiscussionboardUserProfile>();\n  }\n\n  /**\n   * Delete a user profile (discussionboard_user_profile) by ID.\n   *\n   * Removes the user profile entry with the specified UUID. This endpoint is\n   * used primarily by admins for compliance-driven and support-driven cleanup\n   * tasks. Operation is logged for auditability, and security enforces\n   * administrative privilege.\n   *\n   * @param connection\n   * @param id User profile unique identifier (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardUserProfile> {\n    id;\n    return typia.random<IDiscussionboardUserProfile>();\n  }\n}\n",
      "src/controllers/discussionboard/members/DiscussionboardMembersController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardMember } from \"../../../api/structures/IDiscussionboardMember\";\nimport { IPageDiscussionboardMember } from \"../../../api/structures/IPageDiscussionboardMember\";\n\n@Controller(\"/discussionboard/members\")\nexport class DiscussionboardMembersController {\n  /**\n   * Create a new discussionboard_member entity based on the\n   * discussionboard_member table.\n   *\n   * This API endpoint allows an administrator or system operator to create a\n   * new member in the discussionboard_member table. The member role grants\n   * basic participation privileges according to the permissions matrix in the\n   * requirements documentation. The creation process requires associating the\n   * new member with a valid discussionboard_user (user_id). This ensures that\n   * all new members have a corresponding authenticated user record, and that\n   * there is no role duplication or data inconsistency. The request validates\n   * the provided user and ensures that no existing member role is already\n   * attached to the given user_id. If the user_id is not found or already\n   * registered as a member, the API will return an error.\n   *\n   * @param connection\n   * @param body Information required to create a new member (must include\n   *   user_id and grant timestamp).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardMember.ICreate,\n  ): Promise<IDiscussionboardMember> {\n    body;\n    return typia.random<IDiscussionboardMember>();\n  }\n\n  /**\n   * List platform members (discussionboard_member) with search/pagination.\n   *\n   * This API returns a paginated collection of all members assigned to the\n   * platform, including details such as grant timestamp and related user\n   * account identifiers. Filters include active/inactive status, joining\n   * date, etc. Security: Only admins and moderators can access for role\n   * management or audit workflows. Related: GET member, PATCH/PUT/DELETE\n   * endpoints for role adjustment.\n   *\n   * @param connection\n   * @param body Filtering, paging, and search parameters for member role\n   *   records.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardMember.IRequest,\n  ): Promise<IPageDiscussionboardMember> {\n    body;\n    return typia.random<IPageDiscussionboardMember>();\n  }\n\n  /**\n   * Get a specific member (discussionboard_member) by ID.\n   *\n   * Fetches the record of a specific member role assignment, referenced by\n   * its UUID. Supports administration dashboard use cases, auditing, and role\n   * validation. Security: accessible only to admins and moderators. Related:\n   * PATCH member list, PUT/DELETE member for role management.\n   *\n   * @param connection\n   * @param id Member role assignment unique identifier (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardMember> {\n    id;\n    return typia.random<IDiscussionboardMember>();\n  }\n\n  /**\n   * Update an existing discussionboard_member entity by id in the\n   * discussionboard_member table.\n   *\n   * This API endpoint allows administrators to update information of an\n   * existing member in the discussionboard_member table. Typically, only the\n   * grant timestamp or similar metadata may be updated, as member roles\n   * themselves are atomic. The endpoint strictly requires sufficient\n   * privileges and validates the specified id (primary key) to ensure the\n   * member entity exists. Unauthorized or inappropriate attempts to escalate\n   * privileges are restricted by business logic, and audit logs are\n   * maintained for such role modifications.\n   *\n   * @param connection\n   * @param id Target discussionboard_member entity id (UUID).\n   * @param body Updated member data (must match updatable\n   *   discussionboard_member fields).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardMember.IUpdate,\n  ): Promise<IDiscussionboardMember> {\n    id;\n    body;\n    return typia.random<IDiscussionboardMember>();\n  }\n\n  /**\n   * Delete a discussionboard_member entity (revoke member role) in the\n   * discussionboard_member table by id.\n   *\n   * This API endpoint enables an administrator to remove a member role\n   * assignment from a particular user by the member's primary key (id). This\n   * revocation is closely audited, ensuring traceability. The endpoint\n   * validates the specified id, deletes the member role only if it exists,\n   * and refuses to remove membership from users who are currently serving as\n   * moderator/admin (unless business policies specifically permit cascading\n   * removal). Operations are logged for compliance.\n   *\n   * @param connection\n   * @param id Target discussionboard_member entity id (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardMember> {\n    id;\n    return typia.random<IDiscussionboardMember>();\n  }\n}\n",
      "src/controllers/discussionboard/moderators/DiscussionboardModeratorsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerator } from \"../../../api/structures/IDiscussionboardModerator\";\nimport { IPageDiscussionboardModerator } from \"../../../api/structures/IPageDiscussionboardModerator\";\n\n@Controller(\"/discussionboard/moderators\")\nexport class DiscussionboardModeratorsController {\n  /**\n   * Create a new discussionboard_moderator assignment in the\n   * discussionboard_moderator table.\n   *\n   * This endpoint allows admins to create and assign new moderator roles to\n   * existing users. The process ensures that only users who are already\n   * members (but not already moderators or admins) are eligible. The request\n   * must specify the user_id and assignment date/time. The endpoint validates\n   * input and records the new assignment for future audits. Creation is\n   * tightly audited and triggers related permission changes for the specified\n   * user.\n   *\n   * @param connection\n   * @param body Moderator assignment information (user_id and assignment\n   *   time).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardModerator.ICreate,\n  ): Promise<IDiscussionboardModerator> {\n    body;\n    return typia.random<IDiscussionboardModerator>();\n  }\n\n  /**\n   * List/search all discussionboard_moderator entities (with pagination and\n   * filters) in the discussionboard_moderator table.\n   *\n   * This endpoint returns a list of moderator role assignments with support\n   * for pagination, search filters (such as assigned_at date, or associated\n   * user), and sorting. Admins can use this API to review all current and\n   * past moderator assignments. The output includes grants with their\n   * associated user ids, assignment timestamps, and moderator assignment\n   * metadata. Query parameters allow for narrowing the list based on\n   * assignment time or specific users. This is a critical part of the admin's\n   * dashboard role and security monitoring workflows.\n   *\n   * @param connection\n   * @param body Search filters, pagination, and sort info for moderator\n   *   assignment retrieval.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardModerator.IRequest,\n  ): Promise<IPageDiscussionboardModerator> {\n    body;\n    return typia.random<IPageDiscussionboardModerator>();\n  }\n\n  /**\n   * Get a single discussionboard_moderator entity by id from the\n   * discussionboard_moderator table.\n   *\n   * This API operation fetches a specific moderator assignment record from\n   * the discussionboard_moderator table based on the provided id (UUID). The\n   * response details the moderator's associated user account and assignment\n   * metadata, supporting admin review, dashboard, and audit functionality.\n   * Error handling ensures non-existent ids are reported gracefully.\n   *\n   * @param connection\n   * @param id Target discussionboard_moderator entity id (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardModerator> {\n    id;\n    return typia.random<IDiscussionboardModerator>();\n  }\n\n  /**\n   * Update a discussionboard_moderator entity by id in the\n   * discussionboard_moderator table.\n   *\n   * This endpoint allows an admin to update the assignment properties (e.g.,\n   * timestamps) of an existing moderator entity by id. Business logic\n   * restricts changing the actual user_id or role, as role\n   * escalation/demotion should use separate business flows. The operation is\n   * logged and validated for admin-only use, and errors are reported if the\n   * id is invalid or immutable properties are attempted to be updated.\n   *\n   * @param connection\n   * @param id Target discussionboard_moderator entity id (UUID).\n   * @param body Updatable moderator assignment fields (assignment time, etc).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardModerator.IUpdate,\n  ): Promise<IDiscussionboardModerator> {\n    id;\n    body;\n    return typia.random<IDiscussionboardModerator>();\n  }\n\n  /**\n   * Delete a discussionboard_moderator entry (revoke moderator role) by id in\n   * the discussionboard_moderator table.\n   *\n   * This endpoint allows an admin to remove moderator status from a user by\n   * deleting the corresponding discussionboard_moderator role entry using its\n   * id. This action is audited and validated. It does not delete the\n   * underlying user or member records, only the moderator assignment. Errors\n   * are thrown if cascading deletes aren’t permitted or if the id is not\n   * found.\n   *\n   * @param connection\n   * @param id Target discussionboard_moderator entity id (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardModerator> {\n    id;\n    return typia.random<IDiscussionboardModerator>();\n  }\n}\n",
      "src/controllers/discussionboard/admins/DiscussionboardAdminsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardAdmin } from \"../../../api/structures/IDiscussionboardAdmin\";\nimport { IPageDiscussionboardAdmin } from \"../../../api/structures/IPageDiscussionboardAdmin\";\n\n@Controller(\"/discussionboard/admins\")\nexport class DiscussionboardAdminsController {\n  /**\n   * Create a new discussionboard_admin role assignment in the\n   * discussionboard_admin table.\n   *\n   * This endpoint lets an authorized administrator create a new admin\n   * assignment (promotion) for a user, typically by specifying the target\n   * user_id and the assignment timestamp. It validates eligibility, checks\n   * for duplicate admin assignments, and ensures a single active admin\n   * assignment per user. Assignments are tightly audited, and only current\n   * admins may perform this action as per the permissions matrix.\n   *\n   * @param connection\n   * @param body Admin role assignment information (user_id and assignment\n   *   timestamp).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardAdmin.ICreate,\n  ): Promise<IDiscussionboardAdmin> {\n    body;\n    return typia.random<IDiscussionboardAdmin>();\n  }\n\n  /**\n   * List/search all discussionboard_admin entities (paginated, with filters)\n   * in the discussionboard_admin table.\n   *\n   * This endpoint offers admins an overview and search interface for all\n   * platform administrator assignments in the discussionboard_admin table.\n   * The payload supports pagination, keyword search, and filtering by\n   * assignment date or user. It forms the basis for privileged account\n   * audits, access controls, and compliance verification. The operation is\n   * restricted to high privilege user roles; data is indexed for efficiency.\n   *\n   * @param connection\n   * @param body Search filters, pagination, and sorting information for\n   *   retrieving admin assignments.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardAdmin.IRequest,\n  ): Promise<IPageDiscussionboardAdmin> {\n    body;\n    return typia.random<IPageDiscussionboardAdmin>();\n  }\n\n  /**\n   * Get a single discussionboard_admin entity by id from the\n   * discussionboard_admin table.\n   *\n   * Fetch the details of a platform administrator role assignment by its id\n   * (UUID) from the discussionboard_admin table. This supports dashboard and\n   * audit workflows, validating the provided id and returning associated user\n   * and role metadata. Errors for non-existent ids are handled gracefully.\n   * Only users with sufficient privileges (other admins) can perform this\n   * query according to the permission model.\n   *\n   * @param connection\n   * @param id Target discussionboard_admin entity id (UUID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardAdmin> {\n    id;\n    return typia.random<IDiscussionboardAdmin>();\n  }\n\n  /**\n   * Update a discussionboard_admin role assignment by id in the\n   * discussionboard_admin table.\n   *\n   * Update the assignment-related metadata (such as assigned_at) of an\n   * existing administrator role entity by its id. Only admins may perform\n   * this operation, and audit logs are updated accordingly. Changing the\n   * actual user_id or demotion is explicitly not handled by this endpoint,\n   * which is meant only for metadata updates.\n   *\n   * @param connection\n   * @param id Target discussionboard_admin entity id (UUID).\n   * @param body Updatable admin assignment fields, such as assignment time.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardAdmin.IUpdate,\n  ): Promise<IDiscussionboardAdmin> {\n    id;\n    body;\n    return typia.random<IDiscussionboardAdmin>();\n  }\n\n  /**\n   * Delete an admin record from discussionboard_admin table by its ID\n   * (admin-only).\n   *\n   * This API operation deletes an administrator record from the\n   * discussionboard_admin entity. As per the requirements documents, admin\n   * role records are maintained distinctly from user, moderator, and member\n   * entries, supporting 3NF and full audit compliance. Deletion of an admin\n   * role is a restricted operation, only allowed for authenticated super\n   * admins via bearer token, ensuring robust authorization checks. Security\n   * is paramount, as role escalation and privilege management are tracked\n   * through audit logging (discussionboard_audit_log). Attempting to delete\n   * an admin role that does not exist results in a not-found error;\n   * permission errors trigger a forbidden error. This API supports platform\n   * maintenance, role reconfiguration, and compliance with the roles and\n   * permissions design clarified in the requirements and schema.\n   *\n   * @param connection\n   * @param id Target admin assignment ID for deletion\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/posts/DiscussionboardPostsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPost } from \"../../../api/structures/IDiscussionboardPost\";\nimport { IPageIDiscussionboardPost } from \"../../../api/structures/IPageIDiscussionboardPost\";\n\n@Controller(\"/discussionboard/posts\")\nexport class DiscussionboardPostsController {\n  /**\n   * Create a new discussionboard_post (member role).\n   *\n   * Enables logged-in members to create a new discussion post in the\n   * discussionboard_post entity. The incoming request body supplies all\n   * necessary information (title, body, category, and optionally\n   * attachments). Validations check category existence, normalized author\n   * pointer, and input length constraints. Attachments are added via\n   * secondary operations post-creation. Errors due to missing fields, invalid\n   * references, or authorization failure return appropriate status codes and\n   * structured error responses. This operation is strictly restricted to\n   * non-deleted, active members. On success, returns the created post\n   * including generated ID and all populated fields.\n   *\n   * @param connection\n   * @param body Details for the new discussion post to be created.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardPost.ICreate,\n  ): Promise<IDiscussionboardPost> {\n    body;\n    return typia.random<IDiscussionboardPost>();\n  }\n\n  /**\n   * Retrieve a list of discussionboard_post entries with filtering, search,\n   * and pagination.\n   *\n   * Retrieves a list of discussion posts from the discussionboard_post\n   * entity, with advanced query and pagination support in the request body.\n   * This operation fulfills the requirements for filtered, paged, and\n   * searchable list retrieval across all board categories. By referencing\n   * associated entities like member (author), category, attachments, and\n   * moderation status, this endpoint provides broad discoverability and\n   * content management. Members see only visible posts; moderators/admins can\n   * query hidden/deleted posts, supporting moderation workflows. Validation\n   * rules ensure query filters are well-formed; errors in filtering result in\n   * 400 responses. Rate limiting and role-based visibility are enforced.\n   * Related endpoints include GET /discussionboard/posts/{id} (detail fetch),\n   * POST /discussionboard/posts (create), and moderation actions.\n   *\n   * @param connection\n   * @param body Filtering and pagination options for list retrieval of posts.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardPost.IRequest,\n  ): Promise<IPageIDiscussionboardPost.ISummary> {\n    body;\n    return typia.random<IPageIDiscussionboardPost.ISummary>();\n  }\n\n  /**\n   * Get discussionboard_post details by ID, with all associated normalized\n   * references.\n   *\n   * Fetches the details of a specific discussion post from the\n   * discussionboard_post entity using its unique ID. The response includes\n   * the post metadata (title, body, timestamps), associated author/member\n   * profile, category, post status (deleted/active), and attaches as per\n   * normalization rules. Visibility is governed by role: general members\n   * cannot view moderated/deleted content; admin/moderator tokens enable\n   * complete access. Not-found errors are returned for invalid IDs or\n   * restricted access. This operation complements the list, create, update\n   * and moderation endpoints.\n   *\n   * @param connection\n   * @param id ID of the post to retrieve\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardPost> {\n    id;\n    return typia.random<IDiscussionboardPost>();\n  }\n\n  /**\n   * Update a discussionboard_post by ID, with authenticated/member/editor\n   * enforcement.\n   *\n   * Updates an existing post in the discussionboard_post entity, referenced\n   * by its unique ID path parameter. The operation supports only authorized\n   * updates—either by the original post author or by moderators/admins for\n   * moderation. The request body includes only those fields allowed for\n   * update as per the requirements analysis. Authorization checks ensure\n   * proper role-based access and enforce the correct update scope. Audit\n   * logging occurs for all operations, and error handling provides structured\n   * responses for invalid IDs, constraint violations, or insufficient\n   * permissions. This API supports post editing as described in platform\n   * features and moderation flows.\n   *\n   * @param connection\n   * @param id ID of the post to update\n   * @param body Fields to be updated in the post. Only updatable fields must\n   *   be supplied.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardPost.IUpdate,\n  ): Promise<IDiscussionboardPost> {\n    id;\n    body;\n    return typia.random<IDiscussionboardPost>();\n  }\n\n  /**\n   * Soft delete a discussionboard_post by ID (member/privileged roles).\n   *\n   * Deletes a discussion post from the discussionboard_post entity identified\n   * by its unique ID. The deletion is soft, flipping the deleted_at\n   * timestamp. Only allowed by (a) the original member author if post is not\n   * already deleted, (b) moderators for moderation, or (c) admins for\n   * compliance. Authorizations provide platform protection against non-owned\n   * or already-deleted posts. This operation is referenced in the\n   * requirements for content management, moderation, and audit. It is tightly\n   * integrated with downstream features such as post indexes and content\n   * analytics.\n   *\n   * @param connection\n   * @param id ID of the post to soft delete\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/postCategories/DiscussionboardPostcategoriesController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostCategory } from \"../../../api/structures/IDiscussionboardPostCategory\";\nimport { IPageIDiscussionboardPostCategory } from \"../../../api/structures/IPageIDiscussionboardPostCategory\";\n\n@Controller(\"/discussionboard/postCategories\")\nexport class DiscussionboardPostcategoriesController {\n  /**\n   * Create a new discussionboard_post_category (admin only).\n   *\n   * Enables platform admins to create a new discussionboard_post_category\n   * entity. Input validation ensures the category name is unique and the\n   * description field, if present, is properly formed. All operations are\n   * strictly permission-checked. Name-based uniqueness is validated prior to\n   * insertion; on conflict, an error is returned to the client. Audit logging\n   * captures all creations. On success, returns the normalized record,\n   * including generated unique ID. The endpoint is referenced in requirements\n   * for category taxonomy maintenance and administrative workflows.\n   *\n   * @param connection\n   * @param body Details for the new post category to create.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardPostCategory.ICreate,\n  ): Promise<IDiscussionboardPostCategory> {\n    body;\n    return typia.random<IDiscussionboardPostCategory>();\n  }\n\n  /**\n   * Retrieve a list of discussionboard_post_category entries with filtering\n   * and pagination (admin, public listing).\n   *\n   * Retrieves a list of discussionboard_post_category records from the\n   * discussionboard_post_category entity. Input via the request body enables\n   * filtering, searching, and pagination by name, description, and any other\n   * indexed fields. Admin role users can view and manage all entries, while\n   * member endpoints may support limited usage for category discovery.\n   * Pagination is strongly enforced via the schema, supporting UI collections\n   * and configuration panels. Errors are returned for invalid filter objects\n   * or excessive result/page sizes. This functionality is critical for\n   * category maintenance, filtering, and administration as outlined in the\n   * requirements.\n   *\n   * @param connection\n   * @param body Filtering and pagination info for post categories.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardPostCategory.IRequest,\n  ): Promise<IPageIDiscussionboardPostCategory> {\n    body;\n    return typia.random<IPageIDiscussionboardPostCategory>();\n  }\n\n  /**\n   * Get a single discussionboard_post_category by ID (admin).\n   *\n   * Retrieves a single discussionboard_post_category record by ID. Used by\n   * admins in category management, and by members for advanced\n   * filtering/context. Success responses contain all normalized category\n   * fields (name, description), with strict validation of the ID parameter.\n   * Permission denied or not-found errors apply for non-admin or invalid ID\n   * requests. The endpoint aligns with requirements for both platform\n   * configuration and discoverability by users.\n   *\n   * @param connection\n   * @param id ID of the post category to retrieve\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardPostCategory> {\n    id;\n    return typia.random<IDiscussionboardPostCategory>();\n  }\n\n  /**\n   * Update a discussionboard_post_category by ID (admin).\n   *\n   * Allows platform admins to update existing discussionboard_post_category\n   * entries by unique ID. Modification is strictly permission-checked for\n   * admin tokens. Supported fields in the request body include only those\n   * defined in requirements. Attempting to change a category to a duplicate\n   * name or providing invalid values returns an appropriate error. Audit\n   * logging ensures traceability of all configuration activity. Used in admin\n   * UIs for maintenance, per requirements.\n   *\n   * @param connection\n   * @param id ID of the post category to update\n   * @param body Fields to update on the category; only updatable fields\n   *   required.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardPostCategory.IUpdate,\n  ): Promise<IDiscussionboardPostCategory> {\n    id;\n    body;\n    return typia.random<IDiscussionboardPostCategory>();\n  }\n\n  /**\n   * Delete a discussionboard_post_category by ID (admin only,\n   * constraint-enforced).\n   *\n   * Deletes a post category record from the discussionboard_post_category\n   * entity using its unique ID. Strict business rules apply—categories\n   * assigned to existing posts cannot be deleted or must be handled\n   * gracefully depending on platform policy. Operation is strictly controlled\n   * for admin authority; all deletions are tracked in audit logs. If the\n   * category is referenced by any post, attempts to delete will fail and\n   * return an appropriate error. Errors also produced if category does not\n   * exist. This API is tied to admin workflows and platform taxonomy\n   * maintenance.\n   *\n   * @param connection\n   * @param id ID of the category to delete\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/postTags/DiscussionboardPosttagsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostTag } from \"../../../api/structures/IDiscussionboardPostTag\";\nimport { IPageIDiscussionboardPostTag } from \"../../../api/structures/IPageIDiscussionboardPostTag\";\nimport { IDeleteResponse } from \"../../../api/structures/IDeleteResponse\";\n\n@Controller(\"/discussionboard/postTags\")\nexport class DiscussionboardPosttagsController {\n  /**\n   * Create a new post tag (discussionboard_post_tag).\n   *\n   * This operation allows for the creation of a new post tag in the\n   * discussion board system. The 'discussionboard_post_tag' table maintains\n   * all available tags in an atomic, normalized form, used by posts to enable\n   * filtering and search by topic or attribute.\n   *\n   * The request body must include the desired tag name and optional metadata\n   * if supported. Input validation enforces name uniqueness and\n   * length/pattern requirements. Only admins (or specific roles) may invoke\n   * this endpoint.\n   *\n   * The endpoint will create the record, store audit/log entries as required,\n   * and return the full created tag entity or a reference to it. Errors can\n   * include duplicate name (409), input format error (400), or unauthorized\n   * access (403).\n   *\n   * @param connection\n   * @param body Data for creating a new post tag.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardPostTag.ICreate,\n  ): Promise<IDiscussionboardPostTag> {\n    body;\n    return typia.random<IDiscussionboardPostTag>();\n  }\n\n  /**\n   * Retrieve a list of discussionboard_post_tag entities with filtering and\n   * pagination (admin UI, taxonomy).\n   *\n   * Fetches a paged, filtered list of discussionboard_post_tag entities from\n   * the database. Request body carries pagination, search, filter, and\n   * sorting info, enabling advanced management of tag taxonomies. Name-based\n   * search and high-volume control are included for admin UIs. Strict\n   * validation limits excessive page sizes or bad filters. Visibility of tags\n   * by members is supported via separate endpoints where needed. Errors on\n   * invalid parameters return 400; all results maintain full normalization\n   * for downstream analytics or configuration flows. This endpoint is\n   * referenced in taxonomic/tag filter design, admin workflows, and content\n   * analytics requirements.\n   *\n   * @param connection\n   * @param body Filtering and pagination details for tag retrieval (admin).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardPostTag.IRequest,\n  ): Promise<IPageIDiscussionboardPostTag> {\n    body;\n    return typia.random<IPageIDiscussionboardPostTag>();\n  }\n\n  /**\n   * Get a specific post tag (discussionboard_post_tag) by ID.\n   *\n   * This operation fetches a single post tag by its unique ID from the\n   * discussion board. The 'discussionboard_post_tag' table is an atomic,\n   * normalized table storing only the tag identifier and name, ensuring\n   * efficient tag management and search. Security is managed at the API layer\n   * and typically only admins (or backend) can delete tags, but all\n   * authenticated users may read tags for filtering purposes.\n   *\n   * This operation will take as parameter the tag's ID (UUID) and returns the\n   * name and properties of the tag. The endpoint supports auditing—accesses\n   * may be logged for content analytics and security compliance. Input must\n   * be validated for correct UUID format. Error responses include tag not\n   * found (404) or invalid input (400).\n   *\n   * @param connection\n   * @param id The unique identifier (UUID) of the post tag to retrieve.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardPostTag> {\n    id;\n    return typia.random<IDiscussionboardPostTag>();\n  }\n\n  /**\n   * Update a specific post tag (discussionboard_post_tag) by ID.\n   *\n   * Update an existing post tag by its unique identifier. The\n   * 'discussionboard_post_tag' table maintains all tag metadata and is kept\n   * atomic and normalized to avoid duplication. Only specific users\n   * (typically admins) may modify tag data via this endpoint.\n   *\n   * The request must specify the tag ID in the URL and the new data in the\n   * request body (e.g., tag name). Validation enforces uniqueness and\n   * formatting. Mutation is audit-logged for compliance. Errors include tag\n   * not found (404), name conflict (409), or input error (400).\n   *\n   * @param connection\n   * @param id Unique identifier (UUID) of the tag to update.\n   * @param body Updated tag data.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardPostTag.IUpdate,\n  ): Promise<IDiscussionboardPostTag> {\n    id;\n    body;\n    return typia.random<IDiscussionboardPostTag>();\n  }\n\n  /**\n   * Delete a post tag (discussionboard_post_tag) by ID.\n   *\n   * Delete a post tag from the system by its UUID. The\n   * 'discussionboard_post_tag' table holds all available tags in a normalized\n   * manner. This endpoint is protected and generally only admins can delete\n   * tags, especially since tags may be referenced by posts.\n   *\n   * Tag deletion initiates audit logging and ensures referential integrity\n   * (cannot delete if referenced, or cascade if supported). Errors include\n   * not found (404), invalid input (400), or constraint violation (409/423).\n   *\n   * @param connection\n   * @param id The UUID of the tag to remove.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDeleteResponse> {\n    id;\n    return typia.random<IDeleteResponse>();\n  }\n}\n",
      "src/controllers/discussionboard/postAttachments/DiscussionboardPostattachmentsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostAttachment } from \"../../../api/structures/IDiscussionboardPostAttachment\";\nimport { IPageIDiscussionboardPostAttachment } from \"../../../api/structures/IPageIDiscussionboardPostAttachment\";\nimport { IDeleteResponse } from \"../../../api/structures/IDeleteResponse\";\n\n@Controller(\"/discussionboard/postAttachments\")\nexport class DiscussionboardPostattachmentsController {\n  /**\n   * Create a new post attachment (discussionboard_post_attachment).\n   *\n   * This adds a new post attachment record, corresponding to an uploaded\n   * file/image. The request body must include post ID, file URL, file type,\n   * and upload metadata as per 'discussionboard_post_attachment' schema. The\n   * endpoint validates permissions, uploads, file type, and size constraints\n   * at API/business logic layer.\n   *\n   * On success, a new attachment record is added and full details are\n   * returned. Audit logging is performed (especially for user uploads) for\n   * moderation traceability. Errors: input format error (400), file rejected\n   * (415/422), unauthorized (403), or post not found (404).\n   *\n   * @param connection\n   * @param body Attachment creation info.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardPostAttachment.ICreate,\n  ): Promise<IDiscussionboardPostAttachment> {\n    body;\n    return typia.random<IDiscussionboardPostAttachment>();\n  }\n\n  /**\n   * Search & list post attachments (discussionboard_post_attachment).\n   *\n   * This operation lists and filters all post attachments in the system. The\n   * 'discussionboard_post_attachment' table maintains atomic metadata for\n   * each file attached to a post (e.g., images, documents), allowing users to\n   * search by filename, type, post ID, or upload time. This API supports\n   * paging, searching, and sorting.\n   *\n   * Only authorized users may access attachment info, which is useful for\n   * moderation, admin tools, or user viewing. Input can specify query\n   * parameters such as postId, type, or date ranges. Response includes paged\n   * result set with metadata, total count, and files info. Validation ensures\n   * only supported query fields are accepted. Errors include unauthorized\n   * (403), input error (400), or internal error (500).\n   *\n   * @param connection\n   * @param body Attachment search and pagination filters.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardPostAttachment.IRequest,\n  ): Promise<IPageIDiscussionboardPostAttachment> {\n    body;\n    return typia.random<IPageIDiscussionboardPostAttachment>();\n  }\n\n  /**\n   * Get a specific post attachment (discussionboard_post_attachment) by ID.\n   *\n   * Get the details for a specific post attachment by UUID. The\n   * 'discussionboard_post_attachment' table stores atomic data linking file\n   * uploads to posts, supporting retrieval for user download, preview, or\n   * moderation.\n   *\n   * Users must provide the attachment's UUID in the URL. Access control may\n   * restrict by user/post or role. The response includes file URL, type, and\n   * metadata. Errors: not found (404), invalid id (400), or access denied\n   * (403).\n   *\n   * @param connection\n   * @param id Attachment's UUID.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardPostAttachment> {\n    id;\n    return typia.random<IDiscussionboardPostAttachment>();\n  }\n\n  /**\n   * Update a specific post attachment (discussionboard_post_attachment) by\n   * ID.\n   *\n   * Update the atomic metadata of a post attachment by providing its UUID and\n   * the updated fields. The request body specifies which metadata to update\n   * (e.g., type). This endpoint allows editing/correction of uploaded file\n   * information (not the file content).\n   *\n   * It checks for existing attachment, validates the update fields (including\n   * ownership/security context), updates the metadata, and persists audit\n   * logs. Errors: not found (404), forbidden (403), input error (400), or\n   * locked (409).\n   *\n   * @param connection\n   * @param id The UUID of the attachment to update.\n   * @param body Fields to update for attachment metadata.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardPostAttachment.IUpdate,\n  ): Promise<IDiscussionboardPostAttachment> {\n    id;\n    body;\n    return typia.random<IDiscussionboardPostAttachment>();\n  }\n\n  /**\n   * Delete a post attachment (discussionboard_post_attachment) by ID.\n   *\n   * Delete a post attachment by UUID. The endpoint verifies the attachment\n   * exists, checks user permissions, and removes the attachment metadata from\n   * the database (and may trigger removal from file storage as per business\n   * logic).\n   *\n   * Operation is audit-logged for compliance (file deletion is irreversible\n   * except in special admin recovery). Errors: not found (404), forbidden\n   * (403), conflict (409), or invalid UUID (400).\n   *\n   * @param connection\n   * @param id Post attachment UUID to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDeleteResponse> {\n    id;\n    return typia.random<IDeleteResponse>();\n  }\n}\n",
      "src/controllers/discussionboard/comments/DiscussionboardCommentsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardComments } from \"../../../api/structures/IDiscussionboardComments\";\nimport { IPageIDiscussionboardComments } from \"../../../api/structures/IPageIDiscussionboardComments\";\nimport { IDiscussionboardComment } from \"../../../api/structures/IDiscussionboardComment\";\n\n@Controller(\"/discussionboard/comments\")\nexport class DiscussionboardCommentsController {\n  /**\n   * Create a new comment (discussionboard_comments).\n   *\n   * This operation enables authenticated users to add comments to posts or as\n   * replies in the system. The 'discussionboard_comments' table represents\n   * each atomic comment, supporting hierarchical threading by parent comment\n   * ID and audit logging for content moderation.\n   *\n   * The request body includes the owning post's UUID, parent comment UUID if\n   * a reply, content string, and user context (inferred from session). Input\n   * is validated for text length, nesting rules, and POST/author/parent\n   * relationship integrity. On success, the newly created comment record is\n   * returned. Errors: post or parent not found (404), input invalid (400),\n   * unauthorized (403), or locked (409).\n   *\n   * @param connection\n   * @param body All info required to insert a new comment.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardComments.ICreate,\n  ): Promise<IDiscussionboardComments> {\n    body;\n    return typia.random<IDiscussionboardComments>();\n  }\n\n  /**\n   * Search and list comments (discussionboard_comments) with filter and\n   * paging.\n   *\n   * Search and list all comments with flexible filters—by post, author,\n   * parent comment (for threading/nesting), and deletion status. Operates on\n   * the 'discussionboard_comments' table, which normalizes all comments\n   * irrespective of depth or content length.\n   *\n   * Request body defines flexible filter set (UUIDs, text, date ranges, flags\n   * for edits/deletes). Supports pagination, sorting, and text search. Output\n   * is a paginated list of comments plus total counts. Only authorized users\n   * may access, and access is logged for moderation/audit. Errors: input\n   * error (400), forbidden (403), or internal (500).\n   *\n   * @param connection\n   * @param body Comment search/filter definition and pagination info.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardComments.IRequest,\n  ): Promise<IPageIDiscussionboardComments> {\n    body;\n    return typia.random<IPageIDiscussionboardComments>();\n  }\n\n  /**\n   * Get a specific comment (discussionboard_comments) by ID.\n   *\n   * Retrieves one comment by ID—the 'discussionboard_comments' table stores\n   * content, author, post relation, edit status, and visibility flags. The\n   * endpoint validates that the comment exists (and is visible to the caller\n   * if not admin/mod), and returns its atomic data.\n   *\n   * Audit logging and permission checks apply. If found and authorized, full\n   * comment metadata is returned. Errors: comment not found (404), forbidden\n   * (403), or input error (400).\n   *\n   * @param connection\n   * @param id UUID of the comment to fetch.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardComments> {\n    id;\n    return typia.random<IDiscussionboardComments>();\n  }\n\n  /**\n   * Update an existing comment (discussionboard_comments table).\n   *\n   * This operation updates the content of a specific comment in the\n   * discussion board. The Prisma schema 'discussionboard_comments' enforces\n   * that each comment is uniquely identified (id), and associates it with a\n   * post (post_id), an author (author_id), and optionally a parent comment\n   * (for threading). Only the user who authored the comment, or a user with\n   * moderator/admin privileges, can perform updates. The operation will\n   * update the 'content', set 'is_edited' to true, and update the\n   * 'updated_at' timestamp. If the user is a moderator or admin, an audit log\n   * or moderation record should be issued. Proper validation is required: if\n   * the comment doesn't exist, is already deleted, or the user isn't\n   * authorized, an error is returned. After updating, the operation returns\n   * the full updated comment entity including all fields necessary for\n   * display and auditing.\n   *\n   * @param connection\n   * @param id Unique identifier of the comment to update.\n   * @param body Updated content and optional edit info for the comment.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardComment.IUpdate,\n  ): Promise<IDiscussionboardComment> {\n    id;\n    body;\n    return typia.random<IDiscussionboardComment>();\n  }\n\n  /**\n   * Soft-delete (mark as deleted) a comment (discussionboard_comments table).\n   *\n   * Soft-deletes the specified comment using its unique identifier, as\n   * defined in the 'discussionboard_comments' table. This operation marks the\n   * comment as deleted by updating the 'is_deleted' flag and the timestamps,\n   * rather than removing it from the database. Only the comment author,\n   * moderators, or admins are allowed to perform this action. The deletion is\n   * logged for moderation and audit trail. The response includes the updated\n   * comment entity, reflecting the new deletion status and updated audit\n   * fields. If the comment is already deleted or not found, or the user lacks\n   * sufficient privileges, returns an error.\n   *\n   * @param connection\n   * @param id Unique identifier of the comment to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardComment> {\n    id;\n    return typia.random<IDiscussionboardComment>();\n  }\n}\n",
      "src/controllers/discussionboard/likes/DiscussionboardLikesController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardLike } from \"../../../api/structures/IDiscussionboardLike\";\nimport { IPageIDiscussionboardLike } from \"../../../api/structures/IPageIDiscussionboardLike\";\n\n@Controller(\"/discussionboard/likes\")\nexport class DiscussionboardLikesController {\n  /**\n   * Create a new like event (discussionboard_likes table).\n   *\n   * Creates a new like entry in the 'discussionboard_likes' table, pointing\n   * to a specific post or comment and registering a user's engagement. The\n   * request includes details such as which content is liked (post or comment\n   * ID), and the system enforces that each user can only like each item once\n   * and the content must exist and not be deleted. The new like is recorded\n   * along with metadata such as the acting user and timestamp. The response\n   * contains the complete like record. If a like on the same item by this\n   * user already exists (and is not deleted), or if input references\n   * non-existent or deleted content, returns an error.\n   *\n   * @param connection\n   * @param body Payload for creating a like (includes user, post or comment\n   *   ID).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardLike.ICreate,\n  ): Promise<IDiscussionboardLike> {\n    body;\n    return typia.random<IDiscussionboardLike>();\n  }\n\n  /**\n   * List and search likes (discussionboard_likes table,\n   * paginated/filterable).\n   *\n   * Returns a paginated and filterable list of likes in the discussion board,\n   * based on criteria provided in the request body. The\n   * 'discussionboard_likes' table supports polymorphic likes for both posts\n   * and comments, recorded with timestamps and user references. Input allows\n   * filtering by user, target (post/comment), like status (active, deleted),\n   * and sorting/pagination controls. Used by admins, moderators for\n   * engagement analysis, or for displaying user activity feeds. Response\n   * includes array of like objects and pagination metadata. Proper\n   * permissions ensure that only authorized users (e.g., own likes for\n   * members, all likes for admin/moderator) can use expanded query options.\n   *\n   * @param connection\n   * @param body Filter, search, and pagination parameters for likes search.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardLike.IRequest,\n  ): Promise<IPageIDiscussionboardLike> {\n    body;\n    return typia.random<IPageIDiscussionboardLike>();\n  }\n\n  /**\n   * Get a specific like by ID (discussionboard_likes table).\n   *\n   * Returns the full details of a specific like by its unique identifier. The\n   * 'discussionboard_likes' table contains records of user likes for both\n   * posts and comments. This operation exposes all relevant attributes,\n   * including content type (post/comment), user identity, timestamp, and\n   * status. Used for audit trails and for displaying engagement details on\n   * user profiles or dashboards. Proper permission checks are required: users\n   * may retrieve their own like records, moderators/admins may retrieve any\n   * like. If the like is missing or permission is denied, returns an error.\n   *\n   * @param connection\n   * @param id Unique identifier of the like event.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardLike> {\n    id;\n    return typia.random<IDiscussionboardLike>();\n  }\n\n  /**\n   * Update a specific like (discussionboard_likes table).\n   *\n   * Updates an existing like event using its unique ID. The request body\n   * specifies which field(s) to update—likely either to redo a like (if\n   * previously soft-deleted), or to change the liked target if permitted.\n   * Handles input validation and permission (- only owners, admins, or\n   * moderators may update). All updates are logged. The response is the\n   * updated like record. Errors if the like does not exist, or updates are\n   * not allowed per business rules.\n   *\n   * @param connection\n   * @param id Unique identifier of the like event to update.\n   * @param body Payload for updating a like event.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardLike.IUpdate,\n  ): Promise<IDiscussionboardLike> {\n    id;\n    body;\n    return typia.random<IDiscussionboardLike>();\n  }\n\n  /**\n   * Soft-delete (unlike) a like on post or comment (discussionboard_likes\n   * table).\n   *\n   * Soft-deletes (unlikes) a like event for a post or comment, based on its\n   * unique identifier (id). The operation sets the 'deleted_at' timestamp,\n   * thus undoing the like while maintaining historical/audit records. Only\n   * the user who created the like or privileged users (admins/moderators) can\n   * perform the action. The endpoint returns the updated like entity after\n   * the soft-delete. If the like event does not exist, is already deleted, or\n   * the requester lacks permission, an error is returned.\n   *\n   * @param connection\n   * @param id Unique identifier of the like event to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardLike> {\n    id;\n    return typia.random<IDiscussionboardLike>();\n  }\n}\n",
      "src/controllers/discussionboard/reports/DiscussionboardReportsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReport } from \"../../../api/structures/IDiscussionboardReport\";\nimport { IPageIDiscussionboardReport } from \"../../../api/structures/IPageIDiscussionboardReport\";\n\n@Controller(\"/discussionboard/reports\")\nexport class DiscussionboardReportsController {\n  /**\n   * Create a new content report (discussionboard_reports table).\n   *\n   * Creates a new report for an abusive or spam content item—either a post or\n   * comment—by inserting into the 'discussionboard_reports' table. The input\n   * identifies the content (post or comment ID), type of violation, and\n   * details, associated with the reporting user's account. On success,\n   * returns the full created report record including references and audit\n   * fields. Errors for double-reporting by same user on a target, nonexistent\n   * or already moderated/deleted content, or if input is incomplete. All\n   * actions are auditable; appropriate notifications generated for moderator\n   * queue.\n   *\n   * @param connection\n   * @param body Input data for report creation (target ref, reason, details).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardReport.ICreate,\n  ): Promise<IDiscussionboardReport> {\n    body;\n    return typia.random<IDiscussionboardReport>();\n  }\n\n  /**\n   * List/Search reported content (discussionboard_reports table,\n   * paginated/filterable).\n   *\n   * Returns a paginated and filterable list of reported content in the\n   * discussion board. The backend 'discussionboard_reports' records all\n   * content reports, referencing either posts or comments, and includes who\n   * reported, report reason/code, timestamps, and status. Admins/moderators\n   * can filter by all criteria; regular members are restricted to their own\n   * reports. The response provides an array of report records and pagination\n   * metadata. Input allows precise control over sorting, filtering, and\n   * paging scope. Use cases: moderator queue, abuse/spam trends, user report\n   * histories.\n   *\n   * @param connection\n   * @param body Request parameters for filtering/searching reported content.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardReport.IRequest,\n  ): Promise<IPageIDiscussionboardReport> {\n    body;\n    return typia.random<IPageIDiscussionboardReport>();\n  }\n\n  /**\n   * Get a specific report by ID (discussionboard_reports table).\n   *\n   * Returns the full data for a report, identified by its unique ID. The\n   * backend table 'discussionboard_reports' provides structured data for\n   * compliance, moderation workflow, and user notification. The result\n   * includes content references (post or comment), reporter, reason codes,\n   * creation and soft-delete timestamps. Access control ensures only those\n   * with legitimate need have access (reporter, moderator, or admin). Errors\n   * on missing reports or insufficient permissions.\n   *\n   * @param connection\n   * @param id Unique identifier of the content report to retrieve.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardReport> {\n    id;\n    return typia.random<IDiscussionboardReport>();\n  }\n\n  /**\n   * Update a content report by ID (discussionboard_reports table).\n   *\n   * Updates the specified content report by ID in the\n   * 'discussionboard_reports' table. Input may contain changes to fields such\n   * as reason code or details. Permissions depend on status: users may update\n   * their own unreveiwed reports, admins can update any, and moderators\n   * update as permitted by workflow policy. All updates reflect instantly in\n   * audit logs. The operation returns the full updated report object. Errors\n   * for missing report, insufficient permission, or if the report has been\n   * reviewed/locked against change.\n   *\n   * @param connection\n   * @param id Unique ID of the content report to update.\n   * @param body Update payload for a content report.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardReport.IUpdate,\n  ): Promise<IDiscussionboardReport> {\n    id;\n    body;\n    return typia.random<IDiscussionboardReport>();\n  }\n\n  /**\n   * Soft-delete (withdraw) a content report (discussionboard_reports table).\n   *\n   * Withdraws or soft-deletes a specifically identified content report, by\n   * updating its 'deleted_at' field in the 'discussionboard_reports' table.\n   * Only the original reporter (before moderation) or privileged users\n   * (moderator, admin) may perform this operation. On success, returns the\n   * updated report record with deletion timestamp. Errors arise if the report\n   * does not exist, was already deleted, has been reviewed/locked, or the\n   * user lacks sufficient privileges. All deletions are audit logged for\n   * compliance.\n   *\n   * @param connection\n   * @param id Unique identifier of the report to withdraw soft-delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardReport> {\n    id;\n    return typia.random<IDiscussionboardReport>();\n  }\n}\n",
      "src/controllers/discussionboard/moderationActions/DiscussionboardModerationactionsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerationAction } from \"../../../api/structures/IDiscussionboardModerationAction\";\nimport { IPageIDiscussionboardModerationAction } from \"../../../api/structures/IPageIDiscussionboardModerationAction\";\n\n@Controller(\"/discussionboard/moderationActions\")\nexport class DiscussionboardModerationactionsController {\n  /**\n   * Create a new moderation action (discussionboard_moderation_action).\n   *\n   * This endpoint enables the creation and logging of a new moderation action\n   * entry, recording all relevant metadata such as the acting moderator/admin\n   * (actor), target user, affected post/comment (if any), action type,\n   * reason, and timestamp. Input validation enforces all required foreign\n   * keys, action classification strings, and timestamp format. The endpoint\n   * enforces role-based permissions to prevent member users from creating\n   * moderation actions. Successful creation returns the new record's ID and\n   * core data. This operation is closely related to audit logging and user\n   * suspension flows; downstream systems may subscribe to these events for\n   * notification or compliance workflows. Error handling includes validation\n   * failures, permission denied, or integrity constraint issues.\n   *\n   * @param connection\n   * @param body All fields required for a new moderation action, including\n   *   actor, target, type, reason, references, and timestamp.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardModerationAction.ICreate,\n  ): Promise<IDiscussionboardModerationAction> {\n    body;\n    return typia.random<IDiscussionboardModerationAction>();\n  }\n\n  /**\n   * Retrieve a list of moderation actions (discussionboard_moderation_action)\n   * with searching, filtering, and pagination.\n   *\n   * This operation enables authorized users (such as moderators and admins)\n   * to retrieve a filtered, paginated list of all moderation actions taken\n   * across the platform. The endpoint supports searching by moderator/admin\n   * (actor), target user, post or comment, action type (e.g. delete_post,\n   * hide_comment, warning), date range, or specific keywords in reason/notes\n   * fields. The request enforces role-based authorization. Results include\n   * actor/target user information, content targeted (if any), action type and\n   * reason, and timestamp of the action. Pagination, sorting (by created_at,\n   * action_type, actor), and customizable filters are supported for efficient\n   * review. Only privileged users can use this endpoint; regular members do\n   * not have access. Error handling includes invalid query validation,\n   * insufficient permissions, and server issues. This operation is typically\n   * used in conjunction with detailed moderation action or audit endpoints.\n   *\n   * @param connection\n   * @param body List/search/pagination parameters for moderation actions\n   *   lookup request.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardModerationAction.IRequest,\n  ): Promise<IPageIDiscussionboardModerationAction> {\n    body;\n    return typia.random<IPageIDiscussionboardModerationAction>();\n  }\n\n  /**\n   * Look up a single moderation action (discussionboard_moderation_action) by\n   * its ID.\n   *\n   * This operation allows authorized moderators or admins to retrieve all\n   * available information about a particular moderation action, including\n   * actor, target user, affected post or comment, action type, rationale, and\n   * timestamp. Useful for moderation history review, escalation, appeals, or\n   * audit purposes. Only the action's unique ID is required as a path\n   * parameter. Ensures permissions restrict access to privileged users;\n   * regular users cannot access this data. Error responses include not-found,\n   * insufficient-permission, and server issues.\n   *\n   * @param connection\n   * @param id Unique identifier of the moderation action to retrieve.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardModerationAction> {\n    id;\n    return typia.random<IDiscussionboardModerationAction>();\n  }\n\n  /**\n   * Update an existing moderation action (discussionboard_moderation_action)\n   * by ID.\n   *\n   * This endpoint allows authorized moderators/admins to update details of a\n   * previously created moderation action, such as editing the reason,\n   * additional notes, or fixing metadata errors. All updates are traced for\n   * audit. Only specific fields are permitted to be updated (e.g.,\n   * action_type, reason, references); actor or target user cannot typically\n   * be changed unless correcting mistakes with admin-level privileges. The\n   * request requires the moderation action's ID in the route and the update\n   * data in the request body. Returns the updated record on success.\n   * Permission and data validation errors are handled explicitly. Related\n   * endpoints include moderation action detail and audit log write.\n   *\n   * @param connection\n   * @param id Unique identifier of the moderation action to update.\n   * @param body Fields to update in the moderation action. Immutable fields\n   *   must be excluded or ignored.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardModerationAction.IUpdate,\n  ): Promise<IDiscussionboardModerationAction> {\n    id;\n    body;\n    return typia.random<IDiscussionboardModerationAction>();\n  }\n\n  /**\n   * Delete a moderation action (discussionboard_moderation_action) by ID.\n   *\n   * This operation allows authorized moderators or admins to delete\n   * (typically soft-delete for audit compliance) a specific moderation action\n   * from the system, as identified by its unique ID. This action is logged\n   * for audit. The user must provide the moderation action ID as a path\n   * parameter. Deletions are typically restricted by business rules, e.g.,\n   * only actions without downstream dependency or when performed in error.\n   * Error scenarios include not found, insufficient permissions, or cascading\n   * cleanup constraints. Closely related to moderation and audit endpoints\n   * for transparency.\n   *\n   * @param connection\n   * @param id Unique identifier of the moderation action to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardModerationAction> {\n    id;\n    return typia.random<IDiscussionboardModerationAction>();\n  }\n}\n",
      "src/controllers/discussionboard/reportReviews/DiscussionboardReportreviewsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReportReview } from \"../../../api/structures/IDiscussionboardReportReview\";\nimport { IPageIDiscussionboardReportReview } from \"../../../api/structures/IPageIDiscussionboardReportReview\";\n\n@Controller(\"/discussionboard/reportReviews\")\nexport class DiscussionboardReportreviewsController {\n  /**\n   * Create a new report review (discussionboard_report_review).\n   *\n   * This operation enables a moderator or admin to record the review of a\n   * user-submitted abuse/spam report, capturing the reviewed report ID,\n   * reviewer user ID, review status, linked post or comment, and optional\n   * notes/comments. Validation ensures required relations and correct status\n   * codes (e.g. resolved/rejected). Used in moderation workflows and\n   * reporting dashboards. Permissions enforce only authorized reviewers.\n   * Error handling includes invalid input, duplicate reviews, or insufficient\n   * permission.\n   *\n   * @param connection\n   * @param body Report review creation info, specifying the reviewed report,\n   *   reviewer, decision/status, notes, etc.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardReportReview.ICreate,\n  ): Promise<IDiscussionboardReportReview> {\n    body;\n    return typia.random<IDiscussionboardReportReview>();\n  }\n\n  /**\n   * Search and paginate through report review logs\n   * (discussionboard_report_review).\n   *\n   * This endpoint enables authorized moderators and administrators to\n   * retrieve a list of report review records, supporting search and filters\n   * by reviewer ID, report status (resolved/rejected/pending), associated\n   * post/comment, review timestamps, and other optional metadata. Pagination\n   * and sorting are built-in for efficient workflows. Permission checks\n   * ensure members cannot access this review data. Used for moderation\n   * oversight, audit, and review dashboard UI. Partial or fuzzy matching\n   * supported on reviewer comments or notes. Errors include invalid queries,\n   * unauthorized access, or server issues.\n   *\n   * @param connection\n   * @param body Request data for searching, filtering, and paginating through\n   *   report reviews.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardReportReview.IRequest,\n  ): Promise<IPageIDiscussionboardReportReview> {\n    body;\n    return typia.random<IPageIDiscussionboardReportReview>();\n  }\n\n  /**\n   * Retrieve a single report review (discussionboard_report_review) by ID.\n   *\n   * This operation allows privileged users (moderators, admins) to get a full\n   * record of a report review, identified by its unique ID. Response includes\n   * reviewing moderator/admin, target entities (report, post, comment),\n   * review status, notes, and timestamp. Used for litigation, appeals, and\n   * audit trails. The only required input is the review's unique ID. Only\n   * privileged users are authorized. Errors include record-not-found and\n   * insufficient-permission.\n   *\n   * @param connection\n   * @param id Unique report review ID to look up.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardReportReview> {\n    id;\n    return typia.random<IDiscussionboardReportReview>();\n  }\n\n  /**\n   * Update an existing report review (discussionboard_report_review) by ID.\n   *\n   * This operation enables updating selected fields of a report review\n   * record, such as modifying review status, adding notes, or adjusting\n   * linked content/post references. Update traceability is enforced via\n   * audit. Only moderators/admins are authorized. Record is identified by its\n   * unique ID; updated data is supplied in the request body. Returns updated\n   * record or error for validation/permission issues. Typically linked with\n   * moderation dashboards and audit log flows.\n   *\n   * @param connection\n   * @param id Unique identifier of the report review to update.\n   * @param body Fields to update for the report review record.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardReportReview.IUpdate,\n  ): Promise<IDiscussionboardReportReview> {\n    id;\n    body;\n    return typia.random<IDiscussionboardReportReview>();\n  }\n\n  /**\n   * Delete a report review (discussionboard_report_review) by ID.\n   *\n   * Authorized moderators and admins can remove (soft-delete) a report\n   * review, identified by its unique ID. Deletion is audited and subject to\n   * business logic (e.g., only allowable in specific states). Record is not\n   * physically deleted for traceability. Path parameter is the review ID.\n   * Related to moderation and audit data flows. Errors include unauthorized\n   * access, record not found, or business rule constraint violations.\n   *\n   * @param connection\n   * @param id Unique identifier of the report review to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardReportReview> {\n    id;\n    return typia.random<IDiscussionboardReportReview>();\n  }\n}\n",
      "src/controllers/discussionboard/warnings/DiscussionboardWarningsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardWarning } from \"../../../api/structures/IDiscussionboardWarning\";\nimport { IPageIDiscussionboardWarning } from \"../../../api/structures/IPageIDiscussionboardWarning\";\n\n@Controller(\"/discussionboard/warnings\")\nexport class DiscussionboardWarningsController {\n  /**\n   * Create a new warning in discussionboard_warning table.\n   *\n   * This POST endpoint adds a new warning to the discussionboard_warning\n   * table. The warning includes information about who issued it, the user\n   * receiving the warning, and can relate to specific posts or comments for\n   * context. The warning_type categorizes the infraction (such as 'abuse',\n   * 'spam', etc.) and the message provides a human-readable rationale for the\n   * warning. Moderators and admins are able to use this endpoint as part of\n   * their toolkit for progressive disciplinary actions. Soft deletion or\n   * edits to warnings are not allowed here—warnings are permanent for\n   * compliance and auditability. This API integrates closely with audit logs\n   * to ensure transparency and is expected to trigger notifications to the\n   * affected user. Typical use involves user-facing moderation UIs. Warnings\n   * reference the discussionboard_user, discussionboard_post, and\n   * discussionboard_comments tables, and must be used in compliance with the\n   * platform's moderation policies.\n   *\n   * @param connection\n   * @param body Information about the new warning to issue.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardWarning.ICreate,\n  ): Promise<IDiscussionboardWarning> {\n    body;\n    return typia.random<IDiscussionboardWarning>();\n  }\n\n  /**\n   * Search, filter, and page through warnings issued\n   * (discussionboard_warning).\n   *\n   * This endpoint provides moderators and admins with access to lists of\n   * warnings issued on the platform, supporting filters such as issued_by,\n   * issued_to, warning_type, related post/comment, and date ranges.\n   * Pagination, sorting, and keyword search enable efficient review. Only\n   * privileged users may access this endpoint. Used for audit, user appeal,\n   * or compliance tracing. Errors include invalid queries, insufficient\n   * permissions, and server issues.\n   *\n   * @param connection\n   * @param body Filtering and search options for warnings list request.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardWarning.IRequest,\n  ): Promise<IPageIDiscussionboardWarning> {\n    body;\n    return typia.random<IPageIDiscussionboardWarning>();\n  }\n\n  /**\n   * Get details for a specific warning (discussionboard_warning) by ID.\n   *\n   * Privileged users (moderators, admins) can retrieve information for a\n   * single warning record, including issuer, recipient, rationale, type,\n   * related post/comment, and timestamp. Used in user appeals, moderation\n   * dashboards, and audit reviews. Input is only the warning's unique ID as a\n   * path parameter. Return includes all normalized warning data. Access is\n   * denied to non-privileged users or if the record does not exist. Typical\n   * errors: not found, unauthorized, server failures.\n   *\n   * @param connection\n   * @param id Unique warning ID to retrieve.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardWarning> {\n    id;\n    return typia.random<IDiscussionboardWarning>();\n  }\n\n  /**\n   * Edit a warning in discussionboard_warning table.\n   *\n   * This PUT endpoint is used to edit an existing warning. The warning is\n   * uniquely identified by its id path parameter. Allowed edits typically\n   * include modifying the warning_type or message, possibly adjusting\n   * associated post/comment references. All such modifications are subject to\n   * audit by the discussionboard_audit_log. This operation restricts update\n   * permissions to the original issuer, moderator, or admin roles. Other\n   * fields (such as issued_by, issued_to, and issued_at) are immutable for\n   * audit purposes. Edits are designed for correction, not for hiding\n   * infraction history.\n   *\n   * @param connection\n   * @param id Unique identifier of the warning to update.\n   * @param body The updated data for the warning (modifying type, message, or\n   *   references).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardWarning.IUpdate,\n  ): Promise<IDiscussionboardWarning> {\n    id;\n    body;\n    return typia.random<IDiscussionboardWarning>();\n  }\n\n  /**\n   * Delete a warning from discussionboard_warning table.\n   *\n   * This DELETE endpoint removes a warning from the system, identified by its\n   * id. The operation can be either a hard or soft delete depending on system\n   * settings, but for most compliance/audit scenarios, soft deletes are\n   * preferred. Only moderation and admin roles can perform deletions. The\n   * system logs the deletion event, and may trigger a notification to the\n   * warning recipient.\n   *\n   * @param connection\n   * @param id Unique identifier of the warning to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/bans/DiscussionboardBansController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardBan } from \"../../../api/structures/IDiscussionboardBan\";\nimport { IPageIDiscussionboardBan } from \"../../../api/structures/IPageIDiscussionboardBan\";\n\n@Controller(\"/discussionboard/bans\")\nexport class DiscussionboardBansController {\n  /**\n   * Create a new ban record in discussionboard_ban table.\n   *\n   * This POST endpoint creates a ban record for a user, given required\n   * details like the banned user's id, the issuer, type (e.g.,\n   * mute/temp/perm), reason, and time periods. If the ban is related to a\n   * prior warning, the warning_id may be set. The system audits all ban\n   * actions and triggers notifications to the affected user. Logic will check\n   * and prevent overlapping active bans as per business rules. Used as the\n   * primary enforcement mechanism for moderation escalation beyond warnings.\n   *\n   * @param connection\n   * @param body Fields for new ban record (user, issuer, type, reason, and\n   *   expiry).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardBan.ICreate,\n  ): Promise<IDiscussionboardBan> {\n    body;\n    return typia.random<IDiscussionboardBan>();\n  }\n\n  /**\n   * Search/list bans from discussionboard_ban table (advanced query).\n   *\n   * This PATCH endpoint provides advanced ban listing and search\n   * capabilities, leveraging flexible request bodies for filtering by user,\n   * ban type, time range, status, or warning linkage. Results are paginated\n   * and can be sorted by relevant ban fields. Primarily accessed by admin and\n   * moderator UIs for audit, ban review, and compliance monitoring. Relies on\n   * the discussionboard_ban table and references users, warnings, and issuer\n   * relationships for joined queries. Support for fine-grained search\n   * eliminates the need for multiple simple GET endpoints, centralizing\n   * administrative search logic for bans.\n   *\n   * @param connection\n   * @param body Filter and pagination settings for searching bans.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IPageIDiscussionboardBan.IRequest,\n  ): Promise<IPageIDiscussionboardBan> {\n    body;\n    return typia.random<IPageIDiscussionboardBan>();\n  }\n\n  /**\n   * Get a specific ban entry from discussionboard_ban table.\n   *\n   * This GET endpoint returns a detailed ban record from the\n   * discussionboard_ban table by id. Exposes all relevant details for\n   * moderation/ban audits: involved users, ban timing (issued/expires),\n   * rationale, and warning links. Only accessible by moderator and admin\n   * roles. The endpoint underpins UI flows for inspecting specific bans,\n   * appeals processing, or reviewing ban histories per user.\n   *\n   * @param connection\n   * @param id Unique identifier of the ban record to fetch.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardBan> {\n    id;\n    return typia.random<IDiscussionboardBan>();\n  }\n\n  /**\n   * Update a ban record in discussionboard_ban table.\n   *\n   * This PUT endpoint edits an existing ban record - for instance, to adjust\n   * the expiry or type of an active ban due to appeals or changing\n   * circumstances. Allowed for moderators and admins only. Requires a full\n   * update payload; certain fields cannot be changed (banned_by_id,\n   * issued_at). Edits are always logged in audit trails. The endpoint is\n   * essential for ban workflow flexibility and error correction.\n   *\n   * @param connection\n   * @param id Identifier of the ban record to update.\n   * @param body Payload of ban updates: expiry, type, reason, related\n   *   warning.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardBan.IUpdate,\n  ): Promise<IDiscussionboardBan> {\n    id;\n    body;\n    return typia.random<IDiscussionboardBan>();\n  }\n\n  /**\n   * Delete a ban record from discussionboard_ban table.\n   *\n   * This DELETE endpoint removes a ban record by id—serving as the reversal\n   * of a mute/ban or to support ban record cleanup. Only accessible to\n   * moderator/admin roles, who must provide a valid reason in audit logs. The\n   * deleted ban entry may be retained for audit history depending on system\n   * configuration. Used when restoring user access, correcting moderation\n   * mistakes, or processing appeal outcomes.\n   *\n   * @param connection\n   * @param id Unique identifier of the ban to delete (unban).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/notifications/DiscussionboardNotificationsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardNotification } from \"../../../api/structures/IDiscussionboardNotification\";\nimport { IPageIDiscussionboardNotification } from \"../../../api/structures/IPageIDiscussionboardNotification\";\n\n@Controller(\"/discussionboard/notifications\")\nexport class DiscussionboardNotificationsController {\n  /**\n   * Create a new notification record in discussionboard_notification table.\n   *\n   * This POST endpoint adds a notification to the system for a specific user,\n   * with all associated context (recipient, event type, related entities).\n   * These records are normally generated by system back-end services in\n   * response to valid actions (reply, like, moderation, system message), not\n   * by end users. Admins or system controllers may use it for generating\n   * announcements or backfilling notification flows. Only system-valid actors\n   * can invoke this contract.\n   *\n   * @param connection\n   * @param body All notification data (recipient, type, message, related\n   *   event context).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardNotification.ICreate,\n  ): Promise<IDiscussionboardNotification> {\n    body;\n    return typia.random<IDiscussionboardNotification>();\n  }\n\n  /**\n   * List/search notifications from discussionboard_notification table\n   * (advanced query).\n   *\n   * This PATCH endpoint queries notifications using complex filters (user,\n   * type, status, date, read/unread, etc.), replacing simpler GET list\n   * methods with a flexible search contract. Results are paginated and can be\n   * sorted by recency or priority. Mainly accessed by users in notification\n   * feed UIs, as well as by admins auditing notifications. The\n   * discussionboard_notification table is referenced for all entries, joined\n   * as needed to users, posts, and comments. This contract allows both\n   * self-service notification feeds as well as administrative history\n   * reviews. Security/authorization ensures users only see their own\n   * notifications unless elevated roles.\n   *\n   * @param connection\n   * @param body Filter and pagination data for notifications search.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IPageIDiscussionboardNotification.IRequest,\n  ): Promise<IPageIDiscussionboardNotification> {\n    body;\n    return typia.random<IPageIDiscussionboardNotification>();\n  }\n\n  /**\n   * Get a specific notification by id from discussionboard_notification\n   * table.\n   *\n   * This GET endpoint fetches a notification record by id for detailed\n   * display in the notification center or audit UI. The notification includes\n   * message content, related post/comment, actor, and event type. Only the\n   * recipient user, or admins/moderators for audit, are authorized. This\n   * ensures members have access to their own system notifications, while\n   * elevated roles may view notification flows for compliance/audit.\n   *\n   * @param connection\n   * @param id Unique identifier of the notification to retrieve.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardNotification> {\n    id;\n    return typia.random<IDiscussionboardNotification>();\n  }\n\n  /**\n   * Update a notification record in discussionboard_notification table (e.g.\n   * mark as read).\n   *\n   * This PUT endpoint modifies an existing notification, such as marking it\n   * as read, altering event type, or updating message text. The target is\n   * identified by the id. Typical use cases include marking notifications as\n   * read by their recipient or correcting data via admin tools. These changes\n   * must be tracked in the audit log, especially for moderator/admin updates.\n   * No key/PK fields may be changed. Proper authorization ensures members can\n   * only update their own notification status, while elevated roles may\n   * correct any notification's details.\n   *\n   * @param connection\n   * @param id Unique identifier of the notification to update.\n   * @param body Notification updates (e.g. mark as read, update message,\n   *   adjust event data).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardNotification.IUpdate,\n  ): Promise<IDiscussionboardNotification> {\n    id;\n    body;\n    return typia.random<IDiscussionboardNotification>();\n  }\n\n  /**\n   * Delete a notification by its unique ID from the\n   * discussionboard_notification table.\n   *\n   * This API operation allows an authenticated user to delete (soft-delete) a\n   * notification referenced by its unique identifier. The operation ensures\n   * that users can only delete notifications specifically addressed to them\n   * by verifying ownership against the discussionboard_notification table.\n   * The requested notification is marked as deleted without physical removal,\n   * supporting audit and compliance requirements defined in the system's\n   * policies. This operation is closely tied to the notification preferences\n   * and user activity auditing features and is restricted to the recipient of\n   * the notification (members, moderators, or admins). Administrators may\n   * audit all deletion actions using the audit log. If the notification has\n   * already been deleted or does not exist, the response will indicate the\n   * appropriate error. Related endpoints: PATCH\n   * /discussionboard/notifications to list notifications, and GET\n   * /discussionboard/notifications/{id} to view details before deletion.\n   *\n   * @param connection\n   * @param id Unique identifier for the notification to be deleted.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/notificationPreferences/DiscussionboardNotificationpreferencesController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardNotificationPreference } from \"../../../api/structures/IDiscussionboardNotificationPreference\";\nimport { IPageIDiscussionboardNotificationPreference } from \"../../../api/structures/IPageIDiscussionboardNotificationPreference\";\n\n@Controller(\"/discussionboard/notificationPreferences\")\nexport class DiscussionboardNotificationpreferencesController {\n  /**\n   * Create notification preferences for a user in\n   * discussionboard_notification_preference.\n   *\n   * This API operation creates a new notification preference record for an\n   * authenticated user by inserting a new row into the\n   * discussionboard_notification_preference table. Only one entry can exist\n   * per user. The operation validates that the user does not already have a\n   * preference record; if it does, the proper error is thrown. The returned\n   * object includes all fields relevant to notification preferences and the\n   * associated user ID. Used for onboarding or resetting preferences to a\n   * default state. Related endpoints include PATCH for searching and GET for\n   * retrieving an existing record.\n   *\n   * @param connection\n   * @param body Initial notification preference settings to be created.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardNotificationPreference.ICreate,\n  ): Promise<IDiscussionboardNotificationPreference> {\n    body;\n    return typia.random<IDiscussionboardNotificationPreference>();\n  }\n\n  /**\n   * List notification preferences from the\n   * discussionboard_notification_preference table, with filtering and\n   * pagination.\n   *\n   * This endpoint retrieves notification preference settings from the\n   * discussionboard_notification_preference table, with support for advanced\n   * searching and pagination. Users can fetch their own notification\n   * preferences (for profile management), while administrators may filter\n   * across multiple users to audit or configure preferences in bulk. The\n   * operation accommodates large datasets by including pagination parameters.\n   * Fields like notify_reply, notify_like, notify_moderator_action, and\n   * notify_system_message can be filtered or searched as needed for\n   * administrative oversight. Only the authenticated user or admins can\n   * access these preferences, with results limited appropriately.\n   *\n   * @param connection\n   * @param body Parameters for searching/filtering notification preferences\n   *   (pagination, filters, sort).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardNotificationPreference.IRequest,\n  ): Promise<IPageIDiscussionboardNotificationPreference> {\n    body;\n    return typia.random<IPageIDiscussionboardNotificationPreference>();\n  }\n\n  /**\n   * Get notification preference detail by ID from the\n   * discussionboard_notification_preference table.\n   *\n   * This endpoint returns the notification preference details for the record\n   * identified by the unique ID from the\n   * discussionboard_notification_preference table. The operation is\n   * restricted to the user who owns the preferences or an administrator\n   * managing users. Data returned includes settings for reply, likes,\n   * moderator actions, and system messages notification toggles. Related\n   * APIs: PATCH for listing/filtering all preferences, PUT for updating\n   * preferences, POST for creating preferences.\n   *\n   * @param connection\n   * @param id Unique identifier of the notification preference record.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardNotificationPreference> {\n    id;\n    return typia.random<IDiscussionboardNotificationPreference>();\n  }\n\n  /**\n   * Update notification preference settings by ID in\n   * discussionboard_notification_preference table.\n   *\n   * This endpoint updates the notification preference settings for a specific\n   * user preference record identified by its ID in\n   * discussionboard_notification_preference. The API enforces that only the\n   * owner or an administrator may modify the preferences. Fields that can be\n   * updated include reply, like, moderator action, and system message\n   * notification toggles. The endpoint returns the updated notification\n   * preferences data after modification. Related operations: GET for viewing\n   * preferences and PATCH for listing multiple preferences.\n   *\n   * @param connection\n   * @param id Unique identifier of the notification preference record to\n   *   update.\n   * @param body Updated notification preference toggles and settings.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardNotificationPreference.IUpdate,\n  ): Promise<IDiscussionboardNotificationPreference> {\n    id;\n    body;\n    return typia.random<IDiscussionboardNotificationPreference>();\n  }\n\n  /**\n   * Delete notification preferences by ID from the\n   * discussionboard_notification_preference table.\n   *\n   * Authenticated users or administrators can use this endpoint to delete a\n   * notification preference record, identified by its unique ID, from the\n   * discussionboard_notification_preference table. The deletion is restricted\n   * to the owner or administrative users. Typically used for account deletion\n   * or resetting preferences to their default state. The API ensures audit\n   * trail compliance for admin-triggered deletions. If the record does not\n   * exist or the caller is not authorized, an error is thrown.\n   *\n   * @param connection\n   * @param id Unique identifier of the notification preference record to be\n   *   deleted.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/auditLogs/DiscussionboardAuditlogsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardAuditLog } from \"../../../api/structures/IDiscussionboardAuditLog\";\nimport { IPageIDiscussionboardAuditLog } from \"../../../api/structures/IPageIDiscussionboardAuditLog\";\n\n@Controller(\"/discussionboard/auditLogs\")\nexport class DiscussionboardAuditlogsController {\n  /**\n   * Create (insert) a new audit log entry in discussionboard_audit_log\n   * (admin/moderator only).\n   *\n   * This API operation records a new privileged action—such as user bans,\n   * moderator role assignments, or platform configuration changes—by\n   * inserting an audit record into discussionboard_audit_log. Only\n   * authentication with admin or moderator rights is accepted. The request\n   * body contains all required event context for recording, and on success,\n   * the created audit entry (including ID and timestamps) is returned. Used\n   * in tandem with security-sensitive workflows for complete accountability.\n   *\n   * @param connection\n   * @param body Fields describing the privileged event to be logged.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardAuditLog.ICreate,\n  ): Promise<IDiscussionboardAuditLog> {\n    body;\n    return typia.random<IDiscussionboardAuditLog>();\n  }\n\n  /**\n   * List/search audit log entries for privileged actions from the\n   * discussionboard_audit_log table.\n   *\n   * This operation retrieves a list of audit log records from the\n   * discussionboard_audit_log table. Filters can be applied for actor,\n   * target, action type, entity references, and timestamps. Used by\n   * administrators and moderators to review the history of privileged actions\n   * such as bans, role changes, and platform configuration updates.\n   * Pagination is provided for handling large datasets, and the operation is\n   * restricted to privileged roles only. Related endpoints: GET for detailed\n   * audit entry, POST for inserting logs (used mostly internally), PUT for\n   * corrections/annotations.\n   *\n   * @param connection\n   * @param body Filtering, pagination, and searching fields for audit logs.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardAuditLog.IRequest,\n  ): Promise<IPageIDiscussionboardAuditLog> {\n    body;\n    return typia.random<IPageIDiscussionboardAuditLog>();\n  }\n\n  /**\n   * Get detailed information for an audit log entry from\n   * discussionboard_audit_log by ID.\n   *\n   * This endpoint allows an administrator or moderator to retrieve detailed\n   * information on a single audit log entry by its unique identifier. The\n   * returned data includes actor/target user IDs, action type, affected\n   * entity, and timestamps. Used in incident investigation flows or\n   * compliance reviews as required by platform security policy. Related\n   * endpoints: PATCH for bulk search and listing, POST for inserting new logs\n   * after privileged actions.\n   *\n   * @param connection\n   * @param id Unique identifier of the audit log entry.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardAuditLog> {\n    id;\n    return typia.random<IDiscussionboardAuditLog>();\n  }\n\n  /**\n   * Update an audit log entry in discussionboard_audit_log by ID (privileged\n   * use only).\n   *\n   * Perform an update to an existing audit log entry, identified by its\n   * unique ID in the discussionboard_audit_log table. This operation permits\n   * administrators or moderators to append additional context, correct\n   * metadata, or annotate existing records. Because the audit log is a\n   * sensitive table, all updates themselves are logged to ensure complete\n   * traceability and non-repudiation. Errors are returned if the entry does\n   * not exist or the caller lacks privileges. Related operations: GET for\n   * retrieving a record, PATCH for search, POST for new entries.\n   *\n   * @param connection\n   * @param id Unique identifier of the audit log entry to update.\n   * @param body Audit log fields to update (e.g., detail, correction,\n   *   annotation).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardAuditLog.IUpdate,\n  ): Promise<IDiscussionboardAuditLog> {\n    id;\n    body;\n    return typia.random<IDiscussionboardAuditLog>();\n  }\n\n  /**\n   * Delete an audit log entry from discussionboard_audit_log by ID (admin\n   * only, soft-delete).\n   *\n   * This endpoint allows administrators to delete a privileged audit log\n   * entry by its unique ID. Deletions are soft by default, preserving a trace\n   * for regulatory or compliance requirements. This operation is restricted\n   * to admin users and all deletions are themselves logged to the audit log\n   * for traceability. If the record does not exist, a not-found error is\n   * shown. Related endpoints: PATCH for listing/filtering logs, GET for\n   * detail view, PUT for corrections. No impact on related tables—purely for\n   * audit record management.\n   *\n   * @param connection\n   * @param id Unique identifier of the audit log entry to be deleted.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<void> {\n    id;\n    return typia.random<void>();\n  }\n}\n",
      "src/controllers/discussionboard/platformSettings/DiscussionboardPlatformsettingsController.ts": "import { Controller } from \"@nestjs/common\";\nimport { TypedRoute, TypedBody, TypedParam } from \"@nestia/core\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPlatformSetting } from \"../../../api/structures/IDiscussionboardPlatformSetting\";\nimport { IPageIDiscussionboardPlatformSetting } from \"../../../api/structures/IPageIDiscussionboardPlatformSetting\";\nimport { IDeleteResult } from \"../../../api/structures/IDeleteResult\";\n\n@Controller(\"/discussionboard/platformSettings\")\nexport class DiscussionboardPlatformsettingsController {\n  /**\n   * Create a new configuration setting in 'discussionboard_platform_setting'.\n   *\n   * Enables an authenticated admin to create a new configuration record in\n   * the platform settings table. The operation expects a payload (name,\n   * value, type) as per the schema. Automatically records the updated_at\n   * timestamp. Ensures 'name' uniqueness per table constraints; returns\n   * proper error if duplicate exists, or if incomplete/invalid data is\n   * provided.\n   *\n   * Designed to support expansion of platform features—when new\n   * settings/routes/features are rolled out, new records can be created via\n   * this API. This endpoint is tightly access-controlled (admin only via\n   * Bearer token).\n   *\n   * Successful response returns the full created entity, confirming project\n   * extension and configuration flexibility as described in platform\n   * requirements.\n   *\n   * @param connection\n   * @param body Data needed to create a platform setting (name, value, type).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Post()\n  public async post(\n    @TypedBody()\n    body: IDiscussionboardPlatformSetting.ICreate,\n  ): Promise<IDiscussionboardPlatformSetting> {\n    body;\n    return typia.random<IDiscussionboardPlatformSetting>();\n  }\n\n  /**\n   * List/search platform configuration settings from the\n   * discussionboard_platform_setting table (admin only).\n   *\n   * Enables administrators to retrieve a paginated and searchable list of\n   * platform configuration settings from the discussionboard_platform_setting\n   * table. Supports filtering by setting name, value, type, and last updated\n   * date. Used for displaying platform configuration UI, tracking changes,\n   * and supporting system configuration auditing. Only admin role is\n   * permitted. Related endpoints: POST and PUT for creating and updating\n   * settings, GET for individual setting detail.\n   *\n   * @param connection\n   * @param body Search and filter fields for querying platform settings\n   *   (e.g., name, type, paging).\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Patch()\n  public async patch(\n    @TypedBody()\n    body: IDiscussionboardPlatformSetting.IRequest,\n  ): Promise<IPageIDiscussionboardPlatformSetting> {\n    body;\n    return typia.random<IPageIDiscussionboardPlatformSetting>();\n  }\n\n  /**\n   * Get a specific platform setting by ID from\n   * 'discussionboard_platform_setting'.\n   *\n   * Retrieves a single platform configuration setting by its unique\n   * identifier ('id'). This operation is essential for system administrators\n   * to fetch current configuration details, validate values before updates,\n   * and perform audits as mandated in admin and platform configuration\n   * requirements in the business documentation.\n   *\n   * Permissions are strictly enforced—only users with 'admin' privileges,\n   * authenticated via Bearer token, are authorized to invoke this endpoint.\n   * The returned object includes all properties of the\n   * 'discussionboard_platform_setting' record as defined by the schema, such\n   * as id, name, value, type, and updated_at.\n   *\n   * Indicates errors clearly when the ID does not correspond to an existing\n   * setting, or if the caller lacks adequate permissions. This endpoint is\n   * typically paired with PUT or DELETE operations for full config management\n   * cycles.\n   *\n   * @param connection\n   * @param id Globally unique identifier for the platform setting to fetch.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Get(\":id\")\n  public async getById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDiscussionboardPlatformSetting> {\n    id;\n    return typia.random<IDiscussionboardPlatformSetting>();\n  }\n\n  /**\n   * Update platform setting record by ID in\n   * 'discussionboard_platform_setting'.\n   *\n   * Allows an authenticated administrator to update the details of a platform\n   * configuration setting, such as name, value, or type. The ID of the target\n   * setting is a required path parameter. Only admins can perform this\n   * operation, following policy and platform management requirements.\n   *\n   * Validation logic ensures the uniqueness of 'name' is preserved across all\n   * records. Handles invalid IDs, duplicate names, and data validation\n   * errors.\n   *\n   * Returns the updated setting object, as required for auditability and\n   * admin interface refreshes. Pairs with GET (by ID) and DELETE for full\n   * lifecycle management of platform-wide settings. Authenticated via Bearer\n   * token with 'discussionboard_admin' role only.\n   *\n   * @param connection\n   * @param id Platform setting identifier (PK) to update.\n   * @param body Fields to update for the setting.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Put(\":id\")\n  public async putById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n    @TypedBody()\n    body: IDiscussionboardPlatformSetting.IUpdate,\n  ): Promise<IDiscussionboardPlatformSetting> {\n    id;\n    body;\n    return typia.random<IDiscussionboardPlatformSetting>();\n  }\n\n  /**\n   * Delete a specific platform-wide setting by ID from\n   * 'discussionboard_platform_setting'.\n   *\n   * Removes a single platform configuration setting, as identified by its\n   * unique ID. This is integral to platform management and maintenance,\n   * letting administrators retire unused settings and keep configuration\n   * lean. Checks for valid existence and subject to business constraints\n   * (e.g., settings may not be deleted if in active use—a business rule\n   * handled at service layer).\n   *\n   * Access is strictly controlled: only users with 'discussionboard_admin'\n   * role and proper Bearer token are permitted. Operation returns\n   * success/failure indication. Usually paired with GET and POST/PUT for\n   * complete settings lifecycle.\n   *\n   * @param connection\n   * @param id Globally unique identifier for the setting to delete.\n   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n   */\n  @TypedRoute.Delete(\":id\")\n  public async eraseById(\n    @TypedParam(\"id\")\n    id: string & tags.Format<\"uuid\">,\n  ): Promise<IDeleteResult> {\n    id;\n    return typia.random<IDeleteResult>();\n  }\n}\n",
      "src/api/structures/IDiscussionboardUser.ts": "import { tags } from \"typia\";\n\n/**\n * Master user record for each account on the discussion board. Represents\n * authentication and account management data, as required for registration,\n * login, audits, role assignment/checks (see requirements doc Section 3.1,\n * Prisma discussionboard_user). Privileged operations may include\n * 'password_hash', but regular responses should usually omit.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardUser = {\n  /**\n   * Globally unique identifier for the user. Implements traceable,\n   * referential identity across all tables per the requirements. Surrogate\n   * key from Prisma.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Unique email address for user authentication, profile and notification.\n   * Direct mapping to 'email' column in user master.\n   */\n  email: string;\n\n  /**\n   * Password hash for secure authentication. Stored as a hash value—do not\n   * expose directly except during internal workflows or in highly privileged\n   * admin contexts (it may be omitted in most list/detail responses for\n   * security).\n   */\n  password_hash?: string;\n\n  /**\n   * Tracks if user is active/enabled (true) or deactivated (false for soft\n   * delete). Used for role audits and compliance. Directly from 'is_active'\n   * column.\n   */\n  is_active: boolean;\n\n  /**\n   * Timestamp of user creation (join time). Required for audits, analytics,\n   * onboarding metrics. Maps to 'created_at' in schema.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n\n  /**\n   * Last update time. Used for audit, tracking profile/account changes. Maps\n   * to 'updated_at' in schema.\n   */\n  updated_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardUser {\n  /**\n   * Request parameters for searching, filtering, and paginating user master\n   * records (discussionboard_user). All properties are optional for flexible\n   * filtering in user management workflows.\n   *\n   * Each property aligns with a field in the core user master record table,\n   * supporting requirements for admin/moderator user management, audit, and\n   * analytics.\n   */\n  export type IRequest = {\n    /**\n     * (Optional) Filter by the user's email address, case-insensitive and\n     * partial matches allowed. This is useful for user search and\n     * management workflows, directly supporting member lookup by email.\n     *\n     * Based on the 'email' column in the Prisma schema, which is unique and\n     * used for authentication, audit, and notifications.\n     */\n    email?: string;\n\n    /**\n     * (Optional) Filter by active status. If specified, returns only users\n     * whose 'is_active' matches this value. Used to query active or\n     * deactivated (soft-deleted) accounts for admin dashboards and\n     * compliance operations.\n     *\n     * From the 'is_active' column of 'discussionboard_user', which supports\n     * admin control and account suspension as described in requirements.\n     */\n    is_active?: boolean;\n\n    /**\n     * (Optional) Filter for users created after this ISO 8601 timestamp.\n     * Used for admin audits or tracking new registrations.\n     *\n     * Based on 'created_at' column in the Prisma user master table.\n     */\n    created_at_from?: string & tags.Format<\"date-time\">;\n\n    /** (Optional) Filter for users created before this ISO 8601 timestamp. */\n    created_at_to?: string & tags.Format<\"date-time\">;\n\n    /**\n     * (Optional) Filter for users updated after this ISO 8601 timestamp.\n     * Used to track recent profile/account changes.\n     */\n    updated_at_from?: string & tags.Format<\"date-time\">;\n\n    /** (Optional) Filter for users updated before this ISO 8601 timestamp. */\n    updated_at_to?: string & tags.Format<\"date-time\">;\n\n    /**\n     * The page number for pagination. Defaults to 1 if omitted.\n     *\n     * Standard in paginated API contracts, as described in requirements.\n     */\n    page?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"int32\";\n      }>;\n\n    /**\n     * The number of records per page for pagination. Default is 100,\n     * maximum may be enforced per business policy.\n     */\n    limit?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"int32\";\n      }>;\n  };\n\n  /**\n   * Body for creating a new user. Only the unique email and raw password (to\n   * be hashed internally) are required on creation. 'is_active',\n   * 'created_at', and 'updated_at' will be set by system logic. This supports\n   * both admin onboarding and member registration per requirements.\n   */\n  export type ICreate = {\n    /**\n     * Required. User's email address for registration, notifications,\n     * login. Must be unique across all users. Maps to 'email' in schema.\n     */\n    email: string;\n\n    /**\n     * Required. Cleartext password to be hashed and stored as\n     * 'password_hash' (handled internally). Provided only on account\n     * creation, not returned once stored. Maps to 'password_hash' after\n     * being hashed.\n     */\n    password: string;\n  };\n\n  /**\n   * Body for updating existing user account. Fields are all optional—a PATCH\n   * style input. Only admin, moderator, or user self-service logic can change\n   * these fields according to role-based policies. This aligns with Prisma\n   * user master.\n   */\n  export type IUpdate = {\n    /**\n     * (Optional) Update email address. Must remain unique, and follow\n     * business/domain rules.\n     */\n    email?: string;\n\n    /**\n     * (Optional) New password in cleartext. Will be securely hashed before\n     * being stored in 'password_hash'. Not returned in response.\n     */\n    password?: string;\n\n    /**\n     * (Optional) Update active status for the account (for admin use:\n     * suspend/reactivate account per compliance procedures).\n     */\n    is_active?: boolean;\n  };\n}\n",
      "src/api/structures/IPageDiscussionboardUser.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardUser } from \"./IDiscussionboardUser\";\n\n/**\n * A page of user master records, including pagination details and the user\n * records found.\n *\n * This aligns with the standard IPage structure, paginating results from\n * 'discussionboard_user' queries, supporting admin/member search UI, auditing,\n * and analytics.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageDiscussionboardUser = {\n  pagination: IPage.IPagination;\n\n  /** Array of discussionboard_user objects for this page of results. */\n  data: IDiscussionboardUser[];\n};\n",
      "src/api/structures/IDiscussionboardUserProfile.ts": "import { tags } from \"typia\";\n\n/**\n * Represents a user's profile on the system. Provides public-facing display\n * info, as separated from authentication data (see requirements Sections 3.1,\n * 3.2; Prisma 'discussionboard_user_profile'). All fields directly map to form\n * fields and display controls.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardUserProfile = {\n  /**\n   * Primary key for the user profile, uniquely generated and mapped to 'id'\n   * in Prisma.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Foreign key referencing 'discussionboard_user'. 1:1 mapping, required for\n   * lookups, profile ownership.\n   */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Display name shown publicly on posts/comments. Matches 'display_name' in\n   * profile schema. Required.\n   */\n  display_name: string;\n\n  /**\n   * (Optional) URL to user avatar image. Large string value, may be null.\n   * From 'avatar_url' column in user profile.\n   */\n  avatar_url?: string;\n\n  /**\n   * (Optional) User's bio—background, summary, or information for public\n   * display. Can be null. From 'bio' field.\n   */\n  bio?: string;\n};\nexport namespace IDiscussionboardUserProfile {\n  /**\n   * Request body for advanced search, filter, and pagination of user profile\n   * records. Corresponds to fields in 'discussionboard_user_profile'. All\n   * fields are optional for broad or narrow searches.\n   */\n  export type IRequest = {\n    /**\n     * (Optional) Filter by display name (partial or exact match). Used for\n     * admin/member lookup workflows.\n     *\n     * From 'display_name' in user profiles.\n     */\n    display_name?: string;\n\n    /**\n     * (Optional) Filter by user bio content (text search). Supports\n     * admin/member search, compliance workflows. From 'bio'.\n     */\n    bio?: string;\n\n    /** Page number for pagination (default: 1). */\n    page?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"int32\";\n      }>;\n\n    /**\n     * Number of results per page, with system default insurance (e.g., 100\n     * max).\n     */\n    limit?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"int32\";\n      }>;\n  };\n\n  /**\n   * Input body for creating a new user profile, used in\n   * onboarding/registration flows or admin onboarding.\n   */\n  export type ICreate = {\n    /**\n     * The UUID of the user this profile is for. Required, strict 1:1\n     * mapping with 'discussionboard_user', foreign key constraint\n     * enforced.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Display name for member directories and attribution. Must be unique\n     * if business rule applies, required.\n     */\n    display_name: string;\n\n    /** (Optional) URL of avatar image for the user (can be omitted/null). */\n    avatar_url?: string;\n\n    /** (Optional) User's biography/summary, for public display. */\n    bio?: string;\n  };\n\n  /**\n   * Input body to update existing user profile fields. Used for member\n   * self-service and admin profile corrections or display adjustments.\n   */\n  export type IUpdate = {\n    /** (Optional) New value for display name. */\n    display_name?: string;\n\n    /** (Optional) Update avatar URL (may be set to null to clear avatar). */\n    avatar_url?: string;\n\n    /** (Optional) Update for bio/about content. */\n    bio?: string;\n  };\n}\n",
      "src/api/structures/IPageDiscussionboardUserProfile.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardUserProfile } from \"./IDiscussionboardUserProfile\";\n\n/**\n * Paged result for user profile queries, including pagination info and user\n * profiles returned. Used for admin/member directory views.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageDiscussionboardUserProfile = {\n  pagination: IPage.IPagination;\n\n  /** Array of user profile records for this page. */\n  data: IDiscussionboardUserProfile[];\n};\n",
      "src/api/structures/IDiscussionboardMember.ts": "import { tags } from \"typia\";\n\n/**\n * 플랫폼 내 일반 참여자의 역할 데이터를 나타냅니다.\n *\n * 모든 discussionboard_user는 최소 discussionboard_member 역할을 1:1로 할당받으며, 게시글/댓글\n * 작성이나 좋아요 기능 등 일반 참여에 대한 권한이 이 엔티티를 통해 관리됩니다. 역할 변경(승격/강등) 내역은 granted_at을 참조해\n * 오디트 가능합니다. 회원 관리/역할 관리 대시보드 기능과 밀접히 연결되어 있습니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardMember = {\n  /**\n   * 고유 멤버 역할 할당 키. 모든 discussionboard_member 엔트리를 식별하며, 필요 시 추적 및 변경 로그를\n   * 지원합니다.\n   *\n   * Prisma discussionboard_member.id에 해당합니다.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 이 멤버 역할이 부여된 discussionboard_user와의 1:1 관계(외래키, 유니크). 회원 API, 권한 검증,\n   * 대시보드에서 사용자 정보를 조회할 때 필수적으로 활용합니다.\n   *\n   * Prisma discussionboard_member.user_id에 해당합니다.\n   */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 이 멤버 역할이 처음 부여된 일시(부여 시각). 오디팅, 멤버십 이력 관리, 역할 승격/강등 관리, 가입 일자 기준 조회 등에\n   * 활용합니다.\n   *\n   * Prisma discussionboard_member.granted_at에 해당합니다.\n   */\n  granted_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardMember {\n  /**\n   * Advanced search/filter body for the discussionboard_member entity,\n   * supporting admin/member dashboards.\n   */\n  export type IRequest = {\n    /**\n     * (Optional) Filter by the user associated with this member role\n     * assignment. Used for admin member management and auditing.\n     */\n    user_id?: string & tags.Format<\"uuid\">;\n\n    /** (Optional) Filter for memberships granted after this timestamp. */\n    granted_at_from?: string & tags.Format<\"date-time\">;\n\n    /** (Optional) Filter for memberships granted before this timestamp. */\n    granted_at_to?: string & tags.Format<\"date-time\">;\n\n    /** Pagination page number (default: 1). */\n    page?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"int32\";\n      }>;\n\n    /** Result count per page (default: system maximum). */\n    limit?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"int32\";\n      }>;\n  };\n\n  /**\n   * 신규 멤버 역할 할당을 위한 요청 본문(based on discussionboard_member 테이블). user_id(대상\n   * 유저), granted_at(부여일시) 필수입니다. 일반적으로 어드민 패널, 대시보드, 회원 가입 후 자동 부여 등에서\n   * 사용됩니다.\n   */\n  export type ICreate = {\n    /**\n     * 멤버로 지정할 discussionboard_user의 고유 식별자(외래키).\n     *\n     * 역할 부여 API에서 반드시 지정되는 값입니다.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * 멤버 역할이 실제로 부여되는 시각(통상 API 호출 시점의 서버 시간을 사용).\n     *\n     * 오디팅, 멤버십 이력 관리, 가입 일자 기준 조회 등에 활용됩니다.\n     */\n    granted_at: string & tags.Format<\"date-time\">;\n  };\n\n  /**\n   * 멤버 역할 정보(부여 일시 등)만 수정 가능한 업데이트 타입입니다. grant_at을 변경할 때 사용합니다. user_id, id\n   * 등 PK/FK는 수정 불가.\n   */\n  export type IUpdate = {\n    /** 멤버 역할의 부여/변경 시각 갱신용. 업무상 API로 멤버 기간을 조절할 때 사용. */\n    granted_at: string & tags.Format<\"date-time\">;\n  };\n}\n",
      "src/api/structures/IPageDiscussionboardMember.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardMember } from \"./IDiscussionboardMember\";\n\n/**\n * Paged list of discussionboard_member objects, including pagination/query info\n * needed for large data sets and admin/member search tools.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageDiscussionboardMember = {\n  pagination: IPage.IPagination;\n\n  /** Array of discussionboard_member entities matching filter and pagination. */\n  data: IDiscussionboardMember[];\n};\n",
      "src/api/structures/IPage.ts": "import { tags } from \"typia\";\n\nexport namespace IPage {\n  /**\n   * 페이지네이션 정보 객체입니다.\n   *\n   * 이 타입은 데이터 페이징 결과의 현재 페이지, 페이지 당 항목 수, 전체 레코드 수, 총 페이지 수 등 필수 정보를 제공합니다.\n   * 모든 IPage<T> 타입에서 참조되어, 목록 조회의 페이징 처리를 표준화합니다.\n   */\n  export type IPagination = {\n    /** 현재 페이지 번호(1부터 시작). */\n    current: number & tags.Type<\"int32\">;\n\n    /**\n     * 페이지 당 반환하는 결과 레코드 최대 수.\n     *\n     * 시스템 디폴트값(예: 100) 또는 쿼리에서 지정한 limit 값.\n     */\n    limit: number & tags.Type<\"int32\">;\n\n    /** 해당 조건으로 조회될 전체 레코드 개수. */\n    records: number & tags.Type<\"int32\">;\n\n    /** 전체 페이지 수(= records/limit, 올림 연산 결과). */\n    pages: number & tags.Type<\"int32\">;\n  };\n\n  /**\n   * Standard pagination request type used across paginated result sets.\n   *\n   * @see IPage.IRequest in documentation.\n   */\n  export type IRequest = {\n    /** Page number for pagination. Optional; defaults to 1. */\n    page?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"uint32\";\n      }>;\n\n    /** Records per page. Optional; defaults to 100. */\n    limit?: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"uint32\";\n      }>;\n  };\n}\n",
      "src/api/structures/IDiscussionboardModerator.ts": "import { tags } from \"typia\";\n\n/**\n * 플랫폼 내 모더레이터(중재자, 관리자)의 역할 데이터 레코드를 나타냅니다. 어드민 패널 등 역할 관리, 오디트 시스템에서 주로 사용됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardModerator = {\n  /**\n   * 모더레이터 역할 할당의 고유 키(ID). PK.\n   *\n   * 모든 discussionboard_moderator 엔트리를 식별합니다.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 실제 모더레이터로 임명되는 discussionboard_user의 고유 아이디(FK, 유니크). 유저-역할간 1:1 관계를\n   * 보장합니다.\n   */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /** 이 역할이 최초 할당된 날짜/시간. 추적(승격/강등 로그, 오디팅)에 활용. */\n  assigned_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardModerator {\n  /**\n   * 모더레이터 역할 할당 리스트 조회/검색을 위한 요청 타입입니다. 주로 어드민 대시보드, 역할 관리 UI 등에서 활용되며,\n   * 유저별/기간별/페이지네이션 조건을 사용할 수 있습니다.\n   */\n  export type IRequest = {\n    /**\n     * 특정 유저의 moderator 역할 여부 확인/검색시 사용되는 discussionboard_user의 고유 아이디.\n     *\n     * 검색 조건(optional).\n     */\n    user_id?: string & tags.Format<\"uuid\">;\n\n    /** 임명일(이상) 기준 필터 */\n    assigned_at_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 임명일(이하) 기준 필터 */\n    assigned_at_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 조회할 페이지 번호(1-base, 기본값=1) */\n    page?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n\n    /** 페이지당 반환할 행 개수(기본값=100) */\n    limit?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n  };\n\n  /**\n   * 신규 모더레이터 역할 할당을 위한 요청 타입입니다. user_id(유저)와 assigned_at(임명시간) 필요. 어드민이 역할을\n   * 부여할 때 사용.\n   */\n  export type ICreate = {\n    /**\n     * Moderator로 지정할 discussionboard_user의 식별자.\n     *\n     * 역할 부여에 반드시 필요.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /** 임명(할당) 일시. 신규 모더레이터 생성시 사용. */\n    assigned_at: string & tags.Format<\"date-time\">;\n  };\n\n  /** 모더레이터 역할 배정 정보(임명 일시 등)만 수정하는 타입입니다. */\n  export type IUpdate = {\n    /** 임명된 날짜/시간을 다시 지정하거나 수정할 때 사용합니다. */\n    assigned_at: string & tags.Format<\"date-time\">;\n  };\n}\n",
      "src/api/structures/IPageDiscussionboardModerator.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardModerator } from \"./IDiscussionboardModerator\";\n\n/**\n * 모더레이터 역할 할당 목록의 페이지 결과를 담는 컨테이너 타입입니다. pagination(페이지 메타), data(목록) 필드 구성.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageDiscussionboardModerator = {\n  pagination: IPage.IPagination;\n\n  /** 조회된 moderator 역할 배열 */\n  data: IDiscussionboardModerator[];\n};\n",
      "src/api/structures/IDiscussionboardAdmin.ts": "import { tags } from \"typia\";\n\n/**\n * 플랫폼 어드민(최고 관리자) 역할 할당 이력을 나타내는 타입입니다. PK/FK 관리, 오디트 로깅, 권한 검증 로직의 기초가 됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardAdmin = {\n  /** 어드민 역할 할당 고유 식별자(PK). discussionboard_admin.id와 1:1로 매핑. */\n  id: string & tags.Format<\"uuid\">;\n\n  /** 실제 어드민 권한이 부여된 discussionboard_user의 고유 아이디(FK, 유니크). */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /** 운영진으로 지명된 시간/일자. 오디트 기록. */\n  assigned_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardAdmin {\n  /**\n   * 어드민 역할 할당의 검색/조회 요청입니다. user_id, 임명일, 페이지네이션 등 다양한 조건을 조합해 관리 UI/대시보드에서\n   * 활용합니다.\n   */\n  export type IRequest = {\n    /** 어드민 역할자(운영진) 중 특정 유저 아이디로 필터시 사용됩니다. */\n    user_id?: string & tags.Format<\"uuid\">;\n\n    /** 임명일(이상) 기준 필터 */\n    assigned_at_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 임명일(이하) 기준 필터 */\n    assigned_at_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 조회할 페이지 번호(1-base, 기본값=1) */\n    page?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n\n    /** 페이지당 반환할 행 개수(기본값=100) */\n    limit?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n  };\n\n  /** 관리자 역할 생성 요청 본문 예시. 신규 어드민 승격 및 임명시 user_id, assigned_at 필수. */\n  export type ICreate = {\n    /**\n     * 어드민 권한을 부여할 대상 유저의 UUID.\n     *\n     * 역할 승격에 필요.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /** 어드민 권한 부여 시각. */\n    assigned_at: string & tags.Format<\"date-time\">;\n  };\n\n  /**\n   * Data required to update an existing admin assignment in the\n   * discussionboard_admin table.\n   *\n   * Includes the timestamp of assignment, which is crucial for tracking\n   * privilege escalation or changes according to business processes.\n   */\n  export type IUpdate = {\n    /**\n     * The date and time when the admin role was assigned, following ISO\n     * 8601 format.\n     *\n     * This is used to track changes in administrative privilege history,\n     * supporting audit and compliance workflows for role changes as\n     * required in business rules.\n     */\n    assigned_at: string & tags.Format<\"date-time\">;\n  };\n}\n",
      "src/api/structures/IPageDiscussionboardAdmin.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardAdmin } from \"./IDiscussionboardAdmin\";\n\n/**\n * 어드민 역할 할당 목록의 페이지 결과입니다. pagination(메타정보), data(엔티티 배열) 필드로 구성.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageDiscussionboardAdmin = {\n  pagination: IPage.IPagination;\n  data: IDiscussionboardAdmin[];\n};\n",
      "src/api/structures/IDiscussionboardPost.ts": "import { tags } from \"typia\";\n\nimport { IPage } from \"./IPage\";\n\n/**\n * A normalized post record as persisted in the discussionboard_post table.\n *\n * Includes all fields essential for detailed view, moderation actions, and\n * audit compliance.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardPost = {\n  /**\n   * Primary key for the post record.\n   *\n   * Globally unique identifier for each post, as required for audit trails\n   * and traceability.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * UUID of the member who authored the post.\n   *\n   * References discussionboard_member, supporting user detail drilldown and\n   * composition rules.\n   */\n  author_member_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Identifier for post's category (e.g. 'Politics', 'Economics').\n   *\n   * Supports association of post to functional categories, as required for\n   * discoverability.\n   */\n  category_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Post title, as shown to users and in search operations.\n   *\n   * Uniquely identifies post content for summary views and indexing.\n   */\n  title: string;\n\n  /**\n   * Main post content.\n   *\n   * Supports markup (plain text/Markdown), enables long form discussion in\n   * compliance with requirements.\n   */\n  body: string;\n\n  /**\n   * ISO timestamp when post was first created.\n   *\n   * Enables audit, history/sort/order, and analytics.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n\n  /**\n   * Last modification timestamp for the post.\n   *\n   * Tracks history for audit trails.\n   */\n  updated_at: string & tags.Format<\"date-time\">;\n\n  /**\n   * Timestamp of soft deletion if post is hidden from standard views.\n   *\n   * Set by admin or moderator actions for audit/compliance.\n   */\n  deleted_at?: (string & tags.Format<\"date-time\">) | null;\n};\nexport namespace IDiscussionboardPost {\n  /**\n   * Filtering, search, and pagination parameters for listing discussion posts\n   * in the board.\n   *\n   * Enables advanced filtering (category, author, search keywords, creation\n   * dates), paging, and administrative audit controls as detailed in\n   * functional requirements.\n   */\n  export type IRequest = {\n    /**\n     * Category identifier for filtering posts, referencing\n     * discussionboard_post_category.\n     *\n     * Allows queries by category, such as 'Politics' or 'Economics',\n     * supporting filtered search as described in requirements.\n     */\n    category_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * Member ID of the post author.\n     *\n     * Supports filtering posts by author for profile pages and moderation.\n     */\n    author_member_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * Free-text search string for post title/body keyword or phrase\n     * matching.\n     *\n     * Used to enable robust search and discovery features outlined in\n     * requirements.\n     */\n    keywords?: string;\n\n    /**\n     * Lower bound for created_at field (inclusive).\n     *\n     * Allows filtering posts created after a specific timestamp.\n     */\n    created_at_from?: string & tags.Format<\"date-time\">;\n\n    /**\n     * Upper bound for created_at field (inclusive).\n     *\n     * Filters posts created up to this time.\n     */\n    created_at_to?: string & tags.Format<\"date-time\">;\n\n    /**\n     * If true, include soft-deleted posts in the result set.\n     *\n     * Usually only settable by admin or moderator roles for\n     * audit/moderation oversight.\n     */\n    include_deleted?: boolean;\n\n    /**\n     * Pagination and page size configuration.\n     *\n     * Consistent with the standard paging and result set windowing.\n     */\n    pagination?: IPage.IRequest;\n  };\n\n  /**\n   * Summary of a discussion post object suitable for list view or search\n   * result display.\n   *\n   * Includes key fields for UI preview, search, and ordering. Used in\n   * paginated collections.\n   */\n  export type ISummary = {\n    /**\n     * UUID of the post as primary key.\n     *\n     * Used for navigation to detail view or post-specific actions.\n     */\n    id: string & tags.Format<\"uuid\">;\n\n    /** The title of the post, used for preview and search lists. */\n    title: string;\n\n    /**\n     * UUID for the category this post belongs to.\n     *\n     * References discussionboard_post_category and is used for\n     * filtering/grouping UI.\n     */\n    category_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Member ID of the authoring user.\n     *\n     * Used for attribution, filtering by user, and moderation UI.\n     */\n    author_member_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Timestamp when the post was created.\n     *\n     * Supports sorting, recency filtering, and audit logic.\n     */\n    created_at: string & tags.Format<\"date-time\">;\n\n    /**\n     * Timestamp of last update, supporting audit trails and version\n     * tracking.\n     */\n    updated_at: string & tags.Format<\"date-time\">;\n\n    /**\n     * If set, indicates the post has been soft-deleted (hidden).\n     *\n     * Returned for admin/moderator queries per requirements.\n     */\n    deleted_at?: (string & tags.Format<\"date-time\">) | null;\n  };\n\n  /**\n   * Fields required for creating a new post within the discussion board.\n   *\n   * Correlates to the required fields in creation endpoints, supporting input\n   * by members and validation for admin workflows.\n   */\n  export type ICreate = {\n    /**\n     * UUID for the member posting content. Required for authorship\n     * attribution; validated for membership as per requirements.\n     */\n    author_member_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * UUID for the category under which this post is filed. Only valid\n     * values available from discussionboard_post_category. Supports content\n     * organization, filtering, and admin taxonomy workflows.\n     */\n    category_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Title of the post. Required; serves as search anchor and headline for\n     * summarization.\n     */\n    title: string;\n\n    /**\n     * Main text content of the post. May support limited markup, as per UI\n     * requirements.\n     */\n    body: string;\n  };\n\n  /**\n   * Fields for updating attributes of a post (title, body, category,\n   * deleted_at).\n   *\n   * Supports edit and moderation flows. All fields optional unless endpoint\n   * requires specific ones.\n   */\n  export type IUpdate = {\n    /**\n     * Optional new category. If present, post will be reassigned. Must\n     * reference valid discussionboard_post_category.\n     */\n    category_id?: string & tags.Format<\"uuid\">;\n\n    /** Optional new title for the post. */\n    title?: string;\n\n    /** Optional new content body. Use to apply edits to text. */\n    body?: string;\n\n    /**\n     * Timestamp if post is being soft-deleted. Can be set or cleared by\n     * privilege holder only.\n     */\n    deleted_at?: (string & tags.Format<\"date-time\">) | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardPost.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardPost } from \"./IDiscussionboardPost\";\n\nexport namespace IPageIDiscussionboardPost {\n  /**\n   * A paginated set of post summaries, as returned by list/search endpoints\n   * for discussionboard_post entities.\n   *\n   * Enables result set navigation and efficient client-side rendering of\n   * large datasets.\n   */\n  export type ISummary = {\n    /** Page information, including current, limit, total, and page count. */\n    pagination: IPage.IPagination;\n\n    /** The array of summarized post objects matching the search/filters. */\n    data: IDiscussionboardPost.ISummary[];\n  };\n}\n",
      "src/api/structures/IDiscussionboardPostCategory.ts": "import { tags } from \"typia\";\n\nimport { IPage } from \"./IPage\";\n\n/**\n * Discussion post category entity, as maintained in\n * discussionboard_post_category.\n *\n * Includes unique name, description, and UUID for search, maintenance, and\n * constraint validation.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardPostCategory = {\n  /**\n   * Primary key for post category.\n   *\n   * Identifies unique category for filtering and administration.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Category name, such as 'Economics' or 'Politics'. Must be unique in\n   * table.\n   */\n  name: string;\n\n  /**\n   * Human-readable full category explanatory text. Allows category discovery\n   * and admin notes.\n   */\n  description?: string | null;\n};\nexport namespace IDiscussionboardPostCategory {\n  /**\n   * Request schema for searching/listing post categories, supporting text\n   * search, filtering, and paging.\n   *\n   * Used by admin dashboards and configuration panels.\n   */\n  export type IRequest = {\n    /**\n     * Partial/category name for filtering or searching categories by name\n     * substring.\n     */\n    name?: string;\n\n    /** Text content for category description filter/search match. */\n    description?: string;\n\n    /** Standard paging configuration for result windows. */\n    pagination?: IPage.IRequest;\n  };\n\n  /**\n   * Creation contract for admin or setup flows to define a new post category\n   * within the board, per requirements for flexible configuration and\n   * discoverability.\n   */\n  export type ICreate = {\n    /**\n     * Full name for new discussion category, required for taxonomy\n     * organization. Must be unique.\n     */\n    name: string;\n\n    /**\n     * Optional description providing extra context or usage notes for\n     * admins and users.\n     */\n    description?: string;\n  };\n\n  /**\n   * Fields for updating a post category. Enable admin maintenance or\n   * reclassification of board categories.\n   */\n  export type IUpdate = {\n    /** Optional new name for the category. If set, must be unique. */\n    name?: string;\n\n    /** Optional new description for the category. */\n    description?: string;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardPostCategory.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardPostCategory } from \"./IDiscussionboardPostCategory\";\n\n/**\n * A paginated set of post categories as returned by list/search endpoints,\n * supplying both summary and detail data for configuration/UI rendering.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardPostCategory = {\n  /** Pagination metadata (page, limit, total, etc). */\n  pagination: IPage.IPagination;\n\n  /** Array of post category objects, suitable for UI display or selection. */\n  data: IDiscussionboardPostCategory[];\n};\n",
      "src/api/structures/IDiscussionboardPostTag.ts": "import { tags } from \"typia\";\n\nimport { IPage } from \"./IPage\";\n\n/**\n * 게시글 태그 정보 테이블 레코드.\n *\n * Discussionboard_post_tag의 단일 row를 표현합니다. 주요 목적은 포스트 태그 관리, 토픽 기반 분류, 검색 시스템\n * 지원, 관리자 UI의 태그편집/생성/조회 동작입니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardPostTag = {\n  /**\n   * 게시글 태그를 고유하게 식별하는 UUID입니다.\n   *\n   * Prisma discussionboard_post_tag.id에서 유래했으며, 쿼리 및 레퍼런스 연산에서 주요 식별자 역할을\n   * 합니다. 중복 없는 원자적 레코드 키입니다.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 태그 이름(문자열). 예: 'inflation'\n   *\n   * Discussionboard_post_tag.name에 매핑되며, 유일(unique)이 보장됩니다. 게시글 분류, 검색, 필터에\n   * 사용됩니다.\n   */\n  name: string;\n};\nexport namespace IDiscussionboardPostTag {\n  /**\n   * Request contract for searching, listing, or filtering post tags, with\n   * support for partial name match and paging.\n   */\n  export type IRequest = {\n    /** Partial tag name, supporting search/find pattern for tags. */\n    name?: string;\n\n    /** Standard pagination options for tag search results. */\n    pagination?: IPage.IRequest;\n  };\n\n  /**\n   * 게시글 태그 신규 생성(등록) 요청 바디 구조입니다.\n   *\n   * Discussionboard_post_tag 레코드 신규 입력을 위한 계약으로, 관리 UI 또는 API 연동시 필수로 사용합니다.\n   */\n  export type ICreate = {\n    /**\n     * 새로 등록할 태그 이름(문자열).\n     *\n     * Discussionboard_post_tag.name 컬럼으로, 고유(unique) 값이어야 하며 빈 문자열은 허용하지\n     * 않습니다. 예: 'inflation', 'trade' 등 청취자 편의성 및 필터링 지원을 위해 명확한 단어 사용이\n     * 권장됩니다.\n     */\n    name: string;\n  };\n\n  /**\n   * 게시글 태그 정보(이름) 변경 요청 바디 구조입니다.\n   *\n   * 기존 discussionboard_post_tag 레코드의 name 필드 수정에 사용됩니다.\n   */\n  export type IUpdate = {\n    /**\n     * 변경 희망 태그 이름(문자열).\n     *\n     * Discussionboard_post_tag.name의 업데이트용 필드입니다. 태그의 오탈자 정정, 명칭 표준화 등\n     * 관리용으로 호출합니다.\n     */\n    name: string;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardPostTag.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardPostTag } from \"./IDiscussionboardPostTag\";\n\n/**\n * 게시글 태그 레코드의 페이지네이션 지원 결과 컨테이너 타입입니다.\n *\n * 쿼리 조건에 일치하는 태그 목록과 페이징 정보가 포함되어 있습니다. 주로 관리자 UI와 대량 데이터 조회 API 응답 본문에서 사용됩니다.\n *\n * 원본 Prisma 스키마: discussionboard_post_tag (tag 분류 시스템, 중복 없는 태그 기본키 관리 테이블).\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardPostTag = {\n  /**\n   * 페이지네이션 정보를 담고 있습니다.\n   *\n   * 예를 들어, 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수와 같은 정보를 포함합니다. 이는 목록형 API의\n   * 필수 요소로, 페이징 처리와 프론트 UI 연동의 핵심을 담당합니다.\n   */\n  pagination: IPage.IPagination;\n\n  /**\n   * 페이지별로 조회된 discussionboard_post_tag 레코드 목록입니다.\n   *\n   * 각 항목은 게시글 태그 엔티티(단일 태그 포함)를 표현하며, 이 배열은 선택된 조건에 맞는 결과 집합을 페이징 기준에 따라\n   * 반환합니다.\n   */\n  data: IDiscussionboardPostTag[];\n};\n",
      "src/api/structures/IDeleteResponse.ts": "/**\n * 리소스 삭제 API 호출 시 표준적으로 반환되는 결과 컨테이너 타입입니다.\n *\n * 삭제 성공 여부와 상태 메시지를 제공합니다. 단순 삭제 외에도 소프트딜리션, 권한 오류 등 상태값 변동이 발생했을 때 상세 안내를 포함할\n * 수 있습니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDeleteResponse = {\n  /**\n   * 삭제(삭제 요청 처리) 성공 여부를 Boolean으로 반환합니다.\n   *\n   * API 레벨에서 동작의 성공/실패를 명확하게 알리기 위한 용도입니다.\n   */\n  success: boolean;\n\n  /**\n   * 삭제 요청 결과 메시지(예시: 성공/실패 이유, 부가 정보 등)를 전달합니다.\n   *\n   * 클라이언트 또는 사용자에게 상세 결과 상황을 안내할 때 활용됩니다.\n   */\n  message: string;\n};\n",
      "src/api/structures/IDiscussionboardPostAttachment.ts": "import { tags } from \"typia\";\n\n/**\n * 게시글 첨부파일 단일 객체 정보.\n *\n * Discussionboard_post_attachment의 개별 행(row)를 표현합니다. 파일 업로드/리스트, 미디어 콘텐츠 관리의 핵심\n * 타입입니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardPostAttachment = {\n  /**\n   * 첨부파일 객체의 고유 UUID입니다.\n   *\n   * Discussionboard_post_attachment.id를 직접 참조하며, 파일의 단일 식별 키로 활용됩니다.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 첨부파일이 소속된 게시글(포스트) UUID입니다.\n   *\n   * Discussionboard_post_attachment.post_id에 대한 FK. 게시글 삭제시 연쇄 삭제 등 비즈니스 로직과\n   * 연동됩니다.\n   */\n  post_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 업로드된 파일의 접근(다운로드/서빙)용 절대 URL (최대 8만자).\n   *\n   * Prisma discussionboard_post_attachment.file_url – S3, CDN 등 외부 파일 경로 포함\n   * 가능.\n   */\n  file_url: string;\n\n  /**\n   * 파일 MIME 타입 문자열 (예: 'image/png', 'application/pdf').\n   *\n   * Discussionboard_post_attachment.file_type. 서버/클라이언트에서 미디어 판별에 사용됨.\n   */\n  file_type: string;\n\n  /**\n   * 업로드 시점(타임스탬프, ISO 표기)\n   *\n   * Discussionboard_post_attachment.uploaded_at. 파일의 업로드 및 정렬 기준.\n   */\n  uploaded_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardPostAttachment {\n  /**\n   * 게시글 첨부파일 검색, 필터링, 페이지네이션 요청 바디 타입. discussionboard_post_attachment 테이블의\n   * 파일 메타데이터를 조회/선택적으로 탐색할 때 사용됩니다.\n   */\n  export type IRequest = {\n    /**\n     * 검색/필터링을 위한 게시글 ID (UUID).\n     *\n     * 특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다.\n     * discussionboard_post_attachment.post_id FK와 연결됩니다.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\n     *\n     * 특정 파일 종류만 검색할 때 지정합니다.\n     */\n    file_type?: string | null;\n\n    /**\n     * 업로드 시점(이상, from) ISO 8601 타임스탬프.\n     *\n     * 주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링).\n     */\n    created_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /**\n     * 업로드 시점(이하, to) ISO 8601 타임스탬프.\n     *\n     * 주어진 날짜/시간 이전 첨부파일 조회조건.\n     */\n    created_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 조회 페이지 번호(1-base, Pagination, 선택). */\n    page?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n\n    /** 페이지당 항목 수(선택, default=100). */\n    limit?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n  };\n\n  /**\n   * 게시글 첨부파일 신규 등록 API 요청용 구조체.\n   *\n   * Discussionboard_post_attachment 테이블의 업로드 신규 레코드와 맵핑됩니다.\n   */\n  export type ICreate = {\n    /**\n     * 첨부파일을 등록할 게시글(포스트)의 UUID.\n     *\n     * Discussionboard_post_attachment.post_id FK로, 파일 업로드시 반드시 지정해야 합니다.\n     */\n    post_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * 첨부파일 접근용 절대 URL (S3/CDN 경로 등).\n     *\n     * Discussionboard_post_attachment.file_url 신규 등록 값. 대용량이므로 최대 길이 준수\n     * 필요(8만자 미만 권장).\n     */\n    file_url: string;\n\n    /**\n     * 업로드 파일의 MIME 타입.\n     *\n     * 이미지라면 'image/jpeg', 문서일 경우 'application/pdf' 등. 서버-클라이언트 호환성을 고려하여\n     * 표준값 입력 필요.\n     */\n    file_type: string;\n  };\n\n  /**\n   * 게시글 첨부파일 메타데이터(파일 url/mime type 등) 변경 API 요청 구조.\n   *\n   * Discussionboard_post_attachment 테이블의 기존 레코드(파일) 정보를 수정할 때 사용됩니다.\n   */\n  export type IUpdate = {\n    /**\n     * 수정하려는 파일 접근 URL.\n     *\n     * S3, CDN 등 외부 저장소 경로가 변경되었을 때나 미디어 파일 유지보수시 입력.\n     */\n    file_url?: string;\n\n    /**\n     * 수정할 MIME 타입 값입니다.\n     *\n     * 예: 파일 포맷이 변경된 경우, 잘못 입력된 타입을 정정할 때 사용.\n     */\n    file_type?: string;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardPostAttachment.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardPostAttachment } from \"./IDiscussionboardPostAttachment\";\n\n/**\n * 게시글 첨부파일 목록 결과(페이지네이션 지원).\n *\n * 첨부파일 정보 집합과 페이징 메타가 함께 반환됩니다. discussionboard_post_attachment 테이블의 파일 메타/업로드\n * 내역을 대표합니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardPostAttachment = {\n  /**\n   * 첨부파일 목록 조회시 사용되는 페이지네이션 정보.\n   *\n   * 예: 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수.\n   */\n  pagination: IPage.IPagination;\n\n  /** 파일 단위의 첨부파일 정보(객체 배열). */\n  data: IDiscussionboardPostAttachment[];\n};\n",
      "src/api/structures/IDiscussionboardComments.ts": "import { tags } from \"typia\";\n\n/**\n * 댓글 단건 엔터티. 하나의 게시물에 소속된 댓글(및 대댓글 포함). 계층적 구조가 포함되며, 댓글 삭제/수정 여부 및 생성/수정 시각을\n * 기록합니다.\n *\n * Prisma discussionboard_comments 테이블 전체를 대표하며, 모든 댓글 API의 응답 구조에 사용됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardComments = {\n  /**\n   * 고유 식별자입니다. 각 댓글을 고유하게 식별하는 UUID입니다.\n   *\n   * Prisma discussionboard_comments의 id 컬럼에 해당합니다. 토론 스레드 내에서 각 댓글의 트레이스 및\n   * 참조를 위함입니다.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 이 댓글이 소속된 게시글의 고유 UUID입니다. 토론 내 게시물-댓글 관계를 정의합니다.\n   *\n   * Prisma discussionboard_comments의 post_id 컬럼에 해당하며, 게시글 삭제 시 댓글도 종속적으로\n   * 삭제됩니다.\n   */\n  post_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 이 댓글을 작성한 사용자의 고유 UUID입니다.\n   *\n   * Prisma discussionboard_comments의 author_id 컬럼에 해당하며, 댓글 작성자의 식별 및 활동 추적에\n   * 이용됩니다.\n   */\n  author_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로\n   * 취급됩니다.\n   *\n   * Prisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다.\n   */\n  parent_comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * 댓글에 작성된 텍스트 본문입니다. 사용자가 작성한 메시지이며, 길이 제한 및 금칙어 등의 비즈니스 규칙이 적용될 수 있습니다.\n   *\n   * Prisma discussionboard_comments의 content 컬럼에 해당합니다.\n   */\n  content: string;\n\n  /**\n   * 댓글 내용이 최초 생성 이후 수정된 적이 있는가를 나타냅니다.\n   *\n   * Prisma discussionboard_comments의 is_edited 컬럼에 해당합니다.\n   */\n  is_edited: boolean;\n\n  /**\n   * 댓글이 소프트 삭제되었는지 여부를 나타냅니다. 물리 삭제가 아닌 경우 참으로 표시되며, 실제 데이터는 유지됩니다.\n   *\n   * Prisma discussionboard_comments의 is_deleted 컬럼에 해당합니다.\n   */\n  is_deleted: boolean;\n\n  /**\n   * 댓글 최초 작성 시각(ISO 8601 표준)입니다.\n   *\n   * Prisma discussionboard_comments의 created_at 컬럼에 해당합니다.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n\n  /**\n   * 댓글의 최종 수정(혹은 삭제 표시 등) 시각입니다. 수정을 하지 않았다면 작성 시각과 동일합니다.\n   *\n   * Prisma discussionboard_comments의 updated_at 컬럼에 해당합니다.\n   */\n  updated_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardComments {\n  /**\n   * 댓글 목록, 필터링, 검색 및 페이징 요청 바디 구조체입니다.\n   *\n   * Discussionboard_comments의 다양한 조회 조건을 프론트, 백엔드, moderation API가 유연히 요청할 수\n   * 있게 설계된 타입입니다.\n   */\n  export type IRequest = {\n    /**\n     * 특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\n     *\n     * Discussionboard_comments.post_id 필드에 대한 FK.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\n     *\n     * 특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다.\n     */\n    author_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\n     *\n     * Threaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다.\n     */\n    parent_comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\n     *\n     * 일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다.\n     */\n    is_deleted?: boolean | null;\n\n    /**\n     * 편집(수정)된 댓글 여부 필터.\n     *\n     * 사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null).\n     */\n    is_edited?: boolean | null;\n\n    /** 생성 시점 필터(이후, from, ISO 8601). */\n    created_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 생성 시점 필터(이전, to, ISO 8601). */\n    created_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 조회할 페이지 번호(1-based, optional). */\n    page?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n\n    /** 페이지당 항목 개수(default=100, optional). */\n    limit?:\n      | (number &\n          tags.Type<\"int32\"> &\n          tags.JsonSchemaPlugin<{\n            format: \"int32\";\n          }>)\n      | null;\n  };\n\n  /**\n   * 댓글 등록용 요청 객체. 일반 댓글 또는 대댓글 등록 모두 지원합니다.\n   *\n   * Prisma discussionboard_comments CREATE 시 요구되는 모든 정보(게시글ID, 부모댓글ID, 내용)를\n   * 포함하며, 클라이언트에서 서버로 전달되는 API의 본문 요청 타입입니다.\n   */\n  export type ICreate = {\n    /**\n     * 댓글을 달고자 하는 게시글의 UUID입니다.\n     *\n     * Prisma discussionboard_comments.post_id에 해당하며, 반드시 존재하는 게시글이어야만 합니다.\n     */\n    post_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * 대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\n     *\n     * Prisma discussionboard_comments.parent_comment_id에 해당합니다.\n     */\n    parent_comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 댓글의 텍스트 본문. 반드시 입력되어야 하며, 플랫폼 정책에 따라 길이 제한 또는 필터링이 적용될 수 있습니다.\n     *\n     * Prisma discussionboard_comments.content에 해당합니다.\n     */\n    content: string;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardComments.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardComments } from \"./IDiscussionboardComments\";\n\n/**\n * 댓글 목록, 필터/페이징 결과 컨테이너 타입.\n *\n * Discussionboard_comments의 복수 row 리턴 구조로, moderation 및 게시글 코멘트 뷰에 일괄 사용됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardComments = {\n  /**\n   * 댓글 목록 페이지 네이션 정보.\n   *\n   * 현재 페이지, 페이지당 항목, 전체 레코드 수, 전체 페이지 수 등 메타 정보.\n   */\n  pagination: IPage.IPagination;\n\n  /**\n   * Discussionboard_comments에 대한 comment row 객체의 배열.\n   *\n   * 페이지 조건에 맞는 댓글 조회 결과 목록입니다.\n   */\n  data: IDiscussionboardComments[];\n};\n",
      "src/api/structures/IDiscussionboardComment.ts": "import { IDiscussionboardComments } from \"./IDiscussionboardComments\";\n\n/**\n * 댓글 단건 엔터티에 대한 alias 및 참조 용. 구조와 설명은 IDiscussionboardComments와 동일합니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardComment = IDiscussionboardComments;\nexport namespace IDiscussionboardComment {\n  /**\n   * 댓글 수정 요청 객체. 수정 대상 댓글의 UUID는 URL 파라미터 등에서 별도로 명시하며, 본문에는 새 내용만 입력합니다.\n   *\n   * Prisma discussionboard_comments UPDATE 목적의 요청 타입입니다.\n   */\n  export type IUpdate = {\n    /**\n     * 수정할 댓글의 내용. 수정 시 반드시 본문이 포함되어야 하며, 정책에 따라 길이제한·필터링 등이 적용될 수 있습니다.\n     *\n     * Prisma discussionboard_comments.content에 해당합니다.\n     */\n    content: string;\n  };\n}\n",
      "src/api/structures/IDiscussionboardLike.ts": "import { tags } from \"typia\";\n\n/**\n * 좋아요 데이터 단일 엔터티. 게시글/댓글에 대한 유저의 Like 기록 단위.\n *\n * Prisma discussionboard_likes 테이블 전체 구조 반영.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardLike = {\n  /**\n   * 좋아요 데이터의 고유 식별자(UUID).\n   *\n   * Prisma discussionboard_likes.id 컬럼 참조.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /** 좋아요를 누른 사용자(UUID). Prisma discussionboard_likes.user_id 컬럼. */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\n   *\n   * Prisma discussionboard_likes.post_id 컬럼.\n   */\n  post_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * 좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\n   *\n   * Prisma discussionboard_likes.comment_id 컬럼.\n   */\n  comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /** 좋아요 이벤트의 생성일시(ISO 8601). Prisma discussionboard_likes.created_at 컬럼. */\n  created_at: string & tags.Format<\"date-time\">;\n\n  /**\n   * 좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma\n   * discussionboard_likes.deleted_at 컬럼.\n   */\n  deleted_at?: (string & tags.Format<\"date-time\">) | null;\n};\nexport namespace IDiscussionboardLike {\n  /**\n   * 좋아요(Like) 엔터티 검색 및 페이징 리스트 반환 요청 타입. 다양한 필터(작성자, 게시글/댓글, 기간, 삭제여부 등)와\n   * 페이징이 포함됨.\n   */\n  export type IRequest = {\n    /**\n     * 좋아요를 만든 사용자(UUID). 필터 조건으로 사용 시 입력. Prisma\n     * discussionboard_likes.user_id 컬럼에 해당.\n     */\n    user_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * 해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma\n     * discussionboard_likes.post_id 컬럼.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma\n     * discussionboard_likes.comment_id 컬럼.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /** (선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색. */\n    created_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /** (선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색. */\n    created_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 삭제(soft delete)된 좋아요 포함 여부. 기본값(false)인 경우 deleted_at이 null인 데이터만 반환. */\n    include_deleted?: boolean;\n\n    /** 페이지 번호(1-base). 기본값은 1. */\n    page: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"uint32\";\n      }>;\n\n    /** 한 페이지당 반환 row 수. 기본값 및 최대값(예:1000)은 정책에 따라 조정. */\n    limit: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"uint32\";\n      }>;\n  };\n\n  /**\n   * 좋아요(Like) 등록 요청 데이터. 게시글 또는 댓글을 하나만 지정해야 하며, 클라이언트가 인증된 사용자와 일치해야 함.\n   *\n   * Prisma discussionboard_likes CREATE 시 필요한 payload.\n   */\n  export type ICreate = {\n    /**\n     * 좋아요를 만드는 사용자(UUID). 클라이언트의 인증 정보와 일치해야 함. Prisma\n     * discussionboard_likes.user_id.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /** 좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력. */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /** 좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력. */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n  };\n\n  /**\n   * 좋아요 기록 수정 요청 객체. 해제(소프트 삭제) 또는 복구 목적. 수정 가능한 필드는 deleted_at 등 상태 전환 속성만\n   * 허용함.\n   */\n  export type IUpdate = {\n    /** 좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null. */\n    deleted_at?: (string & tags.Format<\"date-time\">) | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardLike.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardLike } from \"./IDiscussionboardLike\";\n\n/**\n * 좋아요 목록의 페이지네이션 컨테이너. 페이징 정보와 좋아요 데이터 배열을 함께 제공합니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardLike = {\n  pagination: IPage.IPagination;\n\n  /** 좋아요 엔터티 목록. 한 페이지에 포함된 discussionboard_likes 레코드들의 배열. */\n  data: IDiscussionboardLike[];\n};\n",
      "src/api/structures/IDiscussionboardReport.ts": "import { tags } from \"typia\";\n\n/**\n * 신고 데이터 단일 엔터티. 게시글 또는 댓글에 대한 abuse/spam 신고 이벤트.\n *\n * Prisma discussionboard_reports 테이블 전체 구조 반영.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardReport = {\n  /**\n   * 신고 고유 식별자(UUID).\n   *\n   * Prisma discussionboard_reports.id 컬럼.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 신고를 제기한 회원 UUID.\n   *\n   * Prisma discussionboard_reports.user_id 컬럼.\n   */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /** 신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재. */\n  post_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /** 신고 대상 댓글 UUID. 댓글 대상일 때 해당. */\n  comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * 신고 사유 코드(정책에서 사전 정의, 예: 'abuse', 'spam' 등).\n   *\n   * Prisma discussionboard_reports.reason_code 컬럼.\n   */\n  reason_code: string;\n\n  /**\n   * 신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma\n   * discussionboard_reports.reason_details 컬럼.\n   */\n  reason_details?: string | null;\n\n  /** 신고 생성일시(ISO 8601). Prisma discussionboard_reports.created_at 컬럼. */\n  created_at: string & tags.Format<\"date-time\">;\n\n  /** 신고의 소프트삭제 일시. 삭제 되지 않은 경우 null. */\n  deleted_at?: (string & tags.Format<\"date-time\">) | null;\n};\nexport namespace IDiscussionboardReport {\n  /**\n   * 신고 목록(페이징) API의 검색 조건 객체. 사용자 ID, 신고 대상(post/comment), 사유코드, 생성일 등 다양한\n   * 조건으로 필터링하며, 삭제 포함 여부/페이징 지원.\n   */\n  export type IRequest = {\n    /**\n     * 신고를 생성한 회원 UUID. 해당 사용자의 신고만 조회할 때 필터로 지정.\n     *\n     * Prisma discussionboard_reports.user_id 컬럼.\n     */\n    user_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * 신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\n     *\n     * Prisma discussionboard_reports.post_id 컬럼.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\n     *\n     * Prisma discussionboard_reports.comment_id 컬럼.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\n     *\n     * Prisma discussionboard_reports.reason_code 컬럼.\n     */\n    reason_code?: string | null;\n\n    /** 신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터. */\n    created_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터. */\n    created_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 삭제(soft delete)된 신고 포함 여부. 기본값 false. */\n    include_deleted?: boolean;\n\n    /** 페이지 번호(1-base). 기본값 1. */\n    page: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"uint32\";\n      }>;\n\n    /** 페이지 당 row 개수. 기본 및 최대는 정책에 따라 조정. */\n    limit: number &\n      tags.Type<\"int32\"> &\n      tags.JsonSchemaPlugin<{\n        format: \"uint32\";\n      }>;\n  };\n\n  /**\n   * Represents the payload for creating a new item in the\n   * 'discussionboard_reports' table (abuse/spam/guideline violation\n   * reports).\n   *\n   * Aligns with the reporting requirements described in 3.4 and 3.5 of the\n   * requirements analysis and supports the polymorphic reporting of both\n   * posts and comments. All fields must be strictly normalized and validated\n   * as per discussionboard schema-04-interaction.prisma.\n   */\n  export type ICreate = {\n    /**\n     * The unique identifier (UUID) of the user submitting the report.\n     *\n     * Refer to the 'discussionboard_user' table and the requirements in\n     * 02_discussionboard_functional_requirements.md Section 3.4\n     * (Reporting). This property enables system-level association of\n     * user-originated abuse or spam reports with their reporter, supporting\n     * audit trails, notification, and moderation workflows.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * The UUID of the post being reported, if the report targets a post.\n     *\n     * Refer to the 'discussionboard_post' table. This field supports\n     * polymorphic reporting scenarios (reported content is a post).\n     * Nullable: set to null when reporting a comment instead. Ensures\n     * normalization by referencing the core post entity only when\n     * appropriate. Corresponds to design patterns in\n     * schema-04-interaction.prisma (discussionboard_reports).\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * The UUID of the comment being reported, if the report targets a\n     * comment.\n     *\n     * Refer to the 'discussionboard_comments' table. This field supports\n     * polymorphic reporting scenarios (reported content is a comment).\n     * Nullable: set to null when reporting a post instead. This enables\n     * consistent, atomic tracking of report targets.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * A structured code representing the reason for the report (e.g.,\n     * 'abuse', 'spam', or 'off-topic').\n     *\n     * This property must match preapproved system values to allow\n     * downstream moderation analytics and workflow automation. The value is\n     * validated at the application level. Ensures systematization of abuse\n     * categories as required in reporting workflows.\n     */\n    reason_code: string;\n\n    /**\n     * Optional, extended rationale or context for the report as entered by\n     * the reporting user.\n     *\n     * Nullable. Useful for appeals and detailed moderation review per\n     * 02_discussionboard_functional_requirements.md Section 3.4. Not\n     * mandatory; if omitted, the reason_code should provide high-level\n     * context.\n     */\n    reason_details?: string | null;\n  };\n\n  /**\n   * Update payload for a report in the 'discussionboard_reports' table.\n   *\n   * Uses fields relevant for revision prior to or during moderation review.\n   * Aligns with flexible reporting flows as defined in the requirements\n   * analysis (Section 3.4, 3.5).\n   */\n  export type IUpdate = {\n    /**\n     * Updated code for the report reason (e.g., 'abuse', 'spam').\n     *\n     * May be used to change or clarify the violation category. Application\n     * logic validates values as per platform rules.\n     */\n    reason_code: string;\n\n    /**\n     * Optionally revised or appended contextual information for the report.\n     *\n     * Editable before or during moderation workflow, supporting detail\n     * correction or appeals as described in requirements Section 3.4 and\n     * corresponding moderation flows.\n     */\n    reason_details?: string | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardReport.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardReport } from \"./IDiscussionboardReport\";\n\n/**\n * 신고 목록 페이징 데이터 컨테이너. pagination과 신고 엔터티 배열.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardReport = {\n  pagination: IPage.IPagination;\n\n  /** 신고 데이터 각 페이지당 레코드 배열. */\n  data: IDiscussionboardReport[];\n};\n",
      "src/api/structures/IDiscussionboardModerationAction.ts": "import { tags } from \"typia\";\n\n/**\n * Represents a single moderation action event as recorded in\n * discussionboard_moderation_action.\n *\n * Contains all atomic fields needed for detailed review, appeals handling, and\n * moderation dashboards. Follows audit and traceability best practices in\n * platform governance.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardModerationAction = {\n  /**\n   * Unique UUID (primary key) for this moderation action.\n   *\n   * Directly mirrors the 'id' column from discussionboard_moderation_action.\n   * Required for detailed lookup and audit traceability.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * UUID of the user (admin/moderator) who performed the moderation action.\n   *\n   * References the 'actor_id' in the moderation audit and is essential for\n   * establishing system accountability (actor/issuer relationship).\n   */\n  actor_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * UUID of the user who received or was targeted by the moderation action.\n   *\n   * Establishes referential traceability as per requirements for reporting,\n   * appeal, and audit (connects disciplinary action to the affected user).\n   */\n  target_user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Nullable UUID of the post affected by this moderation action, if\n   * applicable.\n   *\n   * Populated for content moderation targeting a specific post (e.g.,\n   * deleted/hidden posts).\n   */\n  post_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Nullable UUID of the comment affected by this moderation action, if\n   * applicable.\n   *\n   * Supports ticketing, escalation, and moderation workflows at the comment\n   * (thread) level.\n   */\n  comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * The type of moderation action (e.g., 'delete_post', 'ban_user',\n   * 'hide_comment', etc.).\n   *\n   * Enables categorical review, analytics, and streamlined workflow\n   * automation as per requirements for content governance.\n   */\n  action_type: string;\n\n  /**\n   * Textual rationale for the moderation action as entered by the\n   * moderator/admin.\n   *\n   * Critical for supporting user appeals and ensuring system transparency;\n   * referenced in user notification and appeals dashboards.\n   */\n  reason: string;\n\n  /**\n   * Timestamp (ISO 8601) recording when the moderation action was performed\n   * (row creation time).\n   *\n   * Used for audit review, analytics, and regulatory compliance.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardModerationAction {\n  /**\n   * Query/filter/pagination request object for listing moderation actions.\n   *\n   * Supports advanced searching, filtering, and pagination for the\n   * discussionboard_moderation_action table, enabling comprehensive\n   * moderation review and dashboard analytics.\n   */\n  export type IRequest = {\n    /**\n     * Optionally filter by the moderator/admin (actor) who performed the\n     * moderation action.\n     *\n     * Nullable, to allow unfiltered or broad searches. Corresponds to\n     * 'actor_id' field of 'discussionboard_moderation_action'. Used for\n     * moderation transparency in audit dashboards.\n     */\n    actor_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally filter by the target user who received moderation action.\n     *\n     * This allows searches for all moderation events affecting a specific\n     * user, supporting audit and appeals functionality.\n     */\n    target_user_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally filter by action type (e.g. 'delete_post', 'hide_comment',\n     * 'ban_user').\n     *\n     * Nullable for broad queries. This enables targeted searches for\n     * type-specific moderation activity as per the requirements for\n     * moderator/admin oversight.\n     */\n    action_type?: string | null;\n\n    /**\n     * Optionally filter for moderation actions impacting a particular post.\n     *\n     * Nullable—corresponds to the 'post_id' of\n     * 'discussionboard_moderation_action'. Important for post-centric audit\n     * workflows.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally filter for moderation actions affecting a specific\n     * comment.\n     *\n     * Nullable—enables searches for comment-based moderation (e.g., hidden\n     * or deleted comments).\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally filter for moderation actions created after this ISO 8601\n     * timestamp.\n     *\n     * Nullable. Enables auditing by date range for moderation history.\n     */\n    created_at_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /**\n     * Optionally filter for moderation actions created before this ISO 8601\n     * timestamp.\n     *\n     * Nullable. Used for date range filtering as per requirements for\n     * dashboard review.\n     */\n    created_at_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /**\n     * The maximum number of moderation actions to return (pagination\n     * limit).\n     *\n     * Nullable; defaults to a platform default if omitted. Avoids excessive\n     * data transfer in admin workflows.\n     */\n    limit?: (number & tags.Type<\"int32\"> & tags.Minimum<1>) | null;\n\n    /**\n     * Zero-based offset of the first moderation action to return\n     * (pagination offset).\n     *\n     * Nullable; enables paged retrieval for large result sets.\n     */\n    offset?: (number & tags.Type<\"int32\"> & tags.Minimum<0>) | null;\n  };\n\n  /**\n   * Creation payload to log a new moderation action.\n   *\n   * This is the write-end for 'discussionboard_moderation_action' as per the\n   * audit, governance, and appeals workflows in platform requirements.\n   */\n  export type ICreate = {\n    /**\n     * UUID for the moderator/admin performing the moderation action.\n     *\n     * Required to establish issuer responsibility as per compliance and\n     * regulatory requirements (see requirements documents 02.3.5, 03).\n     */\n    actor_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * UUID of the user who is the subject/recipient of the moderation\n     * action.\n     *\n     * Directly reflects affected users in disciplinary actions and supports\n     * audit, appeals, and notification.\n     */\n    target_user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Nullable UUID of a post affected by the moderation action, if\n     * relevant.\n     *\n     * Used for post-centric moderation (deletes, hides). Set to null if\n     * unrelated or the moderation event targets a comment or user action.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Nullable UUID of a comment affected by this moderation action, if\n     * relevant.\n     *\n     * Used for moderation of comment chains or individual comments. Set to\n     * null for non-comment events.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Categorical string indicating the nature of the moderation event\n     * (e.g., 'delete_post', 'warning', 'ban_user').\n     *\n     * Business logic validates admissible values as per platform rulebook\n     * (see requirements 02.3.5).\n     */\n    action_type: string;\n\n    /**\n     * The moderator/admin rationale for the action, as a freeform string to\n     * document the basis for moderation.\n     *\n     * Used for appeals, transparency, and audit.\n     */\n    reason: string;\n\n    /**\n     * The timestamp when the moderation action took place (operation time,\n     * ISO 8601).\n     *\n     * Supports time-based analytics, SLAs, and audit trace reconstruction.\n     */\n    created_at: string & tags.Format<\"date-time\">;\n  };\n\n  /**\n   * Update payload for modifying fields of a moderation action.\n   *\n   * Used for correcting, annotating, or clarifying action records as allowed\n   * under requirements for appeals and audit.\n   */\n  export type IUpdate = {\n    /**\n     * Category/type for the moderation action (e.g., 'warning',\n     * 'delete_post').\n     *\n     * May support correction/annotation during post-hoc audit or appeals\n     * process.\n     */\n    action_type?: string;\n\n    /**\n     * The updated rationale or moderator notes as freeform text.\n     *\n     * Supports traceability and transparency (justification review in\n     * audits).\n     */\n    reason?: string;\n\n    /**\n     * Nullable UUID for updating the post reference affected by this action\n     * (if applicable).\n     *\n     * May be required if moderation affects a new post on correction.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Nullable UUID for updating the comment reference affected by\n     * moderation (if applicable).\n     *\n     * Endpoints provide business logic enforcing referential integrity.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardModerationAction.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardModerationAction } from \"./IDiscussionboardModerationAction\";\n\n/**\n * Paged container for moderation action results.\n *\n * Returns a result list and pagination metadata for moderation dashboards and\n * admin audit tools.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardModerationAction = {\n  /**\n   * Pagination metadata: current page, limit, total records, total pages.\n   *\n   * Required for paged/efficient admin dashboard consumption of moderation\n   * actions.\n   */\n  pagination: IPage.IPagination;\n\n  /**\n   * Array of moderation action records for this page.\n   *\n   * Each element represents a row from discussionboard_moderation_action,\n   * fully normalized, ready for detailed rendering or further audit\n   * workflows.\n   */\n  data: IDiscussionboardModerationAction[];\n};\n",
      "src/api/structures/IDiscussionboardReportReview.ts": "import { tags } from \"typia\";\n\n/**\n * Represents a finalized review of a user report (abuse/spam).\n *\n * Contains all atomic fields for reference and appeal, enabling audit/analytics\n * as specified in moderation/reporting workflows.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardReportReview = {\n  /**\n   * Globally unique identifier for this report review in\n   * 'discussionboard_report_review'.\n   *\n   * Required for lookup, reference from workflow dashboards, and audit\n   * compliance.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * UUID of the abuse/spam report under review.\n   *\n   * Corresponds to 'id' in 'discussionboard_reports', supporting full\n   * referential trace during moderation workflow.\n   */\n  report_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Moderator or admin (UUID) who reviewed the report.\n   *\n   * Provides traceability, accountability, and analytics for compliance.\n   */\n  reviewer_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * If applicable, the UUID of the post connected to the reviewed report.\n   *\n   * Null if the report is not linked to a post. Supports post-centric review\n   * flows.\n   */\n  post_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * If applicable, the UUID of the comment connected to the reviewed report.\n   *\n   * Null unless the review event targets comment-level content.\n   */\n  comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Resolution status for the reviewed report (e.g., 'resolved', 'rejected',\n   * 'pending').\n   *\n   * Used for dashboards, reporting appeals, and analytics.\n   */\n  review_status: string;\n\n  /**\n   * Optional notes/justification by the reviewing moderator or admin.\n   *\n   * Supports audit, transparency, and appeals support in moderation\n   * workflows. Nullable if no comment provided.\n   */\n  moderator_comment?: string | null;\n\n  /**\n   * ISO 8601 timestamp (reviewed_at) when the review was submitted or\n   * finalized.\n   *\n   * Used for audit, analytics, and process SLAs.\n   */\n  reviewed_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardReportReview {\n  /**\n   * Query/filter request for paginating and searching report review logs.\n   *\n   * Used in moderation dashboards and admin audit panels for traceable report\n   * resolution workflows.\n   */\n  export type IRequest = {\n    /**\n     * Optionally filter reviews by the moderator/admin (reviewer) who\n     * handled the report.\n     *\n     * Nullable for broad or unfiltered searches. Corresponds to\n     * 'reviewer_id' in 'discussionboard_report_review'.\n     */\n    reviewer_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally restrict to reviews for a specific report/event, by UUID.\n     *\n     * Nullable to support broad audit queries. Provides targeted history\n     * for report outcomes.\n     */\n    report_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally filter by the post ID reviewed in connection with the\n     * report.\n     *\n     * Nullable; enables traceability to specific content and escalation\n     * tracking.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally filter by comment ID if the review is related to a comment\n     * report.\n     *\n     * Nullable for thread-specific audit flows.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * String filter for status of report review (e.g., 'resolved',\n     * 'pending', 'rejected').\n     *\n     * Nullable, allowing for holistic or targeted queries depending on\n     * audit needs.\n     */\n    review_status?: string | null;\n\n    /**\n     * ISO 8601 timestamp for earliest review date (inclusive), for time\n     * window search.\n     *\n     * Nullable, enabling efficient audit process for compliance spans.\n     */\n    reviewed_at_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /**\n     * ISO 8601 timestamp for latest review date (inclusive), for time\n     * window search.\n     *\n     * Nullable—enables time range queries for workflow analytics.\n     */\n    reviewed_at_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /**\n     * Max number of items to return (pagination limit).\n     *\n     * Nullable; defaults to platform standard if omitted. Avoids excessive\n     * page sizes.\n     */\n    limit?: (number & tags.Type<\"int32\"> & tags.Minimum<1>) | null;\n\n    /**\n     * Zero-based result offset for pagination.\n     *\n     * Nullable; supports efficient dashboard drilldown and history review.\n     */\n    offset?: (number & tags.Type<\"int32\"> & tags.Minimum<0>) | null;\n  };\n\n  /**\n   * Request payload for creating a new report review event.\n   *\n   * Records all state transitions for moderation workflows as outlined in\n   * platform reporting and moderation requirements.\n   */\n  export type ICreate = {\n    /**\n     * UUID of the reported abuse/spam/violation event being reviewed.\n     *\n     * Implementing full audit and referential integrity to\n     * 'discussionboard_reports'. Required per moderation process.\n     */\n    report_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * UUID for the reviewing moderator/admin user.\n     *\n     * Identifies responsible actor for compliance tracking.\n     */\n    reviewer_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Optional: UUID of the post associated with this review (if any).\n     *\n     * Null for comment-only reports. Used to link resolution outcomes with\n     * specific content in compliance tracking.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optional: UUID of the comment associated (if any) for comment-level\n     * reviews.\n     *\n     * Null indicates the review is not comment-centric.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Resolution outcome for the reviewed report (e.g. 'resolved',\n     * 'pending', 'rejected').\n     *\n     * Required for workflow state tracking and compliance.\n     */\n    review_status: string;\n\n    /**\n     * Optional notes/explanation added by reviewer to clarify outcome.\n     *\n     * Nullable—used for transparency and workflow completeness. Recommended\n     * for detailed moderation reviews.\n     */\n    moderator_comment?: string | null;\n\n    /**\n     * Timestamp (ISO 8601) for when the review was conducted.\n     *\n     * Mandated for audit, SLA, and analytics workflows.\n     */\n    reviewed_at: string & tags.Format<\"date-time\">;\n  };\n\n  /**\n   * Update payload for a report review record.\n   *\n   * Used for correction, appeal documentation, or linking to new content\n   * references as allowed in post-hoc review/audit.\n   */\n  export type IUpdate = {\n    /**\n     * Updated string for the review's status (e.g., 'resolved', 'pending',\n     * 'rejected').\n     *\n     * Enables post-hoc correction, annotation, or process-tracking\n     * adjustments.\n     */\n    review_status?: string;\n\n    /**\n     * Updated notes/justification from the moderator or admin reviewing the\n     * report.\n     *\n     * Nullable, used for ongoing transparency as required in audit/appeals\n     * processes.\n     */\n    moderator_comment?: string | null;\n\n    /**\n     * Optional UUID linking the review to a post (if applicable after\n     * update).\n     *\n     * Nullable for workflows that adjust content linkage as part of an\n     * appeal or correction.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optional UUID linking the review to a comment (if applicable after\n     * update).\n     *\n     * Enables corrections or clarifications during the appeals or\n     * moderation refinement process.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardReportReview.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardReportReview } from \"./IDiscussionboardReportReview\";\n\n/**\n * Paged result container for report review search/list endpoints.\n *\n * Supports efficient retrieval of review histories and moderation workflow\n * analysis.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardReportReview = {\n  /**\n   * Pagination information: current page, results per page, total records,\n   * and page count.\n   *\n   * Required for normalization and supporting dashboard UIs for report\n   * reviews.\n   */\n  pagination: IPage.IPagination;\n\n  /**\n   * Array of reviewed report records for this page.\n   *\n   * Each entry is a detailed, atomic record—prepared for appeals, moderation\n   * metrics, or audit review.\n   */\n  data: IDiscussionboardReportReview[];\n};\n",
      "src/api/structures/IDiscussionboardWarning.ts": "import { tags } from \"typia\";\n\n/**\n * 경고(WARNING) 단일 레코드 데이터\n *\n * 모더레이터 또는 관리자에 의해 특정 유저에게 발급된 공식 경고 기록. 경고 수신자, 발급자, 발급 사유/유형 및 연관된 게시글/댓글, 실제\n * 메시지와 타임스탬프를 제공합니다. 이 정보는 ban 근거 자료, 사용자 프로필의 경고 내역, 관리자 대시보드 등에 직접 노출됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardWarning = {\n  /**\n   * 경고 고유 식별자(UUID)\n   *\n   * 디비 내에서 유일성을 보증하는 기본 키입니다.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 경고 발급자(관리자/모더레이터) 사용자의 UUID\n   *\n   * 행위자 감사, 권한 관리, 향후 dispute 처리에서 활용합니다.\n   */\n  issued_by_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 경고 대상 사용자 UUID\n   *\n   * 경고 이력 추적, 사용자 별 경고 집계 등에 사용됩니다.\n   */\n  issued_to_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 경고와 연관된 게시글 UUID (nullable)\n   *\n   * 구체적 게시글이나 맥락 제공/감사 시 활용합니다.\n   */\n  post_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * 경고와 연관된 댓글 UUID (nullable)\n   *\n   * 해당 경고와 직접 연결된 댓글이 있는 경우 참조됩니다.\n   */\n  comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * 경고 유형 -- abuse, spam, 기타 플랫폼 정책에 따른 유형을 저장합니다.\n   *\n   * 관리/모더레이터가 경고 정책 및 토큰 기반 제재를 누적 또는 분류할 때 활용됩니다.\n   */\n  warning_type: string;\n\n  /**\n   * 실제 발급 메시지(설명)\n   *\n   * 경고의 사유 또는 상세 설명으로, 사용자에게 제공되는 실제 안내 메시지입니다.\n   */\n  message: string;\n\n  /**\n   * 경고 발급 시각(UTC 시간, ISO8601 양식)\n   *\n   * 발급 이력 또는 기간별 통계 등에 사용합니다.\n   */\n  issued_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardWarning {\n  /**\n   * 경고(Warnings) 목록 또는 상세 검색 요청 파라미터.\n   *\n   * 특정 경고의 조건(발급자, 수신자, 유형, 포스트/댓글, 기간 등)으로 필터링 검색 및 페이지네이션을 위한 입력 스키마입니다. 모든\n   * 필드는 선택적이며, 필요한 조건만 전달 가능합니다.\n   */\n  export type IRequest = {\n    /**\n     * Warning의 고유 식별자(UUID)입니다.\n     *\n     * 해당 경고 기록을 특정하여 검색할 때 사용됩니다. 관리/감사 흐름에서는 필요시 이 필드를 기준으로 특정 경고만 조회할 수\n     * 있습니다.\n     */\n    id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * 경고를 발급한 담당(관리자/모더레이터) 계정의 사용자 ID(UUID)입니다.\n     *\n     * 발급자에 의해 필터링 및 감사 로그에서 사용됩니다.\n     */\n    issued_by_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * 경고를 받은 대상 사용자 ID(UUID)입니다.\n     *\n     * 경고 내역을 사용자별로 필터링하거나, 유저 상세 화면에서 전체 경고내역을 조회할 때 활용됩니다.\n     */\n    issued_to_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * 경고 유형(예: abuse, spam 등)\n     *\n     * 업무 분류를 목적으로 사용합니다. 관리자/모더레이터가 경고 기록을 유형별로 통계, 필터링하거나, 이후 ban 정책/자동화\n     * 규칙에 연동할 때 기준이 됩니다.\n     */\n    warning_type?: string;\n\n    /**\n     * 경고가 특정 포스트에 대한 경우, 해당 포스트의 UUID입니다.\n     *\n     * 관련 포스트 단위로 필터링하거나 경고 내역에 구체적 맥락을 부여할 때 사용됩니다.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 경고와 관련된 코멘트가 있는 경우, 해당 코멘트의 UUID입니다.\n     *\n     * 경고와 코멘트의 연동감사·구체적 맥락 부여에 사용됩니다.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 경고가 발행된 UTC 시각(ISO8601 Date Time)\n     *\n     * 경고 발급 시점 기준으로 정렬, 범위 검색 등에 사용됩니다.\n     */\n    issued_at?: string & tags.Format<\"date-time\">;\n\n    /**\n     * 페이지 번호 (페이지네이션 요청용)\n     *\n     * 대량 데이터 요청에서 결과 페이지를 제어합니다.\n     */\n    page?: (number & tags.Type<\"int32\">) | null;\n\n    /**\n     * 페이지 당 결과 수 (페이지네이션 요청용)\n     *\n     * 기본값 또는 클라이언트 지정 값으로 제한합니다.\n     */\n    limit?: (number & tags.Type<\"int32\">) | null;\n  };\n\n  /**\n   * 새 경고 발급 생성 요청에 필요한 필드\n   *\n   * 플랫폼 관리자나 모더레이터가 사용자에게 신규 경고를 발급할 때 전달하는 데이터 구조입니다. 정책·자동화 시스템에서 직접 호출할 수\n   * 있습니다.\n   */\n  export type ICreate = {\n    /**\n     * 경고를 발급하는 담당(관리자/모더레이터) 계정의 사용자ID(UUID)\n     *\n     * 행위자 감사 등에서 활용.\n     */\n    issued_by_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * 경고를 받는 사용자 ID(UUID)\n     *\n     * 경고의 수신자입니다.\n     */\n    issued_to_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * 경고의 유형(예: abuse, spam 등)\n     *\n     * 플랫폼 정책 분류, 추후 ban의 기준, 통계 등에서 활용함.\n     */\n    warning_type: string;\n\n    /**\n     * 경고 메시지(실제 설명)\n     *\n     * 플랫폼/관리자/모더레이터가 경고의 사유를 명확히 남길 때 사용됩니다.\n     */\n    message: string;\n\n    /**\n     * 해당 경고와 연관된 게시글의 UUID(선택)\n     *\n     * 게시글 단위로 맥락화할 때 사용, 반드시 필요하지 않음.\n     */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 해당 경고와 관련된 댓글 UUID(선택)\n     *\n     * 코멘트 맥락 제공을 위한 선택 제출 필드.\n     */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n  };\n\n  /**\n   * 경고 수정(메시지, 유형 등) 요청\n   *\n   * 경고의 메시지, 유형, 참조 링크(포스트/코멘트)를 수정해야 할 때 사용합니다. 발급/수정은 감사 내역에 저장됩니다.\n   */\n  export type IUpdate = {\n    /** 갱신할 경고 유형. (예: abuse, spam 등) */\n    warning_type: string;\n\n    /** 갱신할 경고 메시지(설명) */\n    message: string;\n\n    /** 수정할 게시글 reference (nullable) */\n    post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /** 수정할 댓글 reference (nullable) */\n    comment_id?: (string & tags.Format<\"uuid\">) | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardWarning.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardWarning } from \"./IDiscussionboardWarning\";\n\n/**\n * 경고 기록 목록의 페이지네이션 결과 컨테이너\n *\n * 경고 목록을 페이지 단위로 조회할 때, 실제 데이터 목록과 전체 페이지/레코드 정보를 제공합니다. 관리/감사 UI 및 사용자 프로필 경고\n * 내역 등에서 사용합니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardWarning = {\n  pagination: IPage.IPagination;\n\n  /** 해당 페이지 내 경고 레코드 배열 */\n  data: IDiscussionboardWarning[];\n};\n",
      "src/api/structures/IPageIDiscussionboardBan.ts": "import { tags } from \"typia\";\n\nimport { IPage } from \"./IPage\";\nimport { IDiscussionboardBan } from \"./IDiscussionboardBan\";\n\n/**\n * 계정 밴(Ban) 레코드 페이지네이션 결과\n *\n * 밴 목록을 페이징 단위로 조회하며, 전체 건수와 실제 ban 데이터 배열을 포함\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardBan = {\n  pagination: IPage.IPagination;\n\n  /** 밴 레코드 배열 */\n  data: IDiscussionboardBan[];\n};\nexport namespace IPageIDiscussionboardBan {\n  /**\n   * 계정 밴(Ban) 검색 및 페이지네이션 요청 구조\n   *\n   * 특정 사용자의 밴 목록, 유형, 기간, ban 관련 경고 연동 여부 등 복수필터링·검색에 활용. 목록 API의 body 입력에\n   * 맞춥니다.\n   */\n  export type IRequest = {\n    /** 밴을 받은 사용자 UUID로 정확하게 검색할 때 사용합니다. */\n    banned_user_id?: string & tags.Format<\"uuid\">;\n\n    /** 밴을 발급한 담당자 UUID */\n    banned_by_id?: string & tags.Format<\"uuid\">;\n\n    /** 밴 유형 (mute, temp_ban, perm_ban 등 구분) */\n    ban_type?: string;\n\n    /** 발동 시각(이후) 필터(검색시작 구간) */\n    from_issued_at?: string & tags.Format<\"date-time\">;\n\n    /** 발동 시각(이전) 필터(검색종료 구간) */\n    to_issued_at?: string & tags.Format<\"date-time\">;\n\n    /** 밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등) */\n    status?: \"active\" | \"expired\";\n\n    /** 해당 밴과 연관된 warning의 UUID (검색목적) */\n    warning_id?: string & tags.Format<\"uuid\">;\n\n    /** 조회 대상 페이지 번호(페이지네이션) */\n    page?: number & tags.Type<\"int32\">;\n\n    /** 페이지 당 레코드 수 */\n    limit?: number & tags.Type<\"int32\">;\n  };\n}\n",
      "src/api/structures/IDiscussionboardBan.ts": "import { tags } from \"typia\";\n\n/**\n * 계정 밴(Ban) 단일 레코드(상세)\n *\n * 관리자/모더레이터가 발급하는 platform-level 계정 밴 기록. 밴 대상(유저), 발급자, 타입(일시정지/영구/뮤트) 및 관련\n * warning 연결, 시작-만료 시점 등 포함됨. 사용자 프로필, 대시보드, 관리 UI 등에서 사용됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardBan = {\n  /** 밴 고유 식별자(UUID) */\n  id: string & tags.Format<\"uuid\">;\n\n  /** 밴의 대상 유저 UUID */\n  banned_user_id: string & tags.Format<\"uuid\">;\n\n  /** 밴을 수행한 담당자 UUID(Admin/Moderator) */\n  banned_by_id: string & tags.Format<\"uuid\">;\n\n  /** 관련 warning UUID (nullable) */\n  warning_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /** 밴 종류(enum: mute, temp_ban, perm_ban 등). */\n  ban_type: string;\n\n  /** 밴 사유/설명(관리자·모더레이터 직접 입력) */\n  reason: string;\n\n  /** 밴 발급/시작일시(UTC) ISO 8601 */\n  issued_at: string & tags.Format<\"date-time\">;\n\n  /** 밴 해제 예정 시각(영구 밴의 경우 null) ISO 8601 */\n  expires_at?: (string & tags.Format<\"date-time\">) | null;\n};\nexport namespace IDiscussionboardBan {\n  /**\n   * 밴(Ban) 신규 생성 요청 구조\n   *\n   * 플랫폼에서 관리자/모더레이터가 계정 밴 행위를 할 때 사용. 밴 유형, 타겟, 사유, 관련 warning, 만료시점 포함됨.\n   */\n  export type ICreate = {\n    /** 밴 적용 대상 사용자 UUID */\n    banned_user_id: string & tags.Format<\"uuid\">;\n\n    /** 밴을 발급한 관리자/모더레이터 UUID */\n    banned_by_id: string & tags.Format<\"uuid\">;\n\n    /** 밴 유형: mute, temp_ban, perm_ban 등 */\n    ban_type: string;\n\n    /** 밴의 사유/설명 (관리자/모더레이터 작성) */\n    reason: string;\n\n    /** 이 밴과 직접 연관된 warning UUID (nullable) */\n    warning_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /** 밴 시작일시(UTC, ISO8601 양식) */\n    issued_at: string & tags.Format<\"date-time\">;\n\n    /** 밴 해제/만료일시(영구 밴의 경우 null) */\n    expires_at?: (string & tags.Format<\"date-time\">) | null;\n  };\n\n  /**\n   * Ban 정보 수정 요청 구조\n   *\n   * 관리자/모더레이터가 기 발급된 밴의 만료일 수정, 타입 정정, 설명수정 등 권한변경 목적.\n   */\n  export type IUpdate = {\n    /** 변경할 밴 타입 */\n    ban_type: string;\n\n    /** 변경할 이유·설명 */\n    reason: string;\n\n    /** 밴 종료일 수정(혹은 영구→일시, 일시→영구 등) */\n    expires_at?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 수정 시 경고 연동 정보 */\n    warning_id?: (string & tags.Format<\"uuid\">) | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardNotification.ts": "import { tags } from \"typia\";\n\nimport { IPage } from \"./IPage\";\nimport { IDiscussionboardNotification } from \"./IDiscussionboardNotification\";\n\n/**\n * 알림(Notification) 페이지네이션 결과 컨테이너\n *\n * 알림 내역을 한 페이지 단위로 조회 시 페이징 정보와 실제 알림 데이터 배열을 포함합니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardNotification = {\n  pagination: IPage.IPagination;\n\n  /** 해당 페이지 알림 레코드 배열 */\n  data: IDiscussionboardNotification[];\n};\nexport namespace IPageIDiscussionboardNotification {\n  /**\n   * 알림(Notification) 목록/검색 요청 파라미터 구조\n   *\n   * 사용자가 받은 알림 목록/읽음/미확인/유형별 필터, 기간별 조회 등에 사용하는 요청. 본인의 알림 목록 조회 혹은 관리자 감사시\n   * 사용됩니다.\n   */\n  export type IRequest = {\n    /** 알림을 받은 사용자 UUID. 본인 알림 목록에 필수 사용됨. */\n    recipient_user_id?: string & tags.Format<\"uuid\">;\n\n    /** 알림 유형 - reply, like, moderator_action, system_message 등 유형별 필터링용 */\n    type?: string;\n\n    /** 읽음/읽지않음 상태로 필터링 */\n    is_read?: boolean;\n\n    /** 생성시각 이후(FROM) 범위 검색 */\n    from_created_at?: string & tags.Format<\"date-time\">;\n\n    /** 생성시각 이전(TO) 범위 검색 */\n    to_created_at?: string & tags.Format<\"date-time\">;\n\n    /** 조회페이지(페이징) */\n    page?: number & tags.Type<\"int32\">;\n\n    /** 페이지당 레코드수 */\n    limit?: number & tags.Type<\"int32\">;\n  };\n}\n",
      "src/api/structures/IDiscussionboardNotification.ts": "import { tags } from \"typia\";\n\n/**\n * A single notification sent to a user, tied to a post, comment, like,\n * moderator action, or system event. Core fields are normalized according to\n * the discussionboard_notification table and all properties are derived from\n * the table's DB schema documentation and requirements. Contains atomic fields\n * for all relationships, as well as notification content and read status.\n *\n * This type allows for all queries (GET, list, audit) and powers notification\n * UI displays as well as notification processing and compliance workflows.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardNotification = {\n  /**\n   * Unique identifier for the notification record, as per the\n   * discussionboard_notification table. This primary key value is used to\n   * trace, fetch, or audit notifications. Maps directly to the 'id' DB\n   * field.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Foreign key referencing the recipient user. The user who receives this\n   * notification. Enforces personalization requirements and proper targeting.\n   * Normalized—no duplication of user data here.\n   */\n  recipient_user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Optional foreign key referencing the related post for which this\n   * notification applies (e.g., a reply, like, or moderation action). Null if\n   * notification is not post-specific. Strictly atomic—never contains post\n   * data.\n   */\n  related_post_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Optional foreign key referencing the comment involved if relevant (e.g.,\n   * a reply to a comment, or moderation of a comment). Null if notification\n   * is not comment-specific. Fully normalized.\n   */\n  related_comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Optional foreign key referencing the actor (who originated this\n   * notification, e.g., the liker, replier, or moderator). Null for system\n   * messages or passive actions. Maintains the business context of the event\n   * origin.\n   */\n  actor_user_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Type string for notification classification. Maps to allowed business\n   * events: e.g., 'reply', 'like', 'moderator_action', 'system_message'.\n   * Drives how notification is presented in the UI and how preferences are\n   * handled.\n   */\n  type: string;\n\n  /**\n   * Human-readable message string, delivered to the recipient as\n   * explanation/context. The message always describes what happened, who was\n   * involved, and what content was affected. Directly from the\n   * discussionboard_notification.message column.\n   */\n  message: string;\n\n  /**\n   * Whether the notification has been marked as read by the recipient. Used\n   * by notification preference UIs, unread message counts, etc.\n   */\n  is_read: boolean;\n\n  /**\n   * Timestamp when the notification was generated (ISO 8601, time zone\n   * aware). Critical for UI ordering, querying, and audit logs.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardNotification {\n  /**\n   * Request body type for creating a new notification record. Derived from DB\n   * model discussionboard_notification and requirements document (Section\n   * 3.7). Required by system-internal logic or admin UIs to deliver\n   * notifications, always normalized and mapped according to core\n   * notification DB structure.\n   */\n  export type ICreate = {\n    /**\n     * Foreign key referencing the user who should receive this\n     * notification. Must always be present and reflect a valid user.\n     * Determines notification targeting as per discussionboard_notification\n     * DB mapping.\n     */\n    recipient_user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Optional foreign key referencing the target post for notifications\n     * about specific posts (replies, likes, moderation). Null if not\n     * post-specific. 3NF-compliant.\n     */\n    related_post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optional foreign key referencing the comment involved, if the\n     * notification concerns a comment. Null otherwise. 3NF.\n     */\n    related_comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optional foreign key pointing to the actor user who triggered this\n     * notification (the person who replied, liked, or acted). Null for\n     * system/automated notifications.\n     */\n    actor_user_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Business-type string to indicate notification purpose—e.g., 'reply',\n     * 'like', 'moderator_action', 'system_message'. Drives notification\n     * routing and user preference logic. Must match allowed types\n     * implemented in business logic.\n     */\n    type: string;\n\n    /**\n     * Explanatory content delivered to the notification recipient, as per\n     * notification requirements. Should clearly indicate who/what action\n     * triggered the notification. Max length and formatting are managed by\n     * application code.\n     */\n    message: string;\n  };\n\n  /**\n   * Request body for updating an existing notification record. Used to mark\n   * as read, adjust content, or fix actor/post associations. Update semantics\n   * align with the business/DB design: only atomic, normalized fields and\n   * never denormalized graphs.\n   */\n  export type IUpdate = {\n    /**\n     * Optionally update the post this notification is tied to. Null if\n     * unrelated to a post. Follows atomic/normalized structure of the DB.\n     */\n    related_post_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally update the related comment (for\n     * replies/mentions/moderation). Null if not applicable. Adheres to the\n     * normalized schema.\n     */\n    related_comment_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally set or update the actor user who originated this\n     * notification (if changed or re-assigned).\n     */\n    actor_user_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optionally update the kind of notification (e.g., if the event type\n     * is recategorized). Must stay within allowed business values.\n     */\n    type?: string;\n\n    /**\n     * Optionally update the notification's explanatory message. Used for\n     * admin corrections or localized updates.\n     */\n    message?: string;\n\n    /**\n     * Allows updating read/unread status, supporting member UI flows. When\n     * set to true, notification is marked as read.\n     */\n    is_read?: boolean;\n  };\n}\n",
      "src/api/structures/IDiscussionboardNotificationPreference.ts": "import { tags } from \"typia\";\n\n/**\n * Entity representing a user's notification preference toggles. Maps exactly to\n * discussionboard_notification_preference DB table. Used to control\n * notification routing and appearance of notification settings UIs.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardNotificationPreference = {\n  /**\n   * Unique identifier for this notification preference record. Surrogate key\n   * for fetching and updating settings.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * The foreign key (to discussionboard_user) indicating which user owns this\n   * set of preferences. Always unique per user.\n   */\n  user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Does the user receive notifications on direct replies? Default is true;\n   * user can opt out. Used when showing reply-related events.\n   */\n  notify_reply: boolean;\n\n  /**\n   * Controls whether user receives likes notifications for their\n   * posts/comments. UIs show this as an individual toggle.\n   */\n  notify_like: boolean;\n\n  /**\n   * Does user get notification about moderator actions (warns, hides, etc)\n   * that affect them? Managed per user, default is true per requirements\n   * analysis.\n   */\n  notify_moderator_action: boolean;\n\n  /**\n   * Enables or disables in-app system message/announcement notifications for\n   * this user.\n   */\n  notify_system_message: boolean;\n};\nexport namespace IDiscussionboardNotificationPreference {\n  /**\n   * Request type for finding/filtering notification preferences in bulk. Used\n   * in PATCH /discussionboard/notificationPreferences and supports admin UIs,\n   * user preference management, or batch config.\n   */\n  export type IRequest = {\n    /**\n     * Filter to a specific user's notification preferences (optional). Used\n     * in admin and member UI listing/filter flows.\n     */\n    user_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * Filter by whether user has enabled reply notifications (optional).\n     * Part of admin advanced search.\n     */\n    notify_reply?: boolean;\n\n    /**\n     * Filter by whether user receives like notifications. Used in\n     * admin/config flows.\n     */\n    notify_like?: boolean;\n\n    /**\n     * Filter by whether moderator action notifications are enabled for the\n     * user.\n     */\n    notify_moderator_action?: boolean;\n\n    /** Filter by whether system messages are enabled for the user. */\n    notify_system_message?: boolean;\n\n    /**\n     * Page number for paginated results. Used as part of all list/search\n     * requests to notification preferences.\n     */\n    page?: number & tags.Type<\"int32\"> & tags.Minimum<1>;\n\n    /**\n     * Number of records per page in paginated list of notification\n     * preferences. Used for UI collections, defaults managed by service\n     * layer.\n     */\n    limit?: number & tags.Type<\"int32\"> & tags.Minimum<1>;\n  };\n\n  /**\n   * Request body for creating a user's notification preferences. Used at\n   * onboarding or by admins in user management. All booleans required,\n   * matching the DB table, and application logic enforces per-user\n   * uniqueness.\n   */\n  export type ICreate = {\n    /**\n     * Foreign key referencing the user for whom notification preferences\n     * are set. Only one record per user is allowed.\n     */\n    user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Initial setting for reply notifications (true/false). Default and\n     * config in admin or onboarding flows.\n     */\n    notify_reply: boolean;\n\n    /**\n     * Initial setting for like notifications on the user's content. Used in\n     * onboarding/config APIs.\n     */\n    notify_like: boolean;\n\n    /**\n     * Initial flag for whether the user is notified about moderator actions\n     * affecting their content.\n     */\n    notify_moderator_action: boolean;\n\n    /** Initial opt-in status for receiving system announcements. */\n    notify_system_message: boolean;\n  };\n\n  /**\n   * Update body for patching a user's notification preference record. No\n   * user_id or id—immutable after creation. Used in member UIs or admin\n   * config panels. All fields are optional booleans; omit to leave\n   * unchanged.\n   */\n  export type IUpdate = {\n    /** Update for whether reply notifications are enabled. */\n    notify_reply?: boolean;\n\n    /** Update for whether like notifications are enabled. */\n    notify_like?: boolean;\n\n    /** Update for whether moderator action notifications are enabled. */\n    notify_moderator_action?: boolean;\n\n    /** Update for whether system message notifications are enabled. */\n    notify_system_message?: boolean;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardNotificationPreference.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardNotificationPreference } from \"./IDiscussionboardNotificationPreference\";\n\n/**\n * Paginated list response for notification preference records. Contains\n * collection of IDiscussionboardNotificationPreference entities and pagination\n * context for UI and workflow management. Used in admin dashboards, settings\n * UIs, and exports.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardNotificationPreference = {\n  /**\n   * Pagination metadata (current page, per-page limit, total record count,\n   * etc.) as per platform-wide paging contract. Required for all paginated\n   * list responses.\n   */\n  pagination: IPage.IPagination;\n\n  /**\n   * List of notification preference records. Each represents a user's current\n   * notification channel/type preferences.\n   */\n  data: IDiscussionboardNotificationPreference[];\n};\n",
      "src/api/structures/IDiscussionboardAuditLog.ts": "import { tags } from \"typia\";\n\n/**\n * Single privileged action audit log, normalized 1:1 with\n * discussionboard_audit_log table. Provides complete compliance traceability\n * for all admin/moderator actions affecting users, entities or system\n * configuration. Used in all reporting and audit flows.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardAuditLog = {\n  /**\n   * Unique identifier for the audit log record. Surrogate DB key, atomically\n   * identifies each log record.\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * User who performed the privileged action. Foreign key to\n   * discussionboard_user. Used for compliance, actor attribution, and\n   * platform security review.\n   */\n  actor_user_id: string & tags.Format<\"uuid\">;\n\n  /**\n   * User who was the target of the action, or null if system/global.\n   * Nullable, depending on audit log type. E.g., target of a ban, demotion,\n   * etc.\n   */\n  target_user_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Business type string describing the action performed (e.g. 'ban',\n   * 'role_change', 'settings_update'). Critical for reasoning about log flow\n   * and categorization in dashboards.\n   */\n  action_type: string;\n\n  /**\n   * Type of entity impacted by this audit action (e.g., 'user', 'comment',\n   * 'setting', 'post'). Used for filtering/audit classification.\n   */\n  entity_type: string;\n\n  /**\n   * Nullable reference to the specific entity affected (user, post, comment,\n   * etc). Used to trace all changes to a specific object.\n   */\n  entity_id?: (string & tags.Format<\"uuid\">) | null;\n\n  /**\n   * Optional field storing additional information about the action (diffs,\n   * old/new values, rationale, etc.). Greatly aids in compliance and incident\n   * resolution; not always present for simple actions.\n   */\n  action_detail?: string | null;\n\n  /**\n   * Timestamp (ISO 8601, UTC-with-zone) when the action was performed, for\n   * audit traceability and compliance. Always populated.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardAuditLog {\n  /**\n   * Request schema for listing/searching audit log entries, used for\n   * privileged action queries, admin dashboards, and compliance reviews. Each\n   * field matches a core DB column in discussionboard_audit_log, supporting\n   * advanced filtering and efficient audit investigation.\n   */\n  export type IRequest = {\n    /**\n     * Filter results to audit logs acted on by the specified user. Enables\n     * targeted compliance review for a particular admin or moderator.\n     */\n    actor_user_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * Restrict audit logs to those that affected a specific user, e.g. all\n     * moderation actions on a particular account. Used for user-centric\n     * investigations.\n     */\n    target_user_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * Only include audit logs regarding a given action type (e.g., 'ban',\n     * 'role_change', etc.). Matches table definition.\n     */\n    action_type?: string;\n\n    /**\n     * Filter to logs affecting a specific entity type (e.g., 'user',\n     * 'comment', 'setting'). Enables entity-centric audit reviews.\n     */\n    entity_type?: string;\n\n    /**\n     * Restrict logs to those referencing a single entity id (e.g., all logs\n     * for a particular post).\n     */\n    entity_id?: string & tags.Format<\"uuid\">;\n\n    /**\n     * If set, only logs created at or after this timestamp (inclusive) are\n     * included. For audit range search.\n     */\n    created_at_from?: string & tags.Format<\"date-time\">;\n\n    /**\n     * If set, only logs created at or before this timestamp (inclusive) are\n     * included. For audit range search.\n     */\n    created_at_to?: string & tags.Format<\"date-time\">;\n\n    /** Page number in paginated audit log search results. */\n    page?: number & tags.Type<\"int32\"> & tags.Minimum<1>;\n\n    /** Number of records to return per page in search/list. */\n    limit?: number & tags.Type<\"int32\"> & tags.Minimum<1>;\n  };\n\n  /**\n   * Request body for creating a privileged action audit log entry. Used\n   * internally after sensitive workflows. Optional fields provide richer\n   * context for forensic review. Fully normalized and traceable. One entry\n   * per action; always references the performing user, type, and entity\n   * context per compliance requirements.\n   */\n  export type ICreate = {\n    /**\n     * ID of user (admin/mod) performing the action to be logged (actor).\n     * Always required. Used for entity attribution in audit trail per\n     * schema.\n     */\n    actor_user_id: string & tags.Format<\"uuid\">;\n\n    /**\n     * User affected by the action. Set if the action targets a specific\n     * user; null for global/system actions.\n     */\n    target_user_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Action type (e.g. 'ban', 'role_change', 'setting_update', etc).\n     * Populates action_type DB field and is the primary audit\n     * classification.\n     */\n    action_type: string;\n\n    /**\n     * The entity type impacted, such as 'user', 'post', 'comment',\n     * 'setting'. Enables polymorphic audit review.\n     */\n    entity_type: string;\n\n    /**\n     * Optional reference to affected entity, if applicable\n     * (user/post/comment). Null where system/global.\n     */\n    entity_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * Optional string describing specifics of the change (e.g., old/new\n     * values, human notes). Used for compliance reporting and deep trace\n     * investigations.\n     */\n    action_detail?: string | null;\n  };\n\n  /**\n   * DiscussionboardAuditLog 업데이트 요청을 위한 객체입니다.\n   *\n   * 이 타입은 감사 로그(entry) 레코드의 수정 가능한 필드를 명확히 정의해줍니다. 주로 플랫폼 운영자(관리자 및 모더레이터)가\n   * 기존의 감사 로그 레코드(annotation, audit detail 등)에 코멘트 추가나 메타데이터 정정 작업을 할 때\n   * 사용합니다.\n   *\n   * Prisma discussionboard_audit_log 테이블의 컬럼명 및 주석에 기반하여 모든 속성을 정의합니다. 불변\n   * 속성(예: actor_user_id, created_at 등)은 업데이트되지 않으며, 수정 가능한 일부\n   * 필드(action_detail 등)만 포함됩니다.\n   *\n   * 변경내용은 반드시 audit trail에 별도로 남겨야 하며, 주요 컴플라이언스 요구사항을 충족하도록 반영되어야 합니다.\n   */\n  export type IUpdate = {\n    /**\n     * Prisma discussionboard_audit_log 테이블의 action_type 컬럼에 해당합니다.\n     *\n     * 수정 가능한 경우, 감사 행위의 유형(예: ban, role_change, settings_update 등) 문자열을 재정의\n     * 할 수 있습니다. 일반적으로 타입 변경은 드물고, 주로 노트/코멘트 보정에 사용됩니다. 필요한 경우에만 수정하세요.\n     */\n    action_type?: string;\n\n    /**\n     * 감사 로그의 대상이 되는 엔티티의 타입(예: user, post, comment, setting 등)입니다.\n     * discussionboard_audit_log의 entity_type 컬럼에 해당하며, 해당 엔티티가 무엇인지 명확히 구분해\n     * 기록하는데 사용됩니다.\n     */\n    entity_type?: string;\n\n    /**\n     * 감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\n     *\n     * 특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우\n     * null이 허용됩니다.\n     */\n    entity_id?: (string & tags.Format<\"uuid\">) | null;\n\n    /**\n     * 감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\n     *\n     * Discussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role:\n     * member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\n     *\n     * Null 또는 빈 문자열일 수 있습니다.\n     */\n    action_detail?: string | null;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardAuditLog.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardAuditLog } from \"./IDiscussionboardAuditLog\";\n\n/**\n * Paginated audit log result set. Used in compliance dashboards and reporting.\n * Provides collection of audit log records and full pagination info.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardAuditLog = {\n  /**\n   * Pagination metadata describing current page/limit/record totals as\n   * referenced in platform-wide paging documentation.\n   */\n  pagination: IPage.IPagination;\n\n  /** Array of audit log records matching filter/search criteria. */\n  data: IDiscussionboardAuditLog[];\n};\n",
      "src/api/structures/IDiscussionboardPlatformSetting.ts": "import { tags } from \"typia\";\n\n/**\n * Discussionboard_platform_setting 테이블의 단일 환경설정 엔트리 구조입니다.\n *\n * 이 타입은 각 플랫폼 환경설정 레코드를 의미하며, 설정의 식별자, 이름, 값, 타입, 갱신 일시 컬럼 등 모든 주요 정보를 포함합니다.\n * 관리자가 UI나 API에서 단일 환경설정의 상세 정보를 조회(읽기), 업데이트(쓰기) 또는 삭제시, 그리고 검색 결과 리스트용 아이템에\n * 사용됩니다.\n *\n * Description(설명)은 별도에 없지만, 각 컬럼의 역할과 사용처를 Prisma schema의 주석에 기반하여 상세하게 기술했습니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDiscussionboardPlatformSetting = {\n  /** Discussionboard_platform_setting의 기본 키. 각 환경설정 레코드를 고유하게 식별하는 UUID입니다. */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * 환경설정 이름. 플랫폼 전체에서 단일하게 유니크하며, 어떤 기능/정책/설정인지 식별합니다.\n   *\n   * 예: 'EnableModerationQueue', 'MaxPostAttachments' 등\n   */\n  name: string;\n\n  /**\n   * 설정 값. 반드시 문자열(text)로 저장되며, 값의 의미/타입 판별은 'type' 필드를 참고하여 해석해야 합니다.\n   *\n   * 예: 'true', '123', '사용중' 등\n   */\n  value: string;\n\n  /**\n   * Env 값의 타입 구분자. 값의 해석을 위한 메타정보로써 보통 'boolean', 'int', 'string' 등의 값으로\n   * 표시됩니다. UI/백엔드 상 검증, 파싱에 사용합니다.\n   */\n  type: string;\n\n  /** 마지막 수정 시각. 플랫폼 환경설정 변경의 트래킹, 이력 관리, 정렬 및 필터에 활용합니다. ISO8601 타임스탬프. */\n  updated_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IDiscussionboardPlatformSetting {\n  /**\n   * 플랫폼 환경설정 목록/검색 요청 타입입니다.\n   *\n   * 이 타입은 discussionboard_platform_setting 테이블의 설정 레코드를 검색, 정렬 및 페이징하려는\n   * 관리자(관리자 전용)를 위한 필터, 정렬, 페이징 옵션을 제공합니다. 검색 필드로는 name, type, value,\n   * updated_at 등이 있습니다. 관리용 UI의 검색 바, 상세 필터 등에서 사용합니다.\n   *\n   * 구현 시 유저는 name이나 type, value, updated_at 범위 등으로 검색할 수 있으며, 대량 데이터셋을 효율적으로\n   * 조회할 수 있도록 페이징 파라미터도 제공합니다.\n   */\n  export type IRequest = {\n    /** 플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다. */\n    name?: string | null;\n\n    /**\n     * 플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\n     *\n     * 예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다.\n     */\n    type?: string | null;\n\n    /**\n     * 플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\n     *\n     * 예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다.\n     */\n    value?: string | null;\n\n    /**\n     * 검색 범위 필드입니다. updated_at >= updated_from.\n     *\n     * 특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용.\n     */\n    updated_from?: (string & tags.Format<\"date-time\">) | null;\n\n    /**\n     * 검색 범위 필드입니다. updated_at <= updated_to.\n     *\n     * 특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다.\n     */\n    updated_to?: (string & tags.Format<\"date-time\">) | null;\n\n    /** 페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주. */\n    page?: (number & tags.Type<\"int32\"> & tags.Minimum<1>) | null;\n\n    /** 페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용). */\n    limit?: (number & tags.Type<\"int32\"> & tags.Minimum<1>) | null;\n  };\n\n  /**\n   * 플랫폼 환경설정 신규 생성 요청 바디 타입입니다.\n   *\n   * Discussionboard_platform_setting 테이블에 레코드 추가시 필요한 모든 필드(이름, 값, 타입 등)가\n   * 정의되어 있습니다. 주로 관리자 전용 UI/관리패널에서 새 설정 추가시 API에 사용합니다.\n   *\n   * 모든 컬럼은 반드시 유효하게(중복 없음, 데이터 타입 일치 등) 입력되어야 합니다. 생성 시 updated_at은 시스템에서 자동\n   * 지정됩니다.\n   */\n  export type ICreate = {\n    /**\n     * 생성할 환경설정의 이름. 반드시 유일해야 하며, 알기 쉽고 명확해야 합니다. 예:\n     * 'EnableModerationQueue', 'PostImageMaxSize' 등\n     */\n    name: string;\n\n    /**\n     * 환경설정의 값. 항상 문자열로 저장해야 하며, 실제 저장/적용시에는 type에 맞게 파싱 혹은 활용합니다. 예:\n     * 'false', '200' 등\n     */\n    value: string;\n\n    /**\n     * 환경설정 값의 타입. 값이 실제로 boolean인지, 정수, 문자열인지 구분해서 저장합니다. 예: 'boolean',\n     * 'int', 'string' 등\n     */\n    type: string;\n  };\n\n  /**\n   * 플랫폼 환경설정 변경(수정) 요청 객체 타입입니다.\n   *\n   * 관리자가 기존 환경설정 레코드(이름, 값, 타입 등)를 수정할 때 사용합니다.\n   * discussionboard_platform_setting 테이블 기반이며, 일부 필드만(주로 value, type) 갱신할 수도\n   * 있습니다. 필드는 선택적이지만, 수정 대상 컬럼명에 맞게 정확히 전달해야 합니다. updated_at은 자동 관리됩니다.\n   */\n  export type IUpdate = {\n    /** 변경할 환경설정의 이름(필요시). 관리 정책 상 이름 변경은 드물지만 지원 가능하도록 허용합니다. */\n    name?: string;\n\n    /** 변경할 설정의 값. 항상 문자열로 입력 및 저장됩니다. */\n    value?: string;\n\n    /** 설정 값의 타입. 'boolean', 'int', 'string' 등으로 값의 해석을 위해 함께 변경할 수 있습니다. */\n    type?: string;\n  };\n}\n",
      "src/api/structures/IPageIDiscussionboardPlatformSetting.ts": "import { IPage } from \"./IPage\";\nimport { IDiscussionboardPlatformSetting } from \"./IDiscussionboardPlatformSetting\";\n\n/**\n * Discussionboard_platform_setting의 페이징 컬렉션 응답 타입입니다.\n *\n * 이 타입은 플랫폼 환경설정 레코드 검색 시 결과 목록 및 페이지네이션 정보를 함께 묶어 반환합니다. 일반적으로 관리자 UI에서 환경설정\n * 목록을 페이지 단위로 제공할 때 사용합니다.\n *\n * 관계형 데이터 조회, 대량 설정 데이터 핸들링, 또는 엑셀 다운로드 등에서 활용됩니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IPageIDiscussionboardPlatformSetting = {\n  pagination: IPage.IPagination;\n  data: IDiscussionboardPlatformSetting[];\n};\n",
      "src/api/structures/IDeleteResult.ts": "/**\n * 데이터 삭제 또는 삭제시도 후 반환되는 표준 응답 객체입니다.\n *\n * 이 타입은 주로 삭제(soft/hard delete) 후 결과 메시지 또는 성공/실패 플래그를 전달합니다. 백엔드 API 전반(관리용,\n * 데이터 삭제 엔드포인트 등)에서 재사용할 수 있도록 설계되었습니다.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IDeleteResult = {\n  /** 삭제 작업의 성공 여부. true면 삭제 완료, false면 삭제 실패/미수행 등 의미. */\n  success: boolean;\n\n  /**\n   * 삭제 결과 메시지. 성공시에도 간단한 안내 메시지(예: '삭제 완료'), 실패 혹은 조건부 불가(예: '참조된 데이터가 있어 삭제\n   * 불가') 등도 포함합니다.\n   */\n  message: string;\n};\n",
      "src/api/functional/discussionboard/users/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardUser } from \"../../../structures/IDiscussionboardUser\";\nimport { IPageDiscussionboardUser } from \"../../../structures/IPageDiscussionboardUser\";\n\n/**\n * Create a new user (discussionboard_user) record.\n *\n * This endpoint creates a new user master record, writing to the\n * discussionboard_user table. It handles validation for unique emails, initial\n * password hash assignment, and sets is_active to its default state according\n * to business rules. Security considerations ensure only authorized roles can\n * invoke direct creation. The operation also triggers any necessary audit\n * logging for compliance. Related operations: used in tandem with user profile\n * creation, member role assignment, and authentication flows.\n *\n * @param props.connection\n * @param props.body User registration or admin onboarding details.\n * @path /discussionboard/users\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** User registration or admin onboarding details. */\n    body: IDiscussionboardUser.ICreate;\n  };\n  export type Body = IDiscussionboardUser.ICreate;\n  export type Response = IDiscussionboardUser;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/users\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/users\";\n  export const random = (): IDiscussionboardUser =>\n    typia.random<IDiscussionboardUser>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Retrieve a paginated, searchable list of users (discussionboard_user).\n *\n * This API operation retrieves a searchable, paginated list of user master\n * records from the discussionboard_user table. It supports query capabilities\n * for filtering by activation status, creation/update timestamp, and partial\n * email matches. The endpoint is designed to be used primarily by\n * administrators and moderators for user oversight and management per the\n * defined permissions matrix. Security: Only accessible to admin or moderator\n * roles. Validation: Supports strong input validation on paging and filters,\n * and must log all access for auditability. Related operations: administrators\n * may utilize this in conjunction with the user single-record GET for\n * comprehensive user management workflows.\n *\n * @param props.connection\n * @param props.body Filtering, paging, and search parameters for listing user\n *   master records.\n * @path /discussionboard/users\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * Filtering, paging, and search parameters for listing user master\n     * records.\n     */\n    body: IDiscussionboardUser.IRequest;\n  };\n  export type Body = IDiscussionboardUser.IRequest;\n  export type Response = IPageDiscussionboardUser;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/users\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/users\";\n  export const random = (): IPageDiscussionboardUser =>\n    typia.random<IPageDiscussionboardUser>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a single user (discussionboard_user) by ID.\n *\n * This API retrieves the complete information for an individual user,\n * identified by their UUID. It is intended for use by administrators and\n * moderators in user management scenarios, such as reviewing, editing, or\n * auditing user details. The response includes all core attributes (email,\n * activation status, creation/update timestamps) and maintains security by\n * strictly permitting access to authorized roles. Related operations may\n * include list retrieval and update endpoints.\n *\n * @param props.connection\n * @param props.id User's unique identifier (UUID).\n * @path /discussionboard/users/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** User's unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardUser;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/users/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/users/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardUser =>\n    typia.random<IDiscussionboardUser>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a user (discussionboard_user) by ID.\n *\n * This API operation allows modification of selected user fields (email,\n * password hash, is_active), targeting a specific user by UUID. Security and\n * validation rules enforce role-based restrictions and data integrity per\n * requirements. The endpoint is heavily audited to track all changes for\n * compliance, and is designed for admin or moderator-initiated actions. Related\n * endpoints: single user GET, user list PATCH. Error handling robustly\n * communicates invalid updates or permission violations.\n *\n * @param props.connection\n * @param props.id User's unique identifier (UUID).\n * @param props.body Fields and values for updating the user record.\n * @path /discussionboard/users/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** User's unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Fields and values for updating the user record. */\n    body: IDiscussionboardUser.IUpdate;\n  };\n  export type Body = IDiscussionboardUser.IUpdate;\n  export type Response = IDiscussionboardUser;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/users/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/users/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardUser =>\n    typia.random<IDiscussionboardUser>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete (deactivate) a user (discussionboard_user) by ID.\n *\n * Deletes (or deactivates) a user account by UUID. This API supports\n * administrative removal flows, including compliance logging. It is designed\n * for admin-level actions, as user deletion can have significant\n * platform/customer impact. The operation typically issues a soft-delete (e.g.,\n * toggling is_active to false) and is fully audited, in line with platform\n * integrity and regulatory demands. Related: Admin dashboard user controls,\n * audit log write.\n *\n * @param props.connection\n * @param props.id User's unique identifier (UUID).\n * @path /discussionboard/users/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** User's unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardUser;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/users/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/users/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardUser =>\n    typia.random<IDiscussionboardUser>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/index.ts": "export * as users from \"./users\";\nexport * as userProfiles from \"./userProfiles\";\nexport * as members from \"./members\";\nexport * as moderators from \"./moderators\";\nexport * as admins from \"./admins\";\nexport * as posts from \"./posts\";\nexport * as postCategories from \"./postCategories\";\nexport * as postTags from \"./postTags\";\nexport * as postAttachments from \"./postAttachments\";\nexport * as comments from \"./comments\";\nexport * as likes from \"./likes\";\nexport * as reports from \"./reports\";\nexport * as moderationActions from \"./moderationActions\";\nexport * as reportReviews from \"./reportReviews\";\nexport * as warnings from \"./warnings\";\nexport * as bans from \"./bans\";\nexport * as notifications from \"./notifications\";\nexport * as notificationPreferences from \"./notificationPreferences\";\nexport * as auditLogs from \"./auditLogs\";\nexport * as platformSettings from \"./platformSettings\";\n",
      "src/api/functional/index.ts": "export * as discussionboard from \"./discussionboard\";\n",
      "src/api/functional/discussionboard/userProfiles/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardUserProfile } from \"../../../structures/IDiscussionboardUserProfile\";\nimport { IPageDiscussionboardUserProfile } from \"../../../structures/IPageDiscussionboardUserProfile\";\n\n/**\n * Create a new user profile (discussionboard_user_profile) record.\n *\n * This operation creates a new user profile, referencing the parent user\n * record, and populates display_name, avatar_url, and bio. Security: Only\n * admin/moderator roles allowed direct creation via this API. Validation:\n * requires unique user_id and all required fields as per schema. Successful\n * creation triggers audit log entries. Related: member onboarding, profile edit\n * flows.\n *\n * @param props.connection\n * @param props.body Profile creation (display name, avatar, bio, user_id).\n * @path /discussionboard/userProfiles\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Profile creation (display name, avatar, bio, user_id). */\n    body: IDiscussionboardUserProfile.ICreate;\n  };\n  export type Body = IDiscussionboardUserProfile.ICreate;\n  export type Response = IDiscussionboardUserProfile;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/userProfiles\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/userProfiles\";\n  export const random = (): IDiscussionboardUserProfile =>\n    typia.random<IDiscussionboardUserProfile>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List user profiles (discussionboard_user_profile) with search/pagination.\n *\n * This endpoint allows privileged users to retrieve and browse user profile\n * records, supporting full-text and field-level search and filters\n * (display_name, bio, etc.). The response is paginated and designed to support\n * member directories, user management workflows, and audit reporting. Security:\n * limited to moderators and admins. Validation: robust query filtering and\n * result formatting per requirements analysis. Related: GET/PATCH/PUT/DELETE\n * profile endpoints.\n *\n * @param props.connection\n * @param props.body Profile list filtering, search, and pagination request.\n * @path /discussionboard/userProfiles\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Profile list filtering, search, and pagination request. */\n    body: IDiscussionboardUserProfile.IRequest;\n  };\n  export type Body = IDiscussionboardUserProfile.IRequest;\n  export type Response = IPageDiscussionboardUserProfile;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/userProfiles\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/userProfiles\";\n  export const random = (): IPageDiscussionboardUserProfile =>\n    typia.random<IPageDiscussionboardUserProfile>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a user profile (discussionboard_user_profile) by ID.\n *\n * Fetches all stored display and personal information for an individual user's\n * profile by UUID. Used for profile detail views in administration/moderation\n * dashboards, as well as for member self-service editing. Security/permissions\n * checks ensure only proper roles may access. Data structure matches schema\n * commentary and requirements.\n *\n * @param props.connection\n * @param props.id User profile unique identifier (UUID).\n * @path /discussionboard/userProfiles/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** User profile unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardUserProfile;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/userProfiles/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/userProfiles/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardUserProfile =>\n    typia.random<IDiscussionboardUserProfile>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a user profile (discussionboard_user_profile) by ID.\n *\n * Allows modification to a single user profile by its UUID, supporting all\n * permitted fields (display name, avatar, bio, etc.). Security controls enforce\n * that only authorized roles may make such edits. Audit log entries created for\n * each change. The endpoint supports tight input validation for data quality.\n *\n * @param props.connection\n * @param props.id User profile unique identifier (UUID).\n * @param props.body Profile fields and values for update.\n * @path /discussionboard/userProfiles/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** User profile unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Profile fields and values for update. */\n    body: IDiscussionboardUserProfile.IUpdate;\n  };\n  export type Body = IDiscussionboardUserProfile.IUpdate;\n  export type Response = IDiscussionboardUserProfile;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/userProfiles/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/userProfiles/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardUserProfile =>\n    typia.random<IDiscussionboardUserProfile>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a user profile (discussionboard_user_profile) by ID.\n *\n * Removes the user profile entry with the specified UUID. This endpoint is used\n * primarily by admins for compliance-driven and support-driven cleanup tasks.\n * Operation is logged for auditability, and security enforces administrative\n * privilege.\n *\n * @param props.connection\n * @param props.id User profile unique identifier (UUID).\n * @path /discussionboard/userProfiles/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** User profile unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardUserProfile;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/userProfiles/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/userProfiles/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardUserProfile =>\n    typia.random<IDiscussionboardUserProfile>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/members/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardMember } from \"../../../structures/IDiscussionboardMember\";\nimport { IPageDiscussionboardMember } from \"../../../structures/IPageDiscussionboardMember\";\n\n/**\n * Create a new discussionboard_member entity based on the\n * discussionboard_member table.\n *\n * This API endpoint allows an administrator or system operator to create a new\n * member in the discussionboard_member table. The member role grants basic\n * participation privileges according to the permissions matrix in the\n * requirements documentation. The creation process requires associating the new\n * member with a valid discussionboard_user (user_id). This ensures that all new\n * members have a corresponding authenticated user record, and that there is no\n * role duplication or data inconsistency. The request validates the provided\n * user and ensures that no existing member role is already attached to the\n * given user_id. If the user_id is not found or already registered as a member,\n * the API will return an error.\n *\n * @param props.connection\n * @param props.body Information required to create a new member (must include\n *   user_id and grant timestamp).\n * @path /discussionboard/members\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /**\n     * Information required to create a new member (must include user_id and\n     * grant timestamp).\n     */\n    body: IDiscussionboardMember.ICreate;\n  };\n  export type Body = IDiscussionboardMember.ICreate;\n  export type Response = IDiscussionboardMember;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/members\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/members\";\n  export const random = (): IDiscussionboardMember =>\n    typia.random<IDiscussionboardMember>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List platform members (discussionboard_member) with search/pagination.\n *\n * This API returns a paginated collection of all members assigned to the\n * platform, including details such as grant timestamp and related user account\n * identifiers. Filters include active/inactive status, joining date, etc.\n * Security: Only admins and moderators can access for role management or audit\n * workflows. Related: GET member, PATCH/PUT/DELETE endpoints for role\n * adjustment.\n *\n * @param props.connection\n * @param props.body Filtering, paging, and search parameters for member role\n *   records.\n * @path /discussionboard/members\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filtering, paging, and search parameters for member role records. */\n    body: IDiscussionboardMember.IRequest;\n  };\n  export type Body = IDiscussionboardMember.IRequest;\n  export type Response = IPageDiscussionboardMember;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/members\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/members\";\n  export const random = (): IPageDiscussionboardMember =>\n    typia.random<IPageDiscussionboardMember>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific member (discussionboard_member) by ID.\n *\n * Fetches the record of a specific member role assignment, referenced by its\n * UUID. Supports administration dashboard use cases, auditing, and role\n * validation. Security: accessible only to admins and moderators. Related:\n * PATCH member list, PUT/DELETE member for role management.\n *\n * @param props.connection\n * @param props.id Member role assignment unique identifier (UUID).\n * @path /discussionboard/members/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Member role assignment unique identifier (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardMember;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/members/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/members/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardMember =>\n    typia.random<IDiscussionboardMember>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update an existing discussionboard_member entity by id in the\n * discussionboard_member table.\n *\n * This API endpoint allows administrators to update information of an existing\n * member in the discussionboard_member table. Typically, only the grant\n * timestamp or similar metadata may be updated, as member roles themselves are\n * atomic. The endpoint strictly requires sufficient privileges and validates\n * the specified id (primary key) to ensure the member entity exists.\n * Unauthorized or inappropriate attempts to escalate privileges are restricted\n * by business logic, and audit logs are maintained for such role\n * modifications.\n *\n * @param props.connection\n * @param props.id Target discussionboard_member entity id (UUID).\n * @param props.body Updated member data (must match updatable\n *   discussionboard_member fields).\n * @path /discussionboard/members/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Target discussionboard_member entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Updated member data (must match updatable discussionboard_member\n     * fields).\n     */\n    body: IDiscussionboardMember.IUpdate;\n  };\n  export type Body = IDiscussionboardMember.IUpdate;\n  export type Response = IDiscussionboardMember;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/members/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/members/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardMember =>\n    typia.random<IDiscussionboardMember>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a discussionboard_member entity (revoke member role) in the\n * discussionboard_member table by id.\n *\n * This API endpoint enables an administrator to remove a member role assignment\n * from a particular user by the member's primary key (id). This revocation is\n * closely audited, ensuring traceability. The endpoint validates the specified\n * id, deletes the member role only if it exists, and refuses to remove\n * membership from users who are currently serving as moderator/admin (unless\n * business policies specifically permit cascading removal). Operations are\n * logged for compliance.\n *\n * @param props.connection\n * @param props.id Target discussionboard_member entity id (UUID).\n * @path /discussionboard/members/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Target discussionboard_member entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardMember;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/members/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/members/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardMember =>\n    typia.random<IDiscussionboardMember>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/moderators/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardModerator } from \"../../../structures/IDiscussionboardModerator\";\nimport { IPageDiscussionboardModerator } from \"../../../structures/IPageDiscussionboardModerator\";\n\n/**\n * Create a new discussionboard_moderator assignment in the\n * discussionboard_moderator table.\n *\n * This endpoint allows admins to create and assign new moderator roles to\n * existing users. The process ensures that only users who are already members\n * (but not already moderators or admins) are eligible. The request must specify\n * the user_id and assignment date/time. The endpoint validates input and\n * records the new assignment for future audits. Creation is tightly audited and\n * triggers related permission changes for the specified user.\n *\n * @param props.connection\n * @param props.body Moderator assignment information (user_id and assignment\n *   time).\n * @path /discussionboard/moderators\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Moderator assignment information (user_id and assignment time). */\n    body: IDiscussionboardModerator.ICreate;\n  };\n  export type Body = IDiscussionboardModerator.ICreate;\n  export type Response = IDiscussionboardModerator;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/moderators\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/moderators\";\n  export const random = (): IDiscussionboardModerator =>\n    typia.random<IDiscussionboardModerator>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List/search all discussionboard_moderator entities (with pagination and\n * filters) in the discussionboard_moderator table.\n *\n * This endpoint returns a list of moderator role assignments with support for\n * pagination, search filters (such as assigned_at date, or associated user),\n * and sorting. Admins can use this API to review all current and past moderator\n * assignments. The output includes grants with their associated user ids,\n * assignment timestamps, and moderator assignment metadata. Query parameters\n * allow for narrowing the list based on assignment time or specific users. This\n * is a critical part of the admin's dashboard role and security monitoring\n * workflows.\n *\n * @param props.connection\n * @param props.body Search filters, pagination, and sort info for moderator\n *   assignment retrieval.\n * @path /discussionboard/moderators\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * Search filters, pagination, and sort info for moderator assignment\n     * retrieval.\n     */\n    body: IDiscussionboardModerator.IRequest;\n  };\n  export type Body = IDiscussionboardModerator.IRequest;\n  export type Response = IPageDiscussionboardModerator;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/moderators\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/moderators\";\n  export const random = (): IPageDiscussionboardModerator =>\n    typia.random<IPageDiscussionboardModerator>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a single discussionboard_moderator entity by id from the\n * discussionboard_moderator table.\n *\n * This API operation fetches a specific moderator assignment record from the\n * discussionboard_moderator table based on the provided id (UUID). The response\n * details the moderator's associated user account and assignment metadata,\n * supporting admin review, dashboard, and audit functionality. Error handling\n * ensures non-existent ids are reported gracefully.\n *\n * @param props.connection\n * @param props.id Target discussionboard_moderator entity id (UUID).\n * @path /discussionboard/moderators/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Target discussionboard_moderator entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardModerator;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/moderators/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/moderators/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardModerator =>\n    typia.random<IDiscussionboardModerator>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a discussionboard_moderator entity by id in the\n * discussionboard_moderator table.\n *\n * This endpoint allows an admin to update the assignment properties (e.g.,\n * timestamps) of an existing moderator entity by id. Business logic restricts\n * changing the actual user_id or role, as role escalation/demotion should use\n * separate business flows. The operation is logged and validated for admin-only\n * use, and errors are reported if the id is invalid or immutable properties are\n * attempted to be updated.\n *\n * @param props.connection\n * @param props.id Target discussionboard_moderator entity id (UUID).\n * @param props.body Updatable moderator assignment fields (assignment time,\n *   etc).\n * @path /discussionboard/moderators/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Target discussionboard_moderator entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Updatable moderator assignment fields (assignment time, etc). */\n    body: IDiscussionboardModerator.IUpdate;\n  };\n  export type Body = IDiscussionboardModerator.IUpdate;\n  export type Response = IDiscussionboardModerator;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/moderators/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/moderators/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardModerator =>\n    typia.random<IDiscussionboardModerator>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a discussionboard_moderator entry (revoke moderator role) by id in the\n * discussionboard_moderator table.\n *\n * This endpoint allows an admin to remove moderator status from a user by\n * deleting the corresponding discussionboard_moderator role entry using its id.\n * This action is audited and validated. It does not delete the underlying user\n * or member records, only the moderator assignment. Errors are thrown if\n * cascading deletes aren’t permitted or if the id is not found.\n *\n * @param props.connection\n * @param props.id Target discussionboard_moderator entity id (UUID).\n * @path /discussionboard/moderators/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Target discussionboard_moderator entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardModerator;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/moderators/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/moderators/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardModerator =>\n    typia.random<IDiscussionboardModerator>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/admins/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardAdmin } from \"../../../structures/IDiscussionboardAdmin\";\nimport { IPageDiscussionboardAdmin } from \"../../../structures/IPageDiscussionboardAdmin\";\n\n/**\n * Create a new discussionboard_admin role assignment in the\n * discussionboard_admin table.\n *\n * This endpoint lets an authorized administrator create a new admin assignment\n * (promotion) for a user, typically by specifying the target user_id and the\n * assignment timestamp. It validates eligibility, checks for duplicate admin\n * assignments, and ensures a single active admin assignment per user.\n * Assignments are tightly audited, and only current admins may perform this\n * action as per the permissions matrix.\n *\n * @param props.connection\n * @param props.body Admin role assignment information (user_id and assignment\n *   timestamp).\n * @path /discussionboard/admins\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Admin role assignment information (user_id and assignment timestamp). */\n    body: IDiscussionboardAdmin.ICreate;\n  };\n  export type Body = IDiscussionboardAdmin.ICreate;\n  export type Response = IDiscussionboardAdmin;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/admins\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/admins\";\n  export const random = (): IDiscussionboardAdmin =>\n    typia.random<IDiscussionboardAdmin>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List/search all discussionboard_admin entities (paginated, with filters) in\n * the discussionboard_admin table.\n *\n * This endpoint offers admins an overview and search interface for all platform\n * administrator assignments in the discussionboard_admin table. The payload\n * supports pagination, keyword search, and filtering by assignment date or\n * user. It forms the basis for privileged account audits, access controls, and\n * compliance verification. The operation is restricted to high privilege user\n * roles; data is indexed for efficiency.\n *\n * @param props.connection\n * @param props.body Search filters, pagination, and sorting information for\n *   retrieving admin assignments.\n * @path /discussionboard/admins\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * Search filters, pagination, and sorting information for retrieving\n     * admin assignments.\n     */\n    body: IDiscussionboardAdmin.IRequest;\n  };\n  export type Body = IDiscussionboardAdmin.IRequest;\n  export type Response = IPageDiscussionboardAdmin;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/admins\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/admins\";\n  export const random = (): IPageDiscussionboardAdmin =>\n    typia.random<IPageDiscussionboardAdmin>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a single discussionboard_admin entity by id from the\n * discussionboard_admin table.\n *\n * Fetch the details of a platform administrator role assignment by its id\n * (UUID) from the discussionboard_admin table. This supports dashboard and\n * audit workflows, validating the provided id and returning associated user and\n * role metadata. Errors for non-existent ids are handled gracefully. Only users\n * with sufficient privileges (other admins) can perform this query according to\n * the permission model.\n *\n * @param props.connection\n * @param props.id Target discussionboard_admin entity id (UUID).\n * @path /discussionboard/admins/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Target discussionboard_admin entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardAdmin;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/admins/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/admins/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardAdmin =>\n    typia.random<IDiscussionboardAdmin>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a discussionboard_admin role assignment by id in the\n * discussionboard_admin table.\n *\n * Update the assignment-related metadata (such as assigned_at) of an existing\n * administrator role entity by its id. Only admins may perform this operation,\n * and audit logs are updated accordingly. Changing the actual user_id or\n * demotion is explicitly not handled by this endpoint, which is meant only for\n * metadata updates.\n *\n * @param props.connection\n * @param props.id Target discussionboard_admin entity id (UUID).\n * @param props.body Updatable admin assignment fields, such as assignment time.\n * @path /discussionboard/admins/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Target discussionboard_admin entity id (UUID). */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Updatable admin assignment fields, such as assignment time. */\n    body: IDiscussionboardAdmin.IUpdate;\n  };\n  export type Body = IDiscussionboardAdmin.IUpdate;\n  export type Response = IDiscussionboardAdmin;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/admins/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/admins/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardAdmin =>\n    typia.random<IDiscussionboardAdmin>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete an admin record from discussionboard_admin table by its ID\n * (admin-only).\n *\n * This API operation deletes an administrator record from the\n * discussionboard_admin entity. As per the requirements documents, admin role\n * records are maintained distinctly from user, moderator, and member entries,\n * supporting 3NF and full audit compliance. Deletion of an admin role is a\n * restricted operation, only allowed for authenticated super admins via bearer\n * token, ensuring robust authorization checks. Security is paramount, as role\n * escalation and privilege management are tracked through audit logging\n * (discussionboard_audit_log). Attempting to delete an admin role that does not\n * exist results in a not-found error; permission errors trigger a forbidden\n * error. This API supports platform maintenance, role reconfiguration, and\n * compliance with the roles and permissions design clarified in the\n * requirements and schema.\n *\n * @param props.connection\n * @param props.id Target admin assignment ID for deletion\n * @path /discussionboard/admins/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Target admin assignment ID for deletion */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/admins/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/admins/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/posts/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardPost } from \"../../../structures/IDiscussionboardPost\";\nimport { IPageIDiscussionboardPost } from \"../../../structures/IPageIDiscussionboardPost\";\n\n/**\n * Create a new discussionboard_post (member role).\n *\n * Enables logged-in members to create a new discussion post in the\n * discussionboard_post entity. The incoming request body supplies all necessary\n * information (title, body, category, and optionally attachments). Validations\n * check category existence, normalized author pointer, and input length\n * constraints. Attachments are added via secondary operations post-creation.\n * Errors due to missing fields, invalid references, or authorization failure\n * return appropriate status codes and structured error responses. This\n * operation is strictly restricted to non-deleted, active members. On success,\n * returns the created post including generated ID and all populated fields.\n *\n * @param props.connection\n * @param props.body Details for the new discussion post to be created.\n * @path /discussionboard/posts\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Details for the new discussion post to be created. */\n    body: IDiscussionboardPost.ICreate;\n  };\n  export type Body = IDiscussionboardPost.ICreate;\n  export type Response = IDiscussionboardPost;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/posts\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/posts\";\n  export const random = (): IDiscussionboardPost =>\n    typia.random<IDiscussionboardPost>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Retrieve a list of discussionboard_post entries with filtering, search, and\n * pagination.\n *\n * Retrieves a list of discussion posts from the discussionboard_post entity,\n * with advanced query and pagination support in the request body. This\n * operation fulfills the requirements for filtered, paged, and searchable list\n * retrieval across all board categories. By referencing associated entities\n * like member (author), category, attachments, and moderation status, this\n * endpoint provides broad discoverability and content management. Members see\n * only visible posts; moderators/admins can query hidden/deleted posts,\n * supporting moderation workflows. Validation rules ensure query filters are\n * well-formed; errors in filtering result in 400 responses. Rate limiting and\n * role-based visibility are enforced. Related endpoints include GET\n * /discussionboard/posts/{id} (detail fetch), POST /discussionboard/posts\n * (create), and moderation actions.\n *\n * @param props.connection\n * @param props.body Filtering and pagination options for list retrieval of\n *   posts.\n * @path /discussionboard/posts\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filtering and pagination options for list retrieval of posts. */\n    body: IDiscussionboardPost.IRequest;\n  };\n  export type Body = IDiscussionboardPost.IRequest;\n  export type Response = IPageIDiscussionboardPost.ISummary;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/posts\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/posts\";\n  export const random = (): IPageIDiscussionboardPost.ISummary =>\n    typia.random<IPageIDiscussionboardPost.ISummary>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get discussionboard_post details by ID, with all associated normalized\n * references.\n *\n * Fetches the details of a specific discussion post from the\n * discussionboard_post entity using its unique ID. The response includes the\n * post metadata (title, body, timestamps), associated author/member profile,\n * category, post status (deleted/active), and attaches as per normalization\n * rules. Visibility is governed by role: general members cannot view\n * moderated/deleted content; admin/moderator tokens enable complete access.\n * Not-found errors are returned for invalid IDs or restricted access. This\n * operation complements the list, create, update and moderation endpoints.\n *\n * @param props.connection\n * @param props.id ID of the post to retrieve\n * @path /discussionboard/posts/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** ID of the post to retrieve */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardPost;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/posts/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/posts/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPost =>\n    typia.random<IDiscussionboardPost>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a discussionboard_post by ID, with authenticated/member/editor\n * enforcement.\n *\n * Updates an existing post in the discussionboard_post entity, referenced by\n * its unique ID path parameter. The operation supports only authorized\n * updates—either by the original post author or by moderators/admins for\n * moderation. The request body includes only those fields allowed for update as\n * per the requirements analysis. Authorization checks ensure proper role-based\n * access and enforce the correct update scope. Audit logging occurs for all\n * operations, and error handling provides structured responses for invalid IDs,\n * constraint violations, or insufficient permissions. This API supports post\n * editing as described in platform features and moderation flows.\n *\n * @param props.connection\n * @param props.id ID of the post to update\n * @param props.body Fields to be updated in the post. Only updatable fields\n *   must be supplied.\n * @path /discussionboard/posts/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** ID of the post to update */\n    id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Fields to be updated in the post. Only updatable fields must be\n     * supplied.\n     */\n    body: IDiscussionboardPost.IUpdate;\n  };\n  export type Body = IDiscussionboardPost.IUpdate;\n  export type Response = IDiscussionboardPost;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/posts/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/posts/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPost =>\n    typia.random<IDiscussionboardPost>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Soft delete a discussionboard_post by ID (member/privileged roles).\n *\n * Deletes a discussion post from the discussionboard_post entity identified by\n * its unique ID. The deletion is soft, flipping the deleted_at timestamp. Only\n * allowed by (a) the original member author if post is not already deleted, (b)\n * moderators for moderation, or (c) admins for compliance. Authorizations\n * provide platform protection against non-owned or already-deleted posts. This\n * operation is referenced in the requirements for content management,\n * moderation, and audit. It is tightly integrated with downstream features such\n * as post indexes and content analytics.\n *\n * @param props.connection\n * @param props.id ID of the post to soft delete\n * @path /discussionboard/posts/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** ID of the post to soft delete */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/posts/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/posts/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/postCategories/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardPostCategory } from \"../../../structures/IDiscussionboardPostCategory\";\nimport { IPageIDiscussionboardPostCategory } from \"../../../structures/IPageIDiscussionboardPostCategory\";\n\n/**\n * Create a new discussionboard_post_category (admin only).\n *\n * Enables platform admins to create a new discussionboard_post_category entity.\n * Input validation ensures the category name is unique and the description\n * field, if present, is properly formed. All operations are strictly\n * permission-checked. Name-based uniqueness is validated prior to insertion; on\n * conflict, an error is returned to the client. Audit logging captures all\n * creations. On success, returns the normalized record, including generated\n * unique ID. The endpoint is referenced in requirements for category taxonomy\n * maintenance and administrative workflows.\n *\n * @param props.connection\n * @param props.body Details for the new post category to create.\n * @path /discussionboard/postCategories\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Details for the new post category to create. */\n    body: IDiscussionboardPostCategory.ICreate;\n  };\n  export type Body = IDiscussionboardPostCategory.ICreate;\n  export type Response = IDiscussionboardPostCategory;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/postCategories\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/postCategories\";\n  export const random = (): IDiscussionboardPostCategory =>\n    typia.random<IDiscussionboardPostCategory>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Retrieve a list of discussionboard_post_category entries with filtering and\n * pagination (admin, public listing).\n *\n * Retrieves a list of discussionboard_post_category records from the\n * discussionboard_post_category entity. Input via the request body enables\n * filtering, searching, and pagination by name, description, and any other\n * indexed fields. Admin role users can view and manage all entries, while\n * member endpoints may support limited usage for category discovery. Pagination\n * is strongly enforced via the schema, supporting UI collections and\n * configuration panels. Errors are returned for invalid filter objects or\n * excessive result/page sizes. This functionality is critical for category\n * maintenance, filtering, and administration as outlined in the requirements.\n *\n * @param props.connection\n * @param props.body Filtering and pagination info for post categories.\n * @path /discussionboard/postCategories\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filtering and pagination info for post categories. */\n    body: IDiscussionboardPostCategory.IRequest;\n  };\n  export type Body = IDiscussionboardPostCategory.IRequest;\n  export type Response = IPageIDiscussionboardPostCategory;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/postCategories\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/postCategories\";\n  export const random = (): IPageIDiscussionboardPostCategory =>\n    typia.random<IPageIDiscussionboardPostCategory>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a single discussionboard_post_category by ID (admin).\n *\n * Retrieves a single discussionboard_post_category record by ID. Used by admins\n * in category management, and by members for advanced filtering/context.\n * Success responses contain all normalized category fields (name, description),\n * with strict validation of the ID parameter. Permission denied or not-found\n * errors apply for non-admin or invalid ID requests. The endpoint aligns with\n * requirements for both platform configuration and discoverability by users.\n *\n * @param props.connection\n * @param props.id ID of the post category to retrieve\n * @path /discussionboard/postCategories/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** ID of the post category to retrieve */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardPostCategory;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/postCategories/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/postCategories/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPostCategory =>\n    typia.random<IDiscussionboardPostCategory>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a discussionboard_post_category by ID (admin).\n *\n * Allows platform admins to update existing discussionboard_post_category\n * entries by unique ID. Modification is strictly permission-checked for admin\n * tokens. Supported fields in the request body include only those defined in\n * requirements. Attempting to change a category to a duplicate name or\n * providing invalid values returns an appropriate error. Audit logging ensures\n * traceability of all configuration activity. Used in admin UIs for\n * maintenance, per requirements.\n *\n * @param props.connection\n * @param props.id ID of the post category to update\n * @param props.body Fields to update on the category; only updatable fields\n *   required.\n * @path /discussionboard/postCategories/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** ID of the post category to update */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Fields to update on the category; only updatable fields required. */\n    body: IDiscussionboardPostCategory.IUpdate;\n  };\n  export type Body = IDiscussionboardPostCategory.IUpdate;\n  export type Response = IDiscussionboardPostCategory;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/postCategories/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/postCategories/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPostCategory =>\n    typia.random<IDiscussionboardPostCategory>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a discussionboard_post_category by ID (admin only,\n * constraint-enforced).\n *\n * Deletes a post category record from the discussionboard_post_category entity\n * using its unique ID. Strict business rules apply—categories assigned to\n * existing posts cannot be deleted or must be handled gracefully depending on\n * platform policy. Operation is strictly controlled for admin authority; all\n * deletions are tracked in audit logs. If the category is referenced by any\n * post, attempts to delete will fail and return an appropriate error. Errors\n * also produced if category does not exist. This API is tied to admin workflows\n * and platform taxonomy maintenance.\n *\n * @param props.connection\n * @param props.id ID of the category to delete\n * @path /discussionboard/postCategories/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** ID of the category to delete */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/postCategories/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/postCategories/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/postTags/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardPostTag } from \"../../../structures/IDiscussionboardPostTag\";\nimport { IPageIDiscussionboardPostTag } from \"../../../structures/IPageIDiscussionboardPostTag\";\nimport { IDeleteResponse } from \"../../../structures/IDeleteResponse\";\n\n/**\n * Create a new post tag (discussionboard_post_tag).\n *\n * This operation allows for the creation of a new post tag in the discussion\n * board system. The 'discussionboard_post_tag' table maintains all available\n * tags in an atomic, normalized form, used by posts to enable filtering and\n * search by topic or attribute.\n *\n * The request body must include the desired tag name and optional metadata if\n * supported. Input validation enforces name uniqueness and length/pattern\n * requirements. Only admins (or specific roles) may invoke this endpoint.\n *\n * The endpoint will create the record, store audit/log entries as required, and\n * return the full created tag entity or a reference to it. Errors can include\n * duplicate name (409), input format error (400), or unauthorized access\n * (403).\n *\n * @param props.connection\n * @param props.body Data for creating a new post tag.\n * @path /discussionboard/postTags\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Data for creating a new post tag. */\n    body: IDiscussionboardPostTag.ICreate;\n  };\n  export type Body = IDiscussionboardPostTag.ICreate;\n  export type Response = IDiscussionboardPostTag;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/postTags\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/postTags\";\n  export const random = (): IDiscussionboardPostTag =>\n    typia.random<IDiscussionboardPostTag>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Retrieve a list of discussionboard_post_tag entities with filtering and\n * pagination (admin UI, taxonomy).\n *\n * Fetches a paged, filtered list of discussionboard_post_tag entities from the\n * database. Request body carries pagination, search, filter, and sorting info,\n * enabling advanced management of tag taxonomies. Name-based search and\n * high-volume control are included for admin UIs. Strict validation limits\n * excessive page sizes or bad filters. Visibility of tags by members is\n * supported via separate endpoints where needed. Errors on invalid parameters\n * return 400; all results maintain full normalization for downstream analytics\n * or configuration flows. This endpoint is referenced in taxonomic/tag filter\n * design, admin workflows, and content analytics requirements.\n *\n * @param props.connection\n * @param props.body Filtering and pagination details for tag retrieval (admin).\n * @path /discussionboard/postTags\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filtering and pagination details for tag retrieval (admin). */\n    body: IDiscussionboardPostTag.IRequest;\n  };\n  export type Body = IDiscussionboardPostTag.IRequest;\n  export type Response = IPageIDiscussionboardPostTag;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/postTags\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/postTags\";\n  export const random = (): IPageIDiscussionboardPostTag =>\n    typia.random<IPageIDiscussionboardPostTag>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific post tag (discussionboard_post_tag) by ID.\n *\n * This operation fetches a single post tag by its unique ID from the discussion\n * board. The 'discussionboard_post_tag' table is an atomic, normalized table\n * storing only the tag identifier and name, ensuring efficient tag management\n * and search. Security is managed at the API layer and typically only admins\n * (or backend) can delete tags, but all authenticated users may read tags for\n * filtering purposes.\n *\n * This operation will take as parameter the tag's ID (UUID) and returns the\n * name and properties of the tag. The endpoint supports auditing—accesses may\n * be logged for content analytics and security compliance. Input must be\n * validated for correct UUID format. Error responses include tag not found\n * (404) or invalid input (400).\n *\n * @param props.connection\n * @param props.id The unique identifier (UUID) of the post tag to retrieve.\n * @path /discussionboard/postTags/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** The unique identifier (UUID) of the post tag to retrieve. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardPostTag;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/postTags/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/postTags/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPostTag =>\n    typia.random<IDiscussionboardPostTag>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a specific post tag (discussionboard_post_tag) by ID.\n *\n * Update an existing post tag by its unique identifier. The\n * 'discussionboard_post_tag' table maintains all tag metadata and is kept\n * atomic and normalized to avoid duplication. Only specific users (typically\n * admins) may modify tag data via this endpoint.\n *\n * The request must specify the tag ID in the URL and the new data in the\n * request body (e.g., tag name). Validation enforces uniqueness and formatting.\n * Mutation is audit-logged for compliance. Errors include tag not found (404),\n * name conflict (409), or input error (400).\n *\n * @param props.connection\n * @param props.id Unique identifier (UUID) of the tag to update.\n * @param props.body Updated tag data.\n * @path /discussionboard/postTags/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier (UUID) of the tag to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Updated tag data. */\n    body: IDiscussionboardPostTag.IUpdate;\n  };\n  export type Body = IDiscussionboardPostTag.IUpdate;\n  export type Response = IDiscussionboardPostTag;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/postTags/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/postTags/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPostTag =>\n    typia.random<IDiscussionboardPostTag>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a post tag (discussionboard_post_tag) by ID.\n *\n * Delete a post tag from the system by its UUID. The 'discussionboard_post_tag'\n * table holds all available tags in a normalized manner. This endpoint is\n * protected and generally only admins can delete tags, especially since tags\n * may be referenced by posts.\n *\n * Tag deletion initiates audit logging and ensures referential integrity\n * (cannot delete if referenced, or cascade if supported). Errors include not\n * found (404), invalid input (400), or constraint violation (409/423).\n *\n * @param props.connection\n * @param props.id The UUID of the tag to remove.\n * @path /discussionboard/postTags/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** The UUID of the tag to remove. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDeleteResponse;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/postTags/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/postTags/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDeleteResponse => typia.random<IDeleteResponse>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/postAttachments/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardPostAttachment } from \"../../../structures/IDiscussionboardPostAttachment\";\nimport { IPageIDiscussionboardPostAttachment } from \"../../../structures/IPageIDiscussionboardPostAttachment\";\nimport { IDeleteResponse } from \"../../../structures/IDeleteResponse\";\n\n/**\n * Create a new post attachment (discussionboard_post_attachment).\n *\n * This adds a new post attachment record, corresponding to an uploaded\n * file/image. The request body must include post ID, file URL, file type, and\n * upload metadata as per 'discussionboard_post_attachment' schema. The endpoint\n * validates permissions, uploads, file type, and size constraints at\n * API/business logic layer.\n *\n * On success, a new attachment record is added and full details are returned.\n * Audit logging is performed (especially for user uploads) for moderation\n * traceability. Errors: input format error (400), file rejected (415/422),\n * unauthorized (403), or post not found (404).\n *\n * @param props.connection\n * @param props.body Attachment creation info.\n * @path /discussionboard/postAttachments\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Attachment creation info. */\n    body: IDiscussionboardPostAttachment.ICreate;\n  };\n  export type Body = IDiscussionboardPostAttachment.ICreate;\n  export type Response = IDiscussionboardPostAttachment;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/postAttachments\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/postAttachments\";\n  export const random = (): IDiscussionboardPostAttachment =>\n    typia.random<IDiscussionboardPostAttachment>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Search & list post attachments (discussionboard_post_attachment).\n *\n * This operation lists and filters all post attachments in the system. The\n * 'discussionboard_post_attachment' table maintains atomic metadata for each\n * file attached to a post (e.g., images, documents), allowing users to search\n * by filename, type, post ID, or upload time. This API supports paging,\n * searching, and sorting.\n *\n * Only authorized users may access attachment info, which is useful for\n * moderation, admin tools, or user viewing. Input can specify query parameters\n * such as postId, type, or date ranges. Response includes paged result set with\n * metadata, total count, and files info. Validation ensures only supported\n * query fields are accepted. Errors include unauthorized (403), input error\n * (400), or internal error (500).\n *\n * @param props.connection\n * @param props.body Attachment search and pagination filters.\n * @path /discussionboard/postAttachments\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Attachment search and pagination filters. */\n    body: IDiscussionboardPostAttachment.IRequest;\n  };\n  export type Body = IDiscussionboardPostAttachment.IRequest;\n  export type Response = IPageIDiscussionboardPostAttachment;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/postAttachments\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/postAttachments\";\n  export const random = (): IPageIDiscussionboardPostAttachment =>\n    typia.random<IPageIDiscussionboardPostAttachment>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific post attachment (discussionboard_post_attachment) by ID.\n *\n * Get the details for a specific post attachment by UUID. The\n * 'discussionboard_post_attachment' table stores atomic data linking file\n * uploads to posts, supporting retrieval for user download, preview, or\n * moderation.\n *\n * Users must provide the attachment's UUID in the URL. Access control may\n * restrict by user/post or role. The response includes file URL, type, and\n * metadata. Errors: not found (404), invalid id (400), or access denied (403).\n *\n * @param props.connection\n * @param props.id Attachment's UUID.\n * @path /discussionboard/postAttachments/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Attachment's UUID. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardPostAttachment;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/postAttachments/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/postAttachments/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPostAttachment =>\n    typia.random<IDiscussionboardPostAttachment>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a specific post attachment (discussionboard_post_attachment) by ID.\n *\n * Update the atomic metadata of a post attachment by providing its UUID and the\n * updated fields. The request body specifies which metadata to update (e.g.,\n * type). This endpoint allows editing/correction of uploaded file information\n * (not the file content).\n *\n * It checks for existing attachment, validates the update fields (including\n * ownership/security context), updates the metadata, and persists audit logs.\n * Errors: not found (404), forbidden (403), input error (400), or locked\n * (409).\n *\n * @param props.connection\n * @param props.id The UUID of the attachment to update.\n * @param props.body Fields to update for attachment metadata.\n * @path /discussionboard/postAttachments/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** The UUID of the attachment to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Fields to update for attachment metadata. */\n    body: IDiscussionboardPostAttachment.IUpdate;\n  };\n  export type Body = IDiscussionboardPostAttachment.IUpdate;\n  export type Response = IDiscussionboardPostAttachment;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/postAttachments/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/postAttachments/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPostAttachment =>\n    typia.random<IDiscussionboardPostAttachment>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a post attachment (discussionboard_post_attachment) by ID.\n *\n * Delete a post attachment by UUID. The endpoint verifies the attachment\n * exists, checks user permissions, and removes the attachment metadata from the\n * database (and may trigger removal from file storage as per business logic).\n *\n * Operation is audit-logged for compliance (file deletion is irreversible\n * except in special admin recovery). Errors: not found (404), forbidden (403),\n * conflict (409), or invalid UUID (400).\n *\n * @param props.connection\n * @param props.id Post attachment UUID to delete.\n * @path /discussionboard/postAttachments/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Post attachment UUID to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDeleteResponse;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/postAttachments/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/postAttachments/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDeleteResponse => typia.random<IDeleteResponse>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/comments/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardComments } from \"../../../structures/IDiscussionboardComments\";\nimport { IPageIDiscussionboardComments } from \"../../../structures/IPageIDiscussionboardComments\";\nimport { IDiscussionboardComment } from \"../../../structures/IDiscussionboardComment\";\n\n/**\n * Create a new comment (discussionboard_comments).\n *\n * This operation enables authenticated users to add comments to posts or as\n * replies in the system. The 'discussionboard_comments' table represents each\n * atomic comment, supporting hierarchical threading by parent comment ID and\n * audit logging for content moderation.\n *\n * The request body includes the owning post's UUID, parent comment UUID if a\n * reply, content string, and user context (inferred from session). Input is\n * validated for text length, nesting rules, and POST/author/parent relationship\n * integrity. On success, the newly created comment record is returned. Errors:\n * post or parent not found (404), input invalid (400), unauthorized (403), or\n * locked (409).\n *\n * @param props.connection\n * @param props.body All info required to insert a new comment.\n * @path /discussionboard/comments\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** All info required to insert a new comment. */\n    body: IDiscussionboardComments.ICreate;\n  };\n  export type Body = IDiscussionboardComments.ICreate;\n  export type Response = IDiscussionboardComments;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/comments\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/comments\";\n  export const random = (): IDiscussionboardComments =>\n    typia.random<IDiscussionboardComments>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Search and list comments (discussionboard_comments) with filter and paging.\n *\n * Search and list all comments with flexible filters—by post, author, parent\n * comment (for threading/nesting), and deletion status. Operates on the\n * 'discussionboard_comments' table, which normalizes all comments irrespective\n * of depth or content length.\n *\n * Request body defines flexible filter set (UUIDs, text, date ranges, flags for\n * edits/deletes). Supports pagination, sorting, and text search. Output is a\n * paginated list of comments plus total counts. Only authorized users may\n * access, and access is logged for moderation/audit. Errors: input error (400),\n * forbidden (403), or internal (500).\n *\n * @param props.connection\n * @param props.body Comment search/filter definition and pagination info.\n * @path /discussionboard/comments\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Comment search/filter definition and pagination info. */\n    body: IDiscussionboardComments.IRequest;\n  };\n  export type Body = IDiscussionboardComments.IRequest;\n  export type Response = IPageIDiscussionboardComments;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/comments\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/comments\";\n  export const random = (): IPageIDiscussionboardComments =>\n    typia.random<IPageIDiscussionboardComments>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific comment (discussionboard_comments) by ID.\n *\n * Retrieves one comment by ID—the 'discussionboard_comments' table stores\n * content, author, post relation, edit status, and visibility flags. The\n * endpoint validates that the comment exists (and is visible to the caller if\n * not admin/mod), and returns its atomic data.\n *\n * Audit logging and permission checks apply. If found and authorized, full\n * comment metadata is returned. Errors: comment not found (404), forbidden\n * (403), or input error (400).\n *\n * @param props.connection\n * @param props.id UUID of the comment to fetch.\n * @path /discussionboard/comments/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** UUID of the comment to fetch. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardComments;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/comments/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/comments/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardComments =>\n    typia.random<IDiscussionboardComments>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update an existing comment (discussionboard_comments table).\n *\n * This operation updates the content of a specific comment in the discussion\n * board. The Prisma schema 'discussionboard_comments' enforces that each\n * comment is uniquely identified (id), and associates it with a post (post_id),\n * an author (author_id), and optionally a parent comment (for threading). Only\n * the user who authored the comment, or a user with moderator/admin privileges,\n * can perform updates. The operation will update the 'content', set 'is_edited'\n * to true, and update the 'updated_at' timestamp. If the user is a moderator or\n * admin, an audit log or moderation record should be issued. Proper validation\n * is required: if the comment doesn't exist, is already deleted, or the user\n * isn't authorized, an error is returned. After updating, the operation returns\n * the full updated comment entity including all fields necessary for display\n * and auditing.\n *\n * @param props.connection\n * @param props.id Unique identifier of the comment to update.\n * @param props.body Updated content and optional edit info for the comment.\n * @path /discussionboard/comments/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the comment to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Updated content and optional edit info for the comment. */\n    body: IDiscussionboardComment.IUpdate;\n  };\n  export type Body = IDiscussionboardComment.IUpdate;\n  export type Response = IDiscussionboardComment;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/comments/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/comments/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardComment =>\n    typia.random<IDiscussionboardComment>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Soft-delete (mark as deleted) a comment (discussionboard_comments table).\n *\n * Soft-deletes the specified comment using its unique identifier, as defined in\n * the 'discussionboard_comments' table. This operation marks the comment as\n * deleted by updating the 'is_deleted' flag and the timestamps, rather than\n * removing it from the database. Only the comment author, moderators, or admins\n * are allowed to perform this action. The deletion is logged for moderation and\n * audit trail. The response includes the updated comment entity, reflecting the\n * new deletion status and updated audit fields. If the comment is already\n * deleted or not found, or the user lacks sufficient privileges, returns an\n * error.\n *\n * @param props.connection\n * @param props.id Unique identifier of the comment to delete.\n * @path /discussionboard/comments/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the comment to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardComment;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/comments/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/comments/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardComment =>\n    typia.random<IDiscussionboardComment>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/likes/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardLike } from \"../../../structures/IDiscussionboardLike\";\nimport { IPageIDiscussionboardLike } from \"../../../structures/IPageIDiscussionboardLike\";\n\n/**\n * Create a new like event (discussionboard_likes table).\n *\n * Creates a new like entry in the 'discussionboard_likes' table, pointing to a\n * specific post or comment and registering a user's engagement. The request\n * includes details such as which content is liked (post or comment ID), and the\n * system enforces that each user can only like each item once and the content\n * must exist and not be deleted. The new like is recorded along with metadata\n * such as the acting user and timestamp. The response contains the complete\n * like record. If a like on the same item by this user already exists (and is\n * not deleted), or if input references non-existent or deleted content, returns\n * an error.\n *\n * @param props.connection\n * @param props.body Payload for creating a like (includes user, post or comment\n *   ID).\n * @path /discussionboard/likes\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Payload for creating a like (includes user, post or comment ID). */\n    body: IDiscussionboardLike.ICreate;\n  };\n  export type Body = IDiscussionboardLike.ICreate;\n  export type Response = IDiscussionboardLike;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/likes\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/likes\";\n  export const random = (): IDiscussionboardLike =>\n    typia.random<IDiscussionboardLike>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List and search likes (discussionboard_likes table, paginated/filterable).\n *\n * Returns a paginated and filterable list of likes in the discussion board,\n * based on criteria provided in the request body. The 'discussionboard_likes'\n * table supports polymorphic likes for both posts and comments, recorded with\n * timestamps and user references. Input allows filtering by user, target\n * (post/comment), like status (active, deleted), and sorting/pagination\n * controls. Used by admins, moderators for engagement analysis, or for\n * displaying user activity feeds. Response includes array of like objects and\n * pagination metadata. Proper permissions ensure that only authorized users\n * (e.g., own likes for members, all likes for admin/moderator) can use expanded\n * query options.\n *\n * @param props.connection\n * @param props.body Filter, search, and pagination parameters for likes search.\n * @path /discussionboard/likes\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filter, search, and pagination parameters for likes search. */\n    body: IDiscussionboardLike.IRequest;\n  };\n  export type Body = IDiscussionboardLike.IRequest;\n  export type Response = IPageIDiscussionboardLike;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/likes\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/likes\";\n  export const random = (): IPageIDiscussionboardLike =>\n    typia.random<IPageIDiscussionboardLike>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific like by ID (discussionboard_likes table).\n *\n * Returns the full details of a specific like by its unique identifier. The\n * 'discussionboard_likes' table contains records of user likes for both posts\n * and comments. This operation exposes all relevant attributes, including\n * content type (post/comment), user identity, timestamp, and status. Used for\n * audit trails and for displaying engagement details on user profiles or\n * dashboards. Proper permission checks are required: users may retrieve their\n * own like records, moderators/admins may retrieve any like. If the like is\n * missing or permission is denied, returns an error.\n *\n * @param props.connection\n * @param props.id Unique identifier of the like event.\n * @path /discussionboard/likes/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the like event. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardLike;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/likes/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/likes/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardLike =>\n    typia.random<IDiscussionboardLike>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a specific like (discussionboard_likes table).\n *\n * Updates an existing like event using its unique ID. The request body\n * specifies which field(s) to update—likely either to redo a like (if\n * previously soft-deleted), or to change the liked target if permitted. Handles\n * input validation and permission (- only owners, admins, or moderators may\n * update). All updates are logged. The response is the updated like record.\n * Errors if the like does not exist, or updates are not allowed per business\n * rules.\n *\n * @param props.connection\n * @param props.id Unique identifier of the like event to update.\n * @param props.body Payload for updating a like event.\n * @path /discussionboard/likes/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the like event to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Payload for updating a like event. */\n    body: IDiscussionboardLike.IUpdate;\n  };\n  export type Body = IDiscussionboardLike.IUpdate;\n  export type Response = IDiscussionboardLike;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/likes/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/likes/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardLike =>\n    typia.random<IDiscussionboardLike>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Soft-delete (unlike) a like on post or comment (discussionboard_likes table).\n *\n * Soft-deletes (unlikes) a like event for a post or comment, based on its\n * unique identifier (id). The operation sets the 'deleted_at' timestamp, thus\n * undoing the like while maintaining historical/audit records. Only the user\n * who created the like or privileged users (admins/moderators) can perform the\n * action. The endpoint returns the updated like entity after the soft-delete.\n * If the like event does not exist, is already deleted, or the requester lacks\n * permission, an error is returned.\n *\n * @param props.connection\n * @param props.id Unique identifier of the like event to delete.\n * @path /discussionboard/likes/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the like event to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardLike;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/likes/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/likes/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardLike =>\n    typia.random<IDiscussionboardLike>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/reports/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardReport } from \"../../../structures/IDiscussionboardReport\";\nimport { IPageIDiscussionboardReport } from \"../../../structures/IPageIDiscussionboardReport\";\n\n/**\n * Create a new content report (discussionboard_reports table).\n *\n * Creates a new report for an abusive or spam content item—either a post or\n * comment—by inserting into the 'discussionboard_reports' table. The input\n * identifies the content (post or comment ID), type of violation, and details,\n * associated with the reporting user's account. On success, returns the full\n * created report record including references and audit fields. Errors for\n * double-reporting by same user on a target, nonexistent or already\n * moderated/deleted content, or if input is incomplete. All actions are\n * auditable; appropriate notifications generated for moderator queue.\n *\n * @param props.connection\n * @param props.body Input data for report creation (target ref, reason,\n *   details).\n * @path /discussionboard/reports\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Input data for report creation (target ref, reason, details). */\n    body: IDiscussionboardReport.ICreate;\n  };\n  export type Body = IDiscussionboardReport.ICreate;\n  export type Response = IDiscussionboardReport;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/reports\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/reports\";\n  export const random = (): IDiscussionboardReport =>\n    typia.random<IDiscussionboardReport>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List/Search reported content (discussionboard_reports table,\n * paginated/filterable).\n *\n * Returns a paginated and filterable list of reported content in the discussion\n * board. The backend 'discussionboard_reports' records all content reports,\n * referencing either posts or comments, and includes who reported, report\n * reason/code, timestamps, and status. Admins/moderators can filter by all\n * criteria; regular members are restricted to their own reports. The response\n * provides an array of report records and pagination metadata. Input allows\n * precise control over sorting, filtering, and paging scope. Use cases:\n * moderator queue, abuse/spam trends, user report histories.\n *\n * @param props.connection\n * @param props.body Request parameters for filtering/searching reported\n *   content.\n * @path /discussionboard/reports\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Request parameters for filtering/searching reported content. */\n    body: IDiscussionboardReport.IRequest;\n  };\n  export type Body = IDiscussionboardReport.IRequest;\n  export type Response = IPageIDiscussionboardReport;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/reports\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/reports\";\n  export const random = (): IPageIDiscussionboardReport =>\n    typia.random<IPageIDiscussionboardReport>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific report by ID (discussionboard_reports table).\n *\n * Returns the full data for a report, identified by its unique ID. The backend\n * table 'discussionboard_reports' provides structured data for compliance,\n * moderation workflow, and user notification. The result includes content\n * references (post or comment), reporter, reason codes, creation and\n * soft-delete timestamps. Access control ensures only those with legitimate\n * need have access (reporter, moderator, or admin). Errors on missing reports\n * or insufficient permissions.\n *\n * @param props.connection\n * @param props.id Unique identifier of the content report to retrieve.\n * @path /discussionboard/reports/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the content report to retrieve. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardReport;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/reports/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/reports/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardReport =>\n    typia.random<IDiscussionboardReport>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a content report by ID (discussionboard_reports table).\n *\n * Updates the specified content report by ID in the 'discussionboard_reports'\n * table. Input may contain changes to fields such as reason code or details.\n * Permissions depend on status: users may update their own unreveiwed reports,\n * admins can update any, and moderators update as permitted by workflow policy.\n * All updates reflect instantly in audit logs. The operation returns the full\n * updated report object. Errors for missing report, insufficient permission, or\n * if the report has been reviewed/locked against change.\n *\n * @param props.connection\n * @param props.id Unique ID of the content report to update.\n * @param props.body Update payload for a content report.\n * @path /discussionboard/reports/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique ID of the content report to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Update payload for a content report. */\n    body: IDiscussionboardReport.IUpdate;\n  };\n  export type Body = IDiscussionboardReport.IUpdate;\n  export type Response = IDiscussionboardReport;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/reports/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/reports/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardReport =>\n    typia.random<IDiscussionboardReport>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Soft-delete (withdraw) a content report (discussionboard_reports table).\n *\n * Withdraws or soft-deletes a specifically identified content report, by\n * updating its 'deleted_at' field in the 'discussionboard_reports' table. Only\n * the original reporter (before moderation) or privileged users (moderator,\n * admin) may perform this operation. On success, returns the updated report\n * record with deletion timestamp. Errors arise if the report does not exist,\n * was already deleted, has been reviewed/locked, or the user lacks sufficient\n * privileges. All deletions are audit logged for compliance.\n *\n * @param props.connection\n * @param props.id Unique identifier of the report to withdraw soft-delete.\n * @path /discussionboard/reports/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the report to withdraw soft-delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardReport;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/reports/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/reports/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardReport =>\n    typia.random<IDiscussionboardReport>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/moderationActions/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardModerationAction } from \"../../../structures/IDiscussionboardModerationAction\";\nimport { IPageIDiscussionboardModerationAction } from \"../../../structures/IPageIDiscussionboardModerationAction\";\n\n/**\n * Create a new moderation action (discussionboard_moderation_action).\n *\n * This endpoint enables the creation and logging of a new moderation action\n * entry, recording all relevant metadata such as the acting moderator/admin\n * (actor), target user, affected post/comment (if any), action type, reason,\n * and timestamp. Input validation enforces all required foreign keys, action\n * classification strings, and timestamp format. The endpoint enforces\n * role-based permissions to prevent member users from creating moderation\n * actions. Successful creation returns the new record's ID and core data. This\n * operation is closely related to audit logging and user suspension flows;\n * downstream systems may subscribe to these events for notification or\n * compliance workflows. Error handling includes validation failures, permission\n * denied, or integrity constraint issues.\n *\n * @param props.connection\n * @param props.body All fields required for a new moderation action, including\n *   actor, target, type, reason, references, and timestamp.\n * @path /discussionboard/moderationActions\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /**\n     * All fields required for a new moderation action, including actor,\n     * target, type, reason, references, and timestamp.\n     */\n    body: IDiscussionboardModerationAction.ICreate;\n  };\n  export type Body = IDiscussionboardModerationAction.ICreate;\n  export type Response = IDiscussionboardModerationAction;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/moderationActions\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/moderationActions\";\n  export const random = (): IDiscussionboardModerationAction =>\n    typia.random<IDiscussionboardModerationAction>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Retrieve a list of moderation actions (discussionboard_moderation_action)\n * with searching, filtering, and pagination.\n *\n * This operation enables authorized users (such as moderators and admins) to\n * retrieve a filtered, paginated list of all moderation actions taken across\n * the platform. The endpoint supports searching by moderator/admin (actor),\n * target user, post or comment, action type (e.g. delete_post, hide_comment,\n * warning), date range, or specific keywords in reason/notes fields. The\n * request enforces role-based authorization. Results include actor/target user\n * information, content targeted (if any), action type and reason, and timestamp\n * of the action. Pagination, sorting (by created_at, action_type, actor), and\n * customizable filters are supported for efficient review. Only privileged\n * users can use this endpoint; regular members do not have access. Error\n * handling includes invalid query validation, insufficient permissions, and\n * server issues. This operation is typically used in conjunction with detailed\n * moderation action or audit endpoints.\n *\n * @param props.connection\n * @param props.body List/search/pagination parameters for moderation actions\n *   lookup request.\n * @path /discussionboard/moderationActions\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * List/search/pagination parameters for moderation actions lookup\n     * request.\n     */\n    body: IDiscussionboardModerationAction.IRequest;\n  };\n  export type Body = IDiscussionboardModerationAction.IRequest;\n  export type Response = IPageIDiscussionboardModerationAction;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/moderationActions\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/moderationActions\";\n  export const random = (): IPageIDiscussionboardModerationAction =>\n    typia.random<IPageIDiscussionboardModerationAction>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Look up a single moderation action (discussionboard_moderation_action) by its\n * ID.\n *\n * This operation allows authorized moderators or admins to retrieve all\n * available information about a particular moderation action, including actor,\n * target user, affected post or comment, action type, rationale, and timestamp.\n * Useful for moderation history review, escalation, appeals, or audit purposes.\n * Only the action's unique ID is required as a path parameter. Ensures\n * permissions restrict access to privileged users; regular users cannot access\n * this data. Error responses include not-found, insufficient-permission, and\n * server issues.\n *\n * @param props.connection\n * @param props.id Unique identifier of the moderation action to retrieve.\n * @path /discussionboard/moderationActions/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the moderation action to retrieve. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardModerationAction;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/moderationActions/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/moderationActions/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardModerationAction =>\n    typia.random<IDiscussionboardModerationAction>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update an existing moderation action (discussionboard_moderation_action) by\n * ID.\n *\n * This endpoint allows authorized moderators/admins to update details of a\n * previously created moderation action, such as editing the reason, additional\n * notes, or fixing metadata errors. All updates are traced for audit. Only\n * specific fields are permitted to be updated (e.g., action_type, reason,\n * references); actor or target user cannot typically be changed unless\n * correcting mistakes with admin-level privileges. The request requires the\n * moderation action's ID in the route and the update data in the request body.\n * Returns the updated record on success. Permission and data validation errors\n * are handled explicitly. Related endpoints include moderation action detail\n * and audit log write.\n *\n * @param props.connection\n * @param props.id Unique identifier of the moderation action to update.\n * @param props.body Fields to update in the moderation action. Immutable fields\n *   must be excluded or ignored.\n * @path /discussionboard/moderationActions/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the moderation action to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Fields to update in the moderation action. Immutable fields must be\n     * excluded or ignored.\n     */\n    body: IDiscussionboardModerationAction.IUpdate;\n  };\n  export type Body = IDiscussionboardModerationAction.IUpdate;\n  export type Response = IDiscussionboardModerationAction;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/moderationActions/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/moderationActions/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardModerationAction =>\n    typia.random<IDiscussionboardModerationAction>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a moderation action (discussionboard_moderation_action) by ID.\n *\n * This operation allows authorized moderators or admins to delete (typically\n * soft-delete for audit compliance) a specific moderation action from the\n * system, as identified by its unique ID. This action is logged for audit. The\n * user must provide the moderation action ID as a path parameter. Deletions are\n * typically restricted by business rules, e.g., only actions without downstream\n * dependency or when performed in error. Error scenarios include not found,\n * insufficient permissions, or cascading cleanup constraints. Closely related\n * to moderation and audit endpoints for transparency.\n *\n * @param props.connection\n * @param props.id Unique identifier of the moderation action to delete.\n * @path /discussionboard/moderationActions/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the moderation action to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardModerationAction;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/moderationActions/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/moderationActions/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardModerationAction =>\n    typia.random<IDiscussionboardModerationAction>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/reportReviews/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardReportReview } from \"../../../structures/IDiscussionboardReportReview\";\nimport { IPageIDiscussionboardReportReview } from \"../../../structures/IPageIDiscussionboardReportReview\";\n\n/**\n * Create a new report review (discussionboard_report_review).\n *\n * This operation enables a moderator or admin to record the review of a\n * user-submitted abuse/spam report, capturing the reviewed report ID, reviewer\n * user ID, review status, linked post or comment, and optional notes/comments.\n * Validation ensures required relations and correct status codes (e.g.\n * resolved/rejected). Used in moderation workflows and reporting dashboards.\n * Permissions enforce only authorized reviewers. Error handling includes\n * invalid input, duplicate reviews, or insufficient permission.\n *\n * @param props.connection\n * @param props.body Report review creation info, specifying the reviewed\n *   report, reviewer, decision/status, notes, etc.\n * @path /discussionboard/reportReviews\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /**\n     * Report review creation info, specifying the reviewed report,\n     * reviewer, decision/status, notes, etc.\n     */\n    body: IDiscussionboardReportReview.ICreate;\n  };\n  export type Body = IDiscussionboardReportReview.ICreate;\n  export type Response = IDiscussionboardReportReview;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/reportReviews\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/reportReviews\";\n  export const random = (): IDiscussionboardReportReview =>\n    typia.random<IDiscussionboardReportReview>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Search and paginate through report review logs\n * (discussionboard_report_review).\n *\n * This endpoint enables authorized moderators and administrators to retrieve a\n * list of report review records, supporting search and filters by reviewer ID,\n * report status (resolved/rejected/pending), associated post/comment, review\n * timestamps, and other optional metadata. Pagination and sorting are built-in\n * for efficient workflows. Permission checks ensure members cannot access this\n * review data. Used for moderation oversight, audit, and review dashboard UI.\n * Partial or fuzzy matching supported on reviewer comments or notes. Errors\n * include invalid queries, unauthorized access, or server issues.\n *\n * @param props.connection\n * @param props.body Request data for searching, filtering, and paginating\n *   through report reviews.\n * @path /discussionboard/reportReviews\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * Request data for searching, filtering, and paginating through report\n     * reviews.\n     */\n    body: IDiscussionboardReportReview.IRequest;\n  };\n  export type Body = IDiscussionboardReportReview.IRequest;\n  export type Response = IPageIDiscussionboardReportReview;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/reportReviews\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/reportReviews\";\n  export const random = (): IPageIDiscussionboardReportReview =>\n    typia.random<IPageIDiscussionboardReportReview>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Retrieve a single report review (discussionboard_report_review) by ID.\n *\n * This operation allows privileged users (moderators, admins) to get a full\n * record of a report review, identified by its unique ID. Response includes\n * reviewing moderator/admin, target entities (report, post, comment), review\n * status, notes, and timestamp. Used for litigation, appeals, and audit trails.\n * The only required input is the review's unique ID. Only privileged users are\n * authorized. Errors include record-not-found and insufficient-permission.\n *\n * @param props.connection\n * @param props.id Unique report review ID to look up.\n * @path /discussionboard/reportReviews/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique report review ID to look up. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardReportReview;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/reportReviews/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/reportReviews/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardReportReview =>\n    typia.random<IDiscussionboardReportReview>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update an existing report review (discussionboard_report_review) by ID.\n *\n * This operation enables updating selected fields of a report review record,\n * such as modifying review status, adding notes, or adjusting linked\n * content/post references. Update traceability is enforced via audit. Only\n * moderators/admins are authorized. Record is identified by its unique ID;\n * updated data is supplied in the request body. Returns updated record or error\n * for validation/permission issues. Typically linked with moderation dashboards\n * and audit log flows.\n *\n * @param props.connection\n * @param props.id Unique identifier of the report review to update.\n * @param props.body Fields to update for the report review record.\n * @path /discussionboard/reportReviews/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the report review to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Fields to update for the report review record. */\n    body: IDiscussionboardReportReview.IUpdate;\n  };\n  export type Body = IDiscussionboardReportReview.IUpdate;\n  export type Response = IDiscussionboardReportReview;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/reportReviews/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/reportReviews/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardReportReview =>\n    typia.random<IDiscussionboardReportReview>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a report review (discussionboard_report_review) by ID.\n *\n * Authorized moderators and admins can remove (soft-delete) a report review,\n * identified by its unique ID. Deletion is audited and subject to business\n * logic (e.g., only allowable in specific states). Record is not physically\n * deleted for traceability. Path parameter is the review ID. Related to\n * moderation and audit data flows. Errors include unauthorized access, record\n * not found, or business rule constraint violations.\n *\n * @param props.connection\n * @param props.id Unique identifier of the report review to delete.\n * @path /discussionboard/reportReviews/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the report review to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardReportReview;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/reportReviews/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/reportReviews/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardReportReview =>\n    typia.random<IDiscussionboardReportReview>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/warnings/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardWarning } from \"../../../structures/IDiscussionboardWarning\";\nimport { IPageIDiscussionboardWarning } from \"../../../structures/IPageIDiscussionboardWarning\";\n\n/**\n * Create a new warning in discussionboard_warning table.\n *\n * This POST endpoint adds a new warning to the discussionboard_warning table.\n * The warning includes information about who issued it, the user receiving the\n * warning, and can relate to specific posts or comments for context. The\n * warning_type categorizes the infraction (such as 'abuse', 'spam', etc.) and\n * the message provides a human-readable rationale for the warning. Moderators\n * and admins are able to use this endpoint as part of their toolkit for\n * progressive disciplinary actions. Soft deletion or edits to warnings are not\n * allowed here—warnings are permanent for compliance and auditability. This API\n * integrates closely with audit logs to ensure transparency and is expected to\n * trigger notifications to the affected user. Typical use involves user-facing\n * moderation UIs. Warnings reference the discussionboard_user,\n * discussionboard_post, and discussionboard_comments tables, and must be used\n * in compliance with the platform's moderation policies.\n *\n * @param props.connection\n * @param props.body Information about the new warning to issue.\n * @path /discussionboard/warnings\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Information about the new warning to issue. */\n    body: IDiscussionboardWarning.ICreate;\n  };\n  export type Body = IDiscussionboardWarning.ICreate;\n  export type Response = IDiscussionboardWarning;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/warnings\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/warnings\";\n  export const random = (): IDiscussionboardWarning =>\n    typia.random<IDiscussionboardWarning>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Search, filter, and page through warnings issued (discussionboard_warning).\n *\n * This endpoint provides moderators and admins with access to lists of warnings\n * issued on the platform, supporting filters such as issued_by, issued_to,\n * warning_type, related post/comment, and date ranges. Pagination, sorting, and\n * keyword search enable efficient review. Only privileged users may access this\n * endpoint. Used for audit, user appeal, or compliance tracing. Errors include\n * invalid queries, insufficient permissions, and server issues.\n *\n * @param props.connection\n * @param props.body Filtering and search options for warnings list request.\n * @path /discussionboard/warnings\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filtering and search options for warnings list request. */\n    body: IDiscussionboardWarning.IRequest;\n  };\n  export type Body = IDiscussionboardWarning.IRequest;\n  export type Response = IPageIDiscussionboardWarning;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/warnings\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/warnings\";\n  export const random = (): IPageIDiscussionboardWarning =>\n    typia.random<IPageIDiscussionboardWarning>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get details for a specific warning (discussionboard_warning) by ID.\n *\n * Privileged users (moderators, admins) can retrieve information for a single\n * warning record, including issuer, recipient, rationale, type, related\n * post/comment, and timestamp. Used in user appeals, moderation dashboards, and\n * audit reviews. Input is only the warning's unique ID as a path parameter.\n * Return includes all normalized warning data. Access is denied to\n * non-privileged users or if the record does not exist. Typical errors: not\n * found, unauthorized, server failures.\n *\n * @param props.connection\n * @param props.id Unique warning ID to retrieve.\n * @path /discussionboard/warnings/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique warning ID to retrieve. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardWarning;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/warnings/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/warnings/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardWarning =>\n    typia.random<IDiscussionboardWarning>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Edit a warning in discussionboard_warning table.\n *\n * This PUT endpoint is used to edit an existing warning. The warning is\n * uniquely identified by its id path parameter. Allowed edits typically include\n * modifying the warning_type or message, possibly adjusting associated\n * post/comment references. All such modifications are subject to audit by the\n * discussionboard_audit_log. This operation restricts update permissions to the\n * original issuer, moderator, or admin roles. Other fields (such as issued_by,\n * issued_to, and issued_at) are immutable for audit purposes. Edits are\n * designed for correction, not for hiding infraction history.\n *\n * @param props.connection\n * @param props.id Unique identifier of the warning to update.\n * @param props.body The updated data for the warning (modifying type, message,\n *   or references).\n * @path /discussionboard/warnings/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the warning to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /**\n     * The updated data for the warning (modifying type, message, or\n     * references).\n     */\n    body: IDiscussionboardWarning.IUpdate;\n  };\n  export type Body = IDiscussionboardWarning.IUpdate;\n  export type Response = IDiscussionboardWarning;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/warnings/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/warnings/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardWarning =>\n    typia.random<IDiscussionboardWarning>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a warning from discussionboard_warning table.\n *\n * This DELETE endpoint removes a warning from the system, identified by its id.\n * The operation can be either a hard or soft delete depending on system\n * settings, but for most compliance/audit scenarios, soft deletes are\n * preferred. Only moderation and admin roles can perform deletions. The system\n * logs the deletion event, and may trigger a notification to the warning\n * recipient.\n *\n * @param props.connection\n * @param props.id Unique identifier of the warning to delete.\n * @path /discussionboard/warnings/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the warning to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/warnings/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/warnings/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/bans/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardBan } from \"../../../structures/IDiscussionboardBan\";\nimport { IPageIDiscussionboardBan } from \"../../../structures/IPageIDiscussionboardBan\";\n\n/**\n * Create a new ban record in discussionboard_ban table.\n *\n * This POST endpoint creates a ban record for a user, given required details\n * like the banned user's id, the issuer, type (e.g., mute/temp/perm), reason,\n * and time periods. If the ban is related to a prior warning, the warning_id\n * may be set. The system audits all ban actions and triggers notifications to\n * the affected user. Logic will check and prevent overlapping active bans as\n * per business rules. Used as the primary enforcement mechanism for moderation\n * escalation beyond warnings.\n *\n * @param props.connection\n * @param props.body Fields for new ban record (user, issuer, type, reason, and\n *   expiry).\n * @path /discussionboard/bans\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Fields for new ban record (user, issuer, type, reason, and expiry). */\n    body: IDiscussionboardBan.ICreate;\n  };\n  export type Body = IDiscussionboardBan.ICreate;\n  export type Response = IDiscussionboardBan;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/bans\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/bans\";\n  export const random = (): IDiscussionboardBan =>\n    typia.random<IDiscussionboardBan>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Search/list bans from discussionboard_ban table (advanced query).\n *\n * This PATCH endpoint provides advanced ban listing and search capabilities,\n * leveraging flexible request bodies for filtering by user, ban type, time\n * range, status, or warning linkage. Results are paginated and can be sorted by\n * relevant ban fields. Primarily accessed by admin and moderator UIs for audit,\n * ban review, and compliance monitoring. Relies on the discussionboard_ban\n * table and references users, warnings, and issuer relationships for joined\n * queries. Support for fine-grained search eliminates the need for multiple\n * simple GET endpoints, centralizing administrative search logic for bans.\n *\n * @param props.connection\n * @param props.body Filter and pagination settings for searching bans.\n * @path /discussionboard/bans\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filter and pagination settings for searching bans. */\n    body: IPageIDiscussionboardBan.IRequest;\n  };\n  export type Body = IPageIDiscussionboardBan.IRequest;\n  export type Response = IPageIDiscussionboardBan;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/bans\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/bans\";\n  export const random = (): IPageIDiscussionboardBan =>\n    typia.random<IPageIDiscussionboardBan>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific ban entry from discussionboard_ban table.\n *\n * This GET endpoint returns a detailed ban record from the discussionboard_ban\n * table by id. Exposes all relevant details for moderation/ban audits: involved\n * users, ban timing (issued/expires), rationale, and warning links. Only\n * accessible by moderator and admin roles. The endpoint underpins UI flows for\n * inspecting specific bans, appeals processing, or reviewing ban histories per\n * user.\n *\n * @param props.connection\n * @param props.id Unique identifier of the ban record to fetch.\n * @path /discussionboard/bans/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the ban record to fetch. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardBan;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/bans/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/bans/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardBan =>\n    typia.random<IDiscussionboardBan>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a ban record in discussionboard_ban table.\n *\n * This PUT endpoint edits an existing ban record - for instance, to adjust the\n * expiry or type of an active ban due to appeals or changing circumstances.\n * Allowed for moderators and admins only. Requires a full update payload;\n * certain fields cannot be changed (banned_by_id, issued_at). Edits are always\n * logged in audit trails. The endpoint is essential for ban workflow\n * flexibility and error correction.\n *\n * @param props.connection\n * @param props.id Identifier of the ban record to update.\n * @param props.body Payload of ban updates: expiry, type, reason, related\n *   warning.\n * @path /discussionboard/bans/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Identifier of the ban record to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Payload of ban updates: expiry, type, reason, related warning. */\n    body: IDiscussionboardBan.IUpdate;\n  };\n  export type Body = IDiscussionboardBan.IUpdate;\n  export type Response = IDiscussionboardBan;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/bans/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/bans/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardBan =>\n    typia.random<IDiscussionboardBan>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a ban record from discussionboard_ban table.\n *\n * This DELETE endpoint removes a ban record by id—serving as the reversal of a\n * mute/ban or to support ban record cleanup. Only accessible to moderator/admin\n * roles, who must provide a valid reason in audit logs. The deleted ban entry\n * may be retained for audit history depending on system configuration. Used\n * when restoring user access, correcting moderation mistakes, or processing\n * appeal outcomes.\n *\n * @param props.connection\n * @param props.id Unique identifier of the ban to delete (unban).\n * @path /discussionboard/bans/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the ban to delete (unban). */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/bans/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/bans/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/notifications/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardNotification } from \"../../../structures/IDiscussionboardNotification\";\nimport { IPageIDiscussionboardNotification } from \"../../../structures/IPageIDiscussionboardNotification\";\n\n/**\n * Create a new notification record in discussionboard_notification table.\n *\n * This POST endpoint adds a notification to the system for a specific user,\n * with all associated context (recipient, event type, related entities). These\n * records are normally generated by system back-end services in response to\n * valid actions (reply, like, moderation, system message), not by end users.\n * Admins or system controllers may use it for generating announcements or\n * backfilling notification flows. Only system-valid actors can invoke this\n * contract.\n *\n * @param props.connection\n * @param props.body All notification data (recipient, type, message, related\n *   event context).\n * @path /discussionboard/notifications\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /**\n     * All notification data (recipient, type, message, related event\n     * context).\n     */\n    body: IDiscussionboardNotification.ICreate;\n  };\n  export type Body = IDiscussionboardNotification.ICreate;\n  export type Response = IDiscussionboardNotification;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/notifications\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/notifications\";\n  export const random = (): IDiscussionboardNotification =>\n    typia.random<IDiscussionboardNotification>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List/search notifications from discussionboard_notification table (advanced\n * query).\n *\n * This PATCH endpoint queries notifications using complex filters (user, type,\n * status, date, read/unread, etc.), replacing simpler GET list methods with a\n * flexible search contract. Results are paginated and can be sorted by recency\n * or priority. Mainly accessed by users in notification feed UIs, as well as by\n * admins auditing notifications. The discussionboard_notification table is\n * referenced for all entries, joined as needed to users, posts, and comments.\n * This contract allows both self-service notification feeds as well as\n * administrative history reviews. Security/authorization ensures users only see\n * their own notifications unless elevated roles.\n *\n * @param props.connection\n * @param props.body Filter and pagination data for notifications search.\n * @path /discussionboard/notifications\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filter and pagination data for notifications search. */\n    body: IPageIDiscussionboardNotification.IRequest;\n  };\n  export type Body = IPageIDiscussionboardNotification.IRequest;\n  export type Response = IPageIDiscussionboardNotification;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/notifications\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/notifications\";\n  export const random = (): IPageIDiscussionboardNotification =>\n    typia.random<IPageIDiscussionboardNotification>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific notification by id from discussionboard_notification table.\n *\n * This GET endpoint fetches a notification record by id for detailed display in\n * the notification center or audit UI. The notification includes message\n * content, related post/comment, actor, and event type. Only the recipient\n * user, or admins/moderators for audit, are authorized. This ensures members\n * have access to their own system notifications, while elevated roles may view\n * notification flows for compliance/audit.\n *\n * @param props.connection\n * @param props.id Unique identifier of the notification to retrieve.\n * @path /discussionboard/notifications/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the notification to retrieve. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardNotification;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/notifications/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/notifications/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardNotification =>\n    typia.random<IDiscussionboardNotification>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update a notification record in discussionboard_notification table (e.g. mark\n * as read).\n *\n * This PUT endpoint modifies an existing notification, such as marking it as\n * read, altering event type, or updating message text. The target is identified\n * by the id. Typical use cases include marking notifications as read by their\n * recipient or correcting data via admin tools. These changes must be tracked\n * in the audit log, especially for moderator/admin updates. No key/PK fields\n * may be changed. Proper authorization ensures members can only update their\n * own notification status, while elevated roles may correct any notification's\n * details.\n *\n * @param props.connection\n * @param props.id Unique identifier of the notification to update.\n * @param props.body Notification updates (e.g. mark as read, update message,\n *   adjust event data).\n * @path /discussionboard/notifications/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the notification to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Notification updates (e.g. mark as read, update message, adjust event\n     * data).\n     */\n    body: IDiscussionboardNotification.IUpdate;\n  };\n  export type Body = IDiscussionboardNotification.IUpdate;\n  export type Response = IDiscussionboardNotification;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/notifications/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/notifications/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardNotification =>\n    typia.random<IDiscussionboardNotification>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a notification by its unique ID from the discussionboard_notification\n * table.\n *\n * This API operation allows an authenticated user to delete (soft-delete) a\n * notification referenced by its unique identifier. The operation ensures that\n * users can only delete notifications specifically addressed to them by\n * verifying ownership against the discussionboard_notification table. The\n * requested notification is marked as deleted without physical removal,\n * supporting audit and compliance requirements defined in the system's\n * policies. This operation is closely tied to the notification preferences and\n * user activity auditing features and is restricted to the recipient of the\n * notification (members, moderators, or admins). Administrators may audit all\n * deletion actions using the audit log. If the notification has already been\n * deleted or does not exist, the response will indicate the appropriate error.\n * Related endpoints: PATCH /discussionboard/notifications to list\n * notifications, and GET /discussionboard/notifications/{id} to view details\n * before deletion.\n *\n * @param props.connection\n * @param props.id Unique identifier for the notification to be deleted.\n * @path /discussionboard/notifications/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier for the notification to be deleted. */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/notifications/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/notifications/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/notificationPreferences/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardNotificationPreference } from \"../../../structures/IDiscussionboardNotificationPreference\";\nimport { IPageIDiscussionboardNotificationPreference } from \"../../../structures/IPageIDiscussionboardNotificationPreference\";\n\n/**\n * Create notification preferences for a user in\n * discussionboard_notification_preference.\n *\n * This API operation creates a new notification preference record for an\n * authenticated user by inserting a new row into the\n * discussionboard_notification_preference table. Only one entry can exist per\n * user. The operation validates that the user does not already have a\n * preference record; if it does, the proper error is thrown. The returned\n * object includes all fields relevant to notification preferences and the\n * associated user ID. Used for onboarding or resetting preferences to a default\n * state. Related endpoints include PATCH for searching and GET for retrieving\n * an existing record.\n *\n * @param props.connection\n * @param props.body Initial notification preference settings to be created.\n * @path /discussionboard/notificationPreferences\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Initial notification preference settings to be created. */\n    body: IDiscussionboardNotificationPreference.ICreate;\n  };\n  export type Body = IDiscussionboardNotificationPreference.ICreate;\n  export type Response = IDiscussionboardNotificationPreference;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/notificationPreferences\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/notificationPreferences\";\n  export const random = (): IDiscussionboardNotificationPreference =>\n    typia.random<IDiscussionboardNotificationPreference>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List notification preferences from the\n * discussionboard_notification_preference table, with filtering and\n * pagination.\n *\n * This endpoint retrieves notification preference settings from the\n * discussionboard_notification_preference table, with support for advanced\n * searching and pagination. Users can fetch their own notification preferences\n * (for profile management), while administrators may filter across multiple\n * users to audit or configure preferences in bulk. The operation accommodates\n * large datasets by including pagination parameters. Fields like notify_reply,\n * notify_like, notify_moderator_action, and notify_system_message can be\n * filtered or searched as needed for administrative oversight. Only the\n * authenticated user or admins can access these preferences, with results\n * limited appropriately.\n *\n * @param props.connection\n * @param props.body Parameters for searching/filtering notification preferences\n *   (pagination, filters, sort).\n * @path /discussionboard/notificationPreferences\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * Parameters for searching/filtering notification preferences\n     * (pagination, filters, sort).\n     */\n    body: IDiscussionboardNotificationPreference.IRequest;\n  };\n  export type Body = IDiscussionboardNotificationPreference.IRequest;\n  export type Response = IPageIDiscussionboardNotificationPreference;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/notificationPreferences\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/notificationPreferences\";\n  export const random = (): IPageIDiscussionboardNotificationPreference =>\n    typia.random<IPageIDiscussionboardNotificationPreference>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get notification preference detail by ID from the\n * discussionboard_notification_preference table.\n *\n * This endpoint returns the notification preference details for the record\n * identified by the unique ID from the discussionboard_notification_preference\n * table. The operation is restricted to the user who owns the preferences or an\n * administrator managing users. Data returned includes settings for reply,\n * likes, moderator actions, and system messages notification toggles. Related\n * APIs: PATCH for listing/filtering all preferences, PUT for updating\n * preferences, POST for creating preferences.\n *\n * @param props.connection\n * @param props.id Unique identifier of the notification preference record.\n * @path /discussionboard/notificationPreferences/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the notification preference record. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardNotificationPreference;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/notificationPreferences/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/notificationPreferences/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardNotificationPreference =>\n    typia.random<IDiscussionboardNotificationPreference>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update notification preference settings by ID in\n * discussionboard_notification_preference table.\n *\n * This endpoint updates the notification preference settings for a specific\n * user preference record identified by its ID in\n * discussionboard_notification_preference. The API enforces that only the owner\n * or an administrator may modify the preferences. Fields that can be updated\n * include reply, like, moderator action, and system message notification\n * toggles. The endpoint returns the updated notification preferences data after\n * modification. Related operations: GET for viewing preferences and PATCH for\n * listing multiple preferences.\n *\n * @param props.connection\n * @param props.id Unique identifier of the notification preference record to\n *   update.\n * @param props.body Updated notification preference toggles and settings.\n * @path /discussionboard/notificationPreferences/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the notification preference record to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Updated notification preference toggles and settings. */\n    body: IDiscussionboardNotificationPreference.IUpdate;\n  };\n  export type Body = IDiscussionboardNotificationPreference.IUpdate;\n  export type Response = IDiscussionboardNotificationPreference;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/notificationPreferences/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/notificationPreferences/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardNotificationPreference =>\n    typia.random<IDiscussionboardNotificationPreference>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete notification preferences by ID from the\n * discussionboard_notification_preference table.\n *\n * Authenticated users or administrators can use this endpoint to delete a\n * notification preference record, identified by its unique ID, from the\n * discussionboard_notification_preference table. The deletion is restricted to\n * the owner or administrative users. Typically used for account deletion or\n * resetting preferences to their default state. The API ensures audit trail\n * compliance for admin-triggered deletions. If the record does not exist or the\n * caller is not authorized, an error is thrown.\n *\n * @param props.connection\n * @param props.id Unique identifier of the notification preference record to be\n *   deleted.\n * @path /discussionboard/notificationPreferences/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /**\n     * Unique identifier of the notification preference record to be\n     * deleted.\n     */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/notificationPreferences/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/notificationPreferences/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/auditLogs/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardAuditLog } from \"../../../structures/IDiscussionboardAuditLog\";\nimport { IPageIDiscussionboardAuditLog } from \"../../../structures/IPageIDiscussionboardAuditLog\";\n\n/**\n * Create (insert) a new audit log entry in discussionboard_audit_log\n * (admin/moderator only).\n *\n * This API operation records a new privileged action—such as user bans,\n * moderator role assignments, or platform configuration changes—by inserting an\n * audit record into discussionboard_audit_log. Only authentication with admin\n * or moderator rights is accepted. The request body contains all required event\n * context for recording, and on success, the created audit entry (including ID\n * and timestamps) is returned. Used in tandem with security-sensitive workflows\n * for complete accountability.\n *\n * @param props.connection\n * @param props.body Fields describing the privileged event to be logged.\n * @path /discussionboard/auditLogs\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Fields describing the privileged event to be logged. */\n    body: IDiscussionboardAuditLog.ICreate;\n  };\n  export type Body = IDiscussionboardAuditLog.ICreate;\n  export type Response = IDiscussionboardAuditLog;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/auditLogs\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/auditLogs\";\n  export const random = (): IDiscussionboardAuditLog =>\n    typia.random<IDiscussionboardAuditLog>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List/search audit log entries for privileged actions from the\n * discussionboard_audit_log table.\n *\n * This operation retrieves a list of audit log records from the\n * discussionboard_audit_log table. Filters can be applied for actor, target,\n * action type, entity references, and timestamps. Used by administrators and\n * moderators to review the history of privileged actions such as bans, role\n * changes, and platform configuration updates. Pagination is provided for\n * handling large datasets, and the operation is restricted to privileged roles\n * only. Related endpoints: GET for detailed audit entry, POST for inserting\n * logs (used mostly internally), PUT for corrections/annotations.\n *\n * @param props.connection\n * @param props.body Filtering, pagination, and searching fields for audit logs.\n * @path /discussionboard/auditLogs\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /** Filtering, pagination, and searching fields for audit logs. */\n    body: IDiscussionboardAuditLog.IRequest;\n  };\n  export type Body = IDiscussionboardAuditLog.IRequest;\n  export type Response = IPageIDiscussionboardAuditLog;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/auditLogs\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/auditLogs\";\n  export const random = (): IPageIDiscussionboardAuditLog =>\n    typia.random<IPageIDiscussionboardAuditLog>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get detailed information for an audit log entry from\n * discussionboard_audit_log by ID.\n *\n * This endpoint allows an administrator or moderator to retrieve detailed\n * information on a single audit log entry by its unique identifier. The\n * returned data includes actor/target user IDs, action type, affected entity,\n * and timestamps. Used in incident investigation flows or compliance reviews as\n * required by platform security policy. Related endpoints: PATCH for bulk\n * search and listing, POST for inserting new logs after privileged actions.\n *\n * @param props.connection\n * @param props.id Unique identifier of the audit log entry.\n * @path /discussionboard/auditLogs/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Unique identifier of the audit log entry. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardAuditLog;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/auditLogs/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/auditLogs/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardAuditLog =>\n    typia.random<IDiscussionboardAuditLog>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update an audit log entry in discussionboard_audit_log by ID (privileged use\n * only).\n *\n * Perform an update to an existing audit log entry, identified by its unique ID\n * in the discussionboard_audit_log table. This operation permits administrators\n * or moderators to append additional context, correct metadata, or annotate\n * existing records. Because the audit log is a sensitive table, all updates\n * themselves are logged to ensure complete traceability and non-repudiation.\n * Errors are returned if the entry does not exist or the caller lacks\n * privileges. Related operations: GET for retrieving a record, PATCH for\n * search, POST for new entries.\n *\n * @param props.connection\n * @param props.id Unique identifier of the audit log entry to update.\n * @param props.body Audit log fields to update (e.g., detail, correction,\n *   annotation).\n * @path /discussionboard/auditLogs/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Unique identifier of the audit log entry to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Audit log fields to update (e.g., detail, correction, annotation). */\n    body: IDiscussionboardAuditLog.IUpdate;\n  };\n  export type Body = IDiscussionboardAuditLog.IUpdate;\n  export type Response = IDiscussionboardAuditLog;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/auditLogs/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/auditLogs/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardAuditLog =>\n    typia.random<IDiscussionboardAuditLog>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete an audit log entry from discussionboard_audit_log by ID (admin only,\n * soft-delete).\n *\n * This endpoint allows administrators to delete a privileged audit log entry by\n * its unique ID. Deletions are soft by default, preserving a trace for\n * regulatory or compliance requirements. This operation is restricted to admin\n * users and all deletions are themselves logged to the audit log for\n * traceability. If the record does not exist, a not-found error is shown.\n * Related endpoints: PATCH for listing/filtering logs, GET for detail view, PUT\n * for corrections. No impact on related tables—purely for audit record\n * management.\n *\n * @param props.connection\n * @param props.id Unique identifier of the audit log entry to be deleted.\n * @path /discussionboard/auditLogs/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<void> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Unique identifier of the audit log entry to be deleted. */\n    id: string & tags.Format<\"uuid\">;\n  };\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/auditLogs/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/auditLogs/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): void => typia.random<void>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): void => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "src/api/functional/discussionboard/platformSettings/index.ts": "import { IConnection, HttpError } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport typia, { tags } from \"typia\";\nimport { NestiaSimulator } from \"@nestia/fetcher/lib/NestiaSimulator\";\n\nimport { IDiscussionboardPlatformSetting } from \"../../../structures/IDiscussionboardPlatformSetting\";\nimport { IPageIDiscussionboardPlatformSetting } from \"../../../structures/IPageIDiscussionboardPlatformSetting\";\nimport { IDeleteResult } from \"../../../structures/IDeleteResult\";\n\n/**\n * Create a new configuration setting in 'discussionboard_platform_setting'.\n *\n * Enables an authenticated admin to create a new configuration record in the\n * platform settings table. The operation expects a payload (name, value, type)\n * as per the schema. Automatically records the updated_at timestamp. Ensures\n * 'name' uniqueness per table constraints; returns proper error if duplicate\n * exists, or if incomplete/invalid data is provided.\n *\n * Designed to support expansion of platform features—when new\n * settings/routes/features are rolled out, new records can be created via this\n * API. This endpoint is tightly access-controlled (admin only via Bearer\n * token).\n *\n * Successful response returns the full created entity, confirming project\n * extension and configuration flexibility as described in platform\n * requirements.\n *\n * @param props.connection\n * @param props.body Data needed to create a platform setting (name, value,\n *   type).\n * @path /discussionboard/platformSettings\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function post(\n  connection: IConnection,\n  props: post.Props,\n): Promise<post.Response> {\n  return true === connection.simulate\n    ? post.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...post.METADATA,\n          path: post.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace post {\n  export type Props = {\n    /** Data needed to create a platform setting (name, value, type). */\n    body: IDiscussionboardPlatformSetting.ICreate;\n  };\n  export type Body = IDiscussionboardPlatformSetting.ICreate;\n  export type Response = IDiscussionboardPlatformSetting;\n\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/discussionboard/platformSettings\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/platformSettings\";\n  export const random = (): IDiscussionboardPlatformSetting =>\n    typia.random<IDiscussionboardPlatformSetting>();\n  export const simulate = (\n    connection: IConnection,\n    props: post.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: post.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * List/search platform configuration settings from the\n * discussionboard_platform_setting table (admin only).\n *\n * Enables administrators to retrieve a paginated and searchable list of\n * platform configuration settings from the discussionboard_platform_setting\n * table. Supports filtering by setting name, value, type, and last updated\n * date. Used for displaying platform configuration UI, tracking changes, and\n * supporting system configuration auditing. Only admin role is permitted.\n * Related endpoints: POST and PUT for creating and updating settings, GET for\n * individual setting detail.\n *\n * @param props.connection\n * @param props.body Search and filter fields for querying platform settings\n *   (e.g., name, type, paging).\n * @path /discussionboard/platformSettings\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function patch(\n  connection: IConnection,\n  props: patch.Props,\n): Promise<patch.Response> {\n  return true === connection.simulate\n    ? patch.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...patch.METADATA,\n          path: patch.path(),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace patch {\n  export type Props = {\n    /**\n     * Search and filter fields for querying platform settings (e.g., name,\n     * type, paging).\n     */\n    body: IDiscussionboardPlatformSetting.IRequest;\n  };\n  export type Body = IDiscussionboardPlatformSetting.IRequest;\n  export type Response = IPageIDiscussionboardPlatformSetting;\n\n  export const METADATA = {\n    method: \"PATCH\",\n    path: \"/discussionboard/platformSettings\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = () => \"/discussionboard/platformSettings\";\n  export const random = (): IPageIDiscussionboardPlatformSetting =>\n    typia.random<IPageIDiscussionboardPlatformSetting>();\n  export const simulate = (\n    connection: IConnection,\n    props: patch.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: patch.path(),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Get a specific platform setting by ID from\n * 'discussionboard_platform_setting'.\n *\n * Retrieves a single platform configuration setting by its unique identifier\n * ('id'). This operation is essential for system administrators to fetch\n * current configuration details, validate values before updates, and perform\n * audits as mandated in admin and platform configuration requirements in the\n * business documentation.\n *\n * Permissions are strictly enforced—only users with 'admin' privileges,\n * authenticated via Bearer token, are authorized to invoke this endpoint. The\n * returned object includes all properties of the\n * 'discussionboard_platform_setting' record as defined by the schema, such as\n * id, name, value, type, and updated_at.\n *\n * Indicates errors clearly when the ID does not correspond to an existing\n * setting, or if the caller lacks adequate permissions. This endpoint is\n * typically paired with PUT or DELETE operations for full config management\n * cycles.\n *\n * @param props.connection\n * @param props.id Globally unique identifier for the platform setting to fetch.\n * @path /discussionboard/platformSettings/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function getById(\n  connection: IConnection,\n  props: getById.Props,\n): Promise<getById.Response> {\n  return true === connection.simulate\n    ? getById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...getById.METADATA,\n          path: getById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace getById {\n  export type Props = {\n    /** Globally unique identifier for the platform setting to fetch. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDiscussionboardPlatformSetting;\n\n  export const METADATA = {\n    method: \"GET\",\n    path: \"/discussionboard/platformSettings/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/platformSettings/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPlatformSetting =>\n    typia.random<IDiscussionboardPlatformSetting>();\n  export const simulate = (\n    connection: IConnection,\n    props: getById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: getById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Update platform setting record by ID in 'discussionboard_platform_setting'.\n *\n * Allows an authenticated administrator to update the details of a platform\n * configuration setting, such as name, value, or type. The ID of the target\n * setting is a required path parameter. Only admins can perform this operation,\n * following policy and platform management requirements.\n *\n * Validation logic ensures the uniqueness of 'name' is preserved across all\n * records. Handles invalid IDs, duplicate names, and data validation errors.\n *\n * Returns the updated setting object, as required for auditability and admin\n * interface refreshes. Pairs with GET (by ID) and DELETE for full lifecycle\n * management of platform-wide settings. Authenticated via Bearer token with\n * 'discussionboard_admin' role only.\n *\n * @param props.connection\n * @param props.id Platform setting identifier (PK) to update.\n * @param props.body Fields to update for the setting.\n * @path /discussionboard/platformSettings/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function putById(\n  connection: IConnection,\n  props: putById.Props,\n): Promise<putById.Response> {\n  return true === connection.simulate\n    ? putById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...putById.METADATA,\n          path: putById.path(props),\n          status: null,\n        },\n        props.body,\n      );\n}\nexport namespace putById {\n  export type Props = {\n    /** Platform setting identifier (PK) to update. */\n    id: string & tags.Format<\"uuid\">;\n\n    /** Fields to update for the setting. */\n    body: IDiscussionboardPlatformSetting.IUpdate;\n  };\n  export type Body = IDiscussionboardPlatformSetting.IUpdate;\n  export type Response = IDiscussionboardPlatformSetting;\n\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/discussionboard/platformSettings/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Omit<Props, \"body\">) =>\n    `/discussionboard/platformSettings/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDiscussionboardPlatformSetting =>\n    typia.random<IDiscussionboardPlatformSetting>();\n  export const simulate = (\n    connection: IConnection,\n    props: putById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: putById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n      assert.body(() => typia.assert(props.body));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n\n/**\n * Delete a specific platform-wide setting by ID from\n * 'discussionboard_platform_setting'.\n *\n * Removes a single platform configuration setting, as identified by its unique\n * ID. This is integral to platform management and maintenance, letting\n * administrators retire unused settings and keep configuration lean. Checks for\n * valid existence and subject to business constraints (e.g., settings may not\n * be deleted if in active use—a business rule handled at service layer).\n *\n * Access is strictly controlled: only users with 'discussionboard_admin' role\n * and proper Bearer token are permitted. Operation returns success/failure\n * indication. Usually paired with GET and POST/PUT for complete settings\n * lifecycle.\n *\n * @param props.connection\n * @param props.id Globally unique identifier for the setting to delete.\n * @path /discussionboard/platformSettings/:id\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport async function eraseById(\n  connection: IConnection,\n  props: eraseById.Props,\n): Promise<eraseById.Response> {\n  return true === connection.simulate\n    ? eraseById.simulate(connection, props)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...eraseById.METADATA,\n          path: eraseById.path(props),\n          status: null,\n        },\n      );\n}\nexport namespace eraseById {\n  export type Props = {\n    /** Globally unique identifier for the setting to delete. */\n    id: string & tags.Format<\"uuid\">;\n  };\n  export type Response = IDeleteResult;\n\n  export const METADATA = {\n    method: \"DELETE\",\n    path: \"/discussionboard/platformSettings/:id\",\n    request: null,\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n  } as const;\n\n  export const path = (props: Props) =>\n    `/discussionboard/platformSettings/${encodeURIComponent(props.id ?? \"null\")}`;\n  export const random = (): IDeleteResult => typia.random<IDeleteResult>();\n  export const simulate = (\n    connection: IConnection,\n    props: eraseById.Props,\n  ): Response => {\n    const assert = NestiaSimulator.assert({\n      method: METADATA.method,\n      host: connection.host,\n      path: eraseById.path(props),\n      contentType: \"application/json\",\n    });\n    try {\n      assert.param(\"id\")(() => typia.assert(props.id));\n    } catch (exp) {\n      if (!typia.is<HttpError>(exp)) throw exp;\n      return {\n        success: false,\n        status: exp.status,\n        headers: exp.headers,\n        data: exp.toJSON().message,\n      } as any;\n    }\n    return random();\n  };\n}\n",
      "test/features/api/test_api_discussionboard_users_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardUser } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUser\";\n\nexport async function test_api_discussionboard_users_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUser =\n    await api.functional.discussionboard.users.post(connection, {\n      body: typia.random<IDiscussionboardUser.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_users_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageDiscussionboardUser } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageDiscussionboardUser\";\nimport { IDiscussionboardUser } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUser\";\n\nexport async function test_api_discussionboard_users_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageDiscussionboardUser =\n    await api.functional.discussionboard.users.patch(connection, {\n      body: typia.random<IDiscussionboardUser.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_users_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUser } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUser\";\n\nexport async function test_api_discussionboard_users_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUser =\n    await api.functional.discussionboard.users.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_users_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUser } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUser\";\n\nexport async function test_api_discussionboard_users_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUser =\n    await api.functional.discussionboard.users.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardUser.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_users_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUser } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUser\";\n\nexport async function test_api_discussionboard_users_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUser =\n    await api.functional.discussionboard.users.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_userProfiles_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardUserProfile } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUserProfile\";\n\nexport async function test_api_discussionboard_userProfiles_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUserProfile =\n    await api.functional.discussionboard.userProfiles.post(connection, {\n      body: typia.random<IDiscussionboardUserProfile.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_userProfiles_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageDiscussionboardUserProfile } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageDiscussionboardUserProfile\";\nimport { IDiscussionboardUserProfile } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUserProfile\";\n\nexport async function test_api_discussionboard_userProfiles_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageDiscussionboardUserProfile =\n    await api.functional.discussionboard.userProfiles.patch(connection, {\n      body: typia.random<IDiscussionboardUserProfile.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_userProfiles_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUserProfile } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUserProfile\";\n\nexport async function test_api_discussionboard_userProfiles_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUserProfile =\n    await api.functional.discussionboard.userProfiles.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_userProfiles_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUserProfile } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUserProfile\";\n\nexport async function test_api_discussionboard_userProfiles_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUserProfile =\n    await api.functional.discussionboard.userProfiles.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardUserProfile.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_userProfiles_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardUserProfile } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardUserProfile\";\n\nexport async function test_api_discussionboard_userProfiles_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardUserProfile =\n    await api.functional.discussionboard.userProfiles.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_members_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardMember } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardMember\";\n\nexport async function test_api_discussionboard_members_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardMember =\n    await api.functional.discussionboard.members.post(connection, {\n      body: typia.random<IDiscussionboardMember.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_members_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageDiscussionboardMember } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageDiscussionboardMember\";\nimport { IDiscussionboardMember } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardMember\";\n\nexport async function test_api_discussionboard_members_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageDiscussionboardMember =\n    await api.functional.discussionboard.members.patch(connection, {\n      body: typia.random<IDiscussionboardMember.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_members_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardMember } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardMember\";\n\nexport async function test_api_discussionboard_members_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardMember =\n    await api.functional.discussionboard.members.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_members_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardMember } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardMember\";\n\nexport async function test_api_discussionboard_members_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardMember =\n    await api.functional.discussionboard.members.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardMember.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_members_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardMember } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardMember\";\n\nexport async function test_api_discussionboard_members_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardMember =\n    await api.functional.discussionboard.members.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderators_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardModerator } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerator\";\n\nexport async function test_api_discussionboard_moderators_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerator =\n    await api.functional.discussionboard.moderators.post(connection, {\n      body: typia.random<IDiscussionboardModerator.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderators_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageDiscussionboardModerator } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageDiscussionboardModerator\";\nimport { IDiscussionboardModerator } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerator\";\n\nexport async function test_api_discussionboard_moderators_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageDiscussionboardModerator =\n    await api.functional.discussionboard.moderators.patch(connection, {\n      body: typia.random<IDiscussionboardModerator.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderators_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerator } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerator\";\n\nexport async function test_api_discussionboard_moderators_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerator =\n    await api.functional.discussionboard.moderators.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderators_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerator } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerator\";\n\nexport async function test_api_discussionboard_moderators_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerator =\n    await api.functional.discussionboard.moderators.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardModerator.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderators_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerator } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerator\";\n\nexport async function test_api_discussionboard_moderators_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerator =\n    await api.functional.discussionboard.moderators.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_admins_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardAdmin } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAdmin\";\n\nexport async function test_api_discussionboard_admins_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardAdmin =\n    await api.functional.discussionboard.admins.post(connection, {\n      body: typia.random<IDiscussionboardAdmin.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_admins_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageDiscussionboardAdmin } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageDiscussionboardAdmin\";\nimport { IDiscussionboardAdmin } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAdmin\";\n\nexport async function test_api_discussionboard_admins_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageDiscussionboardAdmin =\n    await api.functional.discussionboard.admins.patch(connection, {\n      body: typia.random<IDiscussionboardAdmin.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_admins_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardAdmin } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAdmin\";\n\nexport async function test_api_discussionboard_admins_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardAdmin =\n    await api.functional.discussionboard.admins.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_admins_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardAdmin } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAdmin\";\n\nexport async function test_api_discussionboard_admins_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardAdmin =\n    await api.functional.discussionboard.admins.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardAdmin.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_admins_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_admins_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.admins.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_posts_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardPost } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPost\";\n\nexport async function test_api_discussionboard_posts_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPost =\n    await api.functional.discussionboard.posts.post(connection, {\n      body: typia.random<IDiscussionboardPost.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_posts_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardPost } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardPost\";\nimport { IDiscussionboardPost } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPost\";\n\nexport async function test_api_discussionboard_posts_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardPost.ISummary =\n    await api.functional.discussionboard.posts.patch(connection, {\n      body: typia.random<IDiscussionboardPost.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_posts_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPost } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPost\";\n\nexport async function test_api_discussionboard_posts_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPost =\n    await api.functional.discussionboard.posts.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_posts_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPost } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPost\";\n\nexport async function test_api_discussionboard_posts_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPost =\n    await api.functional.discussionboard.posts.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardPost.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_posts_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_posts_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.posts.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postCategories_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardPostCategory } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostCategory\";\n\nexport async function test_api_discussionboard_postCategories_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostCategory =\n    await api.functional.discussionboard.postCategories.post(connection, {\n      body: typia.random<IDiscussionboardPostCategory.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postCategories_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardPostCategory } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardPostCategory\";\nimport { IDiscussionboardPostCategory } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostCategory\";\n\nexport async function test_api_discussionboard_postCategories_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardPostCategory =\n    await api.functional.discussionboard.postCategories.patch(connection, {\n      body: typia.random<IDiscussionboardPostCategory.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postCategories_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostCategory } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostCategory\";\n\nexport async function test_api_discussionboard_postCategories_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostCategory =\n    await api.functional.discussionboard.postCategories.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postCategories_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostCategory } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostCategory\";\n\nexport async function test_api_discussionboard_postCategories_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostCategory =\n    await api.functional.discussionboard.postCategories.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardPostCategory.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postCategories_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_postCategories_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.postCategories.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postTags_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardPostTag } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostTag\";\n\nexport async function test_api_discussionboard_postTags_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostTag =\n    await api.functional.discussionboard.postTags.post(connection, {\n      body: typia.random<IDiscussionboardPostTag.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postTags_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardPostTag } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardPostTag\";\nimport { IDiscussionboardPostTag } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostTag\";\n\nexport async function test_api_discussionboard_postTags_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardPostTag =\n    await api.functional.discussionboard.postTags.patch(connection, {\n      body: typia.random<IDiscussionboardPostTag.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postTags_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostTag } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostTag\";\n\nexport async function test_api_discussionboard_postTags_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostTag =\n    await api.functional.discussionboard.postTags.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postTags_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostTag } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostTag\";\n\nexport async function test_api_discussionboard_postTags_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostTag =\n    await api.functional.discussionboard.postTags.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardPostTag.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postTags_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDeleteResponse } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDeleteResponse\";\n\nexport async function test_api_discussionboard_postTags_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDeleteResponse =\n    await api.functional.discussionboard.postTags.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postAttachments_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardPostAttachment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostAttachment\";\n\nexport async function test_api_discussionboard_postAttachments_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostAttachment =\n    await api.functional.discussionboard.postAttachments.post(connection, {\n      body: typia.random<IDiscussionboardPostAttachment.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postAttachments_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardPostAttachment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardPostAttachment\";\nimport { IDiscussionboardPostAttachment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostAttachment\";\n\nexport async function test_api_discussionboard_postAttachments_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardPostAttachment =\n    await api.functional.discussionboard.postAttachments.patch(connection, {\n      body: typia.random<IDiscussionboardPostAttachment.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postAttachments_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostAttachment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostAttachment\";\n\nexport async function test_api_discussionboard_postAttachments_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostAttachment =\n    await api.functional.discussionboard.postAttachments.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postAttachments_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPostAttachment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPostAttachment\";\n\nexport async function test_api_discussionboard_postAttachments_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPostAttachment =\n    await api.functional.discussionboard.postAttachments.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardPostAttachment.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_postAttachments_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDeleteResponse } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDeleteResponse\";\n\nexport async function test_api_discussionboard_postAttachments_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDeleteResponse =\n    await api.functional.discussionboard.postAttachments.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_comments_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardComments } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardComments\";\n\nexport async function test_api_discussionboard_comments_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardComments =\n    await api.functional.discussionboard.comments.post(connection, {\n      body: typia.random<IDiscussionboardComments.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_comments_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardComments } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardComments\";\nimport { IDiscussionboardComments } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardComments\";\n\nexport async function test_api_discussionboard_comments_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardComments =\n    await api.functional.discussionboard.comments.patch(connection, {\n      body: typia.random<IDiscussionboardComments.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_comments_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardComments } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardComments\";\n\nexport async function test_api_discussionboard_comments_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardComments =\n    await api.functional.discussionboard.comments.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_comments_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardComment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardComment\";\n\nexport async function test_api_discussionboard_comments_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardComment =\n    await api.functional.discussionboard.comments.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardComment.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_comments_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardComment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardComment\";\n\nexport async function test_api_discussionboard_comments_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardComment =\n    await api.functional.discussionboard.comments.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_likes_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardLike } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardLike\";\n\nexport async function test_api_discussionboard_likes_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardLike =\n    await api.functional.discussionboard.likes.post(connection, {\n      body: typia.random<IDiscussionboardLike.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_likes_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardLike } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardLike\";\nimport { IDiscussionboardLike } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardLike\";\n\nexport async function test_api_discussionboard_likes_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardLike =\n    await api.functional.discussionboard.likes.patch(connection, {\n      body: typia.random<IDiscussionboardLike.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_likes_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardLike } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardLike\";\n\nexport async function test_api_discussionboard_likes_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardLike =\n    await api.functional.discussionboard.likes.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_likes_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardLike } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardLike\";\n\nexport async function test_api_discussionboard_likes_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardLike =\n    await api.functional.discussionboard.likes.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardLike.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_likes_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardLike } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardLike\";\n\nexport async function test_api_discussionboard_likes_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardLike =\n    await api.functional.discussionboard.likes.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reports_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardReport } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReport\";\n\nexport async function test_api_discussionboard_reports_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReport =\n    await api.functional.discussionboard.reports.post(connection, {\n      body: typia.random<IDiscussionboardReport.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reports_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardReport } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardReport\";\nimport { IDiscussionboardReport } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReport\";\n\nexport async function test_api_discussionboard_reports_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardReport =\n    await api.functional.discussionboard.reports.patch(connection, {\n      body: typia.random<IDiscussionboardReport.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reports_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReport } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReport\";\n\nexport async function test_api_discussionboard_reports_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReport =\n    await api.functional.discussionboard.reports.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reports_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReport } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReport\";\n\nexport async function test_api_discussionboard_reports_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReport =\n    await api.functional.discussionboard.reports.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardReport.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reports_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReport } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReport\";\n\nexport async function test_api_discussionboard_reports_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReport =\n    await api.functional.discussionboard.reports.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderationActions_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardModerationAction } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerationAction\";\n\nexport async function test_api_discussionboard_moderationActions_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerationAction =\n    await api.functional.discussionboard.moderationActions.post(connection, {\n      body: typia.random<IDiscussionboardModerationAction.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderationActions_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardModerationAction } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardModerationAction\";\nimport { IDiscussionboardModerationAction } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerationAction\";\n\nexport async function test_api_discussionboard_moderationActions_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardModerationAction =\n    await api.functional.discussionboard.moderationActions.patch(connection, {\n      body: typia.random<IDiscussionboardModerationAction.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderationActions_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerationAction } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerationAction\";\n\nexport async function test_api_discussionboard_moderationActions_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerationAction =\n    await api.functional.discussionboard.moderationActions.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderationActions_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerationAction } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerationAction\";\n\nexport async function test_api_discussionboard_moderationActions_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerationAction =\n    await api.functional.discussionboard.moderationActions.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardModerationAction.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_moderationActions_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardModerationAction } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardModerationAction\";\n\nexport async function test_api_discussionboard_moderationActions_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardModerationAction =\n    await api.functional.discussionboard.moderationActions.eraseById(\n      connection,\n      {\n        id: typia.random<string & tags.Format<\"uuid\">>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reportReviews_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardReportReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReportReview\";\n\nexport async function test_api_discussionboard_reportReviews_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReportReview =\n    await api.functional.discussionboard.reportReviews.post(connection, {\n      body: typia.random<IDiscussionboardReportReview.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reportReviews_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardReportReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardReportReview\";\nimport { IDiscussionboardReportReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReportReview\";\n\nexport async function test_api_discussionboard_reportReviews_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardReportReview =\n    await api.functional.discussionboard.reportReviews.patch(connection, {\n      body: typia.random<IDiscussionboardReportReview.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reportReviews_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReportReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReportReview\";\n\nexport async function test_api_discussionboard_reportReviews_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReportReview =\n    await api.functional.discussionboard.reportReviews.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reportReviews_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReportReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReportReview\";\n\nexport async function test_api_discussionboard_reportReviews_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReportReview =\n    await api.functional.discussionboard.reportReviews.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardReportReview.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_reportReviews_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardReportReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardReportReview\";\n\nexport async function test_api_discussionboard_reportReviews_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardReportReview =\n    await api.functional.discussionboard.reportReviews.eraseById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_warnings_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardWarning } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardWarning\";\n\nexport async function test_api_discussionboard_warnings_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardWarning =\n    await api.functional.discussionboard.warnings.post(connection, {\n      body: typia.random<IDiscussionboardWarning.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_warnings_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardWarning } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardWarning\";\nimport { IDiscussionboardWarning } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardWarning\";\n\nexport async function test_api_discussionboard_warnings_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardWarning =\n    await api.functional.discussionboard.warnings.patch(connection, {\n      body: typia.random<IDiscussionboardWarning.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_warnings_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardWarning } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardWarning\";\n\nexport async function test_api_discussionboard_warnings_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardWarning =\n    await api.functional.discussionboard.warnings.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_warnings_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardWarning } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardWarning\";\n\nexport async function test_api_discussionboard_warnings_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardWarning =\n    await api.functional.discussionboard.warnings.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardWarning.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_warnings_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_warnings_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.warnings.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_bans_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardBan } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardBan\";\n\nexport async function test_api_discussionboard_bans_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardBan =\n    await api.functional.discussionboard.bans.post(connection, {\n      body: typia.random<IDiscussionboardBan.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_bans_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardBan } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardBan\";\n\nexport async function test_api_discussionboard_bans_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardBan =\n    await api.functional.discussionboard.bans.patch(connection, {\n      body: typia.random<IPageIDiscussionboardBan.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_bans_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardBan } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardBan\";\n\nexport async function test_api_discussionboard_bans_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardBan =\n    await api.functional.discussionboard.bans.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_bans_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardBan } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardBan\";\n\nexport async function test_api_discussionboard_bans_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardBan =\n    await api.functional.discussionboard.bans.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardBan.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_bans_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_bans_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.bans.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notifications_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardNotification } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotification\";\n\nexport async function test_api_discussionboard_notifications_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardNotification =\n    await api.functional.discussionboard.notifications.post(connection, {\n      body: typia.random<IDiscussionboardNotification.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notifications_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardNotification } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardNotification\";\n\nexport async function test_api_discussionboard_notifications_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardNotification =\n    await api.functional.discussionboard.notifications.patch(connection, {\n      body: typia.random<IPageIDiscussionboardNotification.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notifications_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardNotification } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotification\";\n\nexport async function test_api_discussionboard_notifications_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardNotification =\n    await api.functional.discussionboard.notifications.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notifications_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardNotification } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotification\";\n\nexport async function test_api_discussionboard_notifications_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardNotification =\n    await api.functional.discussionboard.notifications.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardNotification.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notifications_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_notifications_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.notifications.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notificationPreferences_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardNotificationPreference } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotificationPreference\";\n\nexport async function test_api_discussionboard_notificationPreferences_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardNotificationPreference =\n    await api.functional.discussionboard.notificationPreferences.post(\n      connection,\n      {\n        body: typia.random<IDiscussionboardNotificationPreference.ICreate>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notificationPreferences_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardNotificationPreference } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardNotificationPreference\";\nimport { IDiscussionboardNotificationPreference } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotificationPreference\";\n\nexport async function test_api_discussionboard_notificationPreferences_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardNotificationPreference =\n    await api.functional.discussionboard.notificationPreferences.patch(\n      connection,\n      {\n        body: typia.random<IDiscussionboardNotificationPreference.IRequest>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notificationPreferences_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardNotificationPreference } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotificationPreference\";\n\nexport async function test_api_discussionboard_notificationPreferences_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardNotificationPreference =\n    await api.functional.discussionboard.notificationPreferences.getById(\n      connection,\n      {\n        id: typia.random<string & tags.Format<\"uuid\">>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notificationPreferences_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardNotificationPreference } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardNotificationPreference\";\n\nexport async function test_api_discussionboard_notificationPreferences_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardNotificationPreference =\n    await api.functional.discussionboard.notificationPreferences.putById(\n      connection,\n      {\n        id: typia.random<string & tags.Format<\"uuid\">>(),\n        body: typia.random<IDiscussionboardNotificationPreference.IUpdate>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_notificationPreferences_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_notificationPreferences_eraseById(\n  connection: api.IConnection,\n) {\n  const output =\n    await api.functional.discussionboard.notificationPreferences.eraseById(\n      connection,\n      {\n        id: typia.random<string & tags.Format<\"uuid\">>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_auditLogs_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardAuditLog } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAuditLog\";\n\nexport async function test_api_discussionboard_auditLogs_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardAuditLog =\n    await api.functional.discussionboard.auditLogs.post(connection, {\n      body: typia.random<IDiscussionboardAuditLog.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_auditLogs_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardAuditLog } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardAuditLog\";\nimport { IDiscussionboardAuditLog } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAuditLog\";\n\nexport async function test_api_discussionboard_auditLogs_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardAuditLog =\n    await api.functional.discussionboard.auditLogs.patch(connection, {\n      body: typia.random<IDiscussionboardAuditLog.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_auditLogs_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardAuditLog } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAuditLog\";\n\nexport async function test_api_discussionboard_auditLogs_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardAuditLog =\n    await api.functional.discussionboard.auditLogs.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_auditLogs_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardAuditLog } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardAuditLog\";\n\nexport async function test_api_discussionboard_auditLogs_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardAuditLog =\n    await api.functional.discussionboard.auditLogs.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardAuditLog.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_auditLogs_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nexport async function test_api_discussionboard_auditLogs_eraseById(\n  connection: api.IConnection,\n) {\n  const output = await api.functional.discussionboard.auditLogs.eraseById(\n    connection,\n    {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    },\n  );\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_platformSettings_post.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IDiscussionboardPlatformSetting } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPlatformSetting\";\n\nexport async function test_api_discussionboard_platformSettings_post(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPlatformSetting =\n    await api.functional.discussionboard.platformSettings.post(connection, {\n      body: typia.random<IDiscussionboardPlatformSetting.ICreate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_platformSettings_patch.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia from \"typia\";\n\nimport { IPageIDiscussionboardPlatformSetting } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIDiscussionboardPlatformSetting\";\nimport { IDiscussionboardPlatformSetting } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPlatformSetting\";\n\nexport async function test_api_discussionboard_platformSettings_patch(\n  connection: api.IConnection,\n) {\n  const output: IPageIDiscussionboardPlatformSetting =\n    await api.functional.discussionboard.platformSettings.patch(connection, {\n      body: typia.random<IDiscussionboardPlatformSetting.IRequest>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_platformSettings_getById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPlatformSetting } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPlatformSetting\";\n\nexport async function test_api_discussionboard_platformSettings_getById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPlatformSetting =\n    await api.functional.discussionboard.platformSettings.getById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_platformSettings_putById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDiscussionboardPlatformSetting } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionboardPlatformSetting\";\n\nexport async function test_api_discussionboard_platformSettings_putById(\n  connection: api.IConnection,\n) {\n  const output: IDiscussionboardPlatformSetting =\n    await api.functional.discussionboard.platformSettings.putById(connection, {\n      id: typia.random<string & tags.Format<\"uuid\">>(),\n      body: typia.random<IDiscussionboardPlatformSetting.IUpdate>(),\n    });\n  typia.assert(output);\n}\n",
      "test/features/api/test_api_discussionboard_platformSettings_eraseById.ts": "import api from \"@ORGANIZATION/PROJECT-api\";\nimport typia, { tags } from \"typia\";\n\nimport { IDeleteResult } from \"@ORGANIZATION/PROJECT-api/lib/structures/IDeleteResult\";\n\nexport async function test_api_discussionboard_platformSettings_eraseById(\n  connection: api.IConnection,\n) {\n  const output: IDeleteResult =\n    await api.functional.discussionboard.platformSettings.eraseById(\n      connection,\n      {\n        id: typia.random<string & tags.Format<\"uuid\">>(),\n      },\n    );\n  typia.assert(output);\n}\n",
      "packages/api/swagger.json": "{\n  \"openapi\": \"3.1.0\",\n  \"paths\": {\n    \"/discussionboard/users\": {\n      \"patch\": {\n        \"summary\": \"Retrieve a paginated, searchable list of users (discussionboard_user).\",\n        \"description\": \"This API operation retrieves a searchable, paginated list of user master records from the discussionboard_user table. It supports query capabilities for filtering by activation status, creation/update timestamp, and partial email matches. The endpoint is designed to be used primarily by administrators and moderators for user oversight and management per the defined permissions matrix. Security: Only accessible to admin or moderator roles. Validation: Supports strong input validation on paging and filters, and must log all access for auditability. Related operations: administrators may utilize this in conjunction with the user single-record GET for comprehensive user management workflows.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardUser.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering, paging, and search parameters for listing user master records.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageDiscussionboardUser\"\n                }\n              }\n            },\n            \"description\": \"Paginated, filtered results of user master records.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new user (discussionboard_user) record.\",\n        \"description\": \"This endpoint creates a new user master record, writing to the discussionboard_user table. It handles validation for unique emails, initial password hash assignment, and sets is_active to its default state according to business rules. Security considerations ensure only authorized roles can invoke direct creation. The operation also triggers any necessary audit logging for compliance. Related operations: used in tandem with user profile creation, member role assignment, and authentication flows.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardUser.ICreate\"\n              }\n            }\n          },\n          \"description\": \"User registration or admin onboarding details.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUser\"\n                }\n              }\n            },\n            \"description\": \"Created user master record including system-generated fields.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/users/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a single user (discussionboard_user) by ID.\",\n        \"description\": \"This API retrieves the complete information for an individual user, identified by their UUID. It is intended for use by administrators and moderators in user management scenarios, such as reviewing, editing, or auditing user details. The response includes all core attributes (email, activation status, creation/update timestamps) and maintains security by strictly permitting access to authorized roles. Related operations may include list retrieval and update endpoints.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"User's unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUser\"\n                }\n              }\n            },\n            \"description\": \"Full user master record including authentication and status fields.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a user (discussionboard_user) by ID.\",\n        \"description\": \"This API operation allows modification of selected user fields (email, password hash, is_active), targeting a specific user by UUID. Security and validation rules enforce role-based restrictions and data integrity per requirements. The endpoint is heavily audited to track all changes for compliance, and is designed for admin or moderator-initiated actions. Related endpoints: single user GET, user list PATCH. Error handling robustly communicates invalid updates or permission violations.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"User's unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardUser.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields and values for updating the user record.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUser\"\n                }\n              }\n            },\n            \"description\": \"Updated user master record reflecting all changes.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete (deactivate) a user (discussionboard_user) by ID.\",\n        \"description\": \"Deletes (or deactivates) a user account by UUID. This API supports administrative removal flows, including compliance logging. It is designed for admin-level actions, as user deletion can have significant platform/customer impact. The operation typically issues a soft-delete (e.g., toggling is_active to false) and is fully audited, in line with platform integrity and regulatory demands. Related: Admin dashboard user controls, audit log write.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"User's unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUser\"\n                }\n              }\n            },\n            \"description\": \"Confirmation of deletion or user status change.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/userProfiles\": {\n      \"patch\": {\n        \"summary\": \"List user profiles (discussionboard_user_profile) with search/pagination.\",\n        \"description\": \"This endpoint allows privileged users to retrieve and browse user profile records, supporting full-text and field-level search and filters (display_name, bio, etc.). The response is paginated and designed to support member directories, user management workflows, and audit reporting. Security: limited to moderators and admins. Validation: robust query filtering and result formatting per requirements analysis. Related: GET/PATCH/PUT/DELETE profile endpoints.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Profile list filtering, search, and pagination request.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageDiscussionboardUserProfile\"\n                }\n              }\n            },\n            \"description\": \"Paginated, filtered user profile records.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new user profile (discussionboard_user_profile) record.\",\n        \"description\": \"This operation creates a new user profile, referencing the parent user record, and populates display_name, avatar_url, and bio. Security: Only admin/moderator roles allowed direct creation via this API. Validation: requires unique user_id and all required fields as per schema. Successful creation triggers audit log entries. Related: member onboarding, profile edit flows.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Profile creation (display name, avatar, bio, user_id).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile\"\n                }\n              }\n            },\n            \"description\": \"Newly created user profile record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/userProfiles/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a user profile (discussionboard_user_profile) by ID.\",\n        \"description\": \"Fetches all stored display and personal information for an individual user's profile by UUID. Used for profile detail views in administration/moderation dashboards, as well as for member self-service editing. Security/permissions checks ensure only proper roles may access. Data structure matches schema commentary and requirements.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"User profile unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile\"\n                }\n              }\n            },\n            \"description\": \"Complete user profile record.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a user profile (discussionboard_user_profile) by ID.\",\n        \"description\": \"Allows modification to a single user profile by its UUID, supporting all permitted fields (display name, avatar, bio, etc.). Security controls enforce that only authorized roles may make such edits. Audit log entries created for each change. The endpoint supports tight input validation for data quality.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"User profile unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Profile fields and values for update.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile\"\n                }\n              }\n            },\n            \"description\": \"Updated user profile record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a user profile (discussionboard_user_profile) by ID.\",\n        \"description\": \"Removes the user profile entry with the specified UUID. This endpoint is used primarily by admins for compliance-driven and support-driven cleanup tasks. Operation is logged for auditability, and security enforces administrative privilege.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"User profile unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile\"\n                }\n              }\n            },\n            \"description\": \"Confirmation of profile deletion (or state change).\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/members\": {\n      \"patch\": {\n        \"summary\": \"List platform members (discussionboard_member) with search/pagination.\",\n        \"description\": \"This API returns a paginated collection of all members assigned to the platform, including details such as grant timestamp and related user account identifiers. Filters include active/inactive status, joining date, etc. Security: Only admins and moderators can access for role management or audit workflows. Related: GET member, PATCH/PUT/DELETE endpoints for role adjustment.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardMember.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering, paging, and search parameters for member role records.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageDiscussionboardMember\"\n                }\n              }\n            },\n            \"description\": \"Paginated, filtered member role assignments.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new discussionboard_member entity based on the discussionboard_member table.\",\n        \"description\": \"This API endpoint allows an administrator or system operator to create a new member in the discussionboard_member table. The member role grants basic participation privileges according to the permissions matrix in the requirements documentation. The creation process requires associating the new member with a valid discussionboard_user (user_id). This ensures that all new members have a corresponding authenticated user record, and that there is no role duplication or data inconsistency. The request validates the provided user and ensures that no existing member role is already attached to the given user_id. If the user_id is not found or already registered as a member, the API will return an error.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardMember.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Information required to create a new member (must include user_id and grant timestamp).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardMember\"\n                }\n              }\n            },\n            \"description\": \"The newly created member entity.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/members/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific member (discussionboard_member) by ID.\",\n        \"description\": \"Fetches the record of a specific member role assignment, referenced by its UUID. Supports administration dashboard use cases, auditing, and role validation. Security: accessible only to admins and moderators. Related: PATCH member list, PUT/DELETE member for role management.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Member role assignment unique identifier (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardMember\"\n                }\n              }\n            },\n            \"description\": \"Single member role assignment record.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update an existing discussionboard_member entity by id in the discussionboard_member table.\",\n        \"description\": \"This API endpoint allows administrators to update information of an existing member in the discussionboard_member table. Typically, only the grant timestamp or similar metadata may be updated, as member roles themselves are atomic. The endpoint strictly requires sufficient privileges and validates the specified id (primary key) to ensure the member entity exists. Unauthorized or inappropriate attempts to escalate privileges are restricted by business logic, and audit logs are maintained for such role modifications.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_member entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardMember.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Updated member data (must match updatable discussionboard_member fields).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardMember\"\n                }\n              }\n            },\n            \"description\": \"The updated discussionboard_member entity.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a discussionboard_member entity (revoke member role) in the discussionboard_member table by id.\",\n        \"description\": \"This API endpoint enables an administrator to remove a member role assignment from a particular user by the member's primary key (id). This revocation is closely audited, ensuring traceability. The endpoint validates the specified id, deletes the member role only if it exists, and refuses to remove membership from users who are currently serving as moderator/admin (unless business policies specifically permit cascading removal). Operations are logged for compliance.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_member entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardMember\"\n                }\n              }\n            },\n            \"description\": \"Result or deleted entity data.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/moderators\": {\n      \"patch\": {\n        \"summary\": \"List/search all discussionboard_moderator entities (with pagination and filters) in the discussionboard_moderator table.\",\n        \"description\": \"This endpoint returns a list of moderator role assignments with support for pagination, search filters (such as assigned_at date, or associated user), and sorting. Admins can use this API to review all current and past moderator assignments. The output includes grants with their associated user ids, assignment timestamps, and moderator assignment metadata. Query parameters allow for narrowing the list based on assignment time or specific users. This is a critical part of the admin's dashboard role and security monitoring workflows.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardModerator.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Search filters, pagination, and sort info for moderator assignment retrieval.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageDiscussionboardModerator\"\n                }\n              }\n            },\n            \"description\": \"Paginated result set of moderator entities.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new discussionboard_moderator assignment in the discussionboard_moderator table.\",\n        \"description\": \"This endpoint allows admins to create and assign new moderator roles to existing users. The process ensures that only users who are already members (but not already moderators or admins) are eligible. The request must specify the user_id and assignment date/time. The endpoint validates input and records the new assignment for future audits. Creation is tightly audited and triggers related permission changes for the specified user.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardModerator.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Moderator assignment information (user_id and assignment time).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerator\"\n                }\n              }\n            },\n            \"description\": \"The newly created moderator assignment entity.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/moderators/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a single discussionboard_moderator entity by id from the discussionboard_moderator table.\",\n        \"description\": \"This API operation fetches a specific moderator assignment record from the discussionboard_moderator table based on the provided id (UUID). The response details the moderator's associated user account and assignment metadata, supporting admin review, dashboard, and audit functionality. Error handling ensures non-existent ids are reported gracefully.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_moderator entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerator\"\n                }\n              }\n            },\n            \"description\": \"The moderator assignment entity details.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a discussionboard_moderator entity by id in the discussionboard_moderator table.\",\n        \"description\": \"This endpoint allows an admin to update the assignment properties (e.g., timestamps) of an existing moderator entity by id. Business logic restricts changing the actual user_id or role, as role escalation/demotion should use separate business flows. The operation is logged and validated for admin-only use, and errors are reported if the id is invalid or immutable properties are attempted to be updated.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_moderator entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardModerator.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Updatable moderator assignment fields (assignment time, etc).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerator\"\n                }\n              }\n            },\n            \"description\": \"The updated moderator assignment entity.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a discussionboard_moderator entry (revoke moderator role) by id in the discussionboard_moderator table.\",\n        \"description\": \"This endpoint allows an admin to remove moderator status from a user by deleting the corresponding discussionboard_moderator role entry using its id. This action is audited and validated. It does not delete the underlying user or member records, only the moderator assignment. Errors are thrown if cascading deletes aren’t permitted or if the id is not found.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_moderator entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerator\"\n                }\n              }\n            },\n            \"description\": \"Deleted role record or result confirmation.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/admins\": {\n      \"patch\": {\n        \"summary\": \"List/search all discussionboard_admin entities (paginated, with filters) in the discussionboard_admin table.\",\n        \"description\": \"This endpoint offers admins an overview and search interface for all platform administrator assignments in the discussionboard_admin table. The payload supports pagination, keyword search, and filtering by assignment date or user. It forms the basis for privileged account audits, access controls, and compliance verification. The operation is restricted to high privilege user roles; data is indexed for efficiency.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardAdmin.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Search filters, pagination, and sorting information for retrieving admin assignments.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageDiscussionboardAdmin\"\n                }\n              }\n            },\n            \"description\": \"Paginated result set of administrator entities.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new discussionboard_admin role assignment in the discussionboard_admin table.\",\n        \"description\": \"This endpoint lets an authorized administrator create a new admin assignment (promotion) for a user, typically by specifying the target user_id and the assignment timestamp. It validates eligibility, checks for duplicate admin assignments, and ensures a single active admin assignment per user. Assignments are tightly audited, and only current admins may perform this action as per the permissions matrix.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardAdmin.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Admin role assignment information (user_id and assignment timestamp).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardAdmin\"\n                }\n              }\n            },\n            \"description\": \"The newly created admin role assignment entity.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/admins/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a single discussionboard_admin entity by id from the discussionboard_admin table.\",\n        \"description\": \"Fetch the details of a platform administrator role assignment by its id (UUID) from the discussionboard_admin table. This supports dashboard and audit workflows, validating the provided id and returning associated user and role metadata. Errors for non-existent ids are handled gracefully. Only users with sufficient privileges (other admins) can perform this query according to the permission model.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_admin entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardAdmin\"\n                }\n              }\n            },\n            \"description\": \"Platform administrator assignment entity details.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a discussionboard_admin role assignment by id in the discussionboard_admin table.\",\n        \"description\": \"Update the assignment-related metadata (such as assigned_at) of an existing administrator role entity by its id. Only admins may perform this operation, and audit logs are updated accordingly. Changing the actual user_id or demotion is explicitly not handled by this endpoint, which is meant only for metadata updates.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target discussionboard_admin entity id (UUID).\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardAdmin.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Updatable admin assignment fields, such as assignment time.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardAdmin\"\n                }\n              }\n            },\n            \"description\": \"The updated administrator assignment entity.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete an admin record from discussionboard_admin table by its ID (admin-only).\",\n        \"description\": \"This API operation deletes an administrator record from the discussionboard_admin entity. As per the requirements documents, admin role records are maintained distinctly from user, moderator, and member entries, supporting 3NF and full audit compliance. Deletion of an admin role is a restricted operation, only allowed for authenticated super admins via bearer token, ensuring robust authorization checks. Security is paramount, as role escalation and privilege management are tracked through audit logging (discussionboard_audit_log). Attempting to delete an admin role that does not exist results in a not-found error; permission errors trigger a forbidden error. This API supports platform maintenance, role reconfiguration, and compliance with the roles and permissions design clarified in the requirements and schema.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target admin assignment ID for deletion\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/posts\": {\n      \"patch\": {\n        \"summary\": \"Retrieve a list of discussionboard_post entries with filtering, search, and pagination.\",\n        \"description\": \"Retrieves a list of discussion posts from the discussionboard_post entity, with advanced query and pagination support in the request body. This operation fulfills the requirements for filtered, paged, and searchable list retrieval across all board categories. By referencing associated entities like member (author), category, attachments, and moderation status, this endpoint provides broad discoverability and content management. Members see only visible posts; moderators/admins can query hidden/deleted posts, supporting moderation workflows. Validation rules ensure query filters are well-formed; errors in filtering result in 400 responses. Rate limiting and role-based visibility are enforced. Related endpoints include GET /discussionboard/posts/{id} (detail fetch), POST /discussionboard/posts (create), and moderation actions.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPost.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering and pagination options for list retrieval of posts.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardPost.ISummary\"\n                }\n              }\n            },\n            \"description\": \"Paginated list of post summaries matching filters.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new discussionboard_post (member role).\",\n        \"description\": \"Enables logged-in members to create a new discussion post in the discussionboard_post entity. The incoming request body supplies all necessary information (title, body, category, and optionally attachments). Validations check category existence, normalized author pointer, and input length constraints. Attachments are added via secondary operations post-creation. Errors due to missing fields, invalid references, or authorization failure return appropriate status codes and structured error responses. This operation is strictly restricted to non-deleted, active members. On success, returns the created post including generated ID and all populated fields.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPost.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Details for the new discussion post to be created.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPost\"\n                }\n              }\n            },\n            \"description\": \"The newly created discussion post with normalized references.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/posts/{id}\": {\n      \"get\": {\n        \"summary\": \"Get discussionboard_post details by ID, with all associated normalized references.\",\n        \"description\": \"Fetches the details of a specific discussion post from the discussionboard_post entity using its unique ID. The response includes the post metadata (title, body, timestamps), associated author/member profile, category, post status (deleted/active), and attaches as per normalization rules. Visibility is governed by role: general members cannot view moderated/deleted content; admin/moderator tokens enable complete access. Not-found errors are returned for invalid IDs or restricted access. This operation complements the list, create, update and moderation endpoints.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"ID of the post to retrieve\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPost\"\n                }\n              }\n            },\n            \"description\": \"Detailed discussion post information, including author and category fields.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a discussionboard_post by ID, with authenticated/member/editor enforcement.\",\n        \"description\": \"Updates an existing post in the discussionboard_post entity, referenced by its unique ID path parameter. The operation supports only authorized updates—either by the original post author or by moderators/admins for moderation. The request body includes only those fields allowed for update as per the requirements analysis. Authorization checks ensure proper role-based access and enforce the correct update scope. Audit logging occurs for all operations, and error handling provides structured responses for invalid IDs, constraint violations, or insufficient permissions. This API supports post editing as described in platform features and moderation flows.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"ID of the post to update\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPost.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields to be updated in the post. Only updatable fields must be supplied.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPost\"\n                }\n              }\n            },\n            \"description\": \"The updated post record after changes have been applied.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Soft delete a discussionboard_post by ID (member/privileged roles).\",\n        \"description\": \"Deletes a discussion post from the discussionboard_post entity identified by its unique ID. The deletion is soft, flipping the deleted_at timestamp. Only allowed by (a) the original member author if post is not already deleted, (b) moderators for moderation, or (c) admins for compliance. Authorizations provide platform protection against non-owned or already-deleted posts. This operation is referenced in the requirements for content management, moderation, and audit. It is tightly integrated with downstream features such as post indexes and content analytics.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"ID of the post to soft delete\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/postCategories\": {\n      \"patch\": {\n        \"summary\": \"Retrieve a list of discussionboard_post_category entries with filtering and pagination (admin, public listing).\",\n        \"description\": \"Retrieves a list of discussionboard_post_category records from the discussionboard_post_category entity. Input via the request body enables filtering, searching, and pagination by name, description, and any other indexed fields. Admin role users can view and manage all entries, while member endpoints may support limited usage for category discovery. Pagination is strongly enforced via the schema, supporting UI collections and configuration panels. Errors are returned for invalid filter objects or excessive result/page sizes. This functionality is critical for category maintenance, filtering, and administration as outlined in the requirements.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering and pagination info for post categories.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardPostCategory\"\n                }\n              }\n            },\n            \"description\": \"Paginated category list matching filter/criteria.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new discussionboard_post_category (admin only).\",\n        \"description\": \"Enables platform admins to create a new discussionboard_post_category entity. Input validation ensures the category name is unique and the description field, if present, is properly formed. All operations are strictly permission-checked. Name-based uniqueness is validated prior to insertion; on conflict, an error is returned to the client. Audit logging captures all creations. On success, returns the normalized record, including generated unique ID. The endpoint is referenced in requirements for category taxonomy maintenance and administrative workflows.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Details for the new post category to create.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory\"\n                }\n              }\n            },\n            \"description\": \"The newly created post category record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/postCategories/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a single discussionboard_post_category by ID (admin).\",\n        \"description\": \"Retrieves a single discussionboard_post_category record by ID. Used by admins in category management, and by members for advanced filtering/context. Success responses contain all normalized category fields (name, description), with strict validation of the ID parameter. Permission denied or not-found errors apply for non-admin or invalid ID requests. The endpoint aligns with requirements for both platform configuration and discoverability by users.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"ID of the post category to retrieve\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory\"\n                }\n              }\n            },\n            \"description\": \"Details of the found post category.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a discussionboard_post_category by ID (admin).\",\n        \"description\": \"Allows platform admins to update existing discussionboard_post_category entries by unique ID. Modification is strictly permission-checked for admin tokens. Supported fields in the request body include only those defined in requirements. Attempting to change a category to a duplicate name or providing invalid values returns an appropriate error. Audit logging ensures traceability of all configuration activity. Used in admin UIs for maintenance, per requirements.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"ID of the post category to update\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields to update on the category; only updatable fields required.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory\"\n                }\n              }\n            },\n            \"description\": \"The updated post category record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a discussionboard_post_category by ID (admin only, constraint-enforced).\",\n        \"description\": \"Deletes a post category record from the discussionboard_post_category entity using its unique ID. Strict business rules apply—categories assigned to existing posts cannot be deleted or must be handled gracefully depending on platform policy. Operation is strictly controlled for admin authority; all deletions are tracked in audit logs. If the category is referenced by any post, attempts to delete will fail and return an appropriate error. Errors also produced if category does not exist. This API is tied to admin workflows and platform taxonomy maintenance.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"ID of the category to delete\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/postTags\": {\n      \"patch\": {\n        \"summary\": \"Retrieve a list of discussionboard_post_tag entities with filtering and pagination (admin UI, taxonomy).\",\n        \"description\": \"Fetches a paged, filtered list of discussionboard_post_tag entities from the database. Request body carries pagination, search, filter, and sorting info, enabling advanced management of tag taxonomies. Name-based search and high-volume control are included for admin UIs. Strict validation limits excessive page sizes or bad filters. Visibility of tags by members is supported via separate endpoints where needed. Errors on invalid parameters return 400; all results maintain full normalization for downstream analytics or configuration flows. This endpoint is referenced in taxonomic/tag filter design, admin workflows, and content analytics requirements.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostTag.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering and pagination details for tag retrieval (admin).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardPostTag\"\n                }\n              }\n            },\n            \"description\": \"Paginated tag list that matches search/filters.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new post tag (discussionboard_post_tag).\",\n        \"description\": \"This operation allows for the creation of a new post tag in the discussion board system. The 'discussionboard_post_tag' table maintains all available tags in an atomic, normalized form, used by posts to enable filtering and search by topic or attribute.\\n\\nThe request body must include the desired tag name and optional metadata if supported. Input validation enforces name uniqueness and length/pattern requirements. Only admins (or specific roles) may invoke this endpoint.\\n\\nThe endpoint will create the record, store audit/log entries as required, and return the full created tag entity or a reference to it. Errors can include duplicate name (409), input format error (400), or unauthorized access (403).\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostTag.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Data for creating a new post tag.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostTag\"\n                }\n              }\n            },\n            \"description\": \"The created discussionboard_post_tag info.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/postTags/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific post tag (discussionboard_post_tag) by ID.\",\n        \"description\": \"This operation fetches a single post tag by its unique ID from the discussion board. The 'discussionboard_post_tag' table is an atomic, normalized table storing only the tag identifier and name, ensuring efficient tag management and search. Security is managed at the API layer and typically only admins (or backend) can delete tags, but all authenticated users may read tags for filtering purposes.\\n\\nThis operation will take as parameter the tag's ID (UUID) and returns the name and properties of the tag. The endpoint supports auditing—accesses may be logged for content analytics and security compliance. Input must be validated for correct UUID format. Error responses include tag not found (404) or invalid input (400).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"The unique identifier (UUID) of the post tag to retrieve.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostTag\"\n                }\n              }\n            },\n            \"description\": \"Details of the discussionboard_post_tag.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a specific post tag (discussionboard_post_tag) by ID.\",\n        \"description\": \"Update an existing post tag by its unique identifier. The 'discussionboard_post_tag' table maintains all tag metadata and is kept atomic and normalized to avoid duplication. Only specific users (typically admins) may modify tag data via this endpoint.\\n\\nThe request must specify the tag ID in the URL and the new data in the request body (e.g., tag name). Validation enforces uniqueness and formatting. Mutation is audit-logged for compliance. Errors include tag not found (404), name conflict (409), or input error (400).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier (UUID) of the tag to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostTag.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Updated tag data.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostTag\"\n                }\n              }\n            },\n            \"description\": \"Updated discussionboard_post_tag info.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a post tag (discussionboard_post_tag) by ID.\",\n        \"description\": \"Delete a post tag from the system by its UUID. The 'discussionboard_post_tag' table holds all available tags in a normalized manner. This endpoint is protected and generally only admins can delete tags, especially since tags may be referenced by posts.\\n\\nTag deletion initiates audit logging and ensures referential integrity (cannot delete if referenced, or cascade if supported). Errors include not found (404), invalid input (400), or constraint violation (409/423).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"The UUID of the tag to remove.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDeleteResponse\"\n                }\n              }\n            },\n            \"description\": \"Confirmation of deletion (or error).\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/postAttachments\": {\n      \"patch\": {\n        \"summary\": \"Search & list post attachments (discussionboard_post_attachment).\",\n        \"description\": \"This operation lists and filters all post attachments in the system. The 'discussionboard_post_attachment' table maintains atomic metadata for each file attached to a post (e.g., images, documents), allowing users to search by filename, type, post ID, or upload time. This API supports paging, searching, and sorting.\\n\\nOnly authorized users may access attachment info, which is useful for moderation, admin tools, or user viewing. Input can specify query parameters such as postId, type, or date ranges. Response includes paged result set with metadata, total count, and files info. Validation ensures only supported query fields are accepted. Errors include unauthorized (403), input error (400), or internal error (500).\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Attachment search and pagination filters.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardPostAttachment\"\n                }\n              }\n            },\n            \"description\": \"List of matching attachments with pagination info.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new post attachment (discussionboard_post_attachment).\",\n        \"description\": \"This adds a new post attachment record, corresponding to an uploaded file/image. The request body must include post ID, file URL, file type, and upload metadata as per 'discussionboard_post_attachment' schema. The endpoint validates permissions, uploads, file type, and size constraints at API/business logic layer.\\n\\nOn success, a new attachment record is added and full details are returned. Audit logging is performed (especially for user uploads) for moderation traceability. Errors: input format error (400), file rejected (415/422), unauthorized (403), or post not found (404).\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Attachment creation info.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment\"\n                }\n              }\n            },\n            \"description\": \"Created post attachment object.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/postAttachments/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific post attachment (discussionboard_post_attachment) by ID.\",\n        \"description\": \"Get the details for a specific post attachment by UUID. The 'discussionboard_post_attachment' table stores atomic data linking file uploads to posts, supporting retrieval for user download, preview, or moderation.\\n\\nUsers must provide the attachment's UUID in the URL. Access control may restrict by user/post or role. The response includes file URL, type, and metadata. Errors: not found (404), invalid id (400), or access denied (403).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Attachment's UUID.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment\"\n                }\n              }\n            },\n            \"description\": \"Attachment metadata.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a specific post attachment (discussionboard_post_attachment) by ID.\",\n        \"description\": \"Update the atomic metadata of a post attachment by providing its UUID and the updated fields. The request body specifies which metadata to update (e.g., type). This endpoint allows editing/correction of uploaded file information (not the file content).\\n\\nIt checks for existing attachment, validates the update fields (including ownership/security context), updates the metadata, and persists audit logs. Errors: not found (404), forbidden (403), input error (400), or locked (409).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"The UUID of the attachment to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields to update for attachment metadata.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment\"\n                }\n              }\n            },\n            \"description\": \"Updated attachment metadata.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a post attachment (discussionboard_post_attachment) by ID.\",\n        \"description\": \"Delete a post attachment by UUID. The endpoint verifies the attachment exists, checks user permissions, and removes the attachment metadata from the database (and may trigger removal from file storage as per business logic).\\n\\nOperation is audit-logged for compliance (file deletion is irreversible except in special admin recovery). Errors: not found (404), forbidden (403), conflict (409), or invalid UUID (400).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Post attachment UUID to delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDeleteResponse\"\n                }\n              }\n            },\n            \"description\": \"Confirmation of attachment deletion.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/comments\": {\n      \"patch\": {\n        \"summary\": \"Search and list comments (discussionboard_comments) with filter and paging.\",\n        \"description\": \"Search and list all comments with flexible filters—by post, author, parent comment (for threading/nesting), and deletion status. Operates on the 'discussionboard_comments' table, which normalizes all comments irrespective of depth or content length.\\n\\nRequest body defines flexible filter set (UUIDs, text, date ranges, flags for edits/deletes). Supports pagination, sorting, and text search. Output is a paginated list of comments plus total counts. Only authorized users may access, and access is logged for moderation/audit. Errors: input error (400), forbidden (403), or internal (500).\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardComments.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Comment search/filter definition and pagination info.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardComments\"\n                }\n              }\n            },\n            \"description\": \"Paginated comment result set.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new comment (discussionboard_comments).\",\n        \"description\": \"This operation enables authenticated users to add comments to posts or as replies in the system. The 'discussionboard_comments' table represents each atomic comment, supporting hierarchical threading by parent comment ID and audit logging for content moderation.\\n\\nThe request body includes the owning post's UUID, parent comment UUID if a reply, content string, and user context (inferred from session). Input is validated for text length, nesting rules, and POST/author/parent relationship integrity. On success, the newly created comment record is returned. Errors: post or parent not found (404), input invalid (400), unauthorized (403), or locked (409).\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardComments.ICreate\"\n              }\n            }\n          },\n          \"description\": \"All info required to insert a new comment.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardComments\"\n                }\n              }\n            },\n            \"description\": \"Created comment data.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/comments/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific comment (discussionboard_comments) by ID.\",\n        \"description\": \"Retrieves one comment by ID—the 'discussionboard_comments' table stores content, author, post relation, edit status, and visibility flags. The endpoint validates that the comment exists (and is visible to the caller if not admin/mod), and returns its atomic data.\\n\\nAudit logging and permission checks apply. If found and authorized, full comment metadata is returned. Errors: comment not found (404), forbidden (403), or input error (400).\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"UUID of the comment to fetch.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardComments\"\n                }\n              }\n            },\n            \"description\": \"Atomic comment record.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update an existing comment (discussionboard_comments table).\",\n        \"description\": \"This operation updates the content of a specific comment in the discussion board. The Prisma schema 'discussionboard_comments' enforces that each comment is uniquely identified (id), and associates it with a post (post_id), an author (author_id), and optionally a parent comment (for threading). Only the user who authored the comment, or a user with moderator/admin privileges, can perform updates. The operation will update the 'content', set 'is_edited' to true, and update the 'updated_at' timestamp. If the user is a moderator or admin, an audit log or moderation record should be issued. Proper validation is required: if the comment doesn't exist, is already deleted, or the user isn't authorized, an error is returned. After updating, the operation returns the full updated comment entity including all fields necessary for display and auditing.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the comment to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardComment.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Updated content and optional edit info for the comment.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardComment\"\n                }\n              }\n            },\n            \"description\": \"The updated comment object.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Soft-delete (mark as deleted) a comment (discussionboard_comments table).\",\n        \"description\": \"Soft-deletes the specified comment using its unique identifier, as defined in the 'discussionboard_comments' table. This operation marks the comment as deleted by updating the 'is_deleted' flag and the timestamps, rather than removing it from the database. Only the comment author, moderators, or admins are allowed to perform this action. The deletion is logged for moderation and audit trail. The response includes the updated comment entity, reflecting the new deletion status and updated audit fields. If the comment is already deleted or not found, or the user lacks sufficient privileges, returns an error.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the comment to delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardComment\"\n                }\n              }\n            },\n            \"description\": \"The soft-deleted comment object with updated fields.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/likes\": {\n      \"patch\": {\n        \"summary\": \"List and search likes (discussionboard_likes table, paginated/filterable).\",\n        \"description\": \"Returns a paginated and filterable list of likes in the discussion board, based on criteria provided in the request body. The 'discussionboard_likes' table supports polymorphic likes for both posts and comments, recorded with timestamps and user references. Input allows filtering by user, target (post/comment), like status (active, deleted), and sorting/pagination controls. Used by admins, moderators for engagement analysis, or for displaying user activity feeds. Response includes array of like objects and pagination metadata. Proper permissions ensure that only authorized users (e.g., own likes for members, all likes for admin/moderator) can use expanded query options.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardLike.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filter, search, and pagination parameters for likes search.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardLike\"\n                }\n              }\n            },\n            \"description\": \"Paginated list of like objects and metadata.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new like event (discussionboard_likes table).\",\n        \"description\": \"Creates a new like entry in the 'discussionboard_likes' table, pointing to a specific post or comment and registering a user's engagement. The request includes details such as which content is liked (post or comment ID), and the system enforces that each user can only like each item once and the content must exist and not be deleted. The new like is recorded along with metadata such as the acting user and timestamp. The response contains the complete like record. If a like on the same item by this user already exists (and is not deleted), or if input references non-existent or deleted content, returns an error.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardLike.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Payload for creating a like (includes user, post or comment ID).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardLike\"\n                }\n              }\n            },\n            \"description\": \"The newly created like record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/likes/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific like by ID (discussionboard_likes table).\",\n        \"description\": \"Returns the full details of a specific like by its unique identifier. The 'discussionboard_likes' table contains records of user likes for both posts and comments. This operation exposes all relevant attributes, including content type (post/comment), user identity, timestamp, and status. Used for audit trails and for displaying engagement details on user profiles or dashboards. Proper permission checks are required: users may retrieve their own like records, moderators/admins may retrieve any like. If the like is missing or permission is denied, returns an error.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the like event.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardLike\"\n                }\n              }\n            },\n            \"description\": \"Like record details for the specified like ID.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a specific like (discussionboard_likes table).\",\n        \"description\": \"Updates an existing like event using its unique ID. The request body specifies which field(s) to update—likely either to redo a like (if previously soft-deleted), or to change the liked target if permitted. Handles input validation and permission (- only owners, admins, or moderators may update). All updates are logged. The response is the updated like record. Errors if the like does not exist, or updates are not allowed per business rules.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the like event to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardLike.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Payload for updating a like event.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardLike\"\n                }\n              }\n            },\n            \"description\": \"Updated like object reflecting applied changes.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Soft-delete (unlike) a like on post or comment (discussionboard_likes table).\",\n        \"description\": \"Soft-deletes (unlikes) a like event for a post or comment, based on its unique identifier (id). The operation sets the 'deleted_at' timestamp, thus undoing the like while maintaining historical/audit records. Only the user who created the like or privileged users (admins/moderators) can perform the action. The endpoint returns the updated like entity after the soft-delete. If the like event does not exist, is already deleted, or the requester lacks permission, an error is returned.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the like event to delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardLike\"\n                }\n              }\n            },\n            \"description\": \"The like record after soft-deletion.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/reports\": {\n      \"patch\": {\n        \"summary\": \"List/Search reported content (discussionboard_reports table, paginated/filterable).\",\n        \"description\": \"Returns a paginated and filterable list of reported content in the discussion board. The backend 'discussionboard_reports' records all content reports, referencing either posts or comments, and includes who reported, report reason/code, timestamps, and status. Admins/moderators can filter by all criteria; regular members are restricted to their own reports. The response provides an array of report records and pagination metadata. Input allows precise control over sorting, filtering, and paging scope. Use cases: moderator queue, abuse/spam trends, user report histories.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardReport.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Request parameters for filtering/searching reported content.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardReport\"\n                }\n              }\n            },\n            \"description\": \"Paginated collection of report records and metadata.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new content report (discussionboard_reports table).\",\n        \"description\": \"Creates a new report for an abusive or spam content item—either a post or comment—by inserting into the 'discussionboard_reports' table. The input identifies the content (post or comment ID), type of violation, and details, associated with the reporting user's account. On success, returns the full created report record including references and audit fields. Errors for double-reporting by same user on a target, nonexistent or already moderated/deleted content, or if input is incomplete. All actions are auditable; appropriate notifications generated for moderator queue.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardReport.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Input data for report creation (target ref, reason, details).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReport\"\n                }\n              }\n            },\n            \"description\": \"Newly created report object.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/reports/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific report by ID (discussionboard_reports table).\",\n        \"description\": \"Returns the full data for a report, identified by its unique ID. The backend table 'discussionboard_reports' provides structured data for compliance, moderation workflow, and user notification. The result includes content references (post or comment), reporter, reason codes, creation and soft-delete timestamps. Access control ensures only those with legitimate need have access (reporter, moderator, or admin). Errors on missing reports or insufficient permissions.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the content report to retrieve.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReport\"\n                }\n              }\n            },\n            \"description\": \"Report object with full fields for the specific ID.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a content report by ID (discussionboard_reports table).\",\n        \"description\": \"Updates the specified content report by ID in the 'discussionboard_reports' table. Input may contain changes to fields such as reason code or details. Permissions depend on status: users may update their own unreveiwed reports, admins can update any, and moderators update as permitted by workflow policy. All updates reflect instantly in audit logs. The operation returns the full updated report object. Errors for missing report, insufficient permission, or if the report has been reviewed/locked against change.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique ID of the content report to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardReport.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Update payload for a content report.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReport\"\n                }\n              }\n            },\n            \"description\": \"Updated report object post-apply.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Soft-delete (withdraw) a content report (discussionboard_reports table).\",\n        \"description\": \"Withdraws or soft-deletes a specifically identified content report, by updating its 'deleted_at' field in the 'discussionboard_reports' table. Only the original reporter (before moderation) or privileged users (moderator, admin) may perform this operation. On success, returns the updated report record with deletion timestamp. Errors arise if the report does not exist, was already deleted, has been reviewed/locked, or the user lacks sufficient privileges. All deletions are audit logged for compliance.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the report to withdraw soft-delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReport\"\n                }\n              }\n            },\n            \"description\": \"The report record after soft-deletion.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/moderationActions\": {\n      \"patch\": {\n        \"summary\": \"Retrieve a list of moderation actions (discussionboard_moderation_action) with searching, filtering, and pagination.\",\n        \"description\": \"This operation enables authorized users (such as moderators and admins) to retrieve a filtered, paginated list of all moderation actions taken across the platform. The endpoint supports searching by moderator/admin (actor), target user, post or comment, action type (e.g. delete_post, hide_comment, warning), date range, or specific keywords in reason/notes fields. The request enforces role-based authorization. Results include actor/target user information, content targeted (if any), action type and reason, and timestamp of the action. Pagination, sorting (by created_at, action_type, actor), and customizable filters are supported for efficient review. Only privileged users can use this endpoint; regular members do not have access. Error handling includes invalid query validation, insufficient permissions, and server issues. This operation is typically used in conjunction with detailed moderation action or audit endpoints.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction.IRequest\"\n              }\n            }\n          },\n          \"description\": \"List/search/pagination parameters for moderation actions lookup request.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardModerationAction\"\n                }\n              }\n            },\n            \"description\": \"Paged list of moderation actions with relevant details and pagination metadata.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new moderation action (discussionboard_moderation_action).\",\n        \"description\": \"This endpoint enables the creation and logging of a new moderation action entry, recording all relevant metadata such as the acting moderator/admin (actor), target user, affected post/comment (if any), action type, reason, and timestamp. Input validation enforces all required foreign keys, action classification strings, and timestamp format. The endpoint enforces role-based permissions to prevent member users from creating moderation actions. Successful creation returns the new record's ID and core data. This operation is closely related to audit logging and user suspension flows; downstream systems may subscribe to these events for notification or compliance workflows. Error handling includes validation failures, permission denied, or integrity constraint issues.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction.ICreate\"\n              }\n            }\n          },\n          \"description\": \"All fields required for a new moderation action, including actor, target, type, reason, references, and timestamp.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction\"\n                }\n              }\n            },\n            \"description\": \"Resulting moderation action after creation, including assigned ID.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/moderationActions/{id}\": {\n      \"get\": {\n        \"summary\": \"Look up a single moderation action (discussionboard_moderation_action) by its ID.\",\n        \"description\": \"This operation allows authorized moderators or admins to retrieve all available information about a particular moderation action, including actor, target user, affected post or comment, action type, rationale, and timestamp. Useful for moderation history review, escalation, appeals, or audit purposes. Only the action's unique ID is required as a path parameter. Ensures permissions restrict access to privileged users; regular users cannot access this data. Error responses include not-found, insufficient-permission, and server issues.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the moderation action to retrieve.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction\"\n                }\n              }\n            },\n            \"description\": \"Detailed information for a single moderation action.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update an existing moderation action (discussionboard_moderation_action) by ID.\",\n        \"description\": \"This endpoint allows authorized moderators/admins to update details of a previously created moderation action, such as editing the reason, additional notes, or fixing metadata errors. All updates are traced for audit. Only specific fields are permitted to be updated (e.g., action_type, reason, references); actor or target user cannot typically be changed unless correcting mistakes with admin-level privileges. The request requires the moderation action's ID in the route and the update data in the request body. Returns the updated record on success. Permission and data validation errors are handled explicitly. Related endpoints include moderation action detail and audit log write.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the moderation action to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields to update in the moderation action. Immutable fields must be excluded or ignored.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction\"\n                }\n              }\n            },\n            \"description\": \"The moderation action after successful update.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a moderation action (discussionboard_moderation_action) by ID.\",\n        \"description\": \"This operation allows authorized moderators or admins to delete (typically soft-delete for audit compliance) a specific moderation action from the system, as identified by its unique ID. This action is logged for audit. The user must provide the moderation action ID as a path parameter. Deletions are typically restricted by business rules, e.g., only actions without downstream dependency or when performed in error. Error scenarios include not found, insufficient permissions, or cascading cleanup constraints. Closely related to moderation and audit endpoints for transparency.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the moderation action to delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction\"\n                }\n              }\n            },\n            \"description\": \"Details or status after delete operation. Typically returns the deleted moderation action or a confirmation message.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/reportReviews\": {\n      \"patch\": {\n        \"summary\": \"Search and paginate through report review logs (discussionboard_report_review).\",\n        \"description\": \"This endpoint enables authorized moderators and administrators to retrieve a list of report review records, supporting search and filters by reviewer ID, report status (resolved/rejected/pending), associated post/comment, review timestamps, and other optional metadata. Pagination and sorting are built-in for efficient workflows. Permission checks ensure members cannot access this review data. Used for moderation oversight, audit, and review dashboard UI. Partial or fuzzy matching supported on reviewer comments or notes. Errors include invalid queries, unauthorized access, or server issues.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardReportReview.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Request data for searching, filtering, and paginating through report reviews.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardReportReview\"\n                }\n              }\n            },\n            \"description\": \"Paged list of report review records with their metadata and related entity references.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new report review (discussionboard_report_review).\",\n        \"description\": \"This operation enables a moderator or admin to record the review of a user-submitted abuse/spam report, capturing the reviewed report ID, reviewer user ID, review status, linked post or comment, and optional notes/comments. Validation ensures required relations and correct status codes (e.g. resolved/rejected). Used in moderation workflows and reporting dashboards. Permissions enforce only authorized reviewers. Error handling includes invalid input, duplicate reviews, or insufficient permission.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardReportReview.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Report review creation info, specifying the reviewed report, reviewer, decision/status, notes, etc.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReportReview\"\n                }\n              }\n            },\n            \"description\": \"The complete report review record as created.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/reportReviews/{id}\": {\n      \"get\": {\n        \"summary\": \"Retrieve a single report review (discussionboard_report_review) by ID.\",\n        \"description\": \"This operation allows privileged users (moderators, admins) to get a full record of a report review, identified by its unique ID. Response includes reviewing moderator/admin, target entities (report, post, comment), review status, notes, and timestamp. Used for litigation, appeals, and audit trails. The only required input is the review's unique ID. Only privileged users are authorized. Errors include record-not-found and insufficient-permission.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique report review ID to look up.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReportReview\"\n                }\n              }\n            },\n            \"description\": \"Detailed report review record.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update an existing report review (discussionboard_report_review) by ID.\",\n        \"description\": \"This operation enables updating selected fields of a report review record, such as modifying review status, adding notes, or adjusting linked content/post references. Update traceability is enforced via audit. Only moderators/admins are authorized. Record is identified by its unique ID; updated data is supplied in the request body. Returns updated record or error for validation/permission issues. Typically linked with moderation dashboards and audit log flows.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the report review to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardReportReview.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields to update for the report review record.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReportReview\"\n                }\n              }\n            },\n            \"description\": \"The report review record after update.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a report review (discussionboard_report_review) by ID.\",\n        \"description\": \"Authorized moderators and admins can remove (soft-delete) a report review, identified by its unique ID. Deletion is audited and subject to business logic (e.g., only allowable in specific states). Record is not physically deleted for traceability. Path parameter is the review ID. Related to moderation and audit data flows. Errors include unauthorized access, record not found, or business rule constraint violations.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the report review to delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardReportReview\"\n                }\n              }\n            },\n            \"description\": \"Deleted review record or confirmation message.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/warnings\": {\n      \"patch\": {\n        \"summary\": \"Search, filter, and page through warnings issued (discussionboard_warning).\",\n        \"description\": \"This endpoint provides moderators and admins with access to lists of warnings issued on the platform, supporting filters such as issued_by, issued_to, warning_type, related post/comment, and date ranges. Pagination, sorting, and keyword search enable efficient review. Only privileged users may access this endpoint. Used for audit, user appeal, or compliance tracing. Errors include invalid queries, insufficient permissions, and server issues.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardWarning.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering and search options for warnings list request.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardWarning\"\n                }\n              }\n            },\n            \"description\": \"Paginated list of warning records with metadata and references.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new warning in discussionboard_warning table.\",\n        \"description\": \"This POST endpoint adds a new warning to the discussionboard_warning table. The warning includes information about who issued it, the user receiving the warning, and can relate to specific posts or comments for context. The warning_type categorizes the infraction (such as 'abuse', 'spam', etc.) and the message provides a human-readable rationale for the warning. Moderators and admins are able to use this endpoint as part of their toolkit for progressive disciplinary actions. Soft deletion or edits to warnings are not allowed here—warnings are permanent for compliance and auditability. This API integrates closely with audit logs to ensure transparency and is expected to trigger notifications to the affected user. Typical use involves user-facing moderation UIs. Warnings reference the discussionboard_user, discussionboard_post, and discussionboard_comments tables, and must be used in compliance with the platform's moderation policies.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardWarning.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Information about the new warning to issue.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardWarning\"\n                }\n              }\n            },\n            \"description\": \"The created warning record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/warnings/{id}\": {\n      \"get\": {\n        \"summary\": \"Get details for a specific warning (discussionboard_warning) by ID.\",\n        \"description\": \"Privileged users (moderators, admins) can retrieve information for a single warning record, including issuer, recipient, rationale, type, related post/comment, and timestamp. Used in user appeals, moderation dashboards, and audit reviews. Input is only the warning's unique ID as a path parameter. Return includes all normalized warning data. Access is denied to non-privileged users or if the record does not exist. Typical errors: not found, unauthorized, server failures.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique warning ID to retrieve.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardWarning\"\n                }\n              }\n            },\n            \"description\": \"Complete warning record for the given ID.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Edit a warning in discussionboard_warning table.\",\n        \"description\": \"This PUT endpoint is used to edit an existing warning. The warning is uniquely identified by its id path parameter. Allowed edits typically include modifying the warning_type or message, possibly adjusting associated post/comment references. All such modifications are subject to audit by the discussionboard_audit_log. This operation restricts update permissions to the original issuer, moderator, or admin roles. Other fields (such as issued_by, issued_to, and issued_at) are immutable for audit purposes. Edits are designed for correction, not for hiding infraction history.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the warning to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardWarning.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"The updated data for the warning (modifying type, message, or references).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardWarning\"\n                }\n              }\n            },\n            \"description\": \"The updated warning record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a warning from discussionboard_warning table.\",\n        \"description\": \"This DELETE endpoint removes a warning from the system, identified by its id. The operation can be either a hard or soft delete depending on system settings, but for most compliance/audit scenarios, soft deletes are preferred. Only moderation and admin roles can perform deletions. The system logs the deletion event, and may trigger a notification to the warning recipient.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the warning to delete.\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/bans\": {\n      \"patch\": {\n        \"summary\": \"Search/list bans from discussionboard_ban table (advanced query).\",\n        \"description\": \"This PATCH endpoint provides advanced ban listing and search capabilities, leveraging flexible request bodies for filtering by user, ban type, time range, status, or warning linkage. Results are paginated and can be sorted by relevant ban fields. Primarily accessed by admin and moderator UIs for audit, ban review, and compliance monitoring. Relies on the discussionboard_ban table and references users, warnings, and issuer relationships for joined queries. Support for fine-grained search eliminates the need for multiple simple GET endpoints, centralizing administrative search logic for bans.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IPageIDiscussionboardBan.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filter and pagination settings for searching bans.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardBan\"\n                }\n              }\n            },\n            \"description\": \"Paginated result of bans matching the search criteria.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new ban record in discussionboard_ban table.\",\n        \"description\": \"This POST endpoint creates a ban record for a user, given required details like the banned user's id, the issuer, type (e.g., mute/temp/perm), reason, and time periods. If the ban is related to a prior warning, the warning_id may be set. The system audits all ban actions and triggers notifications to the affected user. Logic will check and prevent overlapping active bans as per business rules. Used as the primary enforcement mechanism for moderation escalation beyond warnings.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardBan.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Fields for new ban record (user, issuer, type, reason, and expiry).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardBan\"\n                }\n              }\n            },\n            \"description\": \"The newly created ban record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/bans/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific ban entry from discussionboard_ban table.\",\n        \"description\": \"This GET endpoint returns a detailed ban record from the discussionboard_ban table by id. Exposes all relevant details for moderation/ban audits: involved users, ban timing (issued/expires), rationale, and warning links. Only accessible by moderator and admin roles. The endpoint underpins UI flows for inspecting specific bans, appeals processing, or reviewing ban histories per user.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the ban record to fetch.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardBan\"\n                }\n              }\n            },\n            \"description\": \"Complete ban details, including issuer, recipient, type, times, and warning link.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a ban record in discussionboard_ban table.\",\n        \"description\": \"This PUT endpoint edits an existing ban record - for instance, to adjust the expiry or type of an active ban due to appeals or changing circumstances. Allowed for moderators and admins only. Requires a full update payload; certain fields cannot be changed (banned_by_id, issued_at). Edits are always logged in audit trails. The endpoint is essential for ban workflow flexibility and error correction.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Identifier of the ban record to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardBan.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Payload of ban updates: expiry, type, reason, related warning.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardBan\"\n                }\n              }\n            },\n            \"description\": \"The updated ban record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a ban record from discussionboard_ban table.\",\n        \"description\": \"This DELETE endpoint removes a ban record by id—serving as the reversal of a mute/ban or to support ban record cleanup. Only accessible to moderator/admin roles, who must provide a valid reason in audit logs. The deleted ban entry may be retained for audit history depending on system configuration. Used when restoring user access, correcting moderation mistakes, or processing appeal outcomes.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the ban to delete (unban).\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/notifications\": {\n      \"patch\": {\n        \"summary\": \"List/search notifications from discussionboard_notification table (advanced query).\",\n        \"description\": \"This PATCH endpoint queries notifications using complex filters (user, type, status, date, read/unread, etc.), replacing simpler GET list methods with a flexible search contract. Results are paginated and can be sorted by recency or priority. Mainly accessed by users in notification feed UIs, as well as by admins auditing notifications. The discussionboard_notification table is referenced for all entries, joined as needed to users, posts, and comments. This contract allows both self-service notification feeds as well as administrative history reviews. Security/authorization ensures users only see their own notifications unless elevated roles.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IPageIDiscussionboardNotification.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filter and pagination data for notifications search.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardNotification\"\n                }\n              }\n            },\n            \"description\": \"Paginated results of matching notification records.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new notification record in discussionboard_notification table.\",\n        \"description\": \"This POST endpoint adds a notification to the system for a specific user, with all associated context (recipient, event type, related entities). These records are normally generated by system back-end services in response to valid actions (reply, like, moderation, system message), not by end users. Admins or system controllers may use it for generating announcements or backfilling notification flows. Only system-valid actors can invoke this contract.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardNotification.ICreate\"\n              }\n            }\n          },\n          \"description\": \"All notification data (recipient, type, message, related event context).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardNotification\"\n                }\n              }\n            },\n            \"description\": \"Created notification record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/notifications/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific notification by id from discussionboard_notification table.\",\n        \"description\": \"This GET endpoint fetches a notification record by id for detailed display in the notification center or audit UI. The notification includes message content, related post/comment, actor, and event type. Only the recipient user, or admins/moderators for audit, are authorized. This ensures members have access to their own system notifications, while elevated roles may view notification flows for compliance/audit.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the notification to retrieve.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardNotification\"\n                }\n              }\n            },\n            \"description\": \"Full notification details, including event context.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update a notification record in discussionboard_notification table (e.g. mark as read).\",\n        \"description\": \"This PUT endpoint modifies an existing notification, such as marking it as read, altering event type, or updating message text. The target is identified by the id. Typical use cases include marking notifications as read by their recipient or correcting data via admin tools. These changes must be tracked in the audit log, especially for moderator/admin updates. No key/PK fields may be changed. Proper authorization ensures members can only update their own notification status, while elevated roles may correct any notification's details.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the notification to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardNotification.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Notification updates (e.g. mark as read, update message, adjust event data).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardNotification\"\n                }\n              }\n            },\n            \"description\": \"The updated notification record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a notification by its unique ID from the discussionboard_notification table.\",\n        \"description\": \"This API operation allows an authenticated user to delete (soft-delete) a notification referenced by its unique identifier. The operation ensures that users can only delete notifications specifically addressed to them by verifying ownership against the discussionboard_notification table. The requested notification is marked as deleted without physical removal, supporting audit and compliance requirements defined in the system's policies. This operation is closely tied to the notification preferences and user activity auditing features and is restricted to the recipient of the notification (members, moderators, or admins). Administrators may audit all deletion actions using the audit log. If the notification has already been deleted or does not exist, the response will indicate the appropriate error. Related endpoints: PATCH /discussionboard/notifications to list notifications, and GET /discussionboard/notifications/{id} to view details before deletion.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier for the notification to be deleted.\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/notificationPreferences\": {\n      \"patch\": {\n        \"summary\": \"List notification preferences from the discussionboard_notification_preference table, with filtering and pagination.\",\n        \"description\": \"This endpoint retrieves notification preference settings from the discussionboard_notification_preference table, with support for advanced searching and pagination. Users can fetch their own notification preferences (for profile management), while administrators may filter across multiple users to audit or configure preferences in bulk. The operation accommodates large datasets by including pagination parameters. Fields like notify_reply, notify_like, notify_moderator_action, and notify_system_message can be filtered or searched as needed for administrative oversight. Only the authenticated user or admins can access these preferences, with results limited appropriately.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Parameters for searching/filtering notification preferences (pagination, filters, sort).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardNotificationPreference\"\n                }\n              }\n            },\n            \"description\": \"Paginated set of notification preference settings.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create notification preferences for a user in discussionboard_notification_preference.\",\n        \"description\": \"This API operation creates a new notification preference record for an authenticated user by inserting a new row into the discussionboard_notification_preference table. Only one entry can exist per user. The operation validates that the user does not already have a preference record; if it does, the proper error is thrown. The returned object includes all fields relevant to notification preferences and the associated user ID. Used for onboarding or resetting preferences to a default state. Related endpoints include PATCH for searching and GET for retrieving an existing record.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Initial notification preference settings to be created.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference\"\n                }\n              }\n            },\n            \"description\": \"Created notification preference record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/notificationPreferences/{id}\": {\n      \"get\": {\n        \"summary\": \"Get notification preference detail by ID from the discussionboard_notification_preference table.\",\n        \"description\": \"This endpoint returns the notification preference details for the record identified by the unique ID from the discussionboard_notification_preference table. The operation is restricted to the user who owns the preferences or an administrator managing users. Data returned includes settings for reply, likes, moderator actions, and system messages notification toggles. Related APIs: PATCH for listing/filtering all preferences, PUT for updating preferences, POST for creating preferences.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the notification preference record.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference\"\n                }\n              }\n            },\n            \"description\": \"Detailed notification preference settings for a user.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update notification preference settings by ID in discussionboard_notification_preference table.\",\n        \"description\": \"This endpoint updates the notification preference settings for a specific user preference record identified by its ID in discussionboard_notification_preference. The API enforces that only the owner or an administrator may modify the preferences. Fields that can be updated include reply, like, moderator action, and system message notification toggles. The endpoint returns the updated notification preferences data after modification. Related operations: GET for viewing preferences and PATCH for listing multiple preferences.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the notification preference record to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Updated notification preference toggles and settings.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference\"\n                }\n              }\n            },\n            \"description\": \"Updated notification preference record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete notification preferences by ID from the discussionboard_notification_preference table.\",\n        \"description\": \"Authenticated users or administrators can use this endpoint to delete a notification preference record, identified by its unique ID, from the discussionboard_notification_preference table. The deletion is restricted to the owner or administrative users. Typically used for account deletion or resetting preferences to their default state. The API ensures audit trail compliance for admin-triggered deletions. If the record does not exist or the caller is not authorized, an error is thrown.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the notification preference record to be deleted.\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/auditLogs\": {\n      \"patch\": {\n        \"summary\": \"List/search audit log entries for privileged actions from the discussionboard_audit_log table.\",\n        \"description\": \"This operation retrieves a list of audit log records from the discussionboard_audit_log table. Filters can be applied for actor, target, action type, entity references, and timestamps. Used by administrators and moderators to review the history of privileged actions such as bans, role changes, and platform configuration updates. Pagination is provided for handling large datasets, and the operation is restricted to privileged roles only. Related endpoints: GET for detailed audit entry, POST for inserting logs (used mostly internally), PUT for corrections/annotations.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Filtering, pagination, and searching fields for audit logs.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardAuditLog\"\n                }\n              }\n            },\n            \"description\": \"Paginated list of audit log records.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create (insert) a new audit log entry in discussionboard_audit_log (admin/moderator only).\",\n        \"description\": \"This API operation records a new privileged action—such as user bans, moderator role assignments, or platform configuration changes—by inserting an audit record into discussionboard_audit_log. Only authentication with admin or moderator rights is accepted. The request body contains all required event context for recording, and on success, the created audit entry (including ID and timestamps) is returned. Used in tandem with security-sensitive workflows for complete accountability.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Fields describing the privileged event to be logged.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog\"\n                }\n              }\n            },\n            \"description\": \"Created audit log record, including ID and timestamps.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/auditLogs/{id}\": {\n      \"get\": {\n        \"summary\": \"Get detailed information for an audit log entry from discussionboard_audit_log by ID.\",\n        \"description\": \"This endpoint allows an administrator or moderator to retrieve detailed information on a single audit log entry by its unique identifier. The returned data includes actor/target user IDs, action type, affected entity, and timestamps. Used in incident investigation flows or compliance reviews as required by platform security policy. Related endpoints: PATCH for bulk search and listing, POST for inserting new logs after privileged actions.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the audit log entry.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog\"\n                }\n              }\n            },\n            \"description\": \"Detailed audit log record for the specified entry.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update an audit log entry in discussionboard_audit_log by ID (privileged use only).\",\n        \"description\": \"Perform an update to an existing audit log entry, identified by its unique ID in the discussionboard_audit_log table. This operation permits administrators or moderators to append additional context, correct metadata, or annotate existing records. Because the audit log is a sensitive table, all updates themselves are logged to ensure complete traceability and non-repudiation. Errors are returned if the entry does not exist or the caller lacks privileges. Related operations: GET for retrieving a record, PATCH for search, POST for new entries.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the audit log entry to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Audit log fields to update (e.g., detail, correction, annotation).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog\"\n                }\n              }\n            },\n            \"description\": \"Updated audit log record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete an audit log entry from discussionboard_audit_log by ID (admin only, soft-delete).\",\n        \"description\": \"This endpoint allows administrators to delete a privileged audit log entry by its unique ID. Deletions are soft by default, preserving a trace for regulatory or compliance requirements. This operation is restricted to admin users and all deletions are themselves logged to the audit log for traceability. If the record does not exist, a not-found error is shown. Related endpoints: PATCH for listing/filtering logs, GET for detail view, PUT for corrections. No impact on related tables—purely for audit record management.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Unique identifier of the audit log entry to be deleted.\",\n            \"required\": true\n          }\n        ]\n      }\n    },\n    \"/discussionboard/platformSettings\": {\n      \"patch\": {\n        \"summary\": \"List/search platform configuration settings from the discussionboard_platform_setting table (admin only).\",\n        \"description\": \"Enables administrators to retrieve a paginated and searchable list of platform configuration settings from the discussionboard_platform_setting table. Supports filtering by setting name, value, type, and last updated date. Used for displaying platform configuration UI, tracking changes, and supporting system configuration auditing. Only admin role is permitted. Related endpoints: POST and PUT for creating and updating settings, GET for individual setting detail.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting.IRequest\"\n              }\n            }\n          },\n          \"description\": \"Search and filter fields for querying platform settings (e.g., name, type, paging).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IPageIDiscussionboardPlatformSetting\"\n                }\n              }\n            },\n            \"description\": \"Paginated list of platform settings matching search/filters.\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new configuration setting in 'discussionboard_platform_setting'.\",\n        \"description\": \"Enables an authenticated admin to create a new configuration record in the platform settings table. The operation expects a payload (name, value, type) as per the schema. Automatically records the updated_at timestamp. Ensures 'name' uniqueness per table constraints; returns proper error if duplicate exists, or if incomplete/invalid data is provided.\\n\\nDesigned to support expansion of platform features—when new settings/routes/features are rolled out, new records can be created via this API. This endpoint is tightly access-controlled (admin only via Bearer token).\\n\\nSuccessful response returns the full created entity, confirming project extension and configuration flexibility as described in platform requirements.\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting.ICreate\"\n              }\n            }\n          },\n          \"description\": \"Data needed to create a platform setting (name, value, type).\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting\"\n                }\n              }\n            },\n            \"description\": \"Created setting record.\"\n          }\n        }\n      }\n    },\n    \"/discussionboard/platformSettings/{id}\": {\n      \"get\": {\n        \"summary\": \"Get a specific platform setting by ID from 'discussionboard_platform_setting'.\",\n        \"description\": \"Retrieves a single platform configuration setting by its unique identifier ('id'). This operation is essential for system administrators to fetch current configuration details, validate values before updates, and perform audits as mandated in admin and platform configuration requirements in the business documentation.\\n\\nPermissions are strictly enforced—only users with 'admin' privileges, authenticated via Bearer token, are authorized to invoke this endpoint. The returned object includes all properties of the 'discussionboard_platform_setting' record as defined by the schema, such as id, name, value, type, and updated_at.\\n\\nIndicates errors clearly when the ID does not correspond to an existing setting, or if the caller lacks adequate permissions. This endpoint is typically paired with PUT or DELETE operations for full config management cycles.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Globally unique identifier for the platform setting to fetch.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting\"\n                }\n              }\n            },\n            \"description\": \"Full platform setting configuration object.\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Update platform setting record by ID in 'discussionboard_platform_setting'.\",\n        \"description\": \"Allows an authenticated administrator to update the details of a platform configuration setting, such as name, value, or type. The ID of the target setting is a required path parameter. Only admins can perform this operation, following policy and platform management requirements.\\n\\nValidation logic ensures the uniqueness of 'name' is preserved across all records. Handles invalid IDs, duplicate names, and data validation errors.\\n\\nReturns the updated setting object, as required for auditability and admin interface refreshes. Pairs with GET (by ID) and DELETE for full lifecycle management of platform-wide settings. Authenticated via Bearer token with 'discussionboard_admin' role only.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Platform setting identifier (PK) to update.\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting.IUpdate\"\n              }\n            }\n          },\n          \"description\": \"Fields to update for the setting.\",\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting\"\n                }\n              }\n            },\n            \"description\": \"Updated setting record.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete a specific platform-wide setting by ID from 'discussionboard_platform_setting'.\",\n        \"description\": \"Removes a single platform configuration setting, as identified by its unique ID. This is integral to platform management and maintenance, letting administrators retire unused settings and keep configuration lean. Checks for valid existence and subject to business constraints (e.g., settings may not be deleted if in active use—a business rule handled at service layer).\\n\\nAccess is strictly controlled: only users with 'discussionboard_admin' role and proper Bearer token are permitted. Operation returns success/failure indication. Usually paired with GET and POST/PUT for complete settings lifecycle.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Globally unique identifier for the setting to delete.\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDeleteResult\"\n                }\n              }\n            },\n            \"description\": \"Confirmation of deletion (success or failure).\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"IDiscussionboardUser.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) Filter by the user's email address, case-insensitive and partial matches allowed. This is useful for user search and management workflows, directly supporting member lookup by email.\\n\\nBased on the 'email' column in the Prisma schema, which is unique and used for authentication, audit, and notifications.\"\n          },\n          \"is_active\": {\n            \"type\": \"boolean\",\n            \"description\": \"(Optional) Filter by active status. If specified, returns only users whose 'is_active' matches this value. Used to query active or deactivated (soft-deleted) accounts for admin dashboards and compliance operations.\\n\\nFrom the 'is_active' column of 'discussionboard_user', which supports admin control and account suspension as described in requirements.\"\n          },\n          \"created_at_from\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"(Optional) Filter for users created after this ISO 8601 timestamp. Used for admin audits or tracking new registrations.\\n\\nBased on 'created_at' column in the Prisma user master table.\"\n          },\n          \"created_at_to\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"(Optional) Filter for users created before this ISO 8601 timestamp.\"\n          },\n          \"updated_at_from\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"(Optional) Filter for users updated after this ISO 8601 timestamp. Used to track recent profile/account changes.\"\n          },\n          \"updated_at_to\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"(Optional) Filter for users updated before this ISO 8601 timestamp.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"The page number for pagination. Defaults to 1 if omitted.\\n\\nStandard in paginated API contracts, as described in requirements.\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"The number of records per page for pagination. Default is 100, maximum may be enforced per business policy.\"\n          }\n        },\n        \"description\": \"Request parameters for searching, filtering, and paginating user master records (discussionboard_user). All properties are optional for flexible filtering in user management workflows.\\n\\nEach property aligns with a field in the core user master record table, supporting requirements for admin/moderator user management, audit, and analytics.\",\n        \"required\": []\n      },\n      \"IPageDiscussionboardUser\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardUser\"\n            },\n            \"description\": \"Array of discussionboard_user objects for this page of results.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"A page of user master records, including pagination details and the user records found.\\n\\nThis aligns with the standard IPage structure, paginating results from 'discussionboard_user' queries, supporting admin/member search UI, auditing, and analytics.\"\n      },\n      \"IDiscussionboardUser\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Globally unique identifier for the user. Implements traceable, referential identity across all tables per the requirements. Surrogate key from Prisma.\"\n          },\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"Unique email address for user authentication, profile and notification. Direct mapping to 'email' column in user master.\"\n          },\n          \"password_hash\": {\n            \"type\": \"string\",\n            \"description\": \"Password hash for secure authentication. Stored as a hash value—do not expose directly except during internal workflows or in highly privileged admin contexts (it may be omitted in most list/detail responses for security).\"\n          },\n          \"is_active\": {\n            \"type\": \"boolean\",\n            \"description\": \"Tracks if user is active/enabled (true) or deactivated (false for soft delete). Used for role audits and compliance. Directly from 'is_active' column.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp of user creation (join time). Required for audits, analytics, onboarding metrics. Maps to 'created_at' in schema.\"\n          },\n          \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Last update time. Used for audit, tracking profile/account changes. Maps to 'updated_at' in schema.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"email\",\n          \"is_active\",\n          \"created_at\",\n          \"updated_at\"\n        ],\n        \"description\": \"Master user record for each account on the discussion board. Represents authentication and account management data, as required for registration, login, audits, role assignment/checks (see requirements doc Section 3.1, Prisma discussionboard_user). Privileged operations may include 'password_hash', but regular responses should usually omit.\"\n      },\n      \"IDiscussionboardUser.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"Required. User's email address for registration, notifications, login. Must be unique across all users. Maps to 'email' in schema.\"\n          },\n          \"password\": {\n            \"type\": \"string\",\n            \"description\": \"Required. Cleartext password to be hashed and stored as 'password_hash' (handled internally). Provided only on account creation, not returned once stored. Maps to 'password_hash' after being hashed.\"\n          }\n        },\n        \"required\": [\n          \"email\",\n          \"password\"\n        ],\n        \"description\": \"Body for creating a new user. Only the unique email and raw password (to be hashed internally) are required on creation. 'is_active', 'created_at', and 'updated_at' will be set by system logic. This supports both admin onboarding and member registration per requirements.\"\n      },\n      \"IDiscussionboardUser.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) Update email address. Must remain unique, and follow business/domain rules.\"\n          },\n          \"password\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) New password in cleartext. Will be securely hashed before being stored in 'password_hash'. Not returned in response.\"\n          },\n          \"is_active\": {\n            \"type\": \"boolean\",\n            \"description\": \"(Optional) Update active status for the account (for admin use: suspend/reactivate account per compliance procedures).\"\n          }\n        },\n        \"description\": \"Body for updating existing user account. Fields are all optional—a PATCH style input. Only admin, moderator, or user self-service logic can change these fields according to role-based policies. This aligns with Prisma user master.\",\n        \"required\": []\n      },\n      \"IDiscussionboardUserProfile.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"display_name\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) Filter by display name (partial or exact match). Used for admin/member lookup workflows.\\n\\nFrom 'display_name' in user profiles.\"\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) Filter by user bio content (text search). Supports admin/member search, compliance workflows. From 'bio'.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Page number for pagination (default: 1).\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Number of results per page, with system default insurance (e.g., 100 max).\"\n          }\n        },\n        \"description\": \"Request body for advanced search, filter, and pagination of user profile records. Corresponds to fields in 'discussionboard_user_profile'. All fields are optional for broad or narrow searches.\",\n        \"required\": []\n      },\n      \"IPageDiscussionboardUserProfile\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardUserProfile\"\n            },\n            \"description\": \"Array of user profile records for this page.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"Paged result for user profile queries, including pagination info and user profiles returned. Used for admin/member directory views.\"\n      },\n      \"IDiscussionboardUserProfile\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Primary key for the user profile, uniquely generated and mapped to 'id' in Prisma.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Foreign key referencing 'discussionboard_user'. 1:1 mapping, required for lookups, profile ownership.\"\n          },\n          \"display_name\": {\n            \"type\": \"string\",\n            \"description\": \"Display name shown publicly on posts/comments. Matches 'display_name' in profile schema. Required.\"\n          },\n          \"avatar_url\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) URL to user avatar image. Large string value, may be null. From 'avatar_url' column in user profile.\"\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) User's bio—background, summary, or information for public display. Can be null. From 'bio' field.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"display_name\"\n        ],\n        \"description\": \"Represents a user's profile on the system. Provides public-facing display info, as separated from authentication data (see requirements Sections 3.1, 3.2; Prisma 'discussionboard_user_profile'). All fields directly map to form fields and display controls.\"\n      },\n      \"IDiscussionboardUserProfile.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"The UUID of the user this profile is for. Required, strict 1:1 mapping with 'discussionboard_user', foreign key constraint enforced.\"\n          },\n          \"display_name\": {\n            \"type\": \"string\",\n            \"description\": \"Display name for member directories and attribution. Must be unique if business rule applies, required.\"\n          },\n          \"avatar_url\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) URL of avatar image for the user (can be omitted/null).\"\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) User's biography/summary, for public display.\"\n          }\n        },\n        \"required\": [\n          \"user_id\",\n          \"display_name\"\n        ],\n        \"description\": \"Input body for creating a new user profile, used in onboarding/registration flows or admin onboarding.\"\n      },\n      \"IDiscussionboardUserProfile.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"display_name\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) New value for display name.\"\n          },\n          \"avatar_url\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) Update avatar URL (may be set to null to clear avatar).\"\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"(Optional) Update for bio/about content.\"\n          }\n        },\n        \"description\": \"Input body to update existing user profile fields. Used for member self-service and admin profile corrections or display adjustments.\",\n        \"required\": []\n      },\n      \"IDiscussionboardMember.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"(Optional) Filter by the user associated with this member role assignment. Used for admin member management and auditing.\"\n          },\n          \"granted_at_from\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"(Optional) Filter for memberships granted after this timestamp.\"\n          },\n          \"granted_at_to\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"(Optional) Filter for memberships granted before this timestamp.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Pagination page number (default: 1).\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Result count per page (default: system maximum).\"\n          }\n        },\n        \"description\": \"Advanced search/filter body for the discussionboard_member entity, supporting admin/member dashboards.\",\n        \"required\": []\n      },\n      \"IPageDiscussionboardMember\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardMember\"\n            },\n            \"description\": \"Array of discussionboard_member entities matching filter and pagination.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"Paged list of discussionboard_member objects, including pagination/query info needed for large data sets and admin/member search tools.\"\n      },\n      \"IDiscussionboardMember\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"고유 멤버 역할 할당 키. 모든 discussionboard_member 엔트리를 식별하며, 필요 시 추적 및 변경 로그를 지원합니다.\\n\\nPrisma discussionboard_member.id에 해당합니다.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"이 멤버 역할이 부여된 discussionboard_user와의 1:1 관계(외래키, 유니크). 회원 API, 권한 검증, 대시보드에서 사용자 정보를 조회할 때 필수적으로 활용합니다.\\n\\nPrisma discussionboard_member.user_id에 해당합니다.\"\n          },\n          \"granted_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"이 멤버 역할이 처음 부여된 일시(부여 시각). 오디팅, 멤버십 이력 관리, 역할 승격/강등 관리, 가입 일자 기준 조회 등에 활용합니다.\\n\\nPrisma discussionboard_member.granted_at에 해당합니다.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"granted_at\"\n        ],\n        \"description\": \"플랫폼 내 일반 참여자의 역할 데이터를 나타냅니다.\\n\\n모든 discussionboard_user는 최소 discussionboard_member 역할을 1:1로 할당받으며, 게시글/댓글 작성이나 좋아요 기능 등 일반 참여에 대한 권한이 이 엔티티를 통해 관리됩니다. 역할 변경(승격/강등) 내역은 granted_at을 참조해 오디트 가능합니다. 회원 관리/역할 관리 대시보드 기능과 밀접히 연결되어 있습니다.\"\n      },\n      \"IPage.IPagination\": {\n        \"type\": \"object\",\n        \"description\": \"페이지네이션 정보 객체입니다.\\n\\n이 타입은 데이터 페이징 결과의 현재 페이지, 페이지 당 항목 수, 전체 레코드 수, 총 페이지 수 등 필수 정보를 제공합니다. 모든 IPage<T> 타입에서 참조되어, 목록 조회의 페이징 처리를 표준화합니다.\",\n        \"properties\": {\n          \"current\": {\n            \"type\": \"integer\",\n            \"description\": \"현재 페이지 번호(1부터 시작).\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"description\": \"페이지 당 반환하는 결과 레코드 최대 수.\\n\\n시스템 디폴트값(예: 100) 또는 쿼리에서 지정한 limit 값. \"\n          },\n          \"records\": {\n            \"type\": \"integer\",\n            \"description\": \"해당 조건으로 조회될 전체 레코드 개수.\"\n          },\n          \"pages\": {\n            \"type\": \"integer\",\n            \"description\": \"전체 페이지 수(= records/limit, 올림 연산 결과).\"\n          }\n        },\n        \"required\": [\n          \"current\",\n          \"limit\",\n          \"records\",\n          \"pages\"\n        ]\n      },\n      \"IDiscussionboardMember.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"멤버로 지정할 discussionboard_user의 고유 식별자(외래키).\\n\\n역할 부여 API에서 반드시 지정되는 값입니다.\"\n          },\n          \"granted_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"멤버 역할이 실제로 부여되는 시각(통상 API 호출 시점의 서버 시간을 사용).\\n\\n오디팅, 멤버십 이력 관리, 가입 일자 기준 조회 등에 활용됩니다.\"\n          }\n        },\n        \"required\": [\n          \"user_id\",\n          \"granted_at\"\n        ],\n        \"description\": \"신규 멤버 역할 할당을 위한 요청 본문(based on discussionboard_member 테이블). user_id(대상 유저), granted_at(부여일시) 필수입니다. 일반적으로 어드민 패널, 대시보드, 회원 가입 후 자동 부여 등에서 사용됩니다.\"\n      },\n      \"IDiscussionboardMember.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"granted_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"멤버 역할의 부여/변경 시각 갱신용. 업무상 API로 멤버 기간을 조절할 때 사용.\"\n          }\n        },\n        \"required\": [\n          \"granted_at\"\n        ],\n        \"description\": \"멤버 역할 정보(부여 일시 등)만 수정 가능한 업데이트 타입입니다. grant_at을 변경할 때 사용합니다. user_id, id 등 PK/FK는 수정 불가.\"\n      },\n      \"IDiscussionboardModerator.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"특정 유저의 moderator 역할 여부 확인/검색시 사용되는 discussionboard_user의 고유 아이디.\\n\\n검색 조건(optional).\"\n          },\n          \"assigned_at_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"임명일(이상) 기준 필터\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"임명일(이상) 기준 필터\"\n          },\n          \"assigned_at_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"임명일(이하) 기준 필터\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"임명일(이하) 기준 필터\"\n          },\n          \"page\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"조회할 페이지 번호(1-base, 기본값=1)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"조회할 페이지 번호(1-base, 기본값=1)\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"페이지당 반환할 행 개수(기본값=100)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"페이지당 반환할 행 개수(기본값=100)\"\n          }\n        },\n        \"required\": [],\n        \"description\": \"모더레이터 역할 할당 리스트 조회/검색을 위한 요청 타입입니다. 주로 어드민 대시보드, 역할 관리 UI 등에서 활용되며, 유저별/기간별/페이지네이션 조건을 사용할 수 있습니다.\"\n      },\n      \"IPageDiscussionboardModerator\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardModerator\"\n            },\n            \"description\": \"조회된 moderator 역할 배열\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"모더레이터 역할 할당 목록의 페이지 결과를 담는 컨테이너 타입입니다. pagination(페이지 메타), data(목록) 필드 구성.\"\n      },\n      \"IDiscussionboardModerator\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"모더레이터 역할 할당의 고유 키(ID). PK.\\n\\n모든 discussionboard_moderator 엔트리를 식별합니다.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"실제 모더레이터로 임명되는 discussionboard_user의 고유 아이디(FK, 유니크). 유저-역할간 1:1 관계를 보장합니다.\"\n          },\n          \"assigned_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"이 역할이 최초 할당된 날짜/시간. 추적(승격/강등 로그, 오디팅)에 활용.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"assigned_at\"\n        ],\n        \"description\": \"플랫폼 내 모더레이터(중재자, 관리자)의 역할 데이터 레코드를 나타냅니다. 어드민 패널 등 역할 관리, 오디트 시스템에서 주로 사용됩니다.\"\n      },\n      \"IDiscussionboardModerator.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Moderator로 지정할 discussionboard_user의 식별자.\\n\\n역할 부여에 반드시 필요.\"\n          },\n          \"assigned_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"임명(할당) 일시. 신규 모더레이터 생성시 사용.\"\n          }\n        },\n        \"required\": [\n          \"user_id\",\n          \"assigned_at\"\n        ],\n        \"description\": \"신규 모더레이터 역할 할당을 위한 요청 타입입니다. user_id(유저)와 assigned_at(임명시간) 필요. 어드민이 역할을 부여할 때 사용.\"\n      },\n      \"IDiscussionboardModerator.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"assigned_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"임명된 날짜/시간을 다시 지정하거나 수정할 때 사용합니다.\"\n          }\n        },\n        \"required\": [\n          \"assigned_at\"\n        ],\n        \"description\": \"모더레이터 역할 배정 정보(임명 일시 등)만 수정하는 타입입니다.\"\n      },\n      \"IDiscussionboardAdmin.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"어드민 역할자(운영진) 중 특정 유저 아이디로 필터시 사용됩니다.\"\n          },\n          \"assigned_at_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"임명일(이상) 기준 필터\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"임명일(이상) 기준 필터\"\n          },\n          \"assigned_at_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"임명일(이하) 기준 필터\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"임명일(이하) 기준 필터\"\n          },\n          \"page\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"조회할 페이지 번호(1-base, 기본값=1)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"조회할 페이지 번호(1-base, 기본값=1)\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"페이지당 반환할 행 개수(기본값=100)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"페이지당 반환할 행 개수(기본값=100)\"\n          }\n        },\n        \"required\": [],\n        \"description\": \"어드민 역할 할당의 검색/조회 요청입니다. user_id, 임명일, 페이지네이션 등 다양한 조건을 조합해 관리 UI/대시보드에서 활용합니다.\"\n      },\n      \"IPageDiscussionboardAdmin\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardAdmin\"\n            }\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"어드민 역할 할당 목록의 페이지 결과입니다. pagination(메타정보), data(엔티티 배열) 필드로 구성.\"\n      },\n      \"IDiscussionboardAdmin\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"어드민 역할 할당 고유 식별자(PK). discussionboard_admin.id와 1:1로 매핑.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"실제 어드민 권한이 부여된 discussionboard_user의 고유 아이디(FK, 유니크).\"\n          },\n          \"assigned_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"운영진으로 지명된 시간/일자. 오디트 기록.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"assigned_at\"\n        ],\n        \"description\": \"플랫폼 어드민(최고 관리자) 역할 할당 이력을 나타내는 타입입니다. PK/FK 관리, 오디트 로깅, 권한 검증 로직의 기초가 됩니다.\"\n      },\n      \"IDiscussionboardAdmin.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"어드민 권한을 부여할 대상 유저의 UUID.\\n\\n역할 승격에 필요.\"\n          },\n          \"assigned_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"어드민 권한 부여 시각.\"\n          }\n        },\n        \"required\": [\n          \"user_id\",\n          \"assigned_at\"\n        ],\n        \"description\": \"관리자 역할 생성 요청 본문 예시. 신규 어드민 승격 및 임명시 user_id, assigned_at 필수.\"\n      },\n      \"IDiscussionboardAdmin.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"assigned_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"The date and time when the admin role was assigned, following ISO 8601 format.\\n\\nThis is used to track changes in administrative privilege history, supporting audit and compliance workflows for role changes as required in business rules.\"\n          }\n        },\n        \"required\": [\n          \"assigned_at\"\n        ],\n        \"description\": \"Data required to update an existing admin assignment in the discussionboard_admin table.\\n\\nIncludes the timestamp of assignment, which is crucial for tracking privilege escalation or changes according to business processes.\"\n      },\n      \"IDiscussionboardPost.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"category_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Category identifier for filtering posts, referencing discussionboard_post_category.\\n\\nAllows queries by category, such as 'Politics' or 'Economics', supporting filtered search as described in requirements.\"\n          },\n          \"author_member_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Member ID of the post author.\\n\\nSupports filtering posts by author for profile pages and moderation.\"\n          },\n          \"keywords\": {\n            \"type\": \"string\",\n            \"description\": \"Free-text search string for post title/body keyword or phrase matching.\\n\\nUsed to enable robust search and discovery features outlined in requirements.\"\n          },\n          \"created_at_from\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Lower bound for created_at field (inclusive).\\n\\nAllows filtering posts created after a specific timestamp.\"\n          },\n          \"created_at_to\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Upper bound for created_at field (inclusive).\\n\\nFilters posts created up to this time.\"\n          },\n          \"include_deleted\": {\n            \"type\": \"boolean\",\n            \"description\": \"If true, include soft-deleted posts in the result set.\\n\\nUsually only settable by admin or moderator roles for audit/moderation oversight.\"\n          },\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IRequest\",\n            \"description\": \"Pagination and page size configuration.\\n\\nConsistent with the standard paging and result set windowing.\"\n          }\n        },\n        \"description\": \"Filtering, search, and pagination parameters for listing discussion posts in the board.\\n\\nEnables advanced filtering (category, author, search keywords, creation dates), paging, and administrative audit controls as detailed in functional requirements.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardPost.ISummary\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"Page information, including current, limit, total, and page count.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardPost.ISummary\"\n            },\n            \"description\": \"The array of summarized post objects matching the search/filters.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"A paginated set of post summaries, as returned by list/search endpoints for discussionboard_post entities.\\n\\nEnables result set navigation and efficient client-side rendering of large datasets.\"\n      },\n      \"IDiscussionboardPost.ISummary\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the post as primary key.\\n\\nUsed for navigation to detail view or post-specific actions.\"\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"description\": \"The title of the post, used for preview and search lists.\"\n          },\n          \"category_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID for the category this post belongs to.\\n\\nReferences discussionboard_post_category and is used for filtering/grouping UI.\"\n          },\n          \"author_member_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Member ID of the authoring user.\\n\\nUsed for attribution, filtering by user, and moderation UI.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp when the post was created.\\n\\nSupports sorting, recency filtering, and audit logic.\"\n          },\n          \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp of last update, supporting audit trails and version tracking.\"\n          },\n          \"deleted_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"If set, indicates the post has been soft-deleted (hidden).\\n\\nReturned for admin/moderator queries per requirements.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"If set, indicates the post has been soft-deleted (hidden).\\n\\nReturned for admin/moderator queries per requirements.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"title\",\n          \"category_id\",\n          \"author_member_id\",\n          \"created_at\",\n          \"updated_at\"\n        ],\n        \"description\": \"Summary of a discussion post object suitable for list view or search result display.\\n\\nIncludes key fields for UI preview, search, and ordering. Used in paginated collections.\"\n      },\n      \"IDiscussionboardPost\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Primary key for the post record.\\n\\nGlobally unique identifier for each post, as required for audit trails and traceability.\"\n          },\n          \"author_member_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the member who authored the post.\\n\\nReferences discussionboard_member, supporting user detail drilldown and composition rules.\"\n          },\n          \"category_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Identifier for post's category (e.g. 'Politics', 'Economics').\\n\\nSupports association of post to functional categories, as required for discoverability.\"\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"description\": \"Post title, as shown to users and in search operations.\\n\\nUniquely identifies post content for summary views and indexing.\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\": \"Main post content.\\n\\nSupports markup (plain text/Markdown), enables long form discussion in compliance with requirements.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"ISO timestamp when post was first created.\\n\\nEnables audit, history/sort/order, and analytics.\"\n          },\n          \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Last modification timestamp for the post.\\n\\nTracks history for audit trails.\"\n          },\n          \"deleted_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"Timestamp of soft deletion if post is hidden from standard views.\\n\\nSet by admin or moderator actions for audit/compliance.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"Timestamp of soft deletion if post is hidden from standard views.\\n\\nSet by admin or moderator actions for audit/compliance.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"author_member_id\",\n          \"category_id\",\n          \"title\",\n          \"body\",\n          \"created_at\",\n          \"updated_at\"\n        ],\n        \"description\": \"A normalized post record as persisted in the discussionboard_post table.\\n\\nIncludes all fields essential for detailed view, moderation actions, and audit compliance.\"\n      },\n      \"IDiscussionboardPost.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"author_member_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID for the member posting content. Required for authorship attribution; validated for membership as per requirements.\"\n          },\n          \"category_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID for the category under which this post is filed. Only valid values available from discussionboard_post_category. Supports content organization, filtering, and admin taxonomy workflows.\"\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"description\": \"Title of the post. Required; serves as search anchor and headline for summarization.\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\": \"Main text content of the post. May support limited markup, as per UI requirements.\"\n          }\n        },\n        \"required\": [\n          \"author_member_id\",\n          \"category_id\",\n          \"title\",\n          \"body\"\n        ],\n        \"description\": \"Fields required for creating a new post within the discussion board.\\n\\nCorrelates to the required fields in creation endpoints, supporting input by members and validation for admin workflows.\"\n      },\n      \"IDiscussionboardPost.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"category_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Optional new category. If present, post will be reassigned. Must reference valid discussionboard_post_category.\"\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"description\": \"Optional new title for the post.\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\": \"Optional new content body. Use to apply edits to text.\"\n          },\n          \"deleted_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"Timestamp if post is being soft-deleted. Can be set or cleared by privilege holder only.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"Timestamp if post is being soft-deleted. Can be set or cleared by privilege holder only.\"\n          }\n        },\n        \"description\": \"Fields for updating attributes of a post (title, body, category, deleted_at).\\n\\nSupports edit and moderation flows. All fields optional unless endpoint requires specific ones.\",\n        \"required\": []\n      },\n      \"IDiscussionboardPostCategory.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Partial/category name for filtering or searching categories by name substring.\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Text content for category description filter/search match.\"\n          },\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IRequest\",\n            \"description\": \"Standard paging configuration for result windows.\"\n          }\n        },\n        \"description\": \"Request schema for searching/listing post categories, supporting text search, filtering, and paging.\\n\\nUsed by admin dashboards and configuration panels.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardPostCategory\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"Pagination metadata (page, limit, total, etc).\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardPostCategory\"\n            },\n            \"description\": \"Array of post category objects, suitable for UI display or selection.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"A paginated set of post categories as returned by list/search endpoints, supplying both summary and detail data for configuration/UI rendering.\"\n      },\n      \"IDiscussionboardPostCategory\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Primary key for post category.\\n\\nIdentifies unique category for filtering and administration.\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Category name, such as 'Economics' or 'Politics'. Must be unique in table.\"\n          },\n          \"description\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Human-readable full category explanatory text. Allows category discovery and admin notes.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"Human-readable full category explanatory text. Allows category discovery and admin notes.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"name\"\n        ],\n        \"description\": \"Discussion post category entity, as maintained in discussionboard_post_category.\\n\\nIncludes unique name, description, and UUID for search, maintenance, and constraint validation.\"\n      },\n      \"IDiscussionboardPostCategory.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Full name for new discussion category, required for taxonomy organization. Must be unique.\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Optional description providing extra context or usage notes for admins and users.\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"description\": \"Creation contract for admin or setup flows to define a new post category within the board, per requirements for flexible configuration and discoverability.\"\n      },\n      \"IDiscussionboardPostCategory.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Optional new name for the category. If set, must be unique.\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Optional new description for the category.\"\n          }\n        },\n        \"description\": \"Fields for updating a post category. Enable admin maintenance or reclassification of board categories.\",\n        \"required\": []\n      },\n      \"IDiscussionboardPostTag.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Partial tag name, supporting search/find pattern for tags.\"\n          },\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IRequest\",\n            \"description\": \"Standard pagination options for tag search results.\"\n          }\n        },\n        \"description\": \"Request contract for searching, listing, or filtering post tags, with support for partial name match and paging.\",\n        \"required\": []\n      },\n      \"IPage.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"page\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"description\": \"Page number for pagination. Optional; defaults to 1.\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"description\": \"Records per page. Optional; defaults to 100.\"\n          }\n        },\n        \"description\": \"Standard pagination request type used across paginated result sets.\\n\\n@see IPage.IRequest in documentation.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardPostTag\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"페이지네이션 정보를 담고 있습니다.\\n\\n예를 들어, 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수와 같은 정보를 포함합니다. 이는 목록형 API의 필수 요소로, 페이징 처리와 프론트 UI 연동의 핵심을 담당합니다.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardPostTag\"\n            },\n            \"description\": \"페이지별로 조회된 discussionboard_post_tag 레코드 목록입니다.\\n\\n각 항목은 게시글 태그 엔티티(단일 태그 포함)를 표현하며, 이 배열은 선택된 조건에 맞는 결과 집합을 페이징 기준에 따라 반환합니다.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"게시글 태그 레코드의 페이지네이션 지원 결과 컨테이너 타입입니다.\\n\\n쿼리 조건에 일치하는 태그 목록과 페이징 정보가 포함되어 있습니다. 주로 관리자 UI와 대량 데이터 조회 API 응답 본문에서 사용됩니다.\\n\\n원본 Prisma 스키마: discussionboard_post_tag (tag 분류 시스템, 중복 없는 태그 기본키 관리 테이블).\"\n      },\n      \"IDiscussionboardPostTag\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"게시글 태그를 고유하게 식별하는 UUID입니다.\\n\\nPrisma discussionboard_post_tag.id에서 유래했으며, 쿼리 및 레퍼런스 연산에서 주요 식별자 역할을 합니다. 중복 없는 원자적 레코드 키입니다.\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"태그 이름(문자열). 예: 'inflation'\\n\\ndiscussionboard_post_tag.name에 매핑되며, 유일(unique)이 보장됩니다. 게시글 분류, 검색, 필터에 사용됩니다.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"name\"\n        ],\n        \"description\": \"게시글 태그 정보 테이블 레코드.\\n\\ndiscussionboard_post_tag의 단일 row를 표현합니다. 주요 목적은 포스트 태그 관리, 토픽 기반 분류, 검색 시스템 지원, 관리자 UI의 태그편집/생성/조회 동작입니다.\"\n      },\n      \"IDiscussionboardPostTag.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"새로 등록할 태그 이름(문자열).\\n\\ndiscussionboard_post_tag.name 컬럼으로, 고유(unique) 값이어야 하며 빈 문자열은 허용하지 않습니다. 예: 'inflation', 'trade' 등 청취자 편의성 및 필터링 지원을 위해 명확한 단어 사용이 권장됩니다.\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"description\": \"게시글 태그 신규 생성(등록) 요청 바디 구조입니다.\\n\\ndiscussionboard_post_tag 레코드 신규 입력을 위한 계약으로, 관리 UI 또는 API 연동시 필수로 사용합니다.\"\n      },\n      \"IDiscussionboardPostTag.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"변경 희망 태그 이름(문자열).\\n\\ndiscussionboard_post_tag.name의 업데이트용 필드입니다. 태그의 오탈자 정정, 명칭 표준화 등 관리용으로 호출합니다.\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"description\": \"게시글 태그 정보(이름) 변경 요청 바디 구조입니다.\\n\\n기존 discussionboard_post_tag 레코드의 name 필드 수정에 사용됩니다.\"\n      },\n      \"IDeleteResponse\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"success\": {\n            \"type\": \"boolean\",\n            \"description\": \"삭제(삭제 요청 처리) 성공 여부를 Boolean으로 반환합니다.\\n\\nAPI 레벨에서 동작의 성공/실패를 명확하게 알리기 위한 용도입니다.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"삭제 요청 결과 메시지(예시: 성공/실패 이유, 부가 정보 등)를 전달합니다.\\n\\n클라이언트 또는 사용자에게 상세 결과 상황을 안내할 때 활용됩니다.\"\n          }\n        },\n        \"required\": [\n          \"success\",\n          \"message\"\n        ],\n        \"description\": \"리소스 삭제 API 호출 시 표준적으로 반환되는 결과 컨테이너 타입입니다.\\n\\n삭제 성공 여부와 상태 메시지를 제공합니다. 단순 삭제 외에도 소프트딜리션, 권한 오류 등 상태값 변동이 발생했을 때 상세 안내를 포함할 수 있습니다.\"\n      },\n      \"IDiscussionboardPostAttachment.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"검색/필터링을 위한 게시글 ID (UUID).\\n\\n특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다. discussionboard_post_attachment.post_id FK와 연결됩니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"검색/필터링을 위한 게시글 ID (UUID).\\n\\n특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다. discussionboard_post_attachment.post_id FK와 연결됩니다.\"\n              }\n            ],\n            \"description\": \"검색/필터링을 위한 게시글 ID (UUID).\\n\\n특정 포스트에 첨부된 파일만 조회하는 경우 지정합니다. discussionboard_post_attachment.post_id FK와 연결됩니다.\"\n          },\n          \"file_type\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\\n\\n특정 파일 종류만 검색할 때 지정합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\\n\\n특정 파일 종류만 검색할 때 지정합니다.\"\n              }\n            ],\n            \"description\": \"파일 타입(MIME string, 예: 'image/jpeg', 'application/pdf' 등) 필터 조건.\\n\\n특정 파일 종류만 검색할 때 지정합니다.\"\n          },\n          \"created_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"업로드 시점(이상, from) ISO 8601 타임스탬프.\\n\\n주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"업로드 시점(이상, from) ISO 8601 타임스탬프.\\n\\n주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링).\"\n              }\n            ],\n            \"description\": \"업로드 시점(이상, from) ISO 8601 타임스탬프.\\n\\n주어진 날짜/시간 이후에 업로드된 첨부파일 조회조건(예: 최근 일주일간 데이터 필터링).\"\n          },\n          \"created_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"업로드 시점(이하, to) ISO 8601 타임스탬프.\\n\\n주어진 날짜/시간 이전 첨부파일 조회조건.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"업로드 시점(이하, to) ISO 8601 타임스탬프.\\n\\n주어진 날짜/시간 이전 첨부파일 조회조건.\"\n              }\n            ],\n            \"description\": \"업로드 시점(이하, to) ISO 8601 타임스탬프.\\n\\n주어진 날짜/시간 이전 첨부파일 조회조건.\"\n          },\n          \"page\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"조회 페이지 번호(1-base, Pagination, 선택).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"int32\",\n                \"description\": \"조회 페이지 번호(1-base, Pagination, 선택).\"\n              }\n            ],\n            \"description\": \"조회 페이지 번호(1-base, Pagination, 선택).\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"페이지당 항목 수(선택, default=100).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"int32\",\n                \"description\": \"페이지당 항목 수(선택, default=100).\"\n              }\n            ],\n            \"description\": \"페이지당 항목 수(선택, default=100).\"\n          }\n        },\n        \"description\": \"게시글 첨부파일 검색, 필터링, 페이지네이션 요청 바디 타입. discussionboard_post_attachment 테이블의 파일 메타데이터를 조회/선택적으로 탐색할 때 사용됩니다.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardPostAttachment\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"첨부파일 목록 조회시 사용되는 페이지네이션 정보.\\n\\n예: 현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardPostAttachment\"\n            },\n            \"description\": \"파일 단위의 첨부파일 정보(객체 배열).\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"게시글 첨부파일 목록 결과(페이지네이션 지원).\\n\\n첨부파일 정보 집합과 페이징 메타가 함께 반환됩니다. discussionboard_post_attachment 테이블의 파일 메타/업로드 내역을 대표합니다.\"\n      },\n      \"IDiscussionboardPostAttachment\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"첨부파일 객체의 고유 UUID입니다.\\n\\ndiscussionboard_post_attachment.id를 직접 참조하며, 파일의 단일 식별 키로 활용됩니다.\"\n          },\n          \"post_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"첨부파일이 소속된 게시글(포스트) UUID입니다.\\n\\ndiscussionboard_post_attachment.post_id에 대한 FK. 게시글 삭제시 연쇄 삭제 등 비즈니스 로직과 연동됩니다.\"\n          },\n          \"file_url\": {\n            \"type\": \"string\",\n            \"description\": \"업로드된 파일의 접근(다운로드/서빙)용 절대 URL (최대 8만자).\\n\\nPrisma discussionboard_post_attachment.file_url – S3, CDN 등 외부 파일 경로 포함 가능.\"\n          },\n          \"file_type\": {\n            \"type\": \"string\",\n            \"description\": \"파일 MIME 타입 문자열 (예: 'image/png', 'application/pdf').\\n\\ndiscussionboard_post_attachment.file_type. 서버/클라이언트에서 미디어 판별에 사용됨.\"\n          },\n          \"uploaded_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"업로드 시점(타임스탬프, ISO 표기)\\n\\ndiscussionboard_post_attachment.uploaded_at. 파일의 업로드 및 정렬 기준.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"post_id\",\n          \"file_url\",\n          \"file_type\",\n          \"uploaded_at\"\n        ],\n        \"description\": \"게시글 첨부파일 단일 객체 정보.\\n\\ndiscussionboard_post_attachment의 개별 행(row)를 표현합니다. 파일 업로드/리스트, 미디어 콘텐츠 관리의 핵심 타입입니다.\"\n      },\n      \"IDiscussionboardPostAttachment.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"post_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"첨부파일을 등록할 게시글(포스트)의 UUID.\\n\\ndiscussionboard_post_attachment.post_id FK로, 파일 업로드시 반드시 지정해야 합니다.\"\n          },\n          \"file_url\": {\n            \"type\": \"string\",\n            \"description\": \"첨부파일 접근용 절대 URL (S3/CDN 경로 등).\\n\\ndiscussionboard_post_attachment.file_url 신규 등록 값. 대용량이므로 최대 길이 준수 필요(8만자 미만 권장).\"\n          },\n          \"file_type\": {\n            \"type\": \"string\",\n            \"description\": \"업로드 파일의 MIME 타입.\\n\\n이미지라면 'image/jpeg', 문서일 경우 'application/pdf' 등. 서버-클라이언트 호환성을 고려하여 표준값 입력 필요.\"\n          }\n        },\n        \"required\": [\n          \"post_id\",\n          \"file_url\",\n          \"file_type\"\n        ],\n        \"description\": \"게시글 첨부파일 신규 등록 API 요청용 구조체.\\n\\ndiscussionboard_post_attachment 테이블의 업로드 신규 레코드와 맵핑됩니다.\"\n      },\n      \"IDiscussionboardPostAttachment.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"file_url\": {\n            \"type\": \"string\",\n            \"description\": \"수정하려는 파일 접근 URL.\\n\\nS3, CDN 등 외부 저장소 경로가 변경되었을 때나 미디어 파일 유지보수시 입력.\"\n          },\n          \"file_type\": {\n            \"type\": \"string\",\n            \"description\": \"수정할 MIME 타입 값입니다.\\n\\n예: 파일 포맷이 변경된 경우, 잘못 입력된 타입을 정정할 때 사용.\"\n          }\n        },\n        \"description\": \"게시글 첨부파일 메타데이터(파일 url/mime type 등) 변경 API 요청 구조.\\n\\ndiscussionboard_post_attachment 테이블의 기존 레코드(파일) 정보를 수정할 때 사용됩니다.\",\n        \"required\": []\n      },\n      \"IDiscussionboardComments.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\\n\\ndiscussionboard_comments.post_id 필드에 대한 FK.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\\n\\ndiscussionboard_comments.post_id 필드에 대한 FK.\"\n              }\n            ],\n            \"description\": \"특정 게시글 내에서 댓글만 조회할 경우 해당 포스트의 UUID를 지정합니다.\\n\\ndiscussionboard_comments.post_id 필드에 대한 FK.\"\n          },\n          \"author_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\\n\\n특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\\n\\n특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다.\"\n              }\n            ],\n            \"description\": \"댓글 작성자(회원)의 UUID로, discussionboard_comments.author_id 컬럼과 연결됩니다.\\n\\n특정 유저의 댓글만 조회하는 경우나 관리자/모더레이터의 필터링에 활용됩니다.\"\n          },\n          \"parent_comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\\n\\nthreaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\\n\\nthreaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다.\"\n              }\n            ],\n            \"description\": \"대댓글(자식) 구조/트리형태 조회 시 부모 댓글 UUID 지정.\\n\\nthreaded/nested comment 뷰 및 답글 실시간 트리 구현에 활용합니다.\"\n          },\n          \"is_deleted\": {\n            \"oneOf\": [\n              {\n                \"type\": \"boolean\",\n                \"description\": \"삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\\n\\n일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\\n\\n일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다.\"\n              }\n            ],\n            \"description\": \"삭제(soft delete)된 댓글 여부로 탐색할때 사용. true면 삭제된 코멘트 포함, false가 default.\\n\\n일반적으로 moderation/관리자 뷰에서만 true를 함께 조회합니다.\"\n          },\n          \"is_edited\": {\n            \"oneOf\": [\n              {\n                \"type\": \"boolean\",\n                \"description\": \"편집(수정)된 댓글 여부 필터.\\n\\n사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null).\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"편집(수정)된 댓글 여부 필터.\\n\\n사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null).\"\n              }\n            ],\n            \"description\": \"편집(수정)된 댓글 여부 필터.\\n\\n사용자/관리자가 편집 이력 관리 목적일 때 활용(일반 목록에서는 false 또는 null).\"\n          },\n          \"created_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"생성 시점 필터(이후, from, ISO 8601).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"생성 시점 필터(이후, from, ISO 8601).\"\n              }\n            ],\n            \"description\": \"생성 시점 필터(이후, from, ISO 8601).\"\n          },\n          \"created_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"생성 시점 필터(이전, to, ISO 8601).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"생성 시점 필터(이전, to, ISO 8601).\"\n              }\n            ],\n            \"description\": \"생성 시점 필터(이전, to, ISO 8601).\"\n          },\n          \"page\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"조회할 페이지 번호(1-based, optional).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"int32\",\n                \"description\": \"조회할 페이지 번호(1-based, optional).\"\n              }\n            ],\n            \"description\": \"조회할 페이지 번호(1-based, optional).\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"페이지당 항목 개수(default=100, optional).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"int32\",\n                \"description\": \"페이지당 항목 개수(default=100, optional).\"\n              }\n            ],\n            \"description\": \"페이지당 항목 개수(default=100, optional).\"\n          }\n        },\n        \"description\": \"댓글 목록, 필터링, 검색 및 페이징 요청 바디 구조체입니다.\\n\\ndiscussionboard_comments의 다양한 조회 조건을 프론트, 백엔드, moderation API가 유연히 요청할 수 있게 설계된 타입입니다.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardComments\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"댓글 목록 페이지 네이션 정보.\\n\\n현재 페이지, 페이지당 항목, 전체 레코드 수, 전체 페이지 수 등 메타 정보.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardComments\"\n            },\n            \"description\": \"discussionboard_comments에 대한 comment row 객체의 배열.\\n\\n페이지 조건에 맞는 댓글 조회 결과 목록입니다.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"댓글 목록, 필터/페이징 결과 컨테이너 타입.\\n\\ndiscussionboard_comments의 복수 row 리턴 구조로, moderation 및 게시글 코멘트 뷰에 일괄 사용됩니다.\"\n      },\n      \"IDiscussionboardComments\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"고유 식별자입니다. 각 댓글을 고유하게 식별하는 UUID입니다.\\n\\nPrisma discussionboard_comments의 id 컬럼에 해당합니다. 토론 스레드 내에서 각 댓글의 트레이스 및 참조를 위함입니다.\"\n          },\n          \"post_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"이 댓글이 소속된 게시글의 고유 UUID입니다. 토론 내 게시물-댓글 관계를 정의합니다.\\n\\nPrisma discussionboard_comments의 post_id 컬럼에 해당하며, 게시글 삭제 시 댓글도 종속적으로 삭제됩니다.\"\n          },\n          \"author_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"이 댓글을 작성한 사용자의 고유 UUID입니다.\\n\\nPrisma discussionboard_comments의 author_id 컬럼에 해당하며, 댓글 작성자의 식별 및 활동 추적에 이용됩니다.\"\n          },\n          \"parent_comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로 취급됩니다.\\n\\nPrisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로 취급됩니다.\\n\\nPrisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다.\"\n              }\n            ],\n            \"description\": \"계층형(스레드) 댓글 구조에서 상위(부모) 댓글의 UUID입니다. 대댓글인 경우에만 값이 있습니다. 루트 댓글일 경우 null로 취급됩니다.\\n\\nPrisma discussionboard_comments의 parent_comment_id 컬럼에 해당합니다.\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"description\": \"댓글에 작성된 텍스트 본문입니다. 사용자가 작성한 메시지이며, 길이 제한 및 금칙어 등의 비즈니스 규칙이 적용될 수 있습니다.\\n\\nPrisma discussionboard_comments의 content 컬럼에 해당합니다.\"\n          },\n          \"is_edited\": {\n            \"type\": \"boolean\",\n            \"description\": \"댓글 내용이 최초 생성 이후 수정된 적이 있는가를 나타냅니다.\\n\\nPrisma discussionboard_comments의 is_edited 컬럼에 해당합니다.\"\n          },\n          \"is_deleted\": {\n            \"type\": \"boolean\",\n            \"description\": \"댓글이 소프트 삭제되었는지 여부를 나타냅니다. 물리 삭제가 아닌 경우 참으로 표시되며, 실제 데이터는 유지됩니다.\\n\\nPrisma discussionboard_comments의 is_deleted 컬럼에 해당합니다.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"댓글 최초 작성 시각(ISO 8601 표준)입니다.\\n\\nPrisma discussionboard_comments의 created_at 컬럼에 해당합니다.\"\n          },\n          \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"댓글의 최종 수정(혹은 삭제 표시 등) 시각입니다. 수정을 하지 않았다면 작성 시각과 동일합니다.\\n\\nPrisma discussionboard_comments의 updated_at 컬럼에 해당합니다.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"post_id\",\n          \"author_id\",\n          \"content\",\n          \"is_edited\",\n          \"is_deleted\",\n          \"created_at\",\n          \"updated_at\"\n        ],\n        \"description\": \"댓글 단건 엔터티. 하나의 게시물에 소속된 댓글(및 대댓글 포함). 계층적 구조가 포함되며, 댓글 삭제/수정 여부 및 생성/수정 시각을 기록합니다.\\n\\nPrisma discussionboard_comments 테이블 전체를 대표하며, 모든 댓글 API의 응답 구조에 사용됩니다.\"\n      },\n      \"IDiscussionboardComments.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"post_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"댓글을 달고자 하는 게시글의 UUID입니다.\\n\\nPrisma discussionboard_comments.post_id에 해당하며, 반드시 존재하는 게시글이어야만 합니다.\"\n          },\n          \"parent_comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\\n\\nPrisma discussionboard_comments.parent_comment_id에 해당합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\\n\\nPrisma discussionboard_comments.parent_comment_id에 해당합니다.\"\n              }\n            ],\n            \"description\": \"대댓글(답글)일 경우 부모 댓글의 UUID. 최상위(루트) 댓글일 때는 null로 지정합니다.\\n\\nPrisma discussionboard_comments.parent_comment_id에 해당합니다.\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"description\": \"댓글의 텍스트 본문. 반드시 입력되어야 하며, 플랫폼 정책에 따라 길이 제한 또는 필터링이 적용될 수 있습니다.\\n\\nPrisma discussionboard_comments.content에 해당합니다.\"\n          }\n        },\n        \"required\": [\n          \"post_id\",\n          \"content\"\n        ],\n        \"description\": \"댓글 등록용 요청 객체. 일반 댓글 또는 대댓글 등록 모두 지원합니다.\\n\\nPrisma discussionboard_comments CREATE 시 요구되는 모든 정보(게시글ID, 부모댓글ID, 내용)를 포함하며, 클라이언트에서 서버로 전달되는 API의 본문 요청 타입입니다.\"\n      },\n      \"IDiscussionboardComment.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"content\": {\n            \"type\": \"string\",\n            \"description\": \"수정할 댓글의 내용. 수정 시 반드시 본문이 포함되어야 하며, 정책에 따라 길이제한·필터링 등이 적용될 수 있습니다.\\n\\nPrisma discussionboard_comments.content에 해당합니다.\"\n          }\n        },\n        \"required\": [\n          \"content\"\n        ],\n        \"description\": \"댓글 수정 요청 객체. 수정 대상 댓글의 UUID는 URL 파라미터 등에서 별도로 명시하며, 본문에는 새 내용만 입력합니다.\\n\\nPrisma discussionboard_comments UPDATE 목적의 요청 타입입니다.\"\n      },\n      \"IDiscussionboardComment\": {\n        \"$ref\": \"#/components/schemas/IDiscussionboardComments\",\n        \"description\": \"댓글 단건 엔터티에 대한 alias 및 참조 용. 구조와 설명은 IDiscussionboardComments와 동일합니다.\"\n      },\n      \"IDiscussionboardLike.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"좋아요를 만든 사용자(UUID). 필터 조건으로 사용 시 입력. Prisma discussionboard_likes.user_id 컬럼에 해당.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma discussionboard_likes.post_id 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma discussionboard_likes.post_id 컬럼.\"\n              }\n            ],\n            \"description\": \"해당 좋아요가 달린 게시글의 UUID. 게시글 좋아요 검색에 사용. Prisma discussionboard_likes.post_id 컬럼.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma discussionboard_likes.comment_id 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma discussionboard_likes.comment_id 컬럼.\"\n              }\n            ],\n            \"description\": \"해당 좋아요가 달린 댓글의 UUID. 댓글 좋아요 검색에 사용. Prisma discussionboard_likes.comment_id 컬럼.\"\n          },\n          \"created_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"(선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"(선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색.\"\n              }\n            ],\n            \"description\": \"(선택) 좋아요 작성일 하한(ISO 8601). 이 시각 이후로 생성된 좋아요만 검색.\"\n          },\n          \"created_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"(선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"(선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색.\"\n              }\n            ],\n            \"description\": \"(선택) 좋아요 작성일 상한(ISO 8601). 이 시각 이전에 생성된 좋아요만 검색.\"\n          },\n          \"include_deleted\": {\n            \"type\": \"boolean\",\n            \"description\": \"삭제(soft delete)된 좋아요 포함 여부. 기본값(false)인 경우 deleted_at이 null인 데이터만 반환.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"description\": \"페이지 번호(1-base). 기본값은 1.\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"description\": \"한 페이지당 반환 row 수. 기본값 및 최대값(예:1000)은 정책에 따라 조정.\"\n          }\n        },\n        \"required\": [\n          \"page\",\n          \"limit\"\n        ],\n        \"description\": \"좋아요(Like) 엔터티 검색 및 페이징 리스트 반환 요청 타입. 다양한 필터(작성자, 게시글/댓글, 기간, 삭제여부 등)와 페이징이 포함됨.\"\n      },\n      \"IPageIDiscussionboardLike\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardLike\"\n            },\n            \"description\": \"좋아요 엔터티 목록. 한 페이지에 포함된 discussionboard_likes 레코드들의 배열.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"좋아요 목록의 페이지네이션 컨테이너. 페이징 정보와 좋아요 데이터 배열을 함께 제공합니다.\"\n      },\n      \"IDiscussionboardLike\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"좋아요 데이터의 고유 식별자(UUID).\\n\\nPrisma discussionboard_likes.id 컬럼 참조.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"좋아요를 누른 사용자(UUID). Prisma discussionboard_likes.user_id 컬럼.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\\n\\nPrisma discussionboard_likes.post_id 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\\n\\nPrisma discussionboard_likes.post_id 컬럼.\"\n              }\n            ],\n            \"description\": \"좋아요 대상이 되는 게시글의 UUID. 게시글에 대한 좋아요일 때만 값 존재.\\n\\nPrisma discussionboard_likes.post_id 컬럼.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\\n\\nPrisma discussionboard_likes.comment_id 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\\n\\nPrisma discussionboard_likes.comment_id 컬럼.\"\n              }\n            ],\n            \"description\": \"좋아요 대상이 되는 댓글의 UUID. 댓글에 대한 좋아요일 때만 값 존재.\\n\\nPrisma discussionboard_likes.comment_id 컬럼.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"좋아요 이벤트의 생성일시(ISO 8601). Prisma discussionboard_likes.created_at 컬럼.\"\n          },\n          \"deleted_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma discussionboard_likes.deleted_at 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma discussionboard_likes.deleted_at 컬럼.\"\n              }\n            ],\n            \"description\": \"좋아요의 소프트삭제 처리 일시. 삭제되지 않은 경우 null. Prisma discussionboard_likes.deleted_at 컬럼.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"created_at\"\n        ],\n        \"description\": \"좋아요 데이터 단일 엔터티. 게시글/댓글에 대한 유저의 Like 기록 단위.\\n\\nPrisma discussionboard_likes 테이블 전체 구조 반영.\"\n      },\n      \"IDiscussionboardLike.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"좋아요를 만드는 사용자(UUID). 클라이언트의 인증 정보와 일치해야 함. Prisma discussionboard_likes.user_id.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력.\"\n              }\n            ],\n            \"description\": \"좋아요를 달 게시글의 UUID. 게시글 대상일 경우에 입력.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력.\"\n              }\n            ],\n            \"description\": \"좋아요를 달 댓글의 UUID. 댓글 대상일 경우에 입력.\"\n          }\n        },\n        \"required\": [\n          \"user_id\"\n        ],\n        \"description\": \"좋아요(Like) 등록 요청 데이터. 게시글 또는 댓글을 하나만 지정해야 하며, 클라이언트가 인증된 사용자와 일치해야 함.\\n\\nPrisma discussionboard_likes CREATE 시 필요한 payload.\"\n      },\n      \"IDiscussionboardLike.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"deleted_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null.\"\n              }\n            ],\n            \"description\": \"좋아요 삭제 시점(soft delete). un-like 처리 시 서버에서 자동 지정. 복구 시 null.\"\n          }\n        },\n        \"description\": \"좋아요 기록 수정 요청 객체. 해제(소프트 삭제) 또는 복구 목적. 수정 가능한 필드는 deleted_at 등 상태 전환 속성만 허용함.\",\n        \"required\": []\n      },\n      \"IDiscussionboardReport.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"신고를 생성한 회원 UUID. 해당 사용자의 신고만 조회할 때 필터로 지정.\\n\\nPrisma discussionboard_reports.user_id 컬럼.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\\n\\nPrisma discussionboard_reports.post_id 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\\n\\nPrisma discussionboard_reports.post_id 컬럼.\"\n              }\n            ],\n            \"description\": \"신고 대상이 되는 게시글 UUID. 게시글 신고 내역 검색 시 사용.\\n\\nPrisma discussionboard_reports.post_id 컬럼.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\\n\\nPrisma discussionboard_reports.comment_id 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\\n\\nPrisma discussionboard_reports.comment_id 컬럼.\"\n              }\n            ],\n            \"description\": \"신고 대상이 되는 댓글 UUID. 댓글 신고 내역 검색 시 사용.\\n\\nPrisma discussionboard_reports.comment_id 컬럼.\"\n          },\n          \"reason_code\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\\n\\nPrisma discussionboard_reports.reason_code 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\\n\\nPrisma discussionboard_reports.reason_code 컬럼.\"\n              }\n            ],\n            \"description\": \"신고 사유 코드(예: 'spam', 'abuse' 등). 비즈니스에 정의된 code 문자열만 사용.\\n\\nPrisma discussionboard_reports.reason_code 컬럼.\"\n          },\n          \"created_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터.\"\n              }\n            ],\n            \"description\": \"신고 생성일(하한, ISO 8601). 지정 시 해당 일시 이후 생성된 신고만 필터.\"\n          },\n          \"created_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터.\"\n              }\n            ],\n            \"description\": \"신고 생성일(상한, ISO 8601). 지정 시 해당 일시 이전 생성된 신고만 필터.\"\n          },\n          \"include_deleted\": {\n            \"type\": \"boolean\",\n            \"description\": \"삭제(soft delete)된 신고 포함 여부. 기본값 false.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"description\": \"페이지 번호(1-base). 기본값 1.\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"description\": \"페이지 당 row 개수. 기본 및 최대는 정책에 따라 조정.\"\n          }\n        },\n        \"required\": [\n          \"page\",\n          \"limit\"\n        ],\n        \"description\": \"신고 목록(페이징) API의 검색 조건 객체. 사용자 ID, 신고 대상(post/comment), 사유코드, 생성일 등 다양한 조건으로 필터링하며, 삭제 포함 여부/페이징 지원.\"\n      },\n      \"IPageIDiscussionboardReport\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardReport\"\n            },\n            \"description\": \"신고 데이터 각 페이지당 레코드 배열.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"신고 목록 페이징 데이터 컨테이너. pagination과 신고 엔터티 배열.\"\n      },\n      \"IDiscussionboardReport\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"신고 고유 식별자(UUID).\\n\\nPrisma discussionboard_reports.id 컬럼.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"신고를 제기한 회원 UUID.\\n\\nPrisma discussionboard_reports.user_id 컬럼.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재.\"\n              }\n            ],\n            \"description\": \"신고 대상 게시글 UUID. 게시글 대상일 경우에만 값 존재.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상 댓글 UUID. 댓글 대상일 때 해당.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"신고 대상 댓글 UUID. 댓글 대상일 때 해당.\"\n              }\n            ],\n            \"description\": \"신고 대상 댓글 UUID. 댓글 대상일 때 해당.\"\n          },\n          \"reason_code\": {\n            \"type\": \"string\",\n            \"description\": \"신고 사유 코드(정책에서 사전 정의, 예: 'abuse', 'spam' 등).\\n\\nPrisma discussionboard_reports.reason_code 컬럼.\"\n          },\n          \"reason_details\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma discussionboard_reports.reason_details 컬럼.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma discussionboard_reports.reason_details 컬럼.\"\n              }\n            ],\n            \"description\": \"신고 상세 설명. 사용자가 직접 입력한 부가설명/증빙 내용. Prisma discussionboard_reports.reason_details 컬럼.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"신고 생성일시(ISO 8601). Prisma discussionboard_reports.created_at 컬럼.\"\n          },\n          \"deleted_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"신고의 소프트삭제 일시. 삭제 되지 않은 경우 null.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"신고의 소프트삭제 일시. 삭제 되지 않은 경우 null.\"\n              }\n            ],\n            \"description\": \"신고의 소프트삭제 일시. 삭제 되지 않은 경우 null.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"reason_code\",\n          \"created_at\"\n        ],\n        \"description\": \"신고 데이터 단일 엔터티. 게시글 또는 댓글에 대한 abuse/spam 신고 이벤트.\\n\\nPrisma discussionboard_reports 테이블 전체 구조 반영.\"\n      },\n      \"IDiscussionboardReport.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"The unique identifier (UUID) of the user submitting the report.\\n\\nRefer to the 'discussionboard_user' table and the requirements in 02_discussionboard_functional_requirements.md Section 3.4 (Reporting). This property enables system-level association of user-originated abuse or spam reports with their reporter, supporting audit trails, notification, and moderation workflows.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"The UUID of the post being reported, if the report targets a post.\\n\\nRefer to the 'discussionboard_post' table. This field supports polymorphic reporting scenarios (reported content is a post). Nullable: set to null when reporting a comment instead. Ensures normalization by referencing the core post entity only when appropriate. Corresponds to design patterns in schema-04-interaction.prisma (discussionboard_reports).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"The UUID of the post being reported, if the report targets a post.\\n\\nRefer to the 'discussionboard_post' table. This field supports polymorphic reporting scenarios (reported content is a post). Nullable: set to null when reporting a comment instead. Ensures normalization by referencing the core post entity only when appropriate. Corresponds to design patterns in schema-04-interaction.prisma (discussionboard_reports).\"\n              }\n            ],\n            \"description\": \"The UUID of the post being reported, if the report targets a post.\\n\\nRefer to the 'discussionboard_post' table. This field supports polymorphic reporting scenarios (reported content is a post). Nullable: set to null when reporting a comment instead. Ensures normalization by referencing the core post entity only when appropriate. Corresponds to design patterns in schema-04-interaction.prisma (discussionboard_reports).\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"The UUID of the comment being reported, if the report targets a comment.\\n\\nRefer to the 'discussionboard_comments' table. This field supports polymorphic reporting scenarios (reported content is a comment). Nullable: set to null when reporting a post instead. This enables consistent, atomic tracking of report targets.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"The UUID of the comment being reported, if the report targets a comment.\\n\\nRefer to the 'discussionboard_comments' table. This field supports polymorphic reporting scenarios (reported content is a comment). Nullable: set to null when reporting a post instead. This enables consistent, atomic tracking of report targets.\"\n              }\n            ],\n            \"description\": \"The UUID of the comment being reported, if the report targets a comment.\\n\\nRefer to the 'discussionboard_comments' table. This field supports polymorphic reporting scenarios (reported content is a comment). Nullable: set to null when reporting a post instead. This enables consistent, atomic tracking of report targets.\"\n          },\n          \"reason_code\": {\n            \"type\": \"string\",\n            \"description\": \"A structured code representing the reason for the report (e.g., 'abuse', 'spam', or 'off-topic').\\n\\nThis property must match preapproved system values to allow downstream moderation analytics and workflow automation. The value is validated at the application level. Ensures systematization of abuse categories as required in reporting workflows.\"\n          },\n          \"reason_details\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optional, extended rationale or context for the report as entered by the reporting user.\\n\\nNullable. Useful for appeals and detailed moderation review per 02_discussionboard_functional_requirements.md Section 3.4. Not mandatory; if omitted, the reason_code should provide high-level context.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optional, extended rationale or context for the report as entered by the reporting user.\\n\\nNullable. Useful for appeals and detailed moderation review per 02_discussionboard_functional_requirements.md Section 3.4. Not mandatory; if omitted, the reason_code should provide high-level context.\"\n              }\n            ],\n            \"description\": \"Optional, extended rationale or context for the report as entered by the reporting user.\\n\\nNullable. Useful for appeals and detailed moderation review per 02_discussionboard_functional_requirements.md Section 3.4. Not mandatory; if omitted, the reason_code should provide high-level context.\"\n          }\n        },\n        \"required\": [\n          \"user_id\",\n          \"reason_code\"\n        ],\n        \"description\": \"Represents the payload for creating a new item in the 'discussionboard_reports' table (abuse/spam/guideline violation reports).\\n\\nAligns with the reporting requirements described in 3.4 and 3.5 of the requirements analysis and supports the polymorphic reporting of both posts and comments. All fields must be strictly normalized and validated as per discussionboard schema-04-interaction.prisma.\"\n      },\n      \"IDiscussionboardReport.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"reason_code\": {\n            \"type\": \"string\",\n            \"description\": \"Updated code for the report reason (e.g., 'abuse', 'spam').\\n\\nMay be used to change or clarify the violation category. Application logic validates values as per platform rules.\"\n          },\n          \"reason_details\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optionally revised or appended contextual information for the report.\\n\\nEditable before or during moderation workflow, supporting detail correction or appeals as described in requirements Section 3.4 and corresponding moderation flows.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optionally revised or appended contextual information for the report.\\n\\nEditable before or during moderation workflow, supporting detail correction or appeals as described in requirements Section 3.4 and corresponding moderation flows.\"\n              }\n            ],\n            \"description\": \"Optionally revised or appended contextual information for the report.\\n\\nEditable before or during moderation workflow, supporting detail correction or appeals as described in requirements Section 3.4 and corresponding moderation flows.\"\n          }\n        },\n        \"required\": [\n          \"reason_code\"\n        ],\n        \"description\": \"Update payload for a report in the 'discussionboard_reports' table.\\n\\nUses fields relevant for revision prior to or during moderation review. Aligns with flexible reporting flows as defined in the requirements analysis (Section 3.4, 3.5).\"\n      },\n      \"IDiscussionboardModerationAction.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"actor_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by the moderator/admin (actor) who performed the moderation action.\\n\\nNullable, to allow unfiltered or broad searches. Corresponds to 'actor_id' field of 'discussionboard_moderation_action'. Used for moderation transparency in audit dashboards.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by the moderator/admin (actor) who performed the moderation action.\\n\\nNullable, to allow unfiltered or broad searches. Corresponds to 'actor_id' field of 'discussionboard_moderation_action'. Used for moderation transparency in audit dashboards.\"\n              }\n            ],\n            \"description\": \"Optionally filter by the moderator/admin (actor) who performed the moderation action.\\n\\nNullable, to allow unfiltered or broad searches. Corresponds to 'actor_id' field of 'discussionboard_moderation_action'. Used for moderation transparency in audit dashboards.\"\n          },\n          \"target_user_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by the target user who received moderation action.\\n\\nThis allows searches for all moderation events affecting a specific user, supporting audit and appeals functionality.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by the target user who received moderation action.\\n\\nThis allows searches for all moderation events affecting a specific user, supporting audit and appeals functionality.\"\n              }\n            ],\n            \"description\": \"Optionally filter by the target user who received moderation action.\\n\\nThis allows searches for all moderation events affecting a specific user, supporting audit and appeals functionality.\"\n          },\n          \"action_type\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optionally filter by action type (e.g. 'delete_post', 'hide_comment', 'ban_user').\\n\\nNullable for broad queries. This enables targeted searches for type-specific moderation activity as per the requirements for moderator/admin oversight.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optionally filter by action type (e.g. 'delete_post', 'hide_comment', 'ban_user').\\n\\nNullable for broad queries. This enables targeted searches for type-specific moderation activity as per the requirements for moderator/admin oversight.\"\n              }\n            ],\n            \"description\": \"Optionally filter by action type (e.g. 'delete_post', 'hide_comment', 'ban_user').\\n\\nNullable for broad queries. This enables targeted searches for type-specific moderation activity as per the requirements for moderator/admin oversight.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter for moderation actions impacting a particular post.\\n\\nNullable—corresponds to the 'post_id' of 'discussionboard_moderation_action'. Important for post-centric audit workflows.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter for moderation actions impacting a particular post.\\n\\nNullable—corresponds to the 'post_id' of 'discussionboard_moderation_action'. Important for post-centric audit workflows.\"\n              }\n            ],\n            \"description\": \"Optionally filter for moderation actions impacting a particular post.\\n\\nNullable—corresponds to the 'post_id' of 'discussionboard_moderation_action'. Important for post-centric audit workflows.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter for moderation actions affecting a specific comment.\\n\\nNullable—enables searches for comment-based moderation (e.g., hidden or deleted comments).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter for moderation actions affecting a specific comment.\\n\\nNullable—enables searches for comment-based moderation (e.g., hidden or deleted comments).\"\n              }\n            ],\n            \"description\": \"Optionally filter for moderation actions affecting a specific comment.\\n\\nNullable—enables searches for comment-based moderation (e.g., hidden or deleted comments).\"\n          },\n          \"created_at_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"Optionally filter for moderation actions created after this ISO 8601 timestamp.\\n\\nNullable. Enables auditing by date range for moderation history.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"Optionally filter for moderation actions created after this ISO 8601 timestamp.\\n\\nNullable. Enables auditing by date range for moderation history.\"\n              }\n            ],\n            \"description\": \"Optionally filter for moderation actions created after this ISO 8601 timestamp.\\n\\nNullable. Enables auditing by date range for moderation history.\"\n          },\n          \"created_at_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"Optionally filter for moderation actions created before this ISO 8601 timestamp.\\n\\nNullable. Used for date range filtering as per requirements for dashboard review.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"Optionally filter for moderation actions created before this ISO 8601 timestamp.\\n\\nNullable. Used for date range filtering as per requirements for dashboard review.\"\n              }\n            ],\n            \"description\": \"Optionally filter for moderation actions created before this ISO 8601 timestamp.\\n\\nNullable. Used for date range filtering as per requirements for dashboard review.\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 1,\n                \"description\": \"The maximum number of moderation actions to return (pagination limit).\\n\\nNullable; defaults to a platform default if omitted. Avoids excessive data transfer in admin workflows.\"\n              },\n              {\n                \"type\": \"null\",\n                \"minimum\": 1,\n                \"description\": \"The maximum number of moderation actions to return (pagination limit).\\n\\nNullable; defaults to a platform default if omitted. Avoids excessive data transfer in admin workflows.\"\n              }\n            ],\n            \"description\": \"The maximum number of moderation actions to return (pagination limit).\\n\\nNullable; defaults to a platform default if omitted. Avoids excessive data transfer in admin workflows.\"\n          },\n          \"offset\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 0,\n                \"description\": \"Zero-based offset of the first moderation action to return (pagination offset).\\n\\nNullable; enables paged retrieval for large result sets.\"\n              },\n              {\n                \"type\": \"null\",\n                \"minimum\": 0,\n                \"description\": \"Zero-based offset of the first moderation action to return (pagination offset).\\n\\nNullable; enables paged retrieval for large result sets.\"\n              }\n            ],\n            \"description\": \"Zero-based offset of the first moderation action to return (pagination offset).\\n\\nNullable; enables paged retrieval for large result sets.\"\n          }\n        },\n        \"description\": \"Query/filter/pagination request object for listing moderation actions.\\n\\nSupports advanced searching, filtering, and pagination for the discussionboard_moderation_action table, enabling comprehensive moderation review and dashboard analytics.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardModerationAction\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"Pagination metadata: current page, limit, total records, total pages.\\n\\nRequired for paged/efficient admin dashboard consumption of moderation actions.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardModerationAction\"\n            },\n            \"description\": \"Array of moderation action records for this page.\\n\\nEach element represents a row from discussionboard_moderation_action, fully normalized, ready for detailed rendering or further audit workflows.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"Paged container for moderation action results.\\n\\nReturns a result list and pagination metadata for moderation dashboards and admin audit tools.\"\n      },\n      \"IDiscussionboardModerationAction\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Unique UUID (primary key) for this moderation action.\\n\\nDirectly mirrors the 'id' column from discussionboard_moderation_action. Required for detailed lookup and audit traceability.\"\n          },\n          \"actor_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the user (admin/moderator) who performed the moderation action.\\n\\nReferences the 'actor_id' in the moderation audit and is essential for establishing system accountability (actor/issuer relationship).\"\n          },\n          \"target_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the user who received or was targeted by the moderation action.\\n\\nEstablishes referential traceability as per requirements for reporting, appeal, and audit (connects disciplinary action to the affected user).\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of the post affected by this moderation action, if applicable.\\n\\nPopulated for content moderation targeting a specific post (e.g., deleted/hidden posts).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of the post affected by this moderation action, if applicable.\\n\\nPopulated for content moderation targeting a specific post (e.g., deleted/hidden posts).\"\n              }\n            ],\n            \"description\": \"Nullable UUID of the post affected by this moderation action, if applicable.\\n\\nPopulated for content moderation targeting a specific post (e.g., deleted/hidden posts).\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of the comment affected by this moderation action, if applicable.\\n\\nSupports ticketing, escalation, and moderation workflows at the comment (thread) level.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of the comment affected by this moderation action, if applicable.\\n\\nSupports ticketing, escalation, and moderation workflows at the comment (thread) level.\"\n              }\n            ],\n            \"description\": \"Nullable UUID of the comment affected by this moderation action, if applicable.\\n\\nSupports ticketing, escalation, and moderation workflows at the comment (thread) level.\"\n          },\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of moderation action (e.g., 'delete_post', 'ban_user', 'hide_comment', etc.).\\n\\nEnables categorical review, analytics, and streamlined workflow automation as per requirements for content governance.\"\n          },\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"Textual rationale for the moderation action as entered by the moderator/admin.\\n\\nCritical for supporting user appeals and ensuring system transparency; referenced in user notification and appeals dashboards.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp (ISO 8601) recording when the moderation action was performed (row creation time).\\n\\nUsed for audit review, analytics, and regulatory compliance.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"actor_id\",\n          \"target_user_id\",\n          \"action_type\",\n          \"reason\",\n          \"created_at\"\n        ],\n        \"description\": \"Represents a single moderation action event as recorded in discussionboard_moderation_action.\\n\\nContains all atomic fields needed for detailed review, appeals handling, and moderation dashboards. Follows audit and traceability best practices in platform governance.\"\n      },\n      \"IDiscussionboardModerationAction.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"actor_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID for the moderator/admin performing the moderation action.\\n\\nRequired to establish issuer responsibility as per compliance and regulatory requirements (see requirements documents 02.3.5, 03).\"\n          },\n          \"target_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the user who is the subject/recipient of the moderation action.\\n\\nDirectly reflects affected users in disciplinary actions and supports audit, appeals, and notification.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of a post affected by the moderation action, if relevant.\\n\\nUsed for post-centric moderation (deletes, hides). Set to null if unrelated or the moderation event targets a comment or user action.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of a post affected by the moderation action, if relevant.\\n\\nUsed for post-centric moderation (deletes, hides). Set to null if unrelated or the moderation event targets a comment or user action.\"\n              }\n            ],\n            \"description\": \"Nullable UUID of a post affected by the moderation action, if relevant.\\n\\nUsed for post-centric moderation (deletes, hides). Set to null if unrelated or the moderation event targets a comment or user action.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of a comment affected by this moderation action, if relevant.\\n\\nUsed for moderation of comment chains or individual comments. Set to null for non-comment events.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID of a comment affected by this moderation action, if relevant.\\n\\nUsed for moderation of comment chains or individual comments. Set to null for non-comment events.\"\n              }\n            ],\n            \"description\": \"Nullable UUID of a comment affected by this moderation action, if relevant.\\n\\nUsed for moderation of comment chains or individual comments. Set to null for non-comment events.\"\n          },\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"Categorical string indicating the nature of the moderation event (e.g., 'delete_post', 'warning', 'ban_user').\\n\\nBusiness logic validates admissible values as per platform rulebook (see requirements 02.3.5).\"\n          },\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"The moderator/admin rationale for the action, as a freeform string to document the basis for moderation.\\n\\nUsed for appeals, transparency, and audit.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"The timestamp when the moderation action took place (operation time, ISO 8601).\\n\\nSupports time-based analytics, SLAs, and audit trace reconstruction.\"\n          }\n        },\n        \"required\": [\n          \"actor_id\",\n          \"target_user_id\",\n          \"action_type\",\n          \"reason\",\n          \"created_at\"\n        ],\n        \"description\": \"Creation payload to log a new moderation action.\\n\\nThis is the write-end for 'discussionboard_moderation_action' as per the audit, governance, and appeals workflows in platform requirements.\"\n      },\n      \"IDiscussionboardModerationAction.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"Category/type for the moderation action (e.g., 'warning', 'delete_post').\\n\\nMay support correction/annotation during post-hoc audit or appeals process.\"\n          },\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"The updated rationale or moderator notes as freeform text.\\n\\nSupports traceability and transparency (justification review in audits).\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID for updating the post reference affected by this action (if applicable).\\n\\nMay be required if moderation affects a new post on correction.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID for updating the post reference affected by this action (if applicable).\\n\\nMay be required if moderation affects a new post on correction.\"\n              }\n            ],\n            \"description\": \"Nullable UUID for updating the post reference affected by this action (if applicable).\\n\\nMay be required if moderation affects a new post on correction.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID for updating the comment reference affected by moderation (if applicable).\\n\\nEndpoints provide business logic enforcing referential integrity.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable UUID for updating the comment reference affected by moderation (if applicable).\\n\\nEndpoints provide business logic enforcing referential integrity.\"\n              }\n            ],\n            \"description\": \"Nullable UUID for updating the comment reference affected by moderation (if applicable).\\n\\nEndpoints provide business logic enforcing referential integrity.\"\n          }\n        },\n        \"description\": \"Update payload for modifying fields of a moderation action.\\n\\nUsed for correcting, annotating, or clarifying action records as allowed under requirements for appeals and audit.\",\n        \"required\": []\n      },\n      \"IDiscussionboardReportReview.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"reviewer_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter reviews by the moderator/admin (reviewer) who handled the report.\\n\\nNullable for broad or unfiltered searches. Corresponds to 'reviewer_id' in 'discussionboard_report_review'.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter reviews by the moderator/admin (reviewer) who handled the report.\\n\\nNullable for broad or unfiltered searches. Corresponds to 'reviewer_id' in 'discussionboard_report_review'.\"\n              }\n            ],\n            \"description\": \"Optionally filter reviews by the moderator/admin (reviewer) who handled the report.\\n\\nNullable for broad or unfiltered searches. Corresponds to 'reviewer_id' in 'discussionboard_report_review'.\"\n          },\n          \"report_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally restrict to reviews for a specific report/event, by UUID.\\n\\nNullable to support broad audit queries. Provides targeted history for report outcomes.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally restrict to reviews for a specific report/event, by UUID.\\n\\nNullable to support broad audit queries. Provides targeted history for report outcomes.\"\n              }\n            ],\n            \"description\": \"Optionally restrict to reviews for a specific report/event, by UUID.\\n\\nNullable to support broad audit queries. Provides targeted history for report outcomes.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by the post ID reviewed in connection with the report.\\n\\nNullable; enables traceability to specific content and escalation tracking.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by the post ID reviewed in connection with the report.\\n\\nNullable; enables traceability to specific content and escalation tracking.\"\n              }\n            ],\n            \"description\": \"Optionally filter by the post ID reviewed in connection with the report.\\n\\nNullable; enables traceability to specific content and escalation tracking.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by comment ID if the review is related to a comment report.\\n\\nNullable for thread-specific audit flows.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally filter by comment ID if the review is related to a comment report.\\n\\nNullable for thread-specific audit flows.\"\n              }\n            ],\n            \"description\": \"Optionally filter by comment ID if the review is related to a comment report.\\n\\nNullable for thread-specific audit flows.\"\n          },\n          \"review_status\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"String filter for status of report review (e.g., 'resolved', 'pending', 'rejected').\\n\\nNullable, allowing for holistic or targeted queries depending on audit needs.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"String filter for status of report review (e.g., 'resolved', 'pending', 'rejected').\\n\\nNullable, allowing for holistic or targeted queries depending on audit needs.\"\n              }\n            ],\n            \"description\": \"String filter for status of report review (e.g., 'resolved', 'pending', 'rejected').\\n\\nNullable, allowing for holistic or targeted queries depending on audit needs.\"\n          },\n          \"reviewed_at_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp for earliest review date (inclusive), for time window search.\\n\\nNullable, enabling efficient audit process for compliance spans.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp for earliest review date (inclusive), for time window search.\\n\\nNullable, enabling efficient audit process for compliance spans.\"\n              }\n            ],\n            \"description\": \"ISO 8601 timestamp for earliest review date (inclusive), for time window search.\\n\\nNullable, enabling efficient audit process for compliance spans.\"\n          },\n          \"reviewed_at_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp for latest review date (inclusive), for time window search.\\n\\nNullable—enables time range queries for workflow analytics.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp for latest review date (inclusive), for time window search.\\n\\nNullable—enables time range queries for workflow analytics.\"\n              }\n            ],\n            \"description\": \"ISO 8601 timestamp for latest review date (inclusive), for time window search.\\n\\nNullable—enables time range queries for workflow analytics.\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 1,\n                \"description\": \"Max number of items to return (pagination limit).\\n\\nNullable; defaults to platform standard if omitted. Avoids excessive page sizes.\"\n              },\n              {\n                \"type\": \"null\",\n                \"minimum\": 1,\n                \"description\": \"Max number of items to return (pagination limit).\\n\\nNullable; defaults to platform standard if omitted. Avoids excessive page sizes.\"\n              }\n            ],\n            \"description\": \"Max number of items to return (pagination limit).\\n\\nNullable; defaults to platform standard if omitted. Avoids excessive page sizes.\"\n          },\n          \"offset\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 0,\n                \"description\": \"Zero-based result offset for pagination.\\n\\nNullable; supports efficient dashboard drilldown and history review.\"\n              },\n              {\n                \"type\": \"null\",\n                \"minimum\": 0,\n                \"description\": \"Zero-based result offset for pagination.\\n\\nNullable; supports efficient dashboard drilldown and history review.\"\n              }\n            ],\n            \"description\": \"Zero-based result offset for pagination.\\n\\nNullable; supports efficient dashboard drilldown and history review.\"\n          }\n        },\n        \"description\": \"Query/filter request for paginating and searching report review logs.\\n\\nUsed in moderation dashboards and admin audit panels for traceable report resolution workflows.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardReportReview\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"Pagination information: current page, results per page, total records, and page count.\\n\\nRequired for normalization and supporting dashboard UIs for report reviews.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardReportReview\"\n            },\n            \"description\": \"Array of reviewed report records for this page.\\n\\nEach entry is a detailed, atomic record—prepared for appeals, moderation metrics, or audit review.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"Paged result container for report review search/list endpoints.\\n\\nSupports efficient retrieval of review histories and moderation workflow analysis.\"\n      },\n      \"IDiscussionboardReportReview\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Globally unique identifier for this report review in 'discussionboard_report_review'.\\n\\nRequired for lookup, reference from workflow dashboards, and audit compliance.\"\n          },\n          \"report_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the abuse/spam report under review.\\n\\nCorresponds to 'id' in 'discussionboard_reports', supporting full referential trace during moderation workflow.\"\n          },\n          \"reviewer_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Moderator or admin (UUID) who reviewed the report.\\n\\nProvides traceability, accountability, and analytics for compliance.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"If applicable, the UUID of the post connected to the reviewed report.\\n\\nNull if the report is not linked to a post. Supports post-centric review flows.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"If applicable, the UUID of the post connected to the reviewed report.\\n\\nNull if the report is not linked to a post. Supports post-centric review flows.\"\n              }\n            ],\n            \"description\": \"If applicable, the UUID of the post connected to the reviewed report.\\n\\nNull if the report is not linked to a post. Supports post-centric review flows.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"If applicable, the UUID of the comment connected to the reviewed report.\\n\\nNull unless the review event targets comment-level content.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"If applicable, the UUID of the comment connected to the reviewed report.\\n\\nNull unless the review event targets comment-level content.\"\n              }\n            ],\n            \"description\": \"If applicable, the UUID of the comment connected to the reviewed report.\\n\\nNull unless the review event targets comment-level content.\"\n          },\n          \"review_status\": {\n            \"type\": \"string\",\n            \"description\": \"Resolution status for the reviewed report (e.g., 'resolved', 'rejected', 'pending').\\n\\nUsed for dashboards, reporting appeals, and analytics.\"\n          },\n          \"moderator_comment\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optional notes/justification by the reviewing moderator or admin.\\n\\nSupports audit, transparency, and appeals support in moderation workflows. Nullable if no comment provided.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optional notes/justification by the reviewing moderator or admin.\\n\\nSupports audit, transparency, and appeals support in moderation workflows. Nullable if no comment provided.\"\n              }\n            ],\n            \"description\": \"Optional notes/justification by the reviewing moderator or admin.\\n\\nSupports audit, transparency, and appeals support in moderation workflows. Nullable if no comment provided.\"\n          },\n          \"reviewed_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"ISO 8601 timestamp (reviewed_at) when the review was submitted or finalized.\\n\\nUsed for audit, analytics, and process SLAs.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"report_id\",\n          \"reviewer_id\",\n          \"review_status\",\n          \"reviewed_at\"\n        ],\n        \"description\": \"Represents a finalized review of a user report (abuse/spam).\\n\\nContains all atomic fields for reference and appeal, enabling audit/analytics as specified in moderation/reporting workflows.\"\n      },\n      \"IDiscussionboardReportReview.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"report_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID of the reported abuse/spam/violation event being reviewed.\\n\\nImplementing full audit and referential integrity to 'discussionboard_reports'. Required per moderation process.\"\n          },\n          \"reviewer_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"UUID for the reviewing moderator/admin user.\\n\\nIdentifies responsible actor for compliance tracking.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional: UUID of the post associated with this review (if any).\\n\\nNull for comment-only reports. Used to link resolution outcomes with specific content in compliance tracking.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional: UUID of the post associated with this review (if any).\\n\\nNull for comment-only reports. Used to link resolution outcomes with specific content in compliance tracking.\"\n              }\n            ],\n            \"description\": \"Optional: UUID of the post associated with this review (if any).\\n\\nNull for comment-only reports. Used to link resolution outcomes with specific content in compliance tracking.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional: UUID of the comment associated (if any) for comment-level reviews.\\n\\nNull indicates the review is not comment-centric.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional: UUID of the comment associated (if any) for comment-level reviews.\\n\\nNull indicates the review is not comment-centric.\"\n              }\n            ],\n            \"description\": \"Optional: UUID of the comment associated (if any) for comment-level reviews.\\n\\nNull indicates the review is not comment-centric.\"\n          },\n          \"review_status\": {\n            \"type\": \"string\",\n            \"description\": \"Resolution outcome for the reviewed report (e.g. 'resolved', 'pending', 'rejected').\\n\\nRequired for workflow state tracking and compliance.\"\n          },\n          \"moderator_comment\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optional notes/explanation added by reviewer to clarify outcome.\\n\\nNullable—used for transparency and workflow completeness. Recommended for detailed moderation reviews.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optional notes/explanation added by reviewer to clarify outcome.\\n\\nNullable—used for transparency and workflow completeness. Recommended for detailed moderation reviews.\"\n              }\n            ],\n            \"description\": \"Optional notes/explanation added by reviewer to clarify outcome.\\n\\nNullable—used for transparency and workflow completeness. Recommended for detailed moderation reviews.\"\n          },\n          \"reviewed_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp (ISO 8601) for when the review was conducted.\\n\\nMandated for audit, SLA, and analytics workflows.\"\n          }\n        },\n        \"required\": [\n          \"report_id\",\n          \"reviewer_id\",\n          \"review_status\",\n          \"reviewed_at\"\n        ],\n        \"description\": \"Request payload for creating a new report review event.\\n\\nRecords all state transitions for moderation workflows as outlined in platform reporting and moderation requirements.\"\n      },\n      \"IDiscussionboardReportReview.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"review_status\": {\n            \"type\": \"string\",\n            \"description\": \"Updated string for the review's status (e.g., 'resolved', 'pending', 'rejected').\\n\\nEnables post-hoc correction, annotation, or process-tracking adjustments.\"\n          },\n          \"moderator_comment\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Updated notes/justification from the moderator or admin reviewing the report.\\n\\nNullable, used for ongoing transparency as required in audit/appeals processes.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Updated notes/justification from the moderator or admin reviewing the report.\\n\\nNullable, used for ongoing transparency as required in audit/appeals processes.\"\n              }\n            ],\n            \"description\": \"Updated notes/justification from the moderator or admin reviewing the report.\\n\\nNullable, used for ongoing transparency as required in audit/appeals processes.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional UUID linking the review to a post (if applicable after update).\\n\\nNullable for workflows that adjust content linkage as part of an appeal or correction.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional UUID linking the review to a post (if applicable after update).\\n\\nNullable for workflows that adjust content linkage as part of an appeal or correction.\"\n              }\n            ],\n            \"description\": \"Optional UUID linking the review to a post (if applicable after update).\\n\\nNullable for workflows that adjust content linkage as part of an appeal or correction.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional UUID linking the review to a comment (if applicable after update).\\n\\nEnables corrections or clarifications during the appeals or moderation refinement process.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional UUID linking the review to a comment (if applicable after update).\\n\\nEnables corrections or clarifications during the appeals or moderation refinement process.\"\n              }\n            ],\n            \"description\": \"Optional UUID linking the review to a comment (if applicable after update).\\n\\nEnables corrections or clarifications during the appeals or moderation refinement process.\"\n          }\n        },\n        \"description\": \"Update payload for a report review record.\\n\\nUsed for correction, appeal documentation, or linking to new content references as allowed in post-hoc review/audit.\",\n        \"required\": []\n      },\n      \"IDiscussionboardWarning.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Warning의 고유 식별자(UUID)입니다.\\n\\n해당 경고 기록을 특정하여 검색할 때 사용됩니다. 관리/감사 흐름에서는 필요시 이 필드를 기준으로 특정 경고만 조회할 수 있습니다.\"\n          },\n          \"issued_by_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고를 발급한 담당(관리자/모더레이터) 계정의 사용자 ID(UUID)입니다.\\n\\n발급자에 의해 필터링 및 감사 로그에서 사용됩니다.\"\n          },\n          \"issued_to_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고를 받은 대상 사용자 ID(UUID)입니다.\\n\\n경고 내역을 사용자별로 필터링하거나, 유저 상세 화면에서 전체 경고내역을 조회할 때 활용됩니다.\"\n          },\n          \"warning_type\": {\n            \"type\": \"string\",\n            \"description\": \"경고 유형(예: abuse, spam 등)\\n\\n업무 분류를 목적으로 사용합니다. 관리자/모더레이터가 경고 기록을 유형별로 통계, 필터링하거나, 이후 ban 정책/자동화 규칙에 연동할 때 기준이 됩니다.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"경고가 특정 포스트에 대한 경우, 해당 포스트의 UUID입니다.\\n\\n관련 포스트 단위로 필터링하거나 경고 내역에 구체적 맥락을 부여할 때 사용됩니다.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"경고가 특정 포스트에 대한 경우, 해당 포스트의 UUID입니다.\\n\\n관련 포스트 단위로 필터링하거나 경고 내역에 구체적 맥락을 부여할 때 사용됩니다.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"경고와 관련된 코멘트가 있는 경우, 해당 코멘트의 UUID입니다.\\n\\n경고와 코멘트의 연동감사·구체적 맥락 부여에 사용됩니다.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"경고와 관련된 코멘트가 있는 경우, 해당 코멘트의 UUID입니다.\\n\\n경고와 코멘트의 연동감사·구체적 맥락 부여에 사용됩니다.\"\n          },\n          \"issued_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"경고가 발행된 UTC 시각(ISO8601 Date Time)\\n\\n경고 발급 시점 기준으로 정렬, 범위 검색 등에 사용됩니다.\"\n          },\n          \"page\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"description\": \"페이지 번호 (페이지네이션 요청용)\\n\\n대량 데이터 요청에서 결과 페이지를 제어합니다.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"페이지 번호 (페이지네이션 요청용)\\n\\n대량 데이터 요청에서 결과 페이지를 제어합니다.\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"description\": \"페이지 당 결과 수 (페이지네이션 요청용)\\n\\n기본값 또는 클라이언트 지정 값으로 제한합니다.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"페이지 당 결과 수 (페이지네이션 요청용)\\n\\n기본값 또는 클라이언트 지정 값으로 제한합니다.\"\n          }\n        },\n        \"description\": \"경고(Warnings) 목록 또는 상세 검색 요청 파라미터.\\n\\n특정 경고의 조건(발급자, 수신자, 유형, 포스트/댓글, 기간 등)으로 필터링 검색 및 페이지네이션을 위한 입력 스키마입니다. 모든 필드는 선택적이며, 필요한 조건만 전달 가능합니다.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardWarning\": {\n        \"type\": \"object\",\n        \"description\": \"경고 기록 목록의 페이지네이션 결과 컨테이너\\n\\n경고 목록을 페이지 단위로 조회할 때, 실제 데이터 목록과 전체 페이지/레코드 정보를 제공합니다. 관리/감사 UI 및 사용자 프로필 경고 내역 등에서 사용합니다.\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardWarning\"\n            },\n            \"description\": \"해당 페이지 내 경고 레코드 배열\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ]\n      },\n      \"IDiscussionboardWarning\": {\n        \"type\": \"object\",\n        \"description\": \"경고(WARNING) 단일 레코드 데이터\\n\\n모더레이터 또는 관리자에 의해 특정 유저에게 발급된 공식 경고 기록. 경고 수신자, 발급자, 발급 사유/유형 및 연관된 게시글/댓글, 실제 메시지와 타임스탬프를 제공합니다. 이 정보는 ban 근거 자료, 사용자 프로필의 경고 내역, 관리자 대시보드 등에 직접 노출됩니다.\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고 고유 식별자(UUID)\\n\\n디비 내에서 유일성을 보증하는 기본 키입니다.\"\n          },\n          \"issued_by_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고 발급자(관리자/모더레이터) 사용자의 UUID\\n\\n행위자 감사, 권한 관리, 향후 dispute 처리에서 활용합니다.\"\n          },\n          \"issued_to_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고 대상 사용자 UUID\\n\\n경고 이력 추적, 사용자 별 경고 집계 등에 사용됩니다.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"경고와 연관된 게시글 UUID (nullable)\\n\\n구체적 게시글이나 맥락 제공/감사 시 활용합니다.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"경고와 연관된 게시글 UUID (nullable)\\n\\n구체적 게시글이나 맥락 제공/감사 시 활용합니다.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"경고와 연관된 댓글 UUID (nullable)\\n\\n해당 경고와 직접 연결된 댓글이 있는 경우 참조됩니다.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"경고와 연관된 댓글 UUID (nullable)\\n\\n해당 경고와 직접 연결된 댓글이 있는 경우 참조됩니다.\"\n          },\n          \"warning_type\": {\n            \"type\": \"string\",\n            \"description\": \"경고 유형 -- abuse, spam, 기타 플랫폼 정책에 따른 유형을 저장합니다.\\n\\n관리/모더레이터가 경고 정책 및 토큰 기반 제재를 누적 또는 분류할 때 활용됩니다.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"실제 발급 메시지(설명)\\n\\n경고의 사유 또는 상세 설명으로, 사용자에게 제공되는 실제 안내 메시지입니다.\"\n          },\n          \"issued_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"경고 발급 시각(UTC 시간, ISO8601 양식)\\n\\n발급 이력 또는 기간별 통계 등에 사용합니다.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"issued_by_id\",\n          \"issued_to_id\",\n          \"warning_type\",\n          \"message\",\n          \"issued_at\"\n        ]\n      },\n      \"IDiscussionboardWarning.ICreate\": {\n        \"type\": \"object\",\n        \"description\": \"새 경고 발급 생성 요청에 필요한 필드\\n\\n플랫폼 관리자나 모더레이터가 사용자에게 신규 경고를 발급할 때 전달하는 데이터 구조입니다. 정책·자동화 시스템에서 직접 호출할 수 있습니다.\",\n        \"properties\": {\n          \"issued_by_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고를 발급하는 담당(관리자/모더레이터) 계정의 사용자ID(UUID)\\n\\n행위자 감사 등에서 활용.\"\n          },\n          \"issued_to_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"경고를 받는 사용자 ID(UUID)\\n\\n경고의 수신자입니다.\"\n          },\n          \"warning_type\": {\n            \"type\": \"string\",\n            \"description\": \"경고의 유형(예: abuse, spam 등)\\n\\n플랫폼 정책 분류, 추후 ban의 기준, 통계 등에서 활용함.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"경고 메시지(실제 설명)\\n\\n플랫폼/관리자/모더레이터가 경고의 사유를 명확히 남길 때 사용됩니다.\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"해당 경고와 연관된 게시글의 UUID(선택)\\n\\n게시글 단위로 맥락화할 때 사용, 반드시 필요하지 않음.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"해당 경고와 연관된 게시글의 UUID(선택)\\n\\n게시글 단위로 맥락화할 때 사용, 반드시 필요하지 않음.\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"해당 경고와 관련된 댓글 UUID(선택)\\n\\n코멘트 맥락 제공을 위한 선택 제출 필드.\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"해당 경고와 관련된 댓글 UUID(선택)\\n\\n코멘트 맥락 제공을 위한 선택 제출 필드.\"\n          }\n        },\n        \"required\": [\n          \"issued_by_id\",\n          \"issued_to_id\",\n          \"warning_type\",\n          \"message\"\n        ]\n      },\n      \"IDiscussionboardWarning.IUpdate\": {\n        \"type\": \"object\",\n        \"description\": \"경고 수정(메시지, 유형 등) 요청\\n\\n경고의 메시지, 유형, 참조 링크(포스트/코멘트)를 수정해야 할 때 사용합니다. 발급/수정은 감사 내역에 저장됩니다.\",\n        \"properties\": {\n          \"warning_type\": {\n            \"type\": \"string\",\n            \"description\": \"갱신할 경고 유형. (예: abuse, spam 등)\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"갱신할 경고 메시지(설명)\"\n          },\n          \"post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"수정할 게시글 reference (nullable)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"수정할 게시글 reference (nullable)\"\n          },\n          \"comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"수정할 댓글 reference (nullable)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"수정할 댓글 reference (nullable)\"\n          }\n        },\n        \"required\": [\n          \"warning_type\",\n          \"message\"\n        ]\n      },\n      \"IPageIDiscussionboardBan.IRequest\": {\n        \"type\": \"object\",\n        \"description\": \"계정 밴(Ban) 검색 및 페이지네이션 요청 구조\\n\\n특정 사용자의 밴 목록, 유형, 기간, ban 관련 경고 연동 여부 등 복수필터링·검색에 활용. 목록 API의 body 입력에 맞춥니다.\",\n        \"properties\": {\n          \"banned_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴을 받은 사용자 UUID로 정확하게 검색할 때 사용합니다.\"\n          },\n          \"banned_by_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴을 발급한 담당자 UUID\"\n          },\n          \"ban_type\": {\n            \"type\": \"string\",\n            \"description\": \"밴 유형 (mute, temp_ban, perm_ban 등 구분)\"\n          },\n          \"from_issued_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"발동 시각(이후) 필터(검색시작 구간)\"\n          },\n          \"to_issued_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"발동 시각(이전) 필터(검색종료 구간)\"\n          },\n          \"status\": {\n            \"oneOf\": [\n              {\n                \"const\": \"active\",\n                \"description\": \"밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등)\"\n              },\n              {\n                \"const\": \"expired\",\n                \"description\": \"밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등)\"\n              }\n            ],\n            \"description\": \"밴의 상태(현재 활성 중이거나 종료됨) 필터. 유효 범위: active(현재 적용 중), expired(기간 만료 등)\"\n          },\n          \"warning_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"해당 밴과 연관된 warning의 UUID (검색목적)\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"description\": \"조회 대상 페이지 번호(페이지네이션)\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"description\": \"페이지 당 레코드 수\"\n          }\n        },\n        \"required\": []\n      },\n      \"IPageIDiscussionboardBan\": {\n        \"type\": \"object\",\n        \"description\": \"계정 밴(Ban) 레코드 페이지네이션 결과\\n\\n밴 목록을 페이징 단위로 조회하며, 전체 건수와 실제 ban 데이터 배열을 포함\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardBan\"\n            },\n            \"description\": \"밴 레코드 배열\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ]\n      },\n      \"IDiscussionboardBan\": {\n        \"type\": \"object\",\n        \"description\": \"계정 밴(Ban) 단일 레코드(상세)\\n\\n관리자/모더레이터가 발급하는 platform-level 계정 밴 기록. 밴 대상(유저), 발급자, 타입(일시정지/영구/뮤트) 및 관련 warning 연결, 시작-만료 시점 등 포함됨.\\n사용자 프로필, 대시보드, 관리 UI 등에서 사용됩니다.\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴 고유 식별자(UUID)\"\n          },\n          \"banned_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴의 대상 유저 UUID\"\n          },\n          \"banned_by_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴을 수행한 담당자 UUID(Admin/Moderator)\"\n          },\n          \"warning_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"관련 warning UUID (nullable)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"관련 warning UUID (nullable)\"\n          },\n          \"ban_type\": {\n            \"type\": \"string\",\n            \"description\": \"밴 종류(enum: mute, temp_ban, perm_ban 등).\"\n          },\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"밴 사유/설명(관리자·모더레이터 직접 입력)\"\n          },\n          \"issued_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"밴 발급/시작일시(UTC) ISO 8601\"\n          },\n          \"expires_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"밴 해제 예정 시각(영구 밴의 경우 null) ISO 8601\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"밴 해제 예정 시각(영구 밴의 경우 null) ISO 8601\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"banned_user_id\",\n          \"banned_by_id\",\n          \"ban_type\",\n          \"reason\",\n          \"issued_at\"\n        ]\n      },\n      \"IDiscussionboardBan.ICreate\": {\n        \"type\": \"object\",\n        \"description\": \"밴(Ban) 신규 생성 요청 구조\\n\\n플랫폼에서 관리자/모더레이터가 계정 밴 행위를 할 때 사용. 밴 유형, 타겟, 사유, 관련 warning, 만료시점 포함됨.\",\n        \"properties\": {\n          \"banned_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴 적용 대상 사용자 UUID\"\n          },\n          \"banned_by_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"밴을 발급한 관리자/모더레이터 UUID\"\n          },\n          \"ban_type\": {\n            \"type\": \"string\",\n            \"description\": \"밴 유형: mute, temp_ban, perm_ban 등\"\n          },\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"밴의 사유/설명 (관리자/모더레이터 작성)\"\n          },\n          \"warning_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"이 밴과 직접 연관된 warning UUID (nullable)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"이 밴과 직접 연관된 warning UUID (nullable)\"\n          },\n          \"issued_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"밴 시작일시(UTC, ISO8601 양식)\"\n          },\n          \"expires_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"밴 해제/만료일시(영구 밴의 경우 null)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"밴 해제/만료일시(영구 밴의 경우 null)\"\n          }\n        },\n        \"required\": [\n          \"banned_user_id\",\n          \"banned_by_id\",\n          \"ban_type\",\n          \"reason\",\n          \"issued_at\"\n        ]\n      },\n      \"IDiscussionboardBan.IUpdate\": {\n        \"type\": \"object\",\n        \"description\": \"Ban 정보 수정 요청 구조\\n\\n관리자/모더레이터가 기 발급된 밴의 만료일 수정, 타입 정정, 설명수정 등 권한변경 목적.\",\n        \"properties\": {\n          \"ban_type\": {\n            \"type\": \"string\",\n            \"description\": \"변경할 밴 타입\"\n          },\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"변경할 이유·설명\"\n          },\n          \"expires_at\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"밴 종료일 수정(혹은 영구→일시, 일시→영구 등)\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"밴 종료일 수정(혹은 영구→일시, 일시→영구 등)\"\n          },\n          \"warning_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"수정 시 경고 연동 정보\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ],\n            \"description\": \"수정 시 경고 연동 정보\"\n          }\n        },\n        \"required\": [\n          \"ban_type\",\n          \"reason\"\n        ]\n      },\n      \"IPageIDiscussionboardNotification.IRequest\": {\n        \"type\": \"object\",\n        \"description\": \"알림(Notification) 목록/검색 요청 파라미터 구조\\n\\n사용자가 받은 알림 목록/읽음/미확인/유형별 필터, 기간별 조회 등에 사용하는 요청. 본인의 알림 목록 조회 혹은 관리자 감사시 사용됩니다.\",\n        \"properties\": {\n          \"recipient_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"알림을 받은 사용자 UUID. 본인 알림 목록에 필수 사용됨.\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"알림 유형 - reply, like, moderator_action, system_message 등 유형별 필터링용\"\n          },\n          \"is_read\": {\n            \"type\": \"boolean\",\n            \"description\": \"읽음/읽지않음 상태로 필터링\"\n          },\n          \"from_created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"생성시각 이후(FROM) 범위 검색\"\n          },\n          \"to_created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"생성시각 이전(TO) 범위 검색\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"description\": \"조회페이지(페이징)\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"description\": \"페이지당 레코드수\"\n          }\n        },\n        \"required\": []\n      },\n      \"IPageIDiscussionboardNotification\": {\n        \"type\": \"object\",\n        \"description\": \"알림(Notification) 페이지네이션 결과 컨테이너\\n\\n알림 내역을 한 페이지 단위로 조회 시 페이징 정보와 실제 알림 데이터 배열을 포함합니다.\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardNotification\"\n            },\n            \"description\": \"해당 페이지 알림 레코드 배열\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ]\n      },\n      \"IDiscussionboardNotification\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Unique identifier for the notification record, as per the discussionboard_notification table. This primary key value is used to trace, fetch, or audit notifications. Maps directly to the 'id' DB field.\"\n          },\n          \"recipient_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Foreign key referencing the recipient user. The user who receives this notification. Enforces personalization requirements and proper targeting. Normalized—no duplication of user data here.\"\n          },\n          \"related_post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the related post for which this notification applies (e.g., a reply, like, or moderation action). Null if notification is not post-specific. Strictly atomic—never contains post data.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the related post for which this notification applies (e.g., a reply, like, or moderation action). Null if notification is not post-specific. Strictly atomic—never contains post data.\"\n              }\n            ],\n            \"description\": \"Optional foreign key referencing the related post for which this notification applies (e.g., a reply, like, or moderation action). Null if notification is not post-specific. Strictly atomic—never contains post data.\"\n          },\n          \"related_comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the comment involved if relevant (e.g., a reply to a comment, or moderation of a comment). Null if notification is not comment-specific. Fully normalized.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the comment involved if relevant (e.g., a reply to a comment, or moderation of a comment). Null if notification is not comment-specific. Fully normalized.\"\n              }\n            ],\n            \"description\": \"Optional foreign key referencing the comment involved if relevant (e.g., a reply to a comment, or moderation of a comment). Null if notification is not comment-specific. Fully normalized.\"\n          },\n          \"actor_user_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the actor (who originated this notification, e.g., the liker, replier, or moderator). Null for system messages or passive actions. Maintains the business context of the event origin.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the actor (who originated this notification, e.g., the liker, replier, or moderator). Null for system messages or passive actions. Maintains the business context of the event origin.\"\n              }\n            ],\n            \"description\": \"Optional foreign key referencing the actor (who originated this notification, e.g., the liker, replier, or moderator). Null for system messages or passive actions. Maintains the business context of the event origin.\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Type string for notification classification. Maps to allowed business events: e.g., 'reply', 'like', 'moderator_action', 'system_message'. Drives how notification is presented in the UI and how preferences are handled.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"Human-readable message string, delivered to the recipient as explanation/context. The message always describes what happened, who was involved, and what content was affected. Directly from the discussionboard_notification.message column.\"\n          },\n          \"is_read\": {\n            \"type\": \"boolean\",\n            \"description\": \"Whether the notification has been marked as read by the recipient. Used by notification preference UIs, unread message counts, etc.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp when the notification was generated (ISO 8601, time zone aware). Critical for UI ordering, querying, and audit logs.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"recipient_user_id\",\n          \"type\",\n          \"message\",\n          \"is_read\",\n          \"created_at\"\n        ],\n        \"description\": \"A single notification sent to a user, tied to a post, comment, like, moderator action, or system event. Core fields are normalized according to the discussionboard_notification table and all properties are derived from the table's DB schema documentation and requirements. Contains atomic fields for all relationships, as well as notification content and read status.\\n\\nThis type allows for all queries (GET, list, audit) and powers notification UI displays as well as notification processing and compliance workflows.\"\n      },\n      \"IDiscussionboardNotification.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"recipient_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Foreign key referencing the user who should receive this notification. Must always be present and reflect a valid user. Determines notification targeting as per discussionboard_notification DB mapping.\"\n          },\n          \"related_post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the target post for notifications about specific posts (replies, likes, moderation). Null if not post-specific. 3NF-compliant.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the target post for notifications about specific posts (replies, likes, moderation). Null if not post-specific. 3NF-compliant.\"\n              }\n            ],\n            \"description\": \"Optional foreign key referencing the target post for notifications about specific posts (replies, likes, moderation). Null if not post-specific. 3NF-compliant.\"\n          },\n          \"related_comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the comment involved, if the notification concerns a comment. Null otherwise. 3NF.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key referencing the comment involved, if the notification concerns a comment. Null otherwise. 3NF.\"\n              }\n            ],\n            \"description\": \"Optional foreign key referencing the comment involved, if the notification concerns a comment. Null otherwise. 3NF.\"\n          },\n          \"actor_user_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key pointing to the actor user who triggered this notification (the person who replied, liked, or acted). Null for system/automated notifications.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional foreign key pointing to the actor user who triggered this notification (the person who replied, liked, or acted). Null for system/automated notifications.\"\n              }\n            ],\n            \"description\": \"Optional foreign key pointing to the actor user who triggered this notification (the person who replied, liked, or acted). Null for system/automated notifications.\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Business-type string to indicate notification purpose—e.g., 'reply', 'like', 'moderator_action', 'system_message'. Drives notification routing and user preference logic. Must match allowed types implemented in business logic.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"Explanatory content delivered to the notification recipient, as per notification requirements. Should clearly indicate who/what action triggered the notification. Max length and formatting are managed by application code.\"\n          }\n        },\n        \"required\": [\n          \"recipient_user_id\",\n          \"type\",\n          \"message\"\n        ],\n        \"description\": \"Request body type for creating a new notification record. Derived from DB model discussionboard_notification and requirements document (Section 3.7). Required by system-internal logic or admin UIs to deliver notifications, always normalized and mapped according to core notification DB structure.\"\n      },\n      \"IDiscussionboardNotification.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"related_post_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally update the post this notification is tied to. Null if unrelated to a post. Follows atomic/normalized structure of the DB.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally update the post this notification is tied to. Null if unrelated to a post. Follows atomic/normalized structure of the DB.\"\n              }\n            ],\n            \"description\": \"Optionally update the post this notification is tied to. Null if unrelated to a post. Follows atomic/normalized structure of the DB.\"\n          },\n          \"related_comment_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally update the related comment (for replies/mentions/moderation). Null if not applicable. Adheres to the normalized schema.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally update the related comment (for replies/mentions/moderation). Null if not applicable. Adheres to the normalized schema.\"\n              }\n            ],\n            \"description\": \"Optionally update the related comment (for replies/mentions/moderation). Null if not applicable. Adheres to the normalized schema.\"\n          },\n          \"actor_user_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally set or update the actor user who originated this notification (if changed or re-assigned).\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optionally set or update the actor user who originated this notification (if changed or re-assigned).\"\n              }\n            ],\n            \"description\": \"Optionally set or update the actor user who originated this notification (if changed or re-assigned).\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Optionally update the kind of notification (e.g., if the event type is recategorized). Must stay within allowed business values.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"Optionally update the notification's explanatory message. Used for admin corrections or localized updates.\"\n          },\n          \"is_read\": {\n            \"type\": \"boolean\",\n            \"description\": \"Allows updating read/unread status, supporting member UI flows. When set to true, notification is marked as read.\"\n          }\n        },\n        \"description\": \"Request body for updating an existing notification record. Used to mark as read, adjust content, or fix actor/post associations. Update semantics align with the business/DB design: only atomic, normalized fields and never denormalized graphs.\",\n        \"required\": []\n      },\n      \"IDiscussionboardNotificationPreference.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Filter to a specific user's notification preferences (optional). Used in admin and member UI listing/filter flows.\"\n          },\n          \"notify_reply\": {\n            \"type\": \"boolean\",\n            \"description\": \"Filter by whether user has enabled reply notifications (optional). Part of admin advanced search.\"\n          },\n          \"notify_like\": {\n            \"type\": \"boolean\",\n            \"description\": \"Filter by whether user receives like notifications. Used in admin/config flows.\"\n          },\n          \"notify_moderator_action\": {\n            \"type\": \"boolean\",\n            \"description\": \"Filter by whether moderator action notifications are enabled for the user.\"\n          },\n          \"notify_system_message\": {\n            \"type\": \"boolean\",\n            \"description\": \"Filter by whether system messages are enabled for the user.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Page number for paginated results. Used as part of all list/search requests to notification preferences.\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Number of records per page in paginated list of notification preferences. Used for UI collections, defaults managed by service layer.\"\n          }\n        },\n        \"description\": \"Request type for finding/filtering notification preferences in bulk. Used in PATCH /discussionboard/notificationPreferences and supports admin UIs, user preference management, or batch config.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardNotificationPreference\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"Pagination metadata (current page, per-page limit, total record count, etc.) as per platform-wide paging contract. Required for all paginated list responses.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardNotificationPreference\"\n            },\n            \"description\": \"List of notification preference records. Each represents a user's current notification channel/type preferences.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"Paginated list response for notification preference records. Contains collection of IDiscussionboardNotificationPreference entities and pagination context for UI and workflow management. Used in admin dashboards, settings UIs, and exports.\"\n      },\n      \"IDiscussionboardNotificationPreference\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Unique identifier for this notification preference record. Surrogate key for fetching and updating settings.\"\n          },\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"The foreign key (to discussionboard_user) indicating which user owns this set of preferences. Always unique per user.\"\n          },\n          \"notify_reply\": {\n            \"type\": \"boolean\",\n            \"description\": \"Does the user receive notifications on direct replies? Default is true; user can opt out. Used when showing reply-related events.\"\n          },\n          \"notify_like\": {\n            \"type\": \"boolean\",\n            \"description\": \"Controls whether user receives likes notifications for their posts/comments. UIs show this as an individual toggle.\"\n          },\n          \"notify_moderator_action\": {\n            \"type\": \"boolean\",\n            \"description\": \"Does user get notification about moderator actions (warns, hides, etc) that affect them? Managed per user, default is true per requirements analysis.\"\n          },\n          \"notify_system_message\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enables or disables in-app system message/announcement notifications for this user.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"user_id\",\n          \"notify_reply\",\n          \"notify_like\",\n          \"notify_moderator_action\",\n          \"notify_system_message\"\n        ],\n        \"description\": \"Entity representing a user's notification preference toggles. Maps exactly to discussionboard_notification_preference DB table. Used to control notification routing and appearance of notification settings UIs.\"\n      },\n      \"IDiscussionboardNotificationPreference.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Foreign key referencing the user for whom notification preferences are set. Only one record per user is allowed.\"\n          },\n          \"notify_reply\": {\n            \"type\": \"boolean\",\n            \"description\": \"Initial setting for reply notifications (true/false). Default and config in admin or onboarding flows.\"\n          },\n          \"notify_like\": {\n            \"type\": \"boolean\",\n            \"description\": \"Initial setting for like notifications on the user's content. Used in onboarding/config APIs.\"\n          },\n          \"notify_moderator_action\": {\n            \"type\": \"boolean\",\n            \"description\": \"Initial flag for whether the user is notified about moderator actions affecting their content.\"\n          },\n          \"notify_system_message\": {\n            \"type\": \"boolean\",\n            \"description\": \"Initial opt-in status for receiving system announcements.\"\n          }\n        },\n        \"required\": [\n          \"user_id\",\n          \"notify_reply\",\n          \"notify_like\",\n          \"notify_moderator_action\",\n          \"notify_system_message\"\n        ],\n        \"description\": \"Request body for creating a user's notification preferences. Used at onboarding or by admins in user management. All booleans required, matching the DB table, and application logic enforces per-user uniqueness.\"\n      },\n      \"IDiscussionboardNotificationPreference.IUpdate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"notify_reply\": {\n            \"type\": \"boolean\",\n            \"description\": \"Update for whether reply notifications are enabled.\"\n          },\n          \"notify_like\": {\n            \"type\": \"boolean\",\n            \"description\": \"Update for whether like notifications are enabled.\"\n          },\n          \"notify_moderator_action\": {\n            \"type\": \"boolean\",\n            \"description\": \"Update for whether moderator action notifications are enabled.\"\n          },\n          \"notify_system_message\": {\n            \"type\": \"boolean\",\n            \"description\": \"Update for whether system message notifications are enabled.\"\n          }\n        },\n        \"description\": \"Update body for patching a user's notification preference record. No user_id or id—immutable after creation. Used in member UIs or admin config panels. All fields are optional booleans; omit to leave unchanged.\",\n        \"required\": []\n      },\n      \"IDiscussionboardAuditLog.IRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"actor_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Filter results to audit logs acted on by the specified user. Enables targeted compliance review for a particular admin or moderator.\"\n          },\n          \"target_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Restrict audit logs to those that affected a specific user, e.g. all moderation actions on a particular account. Used for user-centric investigations.\"\n          },\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"Only include audit logs regarding a given action type (e.g., 'ban', 'role_change', etc.). Matches table definition.\"\n          },\n          \"entity_type\": {\n            \"type\": \"string\",\n            \"description\": \"Filter to logs affecting a specific entity type (e.g., 'user', 'comment', 'setting'). Enables entity-centric audit reviews.\"\n          },\n          \"entity_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Restrict logs to those referencing a single entity id (e.g., all logs for a particular post).\"\n          },\n          \"created_at_from\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"If set, only logs created at or after this timestamp (inclusive) are included. For audit range search.\"\n          },\n          \"created_at_to\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"If set, only logs created at or before this timestamp (inclusive) are included. For audit range search.\"\n          },\n          \"page\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Page number in paginated audit log search results.\"\n          },\n          \"limit\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Number of records to return per page in search/list.\"\n          }\n        },\n        \"description\": \"Request schema for listing/searching audit log entries, used for privileged action queries, admin dashboards, and compliance reviews. Each field matches a core DB column in discussionboard_audit_log, supporting advanced filtering and efficient audit investigation.\",\n        \"required\": []\n      },\n      \"IPageIDiscussionboardAuditLog\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\",\n            \"description\": \"Pagination metadata describing current page/limit/record totals as referenced in platform-wide paging documentation.\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardAuditLog\"\n            },\n            \"description\": \"Array of audit log records matching filter/search criteria.\"\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ],\n        \"description\": \"Paginated audit log result set. Used in compliance dashboards and reporting. Provides collection of audit log records and full pagination info.\"\n      },\n      \"IDiscussionboardAuditLog\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"Unique identifier for the audit log record. Surrogate DB key, atomically identifies each log record.\"\n          },\n          \"actor_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"User who performed the privileged action. Foreign key to discussionboard_user. Used for compliance, actor attribution, and platform security review.\"\n          },\n          \"target_user_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"User who was the target of the action, or null if system/global. Nullable, depending on audit log type. E.g., target of a ban, demotion, etc.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"User who was the target of the action, or null if system/global. Nullable, depending on audit log type. E.g., target of a ban, demotion, etc.\"\n              }\n            ],\n            \"description\": \"User who was the target of the action, or null if system/global. Nullable, depending on audit log type. E.g., target of a ban, demotion, etc.\"\n          },\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"Business type string describing the action performed (e.g. 'ban', 'role_change', 'settings_update'). Critical for reasoning about log flow and categorization in dashboards.\"\n          },\n          \"entity_type\": {\n            \"type\": \"string\",\n            \"description\": \"Type of entity impacted by this audit action (e.g., 'user', 'comment', 'setting', 'post'). Used for filtering/audit classification.\"\n          },\n          \"entity_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable reference to the specific entity affected (user, post, comment, etc). Used to trace all changes to a specific object.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Nullable reference to the specific entity affected (user, post, comment, etc). Used to trace all changes to a specific object.\"\n              }\n            ],\n            \"description\": \"Nullable reference to the specific entity affected (user, post, comment, etc). Used to trace all changes to a specific object.\"\n          },\n          \"action_detail\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optional field storing additional information about the action (diffs, old/new values, rationale, etc.). Greatly aids in compliance and incident resolution; not always present for simple actions.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optional field storing additional information about the action (diffs, old/new values, rationale, etc.). Greatly aids in compliance and incident resolution; not always present for simple actions.\"\n              }\n            ],\n            \"description\": \"Optional field storing additional information about the action (diffs, old/new values, rationale, etc.). Greatly aids in compliance and incident resolution; not always present for simple actions.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Timestamp (ISO 8601, UTC-with-zone) when the action was performed, for audit traceability and compliance. Always populated.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"actor_user_id\",\n          \"action_type\",\n          \"entity_type\",\n          \"created_at\"\n        ],\n        \"description\": \"Single privileged action audit log, normalized 1:1 with discussionboard_audit_log table. Provides complete compliance traceability for all admin/moderator actions affecting users, entities or system configuration. Used in all reporting and audit flows.\"\n      },\n      \"IDiscussionboardAuditLog.ICreate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"actor_user_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"ID of user (admin/mod) performing the action to be logged (actor). Always required. Used for entity attribution in audit trail per schema.\"\n          },\n          \"target_user_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"User affected by the action. Set if the action targets a specific user; null for global/system actions.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"User affected by the action. Set if the action targets a specific user; null for global/system actions.\"\n              }\n            ],\n            \"description\": \"User affected by the action. Set if the action targets a specific user; null for global/system actions.\"\n          },\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"Action type (e.g. 'ban', 'role_change', 'setting_update', etc). Populates action_type DB field and is the primary audit classification.\"\n          },\n          \"entity_type\": {\n            \"type\": \"string\",\n            \"description\": \"The entity type impacted, such as 'user', 'post', 'comment', 'setting'. Enables polymorphic audit review.\"\n          },\n          \"entity_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional reference to affected entity, if applicable (user/post/comment). Null where system/global.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"Optional reference to affected entity, if applicable (user/post/comment). Null where system/global.\"\n              }\n            ],\n            \"description\": \"Optional reference to affected entity, if applicable (user/post/comment). Null where system/global.\"\n          },\n          \"action_detail\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"Optional string describing specifics of the change (e.g., old/new values, human notes). Used for compliance reporting and deep trace investigations.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"Optional string describing specifics of the change (e.g., old/new values, human notes). Used for compliance reporting and deep trace investigations.\"\n              }\n            ],\n            \"description\": \"Optional string describing specifics of the change (e.g., old/new values, human notes). Used for compliance reporting and deep trace investigations.\"\n          }\n        },\n        \"required\": [\n          \"actor_user_id\",\n          \"action_type\",\n          \"entity_type\"\n        ],\n        \"description\": \"Request body for creating a privileged action audit log entry. Used internally after sensitive workflows. Optional fields provide richer context for forensic review. Fully normalized and traceable. One entry per action; always references the performing user, type, and entity context per compliance requirements.\"\n      },\n      \"IDiscussionboardAuditLog.IUpdate\": {\n        \"type\": \"object\",\n        \"description\": \"discussionboardAuditLog 업데이트 요청을 위한 객체입니다.\\n\\n이 타입은 감사 로그(entry) 레코드의 수정 가능한 필드를 명확히 정의해줍니다. 주로 플랫폼 운영자(관리자 및 모더레이터)가 기존의 감사 로그 레코드(annotation, audit detail 등)에 코멘트 추가나 메타데이터 정정 작업을 할 때 사용합니다.\\n\\nPrisma discussionboard_audit_log 테이블의 컬럼명 및 주석에 기반하여 모든 속성을 정의합니다. 불변 속성(예: actor_user_id, created_at 등)은 업데이트되지 않으며, 수정 가능한 일부 필드(action_detail 등)만 포함됩니다.\\n\\n변경내용은 반드시 audit trail에 별도로 남겨야 하며, 주요 컴플라이언스 요구사항을 충족하도록 반영되어야 합니다.\",\n        \"properties\": {\n          \"action_type\": {\n            \"type\": \"string\",\n            \"description\": \"Prisma discussionboard_audit_log 테이블의 action_type 컬럼에 해당합니다.\\n\\n수정 가능한 경우, 감사 행위의 유형(예: ban, role_change, settings_update 등) 문자열을 재정의 할 수 있습니다. 일반적으로 타입 변경은 드물고, 주로 노트/코멘트 보정에 사용됩니다. 필요한 경우에만 수정하세요.\"\n          },\n          \"entity_type\": {\n            \"type\": \"string\",\n            \"description\": \"감사 로그의 대상이 되는 엔티티의 타입(예: user, post, comment, setting 등)입니다. discussionboard_audit_log의 entity_type 컬럼에 해당하며, 해당 엔티티가 무엇인지 명확히 구분해 기록하는데 사용됩니다.\"\n          },\n          \"entity_id\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"uuid\",\n                \"description\": \"감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\\n\\n특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우 null이 허용됩니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"uuid\",\n                \"description\": \"감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\\n\\n특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우 null이 허용됩니다.\"\n              }\n            ],\n            \"description\": \"감사 대상 엔티티의 고유 식별자. discussionboard_audit_log의 entity_id 컬럼에 해당합니다.\\n\\n특정 엔티티(post, comment 등)에 대한 감사 로그라면 해당 엔티티의 UUID가 입력되며, 엔티티가 없는 경우 null이 허용됩니다.\"\n          },\n          \"action_detail\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\\n\\ndiscussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role: member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\\n\\nnull 또는 빈 문자열일 수 있습니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\\n\\ndiscussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role: member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\\n\\nnull 또는 빈 문자열일 수 있습니다.\"\n              }\n            ],\n            \"description\": \"감사 대상에 대한 메타정보 및 상세 변경사항 설명을 위한 자유 입력 필드입니다.\\n\\ndiscussionboard_audit_log의 action_detail 컬럼에 해당하며, 예를 들어 'old_role: member, new_role: moderator' 등 역할/설정 변경 항목에 대한 노트 저장에 사용됩니다.\\n\\nnull 또는 빈 문자열일 수 있습니다.\"\n          }\n        },\n        \"required\": []\n      },\n      \"IDiscussionboardPlatformSetting.IRequest\": {\n        \"type\": \"object\",\n        \"description\": \"플랫폼 환경설정 목록/검색 요청 타입입니다.\\n\\n이 타입은 discussionboard_platform_setting 테이블의 설정 레코드를 검색, 정렬 및 페이징하려는 관리자(관리자 전용)를 위한 필터, 정렬, 페이징 옵션을 제공합니다. 검색 필드로는 name, type, value, updated_at 등이 있습니다. 관리용 UI의 검색 바, 상세 필터 등에서 사용합니다.\\n\\n구현 시 유저는 name이나 type, value, updated_at 범위 등으로 검색할 수 있으며, 대량 데이터셋을 효율적으로 조회할 수 있도록 페이징 파라미터도 제공합니다.\",\n        \"properties\": {\n          \"name\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다.\"\n              }\n            ],\n            \"description\": \"플랫폼 환경설정의 이름(name) 컬럼으로, 부분/전체 일치 텍스트 검색에 사용됩니다.\"\n          },\n          \"type\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\\n\\n예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\\n\\n예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다.\"\n              }\n            ],\n            \"description\": \"플랫폼 환경설정 타입(type) 컬럼과 연결됩니다.\\n\\n예: 'boolean', 'int', 'string' 등의 설정 타입에 대한 필터, 검색 옵션입니다.\"\n          },\n          \"value\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"description\": \"플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\\n\\n예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"description\": \"플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\\n\\n예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다.\"\n              }\n            ],\n            \"description\": \"플랫폼 환경설정 값(value) 컬럼 기준으로 검색할 때 사용합니다.\\n\\n예를 들어 'true' 혹은 '50' 등 원하는 값이 일치하는 엔트리만 필터링할 때 입력합니다.\"\n          },\n          \"updated_from\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"검색 범위 필드입니다. updated_at >= updated_from.\\n\\n특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"검색 범위 필드입니다. updated_at >= updated_from.\\n\\n특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용.\"\n              }\n            ],\n            \"description\": \"검색 범위 필드입니다. updated_at >= updated_from.\\n\\n특정 시점 이후로 갱신된 설정만 조회하는 경우에 사용합니다. ISO 8601 형식으로 입력되어야 하며 null 허용.\"\n          },\n          \"updated_to\": {\n            \"oneOf\": [\n              {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"검색 범위 필드입니다. updated_at <= updated_to.\\n\\n특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다.\"\n              },\n              {\n                \"type\": \"null\",\n                \"format\": \"date-time\",\n                \"description\": \"검색 범위 필드입니다. updated_at <= updated_to.\\n\\n특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다.\"\n              }\n            ],\n            \"description\": \"검색 범위 필드입니다. updated_at <= updated_to.\\n\\n특정 시점 이전에 갱신된 설정만 조회하는 경우에 사용합니다.\"\n          },\n          \"page\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 1,\n                \"description\": \"페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주.\"\n              },\n              {\n                \"type\": \"null\",\n                \"minimum\": 1,\n                \"description\": \"페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주.\"\n              }\n            ],\n            \"description\": \"페이지네이션: 조회할 페이지 번호(1부터 시작). 미 입력시 1로 간주.\"\n          },\n          \"limit\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 1,\n                \"description\": \"페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용).\"\n              },\n              {\n                \"type\": \"null\",\n                \"minimum\": 1,\n                \"description\": \"페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용).\"\n              }\n            ],\n            \"description\": \"페이지네이션: 페이지 당 결과 제한 갯수(기본값 100, 최대값 시스템 정책 적용).\"\n          }\n        },\n        \"required\": []\n      },\n      \"IPageIDiscussionboardPlatformSetting\": {\n        \"type\": \"object\",\n        \"description\": \"discussionboard_platform_setting의 페이징 컬렉션 응답 타입입니다.\\n\\n이 타입은 플랫폼 환경설정 레코드 검색 시 결과 목록 및 페이지네이션 정보를 함께 묶어 반환합니다. 일반적으로 관리자 UI에서 환경설정 목록을 페이지 단위로 제공할 때 사용합니다.\\n\\n관계형 데이터 조회, 대량 설정 데이터 핸들링, 또는 엑셀 다운로드 등에서 활용됩니다.\",\n        \"properties\": {\n          \"pagination\": {\n            \"$ref\": \"#/components/schemas/IPage.IPagination\"\n          },\n          \"data\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IDiscussionboardPlatformSetting\"\n            }\n          }\n        },\n        \"required\": [\n          \"pagination\",\n          \"data\"\n        ]\n      },\n      \"IDiscussionboardPlatformSetting\": {\n        \"type\": \"object\",\n        \"description\": \"discussionboard_platform_setting 테이블의 단일 환경설정 엔트리 구조입니다.\\n\\n이 타입은 각 플랫폼 환경설정 레코드를 의미하며, 설정의 식별자, 이름, 값, 타입, 갱신 일시 컬럼 등 모든 주요 정보를 포함합니다. 관리자가 UI나 API에서 단일 환경설정의 상세 정보를 조회(읽기), 업데이트(쓰기) 또는 삭제시, 그리고 검색 결과 리스트용 아이템에 사용됩니다.\\n\\ndescription(설명)은 별도에 없지만, 각 컬럼의 역할과 사용처를 Prisma schema의 주석에 기반하여 상세하게 기술했습니다.\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"discussionboard_platform_setting의 기본 키. 각 환경설정 레코드를 고유하게 식별하는 UUID입니다.\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"환경설정 이름. 플랫폼 전체에서 단일하게 유니크하며, 어떤 기능/정책/설정인지 식별합니다.\\n\\n예: 'EnableModerationQueue', 'MaxPostAttachments' 등\"\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"description\": \"설정 값. 반드시 문자열(text)로 저장되며, 값의 의미/타입 판별은 'type' 필드를 참고하여 해석해야 합니다.\\n\\n예: 'true', '123', '사용중' 등\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"env 값의 타입 구분자. 값의 해석을 위한 메타정보로써 보통 'boolean', 'int', 'string' 등의 값으로 표시됩니다. UI/백엔드 상 검증, 파싱에 사용합니다.\"\n          },\n          \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"마지막 수정 시각. 플랫폼 환경설정 변경의 트래킹, 이력 관리, 정렬 및 필터에 활용합니다. ISO8601 타임스탬프.\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"name\",\n          \"value\",\n          \"type\",\n          \"updated_at\"\n        ]\n      },\n      \"IDiscussionboardPlatformSetting.ICreate\": {\n        \"type\": \"object\",\n        \"description\": \"플랫폼 환경설정 신규 생성 요청 바디 타입입니다.\\n\\ndiscussionboard_platform_setting 테이블에 레코드 추가시 필요한 모든 필드(이름, 값, 타입 등)가 정의되어 있습니다. 주로 관리자 전용 UI/관리패널에서 새 설정 추가시 API에 사용합니다.\\n\\n모든 컬럼은 반드시 유효하게(중복 없음, 데이터 타입 일치 등) 입력되어야 합니다. 생성 시 updated_at은 시스템에서 자동 지정됩니다.\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"생성할 환경설정의 이름. 반드시 유일해야 하며, 알기 쉽고 명확해야 합니다. 예: 'EnableModerationQueue', 'PostImageMaxSize' 등\"\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"description\": \"환경설정의 값. 항상 문자열로 저장해야 하며, 실제 저장/적용시에는 type에 맞게 파싱 혹은 활용합니다. 예: 'false', '200' 등\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"환경설정 값의 타입. 값이 실제로 boolean인지, 정수, 문자열인지 구분해서 저장합니다. 예: 'boolean', 'int', 'string' 등\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"value\",\n          \"type\"\n        ]\n      },\n      \"IDiscussionboardPlatformSetting.IUpdate\": {\n        \"type\": \"object\",\n        \"description\": \"플랫폼 환경설정 변경(수정) 요청 객체 타입입니다.\\n\\n관리자가 기존 환경설정 레코드(이름, 값, 타입 등)를 수정할 때 사용합니다. discussionboard_platform_setting 테이블 기반이며, 일부 필드만(주로 value, type) 갱신할 수도 있습니다. 필드는 선택적이지만, 수정 대상 컬럼명에 맞게 정확히 전달해야 합니다. updated_at은 자동 관리됩니다.\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"변경할 환경설정의 이름(필요시). 관리 정책 상 이름 변경은 드물지만 지원 가능하도록 허용합니다.\"\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"description\": \"변경할 설정의 값. 항상 문자열로 입력 및 저장됩니다.\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"설정 값의 타입. 'boolean', 'int', 'string' 등으로 값의 해석을 위해 함께 변경할 수 있습니다.\"\n          }\n        },\n        \"required\": []\n      },\n      \"IDeleteResult\": {\n        \"type\": \"object\",\n        \"description\": \"데이터 삭제 또는 삭제시도 후 반환되는 표준 응답 객체입니다.\\n\\n이 타입은 주로 삭제(soft/hard delete) 후 결과 메시지 또는 성공/실패 플래그를 전달합니다. 백엔드 API 전반(관리용, 데이터 삭제 엔드포인트 등)에서 재사용할 수 있도록 설계되었습니다.\",\n        \"properties\": {\n          \"success\": {\n            \"type\": \"boolean\",\n            \"description\": \"삭제 작업의 성공 여부. true면 삭제 완료, false면 삭제 실패/미수행 등 의미.\"\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"삭제 결과 메시지. 성공시에도 간단한 안내 메시지(예: '삭제 완료'), 실패 혹은 조건부 불가(예: '참조된 데이터가 있어 삭제 불가') 등도 포함합니다.\"\n          }\n        },\n        \"required\": [\n          \"success\",\n          \"message\"\n        ]\n      }\n    }\n  },\n  \"x-samchon-emended-v4\": true\n}",
      "src/providers/jwtDecode.ts": "export function jwtDecode(token: string): { id: string; type: string } {\n  try {\n    const base64Url = token.split(\".\")[1];\n    if (!base64Url) throw new Error(\"Invalid token format\");\n\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split(\"\")\n        .map((c) => `%${c.charCodeAt(0).toString(16).padStart(2, \"0\")}`)\n        .join(\"\"),\n    );\n\n    const decoded = JSON.parse(jsonPayload) as unknown;\n\n    if (\n      typeof decoded === \"object\" &&\n      decoded !== null &&\n      typeof (decoded as any).id === \"string\" &&\n      typeof (decoded as any).type === \"string\"\n    ) {\n      return {\n        id: (decoded as { id: string }).id,\n        type: (decoded as { type: string }).type,\n      };\n    }\n\n    throw new Error(\"Invalid token payload\");\n  } catch {\n    throw new Error(\"Failed to decode JWT token\");\n  }\n}\n"
    },
    "reason": "Step to the interface designing after DB schema generation",
    "step": 0,
    "created_at": "2025-07-15T05:25:32.463Z",
    "completed_at": "2025-07-15T05:32:32.083Z"
  }
]