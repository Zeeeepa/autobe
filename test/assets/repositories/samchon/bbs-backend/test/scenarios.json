[
  {
    "endpoint": {
      "path": "/core/categories",
      "method": "patch"
    },
    "draft": "Test fetching a paginated and filtered list of categories. Ensure the API returns the correct subset of categories given specific search criteria, pagination parameters (limit and offset), and sorting fields. Validate that the result respects the total count and pagination metadata. Also, test boundary conditions such as zero results, first/last page behaviors, and invalid pagination input (e.g., negative page, huge limit).",
    "functionName": "test_list_categories_with_filters_and_pagination",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create several categories with diverse data to provide meaningful filter, sort, and pagination results."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories",
      "method": "patch"
    },
    "draft": "Test that listing categories with a filter term excluding all records returns an empty array with correct pagination metadata.",
    "functionName": "test_list_categories_with_no_matching_results",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create at least one known category to demonstrate that no results returned is due to the filter, not empty DB."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories",
      "method": "patch"
    },
    "draft": "Verify error handling when supplying invalid filter, sort, or pagination parameters, such as unknown sort fields or non-numeric values.",
    "functionName": "test_list_categories_with_invalid_query_parameters",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "get"
    },
    "draft": "Test retrieving a specific category by ID. Ensure the retrieved data matches exactly what was created (name, description, etc.) and that the endpoint returns all expected fields.",
    "functionName": "test_get_category_by_id_success",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category to retrieve by its ID in this scenario."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "get"
    },
    "draft": "Test retrieving a category with a nonexistent ID. Ensure the API returns the appropriate not-found error.",
    "functionName": "test_get_category_by_nonexistent_id",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/categories",
      "method": "post"
    },
    "draft": "Test successful creation of a new category with valid, unique name and description. Ensure the returned data reflects what was provided and that the new category is present in listings.",
    "functionName": "test_create_category_with_valid_data",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/categories",
      "method": "post"
    },
    "draft": "Test creation failure when attempting to create two categories with the same name (test uniqueness constraint on category name). Expect a conflict or validation error for the second attempt.",
    "functionName": "test_create_category_with_duplicate_name",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "First creates a category with a given name to set up the uniqueness violation for the second creation attempt."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories",
      "method": "post"
    },
    "draft": "Test failure on category creation with invalid data, such as missing required fields or name exceeding allowed length. Ensure validation errors are clear and descriptive.",
    "functionName": "test_create_category_with_invalid_data",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "put"
    },
    "draft": "Test successfully updating an existing category's name and description. Ensure updated data matches the request and appears correctly when the category is re-fetched.",
    "functionName": "test_update_category_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category which will then be updated in this scenario."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "put"
    },
    "draft": "Test updating a category to a name that already exists in another category. Ensure the API returns a uniqueness/validation error.",
    "functionName": "test_update_category_with_duplicate_name",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create two categories so the first can be updated to the second's name, testing name uniqueness constraint."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "put"
    },
    "draft": "Test update failure when using invalid inputs, such as empty name or overly long description. API should return clear validation errors.",
    "functionName": "test_update_category_with_invalid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category that will be the target for the invalid update request."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "put"
    },
    "draft": "Test update with a nonexistent category ID. The API should return a not-found or error status.",
    "functionName": "test_update_category_with_nonexistent_id",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "delete"
    },
    "draft": "Test successful deletion of a category. Ensure the category is removed and cannot be retrieved after deletion, and that the returned confirmation matches specification.",
    "functionName": "test_delete_category_success",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category to be deleted during this scenario."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "delete"
    },
    "draft": "Test deletion failure for a nonexistent category. Ensure the API responds with a clear not-found or relevant error message.",
    "functionName": "test_delete_category_with_nonexistent_id",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/categories/{id}",
      "method": "delete"
    },
    "draft": "Test idempotency and safety by attempting to delete the same category twice. The second request should return an error or indicate already deleted, not success.",
    "functionName": "test_delete_category_idempotency",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category to be deleted twice to verify error/idempotency of delete operation."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles",
      "method": "patch"
    },
    "draft": "Test listing all user roles with default (no filter) settings for a new admin user. Should return paginated results with expected fields.",
    "functionName": "test_list_user_roles_default_no_filter",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to be able to access role management features"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles",
      "method": "patch"
    },
    "draft": "Test filtering user roles list by specific role name, verifying only matching roles are returned.",
    "functionName": "test_list_user_roles_filtered_by_name",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create a user role with a specific name for filtering test"
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to perform the query"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles",
      "method": "patch"
    },
    "draft": "Test accessing the user roles list with a non-admin user, ensuring the endpoint enforces role-based access and returns unauthorized or forbidden error.",
    "functionName": "test_list_user_roles_with_non_admin_user",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a normal (non-admin) user to test permission enforcement"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "get"
    },
    "draft": "Test retrieving details of a specific user role by ID. Verify that the returned role matches the created one and contains all expected fields.",
    "functionName": "test_get_user_role_by_id_valid",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create a user role and get its ID for the retrieval test"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "get"
    },
    "draft": "Test getting a user role by an invalid/nonexistent ID and verify the system returns a not found error or appropriate response.",
    "functionName": "test_get_user_role_by_id_not_found",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to access the endpoint"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles",
      "method": "post"
    },
    "draft": "Test creating a new user role with a unique name and valid description. Ensure the role is created and details match the input.",
    "functionName": "test_create_user_role_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to allow role creation"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles",
      "method": "post"
    },
    "draft": "Test failure to create a user role with a name that duplicates an existing role's name, checking for a conflict or duplicate error response.",
    "functionName": "test_create_user_role_with_duplicate_name",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user account"
      },
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create the first user role with a specific name to establish the duplicate"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles",
      "method": "post"
    },
    "draft": "Test creating a user role with missing required fields (e.g., name or description) and validate that the system rejects the request with validation error.",
    "functionName": "test_create_user_role_with_missing_fields",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to authorize the operation"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "put"
    },
    "draft": "Test updating an existing user role's name and description. Verify that the updated role reflects the changes.",
    "functionName": "test_update_user_role_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create initial user role to update"
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to perform update"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "put"
    },
    "draft": "Test attempting to update a user role that does not exist. The system should return not found or error response.",
    "functionName": "test_update_user_role_not_found",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to access the endpoint"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "put"
    },
    "draft": "Test updating a user role with invalid data (e.g., empty name). Verify that the validation prevents the change and meaningful error is returned.",
    "functionName": "test_update_user_role_with_invalid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create a user role for update validation"
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user for update permission"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "delete"
    },
    "draft": "Test deleting an existing user role by ID. Verify that the role is removed or marked as deleted and cannot be fetched subsequently.",
    "functionName": "test_delete_user_role_by_id",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create user role to be deleted"
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to perform deletion"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/userRoles/{id}",
      "method": "delete"
    },
    "draft": "Test deleting a non-existent user role and verify that the system returns a not found/error response.",
    "functionName": "test_delete_user_role_not_found",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an admin user to attempt deletion"
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "patch"
    },
    "draft": "Test retrieving a list of posts with default parameters. Verify default pagination and that only posts accessible to the current user's role are shown. Ensure proper structure and metadata are returned.",
    "functionName": "test_list_posts_with_default_pagination",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to act as the context for post listing (role/permissions may affect visibility)."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create several posts to ensure non-empty result set."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "patch"
    },
    "draft": "Test listing posts with custom pagination parameters (e.g., page size, offset). Ensure correct subset is returned and pagination metadata reflects the requested window.",
    "functionName": "test_list_posts_with_custom_pagination_and_offset",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who will perform the search."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create more posts than the page size to fill multiple pages."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "patch"
    },
    "draft": "Test filtering posts by category ID and confirm only posts with that category are returned.",
    "functionName": "test_list_posts_with_category_filter",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category to assign to test posts."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create posts in different categories for filter coverage."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "patch"
    },
    "draft": "Test searching posts with a specific keyword, ensuring partial and case-insensitive matching as defined by the business logic.",
    "functionName": "test_search_posts_by_keyword",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user for context."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create posts with and without the keyword in the title/content."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "patch"
    },
    "draft": "Test that an unauthorized or unauthenticated user is denied access to post listings if business rules require authentication; verify error or empty list response as defined.",
    "functionName": "test_list_posts_unauthorized_access",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "get"
    },
    "draft": "Test retrieving detail of a published post by its ID as a regular user. Ensure all permitted fields are returned and sensitive/internal ones are excluded.",
    "functionName": "test_get_post_detail_as_regular_user",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a regular user."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to be retrieved."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "get"
    },
    "draft": "Test accessing a post that does not exist. Ensure proper not found or error response is returned with clear messaging.",
    "functionName": "test_get_post_detail_not_found",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who will attempt to access a non-existent post."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "get"
    },
    "draft": "Test retrieving a post as a user who does not have permission to view it (e.g., restricted post or post in a private category). Ensure access is denied or restricted fields are excluded, per business logic.",
    "functionName": "test_get_post_detail_insufficient_permission",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user with insufficient permissions."
      },
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a private/restricted category."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post in the restricted category."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "post"
    },
    "draft": "Test creating a new post with valid title, content, and categoryId. Verify full post details are returned and fields are saved correctly in the database.",
    "functionName": "test_create_post_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to make the post."
      },
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category to associate with the new post."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "post"
    },
    "draft": "Test creating a post with missing or invalid required fields. Ensure validation errors are properly returned for missing title, content, or categoryId.",
    "functionName": "test_create_post_with_missing_or_invalid_fields",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to try creating the post."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts",
      "method": "post"
    },
    "draft": "Test creating a post while unauthenticated. Ensure the API denies the request or returns an unauthorized error/message.",
    "functionName": "test_create_post_unauthenticated",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "put"
    },
    "draft": "Test updating an existing post's content and title as the post owner. Verify changes are reflected and all updateable fields save correctly.",
    "functionName": "test_update_post_as_owner_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user as post owner."
      },
      {
        "endpoint": {
          "path": "/core/categories",
          "method": "post"
        },
        "purpose": "Create a category for post update testing."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to be updated."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "put"
    },
    "draft": "Test updating a post as a user who is not the owner or does not have permission. Verify error or forbidden response is returned and no changes are made.",
    "functionName": "test_update_post_without_permission",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a non-owner user."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post with a different owner."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "put"
    },
    "draft": "Test updating a post with invalid data (e.g., too short title, missing required fields). Verify validation errors are returned and post remains unchanged.",
    "functionName": "test_update_post_with_invalid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user and create a post for negative test."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post as the test subject."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "delete"
    },
    "draft": "Test deleting an existing post as the owner. Confirm successful deletion response and verify post no longer accessible via listing or detail endpoints.",
    "functionName": "test_delete_post_as_owner",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user as the post owner."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to be deleted."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "delete"
    },
    "draft": "Test deleting a post as a user who is not the owner or lacks permission. Verify forbidden or error response, and that the post remains available.",
    "functionName": "test_delete_post_without_permission",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user without permission."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post owned by someone else."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/posts/{id}",
      "method": "delete"
    },
    "draft": "Test deleting a post that does not exist. Confirm appropriate not found or error response is returned.",
    "functionName": "test_delete_post_not_found",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who will attempt to delete a nonexistent post."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments",
      "method": "patch"
    },
    "draft": "Verify a user can retrieve a list of comments for a specific post, including pagination and filtering by userId. Ensure the response contains only comments matching the input filters, and pagination metadata is correct.",
    "functionName": "test_list_comments_by_post_with_pagination",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to author comments."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to attach comments."
      },
      {
        "endpoint": {
          "path": "/posts/comments",
          "method": "post"
        },
        "purpose": "Add multiple comments (possibly from different users) to the post for listing test."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments",
      "method": "patch"
    },
    "draft": "Test listing comments with an invalid postId filter. Expect that the result is an empty page or an error indicating the post does not exist.",
    "functionName": "test_list_comments_with_invalid_post_id",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user for context."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "get"
    },
    "draft": "Fetch detailed comment info by id for an existing comment. The response should include content, author, and related post references, excluding deleted comments.",
    "functionName": "test_get_comment_detail_success",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to create and own the comment."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to attach the comment."
      },
      {
        "endpoint": {
          "path": "/posts/comments",
          "method": "post"
        },
        "purpose": "Create a comment and extract its ID."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "get"
    },
    "draft": "Attempt to retrieve comment detail using a non-existent comment ID. The response should indicate not found or equivalent error.",
    "functionName": "test_get_comment_detail_not_found",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user for valid access context."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments",
      "method": "post"
    },
    "draft": "Create a new comment on a post with valid content. Confirm the comment is successfully created, attached to the correct post, with all expected metadata present in the response.",
    "functionName": "test_create_comment_on_post_with_valid_content",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who will author the comment."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post for the comment to reference."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments",
      "method": "post"
    },
    "draft": "Attempt to create a comment with missing required content field. The request should be rejected with a validation error indicating the missing content.",
    "functionName": "test_create_comment_missing_content_field",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user for comment creation context."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to attach the (invalid) comment."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments",
      "method": "post"
    },
    "draft": "Attempt to create a comment on a non-existent post. Expect a not-found error as the postId does not exist in the database.",
    "functionName": "test_create_comment_on_nonexistent_post",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user for comment creation context."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "put"
    },
    "draft": "Update an existing comment's content. After the update, the comment's new content should be returned and all metadata (author, timestamps) retained.",
    "functionName": "test_update_comment_content_success",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to create and own the comment."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to reference in the comment."
      },
      {
        "endpoint": {
          "path": "/posts/comments",
          "method": "post"
        },
        "purpose": "Create a comment to update."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "put"
    },
    "draft": "Attempt to update a comment the user does not own. The system should reject the update with an appropriate permission-denied error.",
    "functionName": "test_update_comment_content_permission_denied",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register User A that owns the comment."
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register User B who will attempt the unauthorized update."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to reference in the comment."
      },
      {
        "endpoint": {
          "path": "/posts/comments",
          "method": "post"
        },
        "purpose": "User A creates a comment to be updated."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "put"
    },
    "draft": "Try to update a comment after it has been soft-deleted. The system should prevent modifications and return a relevant error.",
    "functionName": "test_update_comment_after_deletion",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to create and delete the comment."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to reference in the comment."
      },
      {
        "endpoint": {
          "path": "/posts/comments",
          "method": "post"
        },
        "purpose": "Create a comment to be deleted and then updated."
      },
      {
        "endpoint": {
          "path": "/posts/comments/{id}",
          "method": "delete"
        },
        "purpose": "Soft-delete the comment before attempting update."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "delete"
    },
    "draft": "Soft-delete an existing comment and verify it is no longer returned in comment listings or detail fetches.",
    "functionName": "test_soft_delete_comment_success",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to own the comment."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post for the comment."
      },
      {
        "endpoint": {
          "path": "/posts/comments",
          "method": "post"
        },
        "purpose": "Create a comment for deletion."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/posts/comments/{id}",
      "method": "delete"
    },
    "draft": "Attempt to delete a comment that does not exist. The system should return a not found or equivalent error.",
    "functionName": "test_soft_delete_nonexistent_comment",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user to provide context for deletion attempt."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes",
      "method": "patch"
    },
    "draft": "Test retrieving a paginated list of votes filtered by userId and postId to ensure the filtering, sorting, and pagination work as expected. Scenario includes authenticating as a valid user, casting multiple votes on various posts, and retrieving votes with different filter conditions (filter by user, by post, apply different sorting). Confirm response only contains relevant votes and pagination metadata is correct.",
    "functionName": "test_list_votes_with_filter_and_pagination",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who can cast votes and be used for filtering."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create posts that will be voted on and used for filtering."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast votes to be retrieved in the listing scenario."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes",
      "method": "patch"
    },
    "draft": "Verify that requesting a page past the available results in a paginated vote list returns an empty array with correct pagination metadata.",
    "functionName": "test_list_votes_pagination_empty_result",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user for controlled testing of the votes list."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes/{id}",
      "method": "get"
    },
    "draft": "Retrieve detailed information for a specific vote by its ID, checking that the returned data matches the expected fields (user, post or comment target, value, timestamps, etc.) and that access rules are enforced (voter and admin can view, others are denied if access control enforced by business rules).",
    "functionName": "test_get_vote_by_id_as_owner",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register the user who will cast and retrieve the vote."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post to receive the vote."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast a vote to obtain the ID for retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes/{id}",
      "method": "get"
    },
    "draft": "Attempt to retrieve a vote with an invalid (nonexistent or malformed) vote ID and ensure the API returns a not found or validation error.",
    "functionName": "test_get_vote_by_invalid_id",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/votes/votes",
      "method": "post"
    },
    "draft": "Test successfully casting an upvote (+1) on a post by a valid, authenticated user. Ensure the returned vote record is correct and linked to the appropriate user and post, validating business constraint that a user cannot upvote the same post multiple times without updating the previous vote.",
    "functionName": "test_create_vote_for_post_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who will cast the vote."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post that will be voted on."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes",
      "method": "post"
    },
    "draft": "Test attempting to vote on a nonexistent post or comment, ensuring the API responds with a not found error and does not create the vote record.",
    "functionName": "test_create_vote_for_nonexistent_target",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user who will attempt the invalid vote."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes",
      "method": "post"
    },
    "draft": "Test that a user cannot cast multiple votes of the same type on the same target without updating the old vote (i.e., should enforce unique (user, target) constraint or overwrite). Attempt to cast two upvotes to same post and confirm only one is recorded or the second request overwrites the first.",
    "functionName": "test_create_duplicate_vote_for_same_target",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register user for the voting scenario."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create post to receive the votes."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast first vote on the post."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes/{id}",
      "method": "put"
    },
    "draft": "Test updating an existing vote to change its value (e.g., change an upvote to a downvote) by the vote's creator. Confirm the vote record is updated, and vote tallies reflect the change appropriately.",
    "functionName": "test_update_vote_value_by_owner",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register the user who will cast and update the vote."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create post for voting."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast initial vote for update testing."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes/{id}",
      "method": "put"
    },
    "draft": "Attempt to update a vote by a user who is not the vote's creator. Verify that permission is denied and the record is not modified, in accordance with business rules.",
    "functionName": "test_update_vote_value_by_non_owner_denied",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register the owner user and a second user who will attempt the unauthorized update."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create a post that will be voted on."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast vote as the owner to generate record for unauthorized access."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes/{id}",
      "method": "delete"
    },
    "draft": "Successfully delete a vote by its owner, ensuring the vote is removed and is no longer returned by listing or detail endpoints. Validate business logic that only owners (or admins, if permitted) can delete votes.",
    "functionName": "test_delete_vote_by_owner",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register user who will cast and delete vote."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create post to receive the vote."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast vote to be deleted."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/votes/votes/{id}",
      "method": "delete"
    },
    "draft": "Attempt to delete a vote by a user who is not the owner and confirm permission is denied in accordance with access rules.",
    "functionName": "test_delete_vote_by_non_owner_denied",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register owner and non-owner user accounts."
      },
      {
        "endpoint": {
          "path": "/posts/posts",
          "method": "post"
        },
        "purpose": "Create post to receive the vote."
      },
      {
        "endpoint": {
          "path": "/votes/votes",
          "method": "post"
        },
        "purpose": "Cast vote as the owner for unauthorized delete test."
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register an additional user (non-owner) to attempt forbidden deletion."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users",
      "method": "patch"
    },
    "draft": "Test listing users using default pagination settings without any filters. Verify that the response returns the first page of user summaries, includes valid metadata, and omits sensitive fields. Ensure the result only includes active users by default if business rules dictate.",
    "functionName": "test_list_users_with_default_pagination",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/users",
      "method": "patch"
    },
    "draft": "Test listing users with complex filters and sorting criteria (e.g., searching by partial username, filtering by role, sorting by created date descending, and requesting a specific page/limit). Validate correct filtering, ordering, and response pagination.",
    "functionName": "test_list_users_with_filters_and_sorting",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register users with varying roles, usernames, and created_at timestamps for diverse filtering and sorting validation."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users",
      "method": "patch"
    },
    "draft": "Test listing users with invalid filter data or out-of-bound paging parameters (e.g., invalid role filter, negative offset, excessively large limit). Confirm that validation errors or safe limits are applied and error messages are descriptive.",
    "functionName": "test_list_users_with_invalid_filter_criteria",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "get"
    },
    "draft": "Retrieve detailed profile for an existing user by their ID. Confirm that the profile data includes correct fields and omits authentication secrets. Validate the accuracy of returned role and status information.",
    "functionName": "test_get_user_profile_by_id_success",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Create a user to ensure a known, valid user ID is available for detail retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "get"
    },
    "draft": "Attempt to retrieve a user profile using a non-existent or deleted user ID. Ensure the system returns the appropriate not found error or deleted status, without exposing any sensitive information.",
    "functionName": "test_get_user_profile_by_nonexistent_or_deleted_id",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Create and then delete a user to acquire a valid, deleted user ID."
      },
      {
        "endpoint": {
          "path": "/core/users/{id}",
          "method": "delete"
        },
        "purpose": "Delete the user before attempting profile retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users",
      "method": "post"
    },
    "draft": "Register a new user with all valid, unique data, including username, email, password, and an assignable user role. Validate the full profile in the response and ensure no authentication secrets are exposed.",
    "functionName": "test_create_user_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create a valid, assignable user role to associate with the new user."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users",
      "method": "post"
    },
    "draft": "Attempt to register a user with a duplicate email or username that already exists in the system. Confirm the system rejects the registration due to unique constraints, and returns an appropriate error message.",
    "functionName": "test_create_user_with_duplicate_email_or_username",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user with a specific email/username to set up the duplicate scenario."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users",
      "method": "post"
    },
    "draft": "Attempt user registration with missing required fields, invalid email format, or a weak password. Ensure appropriate validation errors are returned and that no user is created.",
    "functionName": "test_create_user_with_invalid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Ensure a valid user role exists to separate validation of core fields from business logic dependencies."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "put"
    },
    "draft": "Update an existing user's profile details, such as display name or bio, with valid data. Check that changes are saved and reflected in the returned user profile, without modifying authentication secrets.",
    "functionName": "test_update_user_profile_with_valid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Create a user to update."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "put"
    },
    "draft": "Attempt to update a user profile with invalid fields (e.g., malformed email, unsupported role, empty required fields). Confirm validation errors are returned and no changes are saved.",
    "functionName": "test_update_user_profile_with_invalid_data",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Create a user to edit for testing invalid update attempts."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "put"
    },
    "draft": "Try to update a non-existent or deleted user. Ensure the system returns a not found error and no unintended changes occur.",
    "functionName": "test_update_user_profile_nonexistent_or_deleted",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Create a user, then delete the user to test updates on deleted records."
      },
      {
        "endpoint": {
          "path": "/core/users/{id}",
          "method": "delete"
        },
        "purpose": "Delete the user before attempting the update."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "delete"
    },
    "draft": "Soft-delete (or fully delete) an existing user. Validate that the user is marked as deleted or removed from results, and that appropriate confirmation is returned. Also, ensure the deletion is idempotent if retried.",
    "functionName": "test_delete_user_success_and_idempotency",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a new user for deletion testing."
      }
    ]
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "delete"
    },
    "draft": "Attempt to delete a user that does not exist. Confirm the appropriate not found error response and that no side effects result.",
    "functionName": "test_delete_user_nonexistent_id",
    "dependencies": []
  },
  {
    "endpoint": {
      "path": "/core/users/{id}",
      "method": "delete"
    },
    "draft": "Try deleting a user who is protected by business rules (e.g., a super admin that cannot be removed). Confirm the deletion is forbidden and an appropriate error is returned.",
    "functionName": "test_delete_protected_user_forbidden",
    "dependencies": [
      {
        "endpoint": {
          "path": "/core/userRoles",
          "method": "post"
        },
        "purpose": "Create a super admin role and assign to a user."
      },
      {
        "endpoint": {
          "path": "/core/users",
          "method": "post"
        },
        "purpose": "Register a user with the protected role to test forbidden deletion."
      }
    ]
  }
]