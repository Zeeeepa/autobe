[
  {
    "endpoint": {
      "method": "patch",
      "path": "/core/users"
    },
    "draft": "Test retrieving a paginated list of users, filtering by role or email. Validate correct pagination, filter logic, and that unauthorized access is denied. Include test for empty filter (return all users), invalid filter criteria (e.g. non-existent role), and page boundaries (first/last page).",
    "functionName": "test_list_users_with_pagination_and_filtering",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "get",
      "path": "/core/users/{id}"
    },
    "draft": "Retrieve the detailed profile of an existing user by ID and verify all expected fields are present. Attempt to access a non-existent user ID; expect a 404 error. Attempt to retrieve details without sufficient permissions and confirm access is denied.",
    "functionName": "test_get_user_profile_by_id_with_success_and_failure_cases",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/users"
        },
        "purpose": "Create a user to have a valid user ID for retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "method": "post",
      "path": "/core/users"
    },
    "draft": "Register a new user with valid information and expect success. Attempt registration with existing email/username (expect uniqueness violation). Try registering with missing required fields (e.g. password/email, expect validation errors).",
    "functionName": "test_register_user_valid_duplicate_and_invalid_cases",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "put",
      "path": "/core/users/{id}"
    },
    "draft": "Successfully update profile fields for an existing user. Attempt to update with fields violating business logic (e.g. set email to an existing email), and expect an error. Attempt to update a non-existent user and expect a 404 error. Try without sufficient permissions and confirm access denied.",
    "functionName": "test_update_user_profile_various_scenarios",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/users"
        },
        "purpose": "Create a user that will be updated in the test."
      }
    ]
  },
  {
    "endpoint": {
      "method": "delete",
      "path": "/core/users/{id}"
    },
    "draft": "Delete a user; some tests softly delete (status change), others fully remove (hard delete). Attempt to delete a non-existent user (expect 404 error). Try to delete user without proper authorization and expect failure.",
    "functionName": "test_delete_user_soft_and_hard_and_invalid_cases",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/users"
        },
        "purpose": "Create a user to be deleted in the test."
      }
    ]
  },
  {
    "endpoint": {
      "method": "patch",
      "path": "/core/userRoles"
    },
    "draft": "List user roles with and without filtering (by label, etc.), validate pagination and filter logic, and confirm access control is enforced for non-admin users.",
    "functionName": "test_list_user_roles_with_and_without_filtering_and_permission_control",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "get",
      "path": "/core/userRoles/{id}"
    },
    "draft": "Fetch details for a valid user role ID and verify all necessary fields. Try with a non-existing role ID (expect 404 error).",
    "functionName": "test_get_user_role_details_success_and_nonexistent",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/userRoles"
        },
        "purpose": "Create a role to ensure a valid ID is available."
      }
    ]
  },
  {
    "endpoint": {
      "method": "post",
      "path": "/core/userRoles"
    },
    "draft": "Create a new user role with valid data. Attempt to create a role with duplicate label (expect uniqueness error). Test required field validation by submitting incomplete data.",
    "functionName": "test_create_user_role_valid_duplicate_and_invalid_cases",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "put",
      "path": "/core/userRoles/{id}"
    },
    "draft": "Edit the label and description of an existing user role. Attempt to update a non-existent role (expect 404). Check for uniqueness by trying to set an existing label on another role (expect error).",
    "functionName": "test_update_user_role_label_and_description_with_uniqueness_checks",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/userRoles"
        },
        "purpose": "Create roles for update and uniqueness tests."
      }
    ]
  },
  {
    "endpoint": {
      "method": "delete",
      "path": "/core/userRoles/{id}"
    },
    "draft": "Successfully delete a user role. Test deleting a non-existent role (expect 404) and deleting a role that is currently assigned to a user (expect constraint violation).",
    "functionName": "test_delete_user_role_simple_and_constraint_violation",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/userRoles"
        },
        "purpose": "Create a role to be deleted in the test."
      },
      {
        "endpoint": {
          "method": "post",
          "path": "/core/users"
        },
        "purpose": "Create a user and assign the role to test constraint violation on deletion."
      }
    ]
  },
  {
    "endpoint": {
      "method": "patch",
      "path": "/core/categories"
    },
    "draft": "List categories with/without filtering (by name, parent, etc.), testing pagination and permission restrictions. Check correct handling when no categories exist.",
    "functionName": "test_list_categories_with_various_filters_and_empty_state",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "get",
      "path": "/core/categories/{id}"
    },
    "draft": "Retrieve a category by ID, verifying all details are correct. Attempt retrieval with invalid/non-existent ID and expect 404.",
    "functionName": "test_get_category_by_id_success_and_not_found",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/categories"
        },
        "purpose": "Create a category to have an ID for retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "method": "post",
      "path": "/core/categories"
    },
    "draft": "Add a new category with valid data. Try creating a category with duplicate name/slug (expect uniqueness error), and with missing required fields (expect validation error).",
    "functionName": "test_create_category_with_valid_uniqueness_and_validation_cases",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "put",
      "path": "/core/categories/{id}"
    },
    "draft": "Update the name or description of an existing category. Try to update to a name/slug that already exists (expect error). Attempt to update a non-existent category (expect 404).",
    "functionName": "test_update_category_fields_and_uniqueness",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/categories"
        },
        "purpose": "Create categories for valid update and uniqueness checks."
      }
    ]
  },
  {
    "endpoint": {
      "method": "delete",
      "path": "/core/categories/{id}"
    },
    "draft": "Delete a category by valid ID, attempt to delete a non-existent category (expect 404), and try to delete a category that is assigned to existing posts (expect constraint error).",
    "functionName": "test_delete_category_simple_and_constraint_violation",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/core/categories"
        },
        "purpose": "Create a category for deletion."
      },
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/posts"
        },
        "purpose": "Create a post using the category to test deletion constraint."
      }
    ]
  },
  {
    "endpoint": {
      "method": "patch",
      "path": "/posts/posts"
    },
    "draft": "List posts with various filters (author, category, date), paginated. Check responses for combinations of filters and correct error/empty handling when no posts match. Test for correct permissions (non-authors vs. authors/admins).",
    "functionName": "test_list_posts_paginated_and_filtered_with_permission_checks",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "get",
      "path": "/posts/posts/{id}"
    },
    "draft": "Retrieve post details for a valid post ID (check all fields), attempt to fetch a non-existent post (expect 404), and unauthorized access.",
    "functionName": "test_get_post_by_id_success_not_found_and_permission_check",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/posts"
        },
        "purpose": "Create a post for successful retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "method": "post",
      "path": "/posts/posts"
    },
    "draft": "Create a post with valid data. Attempt to create with missing required fields (expect validation error), with duplicate slug/title (expect uniqueness error).",
    "functionName": "test_create_post_success_validation_and_uniqueness",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "put",
      "path": "/posts/posts/{id}"
    },
    "draft": "Update post content and fields for existing post, test update to duplicate slug/title (expect error), and try updating a non-existent post (expect 404). Check for permission enforcement.",
    "functionName": "test_update_post_fields_and_permission_and_uniqueness",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/posts"
        },
        "purpose": "Create posts for valid and duplicate update scenarios."
      }
    ]
  },
  {
    "endpoint": {
      "method": "delete",
      "path": "/posts/posts/{id}"
    },
    "draft": "Delete a post. Try deleting a non-existent post (expect 404), and deleting a post without permissions (expect failure).",
    "functionName": "test_delete_post_normal_permission_and_not_found",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/posts"
        },
        "purpose": "Create a post for the delete test."
      }
    ]
  },
  {
    "endpoint": {
      "method": "patch",
      "path": "/posts/comments"
    },
    "draft": "Fetch paginated, filtered comments (by post, author), and check correct results for edge cases like no comments match, page out-of-range, and proper permission enforcement.",
    "functionName": "test_list_comments_paginated_filtered_and_permissions",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "get",
      "path": "/posts/comments/{id}"
    },
    "draft": "Get comment details for a valid ID. Attempt to get a deleted or non-existent comment (expect 404). Check that only authorized users can view deleted/hidden comments.",
    "functionName": "test_get_comment_by_id_success_deleted_not_found_permission",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/comments"
        },
        "purpose": "Create a comment for valid retrieval."
      }
    ]
  },
  {
    "endpoint": {
      "method": "post",
      "path": "/posts/comments"
    },
    "draft": "Create a new comment with valid data. Attempt to create a comment with invalid content (too short/long), missing required fields, or referencing invalid post/user IDs (expect validation/foreign key errors).",
    "functionName": "test_create_comment_valid_invalid_and_foreign_key_cases",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/posts"
        },
        "purpose": "Create a post to attach a comment to."
      }
    ]
  },
  {
    "endpoint": {
      "method": "put",
      "path": "/posts/comments/{id}"
    },
    "draft": "Update comment content for an existing comment. Attempt to update to invalid content (too short/long), or update a non-existent comment (expect 404). Enforce that only owners or admins can update.",
    "functionName": "test_update_comment_content_and_permissions",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/comments"
        },
        "purpose": "Create a comment for update tests."
      }
    ]
  },
  {
    "endpoint": {
      "method": "delete",
      "path": "/posts/comments/{id}"
    },
    "draft": "Soft-delete a comment (verify status or flag changes). Attempt to delete a non-existent comment (expect 404) and deleting a comment without permissions (expect failure).",
    "functionName": "test_delete_comment_soft_and_permission_errors",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/posts/comments"
        },
        "purpose": "Create a comment to delete."
      }
    ]
  },
  {
    "endpoint": {
      "method": "patch",
      "path": "/votes/votes"
    },
    "draft": "List votes, paginated and filterable (by user, object type, value, etc.), verifying correct filter logic, pagination boundaries, and permission restrictions.",
    "functionName": "test_list_votes_paginated_filtered_and_permission_restrictions",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "get",
      "path": "/votes/votes/{id}"
    },
    "draft": "Retrieve full details of a vote by valid ID, and expect 404 for a non-existent vote. Check access permissions for non-owners.",
    "functionName": "test_get_vote_by_id_success_not_found_and_permission",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/votes/votes"
        },
        "purpose": "Create a vote for retrieval test."
      }
    ]
  },
  {
    "endpoint": {
      "method": "post",
      "path": "/votes/votes"
    },
    "draft": "Create a vote referencing valid user and object. Test duplicate vote (same user/object, expect conflict), missing or invalid references (expect validation or foreign key errors).",
    "functionName": "test_create_vote_valid_duplicate_and_invalid_refs",
    "dependencies": []
  },
  {
    "endpoint": {
      "method": "put",
      "path": "/votes/votes/{id}"
    },
    "draft": "Update the value of an existing vote. Try to update a non-existent vote (expect 404). Enforce user permissions so only vote creator can edit.",
    "functionName": "test_update_vote_value_and_permission_enforcement",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/votes/votes"
        },
        "purpose": "Create a vote for updating."
      }
    ]
  },
  {
    "endpoint": {
      "method": "delete",
      "path": "/votes/votes/{id}"
    },
    "draft": "Delete a vote (logical or physical depending on business rules). Attempt to delete non-existent vote (expect 404), and enforce that only the vote's owner can delete.",
    "functionName": "test_delete_vote_success_not_found_and_permission",
    "dependencies": [
      {
        "endpoint": {
          "method": "post",
          "path": "/votes/votes"
        },
        "purpose": "Create a vote for the delete test."
      }
    ]
  }
]