{"operations":[{"specification":"This operation provides JWT-based login for the internal moderator actor. It validates credentials (mobile and password_hashed) against the wrtn_moderators table and issues a signed access token for system API access. The operation is for login only (registration is handled separately) and sets up a new session in wrtn_moderator_sessions on success. The table 'wrtn_moderators' controls all internal administrator users, with unique fields: id (PK, uuid), mobile (unique), password_hashed (required for login), and other profile fields. This is critical for moderator authentication and all privileged API access. Only moderators are allowed to access this endpoint. The password_hashed field is compared using secure hash-based verification. On login success, a JWT access token is returned, embedding moderator's id and role. Each login also creates a new moderator session log in wrtn_moderator_sessions table for audit/compliance tracking. Registration and refresh functionality are split into other API endpoints.","authorizationType":"login","description":"This endpoint enables JWT-based login for internal moderator users. It accepts the moderator's unique mobile number and password, verifies the credentials by securely comparing the password_hashed field (stored in wrtn_moderators), and on success, creates a new session row in wrtn_moderator_sessions with context details for audit trail.\n\nThe moderator actor is the system administrator for the Wrtn Enterprise platform, responsible for privileged operations across all enterprise customers. Successful authentication grants an access token and records a full session event in the wrtn_moderator_sessions audit table, as required for compliance and incident attribution.\n\nIf the credentials are invalid, blocked, or the moderator's deleted_at is set (soft deletion for lifecycle tracking), the operation returns an authentication error with a clear reason. Sessions are always short-lived, require JWT rotation/refresh, and support concurrent multi-device login, with each session uniquely recorded for investigative traceability.\n\nNo profile, preference, or permission-changing actions are permitted via this endpoint—only credential-based authentication and JWT/session issuance are handled. Additional operations such as role changes, approvals, or onboarding occur elsewhere in the API.\n\nThis operation is not used for moderator registration (join), which requires internal Wrtn approval. Only login and token issuance for active moderators are permitted here. Failed login attempts are always logged for compliance and brute-force mitigation.","summary":"JWT-based login for Wrtn moderator (wrtn_moderators table) with session audit logging.","parameters":[],"requestBody":{"description":"Login information for moderator (mobile and password).","typeName":"IWrtnModerator.ILogin"},"responseBody":{"description":"Authorized token and moderator session info. JWT/refresh token in response.","typeName":"IWrtnModerator.IAuthorized"},"authorizationActor":"moderator","name":"login","prerequisites":[],"path":"/auth/moderator/login","method":"post"},{"specification":"This operation provides account registration (join) for a new moderator. It creates a wrtn_moderators record with required fields (mobile, nickname, name, password_hashed), after uniqueness checks, and issues an initial JWT. This is only used for platform staff onboarding through explicit internal workflow—not for public signup. Session is created in wrtn_moderator_sessions for audit. Critical fields are mobile (unique), nickname (unique), name, password_hashed. All registrations are logged for compliance. Soft deletion for life cycle tracking (deleted_at) is enforced via business rules elsewhere. No external users may use this operation.","authorizationType":"join","description":"This endpoint enables creation of a new moderator account: an internal privileged system user for Wrtn Enterprise. The API checks uniqueness of the mobile and nickname fields (wrtn_moderators) and creates the new moderator, securely hashing the password (stored as password_hashed). Upon success, it records a moderator session in wrtn_moderator_sessions (for audit compliance), and returns a JWT representing the newly registered moderator for further API interactions.\n\nRegistration is allowed only for internal operation (no public access); only Wrtn staff/authorized admins onboarded with approved business workflow may use this API. The endpoint's input includes all necessary fields from wrtn_moderators except id and audit fields (set automatically). Audit fields like created_at are handled by the system automatically. Soft deletion (deleted_at) is enforced elsewhere but not required to be set on registration.\n\nPassword policy is to be enforced prior to request acceptance (e.g., minimum length, complexity requirements). Uniqueness of both mobile and nickname must be enforced at the DB level. Failed registration attempts or violations are clearly reported, and audit trails are always created.\n\nAny session created is short-lived and requires token refresh flow for continued access. This endpoint only creates moderator records and session audits—it does not assign roles, process approvals, or issue privileges. Such business operations require additional workflow elsewhere.","summary":"Register a new moderator (wrtn_moderators table) and issue initial JWT with session logging.","parameters":[],"requestBody":{"description":"Moderator account registration info: mobile, nickname, name, password_hashed.","typeName":"IWrtnModerator.IJoin"},"responseBody":{"description":"Authorized token, JWT, and new moderator session info.","typeName":"IWrtnModerator.IAuthorized"},"authorizationActor":"moderator","name":"join","prerequisites":[],"path":"/auth/moderator/join","method":"post"},{"specification":"This operation allows JWT access token refresh for moderators. The endpoint requires a valid refresh token (JWT, previously obtained), validates it against the current moderator record and session, and returns a new signed JWT (access token) for continued privileged access. Business logic checks that session and moderator are still valid (not deleted/expired). Each refresh event is logged in wrtn_moderator_sessions, and tokens' expiry times are updated accordingly. This does not permit privilege escalation or new user login—strictly for refreshing an existing session. Only available to moderators with valid tokens.","authorizationType":"refresh","description":"This endpoint enables refresh of a JWT access token for a moderator. A valid refresh token (obtained from previous /auth/moderator/login or /auth/moderator/join) must be presented. The system validates the refresh token, ensuring that the referenced moderator exists and is not deleted (deleted_at is null), and that the referenced session is still valid and unexpired.\n\nOn successful validation, a new JWT access token is issued for the moderator actor, and the session expiry is updated as required by security policy. Each refresh request and outcome is audit-logged in wrtn_moderator_sessions for compliance and traceability, along with moderator ID and context fields (origin IP, session, etc).\n\nIf the token is invalid, expired, or the session/moderator is blocked/deleted, an explicit authentication error is returned—and the failed attempt is audit-logged for incident detection and brute-force protection. This endpoint does not issue new privileges, roles, or profile updates—strictly JWT rotation for ongoing authenticated operations. Public registration or password reset are not supported here, but can be implemented elsewhere according to security policy. All access is restricted to valid moderator actors (authorizationActor=moderator).","summary":"Refresh moderator JWT access token for authenticated session (wrtn_moderators).","parameters":[],"requestBody":{"description":"Moderator refresh token for JWT rotation.","typeName":"IWrtnModerator.IRefresh"},"responseBody":{"description":"Updated JWT, access/refresh token and moderator session info.","typeName":"IWrtnModerator.IAuthorized"},"authorizationActor":"moderator","name":"refresh","prerequisites":[],"path":"/auth/moderator/refresh","method":"post"},{"specification":"This operation enables a new employee to register (join) the WrtnEnterprise platform as a member user. The endpoint is designed specifically for enterprise client staff and uses the email and password fields from the wrtn_enterprise_employees table for authentication. Upon successful account creation, it issues a JWT access and refresh token in a response body of type IWrtnEnterpriseEmployee.IAuthorized. This operation is available to any prospective employee and does not require prior authentication. Registration is atomic—employee accounts are created only if all fields pass validation. Audit trail logging occurs for all registration attempts, including success and failure. The operation aligns with business requirements for enterprise data isolation, regulatory compliance, and account approval workflows. Employee accounts are scoped to a single enterprise and are subject to later approval per business logic.","authorizationType":"join","description":"This API registers a new employee account in the WrtnEnterprise platform for enterprise client staff, based on the wrtn_enterprise_employees schema. The join operation requests core identifying fields such as email, password, name, and optionally the target enterprise code, as per the wrtn_enterprise_employees schema definition. Registration follows rigorous business rule validation, including unique email in enterprise, minimum password requirements, and valid enterprise association. Successful registration results in a new employee record, initial account status (subject to later approval), and immediate issuance of JWT access and refresh tokens in the IWrtnEnterpriseEmployee.IAuthorized response. All registration attempts and outcomes are logged for audit and compliance, with failure conditions clearly returning validation or business logic errors. This endpoint supports only open registration flows as defined for 'member' users in B2B SaaS onboarding.","summary":"Register a new employee (wrtn_enterprise_employees) and issue auth tokens (join).","parameters":[],"requestBody":{"description":"Data required to create a new employee (registration/join).","typeName":"IWrtnEnterpriseEmployee.ICreate"},"responseBody":{"description":"Authorized employee account information and issued JWT tokens.","typeName":"IWrtnEnterpriseEmployee.IAuthorized"},"authorizationActor":null,"name":"join","prerequisites":[],"path":"/auth/employee/join","method":"post"},{"specification":"This operation authenticates an existing employee for the WrtnEnterprise platform using email and password credentials, as defined in the wrtn_enterprise_employees schema. Upon successful verification, the API returns valid JWT access and refresh tokens in a response body of type IWrtnEnterpriseEmployee.IAuthorized. The process cross-checks the submitted email and password against securely hashed records for wrtn_enterprise_employees. Invalid credentials, account suspension, or unapproved status result in clear business error codes and logs for auditability. This endpoint is accessible to unauthenticated users and is critical for employee login throughout the SaaS platform, supporting multi-session audit, regulatory compliance, and data isolation requirements.","authorizationType":"login","description":"This API authenticates employee users against wrtn_enterprise_employees using email and password. The login operation validates credentials with secure hashing, enforces business rules for minimum password features, and checks that the employee account is approved/active in the enterprise. On success, a new JWT access/refresh token pair is issued in IWrtnEnterpriseEmployee.IAuthorized. Failed authentication due to invalid credentials, suspended, unapproved, or terminated accounts will yield precise business error codes defined by the platform's authentication error management. All login attempts are audit-logged for compliance purposes. The operation underpins employee session management, secure business access, and SaaS auditability per wrtn_enterprise_employees onboarding requirements.","summary":"Authenticate employee (wrtn_enterprise_employees) and issue tokens (login).","parameters":[],"requestBody":{"description":"Employee login credentials (email and password).","typeName":"IWrtnEnterpriseEmployee.ILogin"},"responseBody":{"description":"Authorized employee information and JWT tokens.","typeName":"IWrtnEnterpriseEmployee.IAuthorized"},"authorizationActor":null,"name":"login","prerequisites":[],"path":"/auth/employee/login","method":"post"},{"specification":"This operation allows an authenticated employee to refresh their JWT access token using a valid refresh token. It is implemented for the wrtn_enterprise_employees actor as per the session and token management business requirements. The endpoint checks the validity of the provided refresh token, and if valid, issues a new pair of access and refresh tokens encapsulated in an IWrtnEnterpriseEmployee.IAuthorized response. The operation enforces single-use refresh token invariants, revokes prior sessions in case of suspected anomalies, and logs every event for compliance. If the refresh token is invalid, expired, or associated with a terminated/unapproved employee, the endpoint returns a business error and audit trail entry. The operation strictly follows the employee member actor use case.","authorizationType":"refresh","description":"Allows an employee with a valid refresh token to obtain a new JWT access/refresh token pair. The endpoint verifies the refresh token's validity and checks the associated employee's account status (active/approved/not terminated) as defined in the wrtn_enterprise_employees schema. Successful refresh results in new issued tokens in IWrtnEnterpriseEmployee.IAuthorized, while invalid, expired, or banned tokens return a business error. All token refresh attempts are logged for full session and compliance tracking. The operation is essential for supporting short-lived tokens and audit-grade session management for enterprise employee accounts.","summary":"Refresh JWT tokens for employee (wrtn_enterprise_employees).","parameters":[],"requestBody":{"description":"Refresh token request for employee session.","typeName":"IWrtnEnterpriseEmployee.IRefresh"},"responseBody":{"description":"Updated authorized employee context and refreshed JWT tokens.","typeName":"IWrtnEnterpriseEmployee.IAuthorized"},"authorizationActor":null,"name":"refresh","prerequisites":[],"path":"/auth/employee/refresh","method":"post"},{"specification":"This operation retrieves a paginated, filterable, and sortable list of moderator accounts (wrtn_moderators) in the WrtnEnterprise platform. Moderators represent internal administrators or support staff, each with unique mobile, nickname, hashed password, and optional role attributes (master, manager, or null). Querying the moderator list supports business workflows such as managing internal support users, onboarding, privilege review, and audit/compliance features. It leverages the Moderator DB table and returns summary detail per moderator. Only internal staff actors should be permitted access to this operation, and sensitive fields like password hashes are never exposed in summary responses.","path":"/wrtnEnterprise/moderator/moderators","method":"patch","summary":"Search and retrieve a paginated, filterable list of internal moderators (admins/support staff) from wrtn_moderators.","description":"This endpoint enables retrieval of a paginated list of moderator users, representing internal administrators and support personnel within the WrtnEnterprise system. Moderators are identified by unique phone number, nickname, and may have assigned roles such as 'master', 'manager', or null (unappointed). The operation supports advanced filtering by name, role, and date range, as well as flexible sorting and pagination for large platforms.\n\nSecurity is critical as only trusted internal staff actors (moderator) should have access; password hashes and sensitive audit information are never exposed. The endpoint references the wrtn_moderators table, with summaries containing fields suitable for administrative interfaces and business audit routines. This operation is essential for platform management, privilege reviews, and compliance/trace purposes, and integrates with the moderator audit log and appointment modules for full lifecycle visibility.","parameters":[],"requestBody":{"description":"Query payload for paginated moderator filtering and search (name, role, date range)","typeName":"IWrtnModerator.IRequest"},"responseBody":{"description":"Paginated list of moderator summary objects for admin/support management.","typeName":"IPageIWrtnModerator.ISummary"},"authorizationActors":["moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific moderator (admin/support staff) using their unique moderatorId (UUID). Moderators are internal users with business-critical access, identified in the wrtn_moderators table by id. The endpoint returns detailed attributes except for hashed password, supporting user management and compliance reviews. Moderator details support workflows like access reviews, privilege escalation, onboarding, audit trail referencing, and assignment to enterprise or ticket resources. Only internal moderator actors are permitted to use this operation.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}","method":"get","summary":"Retrieve detail information about a specific moderator (internal staff) by moderatorId from wrtn_moderators.","description":"This endpoint returns detailed profile information for a single moderator user, referencing the wrtn_moderators table's unique id. Moderators are internal administrative or support actors granted privileged access to manage, audit, or support WrtnEnterprise customers and employees. The response omits sensitive authentication data like password hashes, but includes other relevant fields such as mobile, nickname, name, approved/created/updated timestamps, and current role.\n\nAccess is strictly limited to authenticated moderator actors as internal staff. This operation supports business needs including privilege escalation, internal audit and compliance checking, support ticket assignment, and linkage to enterprises or tickets managed by the moderator. Typical use cases include reviewing moderator details before privilege modification or resolving support escalations.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator detail object for internal platform management.","typeName":"IWrtnModerator"},"authorizationActors":["moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new moderator account for the WrtnEnterprise SaaS platform. It is associated with the Moderator table in the Prisma schema (wrtn_moderators), which tracks all internal admin/support staff. The API allows privileged creation of new moderator records with required identity fields (mobile, nickname, name, password_hashed, role), supports audit and compliance logging, and enforces uniqueness on both mobile and nickname. Only authorized users (actor: moderator) can perform this operation, and it requires the creation of a secure, hashed password. The created moderator is ready for platform-level administration and onboarding workflow, subject to additional appointment and email verification flows.","description":"Create a new internal moderator record representing an administrator or support staff for the enterprise SaaS system. The endpoint is used to onboard new moderator users who will be responsible for platform-level management, enterprise onboarding, and internal support operations.\n\nSecurity is paramount; this endpoint is restricted to authenticated moderator actors and will fail for unauthorized access. The request must provide all required moderator attributes as defined in the schema, including unique mobile and nickname values, a legal name, and a securely hashed password. The role field can optionally be set to one of 'master', 'manager', or left null for initial creation; appointment flows are handled separately after account creation.\n\nBusiness logic enforces uniqueness for both the mobile phone number and nickname, and the system will reject creation attempts that violate these constraints, returning actionable error messages. Successful creation returns the detailed moderator entity, including audit-related fields for compliance and lifecycle tracking. This API is used in conjunction with moderator onboarding, appointment, and invitation workflows, and is foundational to admin authentication and security compliance.","summary":"Create a new moderator user (wrtn_moderators table) for internal platform administration.","parameters":[],"requestBody":{"description":"Moderator creation data (mobile, nickname, name, password hash, and optional role) for onboarding a new internal administrator/support account.","typeName":"IWrtnModerator.ICreate"},"responseBody":{"description":"Detailed record of the newly created moderator including identity, appointment, and compliance fields.","typeName":"IWrtnModerator"},"authorizationType":null,"authorizationActor":"moderator","name":"create","path":"/wrtnEnterprise/moderator/moderators","method":"post","prerequisites":[]},{"specification":"This operation updates an existing moderator in the WrtnEnterprise SaaS platform. It directly mutates fields in the wrtn_moderators table for identity, profile, or administrative role changes. The target moderator is identified by moderatorId (UUID); only authenticated moderator actors may invoke this operation. Business logic supports updating any mutable moderator fields as defined in the schema—most commonly name, nickname, mobile phone, or updating the moderator's administrative role. Password changes should use a specialized endpoint for credential resets. Unique constraints remain enforced on nickname and mobile. All update actions are fully audit-logged for compliance and incident investigation.","description":"Update the profile or administrative role of an existing moderator record in the internal SaaS administration system. The moderator to update is specified by moderatorId as a path parameter. Only authenticated moderator actors may perform this action, to ensure strict platform administration security, and all updates are captured in the audit log for compliance review.\n\nThe operation supports modifying any standard mutable fields of the moderator—such as legal name, mobile phone number (subject to uniqueness), display nickname (subject to uniqueness), and optionally the moderator's administrative role (e.g., promotion to master or change to manager/null). Fields not included in the update are left unchanged. Any attempt to set a duplicate nickname or mobile will be rejected with a detailed error message indicating the uniqueness violation. Attempting to update fields that are immutable (e.g., id, created_at, deleted_at, etc.) is not permitted.\n\nPassword changes must be handled via a dedicated password reset endpoint for secure credential management; this endpoint does not support password modification. The response returns the updated moderator record reflecting all permissible changes. This operation is a core part of moderator lifecycle and privilege management, supporting auditability and organizational compliance requirements.","summary":"Update an existing moderator's profile or administrative role (wrtn_moderators table).","parameters":[{"name":"moderatorId","description":"Unique ID of the moderator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator profile fields and/or administrative role to update. Only supply fields to change; all others remain unchanged. Password updates are not supported here.","typeName":"IWrtnModerator.IUpdate"},"responseBody":{"description":"The updated moderator record reflecting all allowed profile and administrative changes.","typeName":"IWrtnModerator"},"authorizationType":null,"authorizationActor":"moderator","name":"update","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}","method":"put","prerequisites":[]},{"specification":"This operation permanently deletes a moderator from the system by their unique moderator ID. It is associated with the wrtn_moderators table, which manages all internal moderator (admin/support) records. This action will perform a hard delete if the soft deletion marker (deleted_at) is not set, or apply a soft delete by updating the deleted_at timestamp for compliance and audit-trail preservation if the schema supports it. All related sessions, appointments, and invitations will retain integrity via foreign key onDelete behavior as defined in the schema. Only authorized users with \"moderator\" privileges can perform this operation. Actor identification and authentication are verified with JWT context, not in the route.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}","method":"delete","summary":"Permanently remove a moderator from wrtn_moderators by moderatorId","description":"Delete the moderator account identified by the provided moderatorId. This operation either performs a hard delete or, if the schema supports, applies a soft delete by updating the deleted_at field, helping to preserve audit and lifecycle records according to compliance standards.\n\nThe wrtn_moderators table is a core internal entity containing user, password hash, assignment role, and all identity information for platform-level administrators. Deletion will cascade or restrict as per the foreign key definitions in related tables such as wrtn_moderator_sessions, invitations, and appointments. The deleted_at column enables data retention for future compliance checks. Only authenticated \"moderator\" actors may call this operation, and authentication is enforced via JWT, not in the path parameter.\n\nIf the moderator does not exist or is already deleted, the operation returns an appropriate error code and message. This function does not affect audit log records, as they must be retained for compliance for at least three years.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves all visible and audit-traceable moderator sessions for a specific moderator by their ID, supporting advanced filtering, searching, sorting, and pagination. It is backed by the wrtn_moderator_sessions table, which stores connections, origins, creation, and expiry of moderator login sessions for compliance, audit investigations, and internal traceability. The endpoint allows administrative staff to examine moderator activity, trace security incidents, or satisfy regulatory requests. Only actors with \"moderator\" privileges may invoke this operation. Results may be filtered by origin IP, creation time, or session expiry. All session and connection data is returned according to privacy and auditability standards defined in the business requirements.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/sessions","method":"patch","summary":"Get a paginated, filterable list of all moderator sessions for a moderatorId from wrtn_moderator_sessions","description":"Retrieve a filtered, paginated, and optionally sorted list of moderator session records for the moderator specified by moderatorId. The wrtn_moderator_sessions table records all session creation, expiration, and audit context for each internal admin user, including origin IP, connection URL, referrer, and session lifecycle timestamps.\n\nThis operation enables internal compliance, incident investigation, and security monitoring by providing full access to login trace data for authorized actors. Only actors with administrative ('moderator') permissions may access this endpoint. The operation supports additional filtering (by date, IP, referrer), flexible page size, and sort parameters to facilitate large-scale audit analysis. Returned session data must always respect organizational internal data privacy policies.\n\nIf no records are found for the specified moderator, an empty set is returned. Actor authentication is enforced at the controller level using JWT with 'moderator' actor privilege.","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator whose sessions are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional search, filter, and pagination parameters for session listing. Supports filtering by creation time, expired status, or IP address.","typeName":"IWrtnModeratorSession.IRequest"},"responseBody":{"description":"Paginated list of session record summaries matching search criteria for the specified moderator, containing connection and audit trace metadata.","typeName":"IPageIWrtnModeratorSession.ISummary"},"authorizationActors":["moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific moderator session for internal audit trail and session investigation purposes. It queries the wrtn_moderator_sessions table using the provided moderatorId and sessionId, joining the wrtn_moderators table for actor details. The purpose is to allow system administrators and security auditors to review session activity, connection context (IP, referrer, href), and session lifecycle (creation, expiration) for any moderator. Typical uses include audit for privileged actions, incident investigation, and compliance reporting. The API ensures precise traceability of administrator actions within the platform.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/sessions/{sessionId}","method":"get","summary":"Retrieve a moderator session detail for auditing or incident review (wrtn_moderator_sessions).","description":"This API operation provides a detailed, multi-paragraph overview and trace of a specific moderator's session. \n\nThe endpoint allows privileged users to inspect session-level metadata, including creation time, expiration, origin IP, connection href, referrer, and the associated moderator. It is integral to both security audit workflows and the tracing of privileged administrative actions throughout the platform. \n\nAll actions on this endpoint are subject to strict permission checks, limited to the 'moderator' actor. Attempts to query sessions for non-existent moderator IDs or session IDs will result in a 404 Not Found response, and inappropriate or unauthorized access attempts are logged to the system audit trail as business events.\n\nThis operation supports compliance requirements for privileged access tracking, allowing security personnel and system administrators to reconstruct the full context of any session trace. It is especially relevant for root-cause investigation following incidents, policy reviews, or compliance audits. Only internal Wrtn staff (moderators) may access this information; attempts by non-moderator actors are strictly denied and audited.","parameters":[{"name":"moderatorId","description":"Unique identifier for the target moderator whose session is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"sessionId","description":"Unique identifier for the session to retrieve, must belong to the specified moderator.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator session detail with all metadata and linkage to the moderator actor account, suitable for auditing and compliance views.","typeName":"IWrtnModeratorSession"},"authorizationActors":["moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation searches and retrieves a filtered, paginated list of all moderator appointment (role change) events, scoped to a given moderator. It operates on the wrtn_moderator_appointments table and supports advanced filtering by date, role, and appointer. Results provide a summarized view of each appointment (or dismissal), including the moderator affected, who appointed or removed them, their assigned role, timestamp, and related audit trail context. This is essential for administrative compliance, privilege escalation review, and operational traceability. Typically used in internal admin dashboards and audit reporting tools.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/appointments","method":"patch","summary":"Search and retrieve a paginated list of moderator appointment records for a given moderator (wrtn_moderator_appointments).","description":"This endpoint provides enterprise administrators and moderators with fine-grained access to all appointment and role change events for an internal moderator. \n\nResponses include full appointment / dismissal history, indicating the affected moderator (target), appointer (who assigned or dismissed), the session context for each role change (for audit), the new role assigned (or null for removal), and timestamps. This supports robust compliance workflows for internal privilege management and enables traceability for approval flows, dual-control requirements, and post-event forensics.\n\nThe operation enables advanced search, filtering by role, appointer, and time window, as well as pagination and ordering. Only internal Wrtn staff with 'moderator' permissions can access the endpoint; unauthorized access attempts are denied and recorded for audit compliance. \n\nThis API aligns with organizational policy for privileged role traceability and supports administrator dashboards, review processes, and security audits.","parameters":[{"name":"moderatorId","description":"Unique identifier for the moderator whose appointment records are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appointment search and pagination criteria, such as date window, appointer, or role assignment. Required for advanced filtering and large result-sets.","typeName":"IWrtnModeratorAppointment.IRequest"},"responseBody":{"description":"Paginated set of summary appointment records for the moderator including target, appointer, role assigned, appointer session, and audit metadata.","typeName":"IPageIWrtnModeratorAppointment.ISummary"},"authorizationActors":["moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific moderator appointment from the wrtn_moderator_appointments table. It provides complete appointment data, including the target moderator, the appointing moderator, session audit context, assigned or removed role, and the creation timestamp. The operation enables administrators to audit internal privilege changes, review historical role assignments, and support compliance/governance processes. All fields from the wrtn_moderator_appointments schema, including moderator, appointer, role, and session, are returned.","description":"Retrieve a detailed moderator appointment record, including the moderator who was appointed or removed, the appointing moderator (if any), session context, the role that was assigned (if applicable), and the timestamp of the appointment or removal action.\n\nThis endpoint references the wrtn_moderator_appointments table and provides full details for governance, compliance, and role history review. Security is critical: appointment and removal history is sensitive to system integrity, so the endpoint is available to moderator actors only with strict audit logging. The appointment is linked both to the subject moderator and (if present) the appointer and appointment session for complete traceability.\n\nReturned data allows cross-verification between moderator lifecycle actions and compliance/incident audit requirements. All returned fields map directly to the columns and relationships found in the wrtn_moderator_appointments schema. Expected errors include not found (invalid or deleted id), and forbidden (if called by non-moderator actor).","summary":"Get detailed moderator appointment information for a specific appointment (wrtn_moderator_appointments).","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator (wrtn_moderators.id).","schema":{"type":"string","format":"uuid"}},{"name":"appointmentId","description":"Unique identifier of the appointment event (wrtn_moderator_appointments.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator appointment object, including references to both target moderator and appointer, with full audit context and role change.","typeName":"IWrtnModeratorAppointment"},"authorizationActors":["moderator"],"name":"at","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/appointments/{appointmentId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new moderator appointment record in the wrtn_moderator_appointments table. It registers the appointment (or removal) of a moderator to a specific role (master, manager, or null), with references to both the target moderator, the appointer, and the appointer's current session for complete audit context. This atomic operation is critical for privilege escalation, compliance, and administrative governance in the system. On success, it returns the complete stored appointment object.","description":"Create a new appointment or removal of an internal moderator, recording the appointment event, target moderator, appointer (if any), appointer session context, assigned role (if any), and timestamp in the wrtn_moderator_appointments table.\n\nAll appointment actions are strictly restricted to authenticated moderator actors, and the operation is fully audit-traced for compliance. The request body must include the unique target moderator id, the role to be assigned (or null for role removal), and, optionally, the appointer and appointer session (current moderator/session are implied by JWT context).\n\nThis endpoint is critical for managing platform-level privilege escalation, ensuring a full audit trail exists for all role modifications and administrator onboarding/removal. Success returns the complete appointment record, including references to moderator, appointer, and session as object relationships. Errors include validation (invalid ids/roles), forbidden (called by non-moderator), or if trying to assign restricted roles without dual control.","summary":"Create a new moderator appointment (wrtn_moderator_appointments).","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator (wrtn_moderators.id) to appoint or remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appointment creation information: target moderatorId, optionally appointerId/sessionId, and the role to be assigned (or null for removal).","typeName":"IWrtnModeratorAppointment.ICreate"},"responseBody":{"description":"The created moderator appointment object with full reference to moderator, appointer, session, role, and creation context.","typeName":"IWrtnModeratorAppointment"},"authorizationActors":["moderator"],"name":"create","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/appointments","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing moderator appointment record in the database. The target appointment is associated with a specific moderator and an appointment entry. The request allows modification of appointment details such as role or assignment, following audit and compliance policies as annotated in the wrtn_moderator_appointments schema. The path parameters specify both the moderatorId and appointmentId, which are required to identify the moderator and the specific appointment to update. The operation ensures that only valid updates according to business rules are committed, and all changes are timestamped and audit-logged for future review. The request body will use the IWrtnModeratorAppointment.IUpdate type, and the response will present the updated appointment details.","description":"Update a moderator appointment entry for a specific moderator. This endpoint enables internal system administrators to modify appointment records such as changes to role, approval status, or assignment for internal staff. This operation is designed to support compliance scenarios where appointment roles may need correction or escalation and maintains a full update history in accordance with regulatory requirements. \n\nSecurity considerations demand that only authorized actor sessions may perform this operation, and every update is recorded with user ID and session context in the audit trail. An updated appointment will reflect the latest state and retain the previous versions for rollback or investigation. Path parameters must be exact: moderatorId is the unique identifier of the moderator, and appointmentId refers to the specific appointment record.","summary":"Update a moderator appointment record by appointmentId for a given moderatorId","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator performing or associated with the appointment.","schema":{"type":"string","format":"uuid"}},{"name":"appointmentId","description":"Unique identifier of the appointment record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the moderator appointment, such as role or assignment details.","typeName":"IWrtnModeratorAppointment.IUpdate"},"responseBody":{"description":"The updated moderator appointment entity with all details and relationships.","typeName":"IWrtnModeratorAppointment"},"authorizationActors":["moderator"],"name":"update","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/appointments/{appointmentId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a moderator appointment record for a specific moderator and appointmentId. Using the path parameters to uniquely identify the target, the operation removes the appointment entry from the system. It is a hard delete action (not soft delete), reflecting that this information will no longer be retrievable after this operation, in accordance with the absence of a soft-delete marker in the related wrtn_moderator_appointments schema. All delete actions are strictly logged for audit and compliance needs. Authorization requires moderator actor privileges, as modifying system-level appointments is considered a privileged action.","description":"Permanently remove a moderator appointment record designated by moderatorId and appointmentId. This operation is typically used to revoke an appointment, remove obsolete or erroneous assignments, or satisfy data correction and legal/operational requirements. All removals are tracked with actor identity and session for security and audit purposes.\n\nThe operation requires both moderatorId and appointmentId as path parameters, ensuring precise targeting of the appointment record to be deleted. After execution, the record is irrecoverably removed and cannot be referenced in future operations or restored except via database backup procedures. Security controls ensure that only moderator actors can erase such records.","summary":"Permanently delete a moderator appointment record by appointmentId for a given moderatorId","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator associated with the appointment.","schema":{"type":"string","format":"uuid"}},{"name":"appointmentId","description":"Unique identifier of the moderator appointment record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/appointments/{appointmentId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of moderator invitations associated with a specific moderator. It queries the wrtn_moderator_invitations table and is scoped to the moderator identified by the given moderatorId path parameter. The operation supports listing all invitations sent by this moderator, which may be used for internal Wrtn management onboarding and audit flows.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/invitations","method":"patch","summary":"List all invitations created by a specific moderator (wrtn_moderator_invitations table)","description":"Retrieve a paginated and filterable list of invitations initiated by the specified moderator. This operation is critical for internal audit and workflow traceability, ensuring platform administrators can review all invitations they have issued, including pending, expired, or deleted invitations.\n\nSecurity is strictly enforced: only the moderator themself or an appropriately scoped internal auditor may invoke this endpoint. Path parameter moderatorId is validated against the wrtn_moderators primary key. The operation maps directly to the wrtn_moderator_invitations table and includes invitation metadata such as target email, created/expired/deleted timestamps, and audit fields. Filtering may include status (active, expired, deleted), email, and temporal ranges.\n\nThis API is generally used alongside invitation creation flows and audit review UIs, allowing for efficient navigation and management of all moderator-led onboarding actions. Appropriate business-level errors are returned for missing or unauthorized moderatorId values.","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator whose invitations should be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request criteria for listing moderator invitations (pagination, filter, status, email, date range, etc.)","typeName":"IWrtnModeratorInvitation.IRequest"},"responseBody":{"description":"Paginated list of invitations created by the moderator, including key metadata and status fields.","typeName":"IPageIWrtnModeratorInvitation.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a single moderator invitation by identifier for a given moderator. It queries the wrtn_moderator_invitations table, scoped by both moderatorId and invitationId. This enables platform administrators and auditors to review specific invitation events issued internally for administrative onboarding or security audits.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/invitations/{invitationId}","method":"get","summary":"Get detailed information for a specific moderator's invitation (wrtn_moderator_invitations table)","description":"Retrieve full detail of an individual moderator invitation by invitationId for a specific moderator given by moderatorId. This is used for exact audit, onboarding workflow validation, or to review the status and history of an invitation, including who issued it, when, the target email, and its audit trail.\n\nSecurity considerations: Only the issuing moderator or an authorized internal administrator can access this endpoint. Both moderatorId and invitationId path parameters must be validated as UUIDs and verified for existence in the wrtn_moderators and wrtn_moderator_invitations tables, respectively. The response maps to the wrtn_moderator_invitations schema and includes all relevant invitation fields and status metadata, related session or audit info as appropriate.\n\nTypical usage includes onboarding dashboards, investigation of onboarding flows, and review of onboarding security incidents. Errors are returned for invalid, missing, or access-violating parameters, and for attempts to reference invitations not owned by the specified moderator.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator who issued the invitation.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the invitation to retrieve, as assigned by the wrtn_moderator_invitations table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed invitation information as stored in the wrtn_moderator_invitations table, including all metadata and status fields.","typeName":"IWrtnModeratorInvitation"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation allows a moderator to invite another internal moderator to join the system. It is based on the wrtn_moderator_invitations table. The endpoint creates a new invitation record, which is linked to the inviting moderator by their moderatorId, and an invitation email is sent. The invitation must include the invitee's email address, which must be system internal and not enterprise-related. The API ensures uniqueness and proper tracking for audit and compliance.\n\nThe invitation contains an optional expiry timestamp, after which it will be invalid if not accepted. Upon creation, the invitation is tracked with the creating moderator's session and referenced by moderator-session linkage for audit and traceability. The operation supports a business workflow for onboarding new internal support/admins and enforces permissions so only actors with moderator rights can execute it. It strictly validates the target email address based on system requirements.\n\nThis API operation is critical for auditability and internal identity management, ensuring invitations are never issued to unauthorized or external email domains. Any failures in uniqueness checks, email validation, or authorization are handled with clear error responses and precise business logic.","description":"This endpoint enables an authenticated moderator to invite another moderator to the Wrtn Enterprise platform. The operation writes a new record into the wrtn_moderator_invitations table. The invited moderator must be referenced by an internal, system-specific email address, and the operation verifies it is not an enterprise-custom email. \n\nThe API tracks the invitation linkage to both the inviting moderator and their current session, supporting audit and compliance requirements essential for Wrtn platform operations. When creating an invitation, the endpoint supports the inclusion of an expiration timestamp, which defaults to seven days out if not set. \n\nSecurity is enforced at all stages: only moderators (as defined in the wrtn_moderators table) are allowed to use this endpoint. Business validation ensures only system-internal emails are processed. The operation's audit trace supports historical analysis and incident investigation for moderator lifecycle events.\n\nError handling is comprehensive: If the email is invalid, already in use, or the moderatorId does not correspond to a valid internal moderator, the API returns a meaningful error. Deletion or cancellation of invitations is managed by a separate endpoint. All operations are fully compliant with relevant audit and security requirements.  \n\nRelated endpoints include those for approving invites, revoking invites, and onboarding new moderators via the invitation flow.","summary":"Create an internal moderator invitation (wrtn_moderator_invitations table)","parameters":[{"name":"moderatorId","description":"Unique identifier of the inviting moderator.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for the moderator invitation including invitee's email and optional expiration.","typeName":"IWrtnModeratorInvitation.ICreate"},"responseBody":{"description":"The detailed invitation record including all audit linkage and status context.","typeName":"IWrtnModeratorInvitation"},"authorizationActors":["moderator"],"name":"create","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/invitations","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing moderator invitation identified by invitationId for a specific moderator, targeting the wrtn_moderator_invitations table. It is typically used to modify fields such as the invitation's expiration time or to cancel the invitation (via the deleted_at field). The moderatorId path parameter ensures that only the correct moderator may modify their own invitations.\n\nThe operation enforces business and security validation, including ensuring that only moderator actors may update invitations, and that an invitation can only be updated if not already expired or deleted. Expiration updates and cancellations are audit-logged with linkage back to both the moderator and the original session as required for compliance. \n\nIf the invitation is set to be cancelled, the operation marks the invitation as deleted by timestamping the deleted_at field. All updates are tightly validated so no unauthorized or invalid changes may be made. Detailed error handling is in place to ensure that attempts to change invitations that do not exist, are already expired/deleted, or are not accessible by the acting moderator return meaningful errors.","description":"This endpoint allows a moderator to update an existing invitation to another moderator, referenced by both moderatorId and invitationId. Update operations most commonly involve extending or editing the expiry time for the invitation, or marking the invitation as cancelled (deleted_at).\n\nThe API strictly validates that the invitation exists, is associated with the given moderatorId, and has not yet expired or been deleted. Permission checks ensure only authorized moderators can update their invitations. Audit trail requirements are fulfilled by recording the nature and context of all changes, preserving full traceability for security and compliance reviews.\n\nIf cancelling, the invitation's deleted_at field is set to the current timestamp, making it unavailable for future onboarding actions. An attempt to update a nonexistent or already-finalized invitation yields a specific error response. Related workflows include invite creation, deletion, and onboarding of moderators via invitation acceptance flows.","summary":"Update or cancel a moderator invitation (wrtn_moderator_invitations table)","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator owner of the invitation.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the moderator invitation to update or cancel.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the invitation record, such as expiration or marking as cancelled.","typeName":"IWrtnModeratorInvitation.IUpdate"},"responseBody":{"description":"The updated invitation record including audit context and updated status.","typeName":"IWrtnModeratorInvitation"},"authorizationActors":["moderator"],"name":"update","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/invitations/{invitationId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a specific moderator invitation using the invitation's unique identifier. It acts on the wrtn_moderator_invitations table in the database. The invitation can only be deleted by a user with moderator privileges and must match the specified moderator. This operation is used to cancel outstanding moderator onboarding invitations, helping maintain security and accurate invitation status tracking. Audit-trail and compliance requirements are enforced; the deletion is soft-delete (by setting deleted_at) as per schema. The operation validates existence and ownership before deletion and returns appropriate errors for not found or unauthorized requests.","description":"This operation allows a moderator to delete (cancel) a specific onboarding invitation they previously created. The endpoint requires both the moderator's identifier and the specific invitation's identifier as path parameters. Only the moderator who owns the invitation (or an admin with higher privileges) can perform this operation. Upon success, the invitation's deleted_at is set, and it is excluded from future invitation queries, but retained in the database for audit and compliance.\n\nIf the invitation is already used, expired, or deleted, a suitable error is returned. Deletion actions are fully audit-logged, including moderator, session, actor context, and affected invitation ID. This ensures that accidental or unauthorized deletions are impossible. The operation does not remove the record from the database, complying with soft-delete and regulatory requirements.\n\nRelated operations include inviting a new moderator, listing invitations to a moderator, and retrieving an invitation's details for audit. Deleting an invitation before use ensures tighter internal access onboarding control and supports enterprise compliance needs.","summary":"Soft-delete (cancel) a moderator onboarding invitation by ID (wrtn_moderator_invitations table).","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator who owns or created the invitation.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the moderator invitation to delete (wrtn_moderator_invitations.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/invitations/{invitationId}","method":"delete","prerequisites":[]},{"specification":"This operation searches and retrieves a paginated list of all emails associated with a specific moderator account. It operates on the wrtn_moderator_emails table, listing secondary email addresses that can be used for notifications, SSO, or recovery. Supports advanced filtering, sorting, and pagination based on associated moderator. The operation is restricted to users with moderator privileges to ensure privacy and account integrity.","description":"Retrieve a filtered, paginated list of secondary (and primary, if configured) emails linked to a moderator account. This operation is critical for managing notification, SSO, and account recovery email addresses. The endpoint supports advanced filtering (by verification status, creation date, etc.), sorting, and paginated results to accommodate moderators with many associated emails.\n\nAccess to this operation is restricted to authenticated moderators for security. Each listed email entry may display verification status and relevant timestamps. Related operations include adding a new moderator email, removing an email, and re-sending verification. Error handling ensures that attempts by unauthorized users, or references to nonexistent moderators, are rejected with precise errors. The system's audit log captures access events for compliance and traceability.","summary":"Search and list all secondary emails of a moderator (wrtn_moderator_emails table) with filtering and pagination.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator whose email associations will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for email filtering on moderator email addresses.","typeName":"IWrtnModeratorEmail.IRequest"},"responseBody":{"description":"Paginated list of the moderator's secondary email summary information matching search criteria.","typeName":"IPageIWrtnModeratorEmail.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/emails","method":"patch","prerequisites":[]},{"specification":"This operation retrieves a specific moderator email address record by moderator ID and email ID. It is based on the wrtn_moderator_emails table from the Prisma schema and is used to fetch detailed information about a particular email associated with an internal moderator user. This operation supports the need for moderators and administrators to view and manage email addresses tied to moderator accounts. It ensures precise identification through both the moderatorId and emailId, allowing for information retrieval necessary for auditing, SSO management, or notification purposes.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/emails/{emailId}","method":"get","summary":"Retrieve a specific moderator email address associated with a moderator account (wrtn_moderator_emails).","description":"Fetch detailed information about a moderator email address using moderatorId and emailId.\n\nThis endpoint is essential for internal user identity verification, SSO workflow management, and moderator notification channel configuration. It strictly enforces identification of both moderator and the specific email record, reflecting the structure and constraints of wrtn_moderator_emails.\n\nOnly authorized moderator actors can access this API due to the sensitive nature of moderator email records. All access and retrieval actions are recorded in audit logs for compliance and traceability. The response provides full email record details, including verification state and soft-deletion marker if applicable, as described in the Prisma schema comments. Error handling ensures that nonexistent, deleted, or unauthorized accesses are returned as appropriate API errors.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator whose email record is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"emailId","description":"Unique identifier of the email address record to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderator email record including address, verification status, and metadata as defined in wrtn_moderator_emails.","typeName":"IWrtnModeratorEmail"},"authorizationActors":["moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows moderator actors to create a new email record for a specific moderator. The operation is grounded in the wrtn_moderator_emails table within the Prisma schema and enables internal moderator staff to add a verified or unverified email for use in SSO, notification, or compliance tasks. It enforces uniqueness constraints and full audit-trail requirements defined at the database level.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/emails","method":"post","summary":"Add an email address to a moderator account (wrtn_moderator_emails).","description":"Add a new email address to a specified moderator account by moderator ID. This is primarily used for SSO email alias setup, notification configuration, and multi-contact compliance within the Wrtn Enterprise platform.\n\nThe API strictly requires moderator authentication due to the sensitive and privileged nature of moderator email management. The request body must provide the new email, and the internal system enforces uniqueness both per moderator and globally. Any attempted violation of uniqueness or foreign key constraints will return a detailed API error, and all actions are captured in audit/compliance logs.\n\nIf provided, the verified_at property must be a valid ISO 8601 timestamp; otherwise, it can be left null. Soft-delete tracking and full timestamp management are handled according to the wrtn_moderator_emails table design. Successful creation returns the complete moderator email record as described in the Prisma schema, including verification and soft-deletion status.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator to whom the email will be associated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New moderator email address information to be added to the moderator account.","typeName":"IWrtnModeratorEmail.ICreate"},"responseBody":{"description":"The created moderator email record, containing all relevant email and verification information as defined by wrtn_moderator_emails.","typeName":"IWrtnModeratorEmail"},"authorizationActors":["moderator"],"name":"create","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an email address record for a specific internal moderator. The operation applies to the wrtn_moderator_emails table, which links secondary/email addresses to moderator identities for SSO, notification, or compliance workflows. The endpoint allows an authorized administrator to change email fields or perform related update operations on behalf of a moderator, ensuring full audit and traceability within internal support flows. The updated email information must comply with uniqueness and verification constraints as defined in the schema.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/emails/{emailId}","method":"put","summary":"Update an internal moderator's email address information (wrtn_moderator_emails).","description":"Update a specific email address for an internal moderator. This API enables systems or authorized staff to modify a moderator's additional email addresses, typically used for SSO, notification routing, or compliance purposes.\n\nAuthorization is strictly limited to authenticated moderator accounts or privileged support processes. The targeted moderator and emailId must both exist and match organizational constraints. If the specified email is being updated to a new value, the service will validate its uniqueness before persisting. Verification status and soft-deleted states must be handled according to audit policy.\n\nAll changes are fully audit-logged with the acting moderator's session context, ensuring compliance with internal security requirements. System automatically blocks updates that would violate uniqueness, verification, or retention business rules. Related APIs include POST for new moderator emails and DELETE for removal.","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator","schema":{"type":"string","format":"uuid"}},{"name":"emailId","description":"Unique identifier of the moderator email record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator email update data. Must specify fields to update (such as a new email address or verification state) following the IWrtnModeratorEmail.IUpdate DTO scheme.","typeName":"IWrtnModeratorEmail.IUpdate"},"responseBody":{"description":"Returns the updated moderator email record in detail.","typeName":"IWrtnModeratorEmail"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation permanently removes (hard deletes) an email address record from the wrtn_moderator_emails table for a specified internal moderator. Deletion is allowed only for support, administrative, or compliance purposes and must be fully audit-logged. Soft-delete logic is NOT used here: records are actually removed from the database and cannot be recovered. The operation ensures that email is no longer associated with any internal login, SSO, or notification process for the moderator, and all related constraints are enforced.","path":"/wrtnEnterprise/moderator/moderators/{moderatorId}/emails/{emailId}","method":"delete","summary":"Permanently remove an internal moderator's email address (wrtn_moderator_emails).","description":"Delete an email address from a moderator's set of registered emails. This action is only for internal staff and must observe all uniqueness and verification business rules specified in the schema.\n\nUnlike some operations that support soft deletion via a deleted_at marker, this API irreversibly removes the email address record from the database, ensuring that it is no longer used for SSO, notifications, or compliance. Only authenticated and authorized moderator actors may perform this operation, and all deletions are fully audit-logged for compliance. Attempting to delete a non-existent, already removed, or in-use-for-primary-auth email will return an error and not proceed.\n\nRelated APIs include the PUT operation for updating/modifying moderator emails and POST for creating new additional moderator email addresses. Use this API judiciously to ensure system integrity.","parameters":[{"name":"moderatorId","description":"Unique identifier of the target moderator","schema":{"type":"string","format":"uuid"}},{"name":"emailId","description":"Unique identifier of the moderator email record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","prerequisites":[]},{"specification":"This operation searches and retrieves a paginated list of WrtnEnterprise organizations (enterprises) with flexible filtering and sorting options for enterprise administration and support scenarios. It is based on the wrtn_enterprises table, exposing company name, enterprise code, moderator creator, and all relevant enterprise attributes, including soft-deleted filtering if required by business rules. The endpoint is primarily intended for internal moderators (platform admins) to quickly browse, search, or audit enterprise registrations, including code or name filter and temporal filtering by created/updated range.","path":"/wrtnEnterprise/moderator/enterprises","method":"patch","summary":"Search and retrieve a paginated list of WrtnEnterprise enterprises with flexible filters and paging","description":"This API operation provides a comprehensive search interface for platform moderators to discover, audit, or administer WrtnEnterprise organizational registrations. Results can be filtered by company code, name, moderator, creation or update date, and can include or exclude soft-deleted (deactivated) companies according to business rules.\n\nAccess is restricted to moderator (internal staff/admin) actor. The API response includes moderator information for each enterprise, enabling audit and compliance review, as well as robust pagination and sorting for large-scale tenant management scenarios. Each result provides core company identifiers (code, name), creator moderator summary, and high-level onboarding/registration audit fields.\n\nThis operation is tightly integrated with the underlying wrtn_enterprises Prisma model, ensuring every field and relational mapping is reflected properly. Pagination, sorting, and advanced filtering (such as by creator, code, or registration window) are supported. Related endpoints include detail retrieval (GET /enterprises/{enterpriseId}).\n\nTypical usage includes platform support dashboards, compliance audits, and onboarding support.\n\nNote: This operation does not expose or allow direct mutation of underlying enterprise records; it is strictly for filtered search and read-only enumeration.","parameters":[],"requestBody":{"description":"Search and pagination/filter conditions for WrtnEnterprise organization enumeration. Typically includes fields like code, name, created_at range, updated_at range, creator moderator, and deletion/existence status.","typeName":"IWrtnEnterprise.IRequest"},"responseBody":{"description":"Paginated list of WrtnEnterprise enterprise company information, including creator moderator summary and company core identifiers.","typeName":"IPageIWrtnEnterprise.ISummary"},"authorizationActors":["moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific WrtnEnterprise organization (enterprise) identified by enterpriseId. It exposes all major fields from the wrtn_enterprises table and includes key relational mappings to the creator moderator and audit session. This endpoint is required for moderator (internal admin) use cases such as tenant audit, onboarding status review, organization management, and compliance investigations.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}","method":"get","summary":"Retrieve detailed information for a specific WrtnEnterprise organization (enterprise) by enterpriseId","description":"This API endpoint allows platform moderators to query and review the full profile for a particular WrtnEnterprise company. It provides the enterprise's core business attributes (unique code, legal name), creator moderator and session associations (with summary), timestamps for audit, and soft-delete/active status as appropriate.\n\nThe result includes all defined fields in the wrtn_enterprises schema and all required relations, ensuring traceability and full data completeness for compliance, onboarding flow tracking, or incident investigations. Permissions are limited to moderator (internal staff/admin) actor. Related operations include the paginated search (PATCH /enterprises).\n\nIn case the specified enterprise does not exist or is soft-deleted (depending on business logic and requested filter), a 404 error will be returned for non-accessible records. This endpoint is foundational for all moderator/administrator detail panels and onboarding audit screens.","parameters":[{"name":"enterpriseId","description":"Unique identifier for the WrtnEnterprise organization to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full profile and metadata of the WrtnEnterprise organization including all core properties and summary of creator moderator.","typeName":"IWrtnEnterprise"},"authorizationActors":["moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new enterprise (customer company/tenant) in the system. It operates on the wrtn_enterprises Prisma table. This endpoint is used by a moderator (internal staff) to provision a new enterprise, requiring unique company name, code, and linkage to the creating moderator. It enforces uniqueness of code and name, captures audit-trail metadata (moderator/session), and supports atomic creation (company + first master employee appointment if needed).\n\nAll required data must be present and valid for the creation to succeed; if any validation fails (duplicate code/name, invalid moderator/session), the process is rejected without persisting any partial data. Audit trail entries are recorded for compliance. The created enterprise serves as the root scope for data isolation, employee onboarding, and all customer operations.","path":"/wrtnEnterprise/moderator/enterprises","method":"post","summary":"Create a new WrtnEnterprise enterprise (company/tenant) as the system root entity","description":"This API operation provisions a new enterprise (customer company/tenant) within the WrtnEnterprise multi-tenant SaaS platform. It requires a moderator (internal operator) to supply legal entity information, including a unique company code, official name, and linkage to the initiating moderator and session for audit and regulatory compliance.\n\nOn successful validation of all fields (unambiguous uniqueness of code, valid company name, and valid audit-trace session), the enterprise is created, and may trigger auto-assignment of the first master employee based on additional business workflow. The operation is strictly atomic: if any validation fails (e.g. code/name already exists, missing/invalid moderator/session) no data is persisted. All registration attempts, successes, and error states are logged for audit.\n\nThis operation is part of the robust organizational onboarding required by modern B2B SaaS, ensuring every company is isolated, traceable, and compliant with regulatory and internal business policies. Only moderator actors are permitted to use this API, reflecting its privileged nature and the need for audit-grade traceability.\n\nOther operations that may be used in conjunction with this API include employee appointment, onboarding, and audit log review operations.","parameters":[],"requestBody":{"description":"Enterprise registration payload, including legal entity and unique code/name. The request body must match IWrtnEnterprise.ICreate DTO with required fields for company provisioning.","typeName":"IWrtnEnterprise.ICreate"},"responseBody":{"description":"Detailed WrtnEnterprise enterprise object representing the newly created company entity, including all key fields for root business scope. Conforms to IWrtnEnterprise, with all FK relations mapped to objects.","typeName":"IWrtnEnterprise"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation updates the root metadata (company name, code, and related attributes) of an existing enterprise entity. It operates on the wrtn_enterprises Prisma table, and is restricted to moderator actors. The operation requires full entity identification by enterprise ID, enforces uniqueness constraints on code and name, and captures audit logging of all changes, including actor/session linkage for compliance.\n\nThis endpoint allows correcting legal entity information or business code after initial provisioning, subject to business constraints and permission checks. All changes are timestamped and preserved for compliance and operational audit.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}","method":"put","summary":"Update existing WrtnEnterprise enterprise legal info, code, or company name","description":"This API endpoint allows moderator actors to update the legal entity data for an existing WrtnEnterprise enterprise, including its company code and official name. This operation is used for correcting registration data, compliance updates, or business-driven rebranding/identifier changes, subject to the system's uniqueness invariants for enterprise code and name.\n\nThe operation enforces strict identification of the enterprise by its unique ID (enterpriseId path parameter). All changes are uniquely audited and timestamped to ensure regulatory compliance and traceability, including audit linkage to the moderator and session. If the new code or name does not pass uniqueness validation, the request is rejected, and no update occurs. Only moderator actors (internal operations) may access this endpoint, and all updates are logged for audit.\n\nPotential failure scenarios include attempting to update to a duplicate code/name, missing or invalid enterpriseId, or insufficient permissions. The endpoint provides comprehensive error feedback for these business rule violations.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise company/tenant to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating company legal info, code, or name. The request body must match IWrtnEnterprise.IUpdate DTO.","typeName":"IWrtnEnterprise.IUpdate"},"responseBody":{"description":"Updated WrtnEnterprise enterprise object, including new legal entity data, with FK relations mapped as objects. Conforms to IWrtnEnterprise.","typeName":"IWrtnEnterprise"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes an enterprise from the system database, removing all associated data, including employees, teams, and resources related to the specified enterprise. It operates on the wrtn_enterprises table and is considered a hard delete, as indicated by the lack of a soft delete field in the schema. Deletion should be handled carefully to ensure that all relationships are addressed and data consistency is maintained. This is designed for internal moderator (admin) use only, with full compliance and audit trail requirements as described in the business documentation.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}","method":"delete","description":"Permanently remove an enterprise record from the system. This API is used when an enterprise customer needs to be completely erased from the platform, including all of its employees, teams, chat sessions, procedure records, and other associated resources. \n\nAuthorization is restricted to moderator (admin) actors. Every delete operation is subject to audit and traceability: the actor, session ID, timestamp, and action must be recorded in the audit trail to satisfy compliance requirements. Once executed, the removal action cannot be undone and all subordinate entities must be deleted or their relationships nullified to prevent orphaned data in line with database integrity constraints.\n\nThis endpoint cannot be used for partial or soft deletion. All business invariants, validation, and precondition checks (such as ensuring the enterprise is not subject to a legal hold or ongoing billing) must be performed before deletion. Any attempt to remove an enterprise in violation of such business constraints should result in a precise error indicating the reason for failure. This operation relates strictly to the wrtn_enterprises table as defined in the Prisma schema.","summary":"Permanently delete an enterprise by ID from the system database (wrtn_enterprises table).","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of employees belonging to a specific enterprise, allowing advanced queries such as search by email, name, role/title, and approval status. The operation queries the wrtn_enterprise_employees table and supports complex pagination and sorting for administrative and audit workflows. Moderators use this endpoint to search or audit employees for a particular enterprise; it is also accessible to master and manager employees in the enterprise context, but never to the general public.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees","method":"patch","description":"Fetch a paginated, filtered list of employees for the specified enterprise. This endpoint enables authorized actors to search, audit, and analyze employees according to multiple criteria: partial name or email, business title (master/manager/member), approval status, and account lifecycle state.\n\nSupports advanced pagination, including custom page sizes, page navigation, and sorting by registration date, last update, or title. Filters can be applied for exact or partial matches, and roles/titles can be queried for master/manager/member distinctions. The operation links results to the enterprise by ID and ensures full compliance with enterprise isolation and audit trail business requirements.\n\nAuthorization checks must be performed: moderators can view all enterprises’ employees; employees can only access data for their own enterprise. The request and response directly map to the wrtn_enterprise_employees table and ISummary DTO variant for secure and efficient business operations.","summary":"Retrieve a paginated, filtered list of employees for an enterprise (wrtn_enterprise_employees table).","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise whose employees will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filtering criteria for employee retrieval, including pagination, query fields, and sort options.","typeName":"IWrtnEnterpriseEmployee.IRequest"},"responseBody":{"description":"Paginated result of employee summary data, filtered and sorted per the search criteria for the specified enterprise.","typeName":"IPageIWrtnEnterpriseEmployee.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of employees belonging to a specific enterprise, allowing advanced queries such as search by email, name, role/title, and approval status. The operation queries the wrtn_enterprise_employees table and supports complex pagination and sorting for administrative and audit workflows. Moderators use this endpoint to search or audit employees for a particular enterprise; it is also accessible to master and manager employees in the enterprise context, but never to the general public.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees","method":"patch","description":"Fetch a paginated, filtered list of employees for the specified enterprise. This endpoint enables authorized actors to search, audit, and analyze employees according to multiple criteria: partial name or email, business title (master/manager/member), approval status, and account lifecycle state.\n\nSupports advanced pagination, including custom page sizes, page navigation, and sorting by registration date, last update, or title. Filters can be applied for exact or partial matches, and roles/titles can be queried for master/manager/member distinctions. The operation links results to the enterprise by ID and ensures full compliance with enterprise isolation and audit trail business requirements.\n\nAuthorization checks must be performed: moderators can view all enterprises’ employees; employees can only access data for their own enterprise. The request and response directly map to the wrtn_enterprise_employees table and ISummary DTO variant for secure and efficient business operations.","summary":"Retrieve a paginated, filtered list of employees for an enterprise (wrtn_enterprise_employees table).","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise whose employees will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filtering criteria for employee retrieval, including pagination, query fields, and sort options.","typeName":"IWrtnEnterpriseEmployee.IRequest"},"responseBody":{"description":"Paginated result of employee summary data, filtered and sorted per the search criteria for the specified enterprise.","typeName":"IPageIWrtnEnterpriseEmployee.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves a detailed profile of a specific employee within a given enterprise. It is based on the wrtn_enterprise_employees table, which represents individual staff members belonging to a single customer enterprise. The API fetches all available employee details, including foreign-key relations (enterprise, team companions), title, approval dates, and audit attributes. The response strictly adheres to AutoBE’s DTO mapping rules, ensuring that all FK references are mapped to summary objects for their respective entities. The operation is primarily intended for administrative or member-facing UI to view employee state, audit relevant details, and understand team memberships for permission and onboarding management purposes.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}","method":"get","summary":"Retrieve detailed information for a specific employee within an enterprise","description":"This API operation provides a comprehensive profile of the requested employee within the context of their enterprise. The endpoint requires both the enterpriseId and employeeId as path parameters, ensuring data isolation and proper query scoping. The result includes all primary fields from the wrtn_enterprise_employees schema, but also incorporates essential related data such as the employee's current enterprise summary object and all their team companion memberships via structured summary DTOs. \n\nPermission to access this endpoint is determined by business rules: typically, the authenticated employee themselves, their managers, or moderators (see permission matrix). The response exposes business and audit fields such as approval status, title (master/manager/member), join/update dates, and current team companion list. This ensures that consuming clients can accurately display both status and organizational structure.\n\nBusiness logic automatically ensures that sensitive data within the response is appropriately filtered to match the requesting actor's authorization level, preventing unauthorized information disclosure. All data is fetched atomically for both auditability and performance. Errors due to nonexistent employeeId, enterpriseId mismatch, or permission breach produce clearly stated error responses.\n\nRelated operations: use PATCH /enterprises/{enterpriseId}/employees for search/filter, and GET /enterprises/{enterpriseId}/employees/{employeeId}/personas for persona detail views.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise context in which the employee exists","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the target employee to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed employee profile with all business and audit fields, including enterprise summary and team membership companions","typeName":"IWrtnEnterpriseEmployee"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a detailed profile of a specific employee within a given enterprise. It is based on the wrtn_enterprise_employees table, which represents individual staff members belonging to a single customer enterprise. The API fetches all available employee details, including foreign-key relations (enterprise, team companions), title, approval dates, and audit attributes. The response strictly adheres to AutoBE’s DTO mapping rules, ensuring that all FK references are mapped to summary objects for their respective entities. The operation is primarily intended for administrative or member-facing UI to view employee state, audit relevant details, and understand team memberships for permission and onboarding management purposes.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees/{employeeId}","method":"get","summary":"Retrieve detailed information for a specific employee within an enterprise","description":"This API operation provides a comprehensive profile of the requested employee within the context of their enterprise. The endpoint requires both the enterpriseId and employeeId as path parameters, ensuring data isolation and proper query scoping. The result includes all primary fields from the wrtn_enterprise_employees schema, but also incorporates essential related data such as the employee's current enterprise summary object and all their team companion memberships via structured summary DTOs. \n\nPermission to access this endpoint is determined by business rules: typically, the authenticated employee themselves, their managers, or moderators (see permission matrix). The response exposes business and audit fields such as approval status, title (master/manager/member), join/update dates, and current team companion list. This ensures that consuming clients can accurately display both status and organizational structure.\n\nBusiness logic automatically ensures that sensitive data within the response is appropriately filtered to match the requesting actor's authorization level, preventing unauthorized information disclosure. All data is fetched atomically for both auditability and performance. Errors due to nonexistent employeeId, enterpriseId mismatch, or permission breach produce clearly stated error responses.\n\nRelated operations: use PATCH /enterprises/{enterpriseId}/employees for search/filter, and GET /enterprises/{enterpriseId}/employees/{employeeId}/personas for persona detail views.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise context in which the employee exists","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the target employee to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed employee profile with all business and audit fields, including enterprise summary and team membership companions","typeName":"IWrtnEnterpriseEmployee"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new employee account within the target enterprise, performing onboarding according to the business rules for employee lifecycle management in wrtn_enterprise_employees. The API is exclusively used by authorized actors (such as company masters, managers, or moderators) to programmatically add a new employee to their organization. This ensures that all data is validated for uniqueness (e.g., email must be unique within the enterprise), proper title is assigned (master, manager, or member), and all onboarding information is provided atomically for audit trail requirements. Upon successful completion, the enterprise will have a new approved employee ready for further action (e.g., team assignment or persona setup).","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees","method":"post","summary":"Create a new employee account within the enterprise","description":"This API operation allows enterprise administrators or authorized moderators to add a new employee to the designated enterprise. The operation expects a fully-formed onboarding payload using the IWrtnEnterpriseEmployee.ICreate DTO, which requires essential details such as email, password hash, display name, and (optionally) title. \n\nUpon invocation, business validation logic ensures that the provided email does not conflict with existing enterprise records, that all mandatory fields are supplied, and that the actor has permission to appoint the chosen title (e.g., master can appoint any role, manager can appoint manager or member, member cannot appoint). Audit trail entries are generated for all onboarding actions.\n\nIf onboarding fails due to invalid data, duplicate email, or a permission violation, the system issues clear error messages explaining the actionable correction. Upon success, the created employee is available for login and full enterprise participation, with all audit, approval, and onboarding timestamps recorded.\n\nSecurity: Only allow actors with explicit onboarding privileges in the target enterprise (typically master/manager role or moderator actor for onboarding support flows). Rate limit onboarding operations to prevent abuse. Always hash user passwords and never log them in cleartext or return them in any response. \n\nSee PATCH /enterprises/{enterpriseId}/employees for onboarding search/view, and GET /enterprises/{enterpriseId}/employees/{employeeId} for verification or audit.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise where the new employee will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All required onboarding information for employee creation","typeName":"IWrtnEnterpriseEmployee.ICreate"},"responseBody":{"description":"The fully created and approved employee, including summary fields and onboarding history, for display or audit purposes","typeName":"IWrtnEnterpriseEmployee"},"authorizationActors":["moderator","employee"],"name":"create","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new employee account within the target enterprise, performing onboarding according to the business rules for employee lifecycle management in wrtn_enterprise_employees. The API is exclusively used by authorized actors (such as company masters, managers, or moderators) to programmatically add a new employee to their organization. This ensures that all data is validated for uniqueness (e.g., email must be unique within the enterprise), proper title is assigned (master, manager, or member), and all onboarding information is provided atomically for audit trail requirements. Upon successful completion, the enterprise will have a new approved employee ready for further action (e.g., team assignment or persona setup).","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees","method":"post","summary":"Create a new employee account within the enterprise","description":"This API operation allows enterprise administrators or authorized moderators to add a new employee to the designated enterprise. The operation expects a fully-formed onboarding payload using the IWrtnEnterpriseEmployee.ICreate DTO, which requires essential details such as email, password hash, display name, and (optionally) title. \n\nUpon invocation, business validation logic ensures that the provided email does not conflict with existing enterprise records, that all mandatory fields are supplied, and that the actor has permission to appoint the chosen title (e.g., master can appoint any role, manager can appoint manager or member, member cannot appoint). Audit trail entries are generated for all onboarding actions.\n\nIf onboarding fails due to invalid data, duplicate email, or a permission violation, the system issues clear error messages explaining the actionable correction. Upon success, the created employee is available for login and full enterprise participation, with all audit, approval, and onboarding timestamps recorded.\n\nSecurity: Only allow actors with explicit onboarding privileges in the target enterprise (typically master/manager role or moderator actor for onboarding support flows). Rate limit onboarding operations to prevent abuse. Always hash user passwords and never log them in cleartext or return them in any response. \n\nSee PATCH /enterprises/{enterpriseId}/employees for onboarding search/view, and GET /enterprises/{enterpriseId}/employees/{employeeId} for verification or audit.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise where the new employee will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All required onboarding information for employee creation","typeName":"IWrtnEnterpriseEmployee.ICreate"},"responseBody":{"description":"The fully created and approved employee, including summary fields and onboarding history, for display or audit purposes","typeName":"IWrtnEnterpriseEmployee"},"authorizationActors":["moderator","employee"],"name":"create","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates information for a specific employee belonging to an enterprise. It leverages the wrtn_enterprise_employees table, allowing changes to employee details such as email, name, password, and title. The operation ensures that only authorized moderators or enterprise masters/managers can perform updates, enforcing full audit trail in accordance with compliance requirements. Requests must include all relevant parameters needed to identify the enterprise and employee.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees/{employeeId}","method":"put","summary":"Update attributes of a specific enterprise employee (wrtn_enterprise_employees table)","description":"This API endpoint allows for updating a specific employee’s profile within a target enterprise, referencing the wrtn_enterprise_employees Prisma schema table. Updates may include modifying the employee’s display name, email, password (hashed by the backend), and business title. \n\nOnly authorized actors, such as moderators or employees with sufficient privileges (master/manager), may perform this operation in accordance with enterprise permissions. All update actions are captured in the audit log, including user/session context and change tracking for regulatory compliance.\n\nThe operation requires both the enterprise ID and the employee ID as path parameters, which must be valid UUIDs. Attempting to update a non-existent or terminated employee will result in an error. Updates to the employee’s title must comply with internal business logic (e.g., a member cannot promote themselves to manager/master).","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise for which the employee belongs.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the employee being modified.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New attributes to apply to the specified enterprise employee. Only modifiable fields (name, email, password, and title) may be updated through this endpoint. The passed object must comply with the IWrtnEnterpriseEmployee.IUpdate schema variant.","typeName":"IWrtnEnterpriseEmployee.IUpdate"},"responseBody":{"description":"The updated enterprise employee record after modifications with resolved relationship information and summaries as per the response DTO.","typeName":"IWrtnEnterpriseEmployee"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation updates information for a specific employee belonging to an enterprise. It leverages the wrtn_enterprise_employees table, allowing changes to employee details such as email, name, password, and title. The operation ensures that only authorized moderators or enterprise masters/managers can perform updates, enforcing full audit trail in accordance with compliance requirements. Requests must include all relevant parameters needed to identify the enterprise and employee.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}","method":"put","summary":"Update attributes of a specific enterprise employee (wrtn_enterprise_employees table)","description":"This API endpoint allows for updating a specific employee’s profile within a target enterprise, referencing the wrtn_enterprise_employees Prisma schema table. Updates may include modifying the employee’s display name, email, password (hashed by the backend), and business title. \n\nOnly authorized actors, such as moderators or employees with sufficient privileges (master/manager), may perform this operation in accordance with enterprise permissions. All update actions are captured in the audit log, including user/session context and change tracking for regulatory compliance.\n\nThe operation requires both the enterprise ID and the employee ID as path parameters, which must be valid UUIDs. Attempting to update a non-existent or terminated employee will result in an error. Updates to the employee’s title must comply with internal business logic (e.g., a member cannot promote themselves to manager/master).","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise for which the employee belongs.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the employee being modified.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New attributes to apply to the specified enterprise employee. Only modifiable fields (name, email, password, and title) may be updated through this endpoint. The passed object must comply with the IWrtnEnterpriseEmployee.IUpdate schema variant.","typeName":"IWrtnEnterpriseEmployee.IUpdate"},"responseBody":{"description":"The updated enterprise employee record after modifications with resolved relationship information and summaries as per the response DTO.","typeName":"IWrtnEnterpriseEmployee"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes (or soft-deletes, depending on the business logic) a specific employee within an enterprise. It directly affects the wrtn_enterprise_employees table, setting the deleted_at field for soft deletion (never irreparable hard-deletion unless required for compliance). Only authorized actors can perform this action, and all actions are traced via the audit log for compliance and accountability.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees/{employeeId}","method":"delete","summary":"Erase (soft delete) a specific enterprise employee (wrtn_enterprise_employees table)","description":"This API endpoint erases a single employee from a target enterprise by marking the employee as deleted (soft deletion) instead of removing the database record. The operation works with the wrtn_enterprise_employees table as defined in the Prisma schema, leveraging the deleted_at column to indicate being terminated or offboarded from the enterprise workforce.\n\nOnly authorized actors such as moderators or enterprise masters/managers may erase an employee. The API enforces compliance with all business logic, ensuring traceability via audit trails. All related session tokens are revoked, and the employee’s access to enterprise resources is immediately blocked. If an attempt is made to delete an employee already marked as deleted, the operation returns an appropriate error.\n\nPath parameters enterpriseId and employeeId are required and must reference valid UUIDs. All erase actions are fully tracked for legal retention, and actual hard deletion is never performed unless mandated by regulatory compliance.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise for which the employee belongs.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the employee to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","prerequisites":[]},{"specification":"This operation permanently deletes (or soft-deletes, depending on the business logic) a specific employee within an enterprise. It directly affects the wrtn_enterprise_employees table, setting the deleted_at field for soft deletion (never irreparable hard-deletion unless required for compliance). Only authorized actors can perform this action, and all actions are traced via the audit log for compliance and accountability.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}","method":"delete","summary":"Erase (soft delete) a specific enterprise employee (wrtn_enterprise_employees table)","description":"This API endpoint erases a single employee from a target enterprise by marking the employee as deleted (soft deletion) instead of removing the database record. The operation works with the wrtn_enterprise_employees table as defined in the Prisma schema, leveraging the deleted_at column to indicate being terminated or offboarded from the enterprise workforce.\n\nOnly authorized actors such as moderators or enterprise masters/managers may erase an employee. The API enforces compliance with all business logic, ensuring traceability via audit trails. All related session tokens are revoked, and the employee’s access to enterprise resources is immediately blocked. If an attempt is made to delete an employee already marked as deleted, the operation returns an appropriate error.\n\nPath parameters enterpriseId and employeeId are required and must reference valid UUIDs. All erase actions are fully tracked for legal retention, and actual hard deletion is never performed unless mandated by regulatory compliance.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise for which the employee belongs.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the employee to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","prerequisites":[]},{"specification":"This operation searches and retrieves a filtered, paginated list of persona configurations for a specific employee within an enterprise. It operates on the wrtn_enterprise_employee_personas table, supporting advanced search, filtering, and sorting by various criteria such as persona name, creation date, tone, or web search/suggestion flags. This enables enterprise staff or system administrators to efficiently review and manage all persona definitions associated with an employee, which are required for AI Chatbot context selection. The operation enforces strict organizational and actor boundary checks to ensure only permitted actors (employee themselves or privileged moderator) can access this information, complying with business logic for privacy and auditability. The response provides a count, page structure, and summary views of each persona.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}/personas","method":"patch","summary":"Search and retrieve a filtered, paginated list of employee personas for chatbot usage within an enterprise","description":"Retrieve a filtered and paginated list of persona settings for a specified employee within the context of an enterprise. This operation is vital for AI chatbot personalization, as it enables the employee or authorized moderator to browse, search, and select from their available persona configurations.\n\nThe list supports advanced filtering, such as partial name matches, tone or configuration options, and can be sorted by creation date or usage recency. Pagination controls allow efficient browsing for employees with many persona definitions. Each persona summary in the response includes avatar, display name, enabled features, and creation/modification history, but does not expose sensitive memory or prompt configurations unless additional permissions are granted.\n\nSecurity is ensured by verifying that the actor is either the target employee or a privileged moderator, and all accesses are audit-logged for compliance. Only personas scoped to the employee and enterprise are available in the result. This API integrates with the wrtn_enterprise_employee_personas table as defined in the Prisma schema, referencing all relevant fields, and supports strict actor separation for organizational privacy.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the target employee within the enterprise","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination options for persona listing. May include fields such as persona name, tone, creation date range, and flag for web search or auto suggestion.","typeName":"IWrtnEnterpriseEmployeePersona.IRequest"},"responseBody":{"description":"Paginated list of persona summaries for the specified employee, supporting search and pagination. Each persona summary contains basic persona properties, avatar, and creation metadata but excludes sensitive memory or prompt details for privacy.","typeName":"IPageIWrtnEnterpriseEmployeePersona.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation searches and retrieves a filtered, paginated list of persona configurations for a specific employee within an enterprise. It operates on the wrtn_enterprise_employee_personas table, supporting advanced search, filtering, and sorting by various criteria such as persona name, creation date, tone, or web search/suggestion flags. This enables enterprise staff or system administrators to efficiently review and manage all persona definitions associated with an employee, which are required for AI Chatbot context selection. The operation enforces strict organizational and actor boundary checks to ensure only permitted actors (employee themselves or privileged moderator) can access this information, complying with business logic for privacy and auditability. The response provides a count, page structure, and summary views of each persona.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees/{employeeId}/personas","method":"patch","summary":"Search and retrieve a filtered, paginated list of employee personas for chatbot usage within an enterprise","description":"Retrieve a filtered and paginated list of persona settings for a specified employee within the context of an enterprise. This operation is vital for AI chatbot personalization, as it enables the employee or authorized moderator to browse, search, and select from their available persona configurations.\n\nThe list supports advanced filtering, such as partial name matches, tone or configuration options, and can be sorted by creation date or usage recency. Pagination controls allow efficient browsing for employees with many persona definitions. Each persona summary in the response includes avatar, display name, enabled features, and creation/modification history, but does not expose sensitive memory or prompt configurations unless additional permissions are granted.\n\nSecurity is ensured by verifying that the actor is either the target employee or a privileged moderator, and all accesses are audit-logged for compliance. Only personas scoped to the employee and enterprise are available in the result. This API integrates with the wrtn_enterprise_employee_personas table as defined in the Prisma schema, referencing all relevant fields, and supports strict actor separation for organizational privacy.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the target employee within the enterprise","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination options for persona listing. May include fields such as persona name, tone, creation date range, and flag for web search or auto suggestion.","typeName":"IWrtnEnterpriseEmployeePersona.IRequest"},"responseBody":{"description":"Paginated list of persona summaries for the specified employee, supporting search and pagination. Each persona summary contains basic persona properties, avatar, and creation metadata but excludes sensitive memory or prompt details for privacy.","typeName":"IPageIWrtnEnterpriseEmployeePersona.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed configuration of a specific persona belonging to an employee under an enterprise. It uses the wrtn_enterprise_employee_personas table and all associated attributes, providing the full persona structure necessary for chatbot context or automatic session selection. The operation enforces both enterprise and employee scoping, ensuring data isolation, and implements strict access controls to allow only the persona's owner employee or a privileged moderator to view this configuration. The API is compliant with audit and privacy requirements, providing a comprehensive persona view including avatar, personality parameters, web search/auto suggestion options, tone, prompt, and optional memory data.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}/personas/{personaId}","method":"get","summary":"Retrieve the detailed configuration for a specific employee persona within an enterprise","description":"Fetches the full detailed configuration of a specific persona for a designated employee under an enterprise. This operation delivers all fields present in the wrtn_enterprise_employee_personas table, including avatar image, display name, tone, prompt, memory, and enabled options such as web search or auto question suggestion. This operation is critical for chatbot initialization, persona management, and review flows, where precise persona details are required.\n\nSecurity logic ensures that only the persona's owner employee (actor type: employee, identity verified) or a privileged moderator (actor type: moderator) are allowed to access this configuration. The endpoint strictly checks that the persona belongs to the specified employee and enterprise, enforcing organizational boundary isolation and actor/role separation. All access events are audit-logged under compliance policy. Error handling ensures that if the persona does not belong to the employee or is soft-deleted, a not found or forbidden error is returned. This API is built directly from the wrtn_enterprise_employee_personas schema, faithfully exposing fields as described in that entity's description comments.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the target employee within the enterprise","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier of the persona belonging to the employee","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed persona configuration including all display, avatar, personality, and memory/prompt settings as defined in schema. Returns the full persona object for chatbot initialization or management review.","typeName":"IWrtnEnterpriseEmployeePersona"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed configuration of a specific persona belonging to an employee under an enterprise. It uses the wrtn_enterprise_employee_personas table and all associated attributes, providing the full persona structure necessary for chatbot context or automatic session selection. The operation enforces both enterprise and employee scoping, ensuring data isolation, and implements strict access controls to allow only the persona's owner employee or a privileged moderator to view this configuration. The API is compliant with audit and privacy requirements, providing a comprehensive persona view including avatar, personality parameters, web search/auto suggestion options, tone, prompt, and optional memory data.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employees/{employeeId}/personas/{personaId}","method":"get","summary":"Retrieve the detailed configuration for a specific employee persona within an enterprise","description":"Fetches the full detailed configuration of a specific persona for a designated employee under an enterprise. This operation delivers all fields present in the wrtn_enterprise_employee_personas table, including avatar image, display name, tone, prompt, memory, and enabled options such as web search or auto question suggestion. This operation is critical for chatbot initialization, persona management, and review flows, where precise persona details are required.\n\nSecurity logic ensures that only the persona's owner employee (actor type: employee, identity verified) or a privileged moderator (actor type: moderator) are allowed to access this configuration. The endpoint strictly checks that the persona belongs to the specified employee and enterprise, enforcing organizational boundary isolation and actor/role separation. All access events are audit-logged under compliance policy. Error handling ensures that if the persona does not belong to the employee or is soft-deleted, a not found or forbidden error is returned. This API is built directly from the wrtn_enterprise_employee_personas schema, faithfully exposing fields as described in that entity's description comments.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the target employee within the enterprise","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier of the persona belonging to the employee","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed persona configuration including all display, avatar, personality, and memory/prompt settings as defined in schema. Returns the full persona object for chatbot initialization or management review.","typeName":"IWrtnEnterpriseEmployeePersona"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new persona for a specified enterprise employee. It operates on the wrtn_enterprise_employee_personas table in the Prisma schema. Persona creation requires a reference to the parent enterprise and target employee, as well as all configuration data required for chatbot persona definition, including avatar image, name, tone, activation flags, and optional custom memory or prompt. The session context is automatically linked via the authenticated employee session. Only an employee within the enterprise with authorization to manage their own persona configurations can perform this action. Persona records are append-only; updating a persona requires creating a new record and soft-deletion of previous personas (i.e., persona revisions are versioned). Upon success, the created persona's summary information is returned.","description":"This endpoint creates a new persona for the specified enterprise employee within an enterprise context. The persona model stores configuration data for AI Chatbot session customization, such as avatar image, name, tone, web search and suggestion flags, memory, and custom prompts. The new persona is always attributable to the specific employee and is session-audited for compliance and traceability.\n\nOnly the target employee themselves may create a persona entry (no other employee or moderator can create it on their behalf), and all persona records are append-only to allow for audit-compliant revision tracking. attempt to create a persona by users outside the authorized employee session will be rejected. If a persona with the same configuration already exists, a new version is still created to ensure audit trail completeness and rollback capability. All persona data are encrypted as per business requirements in the underlying database.\n\nIf the input persona information fails validation (e.g., missing avatar image, empty name, invalid tone), the system returns an actionable error message. Persona creation is atomic; partial persona creation is not permitted. The endpoint references the wrtn_enterprise_employee_personas model in the Prisma database and must ensure all relevant fields are present as defined in the schema comments. The response provides a summary representation of the created persona for client display and workflow continuation.","summary":"Create a new persona for a specific enterprise employee (wrtn_enterprise_employee_personas) and return its summary information.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise to which the employee belongs.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the employee for whom the persona is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Persona configuration information to be created, following the persona creation structure for an employee.","typeName":"IWrtnEnterpriseEmployeePersona.ICreate"},"responseBody":{"description":"Summary information about the newly created persona.","typeName":"IWrtnEnterpriseEmployeePersona.ISummary"},"authorizationActors":["employee"],"path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}/personas","method":"post","name":"create","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the configuration of an employee persona for a specified enterprise employee. The operation works on the wrtn_enterprise_employee_personas table within the Prisma schema. However, in compliance with system versioning policy, persona updates are performed by creating a new persona revision with the updated data and marking any prior persona as deleted (soft-deletion). All persona change events are session-audited for compliance. Only the persona owner (the employee) may perform this operation, and all input fields are subject to validation.\n\nThe endpoint requires enterprise, employee, and persona identifiers in the URL path, and expects the new persona data in the request body. If an invalid persona ID is provided, a 404 Not Found is returned. The response contains the summary of the updated persona version. If the update data is identical to the last version, a new revision is still created for compliance traceability and rollback. All historical revisions are soft-deleted but retained for audit. The operation references all relevant fields as defined in the wrtn_enterprise_employee_personas schema with data types and constraints.","description":"This endpoint creates a new revision for an existing employee persona by the specified employee within a specified enterprise. The request fully replaces the persona settings, creating a new persona entry and setting the previous version as soft-deleted. The persona revision is attributed to the authenticated session of the employee to ensure auditability.\n\nOnly the persona's owner can update (revise) their persona settings; updates by other employees or moderators are prohibited and will be rejected. Persona update requests must include all required configuration parameters; partial updates are not supported. Attempting to update a non-existent persona or providing invalid identifiers results in an actionable error. As personas are versioned, no update is performed in place; every call creates a new revision, and the prior version is soft-deleted. All changes are recorded for compliance retention.\n\nValid persona configuration includes avatar image, name, tone, and optional parameters, exactly as in the creation structure. The endpoint strictly follows the field definitions and business context from the wrtn_enterprise_employee_personas Prisma model, with all changes traceable in audit logs.","summary":"Update (revise) an employee's persona by creating a new version in wrtn_enterprise_employee_personas and returning the summary of the updated persona.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise to which the employee belongs.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the employee whose persona is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier of the persona to update (for audit and versioning).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated persona configuration. The full replacement settings for the employee's persona; partial update is not supported.","typeName":"IWrtnEnterpriseEmployeePersona.IUpdate"},"responseBody":{"description":"Summary information about the updated persona version.","typeName":"IWrtnEnterpriseEmployeePersona.ISummary"},"authorizationActors":["employee"],"path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}/personas/{personaId}","method":"put","name":"update","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently removes an employee persona from the enterprise’s system. It operates on the wrtn_enterprise_employee_personas table in the database. Only the persona associated with the given employee and enterprise will be affected. The operation enforces strict enterprise boundary and employee-actor validation. Soft-deletion is performed by setting deleted_at; the persona remains in the audit trail for compliance. This deletion can only be performed by an actor with rightful access (the persona owner or enterprise administrator).\n\nIn case of successful validation, the persona will be logically deleted to preserve historical and audit context, and no record is physically erased. Requests with invalid or mismatched enterpriseId, employeeId, or personaId will result in a 404 Not Found. If the persona is already deleted, the operation will be idempotent.\n\nRelated business logic includes: persona assignment for new chat sessions and preventing deleted personas from being used as the current persona context. Error handling covers unauthorized deletion or attempts to remove system-critical personas.\n","description":"This API endpoint allows removal of an employee's persona record within a specific enterprise for audit, privacy, and compliance purposes.\n\nA persona is an employee-level AI configuration (persona/avatar) crucial for customizing chatbot experiences. Deleting a persona means it can no longer be chosen or used in any future chat session creations, though existing chat sessions referencing it remain unaffected for audit integrity. The operation does not physically delete the record, but marks it as deleted using deleted_at (soft-deletion), thereby preserving compliance, business traceability, and rollback (if needed).\n\nSecurity enforcement includes verifying that the requesting actor is either the persona's owner (employee) or an internal administrator with appropriate authorization. Enterprise and employee boundary checks are enforced to ensure data isolation and prevent unauthorized access or leak between enterprises. Attempts to delete another user's persona or access persona data outside the current actor's organization are strictly forbidden and result in a 403 or 404 error, maintaining organizational data isolation.\n\nThis follows the audit and retention policy, keeping persona information available for compliance review post-deletion. Attempts to delete non-existing or already deleted personas are idempotent and do not fail. This operation is vital for meeting GDPR and enterprise data hygiene demands.","summary":"Soft-delete an employee’s persona within the specified enterprise. Operates on wrtn_enterprise_employee_personas.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise.","schema":{"type":"string","format":"uuid"}},{"name":"employeeId","description":"Unique identifier of the enterprise employee who owns the persona.","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier of the employee’s persona to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employees/{employeeId}/personas/{personaId}","method":"delete","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered list of all teams registered within a given enterprise. It corresponds to the wrtn_enterprise_teams table in the database, allowing clients to search, sort, and filter by team attributes such as code, name, and parent-child hierarchy. This supports functionality including team browser UI, onboarding flows, reporting, and access management assignment.\n\nClients provide a search and filter structure (IWrtnEnterpriseTeam.IRequest) to define matching criteria, pagination (page number, size), and optional sorting preferences. Results are provided as a paginated list of summary DTOs (IPageIWrtnEnterpriseTeam.ISummary), each including basic info and high-level relationships but omitting child relationship recursion to prevent circular reference.\n\nThe operation enforces strict enterprise boundary and user permission checks, ensuring that only actors with authorized access can view teams in their enterprise context. It is designed for use both by employee and moderator actors, with filtering logic to scope data appropriately based on the user's assigned enterprise and actor kind.\n\nRelated operations include team creation, update, deletion, and detail retrieval. This API is foundational for UI team pickers and organizational structure management modules.","description":"Retrieve a filtered and paginated list of teams belonging to a specific enterprise.\n\nThis endpoint supports search, sort, and pagination using complex criteria, including partial and exact team name/code matching and parent/child team relationships. Security measures ensure the requesting actor only receives team data scoped to their enterprise. For employee actors, result sets are filtered to teams within their access boundary; for moderator actors, data is visible for enterprises they support. The endpoint also prevents exposure of deleted/hidden (soft-deleted) teams unless needed for audit by privileged actors.\n\nData returned includes team summary info—id, code, name, parent team context—along with audit data for compliance. Pagination metadata provides UI/UX display clients with total count, next/previous page links, and result counts. Security and privacy best practices ensure that actors can only see information within their authorization boundary, and all access is logged for compliance monitoring.","summary":"Search and retrieve paginated list of teams within the specified enterprise. Operates on wrtn_enterprise_teams.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria for filtering enterprise teams.","typeName":"IWrtnEnterpriseTeam.IRequest"},"responseBody":{"description":"Paginated result of enterprise teams matching filter criteria.","typeName":"IPageIWrtnEnterpriseTeam.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered list of all teams registered within a given enterprise. It corresponds to the wrtn_enterprise_teams table in the database, allowing clients to search, sort, and filter by team attributes such as code, name, and parent-child hierarchy. This supports functionality including team browser UI, onboarding flows, reporting, and access management assignment.\n\nClients provide a search and filter structure (IWrtnEnterpriseTeam.IRequest) to define matching criteria, pagination (page number, size), and optional sorting preferences. Results are provided as a paginated list of summary DTOs (IPageIWrtnEnterpriseTeam.ISummary), each including basic info and high-level relationships but omitting child relationship recursion to prevent circular reference.\n\nThe operation enforces strict enterprise boundary and user permission checks, ensuring that only actors with authorized access can view teams in their enterprise context. It is designed for use both by employee and moderator actors, with filtering logic to scope data appropriately based on the user's assigned enterprise and actor kind.\n\nRelated operations include team creation, update, deletion, and detail retrieval. This API is foundational for UI team pickers and organizational structure management modules.","description":"Retrieve a filtered and paginated list of teams belonging to a specific enterprise.\n\nThis endpoint supports search, sort, and pagination using complex criteria, including partial and exact team name/code matching and parent/child team relationships. Security measures ensure the requesting actor only receives team data scoped to their enterprise. For employee actors, result sets are filtered to teams within their access boundary; for moderator actors, data is visible for enterprises they support. The endpoint also prevents exposure of deleted/hidden (soft-deleted) teams unless needed for audit by privileged actors.\n\nData returned includes team summary info—id, code, name, parent team context—along with audit data for compliance. Pagination metadata provides UI/UX display clients with total count, next/previous page links, and result counts. Security and privacy best practices ensure that actors can only see information within their authorization boundary, and all access is logged for compliance monitoring.","summary":"Search and retrieve paginated list of teams within the specified enterprise. Operates on wrtn_enterprise_teams.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria for filtering enterprise teams.","typeName":"IWrtnEnterpriseTeam.IRequest"},"responseBody":{"description":"Paginated result of enterprise teams matching filter criteria.","typeName":"IPageIWrtnEnterpriseTeam.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/teams","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific enterprise team, identified by teamId within the context of an enterprise identified by enterpriseId. It operates on the wrtn_enterprise_teams table, referencing unique team and enterprise identifiers. The operation is designed to provide complete detail for the team, including parent relationships, unique code, name, membership status, created and updated timestamps, and soft delete marker if applicable. It validates that the team belongs to the specified enterprise and enforces strict enterprise-boundary access control.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/teams/{teamId}","method":"get","summary":"Fetch detailed information for a single enterprise team by teamId and enterpriseId, referencing wrtn_enterprise_teams.","description":"Retrieve comprehensive details of a single enterprise team within a given enterprise. This endpoint provides all relevant metadata for the specified team, including unique code, name, parent-child team relationship, creation and update timestamps, and deletion status if any.\n\nAccess is restricted to users permitted within the enterprise. Strict validation ensures that the {teamId} provided actually belongs to the {enterpriseId} target enterprise—cross-tenant or orphaned teams will result in a 404 error. Only authorized actors (moderators for platform-wide operations, or employees for their own enterprise) can access this endpoint, respecting role boundaries and audit requirements.\n\nIf the enterprise or team does not exist, or does not match, the operation returns a 404 not found error. The response DTO includes all business attributes as defined in the Prisma schema for wrtn_enterprise_teams, excluding relations that may cause circular references.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise to which the team belongs.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team within the enterprise.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected enterprise team, including code, name, parent/child context, and status.","typeName":"IWrtnEnterpriseTeam"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific enterprise team, identified by teamId within the context of an enterprise identified by enterpriseId. It operates on the wrtn_enterprise_teams table, referencing unique team and enterprise identifiers. The operation is designed to provide complete detail for the team, including parent relationships, unique code, name, membership status, created and updated timestamps, and soft delete marker if applicable. It validates that the team belongs to the specified enterprise and enforces strict enterprise-boundary access control.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}","method":"get","summary":"Fetch detailed information for a single enterprise team by teamId and enterpriseId, referencing wrtn_enterprise_teams.","description":"Retrieve comprehensive details of a single enterprise team within a given enterprise. This endpoint provides all relevant metadata for the specified team, including unique code, name, parent-child team relationship, creation and update timestamps, and deletion status if any.\n\nAccess is restricted to users permitted within the enterprise. Strict validation ensures that the {teamId} provided actually belongs to the {enterpriseId} target enterprise—cross-tenant or orphaned teams will result in a 404 error. Only authorized actors (moderators for platform-wide operations, or employees for their own enterprise) can access this endpoint, respecting role boundaries and audit requirements.\n\nIf the enterprise or team does not exist, or does not match, the operation returns a 404 not found error. The response DTO includes all business attributes as defined in the Prisma schema for wrtn_enterprise_teams, excluding relations that may cause circular references.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise to which the team belongs.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team within the enterprise.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected enterprise team, including code, name, parent/child context, and status.","typeName":"IWrtnEnterpriseTeam"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation creates a new enterprise team within the context of a specified enterprise. It operates on the wrtn_enterprise_teams table, allowing authorized employees (master/manager) to establish a new team with unique code and name for the enterprise, optionally linking as a child to an existing team. The operation enforces uniqueness constraints for team code/name within the enterprise, supports team hierarchy, and automatically assigns the creator as a team member. Audit trail for creator, timestamping, and initial membership association are automatic as per business rules.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams","method":"post","summary":"Create a new enterprise team with unique code and name within a specified enterprise, referencing wrtn_enterprise_teams.","description":"Create a new team entity for the specified enterprise. The operation requires a unique team code and name within the enterprise, and allows optional specification of the parent team for hierarchical team structures. Upon successful creation, the requester (employee) is automatically added as a member of the new team.\n\nThis endpoint persistently records the creation event in audit logs, linking to the creator's session for compliance. Failure to meet uniqueness or integrity validation (duplicate code/name within enterprise, invalid parent) results in a clear and actionable error response. Security and role checks ensure only properly authorized employees (typically employees with master or manager titles) are permitted to create teams within their enterprise.\n\nReturned result is the fully populated team object as per business rules, incorporating all fields from wrtn_enterprise_teams and summary info for parent if hierarchical.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise to which the team will belong.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request payload to create a new team: unique code, name, and optional parent team for hierarchy.","typeName":"IWrtnEnterpriseTeam.ICreate"},"responseBody":{"description":"Detailed information about the created enterprise team object, including code, name, references, and parent context if present.","typeName":"IWrtnEnterpriseTeam"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation updates an existing enterprise team within a specific enterprise by a given team ID. It enables authorized enterprise employees, typically those with 'master' or 'manager' titles, to update team attributes such as name, code, parent team, and additional metadata according to business rules. The operation enforces uniqueness constraints for team code and name within the enterprise and validates that the acting employee has sufficient permissions. The API strictly references the wrtn_enterprise_teams table as defined in the Prisma schema. It also logs all update attempts and audit trails for compliance, associating the operation to the exact session and actor from JWT context. The update is allowed only if the team is not soft-deleted. If the team code or name is duplicated within the enterprise, the request is rejected with an explicit error.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}","method":"put","summary":"Update a specific enterprise team information by team ID (wrtn_enterprise_teams)","description":"This API operation allows an authorized employee to update details of an existing enterprise team. It covers business attributes managed in the wrtn_enterprise_teams table, including unique team code, name, parent team (for hierarchical organizations), and basic team metadata. \n\nOnly employees with sufficient permissions (typically 'master' or 'manager' titles as per business requirements) may perform this action. The operation enforces business rules for unique team name and code within the enterprise, and validates authority based on the enterprise and employee context stored in JWT. \n\nUpdate attempts on deleted (soft-deleted) teams are rejected, and any violation of business validation—such as duplicate names/codes within the same enterprise—is handled with a clear, actionable error message. All changes are audit-logged, including session and actor context, for compliance and traceability. Related entity references, such as parent team, are validated against enterprise boundaries. \n\nThis endpoint fully implements security and audit requirements for enterprise team updates, as described in the platform's business and compliance specifications.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise containing the team.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the enterprise team to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to update the team, such as code, name, parent_id, and optionally other metadata per business rules.","typeName":"IWrtnEnterpriseTeam.IUpdate"},"responseBody":{"description":"Detailed information of the updated enterprise team, including summary info and object-mapped related entities.","typeName":"IWrtnEnterpriseTeam"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation permanently removes an enterprise team within a specific enterprise by a given team ID. It performs a soft deletion, recording the deletion timestamp rather than erasing the record, to maintain full audit and compliance. Only employees with appropriate permissions (typically 'master' or 'manager' titles within the enterprise) may erase a team. The endpoint references the wrtn_enterprise_teams table as defined in the Prisma schema and ensures the team belongs to the specified enterprise. All delete actions are audit-logged with actor session information as extracted from JWT. Teams already soft-deleted cannot be deleted again, and all permission and boundary rules are enforced as per business requirements.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}","method":"delete","summary":"Erase (soft-delete) a specific enterprise team by team ID (wrtn_enterprise_teams)","description":"This API operation allows an authorized employee to erase (soft-delete) an existing team within a specific enterprise using the wrtn_enterprise_teams table. The team is not physically removed from the database; instead, the operation sets the deleted_at field, allowing for historical retention and full audit traceability as required by business compliance.\n\nOnly employees with sufficient permissions (typically those with 'master' or 'manager' titles) are allowed to erase a team. The endpoint validates that the requesting user belongs to the correct enterprise and has the appropriate authority, as enforced by business logic and JWT context. \n\nAttempting to erase a team that is already deleted results in a business error. All such actions, whether successful or failed, are recorded in the audit log with actor and session context for compliance reviews. This operation enforces all security controls and regulatory requirements relevant to team management within an enterprise.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise containing the target team.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team to erase (soft-delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","prerequisites":[]},{"specification":"This operation retrieves a paginated, searchable list of team companions (members) for a specific enterprise team. It is based on the wrtn_enterprise_team_companions table in the Prisma schema, which maps each employee to a team within an enterprise and tracks membership role and timestamps. The endpoint is intended for use in business flows where it is necessary to list all members of a particular team, perform lookups, and support search or filtering operations. The operation supports advanced search, filtering, and sorting options to facilitate locating specific team companions. Security and access are strictly enforced such that only authenticated employees of the enterprise (with appropriate permissions) or internal moderators may query team companion lists within their organization's scope. Auditing is enforced for each access.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions","method":"patch","summary":"Paginated, searchable list of companions (members) of a given enterprise team (wrtn_enterprise_team_companions)","description":"Retrieve a paginated and searchable list of companions (members) for a specific team within an enterprise. This operation allows users to look up all companions (who are employees) assigned to a team, including their membership status, join date, and role (always 'member' or null when not currently active in the team). Results can be filtered by membership status, searched by employee attributes, and sorted by join date or update time. Only authenticated employees of the same enterprise or internal moderators may access this endpoint. Proper data isolation is enforced so that no employee can view team membership outside their enterprise. All companion records returned include references to the team and employee (in summary form). For audit and compliance, every access is logged. The response structure reflects a summary view of all companions for efficient display in management dashboards or UI navigation.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the specific team in the enterprise","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filters, and pagination/sort parameters for listing team companions (members) in the enterprise team.","typeName":"IWrtnEnterpriseTeamCompanion.IRequest"},"responseBody":{"description":"Paginated, filtered list of companion (team member) summary information for the requested enterprise team (wrtn_enterprise_team_companions).","typeName":"IPageIWrtnEnterpriseTeamCompanion.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, searchable list of team companions (members) for a specific enterprise team. It is based on the wrtn_enterprise_team_companions table in the Prisma schema, which maps each employee to a team within an enterprise and tracks membership role and timestamps. The endpoint is intended for use in business flows where it is necessary to list all members of a particular team, perform lookups, and support search or filtering operations. The operation supports advanced search, filtering, and sorting options to facilitate locating specific team companions. Security and access are strictly enforced such that only authenticated employees of the enterprise (with appropriate permissions) or internal moderators may query team companion lists within their organization's scope. Auditing is enforced for each access.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/teams/{teamId}/companions","method":"patch","summary":"Paginated, searchable list of companions (members) of a given enterprise team (wrtn_enterprise_team_companions)","description":"Retrieve a paginated and searchable list of companions (members) for a specific team within an enterprise. This operation allows users to look up all companions (who are employees) assigned to a team, including their membership status, join date, and role (always 'member' or null when not currently active in the team). Results can be filtered by membership status, searched by employee attributes, and sorted by join date or update time. Only authenticated employees of the same enterprise or internal moderators may access this endpoint. Proper data isolation is enforced so that no employee can view team membership outside their enterprise. All companion records returned include references to the team and employee (in summary form). For audit and compliance, every access is logged. The response structure reflects a summary view of all companions for efficient display in management dashboards or UI navigation.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the specific team in the enterprise","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filters, and pagination/sort parameters for listing team companions (members) in the enterprise team.","typeName":"IWrtnEnterpriseTeamCompanion.IRequest"},"responseBody":{"description":"Paginated, filtered list of companion (team member) summary information for the requested enterprise team (wrtn_enterprise_team_companions).","typeName":"IPageIWrtnEnterpriseTeamCompanion.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves complete detailed information about a single team companion (member) given the enterprise, team, and companion IDs. It is based on the wrtn_enterprise_team_companions table in the Prisma schema, which maps each employee to a team in the enterprise and stores their role, join and leave dates, and membership status. The operation is used to obtain the full set of properties for a specific team membership instance, such as in detail views, administrative audit screens, or when performing update/remove actions. Only authenticated employees of the target enterprise (with appropriate permissions) or moderators may use this endpoint, and strict isolation is always enforced. The response includes summary information about both the team and employee (in summary form) for business context, and all membership attributes relevant to the team companion record.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}","method":"get","summary":"Get complete detail of a single companion (team member) in a given team (wrtn_enterprise_team_companions)","description":"Get complete details for a specific team companion (member) belonging to a team in a given enterprise. This operation returns the detailed record for a team companion, including role (always 'member' or null if removed), join date, most recent update, and membership status (active or deleted). The response includes context about the team and employee, matching business requirements for management views, modification actions, and auditing. Strict access control ensures that only authorized employees of the enterprise or internal moderators may retrieve this information. Every API call is audited for compliance and traceability. The details returned are appropriate for use in management UIs, audit logs, and role change workflows, and correspond exactly to the wrtn_enterprise_team_companions schema record identified by the path parameters.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the specific team in the enterprise","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier of the team companion (member) record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail for the identified companion (team member) for the specified enterprise/team (wrtn_enterprise_team_companions). Includes team and employee summary context.","typeName":"IWrtnEnterpriseTeamCompanion"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves complete detailed information about a single team companion (member) given the enterprise, team, and companion IDs. It is based on the wrtn_enterprise_team_companions table in the Prisma schema, which maps each employee to a team in the enterprise and stores their role, join and leave dates, and membership status. The operation is used to obtain the full set of properties for a specific team membership instance, such as in detail views, administrative audit screens, or when performing update/remove actions. Only authenticated employees of the target enterprise (with appropriate permissions) or moderators may use this endpoint, and strict isolation is always enforced. The response includes summary information about both the team and employee (in summary form) for business context, and all membership attributes relevant to the team companion record.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}","method":"get","summary":"Get complete detail of a single companion (team member) in a given team (wrtn_enterprise_team_companions)","description":"Get complete details for a specific team companion (member) belonging to a team in a given enterprise. This operation returns the detailed record for a team companion, including role (always 'member' or null if removed), join date, most recent update, and membership status (active or deleted). The response includes context about the team and employee, matching business requirements for management views, modification actions, and auditing. Strict access control ensures that only authorized employees of the enterprise or internal moderators may retrieve this information. Every API call is audited for compliance and traceability. The details returned are appropriate for use in management UIs, audit logs, and role change workflows, and correspond exactly to the wrtn_enterprise_team_companions schema record identified by the path parameters.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the specific team in the enterprise","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier of the team companion (member) record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail for the identified companion (team member) for the specified enterprise/team (wrtn_enterprise_team_companions). Includes team and employee summary context.","typeName":"IWrtnEnterpriseTeamCompanion"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows adding an employee as a companion (member) to a specific team within an enterprise. It operates on the wrtn_enterprise_team_companions table and supports creating new team memberships. The team is referenced by enterpriseId and teamId path parameters, ensuring the addition is scoped correctly to the target organization and team. Business rules from the requirement analysis enforce that only authorized employees (with suitable title such as master or manager) can assign team members, that duplicate companions are prevented, and that joining a team auto-assigns the 'member' role. Soft delete is supported (see deleted_at field in schema), so removals do not hard-delete records but mark them for audit and compliance. All team membership changes are logged for traceability. Successful creation returns the full IWrtnEnterpriseTeamCompanion response representing the new team member object.","description":"This API creates a new companion (member) for a given enterprise's team. Only authenticated employees with the master or manager title may add companions to a team; attempts by unauthorized roles are rejected with detailed business errors. The addition is atomic—partial or duplicate entries are not allowed, and team membership is validated prior to creation.\n\nUpon successful request, the API ensures the employee is added as a 'member' to the specified team, and audit/compliance log records the action. Business validation checks include uniqueness (no duplicate member per team), proper team and employee existence, and role constraints as dictated by the business requirements and Prisma schema rules.\n\nRelated endpoints may include self-service listing of companions, update/removal, or fetching the team structure. Error scenarios include missing permissions, invalid team/employee references, or attempting to add a member already in the team.","summary":"Add a new companion (member) to a team in the specified enterprise (wrtn_enterprise_team_companions).","authorizationActors":["employee"],"name":"create","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions","method":"post","parameters":[{"name":"enterpriseId","description":"Target enterprise's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Target team's unique identifier within the enterprise.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Team companion creation data—specifies the employee to add as a member. Must reference employee within the enterprise and satisfy business constraints.","typeName":"IWrtnEnterpriseTeamCompanion.ICreate"},"responseBody":{"description":"Newly created companion (team member) object in the team.","typeName":"IWrtnEnterpriseTeamCompanion"},"authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the attributes of an existing companion (team member) within a specific team in an enterprise. It acts on the wrtn_enterprise_team_companions table, allowing update of editable fields such as membership status (i.e., removal from team constitutes a soft delete by updating deleted_at), or potentially updating the companion role if permitted by business logic. Modifications must comply with strict business validation rules from the requirement analysis: only master or manager titles can update or remove companions, self-removal may be allowed for employees, and all actions are audit-logged for compliance and traceability. This operation prohibits hard deletion to preserve historical audit trails, as enforced by the Prisma schema and business policy.","description":"This API updates details of a specific team companion (member) in the context of a given enterprise and team. Updatable fields include role (typically remains 'member'), or marking deleted_at for soft removal. Authorization checks enforce only master or manager employees can update or remove other companions, while members may only self-remove if business rules allow.\n\nAtomic operation: All update actions are validated transactionally, preventing partial modification or inconsistent state. Attempts to update non-existent companions, perform unauthorized actions, or violate uniqueness are rejected with clear error messages and audit-logging.\n\nThis endpoint does not destroy companion records, but sets deleted_at to retain auditability for all historic team membership changes. It integrates with compliance, reporting, and organization visualization endpoints.","summary":"Update or remove a team companion (team member) in a team (wrtn_enterprise_team_companions).","authorizationActors":["employee"],"name":"update","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}","method":"put","parameters":[{"name":"enterpriseId","description":"Target enterprise's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Target team's unique identifier within the enterprise.","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier for the companion (team member) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for team companion, including soft delete (remove by setting deleted_at) or updating role/status as allowed by business rules.","typeName":"IWrtnEnterpriseTeamCompanion.IUpdate"},"responseBody":{"description":"Updated companion (team member) object after modifications, with audit trail preserved.","typeName":"IWrtnEnterpriseTeamCompanion"},"authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently removes a companion (employee-team membership) from a team within an enterprise. It acts on the wrtn_enterprise_team_companions table, identified by the provided enterpriseId, teamId, and companionId, and deletes the specified team membership. This supports authorized actors in managing team rosters and removing members when necessary. The operation strictly enforces enterprise and team scope based on the provided path parameters and applies only to soft-deletions as indicated by the deleted_at field in the schema.","description":"This API endpoint is responsible for deleting a specific companion (employee) from a particular team in a given enterprise. The operation is performed using the enterpriseId, teamId, and companionId as path parameters, each corresponding to the appropriate fields in the wrtn_enterprise_team_companions and related tables. \n\nUpon invocation, the operation will mark the companion's membership as terminated by setting the deleted_at field if soft-deletion is present in the schema, ensuring audit traceability and compliance with data retention policies. The description for the wrtn_enterprise_team_companions model indicates that companions are members of a team and may have a role, and that removal (soft deletion) is supported by business logic and audit requirements.\n\nAuthorization and business rules require that only actors with management privileges for the enterprise/team may invoke this operation. Expected security checks include the actor's relation to the enterprise and team.\n\nIf the operation is successful, the companion will lose all team-related access and privileges, and the audit trail will be updated with the removal event. Error handling should cover missing or invalid IDs, insufficient permissions, and cases where the specified companion does not belong to the given team.","summary":"Remove a companion (team member) from an enterprise team by soft-deleting their membership.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise to which the team belongs.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team to remove the companion from.","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier of the companion (team membership) to be removed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}","method":"delete","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the full appointment history for a specific team companion (employee-team membership) within a team in an enterprise. It acts on the wrtn_enterprise_team_companion_appointments table, using the provided enterpriseId, teamId, and companionId to identify the relevant records. The purpose is to fetch all appointment events (such as join/promote/remove) associated with a given companion in the specified team, supporting audit trail, compliance, and team management workflows.","description":"This API endpoint allows authorized users to fetch the audit history of appointments for a specific companion (employee-team member) in a given team and enterprise. The operation relies on valid enterpriseId, teamId, and companionId parameters to identify the scope of the query. \n\nIt is valuable for obtaining a complete log of who added or removed the companion, role changes (if any), the actor and session context of each event, and the corresponding timestamps. This is essential for auditing, resolving disputes, and enforcing compliance requirements. \n\nThe wrtn_enterprise_team_companion_appointments model provides a detailed audit of team member additions and removals, including who performed the action (teamAppointer), session context, and the created_at timestamp.\n\nAuthorization is typically restricted to actors who have sufficient rights on the underlying enterprise or team. Error handling covers missing IDs, insufficient permissions, and non-existent companion records.\n","summary":"Retrieve the appointment (membership event) history for a specific companion (team member) in a team.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise that owns the team.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team containing the companion.","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier of the companion (team membership) whose appointment history is to be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A paginated list of appointment events (add/remove/change) for the specified companion, showing actor, timestamps, new/old roles, and session context for each event.","typeName":"IPageIWrtnEnterpriseTeamCompanionAppointment"},"authorizationActors":["employee"],"name":"index","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}/appointments","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a specific enterprise team companion appointment by appointmentId. It operates on the wrtn_enterprise_team_companion_appointments table, returning details of the appointment including the employee appointed, the appointer (employee granting/removing membership or role within the team), their relation to the team, and the timestamp of the appointment event. The endpoint is used for compliance, team management audits, and fine-grained understanding of membership changes within an enterprise team. Only authenticated employees of the enterprise may access this resource, and access is strictly enforced to match enterprise/team membership and permission boundaries.","description":"Retrieve a detailed record of a team companion (employee) appointment history entry for an enterprise team. This operation allows an authenticated employee to view appointment or removal records, with details such as appointed team member, the employee who granted or removed team membership, membership type (role), and audit timestamp. All lookups and results are filtered to the requesting user's enterprise/team context, ensuring security and privacy boundaries are enforced.\n\nThe returned object represents a single historical event in which a team companion's role or status was set or changed (for example: joining the team as a member, or being removed). This is critical for audit trails, team access reviews, and compliance—with details tied back to the relevant team, employee, and appointing actor.\n\nAccess is restricted to authenticated employees within the enterprise, allowing them to audit appointment history relevant to their scope. This endpoint interacts with the wrtn_enterprise_team_companion_appointments table as defined in the schema and exposes no system-generated fields unrelated to business state. If unauthorized or if the record does not exist, appropriate error codes are returned.","summary":"Retrieve a specific enterprise team companion appointment record (wrtn_enterprise_team_companion_appointments).","parameters":[{"name":"enterpriseId","description":"ID of the target enterprise containing the team","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"ID of the team containing the companion","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"ID of the team companion (membership mapping) whose appointment is being queried","schema":{"type":"string","format":"uuid"}},{"name":"appointmentId","description":"ID of the appointment record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed appointment history record for a specific team companion, including employee, appointer, role, and timestamps.","typeName":"IWrtnEnterpriseTeamCompanionAppointment"},"authorizationActors":["employee"],"name":"at","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}/appointments/{appointmentId}","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new appointment or membership change record for an employee ('team companion') within an enterprise team. It operates on the wrtn_enterprise_team_companion_appointments table in the Prisma schema, and records the granting or removal of team member status via atomic audit-trail append. This is part of the audit and permission infrastructure for managing team membership and changes, not for manual editing. The operation requires the employee to have sufficient authorization for such changes, and the appointment always reflects a role of either 'member' or null (null indicating removal from the team). Only authenticated employees within the relevant enterprise/team and with necessary privileges can create such an appointment record.","description":"Create a new appointment record for a companion (employee-team mapping) in an enterprise team. This endpoint is used to add membership, promote, demote, or remove a team member via a historical record, recording precisely who performed the action (appointer), the session context, new role, and time. This record is atomic and append-only, ensuring every change in team membership is auditable and reversible for compliance. The endpoint expects the target companion's ID (the specific employee-to-team mapping) and the desired role (either 'member' to grant membership or null to remove the member). The authenticated user's context is injected from the JWT/session and not passed explicitly in the request body.\n\nAuthorization is strictly enforced according to the employee's enterprise/team/role relationship, with rejection for unauthorized or out-of-scope actions. The appointment record is stored in wrtn_enterprise_team_companion_appointments as defined in the database schema, guaranteeing every change to team composition is auditable and reconstructable from this trail.\n\nThis API does not permit arbitrary role/assignment beyond 'member' or removal (null). It is not for arbitrary editing but for atomic lifecycle tracking and organizational compliance.","summary":"Create an enterprise team companion appointment record (wrtn_enterprise_team_companion_appointments).","parameters":[{"name":"enterpriseId","description":"ID of the enterprise containing the team","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"ID of the team for the appointment action","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"ID of the team companion (employee-to-team membership mapping) whose role is being set or changed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation details for a team companion appointment (membership set/change); only 'member' or null (for removal) role is allowed.","typeName":"IWrtnEnterpriseTeamCompanionAppointment.ICreate"},"responseBody":{"description":"The created appointment record as stored in the audit trail, including references to role, appointer, and timestamp.","typeName":"IWrtnEnterpriseTeamCompanionAppointment"},"authorizationActors":["employee"],"name":"create","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}/appointments","method":"post","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing team companion appointment within an enterprise. It operates on the wrtn_enterprise_team_companion_appointments table, which tracks all historical appointment events (additions, removals, role changes) for employee membership within teams. Core fields affected include the target appointment ID, the new appointment properties, and audit context.\n\nThe operation enables authorized employees (typically 'master' or 'manager' roles per enterprise business rules) to modify a team member's role (always 'member' or null), correct appointment records, or update appointment auditable metadata. All changes trigger audit logging, and business logic strictly enforces that only authorized users can make such updates. If an employee attempts to change appointment for a companion outside their permitted scope, the system rejects with a proper error.\n\nThis API is primarily used for compliance corrections, restoring historical accuracy, or delegated personnel management in large organizations. It is tightly integrated with the appointment history and is crucial for traceability within enterprise audits.","description":"Update the appointment record for a given team companion in an enterprise. The API allows an authorized enterprise actor to amend appointment details, such as correcting a role to 'member' or toggling status to null for removal.\n\nMultiple audit safeguards are enforced: only eligible employees (masters/managers) can modify records; unauthorized attempts are denied, logged, and generate explicit business errors. The appointment record is tightly coupled to the associated companion (team membership row) and all changes are tracked in multi-step audit sequences.\n\nRole changes are validated against business logic - 'member' is the only permissible actual role. Setting the role to null represents effective removal.\n\nError handling includes validation for invalid appointment IDs, permission failures, and attempts to alter core immutable audit fields. Related APIs include team membership management, bulk role update endpoints, and audit history views for compliance.\n\nUpdates to audit fields (created_at, appointer info) are strictly prohibited via this interface.","summary":"Update a team companion's appointment record in an enterprise team","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise where the team exists","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier for the team to which the companion belongs","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier for the team companion (membership record)","schema":{"type":"string","format":"uuid"}},{"name":"appointmentId","description":"Unique identifier of the team companion appointment record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the appointment record (e.g., new role or null for removal)","typeName":"IWrtnEnterpriseTeamCompanionAppointment.IUpdate"},"responseBody":{"description":"The updated companion appointment record with role and audit info","typeName":"IWrtnEnterpriseTeamCompanionAppointment"},"authorizationType":null,"authorizationActor":"employee","name":"update","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}/appointments/{appointmentId}","method":"put","prerequisites":[]},{"specification":"This operation permanently erases a historical appointment record for a companion (team member) within an enterprise team. The data entity is wrtn_enterprise_team_companion_appointments, which logs audit information for role assignment and changes. Deleting an appointment removes one audit history entry and is rarely required, typically for compliance corrections or in cases of audit data rollover/purging as allowed by policy.\n\nThe endpoint enforces strict authorization: only master or manager employees can perform this deletion, and the system rejects attempts to erase records outside of allowed scope or compliance retention windows. Hard deletion means the appointment record is removed from the database and cannot be recovered (unless separate system backups are in place). All such operations are fully logged in the audit trail for compliance.\n\nThis operation should be used only as part of sanctioned compliance workflows, data minimization, or explicit legal instructions. All relationships and references (such as team membership and audit chains) are updated as appropriate after deletion.","description":"Permanently removes the appointment record for a companion from the team appointment audit table. Successful operation deletes this specific historical record, and all traces are removed from the primary audit table.\n\nThis is a sensitive operation and is restricted to users with suitable authority. All deletions are subject to compliance window validations; operations are logged for regulatory traceability. If the appointmentId is not found, or if the user lacks permission, an error is returned and the rejection is itself logged for audit.\n\nRecommended only for use by enterprise compliance officers or as part of formally documented data minimization, legal hold, or error rectification procedures. Usual audit policies should be consulted before use.","summary":"Delete a team companion's appointment record from an enterprise team (hard delete)","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise where the team exists","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier for the team to which the companion belongs","schema":{"type":"string","format":"uuid"}},{"name":"companionId","description":"Unique identifier for the team companion (membership record)","schema":{"type":"string","format":"uuid"}},{"name":"appointmentId","description":"Unique identifier of the team companion appointment record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companions/{companionId}/appointments/{appointmentId}","method":"delete","prerequisites":[]},{"specification":"This operation retrieves a paginated and filtered list of employee invitation records for a particular enterprise, supporting advanced search, filtering, and sorting. It is built on top of the wrtn_enterprise_employee_invitations table and enables enterprise administrators or authorized actors to view invitation status, intended email, creation and expiration timestamps, inviting employee details, and related team associations. Results can be filtered by expiration status, target team, target email, or invitation creator, supporting a variety of HR and onboarding dashboard use-cases. The operation responds with paginated summary DTOs for each invitation, following strict result inclusion logic and enforcing the enterprise boundary for access control.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employee-invitations","method":"patch","summary":"Search and paginated list retrieval of employee invitations for a specific enterprise, using filters and sorting options. Related to wrtn_enterprise_employee_invitations entity.","description":"Retrieve a list of employee invitations for a given enterprise, with support for advanced filtering, sorting, and pagination. This API references wrtn_enterprise_employee_invitations as the core data source, as described in the schema. It leverages enterprisewide scoped visibility to allow HR or administrator actors to audit current, pending, expired, and historical invitations sent to prospective employees within the company boundary.\n\nThe filtering parameters allow clients to search invitations by email, status (active/expired), team, inviting employee, and creation/expiration periods. Pagination parameters enable efficient client-side navigation through potentially large datasets, while sorting ensures that the most recent or relevant invitations are highlighted as needed.\n\nSecurity considerations demand that only moderator or designated master/manager employees of the enterprise may access this endpoint. The detailed results intentionally omit any invitation token or private onboarding secrets but expose metadata and status sufficient for business workflow oversight. For large enterprise environments with distributed HR management, this endpoint underpins compliance and traceability for staff onboarding.\n\nThe response is a paginated summary DTO for each invitation, which includes a summary of the invited employee (if already accepted), inviting employee, intended team, timing, and status. Related endpoints include detail retrieval (GET .../employee-invitations/{invitationId}) and invitation creation/management APIs.","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise whose employee invitations are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering, searching, and paginating employee invitations within an enterprise.","typeName":"IWrtnEnterpriseEmployeeInvitation.IRequest"},"responseBody":{"description":"Paginated summaries of employee invitations matching filters and pagination settings.","typeName":"IPageIWrtnEnterpriseEmployeeInvitation.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated and filtered list of employee invitation records for a particular enterprise, supporting advanced search, filtering, and sorting. It is built on top of the wrtn_enterprise_employee_invitations table and enables enterprise administrators or authorized actors to view invitation status, intended email, creation and expiration timestamps, inviting employee details, and related team associations. Results can be filtered by expiration status, target team, target email, or invitation creator, supporting a variety of HR and onboarding dashboard use-cases. The operation responds with paginated summary DTOs for each invitation, following strict result inclusion logic and enforcing the enterprise boundary for access control.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employee-invitations","method":"patch","summary":"Search and paginated list retrieval of employee invitations for a specific enterprise, using filters and sorting options. Related to wrtn_enterprise_employee_invitations entity.","description":"Retrieve a list of employee invitations for a given enterprise, with support for advanced filtering, sorting, and pagination. This API references wrtn_enterprise_employee_invitations as the core data source, as described in the schema. It leverages enterprisewide scoped visibility to allow HR or administrator actors to audit current, pending, expired, and historical invitations sent to prospective employees within the company boundary.\n\nThe filtering parameters allow clients to search invitations by email, status (active/expired), team, inviting employee, and creation/expiration periods. Pagination parameters enable efficient client-side navigation through potentially large datasets, while sorting ensures that the most recent or relevant invitations are highlighted as needed.\n\nSecurity considerations demand that only moderator or designated master/manager employees of the enterprise may access this endpoint. The detailed results intentionally omit any invitation token or private onboarding secrets but expose metadata and status sufficient for business workflow oversight. For large enterprise environments with distributed HR management, this endpoint underpins compliance and traceability for staff onboarding.\n\nThe response is a paginated summary DTO for each invitation, which includes a summary of the invited employee (if already accepted), inviting employee, intended team, timing, and status. Related endpoints include detail retrieval (GET .../employee-invitations/{invitationId}) and invitation creation/management APIs.","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise whose employee invitations are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering, searching, and paginating employee invitations within an enterprise.","typeName":"IWrtnEnterpriseEmployeeInvitation.IRequest"},"responseBody":{"description":"Paginated summaries of employee invitations matching filters and pagination settings.","typeName":"IPageIWrtnEnterpriseEmployeeInvitation.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a single detailed employee invitation record by its unique ID within the context of a specific enterprise. Leveraging the wrtn_enterprise_employee_invitations table, this endpoint exposes all metadata for the invitation, including intended email, title, inviting employee, target team, creation and expiration timestamps, and relation to onboarding processes. It supports enterprise compliance and HR workflow auditing, ensuring that only valid actors within the enterprise boundary may access invitation records by ID.","path":"/wrtnEnterprise/moderator/enterprises/{enterpriseId}/employee-invitations/{invitationId}","method":"get","summary":"Retrieve details for a specific employee invitation in an enterprise by invitation ID, based on the wrtn_enterprise_employee_invitations table.","description":"Return the detailed metadata for a single employee invitation within an enterprise, as defined in the wrtn_enterprise_employee_invitations schema. This includes all non-sensitive information such as email, invitation creator, targeted team, title to be assigned on acceptance, creation/expiration dates, and status. The endpoint enforces strict enterprise boundary security, allowing only authorized actors (HR, master/manager, moderator) to view records that belong to their enterprise.\n\nThis endpoint supports business audit trails and compliance review by providing unambiguous tracking of each invitation's lifecycle without exposing actual onboarding tokens or credentials. Typical use-cases include HR and compliance dashboards, onboarding audits, or troubleshooting onboarding issues for specific employees.\n\nRelated endpoints include list/search (PATCH .../employee-invitations) and invitation creation/revocation APIs. Error scenarios include not found (404) if the invitation does not belong to the given enterprise or the ID is incorrect, and forbidden (403) if the requesting actor is not authorized for this operation.","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise to ensure enterprise-level scoping and security.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier for the specific employee invitation to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed employee invitation record and related onboarding metadata.","typeName":"IWrtnEnterpriseEmployeeInvitation"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a single detailed employee invitation record by its unique ID within the context of a specific enterprise. Leveraging the wrtn_enterprise_employee_invitations table, this endpoint exposes all metadata for the invitation, including intended email, title, inviting employee, target team, creation and expiration timestamps, and relation to onboarding processes. It supports enterprise compliance and HR workflow auditing, ensuring that only valid actors within the enterprise boundary may access invitation records by ID.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employee-invitations/{invitationId}","method":"get","summary":"Retrieve details for a specific employee invitation in an enterprise by invitation ID, based on the wrtn_enterprise_employee_invitations table.","description":"Return the detailed metadata for a single employee invitation within an enterprise, as defined in the wrtn_enterprise_employee_invitations schema. This includes all non-sensitive information such as email, invitation creator, targeted team, title to be assigned on acceptance, creation/expiration dates, and status. The endpoint enforces strict enterprise boundary security, allowing only authorized actors (HR, master/manager, moderator) to view records that belong to their enterprise.\n\nThis endpoint supports business audit trails and compliance review by providing unambiguous tracking of each invitation's lifecycle without exposing actual onboarding tokens or credentials. Typical use-cases include HR and compliance dashboards, onboarding audits, or troubleshooting onboarding issues for specific employees.\n\nRelated endpoints include list/search (PATCH .../employee-invitations) and invitation creation/revocation APIs. Error scenarios include not found (404) if the invitation does not belong to the given enterprise or the ID is incorrect, and forbidden (403) if the requesting actor is not authorized for this operation.","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise to ensure enterprise-level scoping and security.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier for the specific employee invitation to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed employee invitation record and related onboarding metadata.","typeName":"IWrtnEnterpriseEmployeeInvitation"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows an authorized enterprise employee (typically with 'master' or 'manager' title) to invite a new employee to join the enterprise. The operation is associated with the wrtn_enterprise_employee_invitations table, creating an invitation record including the team context, invitee email, target title (role), and audit trace information. The invitation may specify a particular team for membership or be left at the enterprise level. Business rules mandate that only employees with sufficient authority can create invitations, and all invitee data must pass format and uniqueness validation.\n\nComprehensive audit logging is performed for compliance, including who created the invitation, the session context, and the specific enterprise/team targeted. If validation fails, the invitation is not created and an explicit error is returned. Expiry for the invitation defaults to 7 days or as specified by configuration. Repeated invitations to the same email/enterprise are prevented.\n\nThe operation enforces permission boundaries defined by the employee's title and the company's onboarding policies, as described in the requirements. Invitation creation is atomic: success or failure is all-or-nothing.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employee-invitations","method":"post","summary":"Create a new employee invitation within an enterprise (wrtn_enterprise_employee_invitations table).","description":"Create a new employee invitation under a specific enterprise. Only master or manager employees are allowed to perform this operation. The invitation requires specifying the invitee's email, the onboarding target title (master, manager, member), and may optionally include an initial team assignment.\n\nOn calling this endpoint, the system will validate the employee's authority (must be master or manager in the target enterprise), check the uniqueness and format of the invitee's email address relative to the enterprise, and ensure the employee being invited does not already exist. If a team is included, the system will confirm the team's existence and accessibility within the enterprise. The invitation token created has an explicit expiry (defaulting to 7 days), and a full audit record is created including session context and actor trace for compliance review. Duplicate invitations to the same email/company are prevented, and appropriate error messages are returned for all failed business logic conditions.\n\nRelated onboarding workflows (e.g., acceptance, expiry, revocation) will use the invitation id and audit context generated here for all downstream processing.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise in which the employee invitation is created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create an enterprise employee invitation, including invitee email, title, optional team assignment, and expiry.","typeName":"IWrtnEnterpriseEmployeeInvitation.ICreate"},"responseBody":{"description":"Created employee invitation details, including invitee information, team context if any, responsible employee (invitor), and relevant audit fields.","typeName":"IWrtnEnterpriseEmployeeInvitation"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation enables authorized employees to update or re-issue an existing employee invitation for an enterprise, as represented in the wrtn_enterprise_employee_invitations table. The principal scenarios involve either modifying invitation metadata (title, expiry, team assignment), or reactivating a previously expired or unexpired invite. The system validates the acting employee's authority (must be master or manager in the relevant enterprise) and enforces all invitation creation/editing business rules.\n\nThe invitation may be updated to change the role/title for onboarding, team assignment, or expiration. A comprehensive audit log entry is always recorded, including the actor, session, and precise change. All business validation is strictly enforced, such as ensuring the invitee is not already an active employee, checking for duplicate/resurrected invitations, and preventing updates to already accepted/revoked invitations.\n\nPartial updates are supported according to the business logic, but only fields explicitly permitted by policy may be changed. On success, the operation returns the updated invitation details, and relevant workflows for onboarding/acceptance will reference the new state. Error details explain exactly why an update fails, ensuring clear business guidance for remediation.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employee-invitations/{invitationId}","method":"put","summary":"Update an existing enterprise employee invitation (wrtn_enterprise_employee_invitations table).","description":"Update or re-issue employee invitation for a given enterprise, targeting a specific invitation by its unique identifier. Only master or manager employees in the enterprise may perform this operation. The operation allows changing invitee onboarding attributes (title, target team, expiry, etc.) as business requirements permit.\n\nThe system checks all business rules on each attempted change: ensuring the invitation is still pending, that the invitee is not already a registered employee, that the acting user has authority, and that uniqueness and data-integrity are maintained. Comprehensive audit logs are recorded for all changes, including both the before and after state of the invitation, session data, and actor responsible. On successful update, downstream onboarding logic (such as acceptance or revocation) will consume the updated invitation state.\n\nImmutable or terminal invitations (e.g., already accepted, revoked, expired past grace) cannot be modified, and clear errors are returned in these scenarios. All responses clearly describe the outcome, ensuring API consumers understand the system state and business requirements enforcement at all times.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise for which the invitation belongs.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier for the target employee invitation record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Enterprise employee invitation update payload. Supports updating onboarding role, team, and expiry as permitted by business logic.","typeName":"IWrtnEnterpriseEmployeeInvitation.IUpdate"},"responseBody":{"description":"Updated invitation information, including all business/audit attributes and new valid values.","typeName":"IWrtnEnterpriseEmployeeInvitation"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes a specific employee invitation within an enterprise. It is associated with the wrtn_enterprise_employee_invitations table in the Prisma schema. The operation targets a distinct invitation, identified by both enterpriseId and invitationId, enabling enterprise administrators to invalidate and remove a pending or expired onboarding invitation. Soft deletion logic is observed by updating the deleted_at field rather than physically removing the record, ensuring auditability and compliance with onboarding history retention requirements.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/employee-invitations/{invitationId}","method":"delete","summary":"Delete a specific employee invitation in the enterprise (wrtn_enterprise_employee_invitations).","description":"This endpoint removes an employee invitation from the enterprise, marking it as deleted (via the deleted_at column) rather than executing a hard remove. The invitation to be targeted is specified by both the enterpriseId representing the owning company and invitationId identifying the particular onboarding invitation. \n\nEnterprise admins may use this action to revoke improperly sent, expired, or no longer needed invitations, ensuring onboarding records remain compliant with audit and lifecycle policies. The endpoint maintains onboarding action traceability and does not affect already accepted or expired invitations, as these records retain their status even after deletion to uphold auditability. \n\nSecurity: Only privileged actors (e.g., enterprise master or manager) may invoke this operation for their enterprise, and a strict permission check is enforced.\n\nRelated APIs include creation of new invitations, listing all pending invitations for an enterprise, and retrieval of individual invitation details for lifecycle management and audit review. Error responses cover non-existent, already used, or already deleted invitations.","parameters":[{"name":"enterpriseId","description":"Unique identifier for the target enterprise owning the invitation.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the employee invitation to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","prerequisites":[]},{"specification":"This operation queries and retrieves companion (team membership) invitations for a specific team within an enterprise using complex search, filter, and pagination options. The operation is based on the wrtn_enterprise_team_companion_invitations table from the Prisma schema and allows authorized employees (with appropriate permissions) to review all invitations issued for team membership. It is designed for advanced search scenarios, reporting, and managing onboarding flow to teams.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companion-invitations","method":"patch","summary":"Search companion (team membership) invitations for a specific enterprise team (wrtn_enterprise_team_companion_invitations).","description":"This endpoint provides advanced query access to companion invitations targeting a particular team within an enterprise. Capable of filtering by invitation status, creation or expiration date, and inviting employee, the operation supports complex onboarding management scenarios and helps organizations audit or review pending team memberships awaiting acceptance. It returns a paginated list of invitation summaries to facilitate large-scale team onboarding in compliance with business flows.\n\nPermission enforcement restricts this operation to authenticated employees who are authorized to manage or view team invitations. Usage is typically limited to enterprise masters or team managers in real-world scenarios. The operation is commonly used with team invitation creation, acceptance, and management endpoints for holistic onboarding flow control and team compliance auditing.\n\nError handling ensures requests for non-existing teams, insufficient permissions, or misaligned enterprise/team relationships are explicitly reported.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the enterprise containing the team.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the enterprise team to query companion invitations for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter criteria for team companion invitations, including pagination and status filtering.","typeName":"IWrtnEnterpriseTeamCompanionInvitation.IRequest"},"responseBody":{"description":"Paginated results of companion invitation summaries for the team.","typeName":"IPageIWrtnEnterpriseTeamCompanionInvitation.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"Retrieve a specific team companion invitation from the wrtn_enterprise_team_companion_invitations table for a given enterprise and team. The API operation allows authorized actors (employee) to fetch detailed information about a particular invitation identified by its invitationId within a specific team and enterprise. This operation is essential for viewing invitation status, recipient information, and audit-trail metadata. The specification aligns with the business requirement to enable audit and traceability over team membership invitations, enforcing enterprise- and team-level data isolation.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companion-invitations/{invitationId}","method":"get","summary":"Get a specific companion invitation for a team in an enterprise (wrtn_enterprise_team_companion_invitations).","description":"This operation retrieves the detailed information about a specific team companion invitation for a given enterprise and team. It fetches invitation metadata such as the invited employee, inviting actor, session context, as well as timestamps for creation, expiration, and soft deletion.\n\nAuthorization is required and limited to actors who have access to the team in the given enterprise (employees within the enterprise). It ensures that invitation data is not accessible cross-enterprise or cross-team, upholding strict organizational data isolation. The API design follows the relational structure defined in the wrtn_enterprise_team_companion_invitations table and includes all major attributes for compliance and audit requirements.\n\nRelated operations may include listing all invitations for a team or accepting/declining an invitation. Error handling covers cases where the invitation does not exist, the team/enterprise relation is invalid, or the actor is not authorized.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the target team within the enterprise.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the companion invitation to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the companion invitation for the specified enterprise and team, including actor references and audit metadata.","typeName":"IWrtnEnterpriseTeamCompanionInvitation"},"authorizationActors":["employee"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"Create a new team companion invitation associated with the wrtn_enterprise_team_companion_invitations table for a specific enterprise and team. This operation allows authorized employees (master/manager) to invite other employees to join a team within the enterprise by specifying invitee details such as employee ID or email, optional invitation message, and expiration. The API ensures organization and team data boundary is enforced, logs inviter/session context for complete audit traceability, and follows atomic invitation creation rules documented in business requirements and Prisma schema.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companion-invitations","method":"post","summary":"Create a new team companion invitation for a team in an enterprise (wrtn_enterprise_team_companion_invitations).","description":"This operation creates a new team companion invitation for a specific team in a given enterprise. The request enables a permitted employee (master/manager in the team) to invite an employee to join the team by providing the target employee's information (employee ID and/or email) as well as optional expiration, session reference, and auditing details according to the wrtn_enterprise_team_companion_invitations schema.\n\nOnly authorized employees with permission to appoint members in the specified team and enterprise are allowed to perform this operation. The operation will validate existence of the target team and enterprise, check for duplicate/active invitations, and enforce anti-duplication rules. All invitation actions are logged with actor and session context for audit and compliance requirements. If the invitation already exists or input data fails validation, the operation returns appropriate business errors.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team to invite a companion to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new team companion invitation (invitee email, employee ID, inviter reference, expiration, etc.).","typeName":"IWrtnEnterpriseTeamCompanionInvitation.ICreate"},"responseBody":{"description":"Created invitation object representing the new companion invitation, including audit fields and status metadata.","typeName":"IWrtnEnterpriseTeamCompanionInvitation"},"authorizationActors":["employee"],"name":"create","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing companion invitation within a specific team of a given enterprise. The underlying data is managed by the wrtn_enterprise_team_companion_invitations table, which records invitation events initiated by employees (master or manager) for onboarding team members. The operation allows modification of invitation attributes such as expiration time or status prior to acceptance or expiration. All updates adhere strictly to audit and compliance tracing, and may involve permission checks to ensure only eligible actors can revise invitations. The endpoint supports use cases such as extending the expiration window for a pending invite or correcting team assignment details. Any update attempt on non-existent or already-accepted/expired invitations will result in a relevant error response, preserving data consistency and business rules.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companion-invitations/{invitationId}","method":"put","summary":"Update an existing team companion invitation for an enterprise team.","description":"This API updates the properties of an existing companion invitation for a specific team within an enterprise. Invitation events are used to track and facilitate onboarding of team members through employee-driven workflow. The wrtn_enterprise_team_companion_invitations table manages all events related to inviting an employee to a team, including issuer, target employee, invitation session, and expiration tracking.\n\nThe operation allows authorized employees (typically master or manager roles) to update invitation details, such as extending the expiry date, correcting team mapping, or updating the status, as long as the invitation is still pending (i.e., not accepted, revoked, or expired). Full audit-trail coverage is enforced, and only the original inviter or actors with sufficient privilege may update invitations. Attempts to update non-existent, already-accepted, expired, or deleted invitations will return appropriate error codes. All invitation updates are logged with session and actor context for compliance monitoring.\n\nRelated operations include creating new invitations (POST), revoking invitations (DELETE), and searching pending invitations (PATCH). Error handling covers cases of insufficient permissions, invalid invitation state transitions, and input validation failures.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise to which the team belongs.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team within the enterprise where the companion invitation was issued.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the specific companion invitation being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update for the existing companion invitation, such as expiration date or invitation status.","typeName":"IWrtnEnterpriseTeamCompanionInvitation.IUpdate"},"responseBody":{"description":"Updated invitation with detail, including all relevant fields, relationships (team, employee, issuer), and audit information.","typeName":"IWrtnEnterpriseTeamCompanionInvitation"},"authorizationActors":["employee"],"name":"update","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently erases (hard deletes) a companion invitation record for a specific team in an enterprise from the wrtn_enterprise_team_companion_invitations table. The invitation must be in a revocable state (pending, not yet accepted or expired). The endpoint is intended exclusively for use by authorized employees (typically master or manager roles) who are either the inviter or have sufficient team privileges. All deletion requests are strictly checked against business rules for compliance, such as invitation status, actor's authority, and current state. On successful invocation, the invitation is completely removed and cannot be recovered, ensuring strict audit-trail linkage for compliance and forensics.","path":"/wrtnEnterprise/employee/enterprises/{enterpriseId}/teams/{teamId}/companion-invitations/{invitationId}","method":"delete","summary":"Erase (permanently delete) a team companion invitation for a given enterprise team.","description":"This API operation erases (hard deletes) a companion invitation entry from an enterprise team's roster of pending or revocable invitations. It operates on the wrtn_enterprise_team_companion_invitations table and is used to permanently remove invitations that have not yet been accepted or have become obsolete (e.g., sender error, invitation no longer required). Only authorized employees—typically the original inviter, team master, or manager—may invoke this operation, and only if the invitation's status allows revocation (i.e., pending, not yet accepted, expired, or not deleted).\n\nUpon successful invocation, the invitation record is permanently deleted from the database and cannot be recovered. All deletions are subject to strict audit-logging, with full actor, team, and session context recorded for compliance and investigation. Attempts to delete a non-existent, already-accepted, or non-revocable (e.g., already deleted) invitation will result in an appropriate error response. This operation is related to invitation creation (POST), update (PUT), and search (PATCH) endpoints, supporting the lifecycle management of team onboarding workflows.","parameters":[{"name":"enterpriseId","description":"Unique identifier of the target enterprise to which the team belongs.","schema":{"type":"string","format":"uuid"}},{"name":"teamId","description":"Unique identifier of the team within the enterprise where the companion invitation exists.","schema":{"type":"string","format":"uuid"}},{"name":"invitationId","description":"Unique identifier of the companion invitation to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation searches and retrieves a paginated, filterable list of chat sessions for authorized employees within the WrtnEnterprise B2B SaaS platform. It is based on the wrtn_chat_sessions table and supports advanced filtering by AI vendor, title, disclosure level, team, creation/update timestamps, and associated persona. The endpoint allows end users to quickly locate their own or organizational chat sessions, promoting enterprise data isolation and privacy requirements. The operation incorporates filtering, sorting, and pagination parameters customary for enterprise SaaS list endpoints, and returns essential session summary information for user navigation and action.","description":"This endpoint provides employees with the capability to search and review their own, team, or enterprise chat sessions. Users can query for sessions by AI vendor, chat title, disclosure setting (private/protected/public), team, or creation/update period. Pagination and sorting options are provided to support efficient navigation of large session lists within an enterprise environment.\n\nAccess controls are strictly enforced: each employee is only permitted to view sessions according to business rules established by their enterprise, team memberships, and session disclosure settings. Public sessions are visible within the enterprise, protected sessions to the relevant team, and private sessions to the session owner only. Moderator actors are intentionally excluded from this endpoint to prevent cross-tenant visibility—moderator session listings are handled by a separate administrative path.\n\nThe response consists of a paginated list of session summaries, each including the session's fundamental identifiers, ownership details, disclosure level, associated team and persona summaries, and session metadata wrapped in DTOs. This endpoint is essential for client-side dashboards, search UIs, and chat session management tools.","summary":"List/search and page through chat sessions (wrtn_chat_sessions) for the current employee, with advanced filtering and paging.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters to locate relevant chat sessions for the current employee, including vendor, disclosure, team, and timestamp ranges.","typeName":"IWrtnChatSession.IRequest"},"responseBody":{"description":"Paged result of employee-visible chat session summaries matching the provided query and access controls.","typeName":"IPageIWrtnChatSession.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","path":"/wrtnEnterprise/employee/chatSessions","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the detailed information of a specific chat session identified by chatSessionId, as stored in the wrtn_chat_sessions table. It enables employees to view the full details of a chat session—including its owner, team, persona, disclosure setting, token usage statistics, connections, and session histories—provided they have access per the business-defined visibility rules: private (owner-only), protected (team), or public (enterprise-wide). All fields included in the response are mapped directly from, or in direct relation to, the wrtn_chat_sessions schema and its normalized relationships as described in the schema comments.","description":"This endpoint returns a detailed view of a single chat session, including its owner (employee), team designation, persona employed during the session, session metadata (vendor, title, disclosure, creation/update times), and all related session aggregates.\n\nThe operation enforces strict RBAC and enterprise data boundaries. The underlying logic validates the requesting actor's access to the session: private sessions are visible only to the creator, protected sessions to team members (within the same enterprise), and public sessions to all employees of the enterprise. Access is denied for sessions outside the user's entitlement, and moderator actors must use administrative interfaces for cross-tenant activities.\n\nThe response provides a full detail DTO, referencing related entities as objects (not only scalar FKs), including token usage statistics, connection history, and a comprehensive listing of chat session histories adhering to privacy controls and normalization constraints. All fields are enforced to follow DTO and relation mapping mandates presented in both the business documentation and the Prisma schema comments.","summary":"Retrieve full detail of a single chat session (wrtn_chat_sessions) with all major entity relations and access control enforcement.","parameters":[{"name":"chatSessionId","description":"Unique identifier of the chat session to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chat session information, including owner, team, persona, token usage, connections, and session histories, mapped to full DTO.","typeName":"IWrtnChatSession"},"authorizationType":null,"authorizationActor":"employee","name":"at","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}","method":"get","prerequisites":[]},{"specification":"This operation allows an authenticated employee to create a new chat session for AI-powered conversation within their enterprise. The operation directly references the wrtn_chat_sessions table in the Prisma schema, ensuring all required fields are present and valid. According to the requirements and API design instructions, the request can specify a persona ID (wrtn_enterprise_employee_persona_id), or if omitted, the system finds the authenticated employee's most recently created persona. If no valid persona is found, the operation fails. Disclosure level and AI vendor must always be specified; team association and title are optional. The employee's ID and session are injected via authentication context and are not client-supplied fields.","path":"/wrtnEnterprise/employee/chatSessions","method":"post","summary":"Create a new wrtn_chat_sessions record for an AI-powered chat session.","description":"This API enables employees to initiate new chat sessions scoped to their enterprise or optionally to a specific team. The endpoint supports selection of AI model vendor, session title, disclosure level (private/protected/public), and persona. If no persona ID is supplied, the system will automatically use the most recent existing persona for the authenticated employee, or fail if none exists. Team context is optionally provided for team-specific chats. Required Prisma schema fields for wrtn_chat_sessions—wrtn_enterprise_employee_id, wrtn_enterprise_employee_session_id, wrtn_enterprise_employee_persona_id, vendor, disclosure, created_at, updated_at, and optional fields (team, title)—are mapped from this operation. Only authorized employees can create sessions; values for employee and session context are always derived from the JWT and not user input. The operation returns the newly created chat session details with proper relation mapping (employee, persona, team) per DTO guidelines.\n\nThis operation enforces business rules that guarantee every chat session has an associated persona, and robust error handling for persona lookup edge cases. Security is ensured by solely accepting authenticated requests from employees, and all created sessions are strictly scoped to the requesting user's enterprise.","parameters":[],"requestBody":{"description":"Data to create a new wrtn_chat_sessions record, including AI vendor, optional title, disclosure level, persona ID (or automatic fallback), and optional team. The employee identity and session context are extracted from the authentication context, not client parameters. Follows API design instruction for persona resolution.","typeName":"IWrtnChatSession.ICreate"},"responseBody":{"description":"The complete chat session entity, including employee, persona, and optional team objects, token usage, connection, and message history arrays.","typeName":"IWrtnChatSession"},"authorizationActors":["employee"],"name":"create","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows an authenticated employee to update an existing chat session's title or disclosure level. The operation modifies the wrtn_chat_sessions table record for the given chatSessionId (UUID). Only the session's title and disclosure status may be updated by this endpoint; other key fields such as vendor, persona, or employee reference remain immutable after creation. The endpoint requires the chatSessionId path parameter and an update payload specifying the desired changes. Authorization checks ensure that only employees with appropriate session access can modify the target session. According to the Prisma schema, only fields marked mutable (title, disclosure, updated_at) are permitted to change. The response returns the full updated chat session view including all standard relation mappings (employee, persona, team, token usage, connections, and histories).","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}","method":"put","summary":"Update the title or disclosure setting of a wrtn_chat_sessions record by chatSessionId.","description":"This API enables authorized employees to modify metadata for existing chat sessions, scoped strictly to session owner or privileged users per business policy. Only the title and disclosure fields may be changed—other record attributes such as persona, vendor, employee, and team are immutable post-creation. The endpoint enforces robust validation and access control: only employees with a valid relationship to the session (e.g., session creator or enterprise data owner) may perform this update.\n\nThe wrtn_chat_sessions table in the Prisma schema supports title and disclosure as mutable fields. The operation updates only these fields, with the updated_at field set automatically. Business logic verifies that disclosure changes meet enterprise privacy requirements. Upon successful update, the operation returns the updated chat session object, including all required relations as outlined in interface design guidelines (employee, persona, team, token usage, connections, histories). Offers detailed error handling for invalid session IDs or unauthorized requests.","parameters":[{"name":"chatSessionId","description":"Unique identifier (UUID) of the target chat session to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object specifying the fields to update for the chat session (title and/or disclosure). Only these fields are permitted for update; other fields must be ignored. The employee identity and session context are enforced from authentication and not supplied directly.","typeName":"IWrtnChatSession.IUpdate"},"responseBody":{"description":"The updated chat session object, including all required relation mappings.","typeName":"IWrtnChatSession"},"authorizationActors":["employee"],"name":"update","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation irreversibly deletes an existing chat session from the system using its unique identifier. It is associated with the wrtn_chat_sessions table, which stores all chatbot session metadata such as ownership, title, disclosure, and related audit-tracing fields. Permanent removal is performed (hard deletion), as the underlying schema includes a deleted_at field for soft deletion but the intent of this endpoint is to fully erase the record for scenarios requiring explicit destruction, such as compliance-mandated purging or voiding of test data by administrators. On execution, the system will remove all data directly tied to the chat session ID, including associated session connections, histories, token usages, and aggregates, ensuring no residual informational artifacts remain in the database.\n\nThis operation must be restricted to authorized actors only due to the irreversible nature of the deletion and the potential for loss of valuable records. Critical security policies are enforced to guarantee that only select employee roles or system moderators with appropriate rights can delete chat sessions. The actor must be authenticated, and the action will be recorded in the audit log for compliance and traceability.\n\nIf the chat session does not exist or the user lacks permission, a detailed error message will be returned. Error scenarios include attempting to delete an already-deleted or non-existent session, or unauthorized access due to insufficient actor privilege.\n\nFor successful requests, a null response is returned to indicate completion with no data payload, as the session and related records are erased from the system.","description":"Permanently removes the specified chat session and all related data from the backend system by its unique identifier. This operation operates on the wrtn_chat_sessions table as well as associated subordinate entities (session connections, histories, aggregates, tokens) as described in the schema comments, executing a hard deletion to comply with situations such as explicit purge requests, regulatory cleanup, or test session voiding. Because deletion eliminates not only the chat session but all subordinate records, it is a potentially destructive operation and should be audited and authorized to prevent unintentional or malicious erasure.\n\nStrict security is enforced: only users with explicitly granted permission—such as system moderators or specific high-level employees (e.g., 'master' title)—can perform deletion, and all events are audit-logged for compliance. An error is returned if the session does not exist, has already been deleted, or the actor is unauthorized.\n\nOn success, the operation will return an empty response with HTTP 204 to confirm permanent removal, as all associated information referenced by the chat session is eliminated.\n\nNo soft deletion is performed; all traces of the chat session and subordinate records are effectively purged from the database, including aggregations and historical usage counts. This operation is complementary to retrieval and audit-log endpoints, and should only be used when permanent removal is required.","summary":"Permanently delete a chat session and all subordinate data (wrtn_chat_sessions table and related entities) by unique ID.","parameters":[{"name":"chatSessionId","description":"Unique identifier of the chat session to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee","moderator"],"name":"erase","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}","method":"delete","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation irreversibly deletes an existing chat session from the system using its unique identifier. It is associated with the wrtn_chat_sessions table, which stores all chatbot session metadata such as ownership, title, disclosure, and related audit-tracing fields. Permanent removal is performed (hard deletion), as the underlying schema includes a deleted_at field for soft deletion but the intent of this endpoint is to fully erase the record for scenarios requiring explicit destruction, such as compliance-mandated purging or voiding of test data by administrators. On execution, the system will remove all data directly tied to the chat session ID, including associated session connections, histories, token usages, and aggregates, ensuring no residual informational artifacts remain in the database.\n\nThis operation must be restricted to authorized actors only due to the irreversible nature of the deletion and the potential for loss of valuable records. Critical security policies are enforced to guarantee that only select employee roles or system moderators with appropriate rights can delete chat sessions. The actor must be authenticated, and the action will be recorded in the audit log for compliance and traceability.\n\nIf the chat session does not exist or the user lacks permission, a detailed error message will be returned. Error scenarios include attempting to delete an already-deleted or non-existent session, or unauthorized access due to insufficient actor privilege.\n\nFor successful requests, a null response is returned to indicate completion with no data payload, as the session and related records are erased from the system.","description":"Permanently removes the specified chat session and all related data from the backend system by its unique identifier. This operation operates on the wrtn_chat_sessions table as well as associated subordinate entities (session connections, histories, aggregates, tokens) as described in the schema comments, executing a hard deletion to comply with situations such as explicit purge requests, regulatory cleanup, or test session voiding. Because deletion eliminates not only the chat session but all subordinate records, it is a potentially destructive operation and should be audited and authorized to prevent unintentional or malicious erasure.\n\nStrict security is enforced: only users with explicitly granted permission—such as system moderators or specific high-level employees (e.g., 'master' title)—can perform deletion, and all events are audit-logged for compliance. An error is returned if the session does not exist, has already been deleted, or the actor is unauthorized.\n\nOn success, the operation will return an empty response with HTTP 204 to confirm permanent removal, as all associated information referenced by the chat session is eliminated.\n\nNo soft deletion is performed; all traces of the chat session and subordinate records are effectively purged from the database, including aggregations and historical usage counts. This operation is complementary to retrieval and audit-log endpoints, and should only be used when permanent removal is required.","summary":"Permanently delete a chat session and all subordinate data (wrtn_chat_sessions table and related entities) by unique ID.","parameters":[{"name":"chatSessionId","description":"Unique identifier of the chat session to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee","moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/chatSessions/{chatSessionId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered list of chat session histories (messages and assistant responses) for a specific chat session, providing end-users and client applications with incremental access to conversation records. The operation is anchored on the wrtn_chat_session_histories table, responsible for holding encrypted JSON blobs for both user and assistant message types, strictly following the session association through wrtn_chat_sessions.id. The endpoint allows the caller to search, paginate, and sort through all messages and invocation records for a given session, supporting efficient navigation in large or lengthy conversations.\n\nFiltering, lexical search, and sort features should be supported by request body parameters, and the result set delivered using stable, deterministic pagination (typically by creation timestamp descending then by unique id). The response conforms to the IPageIWrtnChatSessionHistory container, each entry strictly representing the message format as defined by the business requirements. Per instructions, the returned DTO must never include a session reference property but instead focus on message properties and contents only.\n\nThe operation enforces strict permission checks: only authenticated employees of the correct enterprise, with access rights to the specific session (according to its disclosure constraint and business actor), may list histories for this session. Unauthorized or out-of-scope queries result in explicit errors.","description":"Returns a paged, filterable list of histories (user/assistant/execute messages) for a given chat session, as stored in the wrtn_chat_session_histories table, using the provided chatSessionId as reference. Each message structure, including contents, attachments, and assistant responses, adheres to the IWrtnChatSessionHistory contract specified in the direct business requirements. This operation supports advanced searching and pagination through request parameters, allowing clients to download large conversational logs incrementally and efficiently. Auxiliary features (like sorting by date or reverse order) are recommended for usability.\n\nActor security and privacy controls are strictly enforced—all session histories are accessible only to users with access to the given session. The operation complements the chat session retrieval and connection listing endpoints. Edge cases, such as deleted sessions or insufficient permissions, return actionable business errors.","summary":"Retrieve a paginated, optionally filtered list of histories for a specific chat session by unique ID (wrtn_chat_session_histories table).","parameters":[{"name":"chatSessionId","description":"Unique identifier of the chat session whose histories are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, pagination, and filter parameters for retrieving chat session histories.","typeName":"IWrtnChatSessionHistory.IRequest"},"responseBody":{"description":"Paginated result set of message histories for the specified chat session. Each entry strictly follows the IWrtnChatSessionHistory DTO contract, without session reference property as instructed.","typeName":"IPageIWrtnChatSessionHistory"},"authorizationActors":["employee"],"name":"index","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/histories","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific chat session history (such as a message or activity event) for a given chat session, using the provided chatSessionId and historyId path parameters. The history entry is returned in detail, following the strict business- and schema-driven requirements for history retrieval and privacy.\n\nThe operation is associated with the wrtn_chat_session_histories table from the Prisma schema. The returned data references the explicitly described DTO 'IWrtnChatSessionHistory', which MUST match the interface as documented in the requirements (see section 6.2 – no summary or session reference is present on the entity itself). The endpoint checks access privileges based on the owning session, employee membership, and disclosure level, returning 404 for not-found (or out-of-scope) histories, and enforcing audit-traceable access logging for compliance.\n\nThe operation supports full audit and legal traceability. Path parameter values must be valid UUIDs. The endpoint will return 200 with the history entry, or 404/403 on error or unauthorized access. This endpoint is essential for conversation UI replay and auditing tools.\n","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/histories/{historyId}","method":"get","description":"Retrieve a single chat session history entry by its unique identifier (historyId), scoped to a specific chat session (chatSessionId). This endpoint enables clients to fetch the full details of individual chat messages (user/AI/system) or activity events within a chat session as required for UI display, compliance logging, or investigative/audit workflows.\n\nThe response strictly uses the IWrtnChatSessionHistory DTO, as defined in section 6.2 of the requirements: the type discriminator and structure MUST adhere precisely to the explicit schema, and no relation to the session is present within the response object (no session reference, no summary structure). This rule must be rigorously enforced to ensure decoupled frontend message rendering and legal evidence separation. Attempts to fetch deleted, non-existent, or unauthorized history entries result in 404 or 403 appropriately.\n\nSecurity is paramount. All access, both successful and denied, is fully audit-logged with actor/session context leveraging JWT identity and is restricted to actors with a valid session context and authorization per chat session disclosure (private/protected/public) and enterprise data policies.\n\nThis operation is business critical for chat retrieval and regulatory, user, or enterprise compliance, and must satisfy all data isolation, access scope, and retention requirements. It fully reflects the wrtn_chat_session_histories table from the schema.\n","summary":"Retrieve a specific chat session history (IWrtnChatSessionHistory) for a given chat session (wrtn_chat_session_histories) by its historyId.","parameters":[{"name":"chatSessionId","description":"Unique identifier (UUID) of the parent chat session in which the history event/message resides.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier (UUID) of the specific chat session history/message to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the chat session history entry, conforming strictly to the IWrtnChatSessionHistory contract, with no session reference per requirements section 6.2.","typeName":"IWrtnChatSessionHistory"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation enables advanced search and retrieval of all connection records (join/leave events) for a given chat session, using the specified chatSessionId. It corresponds to the wrtn_chat_session_connections table in the Prisma schema, and is crucial for auditing participant activity, visualizing session timelines, and diagnostic analytics.\n\nThe endpoint allows complex search parameters via a request body following the 'IWrtnChatSessionConnection.IRequest' DTO pattern, supporting filtering by connection time, disconnection, participant identity, or other relevant parameters. Results are paginated and summarized following best dashboard and compliance practices.\n\nThis operation is intended for use by employees with session access, and provides only scoped data that the actor is permitted to view under enterprise privacy and disclosure policies. All accesses and queries are fully audit logged with JWT context for legal compliance.","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/connections","method":"patch","description":"Retrieve and search the set of all connection events (participants joining and leaving) within a specific chat session, enabling chronological timeline rendering and security analysis. Requesters can filter connections using the IWrtnChatSessionConnection.IRequest format, leveraging fields such as connected_at/disconnected_at range, employee identity, and session metadata.\n\nResults are returned in a paginated list matching the IPageIWrtnChatSessionConnection.ISummary structure, providing essential join/leave information for dashboards, compliance reporting, and debugging abnormal session activity. Security is strictly enforced: only participants or actors with access per disclosure are authorized to see session activity. All query actions are audited for compliance and traceability.\n\nIf the session or connection activities are not found, the endpoint returns an empty result page. The response summary DTO must include all required relation and scalar fields relevant for UI consumption and compliance. This operation reflects the wrtn_chat_session_connections table in the Prisma schema.","summary":"Search and retrieve all chat session connection records for a given chat session (wrtn_chat_session_connections), supporting advanced filtering (IWrtnChatSessionConnection.IRequest) and returning paginated summaries.","parameters":[{"name":"chatSessionId","description":"Unique identifier (UUID) of the chat session for which connections are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search and filter criteria for chat session connections, supporting filtering by connected/disconnected range, participant, and other analytic fields following IWrtnChatSessionConnection.IRequest DTO.","typeName":"IWrtnChatSessionConnection.IRequest"},"responseBody":{"description":"Paginated list of chat session connection summaries matching search criteria, using dashboard-optimized summary structure (IPageIWrtnChatSessionConnection.ISummary).","typeName":"IPageIWrtnChatSessionConnection.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves the details of a specific chat session connection for audit, analytic, or compliance review purposes. It operates on the wrtn_chat_session_connections table in the Chatbot database schema. The endpoint expects both a chat session ID and a connection ID as path parameters, and returns the complete details of the chat session connection, including the employee who participated, associated employee session, connection and disconnection times, and related compliance linkages. This operation is essential for reconstructing chat session participants, tracking user presence, and evaluating access records for system audits and support workflows.","description":"Retrieve the details of a specific chat session connection. This API endpoint pulls the full record of a chat session connection, allowing administrators and compliance actors to view participant presence, connection and disconnection times, and linkage to employee and session context.\n\nSecurity considerations dictate that only authorized actors can access this information due to its sensitive nature (may expose employee session trace). Authentication and role-based access should be enforced such that moderators (internal staff) can retrieve for any session, but employees can only see their own session events per enterprise isolation policy.\n\nThe request requires both the target chatSessionId and the connectionId, which must be valid UUIDs referring to existing records in wrtn_chat_sessions and wrtn_chat_session_connections respectively. If either does not exist, a 404 Not Found error should be returned. If the user is not authorized to access the connection information (not the owner or permitted moderator), a 403 Forbidden error must be returned.\n\nThis operation connects deeply with the audit trail and analytics workflow; the details supplied will reflect both connection, disconnection, and all identifiable actor/session information suitable for time-based presence reporting, investigations, or support intervention. Expect robust input validation and detailed error coding for not found and forbidden scenarios.","summary":"Retrieve specific chat session connection details (Chatbot: wrtn_chat_session_connections).","parameters":[{"name":"chatSessionId","description":"Unique identifier for the target chat session.","schema":{"type":"string","format":"uuid"}},{"name":"connectionId","description":"Unique identifier for the chat session connection to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the chat session connection, including participant employee, employee session, timestamps, and related presence state.","typeName":"IWrtnChatSessionConnection"},"authorizationActors":["employee","moderator"],"name":"at","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/connections/{connectionId}","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a specific chat session connection for audit, analytic, or compliance review purposes. It operates on the wrtn_chat_session_connections table in the Chatbot database schema. The endpoint expects both a chat session ID and a connection ID as path parameters, and returns the complete details of the chat session connection, including the employee who participated, associated employee session, connection and disconnection times, and related compliance linkages. This operation is essential for reconstructing chat session participants, tracking user presence, and evaluating access records for system audits and support workflows.","description":"Retrieve the details of a specific chat session connection. This API endpoint pulls the full record of a chat session connection, allowing administrators and compliance actors to view participant presence, connection and disconnection times, and linkage to employee and session context.\n\nSecurity considerations dictate that only authorized actors can access this information due to its sensitive nature (may expose employee session trace). Authentication and role-based access should be enforced such that moderators (internal staff) can retrieve for any session, but employees can only see their own session events per enterprise isolation policy.\n\nThe request requires both the target chatSessionId and the connectionId, which must be valid UUIDs referring to existing records in wrtn_chat_sessions and wrtn_chat_session_connections respectively. If either does not exist, a 404 Not Found error should be returned. If the user is not authorized to access the connection information (not the owner or permitted moderator), a 403 Forbidden error must be returned.\n\nThis operation connects deeply with the audit trail and analytics workflow; the details supplied will reflect both connection, disconnection, and all identifiable actor/session information suitable for time-based presence reporting, investigations, or support intervention. Expect robust input validation and detailed error coding for not found and forbidden scenarios.","summary":"Retrieve specific chat session connection details (Chatbot: wrtn_chat_session_connections).","parameters":[{"name":"chatSessionId","description":"Unique identifier for the target chat session.","schema":{"type":"string","format":"uuid"}},{"name":"connectionId","description":"Unique identifier for the chat session connection to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the chat session connection, including participant employee, employee session, timestamps, and related presence state.","typeName":"IWrtnChatSessionConnection"},"authorizationActors":["employee","moderator"],"name":"at","path":"/wrtnEnterprise/moderator/chatSessions/{chatSessionId}/connections/{connectionId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the total and categorized token usage for a specific chat session using the wrtn_chat_session_aggregate_token_usages table. The API allows employees and moderators to monitor AI consumption, cost analytics, and compliance with quotas on a per-session basis. The endpoint expects a chatSessionId path parameter, and will provide the aggregate token usage (including input, output, cache, reasoning, accepted, and rejected predictions) following the business-driven reporting DTO standards specified for IWrtnTokenUsage. This operation supports dashboards, live reporting, overage analysis, and data export for postpaid billing and analytics requirements. It also allows employees to self-monitor their usage and for moderators to audit session-level token consumption.","description":"Retrieve the aggregate token usage details for a specific chat session. This endpoint queries the total tokens consumed during the session, breaking down subcategories such as input, output, cache, reasoning, accepted, and rejected tokens according to the IWrtnTokenUsage specification.\n\nSecurity enforcement ensures only authorized actors (session-owning employees or permitted internal moderators) can access this endpoint. Strict resource isolation is applied—an employee can only request usage for their enterprise’s sessions and only ones they participated in; a moderator may access for compliance or billing analysis purposes. If the session does not exist, a 404 error must be returned. If the actor is unauthorized, a 403 error is returned.\n\nThis operation supports financial dashboards, usage notifications, billing and analytics workflows, and helps users track and control their AI model/cost consumption. The token usage values are normalized for consumption in BI tools or cost attribution pipelines. All breakdown fields follow the IWrtnTokenUsage API DTO as per section 6.3, and the response is guaranteed to return all token usage categories with integer values (defaulting to zero if no data is present).","summary":"Retrieve aggregate token usage for a chat session (Chatbot: wrtn_chat_session_aggregate_token_usages).","parameters":[{"name":"chatSessionId","description":"Unique identifier for the chat session whose token usage is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregate, normalized token usage information for the requested chat session, categorized according to IWrtnTokenUsage DTO (input, output, cache, acceptance, reasoning, etc).","typeName":"IWrtnTokenUsage"},"authorizationActors":["employee","moderator"],"name":"at","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/tokenUsage","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the total and categorized token usage for a specific chat session using the wrtn_chat_session_aggregate_token_usages table. The API allows employees and moderators to monitor AI consumption, cost analytics, and compliance with quotas on a per-session basis. The endpoint expects a chatSessionId path parameter, and will provide the aggregate token usage (including input, output, cache, reasoning, accepted, and rejected predictions) following the business-driven reporting DTO standards specified for IWrtnTokenUsage. This operation supports dashboards, live reporting, overage analysis, and data export for postpaid billing and analytics requirements. It also allows employees to self-monitor their usage and for moderators to audit session-level token consumption.","description":"Retrieve the aggregate token usage details for a specific chat session. This endpoint queries the total tokens consumed during the session, breaking down subcategories such as input, output, cache, reasoning, accepted, and rejected tokens according to the IWrtnTokenUsage specification.\n\nSecurity enforcement ensures only authorized actors (session-owning employees or permitted internal moderators) can access this endpoint. Strict resource isolation is applied—an employee can only request usage for their enterprise’s sessions and only ones they participated in; a moderator may access for compliance or billing analysis purposes. If the session does not exist, a 404 error must be returned. If the actor is unauthorized, a 403 error is returned.\n\nThis operation supports financial dashboards, usage notifications, billing and analytics workflows, and helps users track and control their AI model/cost consumption. The token usage values are normalized for consumption in BI tools or cost attribution pipelines. All breakdown fields follow the IWrtnTokenUsage API DTO as per section 6.3, and the response is guaranteed to return all token usage categories with integer values (defaulting to zero if no data is present).","summary":"Retrieve aggregate token usage for a chat session (Chatbot: wrtn_chat_session_aggregate_token_usages).","parameters":[{"name":"chatSessionId","description":"Unique identifier for the chat session whose token usage is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregate, normalized token usage information for the requested chat session, categorized according to IWrtnTokenUsage DTO (input, output, cache, acceptance, reasoning, etc).","typeName":"IWrtnTokenUsage"},"authorizationActors":["employee","moderator"],"name":"at","path":"/wrtnEnterprise/moderator/chatSessions/{chatSessionId}/tokenUsage","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed token usage for a specific chat session history entry. It queries the wrtn_chat_session_history_token_usages table, which tracks, for each chat message or activity in a chat session, the exact number of tokens consumed during AI model inference—including input tokens, cached tokens, output tokens (including reasoning, accepted and rejected predictions), matched to business requirements for full audit and cost accounting. The operation is critical for transparency in billing, KPI reporting, and troubleshooting AI usage at the message level.","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/histories/{historyId}/tokenUsage","method":"get","summary":"Retrieve token usage details for a specific chat session history entry from wrtn_chat_session_history_token_usages.","description":"Fetches the complete token usage breakdown for a given chat session history message, in compliance with the wrtn_chat_session_history_token_usages schema. This endpoint is commonly used for cost analytics, detailed reporting, and compliance audits, enabling detailed review of resource use by individual message/event.\n\nSecurity: Only accessible to the session owner, other authorized employees in the same enterprise/team with sufficient rights, or authorized moderators for enterprise support and compliance purposes. User identity and authorization are enforced according to JWT context and enterprise isolation rules.\n\nThe response provides input token metrics, cache hit breakdown, output token metrics, and classification details (reasoning, accepted or rejected predictions) in the form of the IWrtnTokenUsage DTO. All fields are provided as zero when the corresponding token usage record does not exist.\n\nThis operation is typically accessed in combination with chat session and history APIs, such as retrieving session histories first, then requesting token usage for selected entries.\n\nError handling follows standard business rules: 404 Not Found if the history or token usage record does not exist for the provided parameters, and 403 Forbidden for unauthorized queries outside permitted actor scopes.\n\nNo request body is required. Path parameters of chatSessionId and historyId must be valid UUIDs matching existing records.","parameters":[{"name":"chatSessionId","description":"Unique identifier for the target chat session.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier for the chat session history entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Token usage breakdown for the specified chat session history, following IWrtnTokenUsage DTO.","typeName":"IWrtnTokenUsage"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves the detailed token usage for a specific chat session history entry. It queries the wrtn_chat_session_history_token_usages table, which tracks, for each chat message or activity in a chat session, the exact number of tokens consumed during AI model inference—including input tokens, cached tokens, output tokens (including reasoning, accepted and rejected predictions), matched to business requirements for full audit and cost accounting. The operation is critical for transparency in billing, KPI reporting, and troubleshooting AI usage at the message level.","path":"/wrtnEnterprise/moderator/chatSessions/{chatSessionId}/histories/{historyId}/tokenUsage","method":"get","summary":"Retrieve token usage details for a specific chat session history entry from wrtn_chat_session_history_token_usages.","description":"Fetches the complete token usage breakdown for a given chat session history message, in compliance with the wrtn_chat_session_history_token_usages schema. This endpoint is commonly used for cost analytics, detailed reporting, and compliance audits, enabling detailed review of resource use by individual message/event.\n\nSecurity: Only accessible to the session owner, other authorized employees in the same enterprise/team with sufficient rights, or authorized moderators for enterprise support and compliance purposes. User identity and authorization are enforced according to JWT context and enterprise isolation rules.\n\nThe response provides input token metrics, cache hit breakdown, output token metrics, and classification details (reasoning, accepted or rejected predictions) in the form of the IWrtnTokenUsage DTO. All fields are provided as zero when the corresponding token usage record does not exist.\n\nThis operation is typically accessed in combination with chat session and history APIs, such as retrieving session histories first, then requesting token usage for selected entries.\n\nError handling follows standard business rules: 404 Not Found if the history or token usage record does not exist for the provided parameters, and 403 Forbidden for unauthorized queries outside permitted actor scopes.\n\nNo request body is required. Path parameters of chatSessionId and historyId must be valid UUIDs matching existing records.","parameters":[{"name":"chatSessionId","description":"Unique identifier for the target chat session.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier for the chat session history entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Token usage breakdown for the specified chat session history, following IWrtnTokenUsage DTO.","typeName":"IWrtnTokenUsage"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation retrieves the aggregate token usage statistics for a specific chat session, as summarized in the wrtn_chat_session_aggregate_token_usages table. The aggregation covers all chat session history entries and provides total tokens consumed, by input/output/cached/reasoning, as well as usage attribution split required for cost analytics and reporting. Enables enterprise customers or moderators to gain high-level insights into the overall token usage for a session, supporting auditing, billing, quota management, and business intelligence.","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/aggregate","method":"get","summary":"Retrieve aggregate token usage totals for a given chat session from wrtn_chat_session_aggregate_token_usages.","description":"Fetches the cumulative token usage for all history entries within the specified chat session, leveraging wrtn_chat_session_aggregate_token_usages to provide a complete breakdown of input/output token consumption, cache utilization, reasoning tokens, accepted predictions, and rejected predictions. The response encapsulates all relevant token metrics in the IWrtnTokenUsage DTO, with all fields defaulting to zero in the absence of a recorded aggregate.\n\nOnly employees who are session participants, their enterprise moderators, and authorized internal moderators may access this endpoint. Authorization is checked against JWT identity and session context to maintain strict enterprise isolation and data privacy requirements.\n\nThe endpoint is used for usage dashboards, billing dashboards, and anomaly detection. It is often requested in conjunction with session detail endpoints and employee/activity analytics.\n\nError scenario: 404 Not Found if session or aggregate record does not exist, 403 Forbidden for unauthorized access.\n\nRequired path parameter: chatSessionId (UUID format). No request body required.","parameters":[{"name":"chatSessionId","description":"Unique identifier for the target chat session.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregate token usage metrics for the specified chat session, returned as IWrtnTokenUsage DTO.","typeName":"IWrtnTokenUsage"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves the aggregate token usage statistics for a specific chat session, as summarized in the wrtn_chat_session_aggregate_token_usages table. The aggregation covers all chat session history entries and provides total tokens consumed, by input/output/cached/reasoning, as well as usage attribution split required for cost analytics and reporting. Enables enterprise customers or moderators to gain high-level insights into the overall token usage for a session, supporting auditing, billing, quota management, and business intelligence.","path":"/wrtnEnterprise/moderator/chatSessions/{chatSessionId}/aggregate","method":"get","summary":"Retrieve aggregate token usage totals for a given chat session from wrtn_chat_session_aggregate_token_usages.","description":"Fetches the cumulative token usage for all history entries within the specified chat session, leveraging wrtn_chat_session_aggregate_token_usages to provide a complete breakdown of input/output token consumption, cache utilization, reasoning tokens, accepted predictions, and rejected predictions. The response encapsulates all relevant token metrics in the IWrtnTokenUsage DTO, with all fields defaulting to zero in the absence of a recorded aggregate.\n\nOnly employees who are session participants, their enterprise moderators, and authorized internal moderators may access this endpoint. Authorization is checked against JWT identity and session context to maintain strict enterprise isolation and data privacy requirements.\n\nThe endpoint is used for usage dashboards, billing dashboards, and anomaly detection. It is often requested in conjunction with session detail endpoints and employee/activity analytics.\n\nError scenario: 404 Not Found if session or aggregate record does not exist, 403 Forbidden for unauthorized access.\n\nRequired path parameter: chatSessionId (UUID format). No request body required.","parameters":[{"name":"chatSessionId","description":"Unique identifier for the target chat session.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregate token usage metrics for the specified chat session, returned as IWrtnTokenUsage DTO.","typeName":"IWrtnTokenUsage"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation retrieves the aggregate token usage statistics for a specific chat session, using the wrtn_chat_sessions and wrtn_chat_session_aggregate_token_usages tables. The operation allows system clients to retrieve a comprehensive summary of token consumption for model usage analytics, billing, cost reporting, and usage monitoring at the session level. The endpoint requires the chat session's unique identifier (UUID) as a path parameter. The response provides the complete summary of token usage (input, output, cached, reasoning, accepted/rejected prediction) using the IWrtnTokenUsage DTO as mandated by business requirements. This operation is essential for administrators, billing systems, and analytics/dashboards seeking to report usage or project costs for a given chat session. It strictly enforces single-session scoping, and appropriate access control should be implemented so that only participants or permitted employees may access this data.\n\nThe operation leverages the aggregate row (wrtn_chat_session_aggregate_token_usages), so all token fields are summed for the session. If for any reason no aggregate is found or the session contains no token usage, all values are returned as zero, never omitted. The business justification includes providing detailed cost transparency and usage analytics by session for enterprise postpaid billing and audit. The response DTO must comply EXACTLY with IWrtnTokenUsage interface, no property splitting or merging is allowed.","description":"Retrieve the aggregate (summed) token usage for a single chat session, as specified by its chatSessionId. The core intent is to provide a complete summary of token consumption for the session, suitable for cost reporting, analytics dashboards, and compliance audits. \n\nThe returned structure reflects cumulative usage calculated by the wrtn_chat_session_aggregate_token_usages table tied to the given chat session. All returned fields sum the total, input (including cached), output (including reasoning, accepted, rejected), and are mapped exactly per the IWrtnTokenUsage specification required for billable event analysis. \n\nStrict access controls must ensure that only employees with appropriate session, enterprise, or team permissions (often the session creator, participants, or permitted administrators) are able to retrieve this data. This endpoint intentionally excludes any individual message or per-history breakdown, and is primarily used for dashboard/analytics data extraction.\n\nIf no usage is present for this session, response values are all zeros (never omitted). The endpoint must not return soft-deleted/expired sessions except to permitted actors for compliance purposes.\n","summary":"Retrieve aggregate token usage for a single chat session (wrtn_chat_sessions).","parameters":[{"name":"chatSessionId","description":"Unique identifier (UUID) of the chat session for which token usage summary will be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Session-level aggregate token usage breakdown as per IWrtnTokenUsage DTO. Zeros if missing or not yet computed.","typeName":"IWrtnTokenUsage"},"authorizationType":null,"authorizationActor":"employee","name":"at","path":"/wrtnEnterprise/employee/chatSessions/{chatSessionId}/aggregate/tokenUsage","method":"get","prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered, and searchable list of AI procedures (catalog entries), implemented on the wrtn_procedures table. This search endpoint enables employees and permitted users to flexibly query the full list of available AI procedures, supporting advanced filtering (by active status, code, title, description, enterprise/team assignment, etc.), full-text search, and ordering, as required by catalogue browsing screens, admin panels, and team-level configuration UIs. The result set can be restricted by procedure activation status, enabling up-to-date representation of only enabled functions if desired. \n\nThe response is a standard paginated result set (IPageIWrtnProcedure.ISummary) listing summarized information for each found procedure, as required for large-scale UI displays. This endpoint supports dashboard use cases, onboarding screens, enterprise/team configuration, and analytics modules that require enumerating catalogue procedures. It can also provide a foundation for search suggestions and quick-access tools in the UI. The endpoint leverages the wrtn_procedures table exclusively, and does not expose enterprise/team assignment join logic; that may be included in application business logic or additional endpoints.\n\nFor security and access control, only authenticated employees (and optionally internal moderators) should be permitted to execute this API, as procedures are a core resource for enterprise automation. This endpoint does not support creation or mutation actions.","description":"Search and retrieve a list of AI procedures from the service catalog with advanced filtering, searching, and pagination. The operation enables enterprise employees to flexibly browse, search, and discover available procedures suitable for their work needs, including filtering by status (active/inactive), keyword in code/title/description, and ordering by creation date or display order.\n\nPagination parameters control page size and navigation for efficient large-scale catalogs. Output is a paginated response (IPageIWrtnProcedure.ISummary), with each summary exposing core business metadata (procedure code, title, activation status, description, and icon if present).\n\nSecurity considerations dictate that only authenticated actors – primarily employees (and optionally moderators) – may access this endpoint as the procedures described form a critical enablement component for enterprise teams. The endpoint does not allow catalog creation/update; for that, moderator-level endpoints are used. Error cases include invalid pagination/search parameters or requesting beyond available data pages.","summary":"Search and retrieve a paginated, filtered list of AI procedures (wrtn_procedures).","parameters":[],"requestBody":{"description":"Search and filtering parameters for AI procedure catalog queries, supporting filtering, text search, paging, and ordering. See IWrtnProcedure.IRequest.","typeName":"IWrtnProcedure.IRequest"},"responseBody":{"description":"Paginated list of AI procedure summary entries (IPageIWrtnProcedure.ISummary) matching the search/filter criteria.","typeName":"IPageIWrtnProcedure.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","path":"/wrtnEnterprise/employee/procedures","method":"patch","prerequisites":[]},{"specification":"This operation retrieves a single procedure's details using its unique identifier. It maps directly to the wrtn_procedures table in the Prisma schema, providing all fields necessary for displaying procedure metadata such as code, title, description, icon, activation status, and audit timestamps. This endpoint is vital for employees who need to view specific procedure configurations prior to execution or management, and for moderation purposes when reviewing catalog settings.","path":"/wrtnEnterprise/employee/procedures/{procedureId}","method":"get","summary":"Retrieve procedure details by ID from wrtn_procedures.","description":"This endpoint provides the full detail view of an AI procedure as defined in the wrtn_procedures Prisma table. It allows clients to access fields such as code, title, description, icon, and the active flag, as well as creation, update, and deletion timestamps for audit and compliance purposes.\n\nPermission checks ensure that only authorized actors (moderators for catalog-wide configuration; employees for procedures available to their enterprise/team) can view this information. Security validations verify that the procedureId is a valid UUID and that the procedure record exists and is not soft-deleted. Nonexistent or deleted procedures result in a 404 Not Found.\n\nThis operation complements the procedure execution endpoint (POST /procedures) for employee users and works in concert with enterprise/team configuration logic for catalog scoping. Error handling covers not found conditions and unauthorized access attempts.","parameters":[{"name":"procedureId","description":"The unique identifier of the target procedure to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested procedure.","typeName":"IWrtnProcedure"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves a single procedure's details using its unique identifier. It maps directly to the wrtn_procedures table in the Prisma schema, providing all fields necessary for displaying procedure metadata such as code, title, description, icon, activation status, and audit timestamps. This endpoint is vital for employees who need to view specific procedure configurations prior to execution or management, and for moderation purposes when reviewing catalog settings.","path":"/wrtnEnterprise/moderator/procedures/{procedureId}","method":"get","summary":"Retrieve procedure details by ID from wrtn_procedures.","description":"This endpoint provides the full detail view of an AI procedure as defined in the wrtn_procedures Prisma table. It allows clients to access fields such as code, title, description, icon, and the active flag, as well as creation, update, and deletion timestamps for audit and compliance purposes.\n\nPermission checks ensure that only authorized actors (moderators for catalog-wide configuration; employees for procedures available to their enterprise/team) can view this information. Security validations verify that the procedureId is a valid UUID and that the procedure record exists and is not soft-deleted. Nonexistent or deleted procedures result in a 404 Not Found.\n\nThis operation complements the procedure execution endpoint (POST /procedures) for employee users and works in concert with enterprise/team configuration logic for catalog scoping. Error handling covers not found conditions and unauthorized access attempts.","parameters":[{"name":"procedureId","description":"The unique identifier of the target procedure to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested procedure.","typeName":"IWrtnProcedure"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation creates a new AI procedure entry in the application catalog, writing to the wrtn_procedures table. It is intended for moderator (admin) actors to register a new procedure for employee use, defining all necessary catalog metadata—including code, title, description, icon, and initial activation state. This is a privileged operation essential to catalog management and access governance, supporting audit requirements.","path":"/wrtnEnterprise/moderator/procedures","method":"post","summary":"Create a new procedure in the system catalog (wrtn_procedures).","description":"This endpoint enables moderator (admin) actors to register new AI procedure catalog entries. The operation accepts a well-defined request body matching IWrtnProcedure.ICreate, including procedure code, title, optional description and icon, and initial activation status.\n\nUpon validation—ensuring unique code and title—the procedure is created with a new UUID, audit timestamps, and soft-delete state unset. The operation enforces catalog-level uniqueness and performs necessary moderation of input against allowed formats.\n\nOnly moderators (internal system actors) are authorized for this operation—employees cannot register procedures. On successful creation, the endpoint returns the full procedure detail as per IWrtnProcedure. Errors include validation failures (non-uniqueness, invalid fields), and forbidden operation attempts by non-moderator actors.\n\nThis API is a critical part of catalog lifecycle management and must ensure proper audit logging for compliance. Related endpoints include GET /procedures/{procedureId} for lookup and PUT /procedures/{procedureId} for updating or deactivating procedures.","parameters":[],"requestBody":{"description":"Catalog metadata for the new procedure entry to create.","typeName":"IWrtnProcedure.ICreate"},"responseBody":{"description":"Full information about the created procedure.","typeName":"IWrtnProcedure"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation updates an existing AI procedure entry by procedure ID in the WrtnEnterprise procedure catalog. It allows moderator users to change procedure metadata such as code, title, description, icon URL, and activation status. The operation enforces full uniqueness constraints on code and title at the catalog level and logs all changes for audit/compliance purposes. The business context is maintaining an up-to-date catalog of available enterprise procedure modules, as described in the wrtn_procedures Prisma table, which is essential for feature management and secure AI function governance.","path":"/wrtnEnterprise/moderator/procedures/{procedureId}","method":"put","summary":"Update an existing AI procedure entry in the WrtnEnterprise procedure catalog by ID.","description":"This API operation enables a moderator to update the details of an existing AI procedure in the WrtnEnterprise platform. Key fields that can be modified include the unique code (e.g., 'image-generation'), human-readable title, extended markdown description, icon URL, and active status flag. Each update is subject to strict validation:\n\n- Both code and title must remain globally unique among AI procedures; updating either to a duplicate will trigger a validation error.\n- Soft-deleted procedures cannot be updated and will return an error if targeted.\n- All modification operations are fully audit-logged including acting moderator, target procedure, and before/after values to ensure compliance with catalog governance.\n\nThe underlying Prisma model, wrtn_procedures, requires these fields for full procedure catalog management. Relationship fields (such as assignment to enterprises or teams) are managed elsewhere and are not directly mutated by this operation.\n\nSecurity and permissions require the operator to be an authenticated moderator. Any attempt to update a procedure by unauthorized actors or on behalf of another entity will be rejected. Related operations include POST for new procedure creation and index/list retrieval for catalog queries.\n\nOn success, the endpoint returns the full updated procedure record including all details; on failure, relevant validation errors and field messages are provided.","parameters":[{"name":"procedureId","description":"The unique identifier of the AI procedure to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the target procedure entry. Must match IWrtnEnterpriseProcedure.IUpdate DTO structure.","typeName":"IWrtnEnterpriseProcedure.IUpdate"},"responseBody":{"description":"The updated procedure entry after applying all requested changes and validation.","typeName":"IWrtnEnterpriseProcedure"},"authorizationActors":["moderator"],"name":"update","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes (hard delete) a procedure entry from the WrtnEnterprise AI procedure catalog using the specified procedure ID. It can only be performed by authenticated moderator actors. The deletion is irreversible and is reflected immediately in catalog queries. All removals are fully audit-logged for compliance. This operation is mapped to the wrtn_procedures table in the database and intended for catalog administration only.","path":"/wrtnEnterprise/moderator/procedures/{procedureId}","method":"delete","summary":"Hard delete an existing procedure entry from the WrtnEnterprise procedure catalog by ID.","description":"This API operation allows moderator users to permanently remove an AI procedure from the WrtnEnterprise procedure catalog. The deletion is a hard delete, removing the record immediately and irreversibly from the wrtn_procedures table. Only procedures that are not soft-deleted may be targeted for hard delete, and if the procedure is in a soft-deleted state already, an error will be returned.\n\nThe business use case is to allow catalog administrators (moderator actors) to eliminate obsolete or inappropriate AI procedure modules from the system, cleaning the catalog in response to policy, feature deprecation, or incident remediation. \n\nAll deletion events are fully audit-logged, including the acting moderator, deleted procedure details, and timestamp. The operation cannot be performed by non-moderator actors. The cascading effect on related enterprise and team assignments must be handled as per system policy (typically, catalog entries are disallowed for activation if deleted, and references are not resolvable).\n\nRelated endpoints include POST for creation, PUT for update, and PATCH/GET for listing and retrieval. All API usage for this operation is controlled by moderator-only authorization, in line with business compliance standards.\n\nUpon successful deletion, no response body is returned, confirming the record has been erased.","parameters":[{"name":"procedureId","description":"The unique identifier of the AI procedure to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of procedure session records for AI procedure executions. It is based on the wrtn_procedure_sessions table, enabling search/filtering by procedure, employee, team, disclosure level, creation window, and additional criteria. The system supports advanced business logic for role-based authorization: employee actors may only retrieve records for their own enterprise and permitted teams, while moderator actors have global visibility. The response provides a paginated container with items in summary view, suitable for analytics or audit drilldown. Filtering can be performed by procedure id, employee id, team id, period, or status as supported by the system DTO.\n\nPagination and sorting are included by default, supporting typical dashboard or reporting use-cases. Sensitive fields such as detailed data, input/output, and protocol specifics are omitted or redacted for summaries. The request body expects complex request parameters, allowing enterprise team/employee/procedure scope to be specified. The response body returns a container of summary session information, suitable for tabular displays, analytics, or drilldown via detail endpoint.","description":"This operation enables the retrieval and advanced searching of AI procedure session run records for analytics, audit, and business intelligence use-cases. It is mapped to the wrtn_procedure_sessions table in the database, which models completed or ongoing procedure executions initiated by enterprise employees or moderators.\n\nThe operation supports robust filtering: clients can specify procedure id (to retrieve sessions for a specific procedure), employee id (for actor-based reporting), team id, creation date range, and disclosure level. Authorization is enforced strictly according to the role: employee actors receive only records within their own enterprise/team scope, whereas moderator actors can access global session information across all enterprises for auditing support and compliance.\n\nEach result item is rendered as a summary DTO, omitting sensitive or complex nested aggregates. Pagination controls and sort parameters are supported to ensure efficient, user-facing reporting or dashboard integration. The operation is optimized for compliance with enterprise isolation: users can never retrieve sessions outside of their permitted scope. For audit, dashboard, and statistics purposes, this is the primary list endpoint.\n\nRelated endpoints include the detail view (`GET /procedureSessions/{procedureSessionId}`) for per-session drilldown and business intelligence. Authorization, error handling, and result shapes are governed tightly by the system's internal DTO contracts and compliance boundary checks.","summary":"Search and retrieve a paginated list of AI procedure sessions (wrtn_procedure_sessions) with advanced filtering and role-based authorization.","parameters":[],"requestBody":{"description":"Search and filter parameters for querying AI procedure session records (wrtn_procedure_sessions). Includes procedure/team/employee id, disclosure, creation window, etc. Follows IWrtnProcedureSession.IRequest DTO contract.","typeName":"IWrtnProcedureSession.IRequest"},"responseBody":{"description":"Paginated summary of procedure session records for analytics, dashboard, or audit. Summary DTOs only; full details available in per-session view.","typeName":"IPageIWrtnProcedureSession.ISummary"},"authorizationType":null,"authorizationActor":"moderator","path":"/wrtnEnterprise/moderator/procedureSessions","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of procedure session records for AI procedure executions. It is based on the wrtn_procedure_sessions table, enabling search/filtering by procedure, employee, team, disclosure level, creation window, and additional criteria. The system supports advanced business logic for role-based authorization: employee actors may only retrieve records for their own enterprise and permitted teams, while moderator actors have global visibility. The response provides a paginated container with items in summary view, suitable for analytics or audit drilldown. Filtering can be performed by procedure id, employee id, team id, period, or status as supported by the system DTO.\n\nPagination and sorting are included by default, supporting typical dashboard or reporting use-cases. Sensitive fields such as detailed data, input/output, and protocol specifics are omitted or redacted for summaries. The request body expects complex request parameters, allowing enterprise team/employee/procedure scope to be specified. The response body returns a container of summary session information, suitable for tabular displays, analytics, or drilldown via detail endpoint.","description":"This operation enables the retrieval and advanced searching of AI procedure session run records for analytics, audit, and business intelligence use-cases. It is mapped to the wrtn_procedure_sessions table in the database, which models completed or ongoing procedure executions initiated by enterprise employees or moderators.\n\nThe operation supports robust filtering: clients can specify procedure id (to retrieve sessions for a specific procedure), employee id (for actor-based reporting), team id, creation date range, and disclosure level. Authorization is enforced strictly according to the role: employee actors receive only records within their own enterprise/team scope, whereas moderator actors can access global session information across all enterprises for auditing support and compliance.\n\nEach result item is rendered as a summary DTO, omitting sensitive or complex nested aggregates. Pagination controls and sort parameters are supported to ensure efficient, user-facing reporting or dashboard integration. The operation is optimized for compliance with enterprise isolation: users can never retrieve sessions outside of their permitted scope. For audit, dashboard, and statistics purposes, this is the primary list endpoint.\n\nRelated endpoints include the detail view (`GET /procedureSessions/{procedureSessionId}`) for per-session drilldown and business intelligence. Authorization, error handling, and result shapes are governed tightly by the system's internal DTO contracts and compliance boundary checks.","summary":"Search and retrieve a paginated list of AI procedure sessions (wrtn_procedure_sessions) with advanced filtering and role-based authorization.","parameters":[],"requestBody":{"description":"Search and filter parameters for querying AI procedure session records (wrtn_procedure_sessions). Includes procedure/team/employee id, disclosure, creation window, etc. Follows IWrtnProcedureSession.IRequest DTO contract.","typeName":"IWrtnProcedureSession.IRequest"},"responseBody":{"description":"Paginated summary of procedure session records for analytics, dashboard, or audit. Summary DTOs only; full details available in per-session view.","typeName":"IPageIWrtnProcedureSession.ISummary"},"authorizationType":null,"authorizationActor":"employee","path":"/wrtnEnterprise/employee/procedureSessions","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves the detailed information for a specific AI procedure session (procedure run) identified by its procedureSessionId. It is based on the wrtn_procedure_sessions table and includes full audit trail, business context, input/output data, token usage, and connection protocol traces for end-to-end session drilldown. Authorization is enforced such that only permitted actors (employee for their own session; moderator for any session) may access details. \n\nThe operation supports compliance, in-depth debugging, and business auditing workflows, providing all available information in the system DTO. The response includes nested related entities, such as the employee who initiated the run, any linked team, associated procedure, and execution histories as well as token usage aggregates and status fields. Error handling follows standard business error codes (404 if not found, 403 for forbidden scope, etc).\n\nThis endpoint is suitable for both compliance audits, post-mortem review, or troubleshooting complex procedure runs. The path parameter is enforced for UUID format and is authorization-checked strictly to prevent cross-tenant leakage; only employees who own the session (or their administrator) and moderators may access the details.","description":"This operation provides full details for a specific AI procedure session (procedure run) selected by its unique procedureSessionId. It is mapped one-to-one to the wrtn_procedure_sessions table and composes all relevant business attributes: the initiating employee, team context, procedure metadata, input parameters, result/return value(s), execution history (possibly streaming), protocol used, and current status (completed/failed/partial).\n\nAccess is strongly controlled with strict enterprise isolation: only the owning enterprise's employee or an internal moderator may access the detail. The business logic verifies scope based on the user's session and authentication context.\n\nThe returned DTO provides deep composition, including nested entities such as the actor (employee), team (if any), associated procedure catalog entry, and a full timeline of all protocol/execution events. It also renders token usage aggregates at multiple levels where relevant, respecting redaction for sensitive or privileged fields if required. This endpoint supports compliance investigation, post-mortem technical review, feature analytics, and administrative dashboards.\n\nIf the record does not exist or is outside the caller's authorization window, appropriate errors (404/403) are returned per business policy. The operation is the canonical detail endpoint for AI procedure session records, with a rich, nested data shape suitable for drilldown views in enterprise dashboards or support consoles.","summary":"Retrieve full business and technical detail for a specific AI procedure session (wrtn_procedure_sessions) by procedureSessionId.","parameters":[{"name":"procedureSessionId","description":"Unique identifier of the target AI procedure session to retrieve in detail. Must be a UUID string referencing wrtn_procedure_sessions.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail DTO for an AI procedure session including input, output, histories, token usage, actor/procedure/team references, and audit context.","typeName":"IWrtnProcedureSession"},"authorizationType":null,"authorizationActor":"moderator","path":"/wrtnEnterprise/moderator/procedureSessions/{procedureSessionId}","method":"get","name":"at","prerequisites":[]},{"specification":"This operation retrieves the detailed information for a specific AI procedure session (procedure run) identified by its procedureSessionId. It is based on the wrtn_procedure_sessions table and includes full audit trail, business context, input/output data, token usage, and connection protocol traces for end-to-end session drilldown. Authorization is enforced such that only permitted actors (employee for their own session; moderator for any session) may access details. \n\nThe operation supports compliance, in-depth debugging, and business auditing workflows, providing all available information in the system DTO. The response includes nested related entities, such as the employee who initiated the run, any linked team, associated procedure, and execution histories as well as token usage aggregates and status fields. Error handling follows standard business error codes (404 if not found, 403 for forbidden scope, etc).\n\nThis endpoint is suitable for both compliance audits, post-mortem review, or troubleshooting complex procedure runs. The path parameter is enforced for UUID format and is authorization-checked strictly to prevent cross-tenant leakage; only employees who own the session (or their administrator) and moderators may access the details.","description":"This operation provides full details for a specific AI procedure session (procedure run) selected by its unique procedureSessionId. It is mapped one-to-one to the wrtn_procedure_sessions table and composes all relevant business attributes: the initiating employee, team context, procedure metadata, input parameters, result/return value(s), execution history (possibly streaming), protocol used, and current status (completed/failed/partial).\n\nAccess is strongly controlled with strict enterprise isolation: only the owning enterprise's employee or an internal moderator may access the detail. The business logic verifies scope based on the user's session and authentication context.\n\nThe returned DTO provides deep composition, including nested entities such as the actor (employee), team (if any), associated procedure catalog entry, and a full timeline of all protocol/execution events. It also renders token usage aggregates at multiple levels where relevant, respecting redaction for sensitive or privileged fields if required. This endpoint supports compliance investigation, post-mortem technical review, feature analytics, and administrative dashboards.\n\nIf the record does not exist or is outside the caller's authorization window, appropriate errors (404/403) are returned per business policy. The operation is the canonical detail endpoint for AI procedure session records, with a rich, nested data shape suitable for drilldown views in enterprise dashboards or support consoles.","summary":"Retrieve full business and technical detail for a specific AI procedure session (wrtn_procedure_sessions) by procedureSessionId.","parameters":[{"name":"procedureSessionId","description":"Unique identifier of the target AI procedure session to retrieve in detail. Must be a UUID string referencing wrtn_procedure_sessions.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail DTO for an AI procedure session including input, output, histories, token usage, actor/procedure/team references, and audit context.","typeName":"IWrtnProcedureSession"},"authorizationType":null,"authorizationActor":"employee","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}","method":"get","name":"at","prerequisites":[]},{"specification":"This operation creates a new procedure session when an enterprise employee wants to execute an AI procedure such as image generation, summarization, or custom business automation. The operation requires key identifiers such as the target procedure (wrtn_procedure_id), the employee session (derived from JWT not exposed in the DTO), and supports team-scoped execution. The session is created with a title, disclosure level (private, protected, public), and audit compliance, linking to the initiated procedure configuration. On success, a new record is inserted into the wrtn_procedure_sessions table, including all mandatory business rules for activation, membership, and per-procedure access and audit logging. Responses comply with business requirements for audit, compliance, and session traceability.","description":"This endpoint initiates a new AI procedure session for an authenticated enterprise employee. It validates the target procedure (wrtn_procedure_id) is available and active, verifies that the employee's permissions and enterprise/team membership comply with access policies, and attaches the execution to the appropriate business context (enterprise, team, or both). The session is created with the provided title and disclosure, and audit-trails are automatically populated for compliance. All parameters are derived from business-level requirements and the wrtn_procedure_sessions schema, ensuring every session is fully scoped, tracked, and recoverable for reporting. Security is strictly enforced: only authorized employees may invoke procedures allowed for their organization/team, with all attempts and outcomes audit-logged.","summary":"Create a new AI procedure session (wrtn_procedure_sessions table) for the requesting employee, supporting team or enterprise context as required by business policy.","parameters":[],"requestBody":{"description":"Payload for procedure session creation, specifying the procedure ID, optional team context, title, and disclosure scope. All user/session context is injected from authentication.","typeName":"IWrtnProcedureSession.ICreate"},"responseBody":{"description":"Newly created procedure session with all business attributes and linkage to procedure, employee, and team context per DTO relation mapping and business rules.","typeName":"IWrtnProcedureSession"},"authorizationType":null,"authorizationActor":"employee","name":"create","path":"/wrtnEnterprise/employee/procedureSessions","method":"post","prerequisites":[]},{"specification":"This operation updates the details (such as title or disclosure) of an existing procedure session. It performs strict permission checks: only the owner (employee) who created the session may alter details, and only non-terminated, non-deleted sessions may be changed. The operation operates on the wrtn_procedure_sessions table, referencing the unique procedureSessionId in the path and using the update DTO for payload validation. It records modification and audit trail events for compliance and supports only business-safe updates as per field documentation (no transfer of ownership allowed).","description":"This endpoint allows an authenticated employee to update editable details (such as title or disclosure level) on an existing procedure session they own. The operation checks that the session exists, hasn't been deleted, and is owned by the modifying employee. Only fields allowed by the update DTO can be changed; attempts to update immutable or unauthorized fields result in validation errors. All changes are timestamped and audit-logged, and the updated session is returned in full detail. Security is enforced per the wrtn_procedure_sessions schema and business requirements for auditability and traceability. Editing is strictly limited to title or disclosure (no business logic transfer).","summary":"Update details (title or disclosure) of an existing procedure session in wrtn_procedure_sessions, with strict ownership and audit controls.","parameters":[{"name":"procedureSessionId","description":"The unique identifier of the procedure session to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Delta update for the procedure session; only editable fields as per IWrtnProcedureSession.IUpdate are allowed.","typeName":"IWrtnProcedureSession.IUpdate"},"responseBody":{"description":"The updated procedure session after changes, including all business attributes and compliance/audit mapping.","typeName":"IWrtnProcedureSession"},"authorizationType":null,"authorizationActor":"employee","name":"update","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}","method":"put","prerequisites":[]},{"specification":"This operation permanently deletes a procedure session identified by procedureSessionId from the wrtn_procedure_sessions table. It is used to remove a procedure execution record when it is no longer required, and all associated histories, connections, token usage, and aggregates linked to this session are considered for cleanup. This operation is restricted to authorized users, specifically employees of the enterprise who initiated or own the session, or moderators for compliance and support purposes. The operation enforces audit logging and performs a hard delete as there is no soft-deletion or retention marker in the current schema for this entity.","description":"This endpoint removes a specific procedure session from the system, as recorded in the wrtn_procedure_sessions table. The operation requires a valid procedureSessionId, which must be a UUID corresponding to an existing session. Upon invocation, the system performs a hard delete – the record is fully removed from the database. This is critical for compliance scenarios where full erasure is permitted, after verifying that the session is no longer needed for audit, billing, or analytics purposes.\n\nPermission checks ensure that only the session owner or an authorized moderator may perform this action. An attempt by an unauthorized actor is logged in the audit trail and rejected with a security error. All related session connection records, history entries, and derived aggregates should also be deleted in accordance with referential integrity rules defined in the schema.\n\nThe response for successful deletion contains no content; any failure cases, such as a non-existent session or insufficient permissions, produce standard error codes and detailed business reason in the error response. Related API operations that may precede this are GET /procedureSessions/{id} for session detail retrieval or PATCH /procedureSessions for search and listing the user's own sessions.","summary":"Permanently delete a procedure session in wrtn_procedure_sessions by procedureSessionId.","parameters":[{"name":"procedureSessionId","description":"Unique identifier for the procedure session to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee","moderator"],"name":"erase","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}","method":"delete","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a procedure session identified by procedureSessionId from the wrtn_procedure_sessions table. It is used to remove a procedure execution record when it is no longer required, and all associated histories, connections, token usage, and aggregates linked to this session are considered for cleanup. This operation is restricted to authorized users, specifically employees of the enterprise who initiated or own the session, or moderators for compliance and support purposes. The operation enforces audit logging and performs a hard delete as there is no soft-deletion or retention marker in the current schema for this entity.","description":"This endpoint removes a specific procedure session from the system, as recorded in the wrtn_procedure_sessions table. The operation requires a valid procedureSessionId, which must be a UUID corresponding to an existing session. Upon invocation, the system performs a hard delete – the record is fully removed from the database. This is critical for compliance scenarios where full erasure is permitted, after verifying that the session is no longer needed for audit, billing, or analytics purposes.\n\nPermission checks ensure that only the session owner or an authorized moderator may perform this action. An attempt by an unauthorized actor is logged in the audit trail and rejected with a security error. All related session connection records, history entries, and derived aggregates should also be deleted in accordance with referential integrity rules defined in the schema.\n\nThe response for successful deletion contains no content; any failure cases, such as a non-existent session or insufficient permissions, produce standard error codes and detailed business reason in the error response. Related API operations that may precede this are GET /procedureSessions/{id} for session detail retrieval or PATCH /procedureSessions for search and listing the user's own sessions.","summary":"Permanently delete a procedure session in wrtn_procedure_sessions by procedureSessionId.","parameters":[{"name":"procedureSessionId","description":"Unique identifier for the procedure session to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee","moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/procedureSessions/{procedureSessionId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of histories (executions/steps) for a given procedure session from wrtn_procedure_session_histories based on the supplied procedureSessionId path parameter and optional advanced search, sorting, and pagination criteria in the request body. It supports detailed query on session execution events for auditing, troubleshooting, user review, and analytics. The operation references the wrtn_procedure_session_histories table and is designed for listing all executions and events tied to a specific procedure session, honoring authorization and data isolation constraints.","description":"This endpoint fetches a paginated, filterable list of execution history records for a specified procedure session identified by procedureSessionId. The histories represent all runs, steps, or protocol events constituting the overall AI procedure execution. This operation allows for advanced search, enabling filtering based on timestamps, execution status, protocol, or custom fields, and supports sorting by time or status.\n\nPermission and access controls are strictly enforced: only the owner (employee) of the procedure session and relevant moderators (for support or compliance) may view this information. Unauthorized access attempts are denied and audited. The returned data covers all critical attributes of procedure session histories, omitting confidential parameters where required by business policy.\n\nTypical usage includes presenting a session execution timeline for the user, debugging a failed run, verifying model input/output, or compiling procedure audit reports. The complementary operation for obtaining detail on an individual execution history is GET /procedureSessions/{procedureSessionId}/histories/{historyId}. Error responses are returned for invalid or non-existing session IDs, or insufficient permission.","summary":"Retrieve a paginated list of execution histories for a procedure session from wrtn_procedure_session_histories.","parameters":[{"name":"procedureSessionId","description":"The parent procedure session's unique identifier whose histories are to be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query filter, search, sort, and pagination parameters for listing histories of a procedure session.","typeName":"IWrtnProcedureSessionHistory.IRequest"},"responseBody":{"description":"Paginated, filtered list of histories with related metadata for the given procedure session.","typeName":"IPageIWrtnProcedureSessionHistory"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}/histories","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of histories (executions/steps) for a given procedure session from wrtn_procedure_session_histories based on the supplied procedureSessionId path parameter and optional advanced search, sorting, and pagination criteria in the request body. It supports detailed query on session execution events for auditing, troubleshooting, user review, and analytics. The operation references the wrtn_procedure_session_histories table and is designed for listing all executions and events tied to a specific procedure session, honoring authorization and data isolation constraints.","description":"This endpoint fetches a paginated, filterable list of execution history records for a specified procedure session identified by procedureSessionId. The histories represent all runs, steps, or protocol events constituting the overall AI procedure execution. This operation allows for advanced search, enabling filtering based on timestamps, execution status, protocol, or custom fields, and supports sorting by time or status.\n\nPermission and access controls are strictly enforced: only the owner (employee) of the procedure session and relevant moderators (for support or compliance) may view this information. Unauthorized access attempts are denied and audited. The returned data covers all critical attributes of procedure session histories, omitting confidential parameters where required by business policy.\n\nTypical usage includes presenting a session execution timeline for the user, debugging a failed run, verifying model input/output, or compiling procedure audit reports. The complementary operation for obtaining detail on an individual execution history is GET /procedureSessions/{procedureSessionId}/histories/{historyId}. Error responses are returned for invalid or non-existing session IDs, or insufficient permission.","summary":"Retrieve a paginated list of execution histories for a procedure session from wrtn_procedure_session_histories.","parameters":[{"name":"procedureSessionId","description":"The parent procedure session's unique identifier whose histories are to be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query filter, search, sort, and pagination parameters for listing histories of a procedure session.","typeName":"IWrtnProcedureSessionHistory.IRequest"},"responseBody":{"description":"Paginated, filtered list of histories with related metadata for the given procedure session.","typeName":"IPageIWrtnProcedureSessionHistory"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/moderator/procedureSessions/{procedureSessionId}/histories","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information for a single procedure session history entry. It is based on the wrtn_procedure_session_histories table, which tracks the execution history for procedure sessions including arguments, status, return value, and timestamps. The operation allows clients to fetch a specific history event within a particular procedure session, supporting use cases such as viewing execution records, auditing, or troubleshooting AI procedure runs in enterprise environments. Only users with access to the associated procedure session (typically the session's owner or authorized team members) may retrieve this information. The response includes all relevant history attributes along with proper mapping of related entities as outlined in the DTO conventions.","description":"Retrieve comprehensive details about a specific procedure session history record from the system. This record includes the input arguments, execution status, return value or error, start and completion timestamps, and connection context. Audit fields such as creation/completion timestamps and the outcome status are included for full traceability.\n\nAccess to this record is strictly governed by enterprise- and session-level permissions: only the actor who initiated the session, assigned managers, or other explicitly permitted users may retrieve execution records. Security measures ensure procedure session isolation by enterprise and team. The underlying table, wrtn_procedure_session_histories, links to both the containing session as well as the actor connection (protocol and session context) for compliance reporting.\n\nRecord retrieval will enforce that the requested history belongs to the specified parent session (procedureSessionId) and error/permission handling strictly follows business rules and audit requirements. Any attempt to retrieve a nonexistent or unauthorized history will result in a business error with a meaningful code.\n\nThis operation supports compliance, troubleshooting, auditing, and advanced workflow monitoring of AI procedure execution.\n\nRelated operations include listing all histories for a session, and retrieving execution outcome or token usage aggregates for reporting.","summary":"Retrieve a specific procedure session history entry by its identifier for a given session (wrtn_procedure_session_histories).","parameters":[{"name":"procedureSessionId","description":"Unique identifier of the parent procedure session.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier of the procedure session history to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail object for a single procedure session history, including arguments, success status, result, actor/protocol context, and timestamps for audit.","typeName":"IWrtnProcedureSessionHistory"},"authorizationType":null,"authorizationActor":"employee","name":"at","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}/histories/{historyId}","method":"get","prerequisites":[]},{"specification":"This operation retrieves token usage statistics for a single execution history within a procedure session. It is based on the wrtn_procedure_session_history_token_usages table and is directly associated with a wrtn_procedure_session_histories record. This enables granular billing, auditing, and performance analytics for each AI procedure invocation. Access is strictly controlled to ensure only authorized session participants, team members, or enterprise billing/analytics personnel can view usage costs or metrics. The operation can be used as part of cost reporting or to support compliance requirements for enterprise AI use.","description":"Return the detailed token usage metrics for a specific procedure session history entry. This includes total tokens, as well as a breakdown of input, cached input, output, output reasoning, accepted prediction, and rejected prediction tokens, following the IWrtnTokenUsage DTO specification. If there is no recorded token usage (such as for non-AI steps), all values will be returned as zeroes for clarity and contract uniformity.\n\nThis API is highly relevant for enterprise reporting, billing cost attribution, and audit. Permission checks guarantee that users can only access this data for histories within sessions they can view, matching the granularity of access control described in compliance and billing requirements documentation.\n\nRelated endpoints include session-wide aggregate token usage APIs, per-user or per-period usage aggregation, and analytics dashboard reporting supported by this data.","summary":"Fetch token usage breakdown for a specific procedure session execution (wrtn_procedure_session_history_token_usages).","parameters":[{"name":"procedureSessionId","description":"Unique identifier of the procedure session containing the history.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier of the procedure session history whose token usage to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Token usage statistics for the specified procedure session execution history. Zero values are returned if no token usage record exists.","typeName":"IWrtnTokenUsage"},"authorizationType":null,"authorizationActor":"employee","name":"tokenUsage","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}/histories/{historyId}/tokenUsage","method":"get","prerequisites":[]},{"specification":"This operation retrieves the aggregate token usage statistics for a specific procedure session. It operates on the `wrtn_procedure_session_aggregate_token_usages` table, which contains precomputed totals of all input, cached, output, reasoning, accepted, and rejected tokens used over the course of the specified procedure session. The request specifies the procedure session's unique identifier as a path parameter. The response provides a business-level summary of all relevant token consumption metrics, using the canonical `IWrtnTokenUsage` DTO. This is critical for auditing, billing, reporting, and cost analysis on procedure usage at the session level.","path":"/wrtnEnterprise/employee/procedureSessions/{procedureSessionId}/aggregateTokenUsage","method":"get","summary":"Retrieve aggregate token usage metrics for a procedure session (IWrtnProcedureSessionAggregateTokenUsage)","description":"This API endpoint returns aggregate token consumption metrics for a given procedure session, as defined in the `wrtn_procedure_session_aggregate_token_usages` table. The requested `procedureSessionId` must refer to a valid and active procedure session. The returned `IWrtnTokenUsage` DTO encapsulates total, input, cached, output, reasoning, accepted, and rejected token counts in a precise and user-friendly summary, as required by audit, analytics, and billing subsystems.\n\nTo ensure accurate cost calculation and business reporting, this operation strictly includes all tokens handled within the session including those from cached computations and inferred results. The endpoint follows enterprise data boundary rules: only users with permission to view the specified procedure session may access its token results (i.e., actor must be a member of the procedure session's enterprise or be a privileged moderator).\n\nIf the specified procedure session does not exist or the user lacks access, a 404/403 error is returned. If the session has not accumulated any token usage records (e.g., session was not run), the response will contain all zeros for the reported metrics, as required for cost transparency and system integrity.","parameters":[{"name":"procedureSessionId","description":"Unique identifier of the procedure session for which to retrieve aggregate token usage.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregate token usage summary for the specified procedure session, including all relevant metrics for billing and analysis.","typeName":"IWrtnTokenUsage"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the aggregate token usage statistics for a specific procedure session. It operates on the `wrtn_procedure_session_aggregate_token_usages` table, which contains precomputed totals of all input, cached, output, reasoning, accepted, and rejected tokens used over the course of the specified procedure session. The request specifies the procedure session's unique identifier as a path parameter. The response provides a business-level summary of all relevant token consumption metrics, using the canonical `IWrtnTokenUsage` DTO. This is critical for auditing, billing, reporting, and cost analysis on procedure usage at the session level.","path":"/wrtnEnterprise/moderator/procedureSessions/{procedureSessionId}/aggregateTokenUsage","method":"get","summary":"Retrieve aggregate token usage metrics for a procedure session (IWrtnProcedureSessionAggregateTokenUsage)","description":"This API endpoint returns aggregate token consumption metrics for a given procedure session, as defined in the `wrtn_procedure_session_aggregate_token_usages` table. The requested `procedureSessionId` must refer to a valid and active procedure session. The returned `IWrtnTokenUsage` DTO encapsulates total, input, cached, output, reasoning, accepted, and rejected token counts in a precise and user-friendly summary, as required by audit, analytics, and billing subsystems.\n\nTo ensure accurate cost calculation and business reporting, this operation strictly includes all tokens handled within the session including those from cached computations and inferred results. The endpoint follows enterprise data boundary rules: only users with permission to view the specified procedure session may access its token results (i.e., actor must be a member of the procedure session's enterprise or be a privileged moderator).\n\nIf the specified procedure session does not exist or the user lacks access, a 404/403 error is returned. If the session has not accumulated any token usage records (e.g., session was not run), the response will contain all zeros for the reported metrics, as required for cost transparency and system integrity.","parameters":[{"name":"procedureSessionId","description":"Unique identifier of the procedure session for which to retrieve aggregate token usage.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregate token usage summary for the specified procedure session, including all relevant metrics for billing and analysis.","typeName":"IWrtnTokenUsage"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation provides advanced statistical analytics on the usage of AI procedures across the enterprise, supporting filtering, aggregation, and time-based breakdowns. The endpoint operates as a flexible data analytics service, allowing business users and system administrators to retrieve detailed metrics on how different procedures are used by teams, employees, and time periods. It does not map directly to a single Prisma table, but composes data from `wrtn_procedure_sessions`, `wrtn_procedures`, `wrtn_enterprise_teams`, and related token/cost usage tables. The response is modeled as a paginated collection of usage reports, each summarizing procedure execution counts, token consumption, cost, and adoption metrics according to the input filters and analysis parameters.","path":"/wrtnEnterprise/employee/analytics/procedure-usage","method":"patch","summary":"Analyze and retrieve statistical usage analytics for AI procedures across enterprise scope","description":"This API operation enables fine-grained analytics and reporting on AI procedure usage, aggregating data from procedure execution sessions, teams, employees, and associated token/cost usage for audit, optimization, and business intelligence. It allows for flexible querying across teams, time periods, procedures, and actors, supporting enterprise decision-making and operational monitoring.\n\nThe operation composes data from multiple underlying entities including `wrtn_procedure_sessions`, `wrtn_procedures`, `wrtn_enterprise_teams`, and the various session token/cost usage tables. Business users and administrators can specify a wide range of filters in the request body—such as procedure code(s), targeted teams, specific time range, or other custom query operators—to analyze usage patterns or cost attribution. The endpoint returns a paginated collection of analytics summary DTOs (e.g., `IPageIWrtnEnterpriseProcedureUsageAnalyticsReport`), each entry detailing procedure execution volumes, total token/cost statistics, and adoption metrics. This statistical view is critical for enterprise cost optimization, usage monitoring, compliance tracking, and product management.\n\nData returned by this endpoint is secured according to actor permissions: only authorized employees within the enterprise, or privileged moderators, may access organizational analytics. Requests must comply with enterprise data boundaries; attempts to retrieve data outside authorized scope will result in access denial errors.","parameters":[],"requestBody":{"description":"Filtering and aggregation parameters for analytic search, such as procedure codes, teams, actors, and time range.","typeName":"IWrtnEnterpriseProcedureUsageAnalyticsReport.IRequest"},"responseBody":{"description":"Paginated analytics report collection for enterprise AI procedure usage, including detailed breakdowns per requested filters.","typeName":"IPageIWrtnEnterpriseProcedureUsageAnalyticsReport"},"authorizationActors":["employee","moderator"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation provides advanced statistical analytics on the usage of AI procedures across the enterprise, supporting filtering, aggregation, and time-based breakdowns. The endpoint operates as a flexible data analytics service, allowing business users and system administrators to retrieve detailed metrics on how different procedures are used by teams, employees, and time periods. It does not map directly to a single Prisma table, but composes data from `wrtn_procedure_sessions`, `wrtn_procedures`, `wrtn_enterprise_teams`, and related token/cost usage tables. The response is modeled as a paginated collection of usage reports, each summarizing procedure execution counts, token consumption, cost, and adoption metrics according to the input filters and analysis parameters.","path":"/wrtnEnterprise/moderator/analytics/procedure-usage","method":"patch","summary":"Analyze and retrieve statistical usage analytics for AI procedures across enterprise scope","description":"This API operation enables fine-grained analytics and reporting on AI procedure usage, aggregating data from procedure execution sessions, teams, employees, and associated token/cost usage for audit, optimization, and business intelligence. It allows for flexible querying across teams, time periods, procedures, and actors, supporting enterprise decision-making and operational monitoring.\n\nThe operation composes data from multiple underlying entities including `wrtn_procedure_sessions`, `wrtn_procedures`, `wrtn_enterprise_teams`, and the various session token/cost usage tables. Business users and administrators can specify a wide range of filters in the request body—such as procedure code(s), targeted teams, specific time range, or other custom query operators—to analyze usage patterns or cost attribution. The endpoint returns a paginated collection of analytics summary DTOs (e.g., `IPageIWrtnEnterpriseProcedureUsageAnalyticsReport`), each entry detailing procedure execution volumes, total token/cost statistics, and adoption metrics. This statistical view is critical for enterprise cost optimization, usage monitoring, compliance tracking, and product management.\n\nData returned by this endpoint is secured according to actor permissions: only authorized employees within the enterprise, or privileged moderators, may access organizational analytics. Requests must comply with enterprise data boundaries; attempts to retrieve data outside authorized scope will result in access denial errors.","parameters":[],"requestBody":{"description":"Filtering and aggregation parameters for analytic search, such as procedure codes, teams, actors, and time range.","typeName":"IWrtnEnterpriseProcedureUsageAnalyticsReport.IRequest"},"responseBody":{"description":"Paginated analytics report collection for enterprise AI procedure usage, including detailed breakdowns per requested filters.","typeName":"IPageIWrtnEnterpriseProcedureUsageAnalyticsReport"},"authorizationActors":["employee","moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the latest persona configuration for a specific enterprise employee. It supports the AI Chatbot session creation flow, in which an enterprise employee may omit the persona ID and rely on the backend to select their most recent (and not deleted) persona for the new chat session. It is directly associated with the wrtn_enterprise_employee_personas table, using the employeeId and filtering by the latest creation time and non-deleted records. The endpoint fulfills a critical business scenario documented in the requirements: when an employee creates a chat session without specifying a persona, the system must auto-fetch their most recent valid persona, and if none exists, return a clear not found error.","path":"/wrtnEnterprise/employee/enterprise/employees/{employeeId}/personas/{personaId}","method":"get","summary":"Get the latest valid persona for an enterprise employee (wrtn_enterprise_employee_personas table) by employee and persona ID.","description":"Retrieve the most recently created, undeleted persona for a given enterprise employee. This operation is used primarily for powering the AI Chatbot onboarding process, supporting both explicit and implicit persona selection workflows. When an employee initiates a new chat session without specifying a persona ID, this endpoint, called with the employeeId and with personaId being 'latest', will automatically select the persona with the most recent creation time that has not been deleted. \n\nSecurity considerations include ensuring the requesting actor is authorized to view the target employee's personas (typically, employees can see only their own, moderators may see any for support purposes). Persona privacy, audit, and compliance context are maintained, and API implementation MUST return 404 Not Found if no persona exists for the target employee or if the personaId refers to one that is deleted. The endpoint directly queries the wrtn_enterprise_employee_personas table, orders by created_at desc, and filters out those with deleted_at != null.\n\nIf an explicit personaId is provided and it is invalid or deleted, the endpoint returns 400 Bad Request or 404 Not Found accordingly, supporting robust error handling for client workflows. Only valid, existing, and non-deleted personas are ever returned through this endpoint, and all business rules regarding persona mutability and data retention are strictly enforced.","parameters":[{"name":"employeeId","description":"Target enterprise employee's unique identifier for which the persona should be retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier for the persona to retrieve, or the literal value 'latest' to get the most recently created non-deleted persona for the employee.","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Returns the most recently created, undeleted persona for the specified employee as an IWrtnEnterpriseEmployeePersona response DTO.","typeName":"IWrtnEnterpriseEmployeePersona"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves the latest persona configuration for a specific enterprise employee. It supports the AI Chatbot session creation flow, in which an enterprise employee may omit the persona ID and rely on the backend to select their most recent (and not deleted) persona for the new chat session. It is directly associated with the wrtn_enterprise_employee_personas table, using the employeeId and filtering by the latest creation time and non-deleted records. The endpoint fulfills a critical business scenario documented in the requirements: when an employee creates a chat session without specifying a persona, the system must auto-fetch their most recent valid persona, and if none exists, return a clear not found error.","path":"/wrtnEnterprise/moderator/enterprise/employees/{employeeId}/personas/{personaId}","method":"get","summary":"Get the latest valid persona for an enterprise employee (wrtn_enterprise_employee_personas table) by employee and persona ID.","description":"Retrieve the most recently created, undeleted persona for a given enterprise employee. This operation is used primarily for powering the AI Chatbot onboarding process, supporting both explicit and implicit persona selection workflows. When an employee initiates a new chat session without specifying a persona ID, this endpoint, called with the employeeId and with personaId being 'latest', will automatically select the persona with the most recent creation time that has not been deleted. \n\nSecurity considerations include ensuring the requesting actor is authorized to view the target employee's personas (typically, employees can see only their own, moderators may see any for support purposes). Persona privacy, audit, and compliance context are maintained, and API implementation MUST return 404 Not Found if no persona exists for the target employee or if the personaId refers to one that is deleted. The endpoint directly queries the wrtn_enterprise_employee_personas table, orders by created_at desc, and filters out those with deleted_at != null.\n\nIf an explicit personaId is provided and it is invalid or deleted, the endpoint returns 400 Bad Request or 404 Not Found accordingly, supporting robust error handling for client workflows. Only valid, existing, and non-deleted personas are ever returned through this endpoint, and all business rules regarding persona mutability and data retention are strictly enforced.","parameters":[{"name":"employeeId","description":"Target enterprise employee's unique identifier for which the persona should be retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier for the persona to retrieve, or the literal value 'latest' to get the most recently created non-deleted persona for the employee.","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Returns the most recently created, undeleted persona for the specified employee as an IWrtnEnterpriseEmployeePersona response DTO.","typeName":"IWrtnEnterpriseEmployeePersona"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation returns a paginated list of active (i.e., non-deleted) persona configurations for a specified enterprise employee. It exposes the wrtn_enterprise_employee_personas table and supports advanced search, filtering, and sorting to allow an employee to manage or select from their own persona configurations. This is essential for both self-service persona management screens and for the AI chatbot 'choose persona' flow. The operation strictly covers only the employee's own personas, following privacy and organizational boundary enforcement.","path":"/wrtnEnterprise/employee/enterprise/employees/{employeeId}/personas","method":"patch","summary":"Search and retrieve a paginated list of active persona configurations for an enterprise employee (wrtn_enterprise_employee_personas table).","description":"Retrieve a paginated, filterable, and sortable list of persona configurations (AI chatbot personas) belonging to a given enterprise employee. Each persona in the result must be active (not soft-deleted) and belong to the employee indicated by the path parameter employeeId. This supports the business requirement that employees can choose among their own personas when using AI chatbots, and allows them to see, search by, or manage their personas in the UI.\n\nThe operation enforces access control so that employees can see only their own personas (unless a moderator is requesting for support), with all permission boundaries and audit requirements as described in the requirements documents. Pagination and sorting parameters are supported in the request body, and the response is a paginated list of persona summary DTOs, covering all fields relevant to search and selection, but excluding bodies of deleted personas. Error handling ensures that invalid employeeId or unauthorized access will return appropriate error codes. All data is sourced directly from the wrtn_enterprise_employee_personas table, and only valid, non-deleted personas for the specified employee are ever included.","parameters":[{"name":"employeeId","description":"Unique identifier for the employee whose personas are to be searched and listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters, such as page size, filter criteria (e.g., persona name), and sort order, supporting advanced persona lookup.","typeName":"IWrtnEnterpriseEmployeePersona.IRequest"},"responseBody":{"description":"Paginated list of persona summary DTOs for the employee, omitting soft-deleted personas and providing all relevant search/display fields.","typeName":"IPageIWrtnEnterpriseEmployeePersona.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation returns a paginated list of active (i.e., non-deleted) persona configurations for a specified enterprise employee. It exposes the wrtn_enterprise_employee_personas table and supports advanced search, filtering, and sorting to allow an employee to manage or select from their own persona configurations. This is essential for both self-service persona management screens and for the AI chatbot 'choose persona' flow. The operation strictly covers only the employee's own personas, following privacy and organizational boundary enforcement.","path":"/wrtnEnterprise/moderator/enterprise/employees/{employeeId}/personas","method":"patch","summary":"Search and retrieve a paginated list of active persona configurations for an enterprise employee (wrtn_enterprise_employee_personas table).","description":"Retrieve a paginated, filterable, and sortable list of persona configurations (AI chatbot personas) belonging to a given enterprise employee. Each persona in the result must be active (not soft-deleted) and belong to the employee indicated by the path parameter employeeId. This supports the business requirement that employees can choose among their own personas when using AI chatbots, and allows them to see, search by, or manage their personas in the UI.\n\nThe operation enforces access control so that employees can see only their own personas (unless a moderator is requesting for support), with all permission boundaries and audit requirements as described in the requirements documents. Pagination and sorting parameters are supported in the request body, and the response is a paginated list of persona summary DTOs, covering all fields relevant to search and selection, but excluding bodies of deleted personas. Error handling ensures that invalid employeeId or unauthorized access will return appropriate error codes. All data is sourced directly from the wrtn_enterprise_employee_personas table, and only valid, non-deleted personas for the specified employee are ever included.","parameters":[{"name":"employeeId","description":"Unique identifier for the employee whose personas are to be searched and listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters, such as page size, filter criteria (e.g., persona name), and sort order, supporting advanced persona lookup.","typeName":"IWrtnEnterpriseEmployeePersona.IRequest"},"responseBody":{"description":"Paginated list of persona summary DTOs for the employee, omitting soft-deleted personas and providing all relevant search/display fields.","typeName":"IPageIWrtnEnterpriseEmployeePersona.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation creates a new persona for a specified enterprise employee. It is designed to enable employees to configure custom AI chatbot personas with specific settings, such as avatar, tone, auto web search, question suggestion, prompt, and contextual memory payload. All persona creations are recorded with audit-traceable attributes linking to the employee and their registration session. Only authenticated and authorized employees can create a persona for themselves; moderator actors are never permitted to invoke this endpoint.\n\nThe endpoint is tightly coupled to the wrtn_enterprise_employee_personas table in the Prisma schema, ensuring direct persistence of persona configuration details, reference integrity (FK to employee and session), and respecting soft-deletion logic. Input validation enforces compliance of persona avatar, tone, and prompt requirements. As per business logic, employees may create multiple personas and automatically select or update their most recent one for chatbot sessions.\n\nPersona creation must also ensure audit trail logging, including the originating session, for regulatory and compliance review. Uniqueness of persona names per employee is not enforced at the DB level but should be guided by the user interface for clarity. Any attempt to create a persona for another employee (not the authenticated user) must be rejected by the provider implementation.","description":"This API operation registers (creates) a new persona for the specified employee in the system. The endpoint requires the employeeId as a path parameter, referring to the unique enterprise employee for whom the persona will be created.\n\nUpon invocation, the API validates whether the authenticated actor (employee) matches the target employeeId; moderators and other employees are forbidden from using this endpoint except on their own profile. The persona details, such as avatar_image_url, name, tone, auto_web_search, auto_question_suggest, memory, and prompt, will be set according to the request body fields. The operation leverages the business logic that persona updates are implemented as new records—personas are append-only for audit integrity, and cannot be overwritten in-place.\n\nSecurity validation is enforced such that only the owner employee may create their own persona, and session context is linked for audit trail. Any attempt to create a persona for another person, or to access this endpoint as a moderator, results in permission denial with an explicit business error. All new persona configurations are traceable by creation time and the established session link. Persona creation does not require or enforce uniqueness of persona names but recommends user interface validation for better usability.","summary":"Create a new persona for the specified enterprise employee (wrtn_enterprise_employee_personas table)","parameters":[{"name":"employeeId","description":"Unique identifier of the target enterprise employee for whom the persona is created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for persona creation. Includes avatar image URL, persona display name, tone, prompt, and web search/suggestion flags.","typeName":"IWrtnEnterpriseEmployeePersona.ICreate"},"responseBody":{"description":"Newly created persona record for the employee including all persona configuration fields and audit-traceable metadata.","typeName":"IWrtnEnterpriseEmployeePersona"},"authorizationType":null,"authorizationActor":"employee","path":"/wrtnEnterprise/employee/enterprise/employees/{employeeId}/personas","method":"post","name":"create","prerequisites":[]},{"specification":"This operation updates an existing persona for a given enterprise employee. It directly updates the configuration (such as avatar, tone, name, suggestion settings, memory, and prompt) of the specified persona belonging to the employee. The update is performed in the context of the wrtn_enterprise_employee_personas table in the Prisma schema.\n\nOnly employees are authorized to update their own persona records; moderators or other employees cannot invoke this operation for personas they do not own. The endpoint links all updates to the authenticated session for audit trail and compliance review. If a non-existent or deleted persona ID is supplied, the operation fails with an explicit 404 Not Found or 400 Bad Request response respectively.\n\nThe business logic enforces append-only updates for persona records (i.e., old versions are retained for history), but for the purpose of the API contract, this endpoint is specified as an update for the most recent persona configuration. Attempts to change another employee's persona are forbidden and result in permission denial.","description":"This API operation allows an authenticated employee to update a specific persona they own, identified by personaId. Intended for persona management flows, it takes the employeeId and personaId as path parameters, and expects the update details in the request body.\n\nUpon execution, the operation checks authorization to ensure only the persona owner can perform updates; moderators or other users are not permitted to invoke the endpoint. The update data provided allows changing avatar_image_url, name, tone, auto web search, auto question suggestion, prompt, and memory content. Implementation must record the modifying session as part of audit history and ensure previous persona state is preserved for compliance.\n\nIf the persona does not exist, is deleted, or does not belong to the requesting employee, the provider implementation must reject the request with a clear error message as per business and security requirements. All persona modifications are executed as append-only changes in the database for full auditability.","summary":"Update an existing persona of a specified employee (wrtn_enterprise_employee_personas table)","parameters":[{"name":"employeeId","description":"Unique identifier of the target enterprise employee who owns the persona to update","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier of the persona to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for persona update including avatar, display name, tone, prompt, web search, suggestion flags, and memory.","typeName":"IWrtnEnterpriseEmployeePersona.IUpdate"},"responseBody":{"description":"The updated persona record with all configuration details and audit-traceable metadata.","typeName":"IWrtnEnterpriseEmployeePersona"},"authorizationType":null,"authorizationActor":"employee","path":"/wrtnEnterprise/employee/enterprise/employees/{employeeId}/personas/{personaId}","method":"put","name":"update","prerequisites":[]},{"specification":"Delete a persona for a specific employee within an enterprise. This operation removes the persona identified by personaId belonging to the employee specified by employeeId. Only employees are allowed to erase their own personas. The underlying table is wrtn_enterprise_employee_personas. The operation will not allow deleting another employee's persona, nor a persona that does not exist, and will only perform a soft delete by setting the deleted_at timestamp. Associated chat sessions will remain unaffected but will reference the soft-deleted persona for historical integrity.","description":"This operation allows an employee to erase one of their own persona configurations (used by the chatbot and other features). The API requires both the employeeId and the personaId as path parameters, and will only allow erasing if the persona is owned by the specified employee. If the persona does not exist, or does not belong to the given employee, the operation returns a suitable error message. \n\nSecurity considerations ensure that only authenticated employees can delete their own personas, and not those of other employees. The operation is implemented as a soft delete, updating the deleted_at column in the wrtn_enterprise_employee_personas table. It preserves referential integrity for existing chat sessions and ensures that persona settings are never physically removed from the database.\n\nThe operation is intended for user-driven personalization flows and cannot be used by moderators. No permanent data loss occurs, and accidental deletions can potentially be recovered by administrators via database procedures.\n\nRelated operations: API for creating and updating a persona and retrieving the latest persona for an employee. Error handling includes unauthorized attempts, invalid personaId, and insufficient permissions.","summary":"Erase a specific persona for an enterprise employee (soft delete, employee only).","authorizationActors":["employee"],"name":"erase","path":"/wrtnEnterprise/employee/enterprise/employees/{employeeId}/personas/{personaId}","method":"delete","parameters":[{"name":"employeeId","description":"Unique identifier of the target enterprise employee","schema":{"type":"string","format":"uuid"}},{"name":"personaId","description":"Unique identifier of the persona to erase","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve the most recently created, non-deleted persona configuration for a specific enterprise employee. This operation is used to support flows where the employee does not provide a personaId explicitly but expects the system to use their latest persona for chat session creation or other features. The underlying table is wrtn_enterprise_employee_personas, ordered by created_at (descending) and filtered by deleted_at IS NULL. The response returns summary information for the persona or 404 if none exists.","description":"This operation is designed to fetch the newest available persona record for a given employee in an enterprise, typically for use as the default configuration when starting a new chat session or restoring personalization settings. If the employee has created multiple personas, this endpoint returns the one with the highest created_at timestamp that is not deleted. \n\nSecurity considerations ensure that only the employee themselves or authorized business logic (e.g., during chat session creation) can access this information. Attempts to access another employee's persona history will be rejected. The operation does not return soft-deleted personas or those marked as deleted_at IS NOT NULL.\n\nThe response body includes a summary representation of the persona (IWrtnEnterpriseEmployeePersona.ISummary) as required for client-side configuration; if no persona exists for the employee, the API returns a 404 Not Found error. No request body is required.\n\nThis endpoint is frequently used for onboarding flows, chat session creation, and for restoring employee personalization upon login. Closely related to persona create, update, and soft-delete operations.","summary":"Get latest valid persona for an employee in an enterprise. Returns 404 if none exists.","authorizationActors":["employee"],"name":"latest","path":"/wrtnEnterprise/employee/enterprise/employees/{employeeId}/personas/latest","method":"get","parameters":[{"name":"employeeId","description":"Unique identifier of the target enterprise employee","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Summary representation of the latest, non-deleted persona configuration for this employee","typeName":"IWrtnEnterpriseEmployeePersona.ISummary"},"authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated and filterable list of all AI procedures configured for a specific enterprise within the WrtnEnterprise B2B SaaS platform. The procedure catalog is defined through the wrtn_procedures table, and each procedure entry includes information such as unique code, display title, activation status, icon, and description. This endpoint supports advanced search and filtering, enabling enterprise actors (master, manager) to view the entire set of procedures available to their organization, as well as check for procedure status, team overrides, and assignment context. It is critical for both allowing administrators to review their enterprise's available AI functionality and for aligning enterprise- and team-scoped configurations with the global procedure catalog.","path":"/wrtnEnterprise/employee/enterprise/procedures","method":"patch","summary":"Retrieve paginated, filterable list of available AI procedures for an enterprise (WrtnEnterpriseProcedure table)","description":"This API returns a paginated collection of procedure catalog entries for the requesting enterprise, supporting search, advanced filtering, and sorting. The WrtnEnterpriseProcedure schema serves as a join between each procedure and the owning enterprise, enabling both global and enterprise-configured visibility. Each procedure detail includes activation status, display metadata, sequence/order for UI, and audit fields.\n\nModerators and authorized enterprise actors can use this endpoint to obtain a complete list of which procedures are available, current assignment status, and details required for end-user selection, invocation, or further configuration. Filtering may include fields such as procedure code, title, activation status, category, or display sequence. The endpoint enforces enterprise isolation and will only return procedures visible and assigned to the requesting company.\n\nThis operation aligns with the wrtn_enterprise_procedures and wrtn_procedures tables, ensuring that API responses are consistent with current business permissions. Security checks may restrict visibility of certain procedures to only those entities allowed by the enterprise/team/role configuration.","parameters":[],"requestBody":{"description":"Search and pagination parameters for querying the enterprise AI procedures catalog.","typeName":"IWrtnEnterpriseProcedure.IRequest"},"responseBody":{"description":"Paginated response containing summary information on each available AI procedure assigned to the enterprise, suitable for display and selection interfaces.","typeName":"IPageIWrtnEnterpriseProcedure.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves a paginated and filterable list of all AI procedures configured for a specific enterprise within the WrtnEnterprise B2B SaaS platform. The procedure catalog is defined through the wrtn_procedures table, and each procedure entry includes information such as unique code, display title, activation status, icon, and description. This endpoint supports advanced search and filtering, enabling enterprise actors (master, manager) to view the entire set of procedures available to their organization, as well as check for procedure status, team overrides, and assignment context. It is critical for both allowing administrators to review their enterprise's available AI functionality and for aligning enterprise- and team-scoped configurations with the global procedure catalog.","path":"/wrtnEnterprise/moderator/enterprise/procedures","method":"patch","summary":"Retrieve paginated, filterable list of available AI procedures for an enterprise (WrtnEnterpriseProcedure table)","description":"This API returns a paginated collection of procedure catalog entries for the requesting enterprise, supporting search, advanced filtering, and sorting. The WrtnEnterpriseProcedure schema serves as a join between each procedure and the owning enterprise, enabling both global and enterprise-configured visibility. Each procedure detail includes activation status, display metadata, sequence/order for UI, and audit fields.\n\nModerators and authorized enterprise actors can use this endpoint to obtain a complete list of which procedures are available, current assignment status, and details required for end-user selection, invocation, or further configuration. Filtering may include fields such as procedure code, title, activation status, category, or display sequence. The endpoint enforces enterprise isolation and will only return procedures visible and assigned to the requesting company.\n\nThis operation aligns with the wrtn_enterprise_procedures and wrtn_procedures tables, ensuring that API responses are consistent with current business permissions. Security checks may restrict visibility of certain procedures to only those entities allowed by the enterprise/team/role configuration.","parameters":[],"requestBody":{"description":"Search and pagination parameters for querying the enterprise AI procedures catalog.","typeName":"IWrtnEnterpriseProcedure.IRequest"},"responseBody":{"description":"Paginated response containing summary information on each available AI procedure assigned to the enterprise, suitable for display and selection interfaces.","typeName":"IPageIWrtnEnterpriseProcedure.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information for a single AI procedure registered within an enterprise's available catalog. It operates on the wrtn_procedures table, joined through wrtn_enterprise_procedures to ensure proper enterprise-level access and isolation. The API provides all metadata necessary for selection, configuration, or audit including code, title, description, icon, active status, sequence, and time-stamps for creation and update. It is designed for use in enterprise/team dashboards and configuration flows, allowing actors to drill down to full details for a specific procedure entry.","path":"/wrtnEnterprise/employee/enterprise/procedures/{procedureId}","method":"get","summary":"Retrieve detail information for a single AI procedure assigned to an enterprise (WrtnEnterpriseProcedure)","description":"This endpoint returns the full details of a single AI procedure that is available to the requesting enterprise. The procedure is identified by its unique procedureId, which references the wrtn_procedures primary key. Enterprise and role-level access restrictions are enforced; an actor can only retrieve details for procedures properly assigned to their enterprise.\n\nReturned data includes all global procedure attributes (code, title, icon, description, activation state) as well as enterprise-specific configuration where applicable (assignment metadata, display sequence/order, audit fields). This is essential for building enterprise admin interfaces, user-facing procedures catalogs, and enabling workflow step assignment within the WrtnEnterprise AI platform. The endpoint references all relevant description comments from the wrtn_procedures and wrtn_enterprise_procedures tables, ensuring the returned documentation is aligned with database structure and business logic.","parameters":[{"name":"procedureId","description":"Unique identifier (UUID) of the procedure to retrieve. This corresponds to the wrtn_procedures.id and is available via the summary index API.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information on the specified enterprise AI procedure with all catalog and configuration metadata required for dashboards or operation selection.","typeName":"IWrtnEnterpriseProcedure"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves detailed information for a single AI procedure registered within an enterprise's available catalog. It operates on the wrtn_procedures table, joined through wrtn_enterprise_procedures to ensure proper enterprise-level access and isolation. The API provides all metadata necessary for selection, configuration, or audit including code, title, description, icon, active status, sequence, and time-stamps for creation and update. It is designed for use in enterprise/team dashboards and configuration flows, allowing actors to drill down to full details for a specific procedure entry.","path":"/wrtnEnterprise/moderator/enterprise/procedures/{procedureId}","method":"get","summary":"Retrieve detail information for a single AI procedure assigned to an enterprise (WrtnEnterpriseProcedure)","description":"This endpoint returns the full details of a single AI procedure that is available to the requesting enterprise. The procedure is identified by its unique procedureId, which references the wrtn_procedures primary key. Enterprise and role-level access restrictions are enforced; an actor can only retrieve details for procedures properly assigned to their enterprise.\n\nReturned data includes all global procedure attributes (code, title, icon, description, activation state) as well as enterprise-specific configuration where applicable (assignment metadata, display sequence/order, audit fields). This is essential for building enterprise admin interfaces, user-facing procedures catalogs, and enabling workflow step assignment within the WrtnEnterprise AI platform. The endpoint references all relevant description comments from the wrtn_procedures and wrtn_enterprise_procedures tables, ensuring the returned documentation is aligned with database structure and business logic.","parameters":[{"name":"procedureId","description":"Unique identifier (UUID) of the procedure to retrieve. This corresponds to the wrtn_procedures.id and is available via the summary index API.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information on the specified enterprise AI procedure with all catalog and configuration metadata required for dashboards or operation selection.","typeName":"IWrtnEnterpriseProcedure"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation allows for the registration of an AI procedure catalog entry for the WrtnEnterprise system. It operates on the wrtn_procedures table and enables moderator actors to define a new procedure with a unique code, display title, optional description, icon URL, and activation state. The procedure becomes available for assignment to enterprises and teams after creation. Business logic enforces global uniqueness for both the code and title, and all creation actions are audited for compliance tracking. Only internal moderator actors are authorized to create new procedures. This is a privileged operation vital for B2B SaaS flexibility and enterprise AI automation governance.","path":"/wrtnEnterprise/moderator/enterprise/procedures","method":"post","summary":"Register a new AI procedure in the global catalog (wrtn_procedures) as moderator","description":"This operation creates a new, globally unique AI procedure in the WrtnEnterprise catalog by inserting a record into the wrtn_procedures table. It requires moderator authentication and is restricted to internal admin/support actors, ensuring the integrity and authoritative control required for the B2B SaaS service environment.\n\nThe request body must include a unique code (e.g., 'image-generation'), a display title, and may optionally contain a markdown description and icon URL. The active status indicates whether the procedure is enabled upon creation; soft-deletion is supported via deleted_at but not handled in this operation. All critical business fields (code, title) are subject to uniqueness constraints enforced by the backend.\n\nSecurity considerations dictate that moderator privilege is mandatory for this operation, with all actions fully logged in the audit system. The operation’s success allows downstream assignment of the procedure to tenant enterprises and their teams. \n\nValidation errors include duplicate code/title, missing required fields, or insufficient permission. Upon success, the created procedure (IWrtnEnterpriseProcedure) is returned with complete metadata for catalog management and integration.","parameters":[],"requestBody":{"description":"Payload describing the new AI procedure to be registered (code, title, description, icon, and activation state)","typeName":"IWrtnEnterpriseProcedure.ICreate"},"responseBody":{"description":"The detailed metadata for the newly created global AI procedure entry","typeName":"IWrtnEnterpriseProcedure"},"authorizationActors":["moderator"],"name":"create","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation enables moderator actors to update an existing AI procedure in the global WrtnEnterprise catalog, operating on the wrtn_procedures table. It allows modification of core attributes such as display title, description, icon URL, and activation state, but enforces uniqueness for code and title. The operation requires the target procedure's ID as a path parameter and restricts access to internal moderator actors for full audit traceability and compliance. This ensures AI catalog governance and adaptation to evolving enterprise automation needs.","path":"/wrtnEnterprise/moderator/enterprise/procedures/{procedureId}","method":"put","summary":"Update metadata and activation state of an existing global AI procedure (wrtn_procedures) as moderator","description":"This operation updates key metadata for a specified AI procedure entry in the global catalog by modifying the corresponding row in the wrtn_procedures table. It is strictly limited to internal moderator actors, supporting changes to title, description, icon, and activation status while enforcing uniqueness constraints on code/title.\n\nThe request must include the procedureId path parameter (UUID format) for the target procedure record. The moderator actor may modify display properties, update the markdown description, change the icon, or set the procedure to active/inactive status. Core uniqueness and audit logging are enforced in all cases, and any updates are timestamped for lifecycle management.\n\nOnly moderators are authorized for this privileged operation. Errors may be returned for non-existent or already deleted procedures, duplicate titles or codes, or insufficient privilege. On successful update, the full, updated procedure entry is returned.","parameters":[{"name":"procedureId","description":"Unique identifier (UUID) of the procedure to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload describing the AI procedure updates (title, description, icon, activation state)","typeName":"IWrtnEnterpriseProcedure.IUpdate"},"responseBody":{"description":"The updated metadata for the specified AI procedure entry in the global catalog","typeName":"IWrtnEnterpriseProcedure"},"authorizationActors":["moderator"],"name":"update","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation removes the assignment of a specific procedure for a given enterprise by the enterprise administrator or entitled staff. It works on the wrtn_enterprise_procedures table, which uniquely maps available procedure entries (from wrtn_procedures) to each enterprise. Only active assignments (where deleted_at is null) can be erased. The endpoint permanently removes the selected procedure from the enterprise's enabled AI procedure list, disabling access for all enterprise employees and teams to that specific procedure. The operation enforces data isolation and will respond with a 404 if the assignment is not found or already deleted. All removals are soft-delete by updating deleted_at for full compliance and auditability.","path":"/wrtnEnterprise/employee/enterprise/procedures/{procedureId}","method":"delete","summary":"Erase an enabled AI procedure assignment for an enterprise (wrtn_enterprise_procedures table).","description":"This API endpoint allows a privileged user—typically a master or manager employee of the enterprise—to revoke (soft delete) a specific AI procedure assignment from the enterprise catalog. The procedureId in the path uniquely identifies the procedure-to-enterprise mapping via wrtn_enterprise_procedures and removes its availability for all employees of that enterprise. Only active (non-deleted) assignments can be erased; if the mapping is already deleted or not found, the API will return a 404 Not Found error without effect.\n\nThis operation does not delete the global procedure itself from wrtn_procedures, but only removes its enabled status for the enterprise, following strict multi-tenant isolation. The deletion is performed as a soft delete, updating deleted_at in wrtn_enterprise_procedures, in order to preserve audit trail and support compliance requirements. Removing a procedure assignment may impact employee or team-level access immediately: the targeted procedure instantly becomes unavailable on all procedure selection UIs, and existing ongoing sessions for the removed procedure may result in error on further access attempts.\n\nSecurity and access control are strictly enforced: only master or manager roles of the enterprise may invoke this operation, and all events are fully audit-logged with acting user and session ID. Deletion requests from unauthorized users will be denied with a 403 Forbidden.\n\nThis operation works exclusively on the wrtn_enterprise_procedures mapping. To delete or deactivate a global AI procedure (system-wide), use a different admin endpoint managed by moderators. All removal actions are logged for at least 3 years per business compliance rules.","parameters":[{"name":"procedureId","description":"Unique identifier of the procedure assignment in wrtn_enterprise_procedures to erase for the enterprise.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","prerequisites":[]},{"specification":"This operation searches and retrieves the list of all AI procedures assigned to a specific enterprise team. It operates on the wrtn_enterprise_team_procedures table, which configures enabled procedures for each team, and aggregates related wrtn_procedures information for a comprehensive, business-friendly summary. The endpoint supports advanced filtering, sorting, and pagination through the request body, allowing users to search for available procedures by title, category, activation state, or custom metadata. Only employees belonging to the enterprise and team have access; actions are fully audit-logged for compliance.","path":"/wrtnEnterprise/employee/enterprise/teams/{teamId}/procedures","method":"patch","summary":"List and search AI procedures assigned to a specific enterprise team.","description":"This API endpoint allows authenticated employee users to search, filter, and paginate the catalog of AI procedures that have been assigned to a particular enterprise team. The teamId in the path identifies the target team. The result includes both the assignment configuration from wrtn_enterprise_team_procedures (e.g., activation, display order, assignment context) and the denormalized data of the associated AI procedures from wrtn_procedures (e.g., code, title, description, icon, status).\n\nAdvanced filtering is supported in the request body, including by procedure title, activation status, or assignment metadata, as well as full pagination (page size, page index) and sorting options. This operation is essential for enabling the team manager or team members to see and manage allowed AI procedures, while supporting business workflows that may involve customizing or requesting changes to available team procedures.\n\nAccess control is enforced by verifying the requesting employee is a member of the target team. The endpoint may be restricted further by employee roles (e.g., only managers may see unpublished procedures), with all access and search actions logged for audit compliance. The endpoint never lists procedures not assigned to the team, and deleted (inactive) assignments are excluded by default.\n\nThis search operation provides a business-friendly summary suitable for use in team dashboards or management UIs for procedure configuration.","parameters":[{"name":"teamId","description":"Unique identifier for the target enterprise team whose assigned procedures are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filtering, and pagination parameters to find enabled/assigned AI procedures for the target team.","typeName":"IWrtnEnterpriseTeamProcedure.IRequest"},"responseBody":{"description":"Paginated summary of AI procedures assigned to the specified team, including denormalized business metadata for display.","typeName":"IPageIWrtnEnterpriseTeamProcedure.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves the details of a specific procedure assigned to a team within an enterprise. It is based on the wrtn_enterprise_team_procedures table, which manages the assignment of available AI procedures to enterprise teams. The endpoint requires both the team ID and the procedure ID to locate the exact configuration and assignment entity, including contextual details about the procedure, team, and assignment metadata. Typically, this is used to display available AI procedures and their assignment details to team managers or administrative staff, ensuring strict enterprise/team boundary compliance and visibility. Permission verification and audit must occur to make sure that only properly scoped actors can access this endpoint.","path":"/wrtnEnterprise/employee/enterprise/teams/{teamId}/procedures/{procedureId}","method":"get","summary":"Retrieve a specific procedure assignment for a team within an enterprise by procedure ID and team ID. Returns assignment details, contextual objects, and auditing metadata for team configuration.","description":"This API operation fetches the assignment details of a single AI procedure configured for a given enterprise team. The endpoint is critical for business flows such as displaying team-specific AI capabilities, editing procedure settings, and enforcing the allowed list for team members. Only authorized employees (e.g., master or manager of the team or enterprise) are permitted to access this data, and actors must be scoped by JWT-based authentication.\n\nThe underlying DB schema (wrtn_enterprise_team_procedures) includes links to the parent team, the referenced AI procedure, configuration history, display order, and soft-deletion marker. The response DTO includes full detail (not just IDs) for the assigned procedure, the team, and who performed the configuration, in line with the DTO relation mapping principles. Audit metadata and soft deletion status are included to support management and change tracking. Related endpoints include listing all assigned procedures for a team and creating/updating the configuration.\n\nParameter validation strictly checks UUID format for both IDs and access is denied if the assignment does not exist, has been soft-deleted, or if the actor is out of scope. Error handling returns 404 for not found or 403 for unauthorized access. This operation is foundational for enterprise B2B SaaS offerings with highly controlled AI delegation per team.","parameters":[{"name":"teamId","description":"Target team's unique identifier (UUID) for which the procedure assignment is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"procedureId","description":"Procedure identifier (UUID) to fetch the assignment configuration for the specified team.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the assigned AI procedure for the team, including configuration metadata, team/procedure objects, configurator info, and assignment status.","typeName":"IWrtnEnterpriseTeamProcedure"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation assigns a new AI procedure to a specific team within an enterprise. It operates on the wrtn_enterprise_team_procedures table, allowing master or manager employees to configure which AI procedures are enabled for their team. The operation enforces uniqueness of procedure-team assignment, validates access rights, and guarantees that assignment is atomic and auditable. Business validation ensures that the procedure exists, is valid for the enterprise/team scope, and the actor performing the assignment has proper team or higher-level authority.","path":"/wrtnEnterprise/employee/enterprise/teams/{teamId}/procedures","method":"post","summary":"Assign a new AI procedure to a team within an enterprise, creating a configuration entry for allowed procedures.","description":"This API operation is used by authorized employees (typically master or manager roles) to enable a specific AI procedure for use by a designated team within their enterprise. It creates a configuration record (wrtn_enterprise_team_procedures table), specifying the assigned procedure, configurator (the employee performing the action), and display order as needed. Uniqueness constraints ensure that a given procedure may only be assigned once per team.\n\nBusiness rules include verifying that the employee invoking the API is allowed to configure team AI procedures, that the referenced procedure and team exist, and that the procedure is also available at the enterprise (or higher) level unless specifically overridden. Audit context is populated automatically from JWT session, and errors are returned if prerequisites such as procedure or team existence, permission, or assignment duplication are violated.\n\nThis operation is auditable: on every assignment, configuration metadata such as employee, session, timestamp, and assignment order are persisted for compliance. The response returns the full assignment record in detail, including procedure, team, and configurator relation objects in line with DTO relation mapping best practices (never just IDs). This endpoint is required to keep team AI procedures tightly governed and consistently managed at the enterprise B2B SaaS level.","parameters":[{"name":"teamId","description":"Target team's unique identifier (UUID) to which the AI procedure will be assigned.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required information for assigning a new procedure to a team, including procedure selection, display order, and any relevant configuration metadata. All actor context fields (configurator and session) are derived from the authenticated employee and session, not provided in the request body.","typeName":"IWrtnEnterpriseTeamProcedure.ICreate"},"responseBody":{"description":"Resulting assignment record linking the AI procedure with the team, including related objects for procedure, team, and configurator.","typeName":"IWrtnEnterpriseTeamProcedure"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation assigns a specific AI procedure to a team within an enterprise, configuring availability of a global procedure catalog entry for that team. Operates directly on the wrtn_enterprise_team_procedures table, which represents overrides or assignment of a procedure to a team's scoped catalog. The teamId path parameter corresponds to wrtn_enterprise_team_procedures.wrtn_enterprise_team_id. The procedureId path parameter corresponds to wrtn_enterprise_team_procedures.wrtn_procedure_id. When executed, the API determines if the specified procedure is already assigned to the team; if not, it creates a new assignment. If assignment exists and is soft-deleted, it restores the assignment. The operation enforces the unique constraint that each (team, procedure) can be assigned only once. Employees must have sufficient permission within their enterprise to manage team procedures. This endpoint is critical for team-specific enabling/disabling of advanced AI functions at the team level, supporting business-level access control and compliance requirements.","description":"Assign an AI procedure to an enterprise team, enabling team-scoped access to the specified procedure. This operation supports cases where teams require additional or restricted procedure access compared to the enterprise default AI catalog.\n\nUpon receiving a PUT request to the /enterprise/teams/{teamId}/procedures/{procedureId} endpoint, the server verifies the validity of the teamId and procedureId, confirming both exist and belong to the same enterprise. If the procedure is already assigned to the team but marked as deleted (soft-deleted), the assignment is restored. Otherwise, a new wrtn_enterprise_team_procedures entry is created. Permission checks ensure that only employees with adequate team or enterprise configuration rights (typically master/manager role) can update team procedure assignments.\n\nBusiness logic ensures that assigned procedures appear in the team's AI catalog immediately after successful assignment. All changes are audit-logged with the actor and session context. Typical error cases include invalid team/procedure IDs, permission denial if the current user lacks configuration rights, or violation of unique constraint if a living assignment already exists.\n\nThe wrtn_enterprise_team_procedures schema supports flexible assignment, with additional configuration such as display ordering managed via other APIs. This operation is integral to enterprise feature flagging, AI governance, and agile team empowerment strategies.","summary":"Assign and enable an AI procedure for an enterprise team (wrtn_enterprise_team_procedures).","parameters":[{"name":"teamId","description":"Unique identifier of the target enterprise team where the procedure will be assigned.","schema":{"type":"string","format":"uuid"}},{"name":"procedureId","description":"Unique identifier of the procedure from the global catalog to assign to the team.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The assigned wrtn_enterprise_team_procedures entity including the procedure, the team, assignment metadata, and configuration relationships. Object structure follows projected business read DTO mapping, not direct DB row exposure.","typeName":"IWrtnEnterpriseTeamProcedure"},"authorizationActors":["employee"],"name":"update","path":"/wrtnEnterprise/employee/enterprise/teams/{teamId}/procedures/{procedureId}","method":"put","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation removes an AI procedure assignment from a specific enterprise team by soft-deleting the wrtn_enterprise_team_procedures entry that links the procedure to the team. This does not remove the procedure globally or from other teams—only the specified team's ability to use or see the procedure in its AI catalog. The teamId path parameter refers to wrtn_enterprise_team_procedures.wrtn_enterprise_team_id; the procedureId path parameter refers to wrtn_enterprise_team_procedures.wrtn_procedure_id. Soft delete semantics are enforced, ensuring audit trail compliance. Only employees with appropriate enterprise or team privileges may perform this operation. Removing a procedure from a team supports business policy for feature flagging, compliance, and team-level AI capability governance.","description":"Soft-delete a procedure assignment from the specified team by setting the deleted_at field in the wrtn_enterprise_team_procedures entry corresponding to the path parameters. This operation restricts the team's members from invoking the procedure going forward, without impacting enterprise defaults or other teams.\n\nUpon DELETE to /enterprise/teams/{teamId}/procedures/{procedureId}, the system verifies that both team and procedure IDs are valid and linked. Permissions are checked to ensure the current user is entitled to alter team procedure assignments (typically master/manager roles within the enterprise). If the assignment does not exist or has already been deleted, a not-found or idempotent success may be returned according to business error conventions.\n\nThe operation maintains audit-trail integrity by tracking the actor, session, timestamp, and object affected. No response body is returned after a successful deletion; the operation's effect is determined by subsequent GET/list API calls for the team's procedure assignments. This is a critical element of enterprise AI feature governance and compliance policy implementation.","summary":"Soft-delete a team's assignment to an AI procedure (wrtn_enterprise_team_procedures).","parameters":[{"name":"teamId","description":"Unique identifier for the enterprise team from which the procedure assignment will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"procedureId","description":"Unique identifier of the assigned procedure to delete from the team.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","path":"/wrtnEnterprise/employee/enterprise/teams/{teamId}/procedures/{procedureId}","method":"delete","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of file attachments from the centralized attachment file store. It utilizes the wrtn_attachment_files table, providing flexible, secure file discovery, metadata inspection, and list navigation. The endpoint supports advanced filtering, search, and pagination for enterprise-class file management workflows. This operation is vital for employees, teams, and administrators to locate files associated with chat sessions, procedures, support tickets, and other business objects throughout the WrtnEnterprise platform. Through this operation, users can discover files, filter by extension, upload date, or filename, and download file metadata for further business processes and analytics.\n\nAs per business rules, attachment file access is subject to strict permission enforcement—employees may only view files within their allowed business context (own/team/company), while moderators are granted access within their support scope. The operation excludes the physical file download; it only returns file metadata and URIs. Security and compliance are maintained by ensuring file listing is restricted to resources the authenticated actor may view, and all queries are audit logged for compliance. Filtering and sorting parameters, such as extension, creation date, and name, can be included in the request body for flexible, enterprise-scale usage.\n\nThe wrtn_attachment_files table includes the following key columns: id (PK), name, extension, url (S3-compatible cloud object storage URI), and created_at timestamp. This operation respects file quota, retention, and business visibility boundaries, supporting business users in managing their attached file resources.","path":"/wrtnEnterprise/employee/attachmentFiles","method":"patch","summary":"Retrieve a filtered, paginated list of attachment files from the global file repository (wrtn_attachment_files)","description":"Retrieve and search a paginated list of file metadata from the centralized WrtnEnterprise attachment file store. This API allows business users and administrators to browse, search, and filter files they are authorized to access, based on extensible parameters such as name, extension, or creation date.\n\nSecurity is enforced such that employees or teams only see files within their organization/team, while moderators are limited to their audit support context. No physical file data is returned—only metadata and S3 URIs suitable for download via an explicit file download API.\n\nAdvanced filtering can be performed on file extension, filename, creation date range, and similar business properties, supporting large-scale audit and compliance controls. The operation is fully auditable as per WrtnEnterprise platform requirements, supporting legal and operational traceability. All payload schemas strictly reflect the wrtn_attachment_files table and business documentation.","parameters":[],"requestBody":{"description":"Optional search, filtering, sorting, and pagination options for attachment file listing.","typeName":"IWrtnAttachmentFile.IRequest"},"responseBody":{"description":"Paginated list of file metadata objects from the attachment file store, filtered as requested.","typeName":"IPageIWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves a paginated list of file attachments from the centralized attachment file store. It utilizes the wrtn_attachment_files table, providing flexible, secure file discovery, metadata inspection, and list navigation. The endpoint supports advanced filtering, search, and pagination for enterprise-class file management workflows. This operation is vital for employees, teams, and administrators to locate files associated with chat sessions, procedures, support tickets, and other business objects throughout the WrtnEnterprise platform. Through this operation, users can discover files, filter by extension, upload date, or filename, and download file metadata for further business processes and analytics.\n\nAs per business rules, attachment file access is subject to strict permission enforcement—employees may only view files within their allowed business context (own/team/company), while moderators are granted access within their support scope. The operation excludes the physical file download; it only returns file metadata and URIs. Security and compliance are maintained by ensuring file listing is restricted to resources the authenticated actor may view, and all queries are audit logged for compliance. Filtering and sorting parameters, such as extension, creation date, and name, can be included in the request body for flexible, enterprise-scale usage.\n\nThe wrtn_attachment_files table includes the following key columns: id (PK), name, extension, url (S3-compatible cloud object storage URI), and created_at timestamp. This operation respects file quota, retention, and business visibility boundaries, supporting business users in managing their attached file resources.","path":"/wrtnEnterprise/moderator/attachmentFiles","method":"patch","summary":"Retrieve a filtered, paginated list of attachment files from the global file repository (wrtn_attachment_files)","description":"Retrieve and search a paginated list of file metadata from the centralized WrtnEnterprise attachment file store. This API allows business users and administrators to browse, search, and filter files they are authorized to access, based on extensible parameters such as name, extension, or creation date.\n\nSecurity is enforced such that employees or teams only see files within their organization/team, while moderators are limited to their audit support context. No physical file data is returned—only metadata and S3 URIs suitable for download via an explicit file download API.\n\nAdvanced filtering can be performed on file extension, filename, creation date range, and similar business properties, supporting large-scale audit and compliance controls. The operation is fully auditable as per WrtnEnterprise platform requirements, supporting legal and operational traceability. All payload schemas strictly reflect the wrtn_attachment_files table and business documentation.","parameters":[],"requestBody":{"description":"Optional search, filtering, sorting, and pagination options for attachment file listing.","typeName":"IWrtnAttachmentFile.IRequest"},"responseBody":{"description":"Paginated list of file metadata objects from the attachment file store, filtered as requested.","typeName":"IPageIWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves the detailed metadata record for a single attachment file from the wrtn_attachment_files table, given its globally unique identifier. Designed to provide secure, direct access to file metadata by authorized users, this API supports viewing file details (name, extension, storage URI, creation timestamp) for business use cases such as file preview, audit investigation, or association with other business objects. The wrtn_attachment_files table is the authoritative registry for file metadata across the WrtnEnterprise platform. The API performs permission checks so that only eligible actors (employee or moderator in allowed scope) can view the requested file metadata.\n\nThe operation does not serve the file itself, only detailed metadata for the identified attachment file. It is a read-only endpoint; modifications or deletions are not supported via this operation. File download requires a separate API. Access is strictly audit-logged for compliance and traceability. Edge scenarios include attempts to access nonexistent files, or files outside the actor's permitted visibility, in which case clear error codes are returned as per platform policy. The file record includes the following attributes: id (PK), name, extension, url (S3-compatible URI), and creation timestamp.","path":"/wrtnEnterprise/employee/attachmentFiles/{attachmentFileId}","method":"get","summary":"Retrieve detailed metadata for a single attachment file by ID (wrtn_attachment_files).","description":"Obtain full metadata details for the specified attachment file using its unique attachmentFileId. This API returns all metadata fields required to identify, preview, or process file records in the WrtnEnterprise ecosystem, including human-readable file name, extension, S3 storage URI, and creation timestamp as held in the wrtn_attachment_files table.\n\nSecurity enforcement is strict and actor-specific: only users authorized to view the requested file may call this operation (employees are restricted to files within their organization/team, moderators by their audit/incident support scope). Attempts to access files outside of allowed context, or nonexistent file IDs, result in an explicit error and audit trail entry.\n\nNo physical file data is returned—file downloads require a dedicated endpoint under further business validation. This endpoint supports downstream workflows such as attaching file previews, populating file pickers, or showing audit evidence records. As a critical part of file management, all access is traceable and meets compliance requirements.","parameters":[{"name":"attachmentFileId","description":"Unique identifier (UUID) of the attachment file to retrieve detailed metadata for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment file metadata object for the requested file ID.","typeName":"IWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves the detailed metadata record for a single attachment file from the wrtn_attachment_files table, given its globally unique identifier. Designed to provide secure, direct access to file metadata by authorized users, this API supports viewing file details (name, extension, storage URI, creation timestamp) for business use cases such as file preview, audit investigation, or association with other business objects. The wrtn_attachment_files table is the authoritative registry for file metadata across the WrtnEnterprise platform. The API performs permission checks so that only eligible actors (employee or moderator in allowed scope) can view the requested file metadata.\n\nThe operation does not serve the file itself, only detailed metadata for the identified attachment file. It is a read-only endpoint; modifications or deletions are not supported via this operation. File download requires a separate API. Access is strictly audit-logged for compliance and traceability. Edge scenarios include attempts to access nonexistent files, or files outside the actor's permitted visibility, in which case clear error codes are returned as per platform policy. The file record includes the following attributes: id (PK), name, extension, url (S3-compatible URI), and creation timestamp.","path":"/wrtnEnterprise/moderator/attachmentFiles/{attachmentFileId}","method":"get","summary":"Retrieve detailed metadata for a single attachment file by ID (wrtn_attachment_files).","description":"Obtain full metadata details for the specified attachment file using its unique attachmentFileId. This API returns all metadata fields required to identify, preview, or process file records in the WrtnEnterprise ecosystem, including human-readable file name, extension, S3 storage URI, and creation timestamp as held in the wrtn_attachment_files table.\n\nSecurity enforcement is strict and actor-specific: only users authorized to view the requested file may call this operation (employees are restricted to files within their organization/team, moderators by their audit/incident support scope). Attempts to access files outside of allowed context, or nonexistent file IDs, result in an explicit error and audit trail entry.\n\nNo physical file data is returned—file downloads require a dedicated endpoint under further business validation. This endpoint supports downstream workflows such as attaching file previews, populating file pickers, or showing audit evidence records. As a critical part of file management, all access is traceable and meets compliance requirements.","parameters":[{"name":"attachmentFileId","description":"Unique identifier (UUID) of the attachment file to retrieve detailed metadata for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment file metadata object for the requested file ID.","typeName":"IWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation handles the uploading of file attachments into the centralized WrtnEnterprise file repository. It creates a new attachment file entry, storing metadata such as the original filename, extension, and secure storage URL. The operation enforces all business rules regarding allowed file types, maximum size, per-user and per-organization quotas, and mandatory virus/malware scanning. Quota checks are performed based on the requesting user's or team's entitlement, and only files that pass the malware scan and format/type check are accepted. Every successful upload is audit-logged for compliance and linked to the submitter's user/session context. Direct business modules like chat, procedure, support, or feedback must reference this file by its returned ID for downstream usage. The operation also guarantees per-actor/organizational access control semantics as described in the requirements, ensuring strict file isolation within organizational boundaries.","path":"/wrtnEnterprise/employee/attachmentFiles","method":"post","summary":"Upload a new attachment file and register in centralized file repository (IWrtnAttachmentFile) for WrtnEnterprise.","description":"Upload a new file into the WrtnEnterprise centralized attachment repository. This endpoint applies all organization and actor file restrictions as detailed in the Prisma schema, covering metadata registration (file name, extension, S3-compatible internal URL), file type/size policy enforcement, and quota/virus validation logic. Files are scanned on upload for malware and type validation, and if any violation is detected (forbidden type, oversized, or malware), the operation returns a clear error message. The response contains the registered attachment file's metadata; downstream usage (in chat, procedures, support, etc.) must reference this ID. All uploads are audit-trailed, ensuring compliance and supporting retention and deletion policies per enterprise rules. The API is accessible to authenticated moderator and employee actors and enforces strict isolation for enterprise/organization file boundaries.\n\nSecurity note: Moderator actors can upload files only into their authorized support/enterprise context. Employee actors are limited to uploading for their own enterprise or delegated teams. All operations are fully session-linked and audit-logged. Permitted file types/extensions and maximum file size are configured via system policy as described in requirements.","parameters":[],"requestBody":{"description":"File upload information including required metadata (filename, extension, secure URL). This object contains all required information for the WrtnEnterprise attachment file repository. The business and validation logic such as type enforcement, size limit, and quota checks will be applied regardless of the DTO properties here. Malware scanning triggering and per-user/team/enterprise audit is also enforced automatically.","typeName":"IWrtnAttachmentFile.ICreate"},"responseBody":{"description":"Attachment file metadata registered in the repository. Contains ID, filename, extension, secure storage URL, and creation timestamp. Reference this object for downstream file usage in business modules like chat, procedures, and support.","typeName":"IWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation handles the uploading of file attachments into the centralized WrtnEnterprise file repository. It creates a new attachment file entry, storing metadata such as the original filename, extension, and secure storage URL. The operation enforces all business rules regarding allowed file types, maximum size, per-user and per-organization quotas, and mandatory virus/malware scanning. Quota checks are performed based on the requesting user's or team's entitlement, and only files that pass the malware scan and format/type check are accepted. Every successful upload is audit-logged for compliance and linked to the submitter's user/session context. Direct business modules like chat, procedure, support, or feedback must reference this file by its returned ID for downstream usage. The operation also guarantees per-actor/organizational access control semantics as described in the requirements, ensuring strict file isolation within organizational boundaries.","path":"/wrtnEnterprise/moderator/attachmentFiles","method":"post","summary":"Upload a new attachment file and register in centralized file repository (IWrtnAttachmentFile) for WrtnEnterprise.","description":"Upload a new file into the WrtnEnterprise centralized attachment repository. This endpoint applies all organization and actor file restrictions as detailed in the Prisma schema, covering metadata registration (file name, extension, S3-compatible internal URL), file type/size policy enforcement, and quota/virus validation logic. Files are scanned on upload for malware and type validation, and if any violation is detected (forbidden type, oversized, or malware), the operation returns a clear error message. The response contains the registered attachment file's metadata; downstream usage (in chat, procedures, support, etc.) must reference this ID. All uploads are audit-trailed, ensuring compliance and supporting retention and deletion policies per enterprise rules. The API is accessible to authenticated moderator and employee actors and enforces strict isolation for enterprise/organization file boundaries.\n\nSecurity note: Moderator actors can upload files only into their authorized support/enterprise context. Employee actors are limited to uploading for their own enterprise or delegated teams. All operations are fully session-linked and audit-logged. Permitted file types/extensions and maximum file size are configured via system policy as described in requirements.","parameters":[],"requestBody":{"description":"File upload information including required metadata (filename, extension, secure URL). This object contains all required information for the WrtnEnterprise attachment file repository. The business and validation logic such as type enforcement, size limit, and quota checks will be applied regardless of the DTO properties here. Malware scanning triggering and per-user/team/enterprise audit is also enforced automatically.","typeName":"IWrtnAttachmentFile.ICreate"},"responseBody":{"description":"Attachment file metadata registered in the repository. Contains ID, filename, extension, secure storage URL, and creation timestamp. Reference this object for downstream file usage in business modules like chat, procedures, and support.","typeName":"IWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation updates the metadata associated with an existing attachment file in the centralized WrtnEnterprise file repository. It supports operations such as renaming the attachment, updating its extension (if permitted by business rules), or flagging the file for special retention cases. The operation does not allow replacement of file contents (physical upload); it only updates database metadata fields. All business and audit rules regarding allowed file modifications, ownership, quota, and compliance are enforced. Editor privilege is checked according to the file's ownership and the requesting actor's authorization (employee or moderator, with organization-file boundary validation). Every modification is audit-logged as specified in the requirements, and all changes are timestamped for retention and compliance tracking.","path":"/wrtnEnterprise/employee/attachmentFiles/{attachmentFileId}","method":"put","summary":"Update attachment file metadata (rename, extension, retention flags) for an existing IWrtnAttachmentFile in WrtnEnterprise.","description":"Update attachment file metadata in the WrtnEnterprise centralized repository. This endpoint enables operations such as renaming a file, adjusting its extension (if permitted), or marking for special retention category. Actual file contents cannot be changed by this operation: only metadata fields are subject to update. The endpoint uses the file's unique identifier as the path parameter and verifies actor privilege for modification based on file ownership and organizational boundaries defined in the Prisma schema. All updates are validated against system policies, such as allowed extension changes and retention constraints, and are audit-logged with session linkage as per business requirements. The response contains the updated attachment file's metadata. Unauthorized or non-existent file modification attempts result in appropriate error responses. This endpoint is accessible to both employee and moderator actors with correct authorization for their file context.","parameters":[{"name":"attachmentFileId","description":"Unique identifier (UUID) of the target attachment file to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment file metadata update information, such as new filename, updated extension, or retention flag. No file content change is possible here; only metadata fields are accepted. Fields conform to the update variant of IWrtnAttachmentFile.","typeName":"IWrtnAttachmentFile.IUpdate"},"responseBody":{"description":"Updated attachment file metadata, including new filename, extension, and retention status if changed. Confirms the metadata modifications applied to the file.","typeName":"IWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation updates the metadata associated with an existing attachment file in the centralized WrtnEnterprise file repository. It supports operations such as renaming the attachment, updating its extension (if permitted by business rules), or flagging the file for special retention cases. The operation does not allow replacement of file contents (physical upload); it only updates database metadata fields. All business and audit rules regarding allowed file modifications, ownership, quota, and compliance are enforced. Editor privilege is checked according to the file's ownership and the requesting actor's authorization (employee or moderator, with organization-file boundary validation). Every modification is audit-logged as specified in the requirements, and all changes are timestamped for retention and compliance tracking.","path":"/wrtnEnterprise/moderator/attachmentFiles/{attachmentFileId}","method":"put","summary":"Update attachment file metadata (rename, extension, retention flags) for an existing IWrtnAttachmentFile in WrtnEnterprise.","description":"Update attachment file metadata in the WrtnEnterprise centralized repository. This endpoint enables operations such as renaming a file, adjusting its extension (if permitted), or marking for special retention category. Actual file contents cannot be changed by this operation: only metadata fields are subject to update. The endpoint uses the file's unique identifier as the path parameter and verifies actor privilege for modification based on file ownership and organizational boundaries defined in the Prisma schema. All updates are validated against system policies, such as allowed extension changes and retention constraints, and are audit-logged with session linkage as per business requirements. The response contains the updated attachment file's metadata. Unauthorized or non-existent file modification attempts result in appropriate error responses. This endpoint is accessible to both employee and moderator actors with correct authorization for their file context.","parameters":[{"name":"attachmentFileId","description":"Unique identifier (UUID) of the target attachment file to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment file metadata update information, such as new filename, updated extension, or retention flag. No file content change is possible here; only metadata fields are accepted. Fields conform to the update variant of IWrtnAttachmentFile.","typeName":"IWrtnAttachmentFile.IUpdate"},"responseBody":{"description":"Updated attachment file metadata, including new filename, extension, and retention status if changed. Confirms the metadata modifications applied to the file.","typeName":"IWrtnAttachmentFile"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes an attachment file from the centralized, systemwide file store. It operates on the wrtn_attachment_files table, which maintains all metadata and signed URLs for uploaded files. When the API is called with a valid attachmentFileId, the targeted file record will be deleted if it is no longer referenced in any business context (e.g. chat session, support ticket, procedure, etc). The action is designed to support compliance, privacy, and file lifecycle governance for enterprise-scale SaaS.\n\nFile deletion enforces all business audit trail and soft/hard delete policies. Deletion is only allowed by the file's owning actor (employee or moderator), a privileged support moderator, or via system retention process — and only if the file is not referenced elsewhere. The operation will return errors if the file is in use or the user lacks permission, and is fully audit-logged per platform compliance requirements.\n\nNo soft delete or recovery applies if the file is deleted; all references and metadata are removed from the database and object storage. Attempting to delete a non-existent or protected file returns an appropriate error result, and the failed attempt itself is logged for audit compliance.","path":"/wrtnEnterprise/attachmentFiles/{attachmentFileId}","method":"delete","summary":"Permanently delete an attachment file entry if it is no longer referenced","description":"Delete a single attachment file entry from the global file store of the WrtnEnterprise platform. This operation is only permitted by the original uploader (employee or moderator), an authorized support moderator, or per system retention/policy enforcement process, and only when the file is unreferenced in all business modules (such as chat, support, documentation, etc). \n\nUpon deletion, the record is removed both from the database and the underlying object storage, assuming the file is not linked to any critical or required business record — e.g. a referenced chat message or support ticket. The system performs a strict referential integrity check: if business records reference the file, deletion is denied and an explicit error is returned.\n\nAll deletion requests are thoroughly audit-logged, including failed attempts due to referencing or unauthorized access. Permanent deletion is irreversible, ensuring that security and data retention standards are maintained. Errors will indicate if deletion was blocked due to active business references or insufficient permission. This endpoint exposes no soft delete or recovery mechanism; the operation assumes all legal retention and notification duties are satisfied in advance.","parameters":[{"name":"attachmentFileId","description":"Attachment file's unique identifier for deletion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":null,"name":"erase","prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered list of documentation articles across the WrtnEnterprise platform, supporting advanced multi-field search, category/enterprise/team scoping, and access permissions. It works on the wrtn_documentations table and related entities, offering business users a comprehensive query interface for onboarding, help center, and knowledge base content. It supports full-text search on titles and body, category, and enterprise/team/employee filters, and returns documentation entries relevant to the authenticated user's context.\n\nOperation ensures only users authorized to view documentation (based on enterprise, team, or global visibility, published status, and the user's own role) receive relevant results. Pagination, sorting, and advanced search query parameters are fully supported to facilitate platform-wide or scoped documentation discovery. The endpoint enables both general knowledge retrieval and detailed compliance/business content queries. All returned documentation entries include core metadata for catalog and display purposes.","path":"/wrtnEnterprise/documentations","method":"patch","summary":"Search and filter documentation articles and return paginated list","description":"Search and retrieve a paginated list of documentation articles that match user-specified filtering and search criteria. This query enables users to locate onboarding, help center, and business process documentation based on keywords, enterprise/team membership, and published status, subject to user permission boundaries.\n\nThe endpoint supports advanced searching, including full-text and fuzzy search on documentation titles and descriptions, enterprise or team association filtering, and user-centric access control to ensure only authorized content appears in results. Sorting and pagination assist in efficient navigation of potentially large documentation corpora, supporting business workflows around onboarding, compliance, and user education.\n\nAll operations are logged for usage analytics and compliance tracking. The response includes summaries of matching documentation articles, optimizing data for catalog/search UI display, while detailed article bodies are accessed through separate detail endpoints.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination information for documentation articles","typeName":"IWrtnEnterpriseDocumentation.IRequest"},"responseBody":{"description":"Paginated list of documentation summaries matching query","typeName":"IPageIWrtnEnterpriseDocumentation.ISummary"},"authorizationType":null,"authorizationActor":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a specific documentation article by its unique identifier. It operates on the wrtn_documentations table, which stores main organizational or product documentation articles for enterprises. The operation supports the retrieval of all fields for a given documentation, including its enterprise and author references, versioning, and any published state, as well as related metadata. The documentationId parameter uniquely identifies the documentation to fetch.","path":"/wrtnEnterprise/employee/documentations/{documentationId}","method":"get","summary":"Retrieve a specific documentation article by its unique identifier from wrtn_documentations.","description":"Fetch a single documentation entry using its unique documentationId value. This endpoint accesses the wrtn_documentations model, returning the full record for the documentation, including title, slug, content description, publish status, and timestamps. It also resolves FK relationships to provide summary information on the associated enterprise and author (employee) entities. Documentation articles may be used for onboarding, help, company policies, or product guides within a single enterprise.\n\nSecurity is handled via actor-based authorization, ensuring that only users with appropriate enterprise association can access a given documentation. Access is typically restricted to authenticated employees of the enterprise or, where documentation is globally published, to any authorized system actor. Audit logging occurs on every read for compliance.\n\nAccess control is enforced such that only users belonging to the enterprise linked to the documentation or permitted moderators may retrieve articles. If a documentation does not exist or is soft-deleted, the API returns a 404 Not Found error. If the user is not permitted to view this documentation, a 403 Forbidden is returned. Use this endpoint to access documentation for user help centers, compliance, onboarding, or reference knowledgebases. Related endpoints include documentation creation, listing, and version history read endpoints.","parameters":[{"name":"documentationId","description":"Unique identifier of the documentation article to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed documentation article, including enterprise, author, and version summary information.","typeName":"IWrtnEnterpriseDocumentation"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves a specific documentation article by its unique identifier. It operates on the wrtn_documentations table, which stores main organizational or product documentation articles for enterprises. The operation supports the retrieval of all fields for a given documentation, including its enterprise and author references, versioning, and any published state, as well as related metadata. The documentationId parameter uniquely identifies the documentation to fetch.","path":"/wrtnEnterprise/moderator/documentations/{documentationId}","method":"get","summary":"Retrieve a specific documentation article by its unique identifier from wrtn_documentations.","description":"Fetch a single documentation entry using its unique documentationId value. This endpoint accesses the wrtn_documentations model, returning the full record for the documentation, including title, slug, content description, publish status, and timestamps. It also resolves FK relationships to provide summary information on the associated enterprise and author (employee) entities. Documentation articles may be used for onboarding, help, company policies, or product guides within a single enterprise.\n\nSecurity is handled via actor-based authorization, ensuring that only users with appropriate enterprise association can access a given documentation. Access is typically restricted to authenticated employees of the enterprise or, where documentation is globally published, to any authorized system actor. Audit logging occurs on every read for compliance.\n\nAccess control is enforced such that only users belonging to the enterprise linked to the documentation or permitted moderators may retrieve articles. If a documentation does not exist or is soft-deleted, the API returns a 404 Not Found error. If the user is not permitted to view this documentation, a 403 Forbidden is returned. Use this endpoint to access documentation for user help centers, compliance, onboarding, or reference knowledgebases. Related endpoints include documentation creation, listing, and version history read endpoints.","parameters":[{"name":"documentationId","description":"Unique identifier of the documentation article to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed documentation article, including enterprise, author, and version summary information.","typeName":"IWrtnEnterpriseDocumentation"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation creates a new documentation article for an enterprise. It targets the wrtn_documentations table, allowing an authorized employee to provide all necessary information for establishing a new documentation record, including the enterprise link, author, unique slug, title, optional description, publish state, and relevant timestamps. All documentation must be uniquely identified within its enterprise context by slug and contents.","path":"/wrtnEnterprise/employee/documentations","method":"post","summary":"Create a new documentation article within an enterprise scope.","description":"Create a new documentation entity under an enterprise using this endpoint. The wrtn_documentations model defines all fields required for a valid documentation article, including association with the enterprise (FK), the author (FK to employee), unique slug, title, optional content description, and publish status. Ensure uniqueness of the slug within the enterprise to avoid conflicts.\n\nSecurity is enforced so that only authenticated employees—typically with appropriate authoring permissions—may create documentation within their organization. Moderators with platform privileges may also create documentation for enterprise-level onboarding, policy, or system help. All required fields must be supplied. Server logic ensures that relationships to the enterprise and author are enforced according to business rules and actor JWT context. Audit logging records every creation event, including actor and session metadata.\n\nValidation rules enforce that the documentation title, slug, and main content are present; the slug must be unique per enterprise. Attempting to create a documentation with a duplicate slug will result in a conflict error. Successfully created documentation can immediately be retrieved and linked within enterprise knowledgebases or onboarding flows. Related endpoints include documentation detail retrieval, update, and versioning APIs.","parameters":[],"requestBody":{"description":"Creation parameters for the new documentation article, including enterprise link, author, slug, title, description, and publish state.","typeName":"IWrtnEnterpriseDocumentation.ICreate"},"responseBody":{"description":"Created documentation article record, including primary keys and summary references.","typeName":"IWrtnEnterpriseDocumentation"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation creates a new documentation article for an enterprise. It targets the wrtn_documentations table, allowing an authorized employee to provide all necessary information for establishing a new documentation record, including the enterprise link, author, unique slug, title, optional description, publish state, and relevant timestamps. All documentation must be uniquely identified within its enterprise context by slug and contents.","path":"/wrtnEnterprise/moderator/documentations","method":"post","summary":"Create a new documentation article within an enterprise scope.","description":"Create a new documentation entity under an enterprise using this endpoint. The wrtn_documentations model defines all fields required for a valid documentation article, including association with the enterprise (FK), the author (FK to employee), unique slug, title, optional content description, and publish status. Ensure uniqueness of the slug within the enterprise to avoid conflicts.\n\nSecurity is enforced so that only authenticated employees—typically with appropriate authoring permissions—may create documentation within their organization. Moderators with platform privileges may also create documentation for enterprise-level onboarding, policy, or system help. All required fields must be supplied. Server logic ensures that relationships to the enterprise and author are enforced according to business rules and actor JWT context. Audit logging records every creation event, including actor and session metadata.\n\nValidation rules enforce that the documentation title, slug, and main content are present; the slug must be unique per enterprise. Attempting to create a documentation with a duplicate slug will result in a conflict error. Successfully created documentation can immediately be retrieved and linked within enterprise knowledgebases or onboarding flows. Related endpoints include documentation detail retrieval, update, and versioning APIs.","parameters":[],"requestBody":{"description":"Creation parameters for the new documentation article, including enterprise link, author, slug, title, description, and publish state.","typeName":"IWrtnEnterpriseDocumentation.ICreate"},"responseBody":{"description":"Created documentation article record, including primary keys and summary references.","typeName":"IWrtnEnterpriseDocumentation"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation updates an existing documentation entry in the wrtn_documentations table. It allows authenticated employees to modify the documentation's attributes such as title, description, slug, and published status. Observed in the Prisma schema, the documentation is scoped by its unique identifier, and the operation ensures that all updates are audit-logged with relevant modification timestamps. Only employees with editing permission for the documentation's enterprise are authorized. The operation supports full modification and adheres to business audit, compliance, and publication visibility requirements.","path":"/wrtnEnterprise/employee/documentations/{documentationId}","method":"put","summary":"Update an existing documentation entry by ID in wrtn_documentations.","description":"This API operation permits an authenticated enterprise employee to update an existing documentation record identified by documentationId. Full update capabilities are provided, including modification of the title, description, slug, published status, and other editable attributes as reflected in the wrtn_documentations schema.\n\nSecurity and authorization are enforced: the employee must belong to the same enterprise as the documentation record and possess appropriate editing rights according to business rules. Audit trail and compliance are ensured by updating the modification timestamp and recording all changes in enterprise audit logs.\n\nThis endpoint directly interacts with the wrtn_documentations table, preserving the uniqueness of slug and title per enterprise. It is designed to support collaborative editing workflows, reflecting real-time modifications while upholding organizational knowledge base and onboarding flows.","parameters":[{"name":"documentationId","description":"Unique identifier of the documentation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated documentation attributes for enterprise documentation management.","typeName":"IWrtnDocumentation.IUpdate"},"responseBody":{"description":"The updated documentation record, including all attributes and summary relationships.","typeName":"IWrtnDocumentation"},"authorizationActors":["employee"],"name":"update","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes (hard delete) a documentation record from the wrtn_documentations table by its unique documentationId. The deletion is only permitted for an authenticated employee with the appropriate authorization within the same enterprise. All deletion actions are strictly audit-logged to meet organizational compliance requirements. The operation ensures that the identified documentation entry is removed and cannot be restored, reflecting a final state transition in the knowledge base lifecycle.","path":"/wrtnEnterprise/employee/documentations/{documentationId}","method":"delete","summary":"Permanently delete a documentation record from wrtn_documentations by its ID.","description":"This API endpoint allows an authenticated enterprise employee to permanently remove a documentation entry identified by documentationId from the wrtn_documentations table. No request body is required, and no response body is returned upon successful deletion. Authorization checks ensure the requesting employee is entitled to delete the documentation, which is only possible if they belong to the same enterprise and have sufficient permissions as enforced by business rules.\n\nEvery deletion action is audit-logged under the enterprise's compliance policy, including actor identity, session, and event timestamp. Once deleted, the documentation record is unrecoverable, supporting the final phase of enterprise knowledge management lifecycles. This operation is critical for maintaining current, relevant knowledge bases and enables enterprises to remove outdated or incorrect documentation as needed.","parameters":[{"name":"documentationId","description":"Unique identifier of the documentation to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves all versions of a given documentation article. It operates on the wrtn_documentation_versions table, returning a paginated array of version entries for a specific documentation. Each version includes rich content, version metadata, and audit information. This API is intended to support documentation history views, rollback, and comparison features for employees and moderators managing enterprise knowledge. The operation should expose all available versions, ordered by version number or creation date, for documentation compliance, audit, or collaborative editing scenarios.","description":"This operation enables clients to fetch a comprehensive list of all historical versions associated with a specified documentation article. Each documentation version captures the title, markdown body, changelog, authoring employee, and timestamps. The endpoint is critical for supporting collaborative document workflows, auditability, and regulatory compliance, as it allows consumers to track document evolution and changes over time.\n\nSecurity considerations ensure that only authorized employees within the documentation's enterprise, and internal moderators with appropriate permissions, can access this endpoint. The returned data should exclude deleted or draft-only versions unless otherwise permitted for audit users. Enterprise isolation is strictly enforced, so employees cannot access documentation from other organizations.\n\nThe response structure returns a paginated result set, supplying essential metadata for list display while allowing clients to perform drilldown to individual versions via the detail endpoint. Related operations include GET for fetching a specific version and POST for creating/editing documentation content. Error handling must account for cases where the documentation does not exist or the requesting actor lacks permission.","summary":"Retrieve a paginated list of all versions for a documentation article (wrtn_documentation_versions).","parameters":[{"name":"documentationId","description":"Unique identifier for the documentation whose versions are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request and pagination/filter criteria for documentation version list retrieval.","typeName":"IWrtnEnterpriseDocumentationVersion.IRequest"},"responseBody":{"description":"Paginated summary of documentation versions belonging to the requested documentation article.","typeName":"IPageIWrtnEnterpriseDocumentationVersion.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/employee/documentations/{documentationId}/versions","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves all versions of a given documentation article. It operates on the wrtn_documentation_versions table, returning a paginated array of version entries for a specific documentation. Each version includes rich content, version metadata, and audit information. This API is intended to support documentation history views, rollback, and comparison features for employees and moderators managing enterprise knowledge. The operation should expose all available versions, ordered by version number or creation date, for documentation compliance, audit, or collaborative editing scenarios.","description":"This operation enables clients to fetch a comprehensive list of all historical versions associated with a specified documentation article. Each documentation version captures the title, markdown body, changelog, authoring employee, and timestamps. The endpoint is critical for supporting collaborative document workflows, auditability, and regulatory compliance, as it allows consumers to track document evolution and changes over time.\n\nSecurity considerations ensure that only authorized employees within the documentation's enterprise, and internal moderators with appropriate permissions, can access this endpoint. The returned data should exclude deleted or draft-only versions unless otherwise permitted for audit users. Enterprise isolation is strictly enforced, so employees cannot access documentation from other organizations.\n\nThe response structure returns a paginated result set, supplying essential metadata for list display while allowing clients to perform drilldown to individual versions via the detail endpoint. Related operations include GET for fetching a specific version and POST for creating/editing documentation content. Error handling must account for cases where the documentation does not exist or the requesting actor lacks permission.","summary":"Retrieve a paginated list of all versions for a documentation article (wrtn_documentation_versions).","parameters":[{"name":"documentationId","description":"Unique identifier for the documentation whose versions are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request and pagination/filter criteria for documentation version list retrieval.","typeName":"IWrtnEnterpriseDocumentationVersion.IRequest"},"responseBody":{"description":"Paginated summary of documentation versions belonging to the requested documentation article.","typeName":"IPageIWrtnEnterpriseDocumentationVersion.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/moderator/documentations/{documentationId}/versions","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation fetches the detailed content and audit metadata for a specific version of a documentation article. It operates on the wrtn_documentation_versions table and is used by both enterprise employees and internal moderators to display the full contents, version history, and authoring information for a particular documentation version. The endpoint supports document review, rollback, and compliance investigations.","description":"This API provides the full rich details of a specific version of a documentation article, including title, markdown or rich content body, author identity, changelog, and creation timestamp. This is essential for documentation management workflows, as it allows users to view or compare specific historical iterations of organizational knowledge.\n\nAccess control ensures that only employees in the appropriate enterprise or internal moderators with documentation privileges are entitled to view this content. The data returned supports not only content review but also compliance audit trails, demonstrating who edited or authored each version and when. Deleted versions should only be accessible by authorized audit users or system managers in compliance scenarios.\n\nCommon error cases include requests for non-existent or unauthorized documentation versions; appropriate error messages should be returned in these cases. This operation is typically paired with the patch endpoint for listing all versions and can be used for rollback or compare workflows by document managers.","summary":"Retrieve full details for a single documentation version (wrtn_documentation_versions).","parameters":[{"name":"documentationId","description":"Unique identifier for the documentation article to which this version belongs.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier for the documentation version to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified documentation version, including content, author, and changelog.","typeName":"IWrtnEnterpriseDocumentationVersion"},"authorizationActors":["employee","moderator"],"name":"at","path":"/wrtnEnterprise/employee/documentations/{documentationId}/versions/{versionId}","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation fetches the detailed content and audit metadata for a specific version of a documentation article. It operates on the wrtn_documentation_versions table and is used by both enterprise employees and internal moderators to display the full contents, version history, and authoring information for a particular documentation version. The endpoint supports document review, rollback, and compliance investigations.","description":"This API provides the full rich details of a specific version of a documentation article, including title, markdown or rich content body, author identity, changelog, and creation timestamp. This is essential for documentation management workflows, as it allows users to view or compare specific historical iterations of organizational knowledge.\n\nAccess control ensures that only employees in the appropriate enterprise or internal moderators with documentation privileges are entitled to view this content. The data returned supports not only content review but also compliance audit trails, demonstrating who edited or authored each version and when. Deleted versions should only be accessible by authorized audit users or system managers in compliance scenarios.\n\nCommon error cases include requests for non-existent or unauthorized documentation versions; appropriate error messages should be returned in these cases. This operation is typically paired with the patch endpoint for listing all versions and can be used for rollback or compare workflows by document managers.","summary":"Retrieve full details for a single documentation version (wrtn_documentation_versions).","parameters":[{"name":"documentationId","description":"Unique identifier for the documentation article to which this version belongs.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier for the documentation version to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified documentation version, including content, author, and changelog.","typeName":"IWrtnEnterpriseDocumentationVersion"},"authorizationActors":["employee","moderator"],"name":"at","path":"/wrtnEnterprise/moderator/documentations/{documentationId}/versions/{versionId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"Creates a new version (snapshot) of an existing documentation article within an enterprise knowledge base. This operation targets the wrtn_documentation_versions table, linked to its parent documentation row. The operation allows a new version to be appended with updated content, title, changelog, or other relevant version data. Any employee who owns or has edit permission on the documentation can use this endpoint to publish a revision. The documentationId path parameter is the UUID of the target documentation, and the request body should contain all required fields for version creation, including title and body. Parents must exist and users must have permission to modify. On an attempt to create a version for non-existent or deleted documentation, the API returns a 404 error. This operation is subject to audit logging as per requirements for knowledge management and edit traceability.","path":"/wrtnEnterprise/employee/documentations/{documentationId}/versions","method":"post","description":"Create a new published version of a documentation article by appending a new version row to the wrtn_documentation_versions table. This operation allows employees to update help center content while preserving full version history. Security checks ensure only authorized users can create new versions of a documentation entry. Audit log records the changes and actor context for compliance. Version number is automatically incremented. Related documentation must exist and not be deleted. Failure cases include non-existent documentationId (404) or insufficient permissions (403). Success returns the full documentation version detail including id, parent documentation reference, version, title, body, changelog, author, and created timestamp.","summary":"Create a new documentation version for an existing article (wrtn_documentation_versions)","parameters":[{"name":"documentationId","description":"Unique identifier of the target documentation article for which a new version is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content for the new documentation version, including title, body, changelog (optional).","typeName":"IWrtnDocumentationVersion.ICreate"},"responseBody":{"description":"Full details of the created documentation version including parent reference, version number, title, body, changelog, author, and timestamps.","typeName":"IWrtnDocumentationVersion"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"Updates an existing version of a documentation article. This operation modifies a single documentation version row within wrtn_documentation_versions, allowing changing of title, body, or changelog. The operation uses both documentationId (parent) and versionId (target version row) as path parameters, and expects the request body to contain updated data. Security checks ensure only the documentation version's author or editors with sufficient permission can update the entry. If documentation or version does not exist or is soft-deleted, 404 is returned. Any modifications are tracked for audit purposes, and updated timestamp is set. This operation contributes to full history and compliance requirements for enterprise documentation management.","path":"/wrtnEnterprise/employee/documentations/{documentationId}/versions/{versionId}","method":"put","description":"Update an existing documentation version. This operation allows permitted employees to modify the title, body, or changelog of a specific documentation version by providing updated content fields in the request body. Security checks restrict access to authors or users granted edit rights. Both documentation and version rows must exist and be active (not soft-deleted). On success, returns the updated documentation version detail. All changes are audit-logged for traceability. Failure modes include insufficient permission (403), documentation or version not found (404).","summary":"Update the content, title, or changelog of a documentation version (wrtn_documentation_versions)","parameters":[{"name":"documentationId","description":"Parent documentation article's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier of the documentation version to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content changes for the documentation version (may update title, body, changelog)","typeName":"IWrtnDocumentationVersion.IUpdate"},"responseBody":{"description":"Details of the updated documentation version after applying changes","typeName":"IWrtnDocumentationVersion"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation removes a specific version of a documentation article within an enterprise knowledge base. It operates on the wrtn_documentation_versions table associated with the documentationId and versionId provided in the URL path. Only documentation managers or content owners may perform this operation, ensuring compliance with audit and permission policies. The underlying record's deleted_at timestamp is set, following soft deletion practices to retain history for compliance reviews and future recovery.","path":"/wrtnEnterprise/employee/documentations/{documentationId}/versions/{versionId}","method":"delete","summary":"Soft delete a specific version of an enterprise documentation article by versionId.","description":"This API endpoint enables authorized employees (typically content managers or the documentation's original author) to mark a specific documentation version as deleted. The operation sets the deleted_at field for the selected documentation version, ensuring that version history remains retained for audit, rollback, and compliance processes.\n\nThe endpoint requires both the documentationId (the parent documentation record) and the versionId (the historical version to be deleted) as path parameters. Proper permission checks verify that only users with authorized access to the documentation can perform this operation. Attempts to delete an already-deleted version, or a version not owned or managed by the requesting user, will result in appropriate error responses.\n\nSoft deletion guarantees that historical content is never physically removed unless required by retention policy, enabling regulatory compliance and support for full restoration or review of doc changes by authorized actors. This operation is critical for supporting enterprise documentation lifecycle workflows and traceability.","parameters":[{"name":"documentationId","description":"Unique identifier of the parent documentation article.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier of the documentation version to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","authorizationType":null,"authorizationActor":"employee","prerequisites":[]},{"specification":"This operation provides search and retrieval capabilities for FAQ categories within the enterprise knowledge base. It operates on the wrtn_faq_categories table, enabling filtering, pagination, and organizational scope checks. This endpoint supports knowledge management workflows and ensures that only categories relevant to the requesting user's enterprise are returned.","path":"/wrtnEnterprise/employee/faqCategories","method":"patch","summary":"Search and retrieve a paginated list of FAQ categories for the authenticated enterprise.","description":"This API endpoint allows employees and content managers to search, filter, and retrieve FAQ category listings relevant to their enterprise. Input parameters may include keyword filters, pagination options, or display ordering, mapped to the wrtn_faq_categories table fields such as name and description.\n\nThe operation returns a paginated summary DTO containing FAQ category data, supporting efficient UI listing and selection. All returned categories are strictly scoped by enterprise context and are only visible to users within the same enterprise. Filtering supports full-text search on category name and description, with optional sorting by display order or creation time.\n\nSecurity considerations enforce enterprise isolation: categories from other enterprises are never returned in query results. This operation is foundational for knowledge base navigation, FAQ editing, and category management workflows in B2B SaaS environments.","parameters":[],"requestBody":{"description":"Criteria and pagination options for FAQ category search.","typeName":"IWrtnFaqCategory.IRequest"},"responseBody":{"description":"Paginated summary of all FAQ categories matching search query, within the user's enterprise scope.","typeName":"IPageIWrtnFaqCategory.ISummary"},"authorizationActors":["employee"],"name":"index","authorizationType":null,"authorizationActor":"employee","prerequisites":[]},{"specification":"This operation retrieves the details of a specific FAQ category. It targets the wrtn_faq_categories table, which stores categories or sections under which FAQs are grouped. The operation is intended for situations where a user or system component needs to access all relevant information about a particular FAQ category, such as its name, description, display order, and association to an enterprise for support or documentation navigation and management.\n\nThe operation serves business requirements for both internal moderators and enterprise employees to view or administer FAQ categories. Key information such as creation timestamps, enterprise association, and creator identity (employee) are exposed through the response type, following the relation-mapping rules—‘employee’ and ‘enterprise’ must be nested objects, not foreign-key IDs. The operation is accessible to authenticated users with appropriate authorization, typically employees of the relevant enterprise or internal moderators supporting companies.\n\nCare is taken to ensure the operation respects data isolation: only authorized actors may access FAQ categories belonging to their enterprise or support scope. Returns an error if the target category ID does not exist or the user lacks access rights. No requestBody is required, as this is a resource retrieval (GET).","path":"/wrtnEnterprise/employee/faqCategories/{faqCategoryId}","method":"get","summary":"Retrieve details of a specific FAQ category from wrtn_faq_categories.","description":"Fetch the complete information about a single FAQ category by its unique ID from the wrtn_faq_categories table. This operation allows users—such as support staff, documentation maintainers, or administrators—to view category details for knowledge base navigation, editing, or context display in the UI.\n\nSecurity is enforced so that only authorized actors—moderators or employees within the associated enterprise—can access this data. Attempts to retrieve a category outside the caller's authorization boundary are rejected and audit-logged for compliance. The operation leverages response DTO rules to include related employee (creator/owner) and enterprise objects, providing a rich context for front-end rendering and administrative workflows.\n\nValidation ensures that the specified category ID exists and is active (i.e., not soft-deleted). Inaccessible or missing resources return appropriate error responses. No sensitive information is exposed outside organizational scope; minimal response fields are included for UI/scenario needs, with audit support enabled via timestamps and relational traceability.","parameters":[{"name":"faqCategoryId","description":"Unique identifier of the FAQ category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested FAQ category, including key metadata and relation-mapped enterprise and creator (employee) objects.","typeName":"IWrtnFaqCategory"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves the details of a specific FAQ category. It targets the wrtn_faq_categories table, which stores categories or sections under which FAQs are grouped. The operation is intended for situations where a user or system component needs to access all relevant information about a particular FAQ category, such as its name, description, display order, and association to an enterprise for support or documentation navigation and management.\n\nThe operation serves business requirements for both internal moderators and enterprise employees to view or administer FAQ categories. Key information such as creation timestamps, enterprise association, and creator identity (employee) are exposed through the response type, following the relation-mapping rules—‘employee’ and ‘enterprise’ must be nested objects, not foreign-key IDs. The operation is accessible to authenticated users with appropriate authorization, typically employees of the relevant enterprise or internal moderators supporting companies.\n\nCare is taken to ensure the operation respects data isolation: only authorized actors may access FAQ categories belonging to their enterprise or support scope. Returns an error if the target category ID does not exist or the user lacks access rights. No requestBody is required, as this is a resource retrieval (GET).","path":"/wrtnEnterprise/moderator/faqCategories/{faqCategoryId}","method":"get","summary":"Retrieve details of a specific FAQ category from wrtn_faq_categories.","description":"Fetch the complete information about a single FAQ category by its unique ID from the wrtn_faq_categories table. This operation allows users—such as support staff, documentation maintainers, or administrators—to view category details for knowledge base navigation, editing, or context display in the UI.\n\nSecurity is enforced so that only authorized actors—moderators or employees within the associated enterprise—can access this data. Attempts to retrieve a category outside the caller's authorization boundary are rejected and audit-logged for compliance. The operation leverages response DTO rules to include related employee (creator/owner) and enterprise objects, providing a rich context for front-end rendering and administrative workflows.\n\nValidation ensures that the specified category ID exists and is active (i.e., not soft-deleted). Inaccessible or missing resources return appropriate error responses. No sensitive information is exposed outside organizational scope; minimal response fields are included for UI/scenario needs, with audit support enabled via timestamps and relational traceability.","parameters":[{"name":"faqCategoryId","description":"Unique identifier of the FAQ category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested FAQ category, including key metadata and relation-mapped enterprise and creator (employee) objects.","typeName":"IWrtnFaqCategory"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation creates a new FAQ category in the wrtn_faq_categories table, which is used to group and organize frequently asked questions within an enterprise’s documentation or support center. The operation supports both internal moderators and enterprise employees (content managers) by allowing them to define new categories with a name, description, display order, and associations to the relevant enterprise and creator employee. \n\nThe operation applies rigorous business validation: category names must be unique within each enterprise, and the category is created with appropriate audit-trail information, including the creator's identity, associated enterprise, timestamps, and display preferences. Security ensures that only properly authorized actors—such as content managers, documentation administrators, or moderators—may invoke this endpoint.\n\nThis endpoint directly maps to the wrtn_faq_categories table and ensures that new categories are created in an active (non-deleted) state. If a duplicate category name is provided within an enterprise, the operation will return a validation error explaining the uniqueness constraint violation. The response body includes the full DTO type with relation-mapped enterprise and employee (creator) objects, as per AutoBE DTO composition rules.","path":"/wrtnEnterprise/employee/faqCategories","method":"post","summary":"Create a new FAQ category in wrtn_faq_categories for enterprise documentation/support.","description":"Register a new FAQ category by supplying the required business metadata: category name, description, display order, and association to an enterprise and employee creator. This operation is used by moderators or authorized enterprise employees to expand the knowledge base structure and improve self-service navigation.\n\nThe endpoint validates uniqueness of the category name within the specified enterprise, ensuring proper taxonomy and organizational clarity. Security enforcement ensures that only employees or moderators with content management authority can create categories in the relevant enterprise context; unauthorized actors or attempts to create for an enterprise they do not control are rejected and audit-logged. \n\nUpon successful creation, the response delivers a full representation of the new FAQ category following system-wide DTO design rules, including enterprise and employee relations as objects (not IDs), timestamps for audit/compliance, and the category’s key descriptive fields for UI and management workflows.","parameters":[],"requestBody":{"description":"FAQ category creation input, including category name, description, display order, and association to enterprise and creator.","typeName":"IWrtnFaqCategory.ICreate"},"responseBody":{"description":"Representation of the newly created FAQ category, including relation-mapped enterprise and creator (employee) objects.","typeName":"IWrtnFaqCategory"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation creates a new FAQ category in the wrtn_faq_categories table, which is used to group and organize frequently asked questions within an enterprise’s documentation or support center. The operation supports both internal moderators and enterprise employees (content managers) by allowing them to define new categories with a name, description, display order, and associations to the relevant enterprise and creator employee. \n\nThe operation applies rigorous business validation: category names must be unique within each enterprise, and the category is created with appropriate audit-trail information, including the creator's identity, associated enterprise, timestamps, and display preferences. Security ensures that only properly authorized actors—such as content managers, documentation administrators, or moderators—may invoke this endpoint.\n\nThis endpoint directly maps to the wrtn_faq_categories table and ensures that new categories are created in an active (non-deleted) state. If a duplicate category name is provided within an enterprise, the operation will return a validation error explaining the uniqueness constraint violation. The response body includes the full DTO type with relation-mapped enterprise and employee (creator) objects, as per AutoBE DTO composition rules.","path":"/wrtnEnterprise/moderator/faqCategories","method":"post","summary":"Create a new FAQ category in wrtn_faq_categories for enterprise documentation/support.","description":"Register a new FAQ category by supplying the required business metadata: category name, description, display order, and association to an enterprise and employee creator. This operation is used by moderators or authorized enterprise employees to expand the knowledge base structure and improve self-service navigation.\n\nThe endpoint validates uniqueness of the category name within the specified enterprise, ensuring proper taxonomy and organizational clarity. Security enforcement ensures that only employees or moderators with content management authority can create categories in the relevant enterprise context; unauthorized actors or attempts to create for an enterprise they do not control are rejected and audit-logged. \n\nUpon successful creation, the response delivers a full representation of the new FAQ category following system-wide DTO design rules, including enterprise and employee relations as objects (not IDs), timestamps for audit/compliance, and the category’s key descriptive fields for UI and management workflows.","parameters":[],"requestBody":{"description":"FAQ category creation input, including category name, description, display order, and association to enterprise and creator.","typeName":"IWrtnFaqCategory.ICreate"},"responseBody":{"description":"Representation of the newly created FAQ category, including relation-mapped enterprise and creator (employee) objects.","typeName":"IWrtnFaqCategory"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation updates the details of an existing FAQ category using its ID. The operation targets the wrtn_faq_categories table within the WrtnEnterprise service and permits modifying category attributes such as name, description, and display order for efficient navigation and help center organization. Only specified properties in the update payload will be modified, preserving audit integrity. This endpoint is primarily for FAQ/knowledgebase managers to maintain organized and accessible documentation groupings.","path":"/wrtnEnterprise/moderator/faqCategories/{faqCategoryId}","method":"put","summary":"Update an existing FAQ category in wrtn_faq_categories by ID","description":"Update the properties of a specific FAQ category record identified by its unique faqCategoryId. This operation allows knowledgebase or business content managers to update the name, description, or display order of a FAQ category, supporting ongoing improvement and organization of documentation resources within the enterprise system.\n\nThis endpoint enforces that only authorized users can update FAQ categories. The authenticated user's context is determined from the JWT token for security and auditing. The operation strictly modifies only the fields provided in the request body and leaves other properties unchanged. All updates are timestamped for change history and compliance tracking as per the wrtn_faq_categories schema.\n\nAttempting to update a non-existent or deleted FAQ category results in a 404 Not Found error. Database-level constraints ensure that category names remain unique per enterprise. Related endpoints include the retrieval of FAQ categories and the creation of new FAQ categories for comprehensive management.","parameters":[{"name":"faqCategoryId","description":"The unique identifier of the FAQ category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Partial update data for the FAQ category (name, description, display_order etc.)","typeName":"IWrtnFaqCategory.IUpdate"},"responseBody":{"description":"The full, updated FAQ category object after changes have been applied","typeName":"IWrtnFaqCategory"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes (hard delete) an FAQ category, identified by its unique ID (faqCategoryId), from the wrtn_faq_categories table. This action is irreversible and should be used with caution—associated FAQs must be handled prior to category deletion to maintain referential integrity. Reserved for privileged knowledgebase or business documentation managers.","path":"/wrtnEnterprise/moderator/faqCategories/{faqCategoryId}","method":"delete","summary":"Permanently remove an FAQ category from wrtn_faq_categories by ID","description":"This operation irreversibly deletes a specific FAQ category from the system by its unique identifier faqCategoryId. Use with care: once performed, the record is physically removed from the wrtn_faq_categories table and cannot be recovered. All FAQs under this category should be migrated or deleted beforehand or the operation may be blocked by foreign key constraints.\n\nOnly authorized managers (e.g., moderators or documentation administrators) may call this endpoint. Any audit-relevant events are logged for compliance tracking, and all associated business rules of ownership, data boundaries, and documentation workflow must be enforced.\n\nAttempts to delete a non-existent or already deleted category result in a 404 Not Found error. Attempts to delete a FAQ category with existing FAQ records may be rejected unless the application ensures cascading or manual disassociation. Related endpoints include FAQ category read/list and FAQ management endpoints.","parameters":[{"name":"faqCategoryId","description":"The unique identifier of the FAQ category to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","prerequisites":[]},{"specification":"This operation enables advanced, paginated search of FAQ entries within the system, operating on the wrtn_faqs table. It supports rich filtering, sorting, search by question/answer text, category, or enterprise scope, and is usable by both internal moderators and authenticated enterprise employees. Related category, status, and author relationships are respected in the filtering and in response summary composition. Results are summary DTOs reflecting key FAQ fields and relevant relationships, optimized for list and catalog usage.","path":"/wrtnEnterprise/faqs","method":"patch","summary":"Search and paginate FAQ entries with advanced filters (wrtn_faqs table)","description":"Retrieve a paginated, filtered, and sorted list of FAQ entries. This API supports searching by question content, answer content, category, authoring employee, display order, and other typical attributes as defined in the wrtn_faqs schema. Full-text search, partial matching, and ordering are supported through request parameters, and can be scoped to the authenticated user's organization where applicable.\n\nPermissions: Moderators may query all FAQ entries globally; enterprise employees are scoped to entries within their organization. Security measures prevent exposure of FAQs outside user's enterprise context. The response returns summary DTOs with enterprise, category, and author summary references.\n\nInput validation ensures presence of at least simple query or paging parameters. Business logic applies category and display order constraints when relevant. Related API: GET /faqs/{faqId} fetches FAQ detail. Errors on queries with invalid filters or unauthorized access are handled with appropriate business-level error responses.","parameters":[],"requestBody":{"description":"FAQ search criteria, filtering, sorting, and pagination controls","typeName":"IWrtnFaq.IRequest"},"responseBody":{"description":"Paginated and filtered summary list of FAQ entries","typeName":"IPageIWrtnFaq.ISummary"},"authorizationType":null,"authorizationActor":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves the full details of a specific FAQ entry, identified by its unique FAQ ID (wrtn_faqs.id), from the database. It returns all FAQ fields, including question, answer, author, category, and enriched information on linked enterprise or related documentation. The operation is primarily used for displaying a selected FAQ in full context, such as in FAQ detail views or knowledge base articles.","path":"/wrtnEnterprise/faqs/{faqId}","method":"get","summary":"Get the complete detail for a single FAQ entry (wrtn_faqs table)","description":"Fetch the details of a single FAQ entry by specifying its unique identifier. Returns the full FAQ, including question, answer, authoring employee, related enterprise, category, publication status, and other information defined in the wrtn_faqs schema. All relationships, such as author and category, are joined for richer context in the response.\n\nAccess control: Moderators may retrieve any FAQ. Enterprise employees may access only FAQs within their own organization, as determined by their JWT session context and FAQ ownership. Security checks prevent access to FAQs outside the allowed scope. Business logic ensures returned entries are not soft-deleted and error handling provides clear 404 or forbidden errors as appropriate.\n\nThis endpoint works in concert with /faqs (list/search) to provide both browse and detailed FAQ information flows. Validation ensures the FAQ ID is a valid UUID and exists in the database. Errors for unknown or unauthorized FAQ IDs are handled in a business-compliant manner.","parameters":[{"name":"faqId","description":"The unique identifier of the target FAQ entry (wrtn_faqs.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full FAQ details, including question, answer, and relationships","typeName":"IWrtnFaq"},"authorizationType":null,"authorizationActor":null,"name":"at","prerequisites":[]},{"specification":"This operation creates a new FAQ entry in the system. It operates on the wrtn_faqs table, which stores frequently asked questions and their answers. Upon creation, the FAQ must be associated with the relevant category (wrtn_faq_categories), enterprise (wrtn_enterprises), and the employee creating the entry (wrtn_enterprise_employees), as specified in the schema. Uniqueness of the question within the enterprise must be enforced. This operation supports FAQ catalog expansion for onboarding, support, and compliance use cases.","path":"/wrtnEnterprise/employee/faqs","method":"post","description":"This endpoint allows an authenticated employee to create a new FAQ entry in the organization. The newly created FAQ will be associated to a specific FAQ category, a given enterprise, and the employee author. The request will require the FAQ's question, answer, display order, and information whether it was bulk-imported or created manually.\n\nUpon processing the request, the operation will verify uniqueness of the question within the enterprise. If a duplicate question exists under the same enterprise, the operation will return an error preventing creation. If input validation passes, it will persist a new FAQ row, updating full-text indexes for efficient search and support/knowledgebase access.\n\nSecurity policies enforce that only authenticated employees may use this endpoint; the actor is recorded for audit compliance for every creation event. The new FAQ will be immediately available for search and support flows if not soft-deleted. Any attempt to use a category or enterprise ID not linked to the employee's scope will be rejected for permission reasons.","summary":"Create a new FAQ entry (wrtn_faqs table) in the enterprise knowledgebase.","parameters":[],"requestBody":{"description":"Required information to create a new FAQ entry, including category, question, answer, display order, import flag, and associations to enterprise and employee.","typeName":"IWrtnFaq.ICreate"},"responseBody":{"description":"Detailed information of the created FAQ entry, with all relevant entity relations and attributes.","typeName":"IWrtnFaq"},"authorizationActors":["employee"],"name":"create","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing FAQ entry identified by faqId. It operates on the wrtn_faqs table, providing modification of FAQ details including question, answer, display order, and bulk_imported flag. This supports FAQ content maintenance and correction workflows for onboarding and support documentation.","path":"/wrtnEnterprise/employee/faqs/{faqId}","method":"put","description":"This endpoint enables an authenticated employee to update the contents of an existing FAQ identified by faqId. The update operation requires all information necessary for the FAQ: category association, question, answer, display order, and import method. The operation will verify that the employee has the necessary permissions to edit the target FAQ (must belong to the same enterprise, and be the author or have edit rights).\n\nIf an attempt is made to update the FAQ's question to a duplicate value (where another FAQ in the same enterprise already uses that question), an error will be returned. The operation fully updates the specified fields and will record the action in the audit log for compliance. FAQ updates are immediately reflected in search and knowledgebase operations.\n\nSoft-deleted FAQs cannot be updated; attempts to edit deleted records will return a not-found or conflict error. Security checks ensure only authorized employees can modify the target FAQ entry.","summary":"Update an existing FAQ (wrtn_faqs table) identified by faqId.","parameters":[{"name":"faqId","description":"Unique identifier of the FAQ entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated FAQ information to be fully replaced, including category, question, answer, display order, and creation method.","typeName":"IWrtnFaq.IUpdate"},"responseBody":{"description":"Detailed information of the updated FAQ entry after modification, with all attributes and relations.","typeName":"IWrtnFaq"},"authorizationActors":["employee"],"name":"update","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently removes a specific FAQ record from the system, targeting the wrtn_faqs table in the Prisma schema. The operation is designed for administratively deleting FAQ entries, ensuring that only authorized actors are permitted to perform deletion. The FAQ is identified via its unique FAQ ID (UUID), which is provided as a path parameter. The operation removes the FAQ entry directly from the database (hard delete), since the deleted_at field is present and soft deletion may be supported depending on business logic. All deletion actions are logged for audit purposes and are only available to actors with appropriate privileges, typically system moderators.","path":"/wrtnEnterprise/moderator/faqs/{faqId}","method":"delete","summary":"Permanently remove an FAQ record from wrtn_faqs table by its unique identifier","description":"This API operation permanently deletes an FAQ record specified by its unique FAQ ID from the wrtn_faqs table. The operation is typically used by administrative actors to manage the organizational or product knowledge base. Deletion is performed at the record level, and the operation ensures that the target FAQ is irreversibly removed from the FAQ listing unless soft deletion policies are enforced via the deleted_at column.\n\nSecurity is enforced so that only authorized actors, such as moderators or support staff, can delete FAQ entries. The operation requires the faqId path parameter, which uniquely identifies the FAQ record to be deleted. All such deletion actions are logged in the audit trail for traceability and compliance, supporting post-event investigation if required.\n\nThis operation relates to the wrtn_faqs table, and dependent entities such as support tickets or feature requests that reference this FAQ may need to handle the absence of the deleted FAQ record appropriately. Validation includes ensuring that the provided faqId is valid and that the FAQ exists prior to deletion. Unauthorized deletion attempts are rejected and logged.","parameters":[{"name":"faqId","description":"Unique identifier of the FAQ entry to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered, and sorted list of audit log records from the wrtn_audit_logs table. The search enables authorized moderators and employees to perform advanced audit queries for compliance, incident investigation, or regulatory review. The search criteria may include actor, session, event type, business object type, date range, and free-text filtering. Results are paginated to support high-volume audit trails and may be sorted by time, event_type, or other supported fields. This operation ensures that only authorized actors may access audit logs commensurate with their access level and organizational scope, as dictated by business and privacy requirements.","path":"/wrtnEnterprise/moderator/auditLogs","method":"patch","summary":"Search and retrieve paginated, filtered audit trail records from wrtn_audit_logs table","description":"This operation searches the wrtn_audit_logs table for audit trail records based on advanced query criteria submitted in the request body. It is essential for system compliance, investigation of security incidents, data access reviews, and general auditing. The request allows filtering by actor (moderator/employee), session, event type, affected business object, and temporal intervals. It also supports keyword search and result sorting. Results are returned as a paginated array of audit trail entries, including metadata needed for compliance and traceability.\n\nUser permissions are strictly enforced: moderators may access all system-wide audit logs within their authorized boundary, while employees are limited to accessing only records related to their own actions or within their authorized enterprise/team scope. To protect system integrity, excessive or unauthorized access attempts are themselves audited. This operation references the wrtn_audit_logs table, which maintains full details for every major business event within the WrtnEnterprise B2B SaaS system, and all returned audit log records adhere to detailed schema descriptions for compliance purposes.","parameters":[],"requestBody":{"description":"Search and pagination criteria for filtering audit log records according to compliance requirements","typeName":"IWrtnAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log records matching search criteria, including all required audit metadata, filter context, and pagination structure","typeName":"IPageIWrtnAuditLog"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered, and sorted list of audit log records from the wrtn_audit_logs table. The search enables authorized moderators and employees to perform advanced audit queries for compliance, incident investigation, or regulatory review. The search criteria may include actor, session, event type, business object type, date range, and free-text filtering. Results are paginated to support high-volume audit trails and may be sorted by time, event_type, or other supported fields. This operation ensures that only authorized actors may access audit logs commensurate with their access level and organizational scope, as dictated by business and privacy requirements.","path":"/wrtnEnterprise/employee/auditLogs","method":"patch","summary":"Search and retrieve paginated, filtered audit trail records from wrtn_audit_logs table","description":"This operation searches the wrtn_audit_logs table for audit trail records based on advanced query criteria submitted in the request body. It is essential for system compliance, investigation of security incidents, data access reviews, and general auditing. The request allows filtering by actor (moderator/employee), session, event type, affected business object, and temporal intervals. It also supports keyword search and result sorting. Results are returned as a paginated array of audit trail entries, including metadata needed for compliance and traceability.\n\nUser permissions are strictly enforced: moderators may access all system-wide audit logs within their authorized boundary, while employees are limited to accessing only records related to their own actions or within their authorized enterprise/team scope. To protect system integrity, excessive or unauthorized access attempts are themselves audited. This operation references the wrtn_audit_logs table, which maintains full details for every major business event within the WrtnEnterprise B2B SaaS system, and all returned audit log records adhere to detailed schema descriptions for compliance purposes.","parameters":[],"requestBody":{"description":"Search and pagination criteria for filtering audit log records according to compliance requirements","typeName":"IWrtnAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log records matching search criteria, including all required audit metadata, filter context, and pagination structure","typeName":"IPageIWrtnAuditLog"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed audit log information for a single business event identified by its unique auditLogId. It queries the wrtn_audit_logs table, returning the full set of audit information including actor context (moderator or employee), session IDs, event type, business object context, payload with before-and-after state, error codes/messages if relevant, and rich time-stamp data. The operation supports compliance, incident investigation, and traceability in alignment with regulatory requirements. Only data that the requesting actor is permitted to view (based on moderator/employee context) is returned.","path":"/wrtnEnterprise/auditLogs/{auditLogId}","method":"get","summary":"Retrieve a single audit log record (wrtn_audit_logs table) by ID, including all event and actor context.","description":"This API operation allows retrieval of a single audit log entry, identified by the auditLogId path parameter. It fetches all details from the wrtn_audit_logs table, including the actor (moderator or employee), session context, event type, root business object, complete payload with pre/post states, any error codes and messages, and audit trail timestamps for creation, update, and (if present) deletion.\n\nThe operation validates access control based on the authenticated user's actor type. Moderators may only access audit logs within their allowed enterprise or system support scope; employees may access only audit logs connected to their own actions, teams, or managed resources. If access is denied, the system records the attempt in the audit trail and returns a permission error. If the specified audit log does not exist or the user lacks permission, the API returns a standardized not-found or forbidden error response.\n\nThis operation is essential for compliance, security incident reviews, and business process forensics. Its results are suitable for regulatory and audit reporting workflows, as mandated by business and legal requirements.","parameters":[{"name":"auditLogId","description":"Unique identifier for the audit log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested audit log entry, including actor/session info, event type, business object reference, audit payload, and timestamps.","typeName":"IWrtnAuditLog"},"authorizationType":null,"authorizationActor":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered list of billing invoices for the calling actor's permitted enterprises. It operates on the wrtn_billing_invoices table and supports advanced filtering, range querying (period_start, period_end), status filtering, and sorting options. Paging and ordering are always supported. Moderators may access all enterprise invoice records; master employees see their organization's invoices; managers and members may see limited or personal invoice scopes according to business rules.","path":"/wrtnEnterprise/billing/invoices","method":"patch","summary":"Retrieve a paginated, filtered list of billing invoices (wrtn_billing_invoices table) based on search parameters.","description":"This API operation provides an advanced search and retrieval interface for billing invoices from the wrtn_billing_invoices table. It supports a rich set of search parameters including enterprise ID, invoice status, period start/end, amount thresholds, and pagination/sorting options. Only invoices the actor is authorized to view (by moderator, master, or appropriate employee role) are included in the result.\n\nThe response returns a paginated list of invoice summaries, each including enterprise reference, invoice period, status, amounts, timestamps, and keys suitable for dashboard usage. Users may apply sorting and advanced filters for business analysis, reconciliation, and audit. Sensitive invoice details are visible only to actors with the necessary permissions. If access is unauthorized for some invoices, they are filtered from the result; the system never leaks out-of-scope records. All access is audit logged for traceability under the enterprise billing policy.","parameters":[],"requestBody":{"description":"Search and pagination criteria for filtering billing invoices, such as enterprise, status, date ranges, and sorting.","typeName":"IWrtnBillingInvoice.IRequest"},"responseBody":{"description":"Paginated result set of billing invoice summary information for dashboard and reconciliation use.","typeName":"IPageIWrtnBillingInvoice.ISummary"},"authorizationType":null,"authorizationActor":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves the details of a specific billing invoice using its unique identifier. It accesses the wrtn_billing_invoices table from the Prisma schema and returns comprehensive invoice information, including period, total amount, status, payment, and delivery details. The purpose is to enable authenticated actors (moderators or master employees) to view invoice records for accounting reconciliation, audit, or dispute workflows. The operation ensures every field comes directly from the database schema, without assuming extraneous properties.","path":"/wrtnEnterprise/moderator/billing/invoices/{invoiceId}","method":"get","summary":"Retrieve the detailed billing invoice record by invoiceId for viewing, audit, or reconciliation (wrtn_billing_invoices).","description":"Retrieve an invoice record corresponding to a specific invoiceId. This operation allows moderators (internal administrators) or entitled master employees of a customer enterprise to view all attributes of the invoice including billing period, status, total amount, currency, due date, and payment history as recorded in the wrtn_billing_invoices table. All invoice details—including delivery, status history, and associated payments—are included per data model for compliance and business workflow requirements.\n\nSecurity considerations: Only authorized moderators and relevant master employees have access, as billing records often contain sensitive financial details. Attempts to access an invoice outside actor scope or without sufficient privilege are denied and audit logged.\n\nThe response structure maps exactly to the Prisma model columns, including all scalar attributes and related collections (e.g., invoice items and delivery records), with appropriate relation-mapping according to API DTO guidelines. Error scenarios include not-found (404) for nonexistent invoiceId and 403 for unauthorized access. This operation is the foundation for viewing invoice details prior to payment/approval or during financial reconciliation.","parameters":[{"name":"invoiceId","description":"The unique identifier of the invoice to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete invoice details including all scalar properties, relations (items, payments, deliveries), and status history.","typeName":"IWrtnBillingInvoice"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a specific billing invoice using its unique identifier. It accesses the wrtn_billing_invoices table from the Prisma schema and returns comprehensive invoice information, including period, total amount, status, payment, and delivery details. The purpose is to enable authenticated actors (moderators or master employees) to view invoice records for accounting reconciliation, audit, or dispute workflows. The operation ensures every field comes directly from the database schema, without assuming extraneous properties.","path":"/wrtnEnterprise/employee/billing/invoices/{invoiceId}","method":"get","summary":"Retrieve the detailed billing invoice record by invoiceId for viewing, audit, or reconciliation (wrtn_billing_invoices).","description":"Retrieve an invoice record corresponding to a specific invoiceId. This operation allows moderators (internal administrators) or entitled master employees of a customer enterprise to view all attributes of the invoice including billing period, status, total amount, currency, due date, and payment history as recorded in the wrtn_billing_invoices table. All invoice details—including delivery, status history, and associated payments—are included per data model for compliance and business workflow requirements.\n\nSecurity considerations: Only authorized moderators and relevant master employees have access, as billing records often contain sensitive financial details. Attempts to access an invoice outside actor scope or without sufficient privilege are denied and audit logged.\n\nThe response structure maps exactly to the Prisma model columns, including all scalar attributes and related collections (e.g., invoice items and delivery records), with appropriate relation-mapping according to API DTO guidelines. Error scenarios include not-found (404) for nonexistent invoiceId and 403 for unauthorized access. This operation is the foundation for viewing invoice details prior to payment/approval or during financial reconciliation.","parameters":[{"name":"invoiceId","description":"The unique identifier of the invoice to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete invoice details including all scalar properties, relations (items, payments, deliveries), and status history.","typeName":"IWrtnBillingInvoice"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new enterprise billing invoice. It writes a new invoice row into the wrtn_billing_invoices table with all required properties including target enterprise, billing period, total amount, status, and associated payment/delivery. The operation validates that only privileged actors (moderators) can create invoices, reflecting strict control over postpaid billing. The invoice record is created atomically, and the operation supports downstream reconciliation, delivery, dispute, and adjustment workflows as per Wrtn enterprise B2B requirements.","path":"/wrtnEnterprise/moderator/billing/invoices","method":"post","summary":"Create a billing invoice for an enterprise with specified billing period, scope, and initial amount (wrtn_billing_invoices).","description":"Create a new invoice for an enterprise customer with a specified billing period. The operation writes a record into wrtn_billing_invoices, capturing the enterprise, period start/end, total amount (initially, may be updated as items are finalized), current status, and supporting billing workflow metadata. Only moderators are authorized to create invoices as this is an administrative platform action—not a customer self-service flow.\n\nAll data is validated against the schema: period boundaries, non-negative amounts, currency, and status. On success, the resulting invoice object includes all persisted fields and modelled relations (items, payments, delivery, credits as mapped). The operation is atomic and fully auditable. Errors include violation of input constraints, unauthorized actor attempts, or conflicting duplicate invoice for the same billing period.\n\nModerators are expected to use this endpoint as part of closing out a postpaid billing cycle, prior to payment/collection and formal delivery to enterprise contacts.","parameters":[],"requestBody":{"description":"New invoice creation information, including enterprise, period, total amount, and status.","typeName":"IWrtnBillingInvoice.ICreate"},"responseBody":{"description":"Created invoice record with all persisted details and related collections.","typeName":"IWrtnBillingInvoice"},"authorizationActors":["moderator"],"name":"create","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates (modifies) a specific billing invoice entity identified by its unique ID. It is associated with the wrtn_billing_invoices table in the Prisma schema. The operation allows an authorized moderator to make modifications to invoice attributes such as period, status, due date, and total amount, according to current business rules set for enterprise postpaid B2B billing. All changes are fully auditable, with edits restricted after payment or dispute states per business logic. Field validation and permission enforcement are handled in business logic using the properties actually present in the wrtn_billing_invoices model. The operation rejects updates if the given invoice is missing, canceled, disputed, or in a non-editable state, returning appropriate error messages.","description":"Update the details of a billing invoice by its unique invoiceId. This operation is typically used by privileged actors (moderators) to correct, adjust, or update invoice details for an enterprise after initial generation and before payment/closure. Changes to the period window, total amount, status, and due/paid/cancelled/disputed timestamps are allowed in accordance with the business rules for postpaid SaaS billing. The update is only available if the invoice status is within modifiable states (e.g., draft or issued) and prohibited if the invoice is paid, overdue, disputed, or canceled. All attempted updates are logged for compliance, and any unauthorized or invalid attempts (such as modifying a finalized invoice) result in a business-reasoned, user-facing error. Field-level validation ensures correct date, amount, and status constraints as per wrtn_billing_invoices schema comments. Related business logic prevents duplication, accidental status regressions, or damaging corrections. This endpoint should be used with caution, and all changes are visible to finance and compliance audit logs.\n\nThis operation connects to the wrtn_billing_invoices table, modifying only the properties defined in the schema and never altering immutable fields (such as invoice ID or enterprise link). Moderators using this endpoint must adhere to permission boundaries and company policy.","summary":"Update an existing billing invoice by invoiceId (wrtn_billing_invoices table)","parameters":[{"name":"invoiceId","description":"Unique identifier of the target invoice to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Invoice update information per modifiable fields. Must contain only updatable scalar fields as defined by wrtn_billing_invoices schema.","typeName":"IWrtnBillingInvoice.IUpdate"},"responseBody":{"description":"The updated invoice record after applying requested changes, including all compliant updates and full audit details as enforced by wrtn_billing_invoices table structure.","typeName":"IWrtnBillingInvoice"},"authorizationActors":["moderator"],"name":"update","path":"/wrtnEnterprise/moderator/billing/invoices/{invoiceId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes (erases) a billing invoice entity from the system based on its unique invoiceId. It directly operates on the wrtn_billing_invoices table as defined in the Prisma schema, removing all associated line items, payment links, and audit trails in accordance with hard-delete business logic (since soft delete is present via deleted_at). Only privileged actors (moderators) are authorized to perform this operation, and it is strictly prohibited for invoices in paid, disputed, or finalized states. The operation ensures that business integrity, compliance, and financial audit requirements are maintained by rejecting deletions of critical financial records or those with existing payments. The deletion is recorded in the system audit logs for traceability, with all irreversible actions disclosed in user feedback messages.","description":"Permanently remove a billing invoice and all its related subordinate records from the system, using the invoice's unique invoiceId as key. This operation is only accessible to moderator actors, reflecting the need for strict financial data control in enterprise B2B SaaS environments. The endpoint checks invoice status, prevents irreversible deletion of critical or paid/disputed invoices, and logs every erase attempt for compliance review. If the invoice is not found or is not eligible for deletion according to current policy (e.g., has payments applied, is in final status), the operation returns a detailed business error and does not proceed. The wrtn_billing_invoices table's deleted_at field is used for soft deletion; records are kept for audit, but hidden from active finance/reporting workflows. Attempting to erase a non-existent or protected invoice yields a user-facing error explaining the business reason for refusal. This ensures integrity across enterprise financial and compliance data as required by B2B postpaid billing standards.\n\nNever use this operation for batch or irreversible mass deletions; each invocation is individually logged and must pass all business rule checks. Owners should verify invoice status and downstream dependencies before issuing an erase command to avoid accidental data loss.","summary":"Permanently delete (soft delete) an invoice (wrtn_billing_invoices table) identified by invoiceId","parameters":[{"name":"invoiceId","description":"Unique identifier of the target invoice to be erased (soft-delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/billing/invoices/{invoiceId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of billing usage events for enterprises, teams, or individual employees. It is based on the wrtn_billing_usage_events table, which records every billable action in the system (e.g., chat, procedure, file, notification, support, analytics). The operation supports advanced searching, filtering (by enterprise, team, employee, category, period, and source), and sorting for accurate reconciliation, financial reporting, and compliance auditing. The response provides a paginated collection of usage events, enabling enterprise billing contacts, moderators, and financial analysts to track real-time and historical usage and cost breakdowns for any supported date range and aggregation. Pagination and query parameters allow large-scale enterprise customers to navigate high-volume billing activity with ease.","path":"/wrtnEnterprise/moderator/billing/usage-events","method":"patch","summary":"Search and paginate over wrtn_billing_usage_events for enterprise billing and cost analysis","description":"Query a paginated, filterable list of all billing usage events incurred by an enterprise, team, or employee. Each row corresponds to a single atomic billable action (such as chat token consumption, procedure execution, storage charge, or support event) and includes organization, team, and employee attributes, the billing category (e.g., chat, procedure, file), the source event type and reference, token usage, amount charged, and timestamp of occurrence. \n\nSecurity: Return results in accordance with the authenticated user's actor, limiting access to only those usage events within their billing permission scope (see Permission Matrix). Moderators may search all enterprises' usage data; employees (master, manager, member) are limited according to their role-based access (master: full enterprise, manager: team, member: personal only). Query attempts for out-of-scope data are explicitly denied and audit-logged. \n\nRelationship: Each usage event references its associated enterprise, team, and (optionally) employee, as well as the source category and referenced entity. The API composes these references into structured objects for clarity (see IWrtnBillingUsageEvent and ISummary variants). \n\nSupports advanced filtering with date range, category, token thresholds, and entity-level restriction. Pagination must be implemented for performant handling of high-volume billing records in large enterprise tenants. \n\nResponse includes summary fields for key billing and usage metrics, supporting export and drill-down for financial operations, compliance, and audit. Errors for permission violation, bad query, or system failure return actionable business explanations with error codes.","parameters":[],"requestBody":{"description":"Request body for searching and paginating billing usage events with filters such as date range, enterprise, team, employee, category, and token/cost thresholds.","typeName":"IWrtnBillingUsageEvent.IRequest"},"responseBody":{"description":"Paginated list of billing usage event summaries matching filter/search criteria, including organization, team, employee, category, cost, tokens, timestamp, and source reference.","typeName":"IPageIWrtnBillingUsageEvent.ISummary"},"authorizationActor":"moderator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of billing usage events for enterprises, teams, or individual employees. It is based on the wrtn_billing_usage_events table, which records every billable action in the system (e.g., chat, procedure, file, notification, support, analytics). The operation supports advanced searching, filtering (by enterprise, team, employee, category, period, and source), and sorting for accurate reconciliation, financial reporting, and compliance auditing. The response provides a paginated collection of usage events, enabling enterprise billing contacts, moderators, and financial analysts to track real-time and historical usage and cost breakdowns for any supported date range and aggregation. Pagination and query parameters allow large-scale enterprise customers to navigate high-volume billing activity with ease.","path":"/wrtnEnterprise/employee/billing/usage-events","method":"patch","summary":"Search and paginate over wrtn_billing_usage_events for enterprise billing and cost analysis","description":"Query a paginated, filterable list of all billing usage events incurred by an enterprise, team, or employee. Each row corresponds to a single atomic billable action (such as chat token consumption, procedure execution, storage charge, or support event) and includes organization, team, and employee attributes, the billing category (e.g., chat, procedure, file), the source event type and reference, token usage, amount charged, and timestamp of occurrence. \n\nSecurity: Return results in accordance with the authenticated user's actor, limiting access to only those usage events within their billing permission scope (see Permission Matrix). Moderators may search all enterprises' usage data; employees (master, manager, member) are limited according to their role-based access (master: full enterprise, manager: team, member: personal only). Query attempts for out-of-scope data are explicitly denied and audit-logged. \n\nRelationship: Each usage event references its associated enterprise, team, and (optionally) employee, as well as the source category and referenced entity. The API composes these references into structured objects for clarity (see IWrtnBillingUsageEvent and ISummary variants). \n\nSupports advanced filtering with date range, category, token thresholds, and entity-level restriction. Pagination must be implemented for performant handling of high-volume billing records in large enterprise tenants. \n\nResponse includes summary fields for key billing and usage metrics, supporting export and drill-down for financial operations, compliance, and audit. Errors for permission violation, bad query, or system failure return actionable business explanations with error codes.","parameters":[],"requestBody":{"description":"Request body for searching and paginating billing usage events with filters such as date range, enterprise, team, employee, category, and token/cost thresholds.","typeName":"IWrtnBillingUsageEvent.IRequest"},"responseBody":{"description":"Paginated list of billing usage event summaries matching filter/search criteria, including organization, team, employee, category, cost, tokens, timestamp, and source reference.","typeName":"IPageIWrtnBillingUsageEvent.ISummary"},"authorizationActor":"employee","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves a single, detailed billing usage event from the wrtn_billing_usage_events table by its unique usage event ID. It provides full billable event context, including organization, team, employee, category, source reference, token accounting, billing amount, and occurrence details, supporting audit, dispute, or financial drill-down. This endpoint supports strict authorization boundaries: only moderators and employees within their scope may access the event. The operation surfaces all reference relationships (enterprise, team, employee, and the source object) for the most accurate cost lineage and compliance reporting.","path":"/wrtnEnterprise/moderator/billing/usage-events/{usageEventId}","method":"get","summary":"Get detailed information for a single billing usage event by ID","description":"Retrieve the full detail of a billing usage event identified by its unique usageEventId. This operation returns all information originally recorded at event creation, including enterprise, optional team and employee associations, category (e.g., chat, procedure, file), source reference, token usage counts, billing amount, and timestamps. \n\nAuthorization: Accessible only to authorized moderators or employees within their assigned enterprise/team/personal billing scope. Requests for out-of-scope events are denied with an actionable error and are audit-logged for compliance. \n\nRelationship: The response embeds related organization, team, employee, and source object references for comprehensive traceability. This is essential for financial operations, billing review, compliance checks, or dispute resolution workflows. \n\nRobust error handling returns clear detail for not-found, unauthorized, or system error conditions, with specific error codes and business context.","parameters":[{"name":"usageEventId","description":"Unique identifier of the billing usage event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed billing usage event information including all entity, category, token, cost, and reference source context.","typeName":"IWrtnBillingUsageEvent"},"authorizationActor":"moderator","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves a single, detailed billing usage event from the wrtn_billing_usage_events table by its unique usage event ID. It provides full billable event context, including organization, team, employee, category, source reference, token accounting, billing amount, and occurrence details, supporting audit, dispute, or financial drill-down. This endpoint supports strict authorization boundaries: only moderators and employees within their scope may access the event. The operation surfaces all reference relationships (enterprise, team, employee, and the source object) for the most accurate cost lineage and compliance reporting.","path":"/wrtnEnterprise/employee/billing/usage-events/{usageEventId}","method":"get","summary":"Get detailed information for a single billing usage event by ID","description":"Retrieve the full detail of a billing usage event identified by its unique usageEventId. This operation returns all information originally recorded at event creation, including enterprise, optional team and employee associations, category (e.g., chat, procedure, file), source reference, token usage counts, billing amount, and timestamps. \n\nAuthorization: Accessible only to authorized moderators or employees within their assigned enterprise/team/personal billing scope. Requests for out-of-scope events are denied with an actionable error and are audit-logged for compliance. \n\nRelationship: The response embeds related organization, team, employee, and source object references for comprehensive traceability. This is essential for financial operations, billing review, compliance checks, or dispute resolution workflows. \n\nRobust error handling returns clear detail for not-found, unauthorized, or system error conditions, with specific error codes and business context.","parameters":[{"name":"usageEventId","description":"Unique identifier of the billing usage event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed billing usage event information including all entity, category, token, cost, and reference source context.","typeName":"IWrtnBillingUsageEvent"},"authorizationActor":"employee","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of billing payment records for the WrtnEnterprise B2B SaaS platform. It enables authorized users to search, filter, and sort payment attempts and settlement records across the system. The underlying table is wrtn_billing_payments, which stores payment attempts against invoices, including payment method, amount, actor, status, and timestamps. This API supports complex queries by date, method, status, invoice or enterprise, and user, providing visibility into financial settlements, payment statuses, and payment audit trails. It is fundamental for moderators to review, audit, and reconcile all payment flows for accounting and compliance. The response structure supports summary information optimized for lists and dashboards.","path":"/wrtnEnterprise/moderator/billing/payments","method":"patch","summary":"Search and list billing payments with advanced filtering, pagination, and sorting (wrtn_billing_payments).","description":"Retrieve a paginated, filterable list of all billing payment records in the system. This endpoint is used by moderator (internal admin) actors to review postpaid, usage-based payment events across all enterprise clients. It incorporates full audit metadata showing which moderator or automated process initiated or approved each payment, as well as invoice association and detailed payment status (pending, completed, failed, refunded, disputed, cancelled, etc). \n\nSecurity considerations restrict access to moderators only, as payment and accounting data are globally sensitive. This operation references the wrtn_billing_payments table, incorporating relationships to invoices, enterprises, moderators, and payment events. Supported filters include invoice, enterprise, method, status, period, and payment actor, and pagination and sorting options are provided for effective dashboard and reporting workflows. Responses use the IWrtnBillingPayment.ISummary schema, should be optimized for list/dash display, and ensures no exposure of sensitive payment reference details to unauthorized users.\n\nTypical use cases include accounting reconciliation, compliance audit, dashboard analytics, and payment operations monitoring. The operation supports error scenarios such as invalid filter criteria or lack of moderator privileges, returning clear business errors as needed. This is a read-only endpoint and does not permit payment creation or status mutation.","parameters":[],"requestBody":{"description":"Search/filter criteria and pagination parameters for payment listing (wrtn_billing_payments).","typeName":"IWrtnBillingPayment.IRequest"},"responseBody":{"description":"Paginated list of payment summary information (wrtn_billing_payments) matching search criteria and filters.","typeName":"IPageIWrtnBillingPayment.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves the detail information for a single billing payment event from the wrtn_billing_payments table. It allows an authorized moderator to review all attributes of a specific payment record, including complete audit trail, settlement references, actor/context, financial details, settlement status, and timestamps. The endpoint is essential for financial audit, payment dispute resolution, compliance reviews, and administrative reconciliation. The response provides the full details of the payment, including links to invoice, enterprise, moderator actor, and external settlement reference if permitted.","path":"/wrtnEnterprise/moderator/billing/payments/{paymentId}","method":"get","summary":"Fetch detailed information for a specific billing payment record (wrtn_billing_payments).","description":"Retrieve comprehensive details for a specific billing payment event by its unique identifier (UUID). This endpoint enables a moderator to see all available fields from the wrtn_billing_payments table, including invoice association, enterprise, moderator actor, payment method, payment status, amount, timestamps, and settlement outcomes. Audit metadata provides a full history for regulatory or accounting purposes, and external reference fields are provided if user has sufficient privileges.\n\nSecurity ensures only moderator actors may access this sensitive financial event data. The operation validates the paymentId path parameter to ensure it is a valid UUID and exists; otherwise it returns a not found error or access denial message. This endpoint supports compliance investigations, payment reconciliation, and invoice status workflows. It is a read-only operation, never exposing sensitive payment details outside authorized moderator actors, and returns data using the IWrtnBillingPayment interface.","parameters":[{"name":"paymentId","description":"Unique identifier for the target payment (UUID from wrtn_billing_payments.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail record for the billing payment (wrtn_billing_payments).","typeName":"IWrtnBillingPayment"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation allows the creation of a new billing payment record for an enterprise within the wrtnEnterprise B2B SaaS platform. It operates on the wrtn_billing_payments table and enables authorized actors to record payment attempts relating to one or more invoices. The operation includes recording payment method, amount, recipient entity, optional linkage to invoice, and other audit-traceable details. As per schema, the invoice field is optional to support cases of unallocated or advance-credit payments. The payment method and status must reflect one of the allowed strings in the database. Sensitive business flows such as refunds, corrections, or multi-invoice payments must be handled by creating specific payment records per the business logic and compliance rules. Only moderators (internal admin) are allowed to perform this operation as specified in business requirements.","description":"Create a new record for an enterprise's billing payment attempt. This operation records critical audit and reconciliation parameters, including payment amount, method, and status. If allocating a payment to a specific invoice, the wrtn_billing_invoice_id is provided; otherwise the payment is tracked as an unallocated or advance payment. Payment methods and status codes are validated against allowed enum values in the schema. All payment events are globally auditable and restricted to moderator actors, as invoice management is not exposed to enterprise employees per business requirements.\n\nModerator actor must specify the enterprise being paid, with optional invoice and external reference context. Once the payment event is recorded, its unique identifier and relationship to invoice (if any) is persisted for downstream settlement, reporting, and audit. On creation, status should reflect the initial state of the payment (e.g., 'pending', 'completed', 'failed').\n\nInvalid or duplicate payment_reference values will trigger an error as per schema uniqueness constraints. All critical flows, such as refunds, corrections, credits, or reversals, should use this same endpoint with appropriate category and status codes. Only authorized moderators are permitted to access this operation as employees are not able to create payment events in this system.","summary":"Create a new enterprise billing payment record (moderator only) in wrtn_billing_payments table.","parameters":[],"requestBody":{"description":"Billing payment creation details, including enterprise, optional invoice, amount, method, reference, and status.","typeName":"IWrtnBillingPayment.ICreate"},"responseBody":{"description":"Created billing payment record with invoice, audit, and payment status context.","typeName":"IWrtnBillingPayment"},"authorizationActors":["moderator"],"name":"create","path":"/wrtnEnterprise/moderator/billing/payments","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing enterprise billing payment record in the wrtnEnterprise B2B SaaS platform, targeting the wrtn_billing_payments table. Used by authorized moderators to record status changes (such as completed, failed, refunded, or disputed), update payment method or reference, or correct associated invoice. All changes are subject to audit tracing. Employees are not permitted to update billing payment records. The primary key for the operation is the paymentId, passed as a path parameter. Business logic ensures the payment_reference remains unique and status/method values are checked against allowed enums. Only privileged moderator actors may perform this update operation. The update process does not allow changing the payment amount; any corrections or reversals must be handled by separate payment events as per accounting best practices.","description":"Update an existing billing payment record, such as recording a change in payment status (e.g., marking as completed, failed, or refunded), updating the payment method or reference, or associating another invoice. The wrtn_billing_payments table maintains strict audit and compliance requirements; thus, all updates are logged with full before/after snapshots. Only moderators are authorized to perform updates, and employees cannot modify payment records.\n\nThe paymentId path parameter must be a valid UUID referencing an existing payment event in the database. All updated fields must satisfy uniqueness and business validation rules as in creation. Attempting to set a duplicate payment_reference or an invalid method/status value will result in schema validation or database constraint errors.\n\nCritical business corrections requiring amount adjustment must be handled using separate payment/correction events, not by editing existing records. This operation only supports edits to method, status, reference, or invoice association. Proper audit emission and compliance checks are applied at each state change.","summary":"Update an existing enterprise billing payment record (moderator only) by paymentId in wrtn_billing_payments.","parameters":[{"name":"paymentId","description":"UUID of the billing payment record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the enterprise billing payment (method, status, reference, invoice). Amount cannot be changed using this operation.","typeName":"IWrtnBillingPayment.IUpdate"},"responseBody":{"description":"Updated billing payment record reflecting the requested changes and current status/context.","typeName":"IWrtnBillingPayment"},"authorizationActors":["moderator"],"name":"update","path":"/wrtnEnterprise/moderator/billing/payments/{paymentId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a billing payment record from the system. It operates on the wrtn_billing_payments table and will remove the payment identified by the paymentId path parameter. Deletion is a soft delete using the deleted_at column as per the schema definition. Only moderator actors are authorized to erase payments due to the financial and compliance impact. This operation should fully audit trail the soft deletion action and perform all business rule checks ensuring that the payment can be safely marked as deleted in accordance with enterprise and accounting policy.","description":"Soft delete (mark as deleted) a specific payment record from the billing system using its unique paymentId. This endpoint ensures that only authorized moderator actors may erase billing payment records due to the financial and compliance risks. The operation accesses and manipulates the wrtn_billing_payments table. It sets the deleted_at column to the current timestamp, marking the record as deleted and retaining the payment record for audit purposes and compliance history. All actions are audit-logged, and deletion will fail if the payment is already reconciled to immutable invoices or regulatory policy prohibits erasure. Related APIs include methods for payment listing, detail retrieval, and invoice reconciliation. Only internal moderator users may invoke this function.","summary":"Soft delete a billing payment (wrtn_billing_payments) by its unique paymentId for moderator actors (marks as deleted for audit/compliance retention).","parameters":[{"name":"paymentId","description":"Unique identifier of the billing payment to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/billing/payments/{paymentId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows billing actors (moderators) to retrieve a paginated, searchable, and filterable list of credit events in the accounting system. The operation reads from the wrtn_billing_credits database table, supporting advanced business queries by date, status, category, assigned moderator, enterprise, or related invoice. It supports compliance export and financial review workflows, and provides summary or detail views of credit records. Only moderator actors are authorized for complete credits listing, as credits represent financial adjustments subject to audit and approval.","description":"Retrieve a filtered and paginated list of billing credits (credit events/adjustments) in the system. The credit listing allows moderators to query the wrtn_billing_credits table by various criteria, including date range, enterprise, credit category, issued moderator, or allocation status. The endpoint is optimized for large-scale accounting reviews, with comprehensive pagination and quick searches to support financial audits, compliance reviews, and accounting closure. Only moderators can list all credits due to the sensitive nature of financial adjustments. Summary information for each billing credit event is returned, including enterprise, amount, category, reason, status, assigned moderator, invoice linkage, and date fields. Actions are traceable in the audit log, and export capability is typically connected to this listing API for reporting.","summary":"List, search, and filter wrtn_billing_credits for moderator actors (paginated listing).","parameters":[],"requestBody":{"description":"Query and filter options for listing billing credits (e.g., date range, category, status, enterprise, moderator, invoice linkage, and pagination parameters).","typeName":"IWrtnBillingCredit.IRequest"},"responseBody":{"description":"Paginated list of summary billing credits matching the given filters, suitable for financial audit and reporting.","typeName":"IPageIWrtnBillingCredit.ISummary"},"authorizationActors":["moderator"],"name":"index","path":"/wrtnEnterprise/moderator/billing/credits","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a single billing credit. It is based on the wrtn_billing_credits table, which stores credits applied to an enterprise's account for reasons such as refunds, promotions, manual adjustments, and dispute outcomes. Each credit is linked to an enterprise, may be associated with an invoice or moderator, and contains metadata such as amount, category, issue date, and descriptive reason.\n\nThe purpose of this endpoint is to provide detailed information about a specific credit record, supporting use cases such as invoice reconciliation, credit history review, and billing dispute analysis. The operation enables authorized actors, such as moderators and masters of enterprises, to retrieve all available metadata for the requested credit. It is essential for transparent, traceable financial operations and effective customer support regarding postpaid billing and credit events.","description":"Retrieve detailed information about a billing credit for an enterprise. This API operation accesses the wrtn_billing_credits database table to fetch a single credit entity by its unique identifier (creditId). The response includes all underlying column data as well as related enterprise, invoice, and moderator linkage, if any, following the DTO mapping strategy described in the requirements.\n\nThe endpoint enforces billing scope and permission: only authorized financial actors (such as moderators and master employees) may access full details for the credit, and cross-enterprise access is strictly forbidden. Security measures prevent access to credits for other enterprises, with appropriate business errors returned when attempted.\n\nThis operation is typically used in postpaid billing dashboards, audits, invoice reviews, and customer support workflows. It supports transparency in billing, enables financial dispute investigation, and provides a foundational trace for enterprise account management.","summary":"Retrieve detailed information for a specific enterprise billing credit.","parameters":[{"name":"creditId","description":"Unique identifier of the target enterprise billing credit record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed enterprise billing credit record with all metadata and relevant object relationships, including linked enterprise, invoice, moderator, and DTO-mapped structure as per system requirements.","typeName":"IWrtnBillingCredit"},"authorizationActors":["moderator","employee"],"name":"at","path":"/wrtnEnterprise/moderator/billing/credits/{creditId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a single billing credit. It is based on the wrtn_billing_credits table, which stores credits applied to an enterprise's account for reasons such as refunds, promotions, manual adjustments, and dispute outcomes. Each credit is linked to an enterprise, may be associated with an invoice or moderator, and contains metadata such as amount, category, issue date, and descriptive reason.\n\nThe purpose of this endpoint is to provide detailed information about a specific credit record, supporting use cases such as invoice reconciliation, credit history review, and billing dispute analysis. The operation enables authorized actors, such as moderators and masters of enterprises, to retrieve all available metadata for the requested credit. It is essential for transparent, traceable financial operations and effective customer support regarding postpaid billing and credit events.","description":"Retrieve detailed information about a billing credit for an enterprise. This API operation accesses the wrtn_billing_credits database table to fetch a single credit entity by its unique identifier (creditId). The response includes all underlying column data as well as related enterprise, invoice, and moderator linkage, if any, following the DTO mapping strategy described in the requirements.\n\nThe endpoint enforces billing scope and permission: only authorized financial actors (such as moderators and master employees) may access full details for the credit, and cross-enterprise access is strictly forbidden. Security measures prevent access to credits for other enterprises, with appropriate business errors returned when attempted.\n\nThis operation is typically used in postpaid billing dashboards, audits, invoice reviews, and customer support workflows. It supports transparency in billing, enables financial dispute investigation, and provides a foundational trace for enterprise account management.","summary":"Retrieve detailed information for a specific enterprise billing credit.","parameters":[{"name":"creditId","description":"Unique identifier of the target enterprise billing credit record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed enterprise billing credit record with all metadata and relevant object relationships, including linked enterprise, invoice, moderator, and DTO-mapped structure as per system requirements.","typeName":"IWrtnBillingCredit"},"authorizationActors":["moderator","employee"],"name":"at","path":"/wrtnEnterprise/employee/billing/credits/{creditId}","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates (posts) a new billing credit for an enterprise, adding a positive credit to their account for reasons such as manual adjustment, refund, promotional offer, or overpayment resolution. It operates on the wrtn_billing_credits table and is strictly restricted to authorized actors (moderator and master employees). Creation of a credit requires specifying the enterprise, the credit amount, the category, and a human-readable reason. Optionally, the credit may be associated with a particular invoice (for direct offset), or posted in general for future invoice application.\n\nThis endpoint ensures auditability and compliance by recording the full context (category, reason, actor identity) and enforcing all business rules regarding credits. Security is enforced through permission checks and by requiring all input fields to pass validation (e.g., positive credit amount, valid enterprise, permitted category). All operations are fully audit-logged for financial traceability.","description":"Post a new billing credit for an enterprise. This operation allows a moderator or master employee to record a credit amount in favor of an enterprise's account, specifying the enterpriseId, credit amount, category (such as \"refund\", \"overpayment\", \"promo\", or \"manual\"), and descriptive reason. Optionally, the credit can be linked to a particular invoice if it is intended to offset that invoice directly.\n\nPermission checks guarantee only authorized actors may create billing credits. The operation enforces input validation rules: credit amount must be positive, enterpriseId and optional invoiceId must exist and be valid, the category must be among allowed types, and a meaningful reason must be provided for auditing and customer transparency. Upon successful creation, the API returns the full newly created credit record with all accompanying metadata, supporting immediate dashboard update, invoice reconciliation, and further financial analysis.","summary":"Create (post) a new billing credit for a specified enterprise account.","parameters":[],"requestBody":{"description":"Information required to create a billing credit: enterprise reference, amount, category, reason, and optional linkage to a specific invoice.","typeName":"IWrtnBillingCredit.ICreate"},"responseBody":{"description":"Enterprise billing credit record created, with all metadata and references, mapped to DTO per output structure requirements.","typeName":"IWrtnBillingCredit"},"authorizationActors":["moderator","employee"],"name":"create","path":"/wrtnEnterprise/moderator/billing/credits","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates (posts) a new billing credit for an enterprise, adding a positive credit to their account for reasons such as manual adjustment, refund, promotional offer, or overpayment resolution. It operates on the wrtn_billing_credits table and is strictly restricted to authorized actors (moderator and master employees). Creation of a credit requires specifying the enterprise, the credit amount, the category, and a human-readable reason. Optionally, the credit may be associated with a particular invoice (for direct offset), or posted in general for future invoice application.\n\nThis endpoint ensures auditability and compliance by recording the full context (category, reason, actor identity) and enforcing all business rules regarding credits. Security is enforced through permission checks and by requiring all input fields to pass validation (e.g., positive credit amount, valid enterprise, permitted category). All operations are fully audit-logged for financial traceability.","description":"Post a new billing credit for an enterprise. This operation allows a moderator or master employee to record a credit amount in favor of an enterprise's account, specifying the enterpriseId, credit amount, category (such as \"refund\", \"overpayment\", \"promo\", or \"manual\"), and descriptive reason. Optionally, the credit can be linked to a particular invoice if it is intended to offset that invoice directly.\n\nPermission checks guarantee only authorized actors may create billing credits. The operation enforces input validation rules: credit amount must be positive, enterpriseId and optional invoiceId must exist and be valid, the category must be among allowed types, and a meaningful reason must be provided for auditing and customer transparency. Upon successful creation, the API returns the full newly created credit record with all accompanying metadata, supporting immediate dashboard update, invoice reconciliation, and further financial analysis.","summary":"Create (post) a new billing credit for a specified enterprise account.","parameters":[],"requestBody":{"description":"Information required to create a billing credit: enterprise reference, amount, category, reason, and optional linkage to a specific invoice.","typeName":"IWrtnBillingCredit.ICreate"},"responseBody":{"description":"Enterprise billing credit record created, with all metadata and references, mapped to DTO per output structure requirements.","typeName":"IWrtnBillingCredit"},"authorizationActors":["moderator","employee"],"name":"create","path":"/wrtnEnterprise/employee/billing/credits","method":"post","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the details of a specific billing credit associated with an enterprise. It applies to the wrtn_billing_credits table, enabling authorized moderator actors to modify credit attributes such as the amount, category, reason, or associated invoice. The primary use case is to adjust posted credits after initial issuance, for example due to a billing correction, dispute resolution, or system reconciliation.\n\nOnly authorized moderators are permitted to execute this operation, ensuring all changes are compliant with B2B SaaS billing governance requirements. This update triggers audit logging of all changes for downstream reporting and compliance. Note that only certain fields (amount, category, reason, issued_at, invoice reference) are updatable; fields such as wrtn_enterprise_id and initial linkage must remain immutable.\n\nThe operation checks business constraints on value changes: amount must remain positive, and category must conform to the allowed set (manual, refund, promo, overpayment, dispute, reversal). If provided invoice or moderator references are updated, the operation ensures they exist and are valid. Attempts to change immutable fields or make unauthorized updates result in business-level error responses and are fully audit-logged for compliance.","description":"Update a specific billing credit in the WrtnEnterprise B2B SaaS system. This operation allows a moderator to modify an already-issued billing credit, reflecting changes such as amount correction, category reclassification, or reason updates. All changes are subject to business logic enforcing that the credit amount must stay positive and the category must be valid per compliance rules.\n\nOnly moderator actors can perform this action. Any attempts to update immutable or forbidden fields, or to perform modifications without proper authorization, result in an explicit business error and trigger an audit log entry for governance purposes.\n\nThis operation directly maps to the wrtn_billing_credits Prisma table, specifically allowing edits to the amount, category, reason, issued_at, wrtn_billing_invoice_id, and wrtn_moderator_id fields. The operation enforces referential integrity for invoice and moderator references. Non-compliant requests are denied, protecting billing data integrity and traceability.\n\nThe operation is intended to facilitate B2B postpaid invoice workflows where credits may be disputed, corrected, or manually reallocated, adhering to enterprise SaaS billing and audit requirements.","summary":"Update a specific billing credit line (wrtn_billing_credits) in the system, restricted to moderator actors.","parameters":[{"name":"creditId","description":"Unique identifier of the billing credit to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Credit update payload including only mutable billing credit fields.","typeName":"IWrtnBillingCredit.IUpdate"},"responseBody":{"description":"The updated billing credit with all allowed fields and current status.","typeName":"IWrtnBillingCredit"},"authorizationType":null,"authorizationActor":"moderator","name":"update","path":"/wrtnEnterprise/moderator/billing/credits/{creditId}","method":"put","prerequisites":[]},{"specification":"This operation permanently removes (hard deletes) a posted billing credit from the wrtn_billing_credits table. It is used only by authorized moderator actors, typically when correcting critical accounting errors, reversing accidental credit creation, or managing disputes requiring complete removal after stringent validation and compliance review. The operation is strictly limited to moderator actors, enforcing auditability and B2B finance governance.\n\nAll delete attempts are audit-logged for compliance, and the operation will fail if the credit has already been soft-deleted or if irreversible removal is not permitted by business constraints (e.g., if financial period is locked or if the credit is referenced by other critical records). Associated invoice and enterprise accounting totals are immediately recalculated to ensure ledgers remain correct. The operation verifies all business constraints and will reject attempts to delete credits that are ineligible for hard delete based on business or audit status.","description":"Permanently remove a posted billing credit from the WrtnEnterprise B2B SaaS system. This operation is authorized only for moderator actors, typically in response to the need for accounting correction, fraud mitigation, or compliance events where full deletion (rather than soft deletion) is permitted according to enterprise billing policy.\n\nDelete attempts are fully audit-logged. The operation ensures that the credit has not already been deleted, is not locked by post-close period logic, and that all downstream references are handled according to financial integrity rules. If business rules require preservation (e.g., credits underlying certain invoices), deletion is denied and an explicit error is returned.\n\nModerator authorization is required, and every attempt is recorded in the audit log for compliance sake. This operation guarantees finance-grade auditability and traceability for exceptional manual interventions in billing workflows.","summary":"Completely delete (hard remove) a billing credit (wrtn_billing_credits) by its ID. Moderator actor only.","parameters":[{"name":"creditId","description":"Unique identifier of the billing credit to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","path":"/wrtnEnterprise/moderator/billing/credits/{creditId}","method":"delete","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of customer support tickets within the B2B SaaS platform. The operation is based on the 'wrtn_support_tickets' Prisma table, which records enterprise support tickets submitted by employees or moderators. Filtering supports criteria such as enterprise, team, submitter, and status, as well as full-text search in subject or description. It is designed to help support agents and enterprise employees view and manage relevant ticket flows for operational oversight and personal tracking.\n\nThe system exposes only tickets visible to the authenticated user under strict role and data isolation constraints. Employees see their own tickets; moderators can access all enterprise tickets. The search supports advanced filtering (e.g., by category, status, team, employee, date ranges), comprehensive pagination, and ordering by priority, status, or creation time. The response DTO applies relation mapping principles, providing nested information for employee, moderator, category, status, team, and attachments for each ticket, structured according to strict DTO composition guidelines outlined in system requirements.\n\nSoft-deleted tickets (where 'deleted_at' is set) are excluded from standard listing unless a specific administrative flag is enabled. Security and business logic ensure that unauthorized users cannot view or manipulate tickets outside their scope. This API Endpoint serves as the main search/retrieval entry for ticket dashboards, agent queues, and user support histories. Related endpoints allow retrieval of ticket detail, modification, and reply threads, all of which reference the same core data model and DTO mapping standards.","path":"/wrtnEnterprise/employee/support/tickets","method":"patch","description":"Retrieve a filtered and paginated list of support tickets from the enterprise SaaS support module. This operation enables support agents, employees, and moderators to query support tickets with various filter criteria, such as enterprise, team, status, priority, category, submitter, and time range. Pagination and ordering (by creation/update time, priority, or status) offer efficient browsing of large ticket sets, with the ability to perform full-text search on ticket subjects or descriptions for rapid case identification.\n\nAdvanced business rules enforce strict organizational and permission boundaries: employees retrieve only their own tickets, while moderators can access tickets at the enterprise scope. Tickets associated with teams enable further restrictiveness by limiting viewership to team coordinators or agents. Soft-deleted records (marked by 'deleted_at') are omitted by default, supporting retention policy and compliance.\n\nEach ticket summary in this list response is mapped by relation to its submitter (employee or moderator), category (e.g., incident, request, feedback), current status, related team (if any), attachments, and key ticket metadata. The endpoint is an essential component for support dashboards, company-wide ticket review flows, SLA compliance monitoring, and audit trail requirements. Related endpoints such as detailed ticket retrieval and threaded reply history utilize the same data mapping rules. All filtering, sorting, and visibility controls are enforced strictly according to actor type and explicit business requirements.","summary":"Retrieve a filtered, paginated list of support tickets from 'wrtn_support_tickets' with all relevant relationships.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination criteria for retrieving support ticket summaries.","typeName":"IWrtnSupportTicket.IRequest"},"responseBody":{"description":"Paginated list of summarized support tickets with mapped relations and key metadata.","typeName":"IPageIWrtnSupportTicket.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of customer support tickets within the B2B SaaS platform. The operation is based on the 'wrtn_support_tickets' Prisma table, which records enterprise support tickets submitted by employees or moderators. Filtering supports criteria such as enterprise, team, submitter, and status, as well as full-text search in subject or description. It is designed to help support agents and enterprise employees view and manage relevant ticket flows for operational oversight and personal tracking.\n\nThe system exposes only tickets visible to the authenticated user under strict role and data isolation constraints. Employees see their own tickets; moderators can access all enterprise tickets. The search supports advanced filtering (e.g., by category, status, team, employee, date ranges), comprehensive pagination, and ordering by priority, status, or creation time. The response DTO applies relation mapping principles, providing nested information for employee, moderator, category, status, team, and attachments for each ticket, structured according to strict DTO composition guidelines outlined in system requirements.\n\nSoft-deleted tickets (where 'deleted_at' is set) are excluded from standard listing unless a specific administrative flag is enabled. Security and business logic ensure that unauthorized users cannot view or manipulate tickets outside their scope. This API Endpoint serves as the main search/retrieval entry for ticket dashboards, agent queues, and user support histories. Related endpoints allow retrieval of ticket detail, modification, and reply threads, all of which reference the same core data model and DTO mapping standards.","path":"/wrtnEnterprise/moderator/support/tickets","method":"patch","description":"Retrieve a filtered and paginated list of support tickets from the enterprise SaaS support module. This operation enables support agents, employees, and moderators to query support tickets with various filter criteria, such as enterprise, team, status, priority, category, submitter, and time range. Pagination and ordering (by creation/update time, priority, or status) offer efficient browsing of large ticket sets, with the ability to perform full-text search on ticket subjects or descriptions for rapid case identification.\n\nAdvanced business rules enforce strict organizational and permission boundaries: employees retrieve only their own tickets, while moderators can access tickets at the enterprise scope. Tickets associated with teams enable further restrictiveness by limiting viewership to team coordinators or agents. Soft-deleted records (marked by 'deleted_at') are omitted by default, supporting retention policy and compliance.\n\nEach ticket summary in this list response is mapped by relation to its submitter (employee or moderator), category (e.g., incident, request, feedback), current status, related team (if any), attachments, and key ticket metadata. The endpoint is an essential component for support dashboards, company-wide ticket review flows, SLA compliance monitoring, and audit trail requirements. Related endpoints such as detailed ticket retrieval and threaded reply history utilize the same data mapping rules. All filtering, sorting, and visibility controls are enforced strictly according to actor type and explicit business requirements.","summary":"Retrieve a filtered, paginated list of support tickets from 'wrtn_support_tickets' with all relevant relationships.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination criteria for retrieving support ticket summaries.","typeName":"IWrtnSupportTicket.IRequest"},"responseBody":{"description":"Paginated list of summarized support tickets with mapped relations and key metadata.","typeName":"IPageIWrtnSupportTicket.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves the full detail of a specific customer support ticket by its unique identifier from the 'wrtn_support_tickets' Prisma table. It provides all fields of the ticket, with extensive mapping of related entities: submitter (employee or moderator), assigned team, ticket category and status, attachments, and other associations vital for end-to-end support workflows. Rich DTO relation mapping is applied as per AutoBE requirements, ensuring all relevant FKs are represented as proper objects within the response DTO.\n\nThe operation enforces strict access controls: authenticated employees may access their own tickets, while moderators with appropriate scope access can retrieve any enterprise ticket for support, compliance, or audit workflows. Attempts to access tickets outside the user's privilege result in explicit access-denied business errors. Soft-deleted tickets (where 'deleted_at' is set) are not returned unless the requester is an authorized moderator with elevated permissions. Related reply thread and ticket update APIs are available for action on the same record but are not included in this detail operation.\n\nThe API serves as the canonical detail endpoint for displaying ticket content in dashboards, audit views, SLA/compliance reporting, and threaded reply flows. It ensures all DTO relation mapping and business context composition as detailed in the interface design instructions.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}","method":"get","description":"Retrieve detailed information for a specific support ticket identified by its unique ticket ID from the enterprise B2B SaaS platform's support module. Returns all main ticket fields, together with fully composed relation mapping for submitter (employee or moderator), assigned team (if any), current category, status, all attached files, and referenced business metadata. Access is strictly limited to employees who own the ticket or authorized moderators; unauthorized access attempts yield precise business errors. Soft-deleted tickets are omitted unless special admin privileges are present.\n\nThis endpoint is used to display the comprehensive ticket record in management dashboards, customer portals, and internal support agent queues. Additionally, it supports audit, compliance, and reporting workflows by ensuring every field and nested relation complies with DTO design and relation mapping principles. Related endpoints for ticket replies, modification, and audit trail use the same core ticket ID, with corresponding access and visibility rules enforced.","summary":"Retrieve full detail for a specific support ticket, including all relations, from 'wrtn_support_tickets' by ticketId.","parameters":[{"name":"ticketId","description":"Unique identifier of the target support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed support ticket record with all related entities mapped by relation. Returns 'null' if the ticket does not exist or is not accessible by the current user.","typeName":"IWrtnSupportTicket"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves the full detail of a specific customer support ticket by its unique identifier from the 'wrtn_support_tickets' Prisma table. It provides all fields of the ticket, with extensive mapping of related entities: submitter (employee or moderator), assigned team, ticket category and status, attachments, and other associations vital for end-to-end support workflows. Rich DTO relation mapping is applied as per AutoBE requirements, ensuring all relevant FKs are represented as proper objects within the response DTO.\n\nThe operation enforces strict access controls: authenticated employees may access their own tickets, while moderators with appropriate scope access can retrieve any enterprise ticket for support, compliance, or audit workflows. Attempts to access tickets outside the user's privilege result in explicit access-denied business errors. Soft-deleted tickets (where 'deleted_at' is set) are not returned unless the requester is an authorized moderator with elevated permissions. Related reply thread and ticket update APIs are available for action on the same record but are not included in this detail operation.\n\nThe API serves as the canonical detail endpoint for displaying ticket content in dashboards, audit views, SLA/compliance reporting, and threaded reply flows. It ensures all DTO relation mapping and business context composition as detailed in the interface design instructions.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}","method":"get","description":"Retrieve detailed information for a specific support ticket identified by its unique ticket ID from the enterprise B2B SaaS platform's support module. Returns all main ticket fields, together with fully composed relation mapping for submitter (employee or moderator), assigned team (if any), current category, status, all attached files, and referenced business metadata. Access is strictly limited to employees who own the ticket or authorized moderators; unauthorized access attempts yield precise business errors. Soft-deleted tickets are omitted unless special admin privileges are present.\n\nThis endpoint is used to display the comprehensive ticket record in management dashboards, customer portals, and internal support agent queues. Additionally, it supports audit, compliance, and reporting workflows by ensuring every field and nested relation complies with DTO design and relation mapping principles. Related endpoints for ticket replies, modification, and audit trail use the same core ticket ID, with corresponding access and visibility rules enforced.","summary":"Retrieve full detail for a specific support ticket, including all relations, from 'wrtn_support_tickets' by ticketId.","parameters":[{"name":"ticketId","description":"Unique identifier of the target support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed support ticket record with all related entities mapped by relation. Returns 'null' if the ticket does not exist or is not accessible by the current user.","typeName":"IWrtnSupportTicket"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation creates a new customer support ticket submitted by an enterprise employee. It utilizes the wrtn_support_tickets table, capturing all required information such as subject, description, priority, associated category, and context including enterprise, optional team, and session identifiers. Only employees are allowed to submit tickets. The operation ensures key business rules are enforced: the subject must be unique within the enterprise, a ticket category and status are mandatory, and audit logging should reference the creating employee and session (these are resolved via JWT, not exposed in the API contract). Attachments, feedback links, and further workflow will be handled by other POST operations or PATCH updates, not this creation call. Ticket creation rejects duplicate subjects for the same enterprise. Tickets may be related to FAQs, but this is informational linkage only at creation. Initial status is typically system-default (e.g., 'new').","path":"/wrtnEnterprise/employee/support/tickets","method":"post","summary":"Create a new customer support ticket (wrtn_support_tickets) as an employee.","description":"Create a new support ticket from an enterprise employee, capturing mandatory fields such as subject, description, priority, category, and locale for internationalized support. Optionally, a team or FAQ context can be provided. This operation records the creation time, enforces subject uniqueness within the enterprise, and audit-logs all relevant context including employee and enterprise. Status is set to a default 'new' or provided value if business logic allows. Attachments and threaded replies are added in subsequent operations. Permission is strictly enforced: only authenticated enterprise employees can use this endpoint. Errors are returned if required fields are missing or if subject is a duplicate within the enterprise.\n\nSecurity is maintained by JWT context, not by passing user/session IDs explicitly in the request body. The operation aligns with the wrtn_support_tickets table as defined in the Prisma schema, referencing related tables for categories and statuses.\n\nThis endpoint forms the entry point for the customer support workflow and is linked to threaded replies, assignment, notification, and audit-trail via the associated ticket ID.","parameters":[],"requestBody":{"description":"Details for creating a support ticket, including subject, description, category, priority, and locale. Team and FAQ context are optional.","typeName":"IWrtnSupportTicket.ICreate"},"responseBody":{"description":"The created support ticket as a full detail object, including all resolved relationships and properties authorized for the creating employee.","typeName":"IWrtnSupportTicket"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation updates all mutable fields of an existing customer support ticket record in the wrtn_support_tickets table. It supports modifications to subject, description, priority, category, locale, team association, and status, according to business rules and permission boundaries. The operation ensures that only the ticket owner or authorized moderator (depending on ticket state and business logic) can perform updates. Key invariants such as subject uniqueness for the enterprise and required fields for updates are enforced. Associated relationships include team, category, and status. All updates are fully audit-logged, and changes to status or assignment may trigger additional notification workflows.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}","method":"put","summary":"Update an existing customer support ticket (wrtn_support_tickets) by ID.","description":"Update a previously created support ticket by its unique ticketId. This operation supports modification of all fields permitted by business rules, including subject, description, priority, category, locale, and status. Optionally, it may update the ticket's associated team or origin FAQ reference. Strict permission logic is enforced: only the ticket owner or an authorized moderator may perform certain updates. Audit logging records the change event and actor for compliance. The ticketId is a path parameter required for identifying the target ticket, provided as a string UUID. \n\nError handling covers missing or invalid IDs, failed permission checks, and duplicate subject entries within the same enterprise. If the update attempts to modify immutable fields or violate business rules (such as status transitions), the operation will fail with an appropriate error message. \n\nRelationship references (team, category, status, FAQ) must adhere to enterprise-level data isolation enforced through business logic. Changes in status or assignment may generate notifications or additional workflow steps outside of this operation. All changes update the ticket's modification timestamp.\n\nThis operation references the wrtn_support_tickets table in the Prisma schema, as well as related category, status, and team tables for relationship enforcement and lookups.","parameters":[{"name":"ticketId","description":"Unique identifier for the support ticket to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating a support ticket, including subject, description, priority, category, locale, and optionally team association or FAQ reference.","typeName":"IWrtnSupportTicket.IUpdate"},"responseBody":{"description":"The updated support ticket as a full detail object, reflecting all new and unchanged fields, for the owner or authorized actor.","typeName":"IWrtnSupportTicket"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation permanently removes a customer support ticket from the system by its unique identifier. It acts on the wrtn_support_tickets table, ensuring the ticket is no longer accessible to the user. This operation is intended for administrators or support staff requiring hard removal of a ticket, such as in compliance with data deletion requests, error correction, or when a ticket was created in error.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}","method":"delete","summary":"Permanently delete a customer support ticket by its unique ID from wrtn_support_tickets.","description":"This API operation allows authorized actors to permanently remove a customer support ticket from the system using its unique ticketId. It operates on the wrtn_support_tickets table. The operation ensures that the target ticket record is deleted, removing its data from all standard query endpoints.\n\nSecurity best practices dictate that only administrators or authorized support staff can execute this delete operation. The operation will verify the existence of the ticket and the permissions of the requester before deletion is performed.\n\nThe operation assumes that all cascading delete or orphaned data (e.g., ticket replies, attachments that are only referenced by this ticket) is handled appropriately as per business and compliance rules defined in the system. Attempting to delete a ticket that does not exist results in a 404 Not Found error. Attempts to delete tickets without sufficient permissions return a 403 Forbidden response.\n\nThis hard deletion cannot be undone, and the deleted ticket cannot be recovered.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the full assignment history and current assignment status for a specific customer support ticket using its unique ticketId. It acts on the wrtn_support_ticket_assignments table and provides detailed assignment change records and current assignee information for support staff and audit purposes.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/assignments","method":"patch","summary":"List and search ticket assignment history and status for a support ticket by ticketId from wrtn_support_ticket_assignments.","description":"This API operation allows authorized support staff or administrators to retrieve the complete history of assignment changes for a specific customer support ticket using its unique ticketId. It operates on the wrtn_support_ticket_assignments table and is intended for audit, troubleshooting, and support workflow management.\n\nThe operation supports advanced filtering and searching, such as searching by assigned employee or moderator, assignment time window, or reassignment reasons if provided as part of system extensions. Pagination and sorting are also supported.\n\nThe response contains the complete assignment history records, including who assigned/reassigned the ticket, timestamps, assignment session references, and the current assignment state. Only actors with access to ticket assignment histories in their organization (typically moderators and support leads) are permitted to use this operation. Attempts to access tickets or assignment histories outside the requester's authorized organizations or roles result in a 403 Forbidden response.\n\nIf the ticketId does not exist, the operation yields a 404 Not Found error. If advanced search or filter parameters are not provided, all assignment history records for the given ticket are returned, sorted by time descending.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket for which assignment history is to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional advanced search, filtering, or pagination criteria for assignment history retrieval. Can specify assigned actor, reassignment window, or sort order as supported by IWrtnSupportTicketAssignment.IRequest.","typeName":"IWrtnSupportTicketAssignment.IRequest"},"responseBody":{"description":"Complete assignment history, all reassignment events, and current status for the specified ticket. See IPageIWrtnSupportTicketAssignment for paginated results.","typeName":"IPageIWrtnSupportTicketAssignment"},"authorizationActors":["moderator"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific assignment for a customer support ticket, enabling authorized users to view the details of an assignment log by its unique assignment ID within a support ticket. The endpoint provides access to assignment-related metadata such as the assigned actor (moderator or employee), assignment timestamps, assigner information, session context, and any additional assignment comments. This is essential for tracking ticket handling and understanding the assignment chain for audit and SLA compliance. It operates on the wrtn_support_ticket_assignments table and exposes granular assignment information scoped to a ticket and its assignment entry.","description":"Retrieve a specific support ticket assignment by providing both the parent ticket ID and the assignment ID. This operation grants access to the full details of a single ticket assignment event, including assignee (employee or moderator), assigner, session information, timestamp, and comments explaining the rationale or context of the assignment. \n\nAuthorization is mandatory; only users with appropriate permissions may access assignment information (moderator for all tickets, or enterprise employee with ticket ownership or authorized access scope). The operation pulls all relevant data from the wrtn_support_ticket_assignments table, including all relationship mappings for audit trail and full transparency of support ticket workflow transitions. \n\nThis endpoint is closely related to the overall ticket management and is useful for compliance, SLA reporting, handover tracking, and incident review workflows. Error responses are returned if the assignment or ticket does not exist, or if the caller lacks sufficient permission to access the assignment.","summary":"Retrieve details of a specific support ticket assignment by assignment ID, for a given support ticket","parameters":[{"name":"ticketId","description":"Unique identifier of the targeted support ticket","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the assignment within the support ticket","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Assignment details for the given support ticket and assignment entry, including assignee, assigner, session, timestamp, and context","typeName":"IWrtnSupportTicketAssignment"},"authorizationType":null,"authorizationActor":"moderator","name":"at","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/assignments/{assignmentId}","method":"get","prerequisites":[]},{"specification":"This operation retrieves a specific assignment for a customer support ticket, enabling authorized users to view the details of an assignment log by its unique assignment ID within a support ticket. The endpoint provides access to assignment-related metadata such as the assigned actor (moderator or employee), assignment timestamps, assigner information, session context, and any additional assignment comments. This is essential for tracking ticket handling and understanding the assignment chain for audit and SLA compliance. It operates on the wrtn_support_ticket_assignments table and exposes granular assignment information scoped to a ticket and its assignment entry.","description":"Retrieve a specific support ticket assignment by providing both the parent ticket ID and the assignment ID. This operation grants access to the full details of a single ticket assignment event, including assignee (employee or moderator), assigner, session information, timestamp, and comments explaining the rationale or context of the assignment. \n\nAuthorization is mandatory; only users with appropriate permissions may access assignment information (moderator for all tickets, or enterprise employee with ticket ownership or authorized access scope). The operation pulls all relevant data from the wrtn_support_ticket_assignments table, including all relationship mappings for audit trail and full transparency of support ticket workflow transitions. \n\nThis endpoint is closely related to the overall ticket management and is useful for compliance, SLA reporting, handover tracking, and incident review workflows. Error responses are returned if the assignment or ticket does not exist, or if the caller lacks sufficient permission to access the assignment.","summary":"Retrieve details of a specific support ticket assignment by assignment ID, for a given support ticket","parameters":[{"name":"ticketId","description":"Unique identifier of the targeted support ticket","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the assignment within the support ticket","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Assignment details for the given support ticket and assignment entry, including assignee, assigner, session, timestamp, and context","typeName":"IWrtnSupportTicketAssignment"},"authorizationType":null,"authorizationActor":"employee","name":"at","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/assignments/{assignmentId}","method":"get","prerequisites":[]},{"specification":"This operation creates a new assignment record for a support ticket, enabling a moderator or authorized employee to assign or reassign the ticket to a specific actor (moderator or employee). The operation records the assignee, assigner, assignment session, and optionally a comment explaining the reason for the (re)assignment. It enforces permission and role checks based on ticket and actor context. The endpoint is essential for tracking the workflow and accountability over the support ticket's lifecycle and operates on the wrtn_support_ticket_assignments table.","description":"Create a new assignment log for the specified support ticket. This endpoint allows a moderator or permitted enterprise employee to assign or reassign a support ticket to another moderator or employee, as per the business workflow. The request must supply all required parameters for the assignment: the assignee (moderator ID or employee ID as appropriate), the assigner information is always derived from the authenticated user context (never client-supplied), and optionally a comment for audit and rationale.\n\nOn successful creation, the API returns the complete details of the new assignment entry, including relationship references for ticket, assignee, assigner, session, and comment, allowing downstream systems and compliance tools to track every handover event in ticket management.\n\nAuthorization rules ensure that only users with the appropriate privileges (moderators or ticket-owner employees as per business rules) can perform ticket assignment operations. Permissions are enforced per the wrtn_support_ticket_assignments and related ticket tables, and all actions are recorded for audit and compliance.\n\nIf the ticket does not exist, assignment is not permitted by business rules, or the referenced assignee is invalid, the operation returns appropriate business errors. No information about the assigner is accepted from the client—the assigner is always inferred from JWT context for security integrity.","summary":"Create a record assigning or reassigning a support ticket to a new actor (moderator or employee)","parameters":[{"name":"ticketId","description":"Unique identifier of the targeted support ticket","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment creation request including target assignee and optional comment. The assigner is always derived from the authenticated JWT context.","typeName":"IWrtnSupportTicketAssignment.ICreate"},"responseBody":{"description":"Details of the newly created support ticket assignment entry, including assignee, assigner, session, timestamp, and assignment context.","typeName":"IWrtnSupportTicketAssignment"},"authorizationType":null,"authorizationActor":"moderator","name":"create","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/assignments","method":"post","prerequisites":[]},{"specification":"This operation creates a new assignment record for a support ticket, enabling a moderator or authorized employee to assign or reassign the ticket to a specific actor (moderator or employee). The operation records the assignee, assigner, assignment session, and optionally a comment explaining the reason for the (re)assignment. It enforces permission and role checks based on ticket and actor context. The endpoint is essential for tracking the workflow and accountability over the support ticket's lifecycle and operates on the wrtn_support_ticket_assignments table.","description":"Create a new assignment log for the specified support ticket. This endpoint allows a moderator or permitted enterprise employee to assign or reassign a support ticket to another moderator or employee, as per the business workflow. The request must supply all required parameters for the assignment: the assignee (moderator ID or employee ID as appropriate), the assigner information is always derived from the authenticated user context (never client-supplied), and optionally a comment for audit and rationale.\n\nOn successful creation, the API returns the complete details of the new assignment entry, including relationship references for ticket, assignee, assigner, session, and comment, allowing downstream systems and compliance tools to track every handover event in ticket management.\n\nAuthorization rules ensure that only users with the appropriate privileges (moderators or ticket-owner employees as per business rules) can perform ticket assignment operations. Permissions are enforced per the wrtn_support_ticket_assignments and related ticket tables, and all actions are recorded for audit and compliance.\n\nIf the ticket does not exist, assignment is not permitted by business rules, or the referenced assignee is invalid, the operation returns appropriate business errors. No information about the assigner is accepted from the client—the assigner is always inferred from JWT context for security integrity.","summary":"Create a record assigning or reassigning a support ticket to a new actor (moderator or employee)","parameters":[{"name":"ticketId","description":"Unique identifier of the targeted support ticket","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment creation request including target assignee and optional comment. The assigner is always derived from the authenticated JWT context.","typeName":"IWrtnSupportTicketAssignment.ICreate"},"responseBody":{"description":"Details of the newly created support ticket assignment entry, including assignee, assigner, session, timestamp, and assignment context.","typeName":"IWrtnSupportTicketAssignment"},"authorizationType":null,"authorizationActor":"employee","name":"create","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/assignments","method":"post","prerequisites":[]},{"specification":"This operation updates the assignment of a specific support ticket to a new moderator or employee. The operation is linked to the CustomerSupport ticket assignment entity, and modifies the assigned actor or assignment meta for proper escalation or workflow tracking. The operation requires both the ticket ID and assignment ID to be specified in the path. Only authorized moderator actors are permitted to execute this operation due to the sensitivity of assignment history and compliance requirements, as described in the Prisma schema (wrtn_support_ticket_assignments). Assignment updates are strictly audit-logged, and require the assigner to have proper moderator roles; reassignment will invalidate prior assignments and send notifications according to business workflow.\n\nThe endpoint ensures only privileged actors may perform this update. The relation to the wrtn_support_tickets and wrtn_support_ticket_assignments tables ensures full traceability of support workflows for compliance, SLA, and reporting requirements. When a ticket is reassigned by a moderator, the change must be recorded with the assigner session, all relevant audit-trails, and triggers notification workflows as required by the requirements analysis. The assignment can be updated to change the assigned moderator/employee, update reassignment comments, or adjust escalation status. The operation never creates new assignments; it always updates an existing assignment as referenced by assignmentId.\n\nSecurity is paramount—modification of assignment is restricted to moderator actors with internal support authentication, and all assignment updates are persisted with actor/session and reason comments where applicable. Attempting to modify a non-existent or closed ticket assignment will trigger an appropriate business error response.","description":"Update an assignment on a support ticket for compliance and SLA workflow maintenance. This operation enables internal moderator support staff to reassign or update a ticket’s actor (moderator or, if the business process permits, an employee) to ensure continuity of customer care, escalate unresolved issues, or annotate assignment changes with compliance-mandated commentary.\n\nThe endpoint requires the ticketId (support ticket identifier) and assignmentId (specific assignment record being updated). It verifies that the assignment exists, is active, and that the requesting moderator has the correct permissions to make the change. Assignment updates are only permitted for open tickets (not closed/terminal), and must adhere to business rules for re-assignment, audit, and notification workflows. The request body supports updating the assigned actor, escalation reasoning, and assignment comments—all of which are logged for audit and customer care SLA.\n\nSecurity considerations include strong authentication for moderator actors, rigorous audit of all assignment changes, notification of affected agents, and error handling for invalid assignment references or unauthorized attempts. Changes to an assignment must always be visible to the audit trail for post-event analysis, supporting both operational excellence and regulatory requirements. Related operations include initial assignment creation on ticket insert, assignment deletion, and SLA escalations via internal business rules.","summary":"Update assignment for a support ticket in the CustomerSupport wrtn_support_ticket_assignments table, restricted to moderator actors.","parameters":[{"name":"ticketId","description":"The ID of the support ticket whose assignment is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"The ticket assignment record ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Support ticket assignment mutation data, including actor and comment updates.","typeName":"IWrtnSupportTicketAssignment.IUpdate"},"responseBody":{"description":"Detailed information on the updated ticket assignment.","typeName":"IWrtnSupportTicketAssignment"},"authorizationActors":["moderator"],"name":"update","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/assignments/{assignmentId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation deletes a specific assignment from a support ticket using CustomerSupport assignment management logic as defined by wrtn_support_ticket_assignments in the Prisma schema. The operation is limited to moderator actors, who use the ticketId and assignmentId path parameters to identify the precise assignment for removal. This is a hard delete as the schema does not include a soft delete field for assignments. Audit trails are maintained for all such removals for compliance, SLA, and business workflow reporting requirements. Only internal support moderators may perform this operation, ensuring that only authorized actions are allowed on the support ticket workflow and escalation tracking.\n\nDeleting an assignment will remove all references to the assignmentId across business audit logs. All deletion operations are subject to review and notification workflows in case of SLA impact or customer care continuity risk. The assignmentId path parameter references a row in wrtn_support_ticket_assignments; any attempt to delete a non-existent or locked assignment will trigger an appropriate error response. Audit logs document the actor, reason, and affected ticket for forensic traceability.","description":"Remove a support ticket assignment from the system, restricted to moderator actors with support workflow permissions. This operation is performed only on the assignment identified by assignmentId for the given support ticket ticketId. All deletion actions are strictly logged, with compliance traceability and notification of relevant parties if the removal may impact SLA or customer workflow.\n\nThis operation ensures that assignment entries can be hard deleted (removed entirely) when necessary—such as operational cleanup, reversal of mistaken assignment, or moderator-requested ticket workflow changes. Path parameters ticketId and assignmentId are required primary keys identifying the assignment and associated ticket. The endpoint validates existence, moderator authorization, and assignment status (not already deleted).\n\nUpon successful deletion, no response body is provided; the client may poll the assignments list to confirm removal. Related operations include assignment update, listing, and creation for the support ticket workflow. Attempting to delete an assignment that does not exist or for which the ticket is terminal/closed will result in a business error, and all actions will be audit logged for operational and compliance reasons.","summary":"Delete a support ticket assignment (wrtn_support_ticket_assignments) for a ticket, restricted to moderator actors; operation executes a hard delete.","parameters":[{"name":"ticketId","description":"The ID of the support ticket whose assignment is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"The ticket assignment record ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/assignments/{assignmentId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a list of all replies associated with a specific support ticket. It operates on the wrtn_support_ticket_replies table, providing a paginated, filterable collection of both public and internal replies for the identified ticket. The operation allows users to access all follow-up conversations and threaded messages relevant to the ticket from initial submission through all support interactions. The response type embeds essential reply properties while reflecting actor context (author as moderator or employee), reply order, content, and metadata, suitable for display in ticket detail views, audit logs, or compliance exports. Business rules ensure only permitted actors (the ticket submitter or assigned moderators/employees for that ticket) are allowed access.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/replies","method":"patch","summary":"List all replies for a given support ticket from wrtn_support_ticket_replies.","description":"Retrieve a complete list of replies for the designated support ticket, including both employee and moderator authored messages as well as internal notes. The operation supports efficient client-side pagination, thread navigation, and status-based filtering. Only authorized actors (the ticket submitter, assigned agents, or moderators with access to this ticket) will receive results; unauthorized access attempts are denied and logged for compliance.\n\nEach reply includes core properties such as reply ID, parent/child threading reference, author (moderator/employee), visibility (internal/public), content, timestamps, and attachments if available. The API does not leak replies on tickets that have been soft-deleted or on tickets outside the user's data isolation scope. This response is built atop the wrtn_support_ticket_replies Prisma schema, mapping moderation and employee authors, and excluding replies that are deleted or outside visibility bounds for the requesting actor.\n\nRelated endpoints: GET /support/tickets/{ticketId} for main ticket info. PATCH /support/tickets for ticket search. GET /support/tickets/{ticketId}/replies/{replyId} for detail. This endpoint is required for all support ticket interaction screens and administrator audit logs.","parameters":[{"name":"ticketId","description":"Unique identifier for the support ticket whose replies are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters to filter, sort, or paginate support ticket replies.","typeName":"IWrtnSupportTicketReply.IRequest"},"responseBody":{"description":"Paginated listing of detailed support ticket replies for the requested ticket.","typeName":"IPageIWrtnSupportTicketReply"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves a list of all replies associated with a specific support ticket. It operates on the wrtn_support_ticket_replies table, providing a paginated, filterable collection of both public and internal replies for the identified ticket. The operation allows users to access all follow-up conversations and threaded messages relevant to the ticket from initial submission through all support interactions. The response type embeds essential reply properties while reflecting actor context (author as moderator or employee), reply order, content, and metadata, suitable for display in ticket detail views, audit logs, or compliance exports. Business rules ensure only permitted actors (the ticket submitter or assigned moderators/employees for that ticket) are allowed access.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/replies","method":"patch","summary":"List all replies for a given support ticket from wrtn_support_ticket_replies.","description":"Retrieve a complete list of replies for the designated support ticket, including both employee and moderator authored messages as well as internal notes. The operation supports efficient client-side pagination, thread navigation, and status-based filtering. Only authorized actors (the ticket submitter, assigned agents, or moderators with access to this ticket) will receive results; unauthorized access attempts are denied and logged for compliance.\n\nEach reply includes core properties such as reply ID, parent/child threading reference, author (moderator/employee), visibility (internal/public), content, timestamps, and attachments if available. The API does not leak replies on tickets that have been soft-deleted or on tickets outside the user's data isolation scope. This response is built atop the wrtn_support_ticket_replies Prisma schema, mapping moderation and employee authors, and excluding replies that are deleted or outside visibility bounds for the requesting actor.\n\nRelated endpoints: GET /support/tickets/{ticketId} for main ticket info. PATCH /support/tickets for ticket search. GET /support/tickets/{ticketId}/replies/{replyId} for detail. This endpoint is required for all support ticket interaction screens and administrator audit logs.","parameters":[{"name":"ticketId","description":"Unique identifier for the support ticket whose replies are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters to filter, sort, or paginate support ticket replies.","typeName":"IWrtnSupportTicketReply.IRequest"},"responseBody":{"description":"Paginated listing of detailed support ticket replies for the requested ticket.","typeName":"IPageIWrtnSupportTicketReply"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves detail of a specific reply by replyId for a given support ticket. It accesses the wrtn_support_ticket_replies table, fetching the full reply message, metadata, actor information, and any attachments for audit, compliance, and support case interfaces. The operation provides complete context (including parent thread references and internal/public message flag) suitable for rendering threaded discussion interfaces or for compliance review. Data is only accessible to actors authorized for the ticket in question (the submitter, assigned support employee/moderator, or other permitted roles).","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/replies/{replyId}","method":"get","summary":"Get details of a specific support ticket reply from wrtn_support_ticket_replies.","description":"Fetch full details for a single reply (identified by replyId) associated with the specific support ticket. Returns all metadata fields, including author (employee or moderator), message body, visibility type (internal/public), creation and deletion timestamps, and parent/child relationships for the reply thread.\n\nOnly actors with access to the underlying ticket can retrieve this information—typically the ticket submitter, assigned support staff, or moderators. Replies associated with tickets that have been deleted, or internal notes for which the user lacks privilege, will be excluded with an appropriate error or empty result. This endpoint enables threaded reply viewing, dispute resolution communication tracking, and audit log exports from the backend.\n\nRole-based security and audit logging are enforced, and all access attempts are recorded for compliance review. Related endpoints: PATCH /support/tickets/{ticketId}/replies for replies list, GET /support/tickets/{ticketId} for ticket overview.","parameters":[{"name":"ticketId","description":"Unique identifier for the support ticket to which the reply belongs.","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the specific support ticket reply to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested support ticket reply.","typeName":"IWrtnSupportTicketReply"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves detail of a specific reply by replyId for a given support ticket. It accesses the wrtn_support_ticket_replies table, fetching the full reply message, metadata, actor information, and any attachments for audit, compliance, and support case interfaces. The operation provides complete context (including parent thread references and internal/public message flag) suitable for rendering threaded discussion interfaces or for compliance review. Data is only accessible to actors authorized for the ticket in question (the submitter, assigned support employee/moderator, or other permitted roles).","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/replies/{replyId}","method":"get","summary":"Get details of a specific support ticket reply from wrtn_support_ticket_replies.","description":"Fetch full details for a single reply (identified by replyId) associated with the specific support ticket. Returns all metadata fields, including author (employee or moderator), message body, visibility type (internal/public), creation and deletion timestamps, and parent/child relationships for the reply thread.\n\nOnly actors with access to the underlying ticket can retrieve this information—typically the ticket submitter, assigned support staff, or moderators. Replies associated with tickets that have been deleted, or internal notes for which the user lacks privilege, will be excluded with an appropriate error or empty result. This endpoint enables threaded reply viewing, dispute resolution communication tracking, and audit log exports from the backend.\n\nRole-based security and audit logging are enforced, and all access attempts are recorded for compliance review. Related endpoints: PATCH /support/tickets/{ticketId}/replies for replies list, GET /support/tickets/{ticketId} for ticket overview.","parameters":[{"name":"ticketId","description":"Unique identifier for the support ticket to which the reply belongs.","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the specific support ticket reply to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested support ticket reply.","typeName":"IWrtnSupportTicketReply"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation allows an employee or moderator to create a reply for a support ticket. It operates on the wrtn_support_ticket_replies table and records a threaded reply to an existing support ticket, optionally linking to a parent reply for reply threads. The reply can be public or internal, supports linkage to attachments, and captures author context for full audit and compliance. This is essential for keeping structured communications between support staff and customers, enabling ticket resolution discussion, and SLA compliance. Only employees who own the ticket or authorized moderators may create replies. All replies are strictly linked to their parent ticket and, if threaded, to a parent reply. The process automatically records actor and session from authentication context and respects ticket privacy and access rules.","description":"Create a new reply to a specific support ticket, allowing for both internal and public responses. The operation ensures that only the ticket's owner (if employee) or properly authorized moderators may post a reply, with business rules enforcing access boundaries described in the requirements and schema. Each reply can be associated with file attachments using the wrtn_support_ticket_attachments linking table. If the reply is to another reply, a parent reply ID may be provided to create properly threaded discussion. All data is captured for compliance, SLA tracking, and auditability, including author, session, and timestamp. Permission checks guarantee that only actors with sufficient rights can post replies, and the reply's visibility (internal/public) is enforced according to author role (moderator can create internal notes, employees cannot). This operation is critical for customers to communicate incidents, questions, or feedback, and for support staff to manage ongoing customer support interactions. It supports escalation, notification, and audit trails as defined in business documentation. Related operations include updating and deleting replies, ticket status transitions, and notification dispatch for new replies on a ticket.","summary":"Create a new reply in a customer support ticket (wrtn_support_ticket_replies)","parameters":[{"name":"ticketId","description":"Unique identifier of the target support ticket to reply to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply content and metadata for the new support ticket reply. Contains body, is_internal (for moderator notes), and optional parent reply ID for threading. Author and session are inferred from authentication context.","typeName":"IWrtnSupportTicketReply.ICreate"},"responseBody":{"description":"Response containing the newly created support ticket reply with audit and relationship fields. Includes nested author/employee/moderator summary and threading information.","typeName":"IWrtnSupportTicketReply"},"authorizationActors":["employee","moderator"],"name":"create","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/replies","method":"post","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows an employee or moderator to create a reply for a support ticket. It operates on the wrtn_support_ticket_replies table and records a threaded reply to an existing support ticket, optionally linking to a parent reply for reply threads. The reply can be public or internal, supports linkage to attachments, and captures author context for full audit and compliance. This is essential for keeping structured communications between support staff and customers, enabling ticket resolution discussion, and SLA compliance. Only employees who own the ticket or authorized moderators may create replies. All replies are strictly linked to their parent ticket and, if threaded, to a parent reply. The process automatically records actor and session from authentication context and respects ticket privacy and access rules.","description":"Create a new reply to a specific support ticket, allowing for both internal and public responses. The operation ensures that only the ticket's owner (if employee) or properly authorized moderators may post a reply, with business rules enforcing access boundaries described in the requirements and schema. Each reply can be associated with file attachments using the wrtn_support_ticket_attachments linking table. If the reply is to another reply, a parent reply ID may be provided to create properly threaded discussion. All data is captured for compliance, SLA tracking, and auditability, including author, session, and timestamp. Permission checks guarantee that only actors with sufficient rights can post replies, and the reply's visibility (internal/public) is enforced according to author role (moderator can create internal notes, employees cannot). This operation is critical for customers to communicate incidents, questions, or feedback, and for support staff to manage ongoing customer support interactions. It supports escalation, notification, and audit trails as defined in business documentation. Related operations include updating and deleting replies, ticket status transitions, and notification dispatch for new replies on a ticket.","summary":"Create a new reply in a customer support ticket (wrtn_support_ticket_replies)","parameters":[{"name":"ticketId","description":"Unique identifier of the target support ticket to reply to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply content and metadata for the new support ticket reply. Contains body, is_internal (for moderator notes), and optional parent reply ID for threading. Author and session are inferred from authentication context.","typeName":"IWrtnSupportTicketReply.ICreate"},"responseBody":{"description":"Response containing the newly created support ticket reply with audit and relationship fields. Includes nested author/employee/moderator summary and threading information.","typeName":"IWrtnSupportTicketReply"},"authorizationActors":["employee","moderator"],"name":"create","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/replies","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing reply in a support ticket. It operates on the wrtn_support_ticket_replies table and enables modifying reply content, including reply body and possibly visibility (is_internal), provided access control rules are met. The system enforces that only the original author (employee or moderator) or a moderator with appropriate permissions may update a reply. Updates are tracked for audit and compliance, and all changes are logged with actor/session/timestamp. Reply hierarchy (parent/child) is not changed by this operation. Ticket ownership, reply threading, and internal/public note status are respected for business integrity. Only authorized actors may alter a reply, with full permission logic as per business requirements.","description":"Update the body and possibly internal/public status of an existing reply in a customer support ticket. This operation verifies that only the reply's original author or a moderator with escalation rights may edit the reply. All modifications are strictly tracked for compliance, including change history and audit trail. Threading (parent reply relationship) is immutable and cannot be altered via this update. Business validation enforces role-based edit permissions, especially for internal notes (which only moderators may manage as internal). Permission logic uses authentication context and ticket/reply relationships to determine access. Updated reply content follows the same constraints as the creation operation, and related notifications/escalations may be triggered as defined in support policy. This supports SLA management, auditability, and transparency within the support ticket workflow.","summary":"Update an existing reply in a support ticket (wrtn_support_ticket_replies)","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket containing the reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated body and internal/public status for the support ticket reply. Only body, is_internal, and attachments may be changed. Author and parent relationships are immutable.","typeName":"IWrtnSupportTicketReply.IUpdate"},"responseBody":{"description":"Response containing the updated support ticket reply, including audit, author, and relationship fields.","typeName":"IWrtnSupportTicketReply"},"authorizationActors":["employee","moderator"],"name":"update","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/replies/{replyId}","method":"put","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing reply in a support ticket. It operates on the wrtn_support_ticket_replies table and enables modifying reply content, including reply body and possibly visibility (is_internal), provided access control rules are met. The system enforces that only the original author (employee or moderator) or a moderator with appropriate permissions may update a reply. Updates are tracked for audit and compliance, and all changes are logged with actor/session/timestamp. Reply hierarchy (parent/child) is not changed by this operation. Ticket ownership, reply threading, and internal/public note status are respected for business integrity. Only authorized actors may alter a reply, with full permission logic as per business requirements.","description":"Update the body and possibly internal/public status of an existing reply in a customer support ticket. This operation verifies that only the reply's original author or a moderator with escalation rights may edit the reply. All modifications are strictly tracked for compliance, including change history and audit trail. Threading (parent reply relationship) is immutable and cannot be altered via this update. Business validation enforces role-based edit permissions, especially for internal notes (which only moderators may manage as internal). Permission logic uses authentication context and ticket/reply relationships to determine access. Updated reply content follows the same constraints as the creation operation, and related notifications/escalations may be triggered as defined in support policy. This supports SLA management, auditability, and transparency within the support ticket workflow.","summary":"Update an existing reply in a support ticket (wrtn_support_ticket_replies)","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket containing the reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated body and internal/public status for the support ticket reply. Only body, is_internal, and attachments may be changed. Author and parent relationships are immutable.","typeName":"IWrtnSupportTicketReply.IUpdate"},"responseBody":{"description":"Response containing the updated support ticket reply, including audit, author, and relationship fields.","typeName":"IWrtnSupportTicketReply"},"authorizationActors":["employee","moderator"],"name":"update","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/replies/{replyId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a specific reply from a support ticket. It operates on the wrtn_support_ticket_replies table where each reply is linked to both the parent ticket and, optionally, a previous reply (threaded structure). Deletion is a hard delete because there is no 'deleted_at' field in the schema for replies. This is an administrative or authorized-employee operation typically performed when staff need to remove sensitive information, spam, or inappropriate content from a ticket's discussion thread. The API requires both the support ticket's ID and the reply's ID as path parameters to unambiguously identify the reply in context of its ticket.\n\nThe operation enforces permission checks: only moderators or the employee who authored the reply can erase it. Audit logs must be recorded reflecting the actor, session, and reason for deletion. Associated ticket, thread, and file-attachment references must be properly managed to avoid orphan data. If the reply is not found or not owned/managed by the acting user, a clear error is returned. Related operations include viewing replies and listing attachments for a ticket.\n\nError scenarios: If a reply contains file references, those associations must be checked for shared references before deleting files to prevent premature data loss. Deleting a reply does not cascade to deleting other replies in the thread. Attempting to erase a non-existent reply yields a 404 error.\n\nThe typical usage is for timely content moderation or in response to user content removal requests, supporting compliance and data hygiene. All deletions are final and cannot be reversed through this API; restore actions are not supported.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/replies/{replyId}","method":"delete","summary":"Permanently delete a specific support ticket reply (wrtn_support_ticket_replies table).","description":"Delete a specific reply from a support ticket. This operation supports ticket moderation and employee self-management. Must be performed by either a moderator (internal admin) or the reply's authoring employee. Deletion is a hard delete (no 'deleted_at' soft delete in schema), ensuring the targeted reply is removed from the underlying database. \n\nAny files referenced by the reply are checked for further associations to avoid orphan deletion. Replies in a thread structure are not cascade-deleted; only the specified reply is removed. Error handling includes not-found errors and insufficient permissions (actor is not moderator or reply author). Audit tracing is performed for all deletion attempts including unsuccessful ones. This operation is typically called from content-moderation interfaces, staff panels, or by users removing their own replies.\n\nAssociated business logic ensures removal updates ticket/thread metadata accordingly and files attached to the reply are cleaned up if no longer referenced elsewhere. Operation is necessary for complaint management, GDPR/CCPA compliance, and spam/inappropriate content removal. All actions are fully audit-logged for compliance purposes.","parameters":[{"name":"ticketId","description":"The unique identifier of the support ticket containing the reply. This must be a valid UUID referencing an existing support ticket.","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"The unique identifier for the reply to be deleted. This must be a valid UUID referencing a reply within the ticket's threaded structure.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator","employee"],"name":"erase","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a specific reply from a support ticket. It operates on the wrtn_support_ticket_replies table where each reply is linked to both the parent ticket and, optionally, a previous reply (threaded structure). Deletion is a hard delete because there is no 'deleted_at' field in the schema for replies. This is an administrative or authorized-employee operation typically performed when staff need to remove sensitive information, spam, or inappropriate content from a ticket's discussion thread. The API requires both the support ticket's ID and the reply's ID as path parameters to unambiguously identify the reply in context of its ticket.\n\nThe operation enforces permission checks: only moderators or the employee who authored the reply can erase it. Audit logs must be recorded reflecting the actor, session, and reason for deletion. Associated ticket, thread, and file-attachment references must be properly managed to avoid orphan data. If the reply is not found or not owned/managed by the acting user, a clear error is returned. Related operations include viewing replies and listing attachments for a ticket.\n\nError scenarios: If a reply contains file references, those associations must be checked for shared references before deleting files to prevent premature data loss. Deleting a reply does not cascade to deleting other replies in the thread. Attempting to erase a non-existent reply yields a 404 error.\n\nThe typical usage is for timely content moderation or in response to user content removal requests, supporting compliance and data hygiene. All deletions are final and cannot be reversed through this API; restore actions are not supported.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/replies/{replyId}","method":"delete","summary":"Permanently delete a specific support ticket reply (wrtn_support_ticket_replies table).","description":"Delete a specific reply from a support ticket. This operation supports ticket moderation and employee self-management. Must be performed by either a moderator (internal admin) or the reply's authoring employee. Deletion is a hard delete (no 'deleted_at' soft delete in schema), ensuring the targeted reply is removed from the underlying database. \n\nAny files referenced by the reply are checked for further associations to avoid orphan deletion. Replies in a thread structure are not cascade-deleted; only the specified reply is removed. Error handling includes not-found errors and insufficient permissions (actor is not moderator or reply author). Audit tracing is performed for all deletion attempts including unsuccessful ones. This operation is typically called from content-moderation interfaces, staff panels, or by users removing their own replies.\n\nAssociated business logic ensures removal updates ticket/thread metadata accordingly and files attached to the reply are cleaned up if no longer referenced elsewhere. Operation is necessary for complaint management, GDPR/CCPA compliance, and spam/inappropriate content removal. All actions are fully audit-logged for compliance purposes.","parameters":[{"name":"ticketId","description":"The unique identifier of the support ticket containing the reply. This must be a valid UUID referencing an existing support ticket.","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"The unique identifier for the reply to be deleted. This must be a valid UUID referencing a reply within the ticket's threaded structure.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator","employee"],"name":"erase","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of file attachments associated with a specific support ticket in the wrtn_support_ticket_attachments table. It is designed to give moderators and employees the ability to view all files attached to a ticket for compliance, workflow, or content review. The request is made using the PATCH method with complex filtering and pagination criteria specified in the request body, following advanced search and reporting requirements. Underlying queries are performed against the wrtn_support_ticket_attachments table, joining wrtn_attachment_files for file metadata.\n\nThis search supports filtering by file type, uploader (moderator or employee), and upload dates while enforcing proper access controls. Pagination, sorting, and search terms can be used to help manage tickets with numerous attachments. Only authorized employees assigned to, or owners of, the ticket may access this endpoint, along with internal moderators supporting the case. Files may be referenced further in threaded replies or remain attached at the ticket level. File associations must be returned along with key metadata (filename, extension, url, uploader, sequence/order, and upload timestamps). \n\nAuthorization rules strictly prohibit access to attachments on tickets the actor does not have permission to view. Results include only attachments which have not been soft-deleted. Associated operations include ticket detail, file download, and attachment removal flows. Audit log entries are generated for all access to attachment lists for traceability.\n\nThis endpoint is typically used in ticket dashboards, evidence review, and for data export flows. No data is modified by this request.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/attachments","method":"patch","summary":"Retrieve a paginated, filtered list of file attachments for a specific support ticket","description":"Search and retrieve all attachments associated with a specific support ticket, using advanced filtering and pagination. The operation queries the wrtn_support_ticket_attachments table for file associations, joining the wrtn_attachment_files table to obtain full file metadata. Employees may only access their own company's tickets and only those to which they are assigned; moderators have access to all tickets for internal support.\n\nAdvanced filtering allows restricting by file type (e.g., images, audio), uploader identity, and upload date range. Results are paginated and can be sorted by upload sequence or time. Attachments include file url, extension, uploader (moderator or employee), upload timestamp, and any relevant order metadata. File entities returned follow the ISummary variant convention.\n\nAccess is denied if the ticket is not viewable by the requesting actor or the ticket does not exist. Error scenarios include requesting out-of-bounds pages or filtering with invalid search criteria. All access events are audit-logged for compliance. Associated operations include file removal, attachment upload, and ticket/reply detail retrieval. No modifications are performed by this endpoint; it is read-only.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket whose attachments are being retrieved. Must be a valid UUID for a ticket in the wrtn_support_tickets table.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination filters for attachment retrieval, supporting filtering by file type, uploader, and time range.","typeName":"IWrtnSupportTicketAttachment.IRequest"},"responseBody":{"description":"Paginated list of file attachments matching the search criteria for the given ticket. Each item contains attachment metadata following the ISummary variant schema.","typeName":"IPageIWrtnSupportTicketAttachment.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of file attachments associated with a specific support ticket in the wrtn_support_ticket_attachments table. It is designed to give moderators and employees the ability to view all files attached to a ticket for compliance, workflow, or content review. The request is made using the PATCH method with complex filtering and pagination criteria specified in the request body, following advanced search and reporting requirements. Underlying queries are performed against the wrtn_support_ticket_attachments table, joining wrtn_attachment_files for file metadata.\n\nThis search supports filtering by file type, uploader (moderator or employee), and upload dates while enforcing proper access controls. Pagination, sorting, and search terms can be used to help manage tickets with numerous attachments. Only authorized employees assigned to, or owners of, the ticket may access this endpoint, along with internal moderators supporting the case. Files may be referenced further in threaded replies or remain attached at the ticket level. File associations must be returned along with key metadata (filename, extension, url, uploader, sequence/order, and upload timestamps). \n\nAuthorization rules strictly prohibit access to attachments on tickets the actor does not have permission to view. Results include only attachments which have not been soft-deleted. Associated operations include ticket detail, file download, and attachment removal flows. Audit log entries are generated for all access to attachment lists for traceability.\n\nThis endpoint is typically used in ticket dashboards, evidence review, and for data export flows. No data is modified by this request.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/attachments","method":"patch","summary":"Retrieve a paginated, filtered list of file attachments for a specific support ticket","description":"Search and retrieve all attachments associated with a specific support ticket, using advanced filtering and pagination. The operation queries the wrtn_support_ticket_attachments table for file associations, joining the wrtn_attachment_files table to obtain full file metadata. Employees may only access their own company's tickets and only those to which they are assigned; moderators have access to all tickets for internal support.\n\nAdvanced filtering allows restricting by file type (e.g., images, audio), uploader identity, and upload date range. Results are paginated and can be sorted by upload sequence or time. Attachments include file url, extension, uploader (moderator or employee), upload timestamp, and any relevant order metadata. File entities returned follow the ISummary variant convention.\n\nAccess is denied if the ticket is not viewable by the requesting actor or the ticket does not exist. Error scenarios include requesting out-of-bounds pages or filtering with invalid search criteria. All access events are audit-logged for compliance. Associated operations include file removal, attachment upload, and ticket/reply detail retrieval. No modifications are performed by this endpoint; it is read-only.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket whose attachments are being retrieved. Must be a valid UUID for a ticket in the wrtn_support_tickets table.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination filters for attachment retrieval, supporting filtering by file type, uploader, and time range.","typeName":"IWrtnSupportTicketAttachment.IRequest"},"responseBody":{"description":"Paginated list of file attachments matching the search criteria for the given ticket. Each item contains attachment metadata following the ISummary variant schema.","typeName":"IPageIWrtnSupportTicketAttachment.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific attachment file associated with a particular support ticket. It is based on the CustomerSupport domain and operates mainly on the wrtn_support_ticket_attachments, wrtn_support_tickets, and wrtn_attachment_files entities in the Prisma schema. By providing both the ticketId and attachmentId, the API returns the corresponding file's metadata and information only if the attachment belongs to the specific ticket. The operation prohibits access to attachments that are not linked to the given ticket. The permission logic ensures proper data isolation between enterprises and strict audit logging per support requirements. Only users who have access rights to the ticket (the ticket submitter, assigned agents/moderators) can view/download the file. Attempts to fetch unrelated or cross-organization attachments are denied with proper business errors and audit log entries.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/attachments/{attachmentId}","method":"get","summary":"Retrieve a specific attachment for a support ticket by its ticket and attachment IDs. Related table: wrtn_support_ticket_attachments.","description":"This endpoint allows authorized actors to fetch a specific support ticket's attachment using both the ticket ID and the attachment ID as path parameters. The operation enforces strict integrity by ensuring the specified attachment file is indeed linked to the designated support ticket, as defined in the wrtn_support_ticket_attachments table. If the attachmentId is not associated with the ticketId, the API returns a not found error.\n\nAccess to the attachment is restricted to the following roles: the submitting enterprise employee, any assigned moderator or support agent currently responsible for the ticket, and authorized enterprise support personnel. The API performs enterprise isolation/integrity checks and logs every file access event in the audit trail, recording user, session, ticket, and attachment references. File download links are never public; returned URLs are signed or tokenized for secure retrieval.\n\nEdge cases such as attempting to access attachments across tickets or organizations, deleted attachments, or accessing files post-ticket closure are properly handled with explicit error messages that clarify the business reason for rejection. Related operations: listing all attachments for a given ticket, downloading a file via a secure signed URL, or uploading new attachments to a ticket.","parameters":[{"name":"ticketId","description":"Unique identifier of the target support ticket whose attachment is being requested. Must be a valid UUID representing an existing support ticket.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the specific attachment to retrieve. Must be a valid UUID representing an attachment associated with the specified support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed attachment metadata and download-ready info for the attachment linked to the target support ticket. Includes file name, extension, url (tokenized or signed if required), and association context.","typeName":"IWrtnSupportTicketAttachment"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific attachment file associated with a particular support ticket. It is based on the CustomerSupport domain and operates mainly on the wrtn_support_ticket_attachments, wrtn_support_tickets, and wrtn_attachment_files entities in the Prisma schema. By providing both the ticketId and attachmentId, the API returns the corresponding file's metadata and information only if the attachment belongs to the specific ticket. The operation prohibits access to attachments that are not linked to the given ticket. The permission logic ensures proper data isolation between enterprises and strict audit logging per support requirements. Only users who have access rights to the ticket (the ticket submitter, assigned agents/moderators) can view/download the file. Attempts to fetch unrelated or cross-organization attachments are denied with proper business errors and audit log entries.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/attachments/{attachmentId}","method":"get","summary":"Retrieve a specific attachment for a support ticket by its ticket and attachment IDs. Related table: wrtn_support_ticket_attachments.","description":"This endpoint allows authorized actors to fetch a specific support ticket's attachment using both the ticket ID and the attachment ID as path parameters. The operation enforces strict integrity by ensuring the specified attachment file is indeed linked to the designated support ticket, as defined in the wrtn_support_ticket_attachments table. If the attachmentId is not associated with the ticketId, the API returns a not found error.\n\nAccess to the attachment is restricted to the following roles: the submitting enterprise employee, any assigned moderator or support agent currently responsible for the ticket, and authorized enterprise support personnel. The API performs enterprise isolation/integrity checks and logs every file access event in the audit trail, recording user, session, ticket, and attachment references. File download links are never public; returned URLs are signed or tokenized for secure retrieval.\n\nEdge cases such as attempting to access attachments across tickets or organizations, deleted attachments, or accessing files post-ticket closure are properly handled with explicit error messages that clarify the business reason for rejection. Related operations: listing all attachments for a given ticket, downloading a file via a secure signed URL, or uploading new attachments to a ticket.","parameters":[{"name":"ticketId","description":"Unique identifier of the target support ticket whose attachment is being requested. Must be a valid UUID representing an existing support ticket.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the specific attachment to retrieve. Must be a valid UUID representing an attachment associated with the specified support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed attachment metadata and download-ready info for the attachment linked to the target support ticket. Includes file name, extension, url (tokenized or signed if required), and association context.","typeName":"IWrtnSupportTicketAttachment"},"authorizationActors":["employee","moderator"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation uploads (attaches) a new file to a specific support ticket. It is based on the CustomerSupport domain and involves the wrtn_support_ticket_attachments, wrtn_support_tickets, and wrtn_attachment_files entities in the Prisma schema. The client must provide the target support ticket ID in the path, and the attachment information in the request body, which references an already uploaded file's ID. Only employees who submitted the ticket or assigned moderators/support agents are allowed to add attachments. The operation links the file to the ticket and ensures all attachment actions are fully auditable with exact sequence ordering and actor/session context. File upload itself occurs through the dedicated attachment upload API prior to using this operation; this endpoint only associates an uploaded file with a ticket. The API enforces enterprise isolation and blocks attempts to attach unrelated files, files owned by another organization, or files in invalid/forbidden formats.","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/attachments","method":"post","summary":"Attach an already-uploaded file to a specific support ticket (wrtn_support_ticket_attachments).","description":"This endpoint enables authorized users (the ticket's submitting enterprise employee, current assigned moderator/support agent, or authorized personnel) to add a new attachment to a support ticket by associating an existing uploaded file. The ticketId path parameter specifies the support ticket, while the request body provides the required attachment information—namely the unique file ID (referencing wrtn_attachment_files), along with optional metadata such as custom filename or sequence order if needed per business logic. The API checks that the file being attached is owned by the same enterprise and is eligible for the current ticket context.\n\nSecurity checks are strictly enforced: only users with appropriate access to the ticket can attach a file, and attachments from different organizations or forbidden file types (as per file management policy) are denied. Every attachment action is audit-logged with the attaching actor/session info and full context for compliance. The response returns the full details of the linked attachment record, including file info, sequence, and association state. Attempts to attach files not previously uploaded, or to attach to foreign tickets, are explicitly denied with accurate business error messages.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket to which the new file will be attached. Must be a valid UUID representing an existing support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information about the attachment to associate. This must include the already-uploaded attachment file ID and optional metadata such as display filename or sequence ordering.","typeName":"IWrtnSupportTicketAttachment.ICreate"},"responseBody":{"description":"Full details of the newly created attachment record, including file info, sequence, and association to the target ticket.","typeName":"IWrtnSupportTicketAttachment"},"authorizationActors":["employee","moderator"],"name":"create","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation uploads (attaches) a new file to a specific support ticket. It is based on the CustomerSupport domain and involves the wrtn_support_ticket_attachments, wrtn_support_tickets, and wrtn_attachment_files entities in the Prisma schema. The client must provide the target support ticket ID in the path, and the attachment information in the request body, which references an already uploaded file's ID. Only employees who submitted the ticket or assigned moderators/support agents are allowed to add attachments. The operation links the file to the ticket and ensures all attachment actions are fully auditable with exact sequence ordering and actor/session context. File upload itself occurs through the dedicated attachment upload API prior to using this operation; this endpoint only associates an uploaded file with a ticket. The API enforces enterprise isolation and blocks attempts to attach unrelated files, files owned by another organization, or files in invalid/forbidden formats.","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/attachments","method":"post","summary":"Attach an already-uploaded file to a specific support ticket (wrtn_support_ticket_attachments).","description":"This endpoint enables authorized users (the ticket's submitting enterprise employee, current assigned moderator/support agent, or authorized personnel) to add a new attachment to a support ticket by associating an existing uploaded file. The ticketId path parameter specifies the support ticket, while the request body provides the required attachment information—namely the unique file ID (referencing wrtn_attachment_files), along with optional metadata such as custom filename or sequence order if needed per business logic. The API checks that the file being attached is owned by the same enterprise and is eligible for the current ticket context.\n\nSecurity checks are strictly enforced: only users with appropriate access to the ticket can attach a file, and attachments from different organizations or forbidden file types (as per file management policy) are denied. Every attachment action is audit-logged with the attaching actor/session info and full context for compliance. The response returns the full details of the linked attachment record, including file info, sequence, and association state. Attempts to attach files not previously uploaded, or to attach to foreign tickets, are explicitly denied with accurate business error messages.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket to which the new file will be attached. Must be a valid UUID representing an existing support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information about the attachment to associate. This must include the already-uploaded attachment file ID and optional metadata such as display filename or sequence ordering.","typeName":"IWrtnSupportTicketAttachment.ICreate"},"responseBody":{"description":"Full details of the newly created attachment record, including file info, sequence, and association to the target ticket.","typeName":"IWrtnSupportTicketAttachment"},"authorizationActors":["employee","moderator"],"name":"create","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation removes an attachment file from a support ticket. The operation is designed for use by authorized employees (who submitted the ticket) or moderators (internal support staff) who manage tickets for the associated enterprise or team. The API performs a hard delete from the support_ticket_attachments table, which is responsible for managing all file associations with support tickets and threaded replies. This endpoint is used when a user or moderator wishes to permanently disassociate and delete a specific file attachment from a given support ticket, identified by its unique ticketId and attachmentId.\n\nThe operation does not support soft deletion, as wrtn_support_ticket_attachments.deleted_at would indicate logical deletion for retention, but here we perform a permanent removal, reducing the risk of stale/mislinked files. On successful execution, the specified file attachment record will be deleted entirely from the support ticket, and the audit log will capture user and action details for compliance and traceability. If the attachment is used elsewhere (e.g., referenced from a threaded reply), checks must ensure no unintended data loss occurs, else appropriate errors are returned.\n\nAccess is controlled so that only users with the appropriate permissions (the ticket's submitter or enterprise support moderator for the relevant enterprise or team) may perform the operation. Unauthorized users are denied with a business-reasoned error, and all actions (including failed attempts) are audit-logged for compliance review.","description":"Remove an attachment file from a support ticket, permanently deleting the association from the wrtn_support_ticket_attachments table. This operation allows either the submitting employee (who owns the ticket) or a support moderator (internal staff) with access rights to disassociate and remove a file by its attachmentId. Multiple checks are performed to ensure the file is not referenced elsewhere in the system before allowing removal. If the attachment is still in use by another ticket or reply, a conflict error is returned with an actionable message. All actions (success and failure) are recorded in the compliance audit trail with user identity, session context, and operation details.\n\nThis hard delete operation enforces strict permission boundaries based on ticket ownership, enterprise affiliation, and support role. It supports traceability for regulatory compliance, and errors provide users with next steps (e.g., re-upload or contact moderator). Deleting a file attachment does not affect the underlying file in wrtn_attachment_files unless there are no remaining references; full file deletion is managed by separate retention policies. No request body is required; operation is driven strictly by path parameters.\n\nEdge cases, such as attempting to remove an already-deleted attachment or non-existent ticket, result in a business error explaining the problem. All error cases are audit-logged for compliance.","summary":"Permanently remove a file attachment from a support ticket (hard delete from support_ticket_attachments table) for authorized user.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket from which the attachment will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the file attachment to be deleted from the support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee","moderator"],"name":"erase","path":"/wrtnEnterprise/employee/support/tickets/{ticketId}/attachments/{attachmentId}","method":"delete","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation removes an attachment file from a support ticket. The operation is designed for use by authorized employees (who submitted the ticket) or moderators (internal support staff) who manage tickets for the associated enterprise or team. The API performs a hard delete from the support_ticket_attachments table, which is responsible for managing all file associations with support tickets and threaded replies. This endpoint is used when a user or moderator wishes to permanently disassociate and delete a specific file attachment from a given support ticket, identified by its unique ticketId and attachmentId.\n\nThe operation does not support soft deletion, as wrtn_support_ticket_attachments.deleted_at would indicate logical deletion for retention, but here we perform a permanent removal, reducing the risk of stale/mislinked files. On successful execution, the specified file attachment record will be deleted entirely from the support ticket, and the audit log will capture user and action details for compliance and traceability. If the attachment is used elsewhere (e.g., referenced from a threaded reply), checks must ensure no unintended data loss occurs, else appropriate errors are returned.\n\nAccess is controlled so that only users with the appropriate permissions (the ticket's submitter or enterprise support moderator for the relevant enterprise or team) may perform the operation. Unauthorized users are denied with a business-reasoned error, and all actions (including failed attempts) are audit-logged for compliance review.","description":"Remove an attachment file from a support ticket, permanently deleting the association from the wrtn_support_ticket_attachments table. This operation allows either the submitting employee (who owns the ticket) or a support moderator (internal staff) with access rights to disassociate and remove a file by its attachmentId. Multiple checks are performed to ensure the file is not referenced elsewhere in the system before allowing removal. If the attachment is still in use by another ticket or reply, a conflict error is returned with an actionable message. All actions (success and failure) are recorded in the compliance audit trail with user identity, session context, and operation details.\n\nThis hard delete operation enforces strict permission boundaries based on ticket ownership, enterprise affiliation, and support role. It supports traceability for regulatory compliance, and errors provide users with next steps (e.g., re-upload or contact moderator). Deleting a file attachment does not affect the underlying file in wrtn_attachment_files unless there are no remaining references; full file deletion is managed by separate retention policies. No request body is required; operation is driven strictly by path parameters.\n\nEdge cases, such as attempting to remove an already-deleted attachment or non-existent ticket, result in a business error explaining the problem. All error cases are audit-logged for compliance.","summary":"Permanently remove a file attachment from a support ticket (hard delete from support_ticket_attachments table) for authorized user.","parameters":[{"name":"ticketId","description":"Unique identifier of the support ticket from which the attachment will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the file attachment to be deleted from the support ticket.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee","moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/support/tickets/{ticketId}/attachments/{attachmentId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of support feedback records matching search and filter criteria. The endpoint operates on the wrtn_support_feedbacks table, which stores feedback submitted by enterprise employees. The API supports advanced filtering on feedback category, date ranges, employee, associated FAQ/ticket/documentation, and content search. The response is a paginated list of summary feedback information, used by moderators and enterprise administrators to review feedback trends, identify issues, and analyze satisfaction at scale. This operation does NOT allow creation, editing, or deletion of feedback (those use separate APIs).","description":"Search and retrieve a paginated list of support feedback records for the current user or enterprise. This operation provides advanced filtering and search capabilities for analyzing user-submitted feedback. Supported query parameters include feedback category, content keywords, date range, FAQ/documentation/ticket linkage, and employee identity. The API enforces role-based visibility: employees see only their own feedback; moderators see all feedback for their enterprise. Pagination parameters allow clients to control page size and offset, supporting large-scale data review for customer support quality assurance and product improvement.\n\nReturned feedback summaries include primary identifiers, category, detail, employee (object reference), associated FAQ/ticket/documentation (object references where applicable), and creation timestamp. Authorization checks are performed to restrict data access to only permitted users (feedback owner for employees; all feedback for moderators or support staff). Edge cases, such as no matches or access-restricted feedback, result in an empty result set or appropriate error. All search actions (including rejection due to insufficient permissions) are captured for audit logging and compliance reporting.","summary":"Search and retrieve a paginated list of support feedback records with filtering for authorized actors.","parameters":[],"requestBody":{"description":"Criteria for support feedback search and pagination, including filters for category, keyword, date range, FAQ/ticket/documentation linkage, and employee.","typeName":"IWrtnSupportFeedback.IRequest"},"responseBody":{"description":"Paginated list of support feedback summary records matching the search criteria, including employee and related object references.","typeName":"IPageIWrtnSupportFeedback.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/employee/support/feedbacks","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of support feedback records matching search and filter criteria. The endpoint operates on the wrtn_support_feedbacks table, which stores feedback submitted by enterprise employees. The API supports advanced filtering on feedback category, date ranges, employee, associated FAQ/ticket/documentation, and content search. The response is a paginated list of summary feedback information, used by moderators and enterprise administrators to review feedback trends, identify issues, and analyze satisfaction at scale. This operation does NOT allow creation, editing, or deletion of feedback (those use separate APIs).","description":"Search and retrieve a paginated list of support feedback records for the current user or enterprise. This operation provides advanced filtering and search capabilities for analyzing user-submitted feedback. Supported query parameters include feedback category, content keywords, date range, FAQ/documentation/ticket linkage, and employee identity. The API enforces role-based visibility: employees see only their own feedback; moderators see all feedback for their enterprise. Pagination parameters allow clients to control page size and offset, supporting large-scale data review for customer support quality assurance and product improvement.\n\nReturned feedback summaries include primary identifiers, category, detail, employee (object reference), associated FAQ/ticket/documentation (object references where applicable), and creation timestamp. Authorization checks are performed to restrict data access to only permitted users (feedback owner for employees; all feedback for moderators or support staff). Edge cases, such as no matches or access-restricted feedback, result in an empty result set or appropriate error. All search actions (including rejection due to insufficient permissions) are captured for audit logging and compliance reporting.","summary":"Search and retrieve a paginated list of support feedback records with filtering for authorized actors.","parameters":[],"requestBody":{"description":"Criteria for support feedback search and pagination, including filters for category, keyword, date range, FAQ/ticket/documentation linkage, and employee.","typeName":"IWrtnSupportFeedback.IRequest"},"responseBody":{"description":"Paginated list of support feedback summary records matching the search criteria, including employee and related object references.","typeName":"IPageIWrtnSupportFeedback.ISummary"},"authorizationActors":["employee","moderator"],"name":"index","path":"/wrtnEnterprise/moderator/support/feedbacks","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed feedback information for a specific support feedback record by its unique feedbackId. It corresponds to the wrtn_support_feedbacks table in the Prisma schema and provides complete detail about the feedback including the employee who submitted it and any referenced FAQ, documentation, or support ticket objects. The endpoint is typically used by employee actors to view their own submitted feedback or by authorized moderators for compliance and support review.","path":"/wrtnEnterprise/employee/support/feedbacks/{feedbackId}","method":"get","summary":"Retrieve detailed information of a specific support feedback record by feedbackId (wrtn_support_feedbacks).","description":"This operation fetches the full details of a single support feedback record identified by the feedbackId path parameter. It includes all feedback properties, such as the employee who submitted the feedback, category, detailed text, and any referenced entities including FAQ, documentation, or support ticket. The endpoint is secured so that employees can only access their own feedback and moderators may access for compliance or support review.\n\nSecurity considerations mandate proper authorization checks to ensure only permitted actors can access sensitive feedback information. Attempts to access another employee's feedback without sufficient authorization will result in an access-denied error and will be audit-logged according to business requirements.\n\nThe operation uses the wrtn_support_feedbacks table and closely follows related relationships for referenced FAQ, documentation, support ticket, and employee. Error handling includes 404 Not Found for nonexistent feedbackId, and 403 Forbidden for unauthorized access. This endpoint is commonly used as part of employee support and compliance workflows. \n\nRelated operations include listing all feedback submitted by an employee or retrieving summary statistics for support feedback across the organization, which are handled by separate endpoints. This endpoint focuses strictly on detail retrieval for a single feedback record.","parameters":[{"name":"feedbackId","description":"The unique identifier of the support feedback to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested support feedback including employee, references to FAQ, documentation, support ticket, category, detail, and timestamps.","typeName":"IWrtnSupportFeedback"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves detailed feedback information for a specific support feedback record by its unique feedbackId. It corresponds to the wrtn_support_feedbacks table in the Prisma schema and provides complete detail about the feedback including the employee who submitted it and any referenced FAQ, documentation, or support ticket objects. The endpoint is typically used by employee actors to view their own submitted feedback or by authorized moderators for compliance and support review.","path":"/wrtnEnterprise/moderator/support/feedbacks/{feedbackId}","method":"get","summary":"Retrieve detailed information of a specific support feedback record by feedbackId (wrtn_support_feedbacks).","description":"This operation fetches the full details of a single support feedback record identified by the feedbackId path parameter. It includes all feedback properties, such as the employee who submitted the feedback, category, detailed text, and any referenced entities including FAQ, documentation, or support ticket. The endpoint is secured so that employees can only access their own feedback and moderators may access for compliance or support review.\n\nSecurity considerations mandate proper authorization checks to ensure only permitted actors can access sensitive feedback information. Attempts to access another employee's feedback without sufficient authorization will result in an access-denied error and will be audit-logged according to business requirements.\n\nThe operation uses the wrtn_support_feedbacks table and closely follows related relationships for referenced FAQ, documentation, support ticket, and employee. Error handling includes 404 Not Found for nonexistent feedbackId, and 403 Forbidden for unauthorized access. This endpoint is commonly used as part of employee support and compliance workflows. \n\nRelated operations include listing all feedback submitted by an employee or retrieving summary statistics for support feedback across the organization, which are handled by separate endpoints. This endpoint focuses strictly on detail retrieval for a single feedback record.","parameters":[{"name":"feedbackId","description":"The unique identifier of the support feedback to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested support feedback including employee, references to FAQ, documentation, support ticket, category, detail, and timestamps.","typeName":"IWrtnSupportFeedback"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation allows an authenticated employee actor to submit a new support feedback record. It creates a row in the wrtn_support_feedbacks table, linking the feedback to the employee, optional referenced FAQ, documentation, or support ticket, and including the feedback category and detail. This is the main entry point for employees to provide feedback about the platform, services, or support, and is subject to audit and compliance restrictions. Moderator actors cannot create feedback as feedback submissions are reserved for customer employees per business rules.","path":"/wrtnEnterprise/employee/support/feedbacks","method":"post","summary":"Submit a new support feedback entry as an employee (wrtn_support_feedbacks).","description":"This operation enables an authenticated employee to submit new feedback via the support feedback system. Required fields include the feedback category and detail, with optional linkage to specific FAQ, documentation, or support tickets. On submission, the employee context is automatically bound via JWT and cannot be faked by the client. All feedback submissions are audit-logged and may be reviewed by moderators.\n\nBusiness logic ensures that only employees (not moderators) can create feedback. Submissions with missing or invalid references (e.g., non-existent FAQ or ticket IDs) will result in actionable errors. All feedback entries must meet compliance and business rules on allowable feedback categories and length.\n\nValidation rules specified in the Prisma schema must be enforced. Successful submission returns the detailed created feedback record. Related endpoints include retrieval of individual feedback and listing feedback by an employee or across the enterprise.","parameters":[],"requestBody":{"description":"Information required to create a new support feedback entry including feedback category, detail, and optional references to FAQ, documentation, or support ticket. The employee is inferred from the authentication context.","typeName":"IWrtnSupportFeedback.ICreate"},"responseBody":{"description":"The newly created support feedback record with full details including employee, references, feedback text, and timestamps.","typeName":"IWrtnSupportFeedback"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation updates an existing customer support feedback record in the WrtnEnterprise system. It maps to the wrtn_support_feedbacks table in the Prisma schema, allowing an employee to modify their own feedback submission regarding support, platform functionality, or documentation. The operation requires proper authorization and ensures that only permitted properties defined in the feedback IUpdate DTO can be changed. All updates are subject to compliance, audit logging, and enterprise data isolation policies.","path":"/wrtnEnterprise/employee/support/feedbacks/{feedbackId}","method":"put","summary":"Update a support feedback record in IWrtnSupportFeedback table","description":"Allows an authenticated employee to update their own previously submitted feedback. The operation validates that the requester is the original feedback author, and ensures that only permitted feedback fields are modifiable. The updated fields are strictly validated for format and business context. This operation does not permit changing feedback ownership or submitting a new feedback; it is strictly for modifications on existing feedback records by the original author.\n\nAudit trails automatically record who made the update, what was changed, and the session context, in compliance with enterprise requirements. Edit operations are only permitted if the feedback is not deleted or archived, and ownership checks are strictly enforced in the business logic. Any attempt to modify feedback by a different employee or an unauthorized actor will result in a forbidden error and will be logged for compliance.\n\nRelated APIs: POST /support/feedbacks for submission, GET /support/feedbacks/{feedbackId} for retrieval, and DELETE /support/feedbacks/{feedbackId} for deletion. All access and update events are fully audit-logged for compliance and traceability.","parameters":[{"name":"feedbackId","description":"Unique identifier of the support feedback to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Support feedback fields to update","typeName":"IWrtnSupportFeedback.IUpdate"},"responseBody":{"description":"The updated support feedback record","typeName":"IWrtnSupportFeedback"},"authorizationActors":["employee"],"name":"update","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes (hard removes) a specific support feedback entry from the system, corresponding to the wrtn_support_feedbacks table in the Prisma schema. It is designed to allow employees to remove their own feedback submissions when necessary. All deletions are subject to permission, audit, and enterprise data isolation policies. The operation ensures that only the original author or authorized employee can erase the feedback entry.","path":"/wrtnEnterprise/employee/support/feedbacks/{feedbackId}","method":"delete","summary":"Erase a support feedback record from IWrtnSupportFeedback table","description":"Permits an authenticated employee to permanently delete their own feedback record. This operation checks that the employee requesting the deletion is the author of the feedback and that the entry is not already deleted or locked for compliance reasons. Ownership and permission validations are enforced in business logic; unauthorized requests will be forbidden and logged for compliance review.\n\nThe deletion is a hard delete, meaning the record is physically removed from the database and cannot be recovered. This is in accordance with the schema, which does not specify a soft-delete pattern or retain deletion markers for compliance holds. All erase events are fully recorded in the system audit trail for operational and compliance review purposes. Any dependencies or associated records (such as links to tickets or documentation) will be handled according to business rules defined elsewhere.\n\nRelated operations: PUT /support/feedbacks/{feedbackId} for feedback update, POST /support/feedbacks for new feedback submission. All access and delete actions are audited and adhere to enterprise compliance requirements.","parameters":[{"name":"feedbackId","description":"Unique identifier of the support feedback to erase","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["employee"],"name":"erase","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of feature requests submitted by enterprise employees for new product features or improvements. It aggregates records from the wrtn_support_feature_requests table, allowing search across title, status, summary, and submission metadata. The API supports filtering by status, title, creator, and time window, and is indexable by moderator or authorized employee roles per business logic. Results include summary details, vote counts, submission status, and key business context fields, referencing the full entity for further drill down.","path":"/wrtnEnterprise/moderator/support/featureRequests","method":"patch","summary":"Retrieve a paginated, filtered list of feature requests submitted by employees.","description":"This API endpoint provides advanced search and pagination over the enterprise feature request records. Each feature request represents a distinct employee-submitted suggestion for new product features or improvements, tracked in the wrtn_support_feature_requests table.\n\nThe endpoint supports searches by creator, title, summary, status, date ranges, and supports sorting. It requires permission checks: moderators may search globally, while employees can only search within their enterprise domain. Each summarized result includes the associated employee context, current status, short summary, voting/aggregation fields, timestamps, and optional references to support tickets, documentation, or FAQs. \n\nRequests must specify filter criteria in the request body, supporting complex business queries. Results are returned in a paginated format, and include core index fields and links to related objects. Error handling includes input validation, authorization scope errors, and consistent business logic for out-of-bounds requests.","parameters":[],"requestBody":{"description":"Search criteria, filtering, and pagination parameters for feature request retrieval.","typeName":"IWrtnSupportFeatureRequest.IRequest"},"responseBody":{"description":"Paginated list of feature request summaries matching filter criteria, including employee context, title, status, voting aggregation, and submission timing.","typeName":"IPageIWrtnSupportFeatureRequest.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of feature requests submitted by enterprise employees for new product features or improvements. It aggregates records from the wrtn_support_feature_requests table, allowing search across title, status, summary, and submission metadata. The API supports filtering by status, title, creator, and time window, and is indexable by moderator or authorized employee roles per business logic. Results include summary details, vote counts, submission status, and key business context fields, referencing the full entity for further drill down.","path":"/wrtnEnterprise/employee/support/featureRequests","method":"patch","summary":"Retrieve a paginated, filtered list of feature requests submitted by employees.","description":"This API endpoint provides advanced search and pagination over the enterprise feature request records. Each feature request represents a distinct employee-submitted suggestion for new product features or improvements, tracked in the wrtn_support_feature_requests table.\n\nThe endpoint supports searches by creator, title, summary, status, date ranges, and supports sorting. It requires permission checks: moderators may search globally, while employees can only search within their enterprise domain. Each summarized result includes the associated employee context, current status, short summary, voting/aggregation fields, timestamps, and optional references to support tickets, documentation, or FAQs. \n\nRequests must specify filter criteria in the request body, supporting complex business queries. Results are returned in a paginated format, and include core index fields and links to related objects. Error handling includes input validation, authorization scope errors, and consistent business logic for out-of-bounds requests.","parameters":[],"requestBody":{"description":"Search criteria, filtering, and pagination parameters for feature request retrieval.","typeName":"IWrtnSupportFeatureRequest.IRequest"},"responseBody":{"description":"Paginated list of feature request summaries matching filter criteria, including employee context, title, status, voting aggregation, and submission timing.","typeName":"IPageIWrtnSupportFeatureRequest.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","prerequisites":[]},{"specification":"This operation retrieves the full detail of a specific feature request entry identified by its unique featureRequestId. It directly accesses the wrtn_support_feature_requests table and augments the response with all business-related metadata, including employee context, current status, summary, voting information, relation to support tickets and related documentation, and timestamps for auditing and compliance. Used for feature review, impact analysis, or moderation workflows.","path":"/wrtnEnterprise/moderator/support/featureRequests/{featureRequestId}","method":"get","summary":"Retrieve detailed information for a single feature request by ID.","description":"This endpoint returns the comprehensive details of a single feature request, as stored in the wrtn_support_feature_requests table, based on the provided featureRequestId path parameter.\n\nThe returned data includes all key properties: title, summary, status, timestamps, the submitting employee's profile (summary), the number of votes/aggregated interest, and referential links to related tickets, FAQs, or documentation if present. Access is permission-scoped: moderators can view any request, while employees can only access feature requests within their own enterprise. All audit and compliance requirements are met by embedding actor and timing context into the response. \n\nError handling covers not found (404), insufficient permission (403), or invalid identifiers (400), with detailed and consistent business error messaging.","parameters":[{"name":"featureRequestId","description":"Unique identifier of the target feature request to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed feature request information including employee summary, status, voting and aggregation fields, and business references.","typeName":"IWrtnSupportFeatureRequest"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation retrieves the full detail of a specific feature request entry identified by its unique featureRequestId. It directly accesses the wrtn_support_feature_requests table and augments the response with all business-related metadata, including employee context, current status, summary, voting information, relation to support tickets and related documentation, and timestamps for auditing and compliance. Used for feature review, impact analysis, or moderation workflows.","path":"/wrtnEnterprise/employee/support/featureRequests/{featureRequestId}","method":"get","summary":"Retrieve detailed information for a single feature request by ID.","description":"This endpoint returns the comprehensive details of a single feature request, as stored in the wrtn_support_feature_requests table, based on the provided featureRequestId path parameter.\n\nThe returned data includes all key properties: title, summary, status, timestamps, the submitting employee's profile (summary), the number of votes/aggregated interest, and referential links to related tickets, FAQs, or documentation if present. Access is permission-scoped: moderators can view any request, while employees can only access feature requests within their own enterprise. All audit and compliance requirements are met by embedding actor and timing context into the response. \n\nError handling covers not found (404), insufficient permission (403), or invalid identifiers (400), with detailed and consistent business error messaging.","parameters":[{"name":"featureRequestId","description":"Unique identifier of the target feature request to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed feature request information including employee summary, status, voting and aggregation fields, and business references.","typeName":"IWrtnSupportFeatureRequest"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation allows an enterprise employee to submit a new feature request to the support system. The feature request is persisted to the wrtn_support_feature_requests table. The operation requires the employee to be authenticated, with the current employee determined from the JWT session, and creates a new feature request with a title, summary, status, and potentially references to documentation, FAQ, or a linked support ticket. Employees can provide a summary explaining the feature's benefit and business rationale. The operation enforces unique request titles, automatically associates the current employee as the author, and sets the initial status to 'open'. Duplicate or ambiguous requests should be prevented at the business rule layer. Upon successful creation, the full detail of the new feature request record is returned. This endpoint supports employee-driven feedback and the B2B SaaS platform's customer-driven roadmap process.","path":"/wrtnEnterprise/employee/support/featureRequests","method":"post","summary":"Create a new feature request submitted by enterprise employee","description":"Employees of an enterprise may use this endpoint to submit requests for new product features or improvements. The API creates a new record in the wrtn_support_feature_requests table, capturing the author (determined from authentication context), summary, title, and optional context such as a related FAQ, documentation item, or support ticket. The operation validates that the title is unique and well-formed and that summarizing rationale is provided. Upon creation, status is initialized to 'open', and the feature request becomes available for aggregation, voting, and roadmap review. Security is enforced so that only employees may submit requests for their own enterprise; moderators use internal product management interfaces. When feedback or roadmap aggregation is needed, feature requests submitted here feed analytics and customer engagement modules. Standard business rules and error codes apply for duplicate requests, invalid references, or insufficient permissions. Responses include the complete feature request entity with references populated where appropriate.","parameters":[],"requestBody":{"description":"Data required to create a new feature request: must include a unique title, summary, and any relevant contextual references (support ticket, FAQ, documentation). Author employee is determined by authentication.","typeName":"IWrtnSupportFeatureRequest.ICreate"},"responseBody":{"description":"The complete created feature request entity, including all provided data, references, and metadata.","typeName":"IWrtnSupportFeatureRequest"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"This operation allows an authorized enterprise employee to update an existing feature request in the support system. The operation modifies details of the record in the wrtn_support_feature_requests table, such as title, summary, or status. Update operations are restricted to the original author or permitted employees by business rules (authorization and ownership checks are enforced). The endpoint validates the status transition (e.g., open → under_review → planned) and that any title or summary changes maintain uniqueness and completeness requirements. Attempts to update a feature request not belonging to the employee or using an invalid state transition are rejected with clear error messages. Upon success, the updated feature request record is returned, with all changes persisted and references maintained.","path":"/wrtnEnterprise/employee/support/featureRequests/{featureRequestId}","method":"put","summary":"Update an existing feature request owned by the authenticated employee","description":"Enterprise employees may use this operation to edit feature requests they have previously submitted. Permitted updates include modifying the request title (if unique), summary, and changing the feature request's status to valid next states in the product management workflow. The API enforces rigorous checks for request ownership, proper status transitions, and valid input; employees may not edit or change requests belonging to others. All updates are tracked with appropriate timestamps and retained for audit compliance. Invalid attempts, such as editing requests from other enterprises, invalid references, or unpermitted status transitions, will result in error responses as per business and compliance requirements. On successful update, all current feature request data and related references are returned in full.","parameters":[{"name":"featureRequestId","description":"Unique identifier for the target feature request to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the existing feature request; title, summary, status, and references. Author and update actor are determined via authentication; only permitted updates are allowed.","typeName":"IWrtnSupportFeatureRequest.IUpdate"},"responseBody":{"description":"The updated full detail of the feature request after applying requested changes, or error information if unsuccessful.","typeName":"IWrtnSupportFeatureRequest"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes a feature request from the wrtn_support_feature_requests table. It is used to enable moderators to remove feature requests that are no longer relevant, spam, or otherwise should not remain in the system. This operation performs a hard delete as there is no field supporting soft deletion specified in the schema for this entity. Business logic enforces that only moderator actors may perform feature request deletion. All deletion events are rigorously audit-logged, including the actor, session, and reason for deletion, supporting regulatory compliance and internal transparency. Feature request removal is irreversible and removes the feature request from all related queries and dashboards. Deleted feature requests can no longer be viewed or managed. Attempting to delete a non-existent or already-deleted feature request will result in an appropriate error response.","description":"This API endpoint allows moderators to permanently remove a specific feature request from the system. The wrtn_support_feature_requests table acts as the core storage for all submitted feature requests, linking each feature to its submitter, associated support ticket, FAQ entry, or related documentation. Deletion is reserved for internal moderator actors only; enterprise employees cannot directly delete feature requests. \n\nWhen invoked, the system will immediately and permanently delete the targeted feature request entry along with removing all links to associated votes and histories. The business logic ensures referential integrity, properly handling the removal from aggregated feature requests lists, and ensuring that any upvote association with this feature are also deleted for a clean state. The feature request is fully removed from interfaces and reporting dashboards, and can no longer be referenced or voted on by employees. \n\nSecurity considerations restrict this endpoint to authenticated moderator actors, and each invocation is traceable in the audit log, including requestor identity, timestamp, targeted feature request, and outcome status. Attempts to delete a feature request not found in the database, or already permanently deleted, will return a relevant error. A successful deletion operation results in a confirmation with no response body content.\n\nNo soft-delete logic is present; the removal is absolute and non-recoverable. This operation should be used judiciously by moderator staff after verifying that deletion is truly required.","summary":"Permanently delete a feature request entry from the wrtn_support_feature_requests table","parameters":[{"name":"featureRequestId","description":"Unique identifier of the target feature request to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/support/featureRequests/{featureRequestId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of all votes associated with a specific feature request. Operating on the wrtn_support_feature_votes table, it enables moderators and employees to analyze the voting interest and support attached to each feature proposal. The results may be used to observe user engagement trends, prioritize development, or audit voting patterns. The endpoint supports search, sorting, and pagination, with results returned in wrappers including summary information of voting employees and vote timestamps. Relevant joins to the wrtn_support_feature_requests table are performed to enrich the returned data. This operation is critical for both product management decision-making and compliance with feature voting visibility requirements.","description":"This API operation provides a filtered, paginated list of all recorded votes on a particular feature request, as stored in the wrtn_support_feature_votes table. Feature request votes are directly associated with both the feature request and the voting employee, and votes are used for aggregation in roadmap prioritization, reporting, and notification workflows.\n\nUpon invocation, the API will return an ordered list of feature request votes, each accompanied by summary information about the employee actor who cast that vote and the timestamp when the vote was made. The results may be sorted by creation date or filtered by additional criteria as supported by the request body schema. The endpoint responds with a paginated structure, facilitating the retrieval of large vote sets without performance degradation.\n\nThis operation is important for both internal moderators and enterprise employee actors who need to track current interest levels, aggregate feedback trends, and support open/voting feature workflows. Security logic ensures users can only view vote information for feature requests visible in their scope. For compliance, all vote retrievals are logged for audit trail purposes, including actor identity and the specific feature request targeted. Invalid or non-existent feature request identifiers will yield appropriate error responses.","summary":"Retrieve paginated, filterable votes for a specific feature request","parameters":[{"name":"featureRequestId","description":"Unique identifier for the targeted feature request for which to retrieve votes","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination details for retrieving votes on a feature request","typeName":"IWrtnSupportFeatureVote.IRequest"},"responseBody":{"description":"Paginated list of votes and voter summaries for the specified feature request","typeName":"IPageIWrtnSupportFeatureVote.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","path":"/wrtnEnterprise/moderator/support/featureRequests/{featureRequestId}/votes","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of all votes associated with a specific feature request. Operating on the wrtn_support_feature_votes table, it enables moderators and employees to analyze the voting interest and support attached to each feature proposal. The results may be used to observe user engagement trends, prioritize development, or audit voting patterns. The endpoint supports search, sorting, and pagination, with results returned in wrappers including summary information of voting employees and vote timestamps. Relevant joins to the wrtn_support_feature_requests table are performed to enrich the returned data. This operation is critical for both product management decision-making and compliance with feature voting visibility requirements.","description":"This API operation provides a filtered, paginated list of all recorded votes on a particular feature request, as stored in the wrtn_support_feature_votes table. Feature request votes are directly associated with both the feature request and the voting employee, and votes are used for aggregation in roadmap prioritization, reporting, and notification workflows.\n\nUpon invocation, the API will return an ordered list of feature request votes, each accompanied by summary information about the employee actor who cast that vote and the timestamp when the vote was made. The results may be sorted by creation date or filtered by additional criteria as supported by the request body schema. The endpoint responds with a paginated structure, facilitating the retrieval of large vote sets without performance degradation.\n\nThis operation is important for both internal moderators and enterprise employee actors who need to track current interest levels, aggregate feedback trends, and support open/voting feature workflows. Security logic ensures users can only view vote information for feature requests visible in their scope. For compliance, all vote retrievals are logged for audit trail purposes, including actor identity and the specific feature request targeted. Invalid or non-existent feature request identifiers will yield appropriate error responses.","summary":"Retrieve paginated, filterable votes for a specific feature request","parameters":[{"name":"featureRequestId","description":"Unique identifier for the targeted feature request for which to retrieve votes","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination details for retrieving votes on a feature request","typeName":"IWrtnSupportFeatureVote.IRequest"},"responseBody":{"description":"Paginated list of votes and voter summaries for the specified feature request","typeName":"IPageIWrtnSupportFeatureVote.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","path":"/wrtnEnterprise/employee/support/featureRequests/{featureRequestId}/votes","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"Retrieves a single specific vote on an enterprise feature request. This operation queries the vote record by its unique identifier (voteId), within the context of a specific feature request (featureRequestId). It is primarily used in scenarios where an employee wishes to review or verify their voting record, or for moderators to audit voting activity on product roadmap items.\n\nThis operation interfaces with the wrtn_support_feature_votes Prisma table. The response includes full context: the voting employee (referenced by employeeId), the related feature request, the time the vote was made, and relevant summary details for audit/compliance. Authorization ensures that only the voting employee, the requestor of the feature, or a moderator can access this endpoint, in compliance with product governance and privacy requirements.","path":"/wrtnEnterprise/employee/support/featureRequests/{featureRequestId}/votes/{voteId}","method":"get","summary":"Retrieve a specific feature request vote by its ID for auditing or result verification","description":"Retrieve a single feature request vote from the system by providing both the feature request ID and the specific vote ID. This endpoint is typically utilized by employees or moderators to verify a particular voting record, especially for audit trail validation, troubleshooting duplicate or erroneous votes, or checking compliance with one-vote-per-employee rules.\n\nThe vote is associated with a wrtn_support_feature_requests entry and is linked directly to a specific employee via their unique identifier. Security measures ensure that only authorized employees (the voter or the requestor of the feature), or moderators with the appropriate privilege, can view the vote details.\n\nOn success, the endpoint returns a detailed response including vote metadata, voting employee summary data, basic information about the associated feature request, and the timestamp of the vote. If the vote does not exist, or the user does not have the required permissions, the system returns an appropriate error message consistent with enterprise privacy and audit standards.\n\nThis operation is essential for transparency, governance, and compliance required in the enterprise feature request and product management workflow.","parameters":[{"name":"featureRequestId","description":"Unique identifier for the feature request related to the vote","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier for the specific feature request vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The specific feature request vote record and its full audit context.","typeName":"IWrtnSupportFeatureVote"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"Retrieves a single specific vote on an enterprise feature request. This operation queries the vote record by its unique identifier (voteId), within the context of a specific feature request (featureRequestId). It is primarily used in scenarios where an employee wishes to review or verify their voting record, or for moderators to audit voting activity on product roadmap items.\n\nThis operation interfaces with the wrtn_support_feature_votes Prisma table. The response includes full context: the voting employee (referenced by employeeId), the related feature request, the time the vote was made, and relevant summary details for audit/compliance. Authorization ensures that only the voting employee, the requestor of the feature, or a moderator can access this endpoint, in compliance with product governance and privacy requirements.","path":"/wrtnEnterprise/moderator/support/featureRequests/{featureRequestId}/votes/{voteId}","method":"get","summary":"Retrieve a specific feature request vote by its ID for auditing or result verification","description":"Retrieve a single feature request vote from the system by providing both the feature request ID and the specific vote ID. This endpoint is typically utilized by employees or moderators to verify a particular voting record, especially for audit trail validation, troubleshooting duplicate or erroneous votes, or checking compliance with one-vote-per-employee rules.\n\nThe vote is associated with a wrtn_support_feature_requests entry and is linked directly to a specific employee via their unique identifier. Security measures ensure that only authorized employees (the voter or the requestor of the feature), or moderators with the appropriate privilege, can view the vote details.\n\nOn success, the endpoint returns a detailed response including vote metadata, voting employee summary data, basic information about the associated feature request, and the timestamp of the vote. If the vote does not exist, or the user does not have the required permissions, the system returns an appropriate error message consistent with enterprise privacy and audit standards.\n\nThis operation is essential for transparency, governance, and compliance required in the enterprise feature request and product management workflow.","parameters":[{"name":"featureRequestId","description":"Unique identifier for the feature request related to the vote","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier for the specific feature request vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The specific feature request vote record and its full audit context.","typeName":"IWrtnSupportFeatureVote"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"Creates a new vote for a specific enterprise feature request. Employees can use this endpoint to express interest in or support a feature request. Moderators may also record a vote on behalf of an employee for compliance or support reasons. This operation checks for and prevents duplicate voting per employee per feature request, enforcing the system's voting policy. The workflow is atomic and prevents race conditions, especially in high-traffic enterprise product feedback scenarios.\n\nThe operation maps directly to the wrtn_support_feature_votes table. It strictly enforces uniqueness via the composite (feature_request_id, employee_id) constraint. The request body contains all information required to create the vote, and the response returns the newly created vote with full context for the UI and audit log.\n\nThis endpoint supports regulatory requirements for product governance, auditability of feedback aggregation, and transparent feature prioritization workflows.","path":"/wrtnEnterprise/employee/support/featureRequests/{featureRequestId}/votes","method":"post","summary":"Create a new vote for an enterprise feature request","description":"Register a new vote for an enterprise feature request. This endpoint allows employees to express support for or interest in a particular feature by adding an upvote to the specified request. Moderators may also use this endpoint to add a vote on behalf of an employee for special compliance or support scenarios. The system ensures that each employee can only vote once per feature request by enforcing a composite unique (feature_request_id, employee_id) constraint.\n\nUpon successful creation, this operation returns the complete vote record, including the voting employee, associated feature request, and the timestamp the vote was cast. Business logic ensures that duplicate voting attempts are rejected with a clear error. Voting activity is fully audited for compliance and can be traced back to both the employee and the feature request for transparency. If the feature request does not exist, or if the action is not authorized per the employee's privileges, a suitable error response is returned consistent with audit and privacy requirements.\n\nThis operation is required for any feedback-driven product development workflows, feature prioritization, and transparent communication of customer needs within large enterprises.","parameters":[{"name":"featureRequestId","description":"Unique identifier for the feature request to be voted on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote creation DTO; identifies the voting actor and (optionally) contextual metadata. Employee ID is determined from the JWT context, not the client request.","typeName":"IWrtnSupportFeatureVote.ICreate"},"responseBody":{"description":"The created vote record with audit/employee/feature request context.","typeName":"IWrtnSupportFeatureVote"},"authorizationType":null,"authorizationActor":"employee","name":"create","prerequisites":[]},{"specification":"Creates a new vote for a specific enterprise feature request. Employees can use this endpoint to express interest in or support a feature request. Moderators may also record a vote on behalf of an employee for compliance or support reasons. This operation checks for and prevents duplicate voting per employee per feature request, enforcing the system's voting policy. The workflow is atomic and prevents race conditions, especially in high-traffic enterprise product feedback scenarios.\n\nThe operation maps directly to the wrtn_support_feature_votes table. It strictly enforces uniqueness via the composite (feature_request_id, employee_id) constraint. The request body contains all information required to create the vote, and the response returns the newly created vote with full context for the UI and audit log.\n\nThis endpoint supports regulatory requirements for product governance, auditability of feedback aggregation, and transparent feature prioritization workflows.","path":"/wrtnEnterprise/moderator/support/featureRequests/{featureRequestId}/votes","method":"post","summary":"Create a new vote for an enterprise feature request","description":"Register a new vote for an enterprise feature request. This endpoint allows employees to express support for or interest in a particular feature by adding an upvote to the specified request. Moderators may also use this endpoint to add a vote on behalf of an employee for special compliance or support scenarios. The system ensures that each employee can only vote once per feature request by enforcing a composite unique (feature_request_id, employee_id) constraint.\n\nUpon successful creation, this operation returns the complete vote record, including the voting employee, associated feature request, and the timestamp the vote was cast. Business logic ensures that duplicate voting attempts are rejected with a clear error. Voting activity is fully audited for compliance and can be traced back to both the employee and the feature request for transparency. If the feature request does not exist, or if the action is not authorized per the employee's privileges, a suitable error response is returned consistent with audit and privacy requirements.\n\nThis operation is required for any feedback-driven product development workflows, feature prioritization, and transparent communication of customer needs within large enterprises.","parameters":[{"name":"featureRequestId","description":"Unique identifier for the feature request to be voted on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote creation DTO; identifies the voting actor and (optionally) contextual metadata. Employee ID is determined from the JWT context, not the client request.","typeName":"IWrtnSupportFeatureVote.ICreate"},"responseBody":{"description":"The created vote record with audit/employee/feature request context.","typeName":"IWrtnSupportFeatureVote"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation enables an authenticated employee to permanently remove their upvote or interest from a specific feature request in the customer support and roadmap voting system. It operates on the wrtn_support_feature_votes table, which links employees to feature requests they have supported or voted for. Deleting a feature vote is an explicit user action that disassociates the employee from the given request, lowering its support tally and removing the user's interest from future notification flows for that feature. The operation requires both the featureRequestId (identifying the feature request) and the voteId (unique vote identifier) as path parameters, ensuring that only authorized actors can remove their own votes. It performs a hard delete on the wrtn_support_feature_votes row, removing the record entirely from the system with full audit for compliance.","path":"/wrtnEnterprise/employee/support/featureRequests/{featureRequestId}/votes/{voteId}","method":"delete","description":"Remove a user's vote for a particular customer support feature request. This endpoint allows an authenticated employee to revoke their earlier upvote/interest in a given feature request, directly decreasing its aggregate support/vote count. The operation references the wrtn_support_feature_votes table from the Prisma schema, ensuring traceability for audit and compliance. Only the owner of the vote (the employee) is permitted to delete it; unauthorized attempts will yield an appropriate error. Deleting a vote also updates notification flows and removes the user from any future roadmap updates regarding the feature. All actions are fully logged for audit trail purposes.\n\nThis operation requires two path parameters: featureRequestId specifies the target feature request, and voteId identifies the individual vote to be deleted. The system validates that the vote belongs to the requesting employee, and on success, permanently removes the record from the wrtn_support_feature_votes table. If the vote does not exist, is already deleted, or is not owned by the employee, an error is returned. Related feature request entries remain intact, with only the association being removed.\n\nSecurity is enforced via authentication and ownership checks, ensuring that users cannot delete votes belonging to other actors. Audited events are recorded for every delete action, supporting compliance and analytics reporting of feature request engagement over time.","summary":"Permanently remove a user's vote from a feature request (wrtn_support_feature_votes table)","parameters":[{"name":"featureRequestId","description":"Unique identifier of the feature request for which the vote is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the user's vote to be removed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","prerequisites":[]},{"specification":"This operation retrieves a paginated list of all support ticket categories configured in the customer support module. It operates on the wrtn_support_ticket_categories table in the Prisma schema and supports advanced filtering, sorting, and searching of ticket categories, enabling efficient management of the help desk taxonomy. Administrators and support moderators can use this endpoint to review category labels, business codes, and descriptions, facilitating accurate ticket categorization, analytics, and SLA policy definition. This API is read-only and exposes category metadata for client display and staff assignment workflows.","path":"/wrtnEnterprise/moderator/support/ticketCategories","method":"patch","description":"Retrieve all support ticket category definitions in a searchable, paginated list, enabling support desk managers and internal moderators to efficiently browse, filter, and manage support category data structures. This operation references the wrtn_support_ticket_categories table, returning category name, code, and description fields as defined in the Prisma schema. It supports advanced query parameters for filtering categories by code, name, or description, assisting in taxonomy curation and organizational compliance.\n\nThis endpoint is typically used in help desk management portals or internal analytics dashboards where staff need to verify, update, or audit the available support ticket categories. Access is typically restricted to moderators, administrators, or authorized support operators. The response structure is optimized for list views and integration with category-based routing or assignment automation flows. Any direct creation, update, or deletion of ticket categories is handled by separate endpoints; this is strictly a read/search/list operation.\n\nSecurity and access control are enforced via moderator authentication, ensuring only privileged support actors can query the full category list. The operation returns paginated category summary DTOs suitable for display in admin interfaces and business reporting tools.","summary":"Search and return all support ticket categories in the help desk system (wrtn_support_ticket_categories table)","parameters":[],"requestBody":{"description":"Query and filter criteria for support ticket category search including pagination and search text fields.","typeName":"IWrtnSupportTicketCategory.IRequest"},"responseBody":{"description":"Paginated list of support ticket category summary entries matching search criteria.","typeName":"IPageIWrtnSupportTicketCategory.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves the details of a specific support ticket category using its unique identifier. It accesses the wrtn_support_ticket_categories table in the database, which contains master data for support ticket categorization, including codes, names, and descriptions. This endpoint enables administrators and support agents to fetch business-level category configuration and internationalized details for ticket routing, SLA logic, and analytics.\n\nThe endpoint expects the ticketCategoryId as a UUID path parameter and returns the complete category data if found. If the category does not exist, the operation will return a 404 Not Found with an appropriate error message. Access to this endpoint is generally limited to authenticated moderator and employee users, as ticket category management is typically administrative.\n\nPrimary use cases include displaying category options in support dashboards, powering category selection UIs, and allowing role-appropriate modifications. The operation is essential for ensuring consistent categorization of support requests and facilitating downstream reporting and workflow automation. It is typically used with other support management endpoints such as ticket creation, update, and category listing.","description":"Retrieve details for a specific support ticket category based on its unique identifier from the master ticket categories table.\n\nThis API is intended for use by authenticated moderator and employee actors who require business logic, name, code, and description for support ticket routing, SLA handling, and reporting. The endpoint fetches the full definition of the target ticket category, which is necessary for support workflows, UI dropdowns, ticket reporting, and compliance audits.\n\nSecurity is enforced according to the user's JWT actor context. The handler will return a 404 Not Found if the category does not exist. Because support ticket categories are core master data, unauthorized manipulation is strictly prohibited. This operation is typically invoked in the context of support ticket creation, editing, or analytics dashboard configuration.\n\nErrors will be handled in a business-explanatory and actionable way, with precise messages when a category is not found or the identifier is invalid.","summary":"Get details for a specific support ticket category (wrtn_support_ticket_categories) by ID.","parameters":[{"name":"ticketCategoryId","description":"Unique identifier of the support ticket category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the specified support ticket category.","typeName":"IWrtnSupportTicketCategory"},"authorizationActors":["moderator","employee"],"name":"at","path":"/wrtnEnterprise/moderator/support/ticketCategories/{ticketCategoryId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a specific support ticket category using its unique identifier. It accesses the wrtn_support_ticket_categories table in the database, which contains master data for support ticket categorization, including codes, names, and descriptions. This endpoint enables administrators and support agents to fetch business-level category configuration and internationalized details for ticket routing, SLA logic, and analytics.\n\nThe endpoint expects the ticketCategoryId as a UUID path parameter and returns the complete category data if found. If the category does not exist, the operation will return a 404 Not Found with an appropriate error message. Access to this endpoint is generally limited to authenticated moderator and employee users, as ticket category management is typically administrative.\n\nPrimary use cases include displaying category options in support dashboards, powering category selection UIs, and allowing role-appropriate modifications. The operation is essential for ensuring consistent categorization of support requests and facilitating downstream reporting and workflow automation. It is typically used with other support management endpoints such as ticket creation, update, and category listing.","description":"Retrieve details for a specific support ticket category based on its unique identifier from the master ticket categories table.\n\nThis API is intended for use by authenticated moderator and employee actors who require business logic, name, code, and description for support ticket routing, SLA handling, and reporting. The endpoint fetches the full definition of the target ticket category, which is necessary for support workflows, UI dropdowns, ticket reporting, and compliance audits.\n\nSecurity is enforced according to the user's JWT actor context. The handler will return a 404 Not Found if the category does not exist. Because support ticket categories are core master data, unauthorized manipulation is strictly prohibited. This operation is typically invoked in the context of support ticket creation, editing, or analytics dashboard configuration.\n\nErrors will be handled in a business-explanatory and actionable way, with precise messages when a category is not found or the identifier is invalid.","summary":"Get details for a specific support ticket category (wrtn_support_ticket_categories) by ID.","parameters":[{"name":"ticketCategoryId","description":"Unique identifier of the support ticket category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the specified support ticket category.","typeName":"IWrtnSupportTicketCategory"},"authorizationActors":["moderator","employee"],"name":"at","path":"/wrtnEnterprise/employee/support/ticketCategories/{ticketCategoryId}","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new support ticket category in the wrtn_support_ticket_categories table. It allows authorized moderator users to define a unique category code, display name, and description, which are subsequently used to classify and organize support tickets across all customer and internal workflows.\n\nThe endpoint accepts a request body with all required business fields and enforces uniqueness constraints on category code and name. If a code or name conflict arises, the API returns a business-reasoned validation error. Successful creation returns the full category definition, eligible for immediate use in ticket routing, SLA assignment, and analytics.\n\nThis operation is vital for scaling support taxonomy as business needs evolve, enabling rapid introduction of new ticket types or issue classes. It is strictly restricted to actors with moderator privileges as ticket categories are part of core administrative data. The operation is used in conjunction with endpoints for ticket listing, updating, and managing category-based reports.","description":"Create a new support ticket category for classifying and routing support tickets in line with business and compliance logic.\n\nThis API is restricted to moderator actors who are responsible for support system configuration and taxonomy. It accepts an object containing a unique code, descriptive name, and extended category description. If the provided code or name is not unique within the system, the operation will fail with a validation error explaining the conflict.\n\nThe ticket category is used throughout the support module to enable advanced filtering, reporting, escalation matrix configuration, and workflow automation. Security is strictly enforced to prevent unauthorized actors from modifying support master data.\n\nUpon success, the full support ticket category definition is returned for registration in UI elements and API clients. Errors are precise and actionable for common issues such as code duplication or invalid payloads.","summary":"Create a new support ticket category (wrtn_support_ticket_categories) for organizing support tickets.","parameters":[],"requestBody":{"description":"Information required to create a new support ticket category, including unique code, name, and description.","typeName":"IWrtnSupportTicketCategory.ICreate"},"responseBody":{"description":"Details of the newly created support ticket category.","typeName":"IWrtnSupportTicketCategory"},"authorizationActors":["moderator"],"name":"create","path":"/wrtnEnterprise/moderator/support/ticketCategories","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the information of an existing support ticket category in the CustomerSupport domain. The endpoint allows authorized moderators to modify the category's name or description to correct, clarify or translate category titles, or to provide better guidance to support teams and customers. The updates are tracked for audit purposes as required by business compliance rules. The operation maps to the wrtn_support_ticket_categories table in the database.","path":"/wrtnEnterprise/moderator/support/ticketCategories/{ticketCategoryId}","method":"put","summary":"Update a support ticket category by its ID in wrtn_support_ticket_categories","description":"This API operation allows an authorized moderator to update an existing support ticket category, making corrections or improvements to its name and description. The support ticket category is identified by a unique ticketCategoryId path parameter representing the primary key of the wrtn_support_ticket_categories table. Typical use cases include renaming categories to better reflect changing support workflows, improving the clarity of category descriptions, or localizing category names. \n\nUser must provide the updated name and/or description fields in the request body, which are validated for uniqueness and content. The operation logs the modification with the user ID and timestamp for compliance and business auditing purposes. Only moderator actors have permission to perform this operation; employees do not have access. If the category with specified ticketCategoryId does not exist, a 404 error is returned. Validation errors (such as duplicate names) are returned with actionable error messages.\n\nThis operation closely aligns with business logic requiring clear and well-categorized support ticket flows, enabling dynamic reorganization as service needs evolve. Related APIs include creating new categories, deleting categories, and listing all categories.","parameters":[{"name":"ticketCategoryId","description":"Unique identifier of the support ticket category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Support ticket category update information including name and description","typeName":"IWrtnSupportTicketCategory.IUpdate"},"responseBody":{"description":"Support ticket category entity after update","typeName":"IWrtnSupportTicketCategory"},"authorizationActors":["moderator"],"name":"update","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation deletes a support ticket category from the CustomerSupport domain using its unique ID. It performs a permanent removal (hard delete) from the wrtn_support_ticket_categories table. The deletion is strictly limited to moderator actors for compliance and workflow integrity reasons. All deletion events are logged with actor and timestamp for audit and compliance. Only unused categories can be deleted; if the category is referenced by active tickets, deletion is blocked and returns an error. Deleted categories are no longer available for new ticket creation, and their removal ensures category lists remain relevant and up-to-date.","path":"/wrtnEnterprise/moderator/support/ticketCategories/{ticketCategoryId}","method":"delete","summary":"Permanently delete a support ticket category by ID in wrtn_support_ticket_categories","description":"This API operation allows an authorized moderator to permanently remove a support ticket category from the system by specifying its unique ticketCategoryId. It operates on the wrtn_support_ticket_categories table. This is a hard delete operation: the category is completely removed from the database if not referenced by any existing support tickets. Deletion requests for categories that are still in use by support tickets will be rejected to maintain data integrity, with a business logic error returned detailing which tickets are blocking deletion.\n\nOnly moderator actors are authorized to perform this operation; employees do not have access. The deletion event is audit-logged with moderator identity and timestamp to meet compliance requirements. If the category with the specified ticketCategoryId does not exist, a 404 error is returned. If the operation succeeds, the deleted category is no longer available for new or existing ticket assignments, and is removed from category listing endpoints.","parameters":[{"name":"ticketCategoryId","description":"Unique identifier of the support ticket category to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation enables searching and filtering of all available support ticket statuses in the system. It is associated with the wrtn_support_ticket_statuses table, providing system-wide access to defined ticket status codes (such as new, assigned, resolved, closed) used throughout the customer support workflow. The API supports complex filtering, sorting, and pagination, allowing admin and support tools to retrieve current and historical status entries, examine status definitions, and use them in UI dropdowns or reporting.\n\nThe search operation follows best practices for metadata entities: it exposes full status definitions with options for filtering by code, label, terminal flag, and supports free-text search on label and code. This is crucial for configuration screens and reporting tools that need to present the set of all possible support ticket workflows, as well as for moderators auditing support flows. Filtering by status or searching by partial name is supported for UI tools.\n\nSecurity considerations: Only admin-level users (moderators) are allowed to access this endpoint. Employees (enterprise users) do not have access to raw status lists, as ticket workflow configuration is moderated at the system level. The endpoint does not expose any sensitive business or user data, only reference metadata used in support workflows.\n\nThis operation is directly related to other support management endpoints, such as ticket creation, update, and reporting. Error handling returns standard pagination and search errors, as well as a 404 if no data is found for the query criteria.","description":"Retrieve a filtered and paginated list of all support ticket statuses available in the system. This operation is used by system moderators and support agents to examine or configure support ticket workflow transitions, ensuring visibility into workflow codes and display labels.\n\nThe operation supports advanced filtering by status code, label, and whether the status is terminal or active, as well as free-text search for quick lookup. Results are paginated and ordered by display label. Employees are not permitted on this endpoint—access is strictly for internal system actors (moderators) managing the ticket status catalogue. Returned data reflects the structure of the wrtn_support_ticket_statuses table, including code, label, and terminal flag, but does not contain information about tickets or users.\n\nThis API is important for support UI administrators configuring automated flows, reporting KPIs on ticket lifecycle, or auditing permitted status transitions. Care is taken to ensure the exposure of only status metadata, not transactional ticket or user data. Standard error messages indicate absence of records or invalid filter criteria.","summary":"Search and retrieve a paginated, filtered list of all support ticket statuses (moderator only)","parameters":[],"requestBody":{"description":"Search and filter criteria for support ticket status listing, supporting pagination, sorting, and free-text search by label or code.","typeName":"IWrtnSupportTicketStatus.IRequest"},"responseBody":{"description":"Paginated list of support ticket statuses matching the search criteria, including status code, label, and terminal/completion flag.","typeName":"IPageIWrtnSupportTicketStatus"},"authorizationType":null,"authorizationActor":"moderator","name":"index","path":"/wrtnEnterprise/moderator/support/ticketStatuses","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the details of a single support ticket status from the wrtn_support_ticket_statuses table based on its unique status identifier (UUID). The API exposes detailed metadata for the specified support ticket status, including system code, display label, and the 'terminal' completion flag, which indicates if this status marks a ticket as closed or resolved.\n\nPrimarily designed for system moderators and support tools, the endpoint enables status inspection by code or ID, supporting UI components that show current status details, edit permission matrices, or audit ticket workflow configuration. Employees do not access this endpoint directly. Security model restricts access to moderators only. Path parameter validation ensures the statusId provided is a valid UUID; any unrecognized ID returns a 404 not found error.\n\nThis operation is closely related to ticket workflow management: a support status may be referenced in ticket, assignment, and reporting APIs, and can be used for UI rendering, configuration, or automation logic. Input must be properly validated and output strictly limited to status metadata, avoiding reference to actual ticket data or users.","description":"Retrieve detailed information for a specific support ticket status by unique statusId. Returns the status code (system identifier), display label, and whether this status is terminal (final/closed) or non-terminal (in workflow).\n\nUsed by system moderators for viewing or editing status configuration, and as a reference for administrative UI and reporting. Endpoint access is limited to admin actors (moderator) for audit and configuration needs. Returns 404 if the specified statusId does not exist in the system.\n\nThis API forms part of the broader administrative configuration toolkit for ticket workflows. It does not return operational ticket data or user information but solely the static metadata for support status. Standard error behavior for not found or forbidden access is enforced.","summary":"Get full details of a support ticket status by ID (moderator only)","parameters":[{"name":"ticketStatusId","description":"Unique identifier (UUID) of the support ticket status to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed support ticket status metadata, including system code, display label, and terminal/completion flag.","typeName":"IWrtnSupportTicketStatus"},"authorizationType":null,"authorizationActor":"moderator","name":"at","path":"/wrtnEnterprise/moderator/support/ticketStatuses/{ticketStatusId}","method":"get","prerequisites":[]},{"specification":"This operation creates a new ticket status in the support system. The endpoint is designed to be used by system moderators (internal support/admin) for managing the available workflow statuses for support tickets, such as 'new', 'assigned', 'resolved', or 'closed'. It operates on the wrtn_support_ticket_statuses table in the database. Only moderator actors have the authority to create new support ticket statuses, ensuring tight workflow and compliance over the customer support process. The status code and label must be unique, and the 'is_terminal' flag designates whether the status is a terminal state (like 'closed').","description":"This API operation allows a moderator to create a new support ticket status that defines a step in the support ticket workflow. Only authenticatable actors with the 'moderator' role are permitted to use this endpoint, as status management is a privileged administrative function.\n\nThe operation leverages the wrtn_support_ticket_statuses database model, ensuring that the 'code' and 'label' are unique across all existing ticket statuses. The 'is_terminal' field is required and determines if the status is a final/terminal state from which no further transitions are allowed. Creating a new status is subject to business validation rules—attempts to duplicate existing codes or labels will fail with a validation error response.\n\nThis endpoint is essential for workflow extensibility and for supporting evolving business processes in enterprise customer support. Related endpoints include support ticket status updates and status listing for front-end workflow builders. Error handling must provide clear explanations for uniqueness violations or missing required fields.","summary":"Create a new support ticket status in wrtn_support_ticket_statuses table.","parameters":[],"requestBody":{"description":"Fields required to create a new support ticket status: unique code, display label, and terminal state flag.","typeName":"IWrtnSupportTicketStatus.ICreate"},"responseBody":{"description":"The created support ticket status object with all relevant metadata.","typeName":"IWrtnSupportTicketStatus"},"authorizationActors":["moderator"],"name":"create","path":"/wrtnEnterprise/moderator/support/ticketStatuses","method":"post","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing support ticket status in the support system. It allows moderator actors (internal support/admin) to modify the label or terminal state flag of a ticket status identified by its unique status ID. It directly manipulates the wrtn_support_ticket_statuses table, enforcing business rules including the immutability of the status code and uniqueness of the label. Only authorized moderators are permitted to perform this operation, which is critical for workflow flexibility and compliance in customer support management.","description":"This API endpoint enables a moderator to update the display label and terminal state designation for a specific support ticket status, given its unique ticketStatusId. The status code itself cannot be changed once created, ensuring consistent reference integrity across all support tickets and workflows.\n\nThe operation ensures that any updated label remains unique, and the 'is_terminal' value can be toggled to control whether the status represents a terminal state. Uniqueness and existence validations are enforced against the wrtn_support_ticket_statuses table. Only users with the 'moderator' actor role can access this endpoint to enforce workflow governance and compliance.\n\nError handling addresses invalid or missing ticketStatusId, uniqueness conflicts for the label, and attempts to modify non-editable fields like the status code. This endpoint is typically used in tandem with status list retrieval and support ticket status creation endpoints.","summary":"Update an existing support ticket status by ID in wrtn_support_ticket_statuses table.","parameters":[{"name":"ticketStatusId","description":"Unique identifier of the support ticket status to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New fields for updating the support ticket status. Only label and terminal state can be changed; code is immutable.","typeName":"IWrtnSupportTicketStatus.IUpdate"},"responseBody":{"description":"The updated support ticket status object reflecting the changes.","typeName":"IWrtnSupportTicketStatus"},"authorizationActors":["moderator"],"name":"update","path":"/wrtnEnterprise/moderator/support/ticketStatuses/{ticketStatusId}","method":"put","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation deletes an existing support ticket status identified by its unique ticketStatusId. The operation is implemented as a hard delete, permanently removing the support ticket status from the database. It is only available to authenticated moderators, as manipulating support ticket categories or workflow states is a privileged administrative function. The operation will fail and return an error if the target ticket status cannot be found by ID or if it is referenced by existing support tickets (foreign key constraint). This is a destructive operation and should be used with caution, as deleted statuses cannot be recovered.","description":"This API endpoint enables internal moderator actors to permanently delete a support ticket status record from the system. The operation requires the exact UUID identifier of the status to be provided as a path parameter, ensuring that only the intended status is affected. \n\nOnce invoked, the system will verify that the status exists and is not actively referenced by any support tickets. If such references exist, the operation will be rejected with a clear error indicating that the status is in use and cannot be deleted. The deletion is audit-logged for compliance and traceability, including moderator and session information.\n\nSecurity considerations dictate that only authorized moderators are permitted to execute this operation. Because this is a hard delete (the wrtn_support_ticket_statuses table does not have a soft-deletion marker), the status entry is completely removed from the database upon success.\n\nAttempting to delete a non-existent status will result in a 404 Not Found error. Attempts by unauthorized actors, or with invalid parameters, will yield appropriate business error messages as specified in the audit and compliance requirements.","summary":"Permanently delete a support ticket status by ID (wrtn_support_ticket_statuses table, hard delete)","parameters":[{"name":"ticketStatusId","description":"Unique identifier of the support ticket status to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","path":"/wrtnEnterprise/moderator/support/ticketStatuses/{ticketStatusId}","method":"delete","prerequisites":[]},{"specification":"This operation retrieves a paginated list of notifications, supporting advanced filtering, sorting, and search. It is based on the wrtn_notifications table and returns summary information about each notification. The endpoint is accessible to both moderator and employee actors, but results are strictly filtered to return only those notifications that the authenticated actor is allowed to view, based on the notification's targeting (personal, team, enterprise, or global). Filtering by notification type, importance, recipient, delivery channel, and read/unread status is supported via the request body. Pagination and sorting options are provided for efficiency and user experience. The operation is suitable for implementing in-app notification centers or dashboards at all actor and organization levels.","description":"This API endpoint provides a comprehensive search and retrieval interface for listing notifications available to the authenticated user. By supporting complex search filters and pagination, it enables both internal moderators and enterprise employees to efficiently access notifications relevant to their role, team, or personal scope.\n\nThe request body accepts a variety of filtering fields, allowing the client to query notifications by type (such as system, personal, compliance), importance (info, action-required, critical), target scope, recipient, channel, delivery status, and time window. Sorting and result page size can be specified to optimize UX for large notification volumes.\n\nSecurity controls ensure that a user can only see notifications addressed to them, their teams, or their enterprise as defined by notification targeting logic. Unauthorized access to notifications outside an actor's scope is strictly forbidden, with audit-logging of all access attempts. The response returns only summary information as per business privacy and performance constraints; detailed notification info (including delivery or read status) may be queried separately.\n\nError handling includes actionable explanations for invalid filters, out-of-bounds page requests, or attempts to access notifications outside the user's scope. The operation is designed to support high-scale dashboard scenarios and can be invoked by any authenticated moderator or employee.","summary":"Search and retrieve a paginated, filtered list of notifications (wrtn_notifications table) by access scope","parameters":[],"requestBody":{"description":"Search and filtering criteria, plus pagination options for notification list retrieval","typeName":"IWrtnNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary information matching filter criteria","typeName":"IPageIWrtnNotification.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","path":"/wrtnEnterprise/moderator/notifications","method":"patch","prerequisites":[]},{"specification":"This operation retrieves a paginated list of notifications, supporting advanced filtering, sorting, and search. It is based on the wrtn_notifications table and returns summary information about each notification. The endpoint is accessible to both moderator and employee actors, but results are strictly filtered to return only those notifications that the authenticated actor is allowed to view, based on the notification's targeting (personal, team, enterprise, or global). Filtering by notification type, importance, recipient, delivery channel, and read/unread status is supported via the request body. Pagination and sorting options are provided for efficiency and user experience. The operation is suitable for implementing in-app notification centers or dashboards at all actor and organization levels.","description":"This API endpoint provides a comprehensive search and retrieval interface for listing notifications available to the authenticated user. By supporting complex search filters and pagination, it enables both internal moderators and enterprise employees to efficiently access notifications relevant to their role, team, or personal scope.\n\nThe request body accepts a variety of filtering fields, allowing the client to query notifications by type (such as system, personal, compliance), importance (info, action-required, critical), target scope, recipient, channel, delivery status, and time window. Sorting and result page size can be specified to optimize UX for large notification volumes.\n\nSecurity controls ensure that a user can only see notifications addressed to them, their teams, or their enterprise as defined by notification targeting logic. Unauthorized access to notifications outside an actor's scope is strictly forbidden, with audit-logging of all access attempts. The response returns only summary information as per business privacy and performance constraints; detailed notification info (including delivery or read status) may be queried separately.\n\nError handling includes actionable explanations for invalid filters, out-of-bounds page requests, or attempts to access notifications outside the user's scope. The operation is designed to support high-scale dashboard scenarios and can be invoked by any authenticated moderator or employee.","summary":"Search and retrieve a paginated, filtered list of notifications (wrtn_notifications table) by access scope","parameters":[],"requestBody":{"description":"Search and filtering criteria, plus pagination options for notification list retrieval","typeName":"IWrtnNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary information matching filter criteria","typeName":"IPageIWrtnNotification.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","path":"/wrtnEnterprise/employee/notifications","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the detailed information of a specific notification event using its unique identifier (UUID). It references the wrtn_notifications table and provides all notification metadata, including event type, subject, body, importance, delivery and escalation information, and current delivery/read/acknowledgement status. All properties included in the response are mapped from the wrtn_notifications schema, and the result includes delivery attempts with status and recipient information (see wrtn_notification_deliveries for delivery tracking). This API is essential for audit/compliance tracing, escalation workflows, and end-user access to notification details.","path":"/wrtnEnterprise/moderator/notifications/{notificationId}","method":"get","summary":"Fetch notification details by notificationId from wrtn_notifications table and include delivery status.","description":"Retrieve detailed information for a specific notification event using its notificationId (UUID). This endpoint returns all primary notification metadata, including event type, subject, body, importance, escalation policy, and delivery scheduling or expiry information. The response incorporates delivery status, delivery attempt sequence, and recipient read/acknowledgement timestamps according to business notification and audit requirements. Delivery attempts and recipient states are included to support compliance, troubleshooting, and alert escalation workflows. Security and data privacy logic ensures only authorized actors (moderator or concerned employee) may access the record. The operation guarantees complete traceability for notification events, according to platform compliance standards. Errors are returned if the notificationId does not exist or the caller lacks permission.","parameters":[{"name":"notificationId","description":"The unique identifier (UUID) of the notification event to fetch information about.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete notification metadata, delivery state, and recipient read/acknowledgement status for the requested notificationId.","typeName":"IWrtnNotification"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed information of a specific notification event using its unique identifier (UUID). It references the wrtn_notifications table and provides all notification metadata, including event type, subject, body, importance, delivery and escalation information, and current delivery/read/acknowledgement status. All properties included in the response are mapped from the wrtn_notifications schema, and the result includes delivery attempts with status and recipient information (see wrtn_notification_deliveries for delivery tracking). This API is essential for audit/compliance tracing, escalation workflows, and end-user access to notification details.","path":"/wrtnEnterprise/employee/notifications/{notificationId}","method":"get","summary":"Fetch notification details by notificationId from wrtn_notifications table and include delivery status.","description":"Retrieve detailed information for a specific notification event using its notificationId (UUID). This endpoint returns all primary notification metadata, including event type, subject, body, importance, escalation policy, and delivery scheduling or expiry information. The response incorporates delivery status, delivery attempt sequence, and recipient read/acknowledgement timestamps according to business notification and audit requirements. Delivery attempts and recipient states are included to support compliance, troubleshooting, and alert escalation workflows. Security and data privacy logic ensures only authorized actors (moderator or concerned employee) may access the record. The operation guarantees complete traceability for notification events, according to platform compliance standards. Errors are returned if the notificationId does not exist or the caller lacks permission.","parameters":[{"name":"notificationId","description":"The unique identifier (UUID) of the notification event to fetch information about.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete notification metadata, delivery state, and recipient read/acknowledgement status for the requested notificationId.","typeName":"IWrtnNotification"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new notification event in the wrtn_notifications table, supporting both enterprise/personnel alerts and organizational announcements as indicated in the business requirements. It allows setting the notification's event type, subject, body, importance, target scope, and scheduling or escalation parameters. Scheduling, delivery, and expiration fields support notification timeliness and escalation logic for business and compliance use cases. The operation ensures that the actor invoking it (either moderator or automated enterprise system) is recorded, and enforces all business validation rules on event type, scope, and importance.","path":"/wrtnEnterprise/moderator/notifications","method":"post","summary":"Create a new notification event with message, importance, scope, and delivery policy as specified in wrtn_notifications.","description":"Submit a new notification event to the system, supporting personal, team, enterprise, or organizational broadcast (depending on target_scope). This endpoint accepts all standard notification attributes (event type, subject, body, importance, delivery scope, schedule, escalation policy, expiration), and returns the complete notification record upon success. Input validation ensures that required fields are present and adhere to supported business values. Upon creation, the server will handle scheduling, initial delivery to recipient(s), and supporting escalation or retry according to business logic. Only authorized actors (e.g., moderator/system-automation process) may create notifications. Errors are returned when validation fails or the caller lacks authority.","parameters":[],"requestBody":{"description":"Notification creation request with required event type, subject, convenience fields, and any specified scheduling or escalation rules.","typeName":"IWrtnNotification.ICreate"},"responseBody":{"description":"The created notification event and its assigned unique ID, ready for delivery and audit logging.","typeName":"IWrtnNotification"},"authorizationActors":["moderator"],"name":"create","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the details of an existing notification entity identified by the given notificationId. The update may include modifying the subject, body content, importance, scope, delivery scheduling, or any other mutable property of notifications managed by the WrtnEnterprise backend platform. This notification management functionality is critical for ensuring that information delivered to users, teams, or enterprises is current, clear, and actionable. The entity is sourced from the wrtn_notifications table, which is the core notification registry for all personal, organizational, system, and compliance-related notifications.","description":"Updates the notification object referenced by notificationId, applying changes to fields such as subject, body, importance, scheduling (scheduled_at), or target scope, as allowed by the business rules and current notification state.\n\nPermissions are enforced based on the actor's role: moderators may update any notification; employee users may only update notifications they created, subject to notification status or scope restrictions.\n\nThe wrtn_notifications record serves as the authoritative source for the notification's metadata, delivery preferences, target audience, message content, and scheduling information. When a notification is edited, all delivery and audit tracking logic is likewise updated for compliance.\n\nInput validation includes checks on required fields (subject, event_type, importance), scheduling constraints (future times for scheduled delivery), and business rules for critical or expirable messages. Attempting to modify sealed, sent, or expired notifications may be disallowed or result in an explicit error, depending on policy.\n\nRelated endpoints include notification creation (POST), retrieval (GET), and (for regulatory and audit use cases) access to delivery and acknowledgment status records. The update operation always logs the actor and session context for compliance traceability, as mandated by WrtnEnterprise's notification and audit policy.\n\nError responses include insufficient permissions (if an employee/user tries to update out-of-scope notifications), validation failures (malformed content or invalid scope/timing), or attempting to update immutable notifications (already delivered or expired).","summary":"Update a specific notification in the wrtn_notifications table by notificationId.","parameters":[{"name":"notificationId","description":"The unique identifier (UUID) of the notification entity to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete or partial set of updatable notification fields.","typeName":"IWrtnNotification.IUpdate"},"responseBody":{"description":"The updated notification object after successful modification.","typeName":"IWrtnNotification"},"authorizationType":null,"authorizationActor":"moderator","name":"update","path":"/wrtnEnterprise/moderator/notifications/{notificationId}","method":"put","prerequisites":[]},{"specification":"This operation updates the details of an existing notification entity identified by the given notificationId. The update may include modifying the subject, body content, importance, scope, delivery scheduling, or any other mutable property of notifications managed by the WrtnEnterprise backend platform. This notification management functionality is critical for ensuring that information delivered to users, teams, or enterprises is current, clear, and actionable. The entity is sourced from the wrtn_notifications table, which is the core notification registry for all personal, organizational, system, and compliance-related notifications.","description":"Updates the notification object referenced by notificationId, applying changes to fields such as subject, body, importance, scheduling (scheduled_at), or target scope, as allowed by the business rules and current notification state.\n\nPermissions are enforced based on the actor's role: moderators may update any notification; employee users may only update notifications they created, subject to notification status or scope restrictions.\n\nThe wrtn_notifications record serves as the authoritative source for the notification's metadata, delivery preferences, target audience, message content, and scheduling information. When a notification is edited, all delivery and audit tracking logic is likewise updated for compliance.\n\nInput validation includes checks on required fields (subject, event_type, importance), scheduling constraints (future times for scheduled delivery), and business rules for critical or expirable messages. Attempting to modify sealed, sent, or expired notifications may be disallowed or result in an explicit error, depending on policy.\n\nRelated endpoints include notification creation (POST), retrieval (GET), and (for regulatory and audit use cases) access to delivery and acknowledgment status records. The update operation always logs the actor and session context for compliance traceability, as mandated by WrtnEnterprise's notification and audit policy.\n\nError responses include insufficient permissions (if an employee/user tries to update out-of-scope notifications), validation failures (malformed content or invalid scope/timing), or attempting to update immutable notifications (already delivered or expired).","summary":"Update a specific notification in the wrtn_notifications table by notificationId.","parameters":[{"name":"notificationId","description":"The unique identifier (UUID) of the notification entity to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete or partial set of updatable notification fields.","typeName":"IWrtnNotification.IUpdate"},"responseBody":{"description":"The updated notification object after successful modification.","typeName":"IWrtnNotification"},"authorizationType":null,"authorizationActor":"employee","name":"update","path":"/wrtnEnterprise/employee/notifications/{notificationId}","method":"put","prerequisites":[]},{"specification":"This operation erases (deletes) a notification record in the wrtn_notifications table, managing notification lifecycle and compliance retention. This is used to remove obsolete, erroneous, or retracted notifications from the notification registry, subject to strict business and audit controls. The underlying deletion is a soft delete (deleted_at), preserving the notification for compliance and review, while marking it as inaccessible for normal business activity.","description":"Deletes the notification entity identified by notificationId, performing a soft-deletion in the wrtn_notifications database table. This action marks the notification as deleted (sets deleted_at), rendering it unavailable for further delivery or user discovery in UI and API responses, while preserving the record for compliance, audit, and post-mortem review per retention policy.\n\nOnly users with appropriate privileges may perform this action: moderators (admin actors) have global deletion rights, while employees may only delete their own notifications (if business rules and current notification state allow). Attempts to delete notifications out of scope, already delivered and expired, or in critical/immutable categories will be rejected with explicit business errors.\n\nThis operation is linked to overall notification management, including creation, retrieval, update, and delivery/acknowledgment APIs. The erase event is always audit-logged, capturing the actor, session, time, and reason (if provided).","summary":"Soft delete a notification in the wrtn_notifications table by notificationId.","parameters":[{"name":"notificationId","description":"The unique identifier (UUID) of the notification entity to erase (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","path":"/wrtnEnterprise/moderator/notifications/{notificationId}","method":"delete","prerequisites":[]},{"specification":"This operation erases (deletes) a notification record in the wrtn_notifications table, managing notification lifecycle and compliance retention. This is used to remove obsolete, erroneous, or retracted notifications from the notification registry, subject to strict business and audit controls. The underlying deletion is a soft delete (deleted_at), preserving the notification for compliance and review, while marking it as inaccessible for normal business activity.","description":"Deletes the notification entity identified by notificationId, performing a soft-deletion in the wrtn_notifications database table. This action marks the notification as deleted (sets deleted_at), rendering it unavailable for further delivery or user discovery in UI and API responses, while preserving the record for compliance, audit, and post-mortem review per retention policy.\n\nOnly users with appropriate privileges may perform this action: moderators (admin actors) have global deletion rights, while employees may only delete their own notifications (if business rules and current notification state allow). Attempts to delete notifications out of scope, already delivered and expired, or in critical/immutable categories will be rejected with explicit business errors.\n\nThis operation is linked to overall notification management, including creation, retrieval, update, and delivery/acknowledgment APIs. The erase event is always audit-logged, capturing the actor, session, time, and reason (if provided).","summary":"Soft delete a notification in the wrtn_notifications table by notificationId.","parameters":[{"name":"notificationId","description":"The unique identifier (UUID) of the notification entity to erase (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"employee","name":"erase","path":"/wrtnEnterprise/employee/notifications/{notificationId}","method":"delete","prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of announcements visible to the caller. It operates over the wrtn_announcements table, which stores system and organization-wide announcement events including subject, body, importance, delivery scheduling, and audit information. The endpoint supports detailed search criteria, including filtering by scope (system, enterprise, team), subject keywords, importance, time windows, and acknowledgment requirements. Authorization and visibility are strictly enforced: moderators see system and all enterprise announcements; employees see their own enterprise/team/broadcast announcements only. Results can be sorted and paginated to efficiently serve dashboards and user notification centers. The operation addresses regulatory and compliance requirements for organizational announcement delivery and read tracking, as specified in business requirements and the wrtn_announcements schema.","path":"/wrtnEnterprise/announcements","method":"patch","summary":"Search and retrieve a paginated, filterable list of announcements (wrtn_announcements table) for the caller","description":"Retrieve a filtered, paginated list of announcements that are visible to the requesting user. This endpoint supports searching for announcements by scope (system, enterprise, team), importance, subject/content keywords, publication window, and whether acknowledgment is required.\n\nModerators can access all system and customer enterprise announcements (subject to internal support scope), while employees are limited to their own company/team and organization-scoped broadcasts. The response structure ensures users only see announcements for which they are recipients according to their role, organization, and explicit scope in the wrtn_announcements schema.\n\nSecurity controls prevent unauthorized access to announcements outside the user's organization or team, enforcing strict data isolation. Advanced pagination and sorting are supported for dashboard performance, and the results show only non-deleted, currently relevant announcements (based on expiration/visibility rules) unless explicitly requested otherwise.\n\nThis operation supports usage analytics, audit logging for compliance (delivery/read status), and is intended as a backend for dashboards, notifications panels, and user communication centers. Users may additionally filter by importance (info, action_required, critical), delivery windows, or acknowledgment requirement as needed.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for announcement search","typeName":"IWrtnAnnouncement.IRequest"},"responseBody":{"description":"Paginated result of announcement summary objects visible to the caller","typeName":"IPageIWrtnAnnouncement.ISummary"},"authorizationActors":[],"name":"index","authorizationActor":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed information of a single announcement identified by its unique announcementId from the wrtn_announcements table. The endpoint enforces strict data isolation and access scope: moderators may view all system and enterprise announcements, while employees are limited to those in their own company or team. The detailed response includes all metadata such as subject, body, importance, target scope, delivery details, and audit log references. Reading an announcement may optionally update the user's read acknowledgment status depending on the business rules for critical or action-required announcements.","path":"/wrtnEnterprise/announcements/{announcementId}","method":"get","summary":"Retrieve the details of a single announcement by announcementId (wrtn_announcements table)","description":"Retrieve full details for a specific announcement, identified by its unique announcementId. The response includes subject, body (markdown), importance level, required acknowledgment flag, scope and target information, delivery and expiration times, and audit metadata. For critical or action-required announcements, the backend may also update or check the user's read acknowledgment status as part of compliance or notification requirements.\n\nModerators may access any announcement relevant to system or enterprise support, while employees are constrained to organization- and team-scoped announcements for which they are intended recipients. Security controls ensure employees cannot access other companies' or teams' announcements, and all accesses are audit-logged for privacy and compliance review.\n\nIf the announcement does not exist, is deleted, or is not visible to the current actor, the operation returns a 404 Not Found error. The wrtn_announcements schema governs all returned fields, and all relations and status fields are enriched for UI consumption where appropriate.","parameters":[{"name":"announcementId","description":"Unique identifier of the announcement to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed announcement data for the given announcementId","typeName":"IWrtnAnnouncement"},"authorizationActors":[],"name":"at","authorizationActor":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation allows moderators or authorized actors to create new announcements that may be broadcast system-wide or targeted to a defined scope (organization, team, or role). It records the announcement subject, body, importance, acknowledgment policy, broadcast scheduling, and context-scoping for regulatory and business communication. Each announcement record is associated with a target scope (system, enterprise, team, or role), supports delivery scheduling, explicit urgency, and optional requirement for user acknowledgment. The operation will insert a new entry into the wrtn_announcements table, supporting later audit and linkage to notifications.","path":"/wrtnEnterprise/moderator/announcements","method":"post","summary":"Create a new announcement in the system. Operates on wrtn_announcements table for targeted or global broadcasts.","description":"Create a new announcement to be delivered to a defined scope (system, enterprise, team, or role). The announcement must specify subject, body, importance, and whether recipient acknowledgment is required. Targeting logic is defined by 'scope_kind' and 'scope_id'. Optional parameters include scheduled delivery time (for advanced announcement), expiration date, and escalation policy. Announcements support both scheduled and immediate dispatch for compliance-critical or engagement communications.\n\nSecurity: Only authenticated moderators (admin) may create system-wide or cross-tenant announcements. Enterprise staff (employee) may be permitted to create organizational announcements per business rule.\n\nThe response returns the created IWrtnAnnouncement entity, including all configured announcement attributes. The creation is audit-logged as a business event for compliance.","parameters":[],"requestBody":{"description":"Information required to create a new announcement, including subject, body, scope, timing, importance, and acknowledgment policy.","typeName":"IWrtnAnnouncement.ICreate"},"responseBody":{"description":"The created announcement entity, with all configured business attributes.","typeName":"IWrtnAnnouncement"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation enables authorized actors to update existing announcements, modifying broadcast content, scope, schedule, and importance. It operates on the wrtn_announcements table, targeting a specific announcement by its ID (announcementId path parameter). Only mutable fields may be changed after creation; immutable fields such as announcement ID and audit trail remain unaltered. The operation supports re-scheduling, escalation, content revision, urgency level change, and requires strict permission checks based on announcement owner and scope.","path":"/wrtnEnterprise/moderator/announcements/{announcementId}","method":"put","summary":"Update an existing announcement by ID (wrtn_announcements table).","description":"Update an existing announcement's subject, body, scope, schedule, or importance. Target announcement is identified by announcementId in the path. Announcement updates must preserve audit and compliance trail; only non-terminal announcements can be altered. If the announcement has already been broadcasted and is no longer editable, the operation will return a suitable business error. Access is restricted: moderators (admin) may update any announcement; enterprise employees may update only organizational announcements per business permission.\n\nAll update attempts are audit-logged, including before/after snapshot for compliance. Clients must ensure updated values comply with all constraints (e.g., required acknowledgment on 'action_required' or 'critical' importance).","parameters":[{"name":"announcementId","description":"Unique identifier of the target announcement to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the target announcement. Only mutable fields such as subject, body, scheduling, and importance may be altered.","typeName":"IWrtnAnnouncement.IUpdate"},"responseBody":{"description":"The updated announcement entity after applying changes.","typeName":"IWrtnAnnouncement"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes a specific announcement from the wrtn_announcements table, which tracks organizational and system-wide broadcast events. Deletion is permissible only by a moderator actor, and utilizes the soft-deletion pattern by setting the deleted_at timestamp in the database. This ensures auditability and historical trace, in compliance with business and regulatory retention requirements. The targeted announcement is identified by its unique UUID. The operation enforces strict access control, so only authorized moderator actors may execute deletion, and attempts to delete non-existent or already deleted announcements will result in a not found error.","description":"This API operation allows a moderator to delete (soft-delete) an announcement, archiving it by setting the deleted_at field but not removing the record physically. The operation first verifies that the requested announcement exists and is not already deleted. Only users with moderator-level privileges can perform this deletion, maintaining compliance with organizational announcement retention and audit trail requirements.\n\nFull details of the operation are recorded for compliance purposes, including the actor and session. Announcements that are deleted are immediately invisible to end users, but accessible in audit reporting until retention policy expiry. This API does not affect related notification or delivery audit records, which are retained for the original delivery event history. Errors are returned if deletion is attempted by a non-moderator actor, or if the announcement is not found.","summary":"Soft-delete (archive) a specific announcement by ID in wrtn_announcements table.","parameters":[{"name":"announcementId","description":"Announcement identifier (UUID) to delete (soft-delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationActors":["moderator"],"name":"erase","path":"/wrtnEnterprise/moderator/announcements/{announcementId}","method":"delete","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of notification delivery attempts for a specific notification from the wrtn_notification_deliveries table. It enables authorized actors (moderator or employee) to view all delivery channel attempts, statuses (pending, delivered, failed, expired, etc.), and recipient delivery information for compliance, troubleshooting, and business tracking. The operation takes the notification ID as a path parameter and supports advanced filtering via the PATCH requestBody, such as by delivery status, channel, recipient, or date range. The response is a paginated collection of delivery summaries, essential for audit reporting, SLA measurement, and delivery troubleshooting.","description":"This API operation returns a paginated list of delivery records related to a single notification. It enables both moderator and employee actors to search the delivery history for a given notification, filtered by delivery status, channel, or recipient information as needed. Delivery statuses like delivered, failed, read, expired and others are available for filtering and result summarization.\n\nThe request body conforms to the IWrtnNotificationDelivery.IRequest schema, supporting rich filtering, sort, and pagination. The results include key delivery attributes for each delivery attempt, allowing authorized users to audit the lifecycle, outcomes, and any failure reasons for all notification deliveries. This operation enforces business-level access rules: moderators can view any delivery within their permitted organizational scope; employees can view deliveries for notifications sent directly to them or to entities within their enterprise or team, subject to strict audit and isolation policies. Error responses occur for unauthorized access or nonexistent notifications.","summary":"List and search notification delivery attempts for a specific notification, supporting advanced filtering.","parameters":[{"name":"notificationId","description":"Target notification's unique identifier (UUID) whose deliveries are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter and pagination criteria for notification deliveries of a given notification.","typeName":"IWrtnNotificationDelivery.IRequest"},"responseBody":{"description":"Paginated list of notification delivery summaries matching filter criteria.","typeName":"IPageIWrtnNotificationDelivery.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","path":"/wrtnEnterprise/moderator/notifications/{notificationId}/deliveries","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of notification delivery attempts for a specific notification from the wrtn_notification_deliveries table. It enables authorized actors (moderator or employee) to view all delivery channel attempts, statuses (pending, delivered, failed, expired, etc.), and recipient delivery information for compliance, troubleshooting, and business tracking. The operation takes the notification ID as a path parameter and supports advanced filtering via the PATCH requestBody, such as by delivery status, channel, recipient, or date range. The response is a paginated collection of delivery summaries, essential for audit reporting, SLA measurement, and delivery troubleshooting.","description":"This API operation returns a paginated list of delivery records related to a single notification. It enables both moderator and employee actors to search the delivery history for a given notification, filtered by delivery status, channel, or recipient information as needed. Delivery statuses like delivered, failed, read, expired and others are available for filtering and result summarization.\n\nThe request body conforms to the IWrtnNotificationDelivery.IRequest schema, supporting rich filtering, sort, and pagination. The results include key delivery attributes for each delivery attempt, allowing authorized users to audit the lifecycle, outcomes, and any failure reasons for all notification deliveries. This operation enforces business-level access rules: moderators can view any delivery within their permitted organizational scope; employees can view deliveries for notifications sent directly to them or to entities within their enterprise or team, subject to strict audit and isolation policies. Error responses occur for unauthorized access or nonexistent notifications.","summary":"List and search notification delivery attempts for a specific notification, supporting advanced filtering.","parameters":[{"name":"notificationId","description":"Target notification's unique identifier (UUID) whose deliveries are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter and pagination criteria for notification deliveries of a given notification.","typeName":"IWrtnNotificationDelivery.IRequest"},"responseBody":{"description":"Paginated list of notification delivery summaries matching filter criteria.","typeName":"IPageIWrtnNotificationDelivery.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","path":"/wrtnEnterprise/employee/notifications/{notificationId}/deliveries","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows an authenticated employee or moderator to mark a specific announcement as read or acknowledged. It performs an update (patch) on the read status for an announcement and actor pair, supporting business logic for compliance and acknowledgment tracking per WrtnEnterprise requirements. The operation is based on the wrtn_notification_announcement_reads table, enforcing that only authorized actors can mark the announcement as read for themselves, and ensuring full auditability for regulatory compliance. The read status is idempotent: repeated calls preserve read state once set.","description":"The PATCH /announcements/{announcementId}/reads endpoint enables an employee or moderator to acknowledge that they have read a particular announcement. This function is critical for compliance, as certain announcements (e.g., security, legal changes) may require explicit acknowledgment from each recipient. The API records the reading event with a timestamp linked to the user session for audit trail.\n\nOnly the intended recipient (authenticated as employee or moderator) can mark a read for themselves—no bulk or proxy updates are permitted. The operation enforces privacy and enterprise isolation, ensuring that no actor can mark announcements for other users or across organizational boundaries. All accesses and updates are fully audit-logged for regulatory review.\n\nIf the announcement requires acknowledgment, this API serves as the primary mechanism for confirming receipt; otherwise it operates as a read/unread tracker. The operation checks that the specified announcementId exists and is active, and that the actor is a designated recipient within its scope. Errors are returned for attempts to access non-existent, expired, or unauthorized announcements.\n\nThe operation is tightly coupled to the wrtn_notification_announcement_reads table. The server automatically links the read event to the authenticated actor from the JWT context, prohibiting any manual setting of actor/session fields within the request.","summary":"Mark an announcement as read or acknowledged for the authenticated actor using wrtn_notification_announcement_reads.","parameters":[{"name":"announcementId","description":"The unique identifier of the target announcement to be marked as read or acknowledged.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation that the announcement was marked as read by the authenticated actor. Includes the read receipt record with timestamp and recipient context.","typeName":"IWrtnNotificationAnnouncementRead"},"authorizationType":null,"authorizationActor":"employee","name":"update","path":"/wrtnEnterprise/employee/announcements/{announcementId}","method":"patch","prerequisites":[]},{"specification":"This operation allows an authenticated employee or moderator to mark a specific announcement as read or acknowledged. It performs an update (patch) on the read status for an announcement and actor pair, supporting business logic for compliance and acknowledgment tracking per WrtnEnterprise requirements. The operation is based on the wrtn_notification_announcement_reads table, enforcing that only authorized actors can mark the announcement as read for themselves, and ensuring full auditability for regulatory compliance. The read status is idempotent: repeated calls preserve read state once set.","description":"The PATCH /announcements/{announcementId}/reads endpoint enables an employee or moderator to acknowledge that they have read a particular announcement. This function is critical for compliance, as certain announcements (e.g., security, legal changes) may require explicit acknowledgment from each recipient. The API records the reading event with a timestamp linked to the user session for audit trail.\n\nOnly the intended recipient (authenticated as employee or moderator) can mark a read for themselves—no bulk or proxy updates are permitted. The operation enforces privacy and enterprise isolation, ensuring that no actor can mark announcements for other users or across organizational boundaries. All accesses and updates are fully audit-logged for regulatory review.\n\nIf the announcement requires acknowledgment, this API serves as the primary mechanism for confirming receipt; otherwise it operates as a read/unread tracker. The operation checks that the specified announcementId exists and is active, and that the actor is a designated recipient within its scope. Errors are returned for attempts to access non-existent, expired, or unauthorized announcements.\n\nThe operation is tightly coupled to the wrtn_notification_announcement_reads table. The server automatically links the read event to the authenticated actor from the JWT context, prohibiting any manual setting of actor/session fields within the request.","summary":"Mark an announcement as read or acknowledged for the authenticated actor using wrtn_notification_announcement_reads.","parameters":[{"name":"announcementId","description":"The unique identifier of the target announcement to be marked as read or acknowledged.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation that the announcement was marked as read by the authenticated actor. Includes the read receipt record with timestamp and recipient context.","typeName":"IWrtnNotificationAnnouncementRead"},"authorizationType":null,"authorizationActor":"moderator","name":"update","path":"/wrtnEnterprise/moderator/announcements/{announcementId}","method":"patch","prerequisites":[]},{"specification":"This operation allows an authenticated employee or moderator to retrieve and update their own notification preferences. It provides a flexible interface to search, list, and edit the notification delivery channel and frequency configuration (e.g., mute, opt-in/out, quiet hours) as recorded in the wrtn_notification_preferences table. Only the current authenticated user can view or update their own preferences, ensuring security and privacy.","description":"The PATCH /notificationPreferences endpoint enables an authenticated actor (employee or moderator) to both retrieve the current state of their personal notification preferences and update them as desired. Notification preferences include channel opt-in/out toggles, muted/unmuted states, delivery frequency limits, and arbitrary channel-specific configurations. This supports the business rules specified for notification and alert management, including user-driven muting, channel enablement, and per-user 'quiet hours.'\n\nThe API guarantees that only the preferences of the requesting actor can be modified; escalation or proxy edits for others are strictly forbidden. Channel-level settings are enforced according to business logic: critical/mandatory notifications may not be muted or disabled via this endpoint. All actions are logged for audit/compliance. The wrtn_notification_preferences table is the underlying datastore for updates.\n\nThe operation expects a request body structured as IWrtnNotificationPreference.IRequest, specifying the preference changes to apply (e.g., channel to enable/disable, mute/unmute until, frequency caps). The response returns the updated array of notification preferences for all channels associated with the user, reflecting the applied changes. Errors are returned if attempts are made to disable non-optional alert categories, or if requested channels do not exist.","summary":"Retrieve and update notification preferences for the authenticated actor (employee or moderator).","parameters":[],"requestBody":{"description":"Notification preference updates and search/filtering criteria for the authenticated actor. Channel, mute/unmute timestamp, frequency cap, and arbitrary JSON config may be provided.","typeName":"IWrtnNotificationPreference.IRequest"},"responseBody":{"description":"Array of notification preferences as updated for the authenticated actor after applying changes. Each element includes delivery channel type, mute/enabled flag, frequency limits, and channel-specific config info.","typeName":"IWrtnNotificationPreference"},"authorizationType":null,"authorizationActor":"employee","name":"update","path":"/wrtnEnterprise/employee/notificationPreferences","method":"patch","prerequisites":[]},{"specification":"This operation allows an authenticated employee or moderator to retrieve and update their own notification preferences. It provides a flexible interface to search, list, and edit the notification delivery channel and frequency configuration (e.g., mute, opt-in/out, quiet hours) as recorded in the wrtn_notification_preferences table. Only the current authenticated user can view or update their own preferences, ensuring security and privacy.","description":"The PATCH /notificationPreferences endpoint enables an authenticated actor (employee or moderator) to both retrieve the current state of their personal notification preferences and update them as desired. Notification preferences include channel opt-in/out toggles, muted/unmuted states, delivery frequency limits, and arbitrary channel-specific configurations. This supports the business rules specified for notification and alert management, including user-driven muting, channel enablement, and per-user 'quiet hours.'\n\nThe API guarantees that only the preferences of the requesting actor can be modified; escalation or proxy edits for others are strictly forbidden. Channel-level settings are enforced according to business logic: critical/mandatory notifications may not be muted or disabled via this endpoint. All actions are logged for audit/compliance. The wrtn_notification_preferences table is the underlying datastore for updates.\n\nThe operation expects a request body structured as IWrtnNotificationPreference.IRequest, specifying the preference changes to apply (e.g., channel to enable/disable, mute/unmute until, frequency caps). The response returns the updated array of notification preferences for all channels associated with the user, reflecting the applied changes. Errors are returned if attempts are made to disable non-optional alert categories, or if requested channels do not exist.","summary":"Retrieve and update notification preferences for the authenticated actor (employee or moderator).","parameters":[],"requestBody":{"description":"Notification preference updates and search/filtering criteria for the authenticated actor. Channel, mute/unmute timestamp, frequency cap, and arbitrary JSON config may be provided.","typeName":"IWrtnNotificationPreference.IRequest"},"responseBody":{"description":"Array of notification preferences as updated for the authenticated actor after applying changes. Each element includes delivery channel type, mute/enabled flag, frequency limits, and channel-specific config info.","typeName":"IWrtnNotificationPreference"},"authorizationType":null,"authorizationActor":"moderator","name":"update","path":"/wrtnEnterprise/moderator/notificationPreferences","method":"patch","prerequisites":[]},{"specification":"This operation retrieves a notification preference by its unique identifier from the wrtn_notification_preferences table. The description provides a detailed explanation of the purpose, which is to allow authenticated employees or moderators to view their own notification channel preferences. The notification preference includes fields such as whether the channel is enabled (is_enabled), quiet hours (muted_until), frequency limits, a JSON object for additional preferences, and channel association details. Access is strictly scoped: users may only retrieve their own preferences, with authorization checks and strict error handling for unauthorized attempts. The response object includes all details necessary for client-side configuration display or preference editing workflows. This endpoint is essential for enabling user-driven notification controls in enterprise SaaS environments.","description":"Retrieve a single notification preference object for the current actor by ID, including all configuration fields (is_enabled, muted_until, frequency_limit_per_hour, preference_json) and underlying channel info. Only the authenticated employee or moderator can access their own preference, with strict validation and error handling on scope boundaries. The returned object includes all preference details for use in UI and notification control panels. This endpoint supports user-level notification management, settings UX, and personal/business compliance requirements.","summary":"Retrieve a notification preference by ID from wrtn_notification_preferences table","path":"/wrtnEnterprise/employee/notificationPreferences/{notificationPreferenceId}","method":"get","parameters":[{"name":"notificationPreferenceId","description":"The unique identifier of the notification preference to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The notification preference configuration including channel info and preference fields.","typeName":"IWrtnNotificationPreference"},"authorizationType":null,"authorizationActor":"employee","name":"at","prerequisites":[]},{"specification":"This operation retrieves a notification preference by its unique identifier from the wrtn_notification_preferences table. The description provides a detailed explanation of the purpose, which is to allow authenticated employees or moderators to view their own notification channel preferences. The notification preference includes fields such as whether the channel is enabled (is_enabled), quiet hours (muted_until), frequency limits, a JSON object for additional preferences, and channel association details. Access is strictly scoped: users may only retrieve their own preferences, with authorization checks and strict error handling for unauthorized attempts. The response object includes all details necessary for client-side configuration display or preference editing workflows. This endpoint is essential for enabling user-driven notification controls in enterprise SaaS environments.","description":"Retrieve a single notification preference object for the current actor by ID, including all configuration fields (is_enabled, muted_until, frequency_limit_per_hour, preference_json) and underlying channel info. Only the authenticated employee or moderator can access their own preference, with strict validation and error handling on scope boundaries. The returned object includes all preference details for use in UI and notification control panels. This endpoint supports user-level notification management, settings UX, and personal/business compliance requirements.","summary":"Retrieve a notification preference by ID from wrtn_notification_preferences table","path":"/wrtnEnterprise/moderator/notificationPreferences/{notificationPreferenceId}","method":"get","parameters":[{"name":"notificationPreferenceId","description":"The unique identifier of the notification preference to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The notification preference configuration including channel info and preference fields.","typeName":"IWrtnNotificationPreference"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation updates a notification preference record as identified by notificationPreferenceId in wrtn_notification_preferences. It allows an authenticated employee or moderator to change their notification configuration for a given channel, including enabling/disabling notifications, adjusting quiet hours or frequency limits, and setting advanced JSON preferences. The operation is strictly limited to the authenticated actor; users cannot update preferences belonging to other actors, and all update requests are validated for business and security compliance before committing changes. The response provides the updated preference object, reflecting the newly set values, and supports notification settings UX, settings sync, and compliance requirements.","description":"Update the notification preferences object for the current actor by ID. Allows updating channel enablement, quiet hours (muted_until), frequency limits per hour, advanced preference JSON, etc. The operation validates that only the authenticated employee or moderator can update their own notification preference. Mandatory error handling is enforced for any attempt to update another actor’s preference. The result includes the fully updated preference object for immediate UI update or further use.","summary":"Update a notification preference by ID in wrtn_notification_preferences table","path":"/wrtnEnterprise/employee/notificationPreferences/{notificationPreferenceId}","method":"put","parameters":[{"name":"notificationPreferenceId","description":"The unique identifier of the notification preference to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the notification preference record: is_enabled, muted_until, frequency_limit_per_hour, and/or preference_json. Only mutable attributes can be provided, and all changes are validated before commit. This enables user or moderator control over their notification settings for compliance and preferences UX.","typeName":"IWrtnNotificationPreference.IUpdate"},"responseBody":{"description":"The updated notification preference including all configuration and channel information.","typeName":"IWrtnNotificationPreference"},"authorizationType":null,"authorizationActor":"employee","name":"update","prerequisites":[]},{"specification":"This operation updates a notification preference record as identified by notificationPreferenceId in wrtn_notification_preferences. It allows an authenticated employee or moderator to change their notification configuration for a given channel, including enabling/disabling notifications, adjusting quiet hours or frequency limits, and setting advanced JSON preferences. The operation is strictly limited to the authenticated actor; users cannot update preferences belonging to other actors, and all update requests are validated for business and security compliance before committing changes. The response provides the updated preference object, reflecting the newly set values, and supports notification settings UX, settings sync, and compliance requirements.","description":"Update the notification preferences object for the current actor by ID. Allows updating channel enablement, quiet hours (muted_until), frequency limits per hour, advanced preference JSON, etc. The operation validates that only the authenticated employee or moderator can update their own notification preference. Mandatory error handling is enforced for any attempt to update another actor’s preference. The result includes the fully updated preference object for immediate UI update or further use.","summary":"Update a notification preference by ID in wrtn_notification_preferences table","path":"/wrtnEnterprise/moderator/notificationPreferences/{notificationPreferenceId}","method":"put","parameters":[{"name":"notificationPreferenceId","description":"The unique identifier of the notification preference to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the notification preference record: is_enabled, muted_until, frequency_limit_per_hour, and/or preference_json. Only mutable attributes can be provided, and all changes are validated before commit. This enables user or moderator control over their notification settings for compliance and preferences UX.","typeName":"IWrtnNotificationPreference.IUpdate"},"responseBody":{"description":"The updated notification preference including all configuration and channel information.","typeName":"IWrtnNotificationPreference"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of available notification delivery channels within the system. It is based on the wrtn_notification_channels table, and provides detailed information about each notification channel configured for the platform, including delivery method (e.g., email, in-app, push, sms), activation status, priority, metadata, and integration options.","path":"/wrtnEnterprise/moderator/notificationChannels","method":"patch","summary":"Retrieve a paginated list of notification channels with search and filtering options from wrtn_notification_channels table.","description":"This operation enables clients to search, filter, and paginate the platform notification channels stored in the wrtn_notification_channels table in the database. Notification channels represent the delivery mediums configured for alerting and messaging, such as email, SMS, in-app messaging, or push notifications. Each record contains channel code, display name, activation state, and configuration details for integration.\n\nThe endpoint supports complex querying: users can filter channels by code, enabled status, priority, and search for text content within display names or descriptions. Pagination and sorting options ensure efficient navigation for platforms with many channels or extensive configurations.\n\nSecurity considerations: Only actor types with administrative or notification configuration access should invoke this endpoint, and results may be contextually filtered depending on actor permission scope. Audit trails may be recorded for comprehensive compliance.\n\nRelated API operation: GET /notificationChannels/{notificationChannelId} retrieves details for a specific channel. PATCH is used here instead of GET to enable submission of complex search criteria, following the system's standard for filterable collection searches.","parameters":[],"requestBody":{"description":"Complex search, filter, and pagination criteria for notification channel list retrieval.","typeName":"IWrtnNotificationChannel.IRequest"},"responseBody":{"description":"Paginated list of notification channel summaries matching the query criteria.","typeName":"IPageIWrtnNotificationChannel.ISummary"},"authorizationActors":["moderator"],"name":"index","authorizationType":null,"authorizationActor":"moderator","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific notification channel, identified by its unique notificationChannelId. It is based on the wrtn_notification_channels table and returns all metadata and configuration fields for the designated channel, including delivery code, display name, enabled status, integration metadata, frequency limits, and preferences. This is a single-resource retrieval operation designed for precise configuration management and integration testing.","path":"/wrtnEnterprise/moderator/notificationChannels/{notificationChannelId}","method":"get","summary":"Retrieve full details of a notification channel by unique identifier from wrtn_notification_channels table.","description":"Use this endpoint to obtain comprehensive information for a single notification channel registered in the notification infrastructure. The wrtn_notification_channels table records each channel with a unique channel ID, code, display name, enabled status, configuration metadata, test/integration data, and delivery priority. This endpoint supports configuration dashboards, monitoring tools, or integration services needing the latest state of a given delivery channel.\n\nSecurity: Access is restricted to moderator (administrative) actors or equivalent notification managers. This operation enables validation of channel setup and assists in troubleshooting delivery or integration with the notification subsystem. Path parameter notificationChannelId must reference a valid notification channel UUID.\n\nRelated API: PATCH /notificationChannels enables complex list search and filtering of all channels. GET is used here for direct resource retrieval by primary key.","parameters":[{"name":"notificationChannelId","description":"Unique identifier of the notification channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested notification channel, including all configuration, activation, and integration metadata.","typeName":"IWrtnNotificationChannel"},"authorizationActors":["moderator"],"name":"at","authorizationType":null,"authorizationActor":"moderator","prerequisites":[]},{"specification":"This operation retrieves a paginated list of KPI (Key Performance Indicator) reports, supporting comprehensive filtering, sorting, and search capabilities for analytics and dashboard usage in the WrtnEnterprise platform. The KPI reports are derived from the wrtn_analytics_kpi_reports table, enabling drilldowns by company, team, category, and reporting period. This endpoint supports advanced analytics use cases for various actor roles including moderator, company master, manager, and (personal) member for their own data. Filtering options may include report period, KPI category, team, and other aggregation metadata. The operation utilizes the 'IWrtnAnalyticsKpiReport.IRequest' DTO for search input and returns paginated summary results in 'IPageIWrtnAnalyticsKpiReport.ISummary' format, facilitating high-performance data retrieval for analytics dashboards.","description":"Retrieves a filtered and paginated list of KPI (Key Performance Indicator) reports for analytics and dashboard consumption. This endpoint leverages the wrtn_analytics_kpi_reports table, allowing consumers to search with a wide range of parameters, such as KPI period (start/end), enterprise ID, team ID, and category of KPI metric. \n\nThe response format follows the summary view for each KPI report and provides total count and pagination metadata to support large-scale dashboard client applications. Security is enforced so that returned KPI reports are limited to the scope permitted by the requesting actor (e.g., moderator sees all, enterprise master sees own company, manager sees own team, member sees personal only). \n\nThe request body supports flexible search patterns, including date ranges, KPI category type, as well as result sorting and page size selection. This operation is critical for real-time analytics dashboards, enterprise reporting, and tiered KPI viewing scenarios. The output summary for each KPI report provides relevant metadata such as period start/end, KPI category, and aggregation status so clients can quickly visualize and interact with reporting data.","summary":"Search and retrieve a paginated list of WrtnEnterprise KPI reports (wrtn_analytics_kpi_reports) for analytics/dashboard use.","parameters":[],"requestBody":{"description":"Criteria and search parameters for KPI report filtering and analytics dashboard search.","typeName":"IWrtnAnalyticsKpiReport.IRequest"},"responseBody":{"description":"Paginated list containing summary information of matching KPI reports for analytics dashboard consumption.","typeName":"IPageIWrtnAnalyticsKpiReport.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","path":"/wrtnEnterprise/moderator/analytics/kpiReports","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of KPI (Key Performance Indicator) reports, supporting comprehensive filtering, sorting, and search capabilities for analytics and dashboard usage in the WrtnEnterprise platform. The KPI reports are derived from the wrtn_analytics_kpi_reports table, enabling drilldowns by company, team, category, and reporting period. This endpoint supports advanced analytics use cases for various actor roles including moderator, company master, manager, and (personal) member for their own data. Filtering options may include report period, KPI category, team, and other aggregation metadata. The operation utilizes the 'IWrtnAnalyticsKpiReport.IRequest' DTO for search input and returns paginated summary results in 'IPageIWrtnAnalyticsKpiReport.ISummary' format, facilitating high-performance data retrieval for analytics dashboards.","description":"Retrieves a filtered and paginated list of KPI (Key Performance Indicator) reports for analytics and dashboard consumption. This endpoint leverages the wrtn_analytics_kpi_reports table, allowing consumers to search with a wide range of parameters, such as KPI period (start/end), enterprise ID, team ID, and category of KPI metric. \n\nThe response format follows the summary view for each KPI report and provides total count and pagination metadata to support large-scale dashboard client applications. Security is enforced so that returned KPI reports are limited to the scope permitted by the requesting actor (e.g., moderator sees all, enterprise master sees own company, manager sees own team, member sees personal only). \n\nThe request body supports flexible search patterns, including date ranges, KPI category type, as well as result sorting and page size selection. This operation is critical for real-time analytics dashboards, enterprise reporting, and tiered KPI viewing scenarios. The output summary for each KPI report provides relevant metadata such as period start/end, KPI category, and aggregation status so clients can quickly visualize and interact with reporting data.","summary":"Search and retrieve a paginated list of WrtnEnterprise KPI reports (wrtn_analytics_kpi_reports) for analytics/dashboard use.","parameters":[],"requestBody":{"description":"Criteria and search parameters for KPI report filtering and analytics dashboard search.","typeName":"IWrtnAnalyticsKpiReport.IRequest"},"responseBody":{"description":"Paginated list containing summary information of matching KPI reports for analytics dashboard consumption.","typeName":"IPageIWrtnAnalyticsKpiReport.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","path":"/wrtnEnterprise/employee/analytics/kpiReports","method":"patch","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the full, detailed information of a single KPI (Key Performance Indicator) report record from the wrtn_analytics_kpi_reports table by the unique report identifier. It provides all available fields and aggregation metadata for comprehensive analytics dashboard display. This operation is essential for drilldown scenarios and analytics widgets that show the full breakdown or raw dataset for the selected KPI report. Use cases include advanced analytics for system moderators, company masters, team managers (within their scope), or personal access for individual employees. The response includes all relationships and aggregation details necessary for accurate KPI presentation. Path parameter 'reportId' must be a valid UUID of the KPI report.","description":"Retrieves a single, detailed KPI report object by its unique identifier, supplying all report metadata, aggregation values, and relationship information from the wrtn_analytics_kpi_reports table. \n\nThe operation enforces authorization to ensure requester can only access data within their allowed enterprise/team/actor scope (moderator, master, manager, member-self). It supports the primary dashboard analytics scenario: when a user clicks into a KPI report for detailed review, all aggregation properties, period information (start/end), category, and references to enterprise/team are included. \n\nSecurity considerations require proper validation of the provided 'reportId' path parameter, limiting disclosure to permitted users. The operation returns the 'IWrtnAnalyticsKpiReport' DTO, which contains all relevant summary and detail fields for client-side analytics rendering. Related operations for listing or searching KPI reports can be found under /analytics/kpiReports (PATCH).","summary":"Retrieve a single KPI report (wrtn_analytics_kpi_reports) by unique reportId for drilldown analytics.","parameters":[{"name":"reportId","description":"UUID of the target KPI report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed KPI report including metadata, aggregation, and relationships for analytics dashboard display.","typeName":"IWrtnAnalyticsKpiReport"},"authorizationActors":["moderator","employee"],"name":"at","path":"/wrtnEnterprise/moderator/analytics/kpiReports/{reportId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the full, detailed information of a single KPI (Key Performance Indicator) report record from the wrtn_analytics_kpi_reports table by the unique report identifier. It provides all available fields and aggregation metadata for comprehensive analytics dashboard display. This operation is essential for drilldown scenarios and analytics widgets that show the full breakdown or raw dataset for the selected KPI report. Use cases include advanced analytics for system moderators, company masters, team managers (within their scope), or personal access for individual employees. The response includes all relationships and aggregation details necessary for accurate KPI presentation. Path parameter 'reportId' must be a valid UUID of the KPI report.","description":"Retrieves a single, detailed KPI report object by its unique identifier, supplying all report metadata, aggregation values, and relationship information from the wrtn_analytics_kpi_reports table. \n\nThe operation enforces authorization to ensure requester can only access data within their allowed enterprise/team/actor scope (moderator, master, manager, member-self). It supports the primary dashboard analytics scenario: when a user clicks into a KPI report for detailed review, all aggregation properties, period information (start/end), category, and references to enterprise/team are included. \n\nSecurity considerations require proper validation of the provided 'reportId' path parameter, limiting disclosure to permitted users. The operation returns the 'IWrtnAnalyticsKpiReport' DTO, which contains all relevant summary and detail fields for client-side analytics rendering. Related operations for listing or searching KPI reports can be found under /analytics/kpiReports (PATCH).","summary":"Retrieve a single KPI report (wrtn_analytics_kpi_reports) by unique reportId for drilldown analytics.","parameters":[{"name":"reportId","description":"UUID of the target KPI report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed KPI report including metadata, aggregation, and relationships for analytics dashboard display.","typeName":"IWrtnAnalyticsKpiReport"},"authorizationActors":["moderator","employee"],"name":"at","path":"/wrtnEnterprise/employee/analytics/kpiReports/{reportId}","method":"get","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve a paginated list of dashboard export jobs for analytics module. This endpoint operates against the wrtn_analytics_dashboard_exports table and allows moderators or authorized employees to search, filter, and monitor previously initiated dashboard analytics data exports, including export status, requesting actor, data scope, report template, job status, error messages, and download URLs. The search supports advanced filtering based on status, report_template, requested or completed_at, scope (enterprise/team), and actor (employee/moderator), and provides a summary view suitable for dashboard/work queue management. All major fields for tracking data exports and auditing are exposed in the summary response DTO, ensuring full traceability for enterprise audit and analytics reporting use cases.\n\nPermission to view any export is enforced according to actor and data scope (moderator can view all, employee only their own or their team's as permitted). This operation is not for downloading the underlying data, but rather for tracking export history and job metadata.\n\nQuerying this analytics export list does not expose underlying analytics data, only metadata, job status, and links to completed downloads. Large queries will be paginated and return summary information only.","description":"This API retrieves a filtered, paginated listing of analytics dashboard export jobs submitted by authorized actors (moderator, employee). The listing shows metadata for each export: export job ID, status (pending, success, failure), data scope (enterprise/team/person), report template, request and completion timestamps, requesting actor/role, export job error messages, and download URL if ready.\n\nThe endpoint supports flexible search options such as filtering by status code, report template, requested/completed date range, data scope, or actor (employee/moderator). Access and results are filtered according to the role of the requesting actor: moderators see all exports for supported enterprises; employees only see their own, their team's, or their company's exports depending on their permission.\n\nPaginated, sorted response with only summary fields per job for scalability. Underlying exported analytics data is not included. Usage is rate-limited to prevent enumeration by unauthorized actors. All access is audit-logged for compliance.\n\nRelated operations include creation of new dashboard exports via POST, single export job retrieval (GET /analytics/dashboardExports/{exportId}), and export data download via secured download URL provided in job metadata.\n\nReturned data includes only metadata and links, not raw analytics outputs. Use completed download_url from job record to download processed export file if available.","path":"/wrtnEnterprise/analytics/dashboardExports","method":"patch","summary":"Search and list metadata about analytics dashboard export jobs (paginated view).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for dashboard export jobs listing.","typeName":"IWrtnAnalyticsDashboardExport.IRequest"},"responseBody":{"description":"Paginated list of summary information about analytics dashboard export jobs submitted by the actor (moderator/employee).","typeName":"IPageIWrtnAnalyticsDashboardExport.ISummary"},"authorizationType":null,"authorizationActor":null,"name":"index","prerequisites":[]},{"specification":"Retrieve detailed metadata about a specific dashboard export job by exportId from the wrtn_analytics_dashboard_exports table. This endpoint allows moderators and authorized employees to view full tracking and status information about a single export job, including all fields, job status/progress, requesting actor, data scope, report template, export parameters, request and completion/error timestamps, and download URL if processed. This is a read-only lookup operation for detailed export tracking and compliance auditing. No actual analytics data or file contents are returned here—only export job metadata, for full traceability and troubleshooting.","description":"Retrieve full metadata about a specific dashboard export job: requestor, enterprise/team scope, report config, export status, any error, timestamps, and (if available) download link. No analytics data contents are returned—only job metadata for monitoring and compliance trace.","path":"/wrtnEnterprise/analytics/dashboardExports/{exportId}","method":"get","summary":"Get detailed metadata information about a single dashboard export job by ID.","parameters":[{"name":"exportId","description":"Unique identifier for the dashboard export job to look up (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed metadata about the single dashboard export job, including all fields needed for audit/logging/status tracking.","typeName":"IWrtnAnalyticsDashboardExport"},"authorizationType":null,"authorizationActor":null,"name":"at","prerequisites":[]},{"specification":"This operation retrieves analytics traffic statistics in aggregated or filterable form, based on the WrtnEnterprise KPI Traffic reporting model (wrtn_analytics_kpi_traffic). It supports complex filtering, time window querying, breakdown by traffic_category (such as chat messages, procedure executions, connections, or file attachments), and grouping by enterprise and optional team. The response provides time-bucketed, aggregated business analytics for dashboards and monitoring. This enables authorized analysts, administrators, or business actors to drill down into usage patterns, detect anomalies, or export traffic summaries as required by business intelligence processes.","description":"Retrieve a filtered and paginated list of enterprise KPI traffic aggregates from the wrtn_analytics_kpi_traffic table. This operation accepts advanced search, filtering, and period settings (e.g., specific enterprise/team, time window, traffic_category), and returns time-bucketed, aggregate analytic results suitable for dashboard charting or report export.\n\nThe operation ensures that only authorized actors (moderator or employee for their own company/team) can access traffic analytics data, enforcing strict enterprise and team data isolation. Search requests can specify KPI reporting window, traffic analytic category, and organizational boundaries for precise breakdown.\n\nResults are paginated, supporting customizable range and granularity. Error handling will return explicit business errors for unauthorized access or invalid filter/period requests. Only business actors permitted by KPI access control matrix may view aggregated traffic analytics.","summary":"Search and retrieve a filtered, paginated list of business traffic KPI aggregates for dashboards.","parameters":[],"requestBody":{"description":"Search criteria, time range, scope, and pagination for traffic analytics retrieval.","typeName":"IWrtnAnalyticsKpiTraffic.IRequest"},"responseBody":{"description":"Paginated list of traffic KPI aggregation items matching search criteria.","typeName":"IPageIWrtnAnalyticsKpiTraffic.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","path":"/wrtnEnterprise/moderator/analytics/kpiTraffic","method":"patch","prerequisites":[]},{"specification":"This operation retrieves analytics traffic statistics in aggregated or filterable form, based on the WrtnEnterprise KPI Traffic reporting model (wrtn_analytics_kpi_traffic). It supports complex filtering, time window querying, breakdown by traffic_category (such as chat messages, procedure executions, connections, or file attachments), and grouping by enterprise and optional team. The response provides time-bucketed, aggregated business analytics for dashboards and monitoring. This enables authorized analysts, administrators, or business actors to drill down into usage patterns, detect anomalies, or export traffic summaries as required by business intelligence processes.","description":"Retrieve a filtered and paginated list of enterprise KPI traffic aggregates from the wrtn_analytics_kpi_traffic table. This operation accepts advanced search, filtering, and period settings (e.g., specific enterprise/team, time window, traffic_category), and returns time-bucketed, aggregate analytic results suitable for dashboard charting or report export.\n\nThe operation ensures that only authorized actors (moderator or employee for their own company/team) can access traffic analytics data, enforcing strict enterprise and team data isolation. Search requests can specify KPI reporting window, traffic analytic category, and organizational boundaries for precise breakdown.\n\nResults are paginated, supporting customizable range and granularity. Error handling will return explicit business errors for unauthorized access or invalid filter/period requests. Only business actors permitted by KPI access control matrix may view aggregated traffic analytics.","summary":"Search and retrieve a filtered, paginated list of business traffic KPI aggregates for dashboards.","parameters":[],"requestBody":{"description":"Search criteria, time range, scope, and pagination for traffic analytics retrieval.","typeName":"IWrtnAnalyticsKpiTraffic.IRequest"},"responseBody":{"description":"Paginated list of traffic KPI aggregation items matching search criteria.","typeName":"IPageIWrtnAnalyticsKpiTraffic.ISummary"},"authorizationType":null,"authorizationActor":"employee","name":"index","path":"/wrtnEnterprise/employee/analytics/kpiTraffic","method":"patch","prerequisites":[]},{"specification":"This operation retrieves a single analytic traffic KPI aggregation item by its unique identifier, based on the wrtn_analytics_kpi_traffic table. It provides full detail for a specific reporting time bucket and analytic category (e.g., chat_message, procedure_execution, connection, file_attachment), including organizational context (enterprise, optional team), traffic analytic metrics and snapshot, and business period covered. Used for detail drilldown in dashboards or analytic forensic review.","description":"Retrieve detailed information about a specific analytic traffic KPI report from the wrtn_analytics_kpi_traffic entity, referenced by its unique trafficId.\n\nThe response delivers all reporting period boundaries, aggregated analytic metrics (as structured JSON), and full business context—such as enterprise, optional team, KPI analytic category, and the precise time window captured. Strict access control ensures only authorized moderators or employees (for their own company/team) may access this data. Business errors are returned for unauthorized or out-of-scope attempts.\n\nThis endpoint is essential for supporting fine-grained dashboard insights, KPI audit trails, anomaly RCA (root cause analysis), and custom analytics export workflows.","summary":"Retrieve details for a single analytic traffic KPI aggregation item by ID.","parameters":[{"name":"trafficId","description":"Unique identifier for the analytic traffic KPI report item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed analytic KPI traffic aggregation entity for reporting period, category, and organizational breakdown.","typeName":"IWrtnAnalyticsKpiTraffic"},"authorizationType":null,"authorizationActor":"moderator","name":"at","path":"/wrtnEnterprise/moderator/analytics/kpiTraffic/{trafficId}","method":"get","prerequisites":[]},{"specification":"This operation retrieves a single analytic traffic KPI aggregation item by its unique identifier, based on the wrtn_analytics_kpi_traffic table. It provides full detail for a specific reporting time bucket and analytic category (e.g., chat_message, procedure_execution, connection, file_attachment), including organizational context (enterprise, optional team), traffic analytic metrics and snapshot, and business period covered. Used for detail drilldown in dashboards or analytic forensic review.","description":"Retrieve detailed information about a specific analytic traffic KPI report from the wrtn_analytics_kpi_traffic entity, referenced by its unique trafficId.\n\nThe response delivers all reporting period boundaries, aggregated analytic metrics (as structured JSON), and full business context—such as enterprise, optional team, KPI analytic category, and the precise time window captured. Strict access control ensures only authorized moderators or employees (for their own company/team) may access this data. Business errors are returned for unauthorized or out-of-scope attempts.\n\nThis endpoint is essential for supporting fine-grained dashboard insights, KPI audit trails, anomaly RCA (root cause analysis), and custom analytics export workflows.","summary":"Retrieve details for a single analytic traffic KPI aggregation item by ID.","parameters":[{"name":"trafficId","description":"Unique identifier for the analytic traffic KPI report item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed analytic KPI traffic aggregation entity for reporting period, category, and organizational breakdown.","typeName":"IWrtnAnalyticsKpiTraffic"},"authorizationType":null,"authorizationActor":"employee","name":"at","path":"/wrtnEnterprise/employee/analytics/kpiTraffic/{trafficId}","method":"get","prerequisites":[]},{"specification":"This operation provides a paginated and filterable list of dashboard settings for analytics, allowing authorized users such as moderators and employees to retrieve and search their configured dashboard preferences. The underlying data is sourced from the Analytics service's wrtn_analytics_dashboard_settings table, with relationships to the owning enterprise and associated employee, if any. Advanced querying, such as searching by dashboard_kind or filtering by enterprise/team/employee association, is supported to facilitate personalized experience and administrative review.","path":"/wrtnEnterprise/moderator/analytics/dashboardSettings","method":"patch","summary":"Search and retrieve a list of dashboard settings records with filtering, pagination, and search options (wrtn_analytics_dashboard_settings).","description":"This endpoint allows clients to retrieve a filtered, sorted, and paginated list of dashboard settings objects (IWrtnAnalyticsDashboardSetting) according to user role and access permissions. The operation queries wrtn_analytics_dashboard_settings for dashboard layouts and preferences, supporting filtering by enterprise ID, employee ID, dashboard kind, and creation/update timestamps. Each returned setting contains all core configuration fields as well as FK-mapped summary info for enterprise and, if present, employee.\n\nSecurity is strictly enforced: moderators can list all settings, while employees are restricted to their own or their company's records per business rules. The operation supports multi-field search and ordering for robust admin and self-service views. Related configuration context, such as associated enterprise and employee summary objects, are included for API UX consistency.\n\nPagination and sorting options are required and included in the request body schema (IWrtnAnalyticsDashboardSetting.IRequest). Only records not marked as deleted are returned in normal queries. Soft-deleted or orphaned settings are excluded except via explicit admin flag. Rate limiting and access checks are performed according to actor role.\n\nThe response returns a paginated result (IPageIWrtnAnalyticsDashboardSetting) containing the total count, page info, and the array of dashboard setting summaries. Error handling is standardized to return business-relevant error codes and reasons when filtering fails or access is denied.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sort options for dashboard settings query.","typeName":"IWrtnAnalyticsDashboardSetting.IRequest"},"responseBody":{"description":"Paginated result set of dashboard settings matching search criteria, including summary objects for enterprise and (optionally) employee.","typeName":"IPageIWrtnAnalyticsDashboardSetting"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation provides a paginated and filterable list of dashboard settings for analytics, allowing authorized users such as moderators and employees to retrieve and search their configured dashboard preferences. The underlying data is sourced from the Analytics service's wrtn_analytics_dashboard_settings table, with relationships to the owning enterprise and associated employee, if any. Advanced querying, such as searching by dashboard_kind or filtering by enterprise/team/employee association, is supported to facilitate personalized experience and administrative review.","path":"/wrtnEnterprise/employee/analytics/dashboardSettings","method":"patch","summary":"Search and retrieve a list of dashboard settings records with filtering, pagination, and search options (wrtn_analytics_dashboard_settings).","description":"This endpoint allows clients to retrieve a filtered, sorted, and paginated list of dashboard settings objects (IWrtnAnalyticsDashboardSetting) according to user role and access permissions. The operation queries wrtn_analytics_dashboard_settings for dashboard layouts and preferences, supporting filtering by enterprise ID, employee ID, dashboard kind, and creation/update timestamps. Each returned setting contains all core configuration fields as well as FK-mapped summary info for enterprise and, if present, employee.\n\nSecurity is strictly enforced: moderators can list all settings, while employees are restricted to their own or their company's records per business rules. The operation supports multi-field search and ordering for robust admin and self-service views. Related configuration context, such as associated enterprise and employee summary objects, are included for API UX consistency.\n\nPagination and sorting options are required and included in the request body schema (IWrtnAnalyticsDashboardSetting.IRequest). Only records not marked as deleted are returned in normal queries. Soft-deleted or orphaned settings are excluded except via explicit admin flag. Rate limiting and access checks are performed according to actor role.\n\nThe response returns a paginated result (IPageIWrtnAnalyticsDashboardSetting) containing the total count, page info, and the array of dashboard setting summaries. Error handling is standardized to return business-relevant error codes and reasons when filtering fails or access is denied.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sort options for dashboard settings query.","typeName":"IWrtnAnalyticsDashboardSetting.IRequest"},"responseBody":{"description":"Paginated result set of dashboard settings matching search criteria, including summary objects for enterprise and (optionally) employee.","typeName":"IPageIWrtnAnalyticsDashboardSetting"},"authorizationActors":["moderator","employee"],"name":"index","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves full details for a single dashboard settings record by its unique identifier. The record corresponds to a user's (or enterprise's) analytics dashboard configuration as stored in wrtn_analytics_dashboard_settings. Primary use cases include loading a dashboard layout for rendering, auditing user customizations, or admin troubleshooting. All fields (including nested configuration JSON and FK summaries for associated enterprise and employee) are returned.","path":"/wrtnEnterprise/moderator/analytics/dashboardSettings/{settingId}","method":"get","summary":"Get detailed information for a specific analytics dashboard settings record by ID (wrtn_analytics_dashboard_settings).","description":"This endpoint returns the complete configuration and metadata for a single analytics dashboard settings entry, identified by the settingId path parameter (UUID). The underlying source is wrtn_analytics_dashboard_settings, which represents personalized or scoped dashboard layout and widget preferences for analytics reporting.\n\nReturned data includes core properties (dashboard_kind, settings_json), timestamps, deleted_at (for compliance recovery), and relationship-mapped summary fields for the associated enterprise and (if present) employee. Moderators have access to all records, while employees may only request their own or their company's settings depending on business rules, with detailed access checks.\n\nIf the settingId is invalid, not found, or access is denied, the operation returns a clear business error. Soft-deleted records are omitted for normal users unless the actor is a moderator performing compliance recovery. The returned object always includes the FK-mapped enterprise and employee summary objects for API consistency and frontend composition.\n\nThis operation supports audit logging of access for compliance and security review. Rate limits and access scope are tightly enforced according to actor type and association with the setting.","parameters":[{"name":"settingId","description":"Unique identifier of the analytics dashboard settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete dashboard settings object, including all configuration, audit, and mapped summary objects for enterprise and employee.","typeName":"IWrtnAnalyticsDashboardSetting"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves full details for a single dashboard settings record by its unique identifier. The record corresponds to a user's (or enterprise's) analytics dashboard configuration as stored in wrtn_analytics_dashboard_settings. Primary use cases include loading a dashboard layout for rendering, auditing user customizations, or admin troubleshooting. All fields (including nested configuration JSON and FK summaries for associated enterprise and employee) are returned.","path":"/wrtnEnterprise/employee/analytics/dashboardSettings/{settingId}","method":"get","summary":"Get detailed information for a specific analytics dashboard settings record by ID (wrtn_analytics_dashboard_settings).","description":"This endpoint returns the complete configuration and metadata for a single analytics dashboard settings entry, identified by the settingId path parameter (UUID). The underlying source is wrtn_analytics_dashboard_settings, which represents personalized or scoped dashboard layout and widget preferences for analytics reporting.\n\nReturned data includes core properties (dashboard_kind, settings_json), timestamps, deleted_at (for compliance recovery), and relationship-mapped summary fields for the associated enterprise and (if present) employee. Moderators have access to all records, while employees may only request their own or their company's settings depending on business rules, with detailed access checks.\n\nIf the settingId is invalid, not found, or access is denied, the operation returns a clear business error. Soft-deleted records are omitted for normal users unless the actor is a moderator performing compliance recovery. The returned object always includes the FK-mapped enterprise and employee summary objects for API consistency and frontend composition.\n\nThis operation supports audit logging of access for compliance and security review. Rate limits and access scope are tightly enforced according to actor type and association with the setting.","parameters":[{"name":"settingId","description":"Unique identifier of the analytics dashboard settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete dashboard settings object, including all configuration, audit, and mapped summary objects for enterprise and employee.","typeName":"IWrtnAnalyticsDashboardSetting"},"authorizationActors":["moderator","employee"],"name":"at","authorizationActor":"employee","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered, and sorted list of reference KPI benchmarks used for analytics calibration and performance comparisons in the SaaS platform. It accesses the Benchmark table in the analytics domain schema, allowing authorized users (such as moderators or analytics platform clients) to search by business segment, KPI category, period, and other metadata. This supports dashboard benchmarking, analytics drill-downs, and business decision support in compliance with privacy boundaries. The operation ensures that only allowed analytical information for the user’s organization segment or permissible reference segments is returned. Filtering includes segment, category, and reporting window by date, with support for sorting by effective date or KPI category. This operation is primarily used by system moderators and designated analytics actors for reference report customization and trend comparison.","description":"Retrieve a comprehensive and paged list of analytics KPI benchmarks from the reference dataset. This operation facilitates advanced analytics, dashboard reporting, and performance comparison by allowing authorized users to filter and sort through the platform’s analytic benchmarks. \n\nSecurity considerations require that only users with analytics administration access or platform moderator role can access and view all benchmarks, while user-level requests are scoped appropriately by company or enterprise segment. The operation references analytic benchmark data whose structure is defined in the Benchmark table with key fields: KPI category (kpi_category), business reference segment (reference_segment), benchmark value (benchmark_value), and the period of effect.\n\nFiltering capabilities allow analytic actors to search for relevant KPI benchmarks by business segment (e.g., vertical market, region or size tier), reference category (chat volume, procedure cost, adoption rates), and by effective date. Pager and sort parameters support large dataset navigation and efficient analytics interface integration.\n\nDependencies include contextual understanding of analytic reporting periods, permissions verification against analytics role, and audit logging of sensitive reference data viewed by internal staff. Edge cases such as requests for out-of-scope (restricted) segments or categories trigger an access-denied error with audit trail. Users should employ this endpoint to retrieve reference benchmarks for analytic calibration, dashboard customization, or compliance comparison.","summary":"Search and retrieve a paginated, filtered list of analytics KPI benchmarks for reporting and calibration, referencing the Benchmark table.","parameters":[],"requestBody":{"description":"Search and filter criteria plus paging and sort parameters for analytics KPI benchmark retrieval.","typeName":"IWrtnAnalyticsBenchmark.IRequest"},"responseBody":{"description":"Paginated list of analytics benchmark reference objects matching the search/filter and reporting requirements.","typeName":"IPageIWrtnAnalyticsBenchmark.ISummary"},"authorizationActors":["moderator"],"name":"index","path":"/wrtnEnterprise/moderator/analytics/benchmarks","method":"patch","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detail information for a single reference analytics KPI benchmark, identified by its unique benchmark ID. It directly queries the wrtn_analytics_benchmarks table in the analytics schema and exposes all the business relevant metadata for the benchmark, including KPI category, reference business segment, benchmark value, and the effective date window. This endpoint is used to power analytics drill-downs, detailed reference annotation displays, and administrative review functions for calibration of business dashboards and analytics reporting.","description":"Obtain all business metadata and value for one reference analytics KPI benchmark by its unique identifier. The operation supports authorized role-based access (typically limited to system moderators or analytics administration users) and returns the complete data object for the specified benchmark row.\n\nThe operation ensures that access permissions are enforced, so only analytics moderators, administrators, or approved analytics platform clients can retrieve reference benchmark values. The referenced table fields include benchmark identifier, KPI category, business reference segment, measured benchmark value, and the period the value applies to. Security handling includes audit of all single-record reference lookups and masking of sensitive benchmark details in case of unauthorized requests.\n\nThis operation is intended for detailed drill-down in reporting dashboards, calibration of analytics computation modules, and configuration/review by moderators of the underlying reference data for performance KPIs.","summary":"Retrieve the detail for a single analytics KPI benchmark (by ID) for reporting, configuration, or annotation reference, referencing Benchmark table.","parameters":[{"name":"benchmarkId","description":"Unique identifier of the target analytics benchmark record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete reference object containing all analytics KPI benchmark information for the specified benchmark ID.","typeName":"IWrtnAnalyticsBenchmark"},"authorizationActors":["moderator"],"name":"at","path":"/wrtnEnterprise/moderator/analytics/benchmarks/{benchmarkId}","method":"get","authorizationActor":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of analytics report log entries. It serves as the primary access point for reviewing report render, export, scheduling, and error events for dashboards and analytics. The operation allows complex search and filtering on actor, organization, report template, and time period. It references the wrtn_analytics_report_logs schema, supporting business audit, troubleshooting, and dashboard usage analytics. The result provides list-style (summary) information to the caller, conforming to security and permission scope defined in requirements.","path":"/wrtnEnterprise/moderator/analytics/reportLogs","method":"patch","summary":"Search and retrieve a filtered, paginated list of analytics report logs (wrtn_analytics_report_logs table).","description":"Retrieve a filtered and paginated list of analytics report log entries. This operation is essential for audit, dashboard usage analytics, and monitoring dashboard/report/export activity for troubleshooting and compliance.\n\nThe request body allows complex filtering (actor, organization, report template, event kind, date range, etc.) and supports pagination and sorting, addressing enterprise use cases with large log volumes. Security is enforced such that only actors with appropriate permissions (moderator, or relevant company master/manager/employee per requirements) can access analytics logs within their scope. Sensitive details are not exposed beyond the viewer's permission window.\n\nThe response returns a paginated summary list of report log records, including actor, report type, event kind, and key timestamps. All data is drawn from the wrtn_analytics_report_logs table, with aggregation and search logic as per the analytics KPI and audit requirements.","parameters":[],"requestBody":{"description":"Search and pagination criteria for analytics report log filtering.","typeName":"IWrtnAnalyticsReportLog.IRequest"},"responseBody":{"description":"Paginated list of analytics report log summary objects matching search parameters.","typeName":"IPageIWrtnAnalyticsReportLog.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","authorizationType":null,"authorizationActor":"moderator","prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of analytics report log entries. It serves as the primary access point for reviewing report render, export, scheduling, and error events for dashboards and analytics. The operation allows complex search and filtering on actor, organization, report template, and time period. It references the wrtn_analytics_report_logs schema, supporting business audit, troubleshooting, and dashboard usage analytics. The result provides list-style (summary) information to the caller, conforming to security and permission scope defined in requirements.","path":"/wrtnEnterprise/employee/analytics/reportLogs","method":"patch","summary":"Search and retrieve a filtered, paginated list of analytics report logs (wrtn_analytics_report_logs table).","description":"Retrieve a filtered and paginated list of analytics report log entries. This operation is essential for audit, dashboard usage analytics, and monitoring dashboard/report/export activity for troubleshooting and compliance.\n\nThe request body allows complex filtering (actor, organization, report template, event kind, date range, etc.) and supports pagination and sorting, addressing enterprise use cases with large log volumes. Security is enforced such that only actors with appropriate permissions (moderator, or relevant company master/manager/employee per requirements) can access analytics logs within their scope. Sensitive details are not exposed beyond the viewer's permission window.\n\nThe response returns a paginated summary list of report log records, including actor, report type, event kind, and key timestamps. All data is drawn from the wrtn_analytics_report_logs table, with aggregation and search logic as per the analytics KPI and audit requirements.","parameters":[],"requestBody":{"description":"Search and pagination criteria for analytics report log filtering.","typeName":"IWrtnAnalyticsReportLog.IRequest"},"responseBody":{"description":"Paginated list of analytics report log summary objects matching search parameters.","typeName":"IPageIWrtnAnalyticsReportLog.ISummary"},"authorizationActors":["moderator","employee"],"name":"index","authorizationType":null,"authorizationActor":"employee","prerequisites":[]},{"specification":"This operation retrieves the full detail of a specific analytics report log entry, identified by logId. It is used to perform in-depth analysis of a single dashboard/report/export event, including event context for audit and compliance. The operation accesses the wrtn_analytics_report_logs table and exposes all relevant fields except for internal-only or sensitive technical details, conforming to the strict permission matrix defined in business requirements.","path":"/wrtnEnterprise/moderator/analytics/reportLogs/{logId}","method":"get","summary":"Get the detail for a specific analytics report log entry (wrtn_analytics_report_logs table).","description":"Get full information for a single analytics report log record by logId. This operation supports developer support, audit trail review, security investigation, and KPI validation workflows.\n\nSecurity considerations ensure that only permitted actors (moderator, company master/manager, or the employee who performed the event) can access the detail for a log entry, strictly within their organizational and role boundaries. The operation references the wrtn_analytics_report_logs table using the logId parameter. Returned log details include the actor, report template, event kind, event metadata, and timestamps, with all data mapped to the IWrtnAnalyticsReportLog DTO.\n\nRelated operations include list search (PATCH /analytics/reportLogs) and dashboard analytics views that drill down into single log events.","parameters":[{"name":"logId","description":"The unique identifier of the analytics report log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested analytics report log entry.","typeName":"IWrtnAnalyticsReportLog"},"authorizationActors":["moderator","employee"],"name":"at","authorizationType":null,"authorizationActor":"moderator","prerequisites":[]},{"specification":"This operation retrieves the full detail of a specific analytics report log entry, identified by logId. It is used to perform in-depth analysis of a single dashboard/report/export event, including event context for audit and compliance. The operation accesses the wrtn_analytics_report_logs table and exposes all relevant fields except for internal-only or sensitive technical details, conforming to the strict permission matrix defined in business requirements.","path":"/wrtnEnterprise/employee/analytics/reportLogs/{logId}","method":"get","summary":"Get the detail for a specific analytics report log entry (wrtn_analytics_report_logs table).","description":"Get full information for a single analytics report log record by logId. This operation supports developer support, audit trail review, security investigation, and KPI validation workflows.\n\nSecurity considerations ensure that only permitted actors (moderator, company master/manager, or the employee who performed the event) can access the detail for a log entry, strictly within their organizational and role boundaries. The operation references the wrtn_analytics_report_logs table using the logId parameter. Returned log details include the actor, report template, event kind, event metadata, and timestamps, with all data mapped to the IWrtnAnalyticsReportLog DTO.\n\nRelated operations include list search (PATCH /analytics/reportLogs) and dashboard analytics views that drill down into single log events.","parameters":[{"name":"logId","description":"The unique identifier of the analytics report log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested analytics report log entry.","typeName":"IWrtnAnalyticsReportLog"},"authorizationActors":["moderator","employee"],"name":"at","authorizationType":null,"authorizationActor":"employee","prerequisites":[]},{"specification":"This operation retrieves a paginated, filterable list of AI model pricing records from the wrtn_ai_model_pricings table. It enables internal moderators to search, sort, and review current and historical AI model price policies for audit, cost calculation, and configuration management. The endpoint supports refined filtering by model code, name, status, opened_at/closed_at period, and allows pagination for high-volume historical price data. Results are ordered by opened_at descending by default and include inactive/expired records when filters are set accordingly. Each record exposes all price fields as described in the Prisma schema.","path":"/wrtnEnterprise/moderator/aiModelPricings","method":"patch","summary":"Search and retrieve a paginated list of AI model pricing policies from wrtn_ai_model_pricings.","description":"Retrieve a paginated collection of AI model pricing configuration records from the wrtn_ai_model_pricings table. This operation supports advanced search, filtering, and sorting by model code, name, opened/closed dates, and active/inactive status. The primary use case is for internal moderators to audit, update, or analyze vendor/model token pricing over time for cost and billing purposes.\n\nThe endpoint enforces moderator-level access due to the sensitive nature of price configuration, and audit-trails are expected for search/filter events. Soft-deleted and expired (closed) price records can be included based on filter criteria and are visually distinguished in the results.\n\nRequest body parameters allow detailed filtering, sort ordering, and pagination (page size, page number). The response includes structured summary information for each price record, including code, name, current and historical prices for each token type, validity periods (opened_at/closed_at), current status, and deletion status, as documented in the wrtn_ai_model_pricings model's schema comments. Errors are returned for invalid filter criteria or excessive result-set size, with guidance for query refinement.","parameters":[],"requestBody":{"description":"Filter criteria, sort order, and pagination configuration for AI model pricing search operation.","typeName":"IWrtnAiModelPricing.IRequest"},"responseBody":{"description":"A paginated list of wrtn_ai_model_pricings summary records matching search criteria, for moderator review/audit.","typeName":"IPageIWrtnAiModelPricing.ISummary"},"authorizationType":null,"authorizationActor":"moderator","name":"index","prerequisites":[]},{"specification":"This operation retrieves the detailed information of a single AI model pricing record from wrtn_ai_model_pricings by its unique identifier. It allows moderators to inspect all configuration values, including vendor/model code, per-token prices, activation/expiration, effective dates, and audit trail fields for compliance and cost analysis.","path":"/wrtnEnterprise/moderator/aiModelPricings/{aiModelPricingId}","method":"get","summary":"Retrieve details of a specific AI model pricing policy from wrtn_ai_model_pricings by ID.","description":"Retrieve a detailed view of a single AI model pricing configuration record from the wrtn_ai_model_pricings database table by its unique identifier (UUID). The returned data includes all primary attributes: model code and display name, input/output token prices, and optional cache/reasoning token prices, as well as effective date ranges (opened_at, closed_at), current/expired/deleted status, and audit trail fields indicating creation, update, and soft-delete times.\n\nAccess is restricted to moderator actors as pricing policy is a sensitive internal configuration. Data includes all fields and context as described by the wrtn_ai_model_pricings Prisma schema comments, ensuring full auditability for cost, billing, configuration management, and compliance analysis. Error responses are returned when the ID does not exist or the record is not accessible due to moderator permission scope.\n\nRelated APIs (index/search, creation, update, delete) provide the full set of lifecycle operations for pricing policy management, but this operation is strictly for fetch-by-ID use cases as part of audit workflow.","parameters":[{"name":"aiModelPricingId","description":"Unique identifier (UUID) of the target AI model pricing record to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified wrtn_ai_model_pricings record, including all pricing and audit fields.","typeName":"IWrtnAiModelPricing"},"authorizationType":null,"authorizationActor":"moderator","name":"at","prerequisites":[]},{"specification":"This operation allows a moderator to create a new AI model pricing configuration entry, recording input/output/cached/reasoning token prices for a specific AI model and vendor code. The operation is associated with the wrtn_ai_model_pricings table, which stores price data, model code, display name, and validity dates. Only moderator actors may invoke this endpoint to ensure that only authorized personnel can create new AI pricing policies. Every invocation will record the moderator's identity and session for audit and compliance. All required price fields (input/output) must be set, with cache_token_price and reasoning_token_price as optional depending on the vendor/model. The operation enables cost calculation for downstream billing and analytics modules.","path":"/wrtnEnterprise/moderator/aiModelPricings","method":"post","summary":"Create a new WrtnEnterprise AI model pricing policy entry (wrtn_ai_model_pricings)","description":"Allows a moderator to register a new AI vendor/model pricing policy for use in downstream cost computations, reporting, and billing. Upon creation, the code (model identifier), name (for display in dashboards), and per-token price settings for input/output (optionally cache/reasoning) are required. The created record will store effective date ranges, audit who created it, and document all pricing details for regulatory compliance. Soft-delete is supported via deleted_at, and historical price tracking is maintained for auditability. Only moderators (Wrtn staff) may create pricing entries; employees or unauthenticated users are forbidden.\n\nProper validation must occur for code/title uniqueness and that prices are non-negative. Errors are returned for validation failures or permission issues. Price entries impact downstream cost calculations for chat and procedure features and must be accurate for legal and business reconciliation. This operation does not allow editing of prior records—use the update endpoint for modifications.","parameters":[],"requestBody":{"description":"AI model pricing configuration including code, display name, and all relevant token price fields","typeName":"IWrtnAiModelPricing.ICreate"},"responseBody":{"description":"The newly created WrtnEnterprise AI model pricing entity with all configured fields and audit metadata","typeName":"IWrtnAiModelPricing"},"authorizationType":null,"authorizationActor":"moderator","name":"create","prerequisites":[]},{"specification":"This operation allows a moderator to update an existing AI model pricing configuration, identified by aiModelPricingId, in the wrtn_ai_model_pricings table. It updates input/output/cached/reasoning token prices, display name, and other modifiable fields as necessary for compliance and business pricing evolution. The operation ensures only moderator actors may perform updates, recording all changes for audit and compliance. Pricing records are versioned for audit; effective/closed dates are managed to reflect policy timelines. This endpoint returns the updated AI model pricing entity.","path":"/wrtnEnterprise/moderator/aiModelPricings/{aiModelPricingId}","method":"put","summary":"Update an existing WrtnEnterprise AI model pricing entry (wrtn_ai_model_pricings)","description":"Allows a moderator to update token price settings, name, and configuration of an existing AI model and vendor pricing policy. The operation strictly enforces moderator-only access and records all identity and session information for traceability. Validation ensures price fields are non-negative, uniqueness is retained for code/title (if updated), and that optional cache and reasoning pricing updates are correctly handled according to the business configuration. Audit logs document all changes. If the target aiModelPricingId does not exist or is soft-deleted, an appropriate error response will be returned.\n\nPrice records affect downstream chat/procedure billing and analytics modules, so accuracy is legally and financially critical. If historical pricing closure or change of policy horizon is needed, use the appropriate business fields in the update payload. Only active moderators may update records; employees and unauthenticated users are denied.","parameters":[{"name":"aiModelPricingId","description":"The unique identifier (UUID) of the target AI model pricing record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Modifications to apply to the target AI model pricing configuration (must match IWrtnAiModelPricing.IUpdate schema)","typeName":"IWrtnAiModelPricing.IUpdate"},"responseBody":{"description":"The updated WrtnEnterprise AI model pricing entity after applying all changes","typeName":"IWrtnAiModelPricing"},"authorizationType":null,"authorizationActor":"moderator","name":"update","prerequisites":[]},{"specification":"This operation permanently erases an AI model pricing configuration entry, identified by its unique ID, from the WrtnEnterprise system. The target entity is the wrtn_ai_model_pricings table, which maintains pricing rules and history for individual AI model/vendor codes used in cost computation, billing, and analytics. Permanent removal is only permitted if there are no active references to this pricing record in usage events or invoice line items. Deletion is audit logged for compliance and traceability reasons.","path":"/wrtnEnterprise/moderator/aiModelPricings/{aiModelPricingId}","method":"delete","summary":"Permanently delete a WrtnEnterprise AI model pricing record by ID (wrtn_ai_model_pricings table)","description":"This API permanently deletes a specific AI model pricing configuration entry from the wrtn_ai_model_pricings table, using the provided aiModelPricingId as the unique identifier. The operation is used to retire pricing policies that are no longer active or needed; it can only be performed by moderator actors with sufficient privileges.\n\nAll deletions are subject to strict business validation: pricing entries must not be referenced by any active wrtn_billing_usage_events or wrtn_billing_invoice_items. If references exist, the erase operation will fail with a descriptive business error indicating the dependent entities. Successful erasure is audit logged with full moderator/session context for regulatory compliance and forensic traceability.\n\nAuthorization is restricted to moderator actors only. Attempts by unauthorized employees or clients will be denied with a compliance-mandated error. Recommended usage includes routine pricing cleanup, vendor/model deprecation events, or compliance-initiated retirements.","parameters":[{"name":"aiModelPricingId","description":"Unique identifier (UUID) of the target AI model pricing record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationActor":"moderator","name":"erase","prerequisites":[]}],"components":{"authorizations":[{"name":"moderator","kind":"admin","description":"Wrtn internal staff responsible for operating and managing the enterprise system; handles overall enterprise customer company management, administrator/manager appointments, service-wide system settings, onboarding, and enterprise customer support. Can access all system resources within the bounds of enterprise data isolation required by compliance. Authenticates via API as a privileged actor."},{"name":"employee","kind":"member","description":"Company staff at client enterprises using Wrtn AI services; may have roles such as master, manager, or member. Participates in all AI-driven business functions, collaborates within teams, and is subject to enterprise and team-based permissions as specified for B2B SaaS. Authenticates via API as a member user, with all permissions mapped via attributes, not by actor multiplicity."}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization actors in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIWrtnModeratorSession.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnModeratorSession.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnModeratorAppointment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnModeratorAppointment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnModeratorInvitation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnModeratorInvitation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnModeratorEmail.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnModeratorEmail.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterprise.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseEmployee.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseEmployeePersona.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeePersona.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseTeam.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseTeamCompanion.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseTeamCompanionAppointment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanionAppointment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseEmployeeInvitation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeeInvitation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseTeamCompanionInvitation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanionInvitation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnChatSession.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnChatSession.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnChatSessionHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnChatSessionHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnChatSessionConnection.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnChatSessionConnection.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnProcedure.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnProcedureSession.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnProcedureSession.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnProcedureSessionHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnProcedureSessionHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseProcedureUsageAnalyticsReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseProcedureUsageAnalyticsReport"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseProcedure.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseProcedure.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseTeamProcedure.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamProcedure.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAttachmentFile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAttachmentFile"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseDocumentation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseDocumentation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnEnterpriseDocumentationVersion.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseDocumentationVersion.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnFaqCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnFaqCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnFaq.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnFaq.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnBillingInvoice.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnBillingInvoice.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnBillingUsageEvent.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnBillingUsageEvent.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnBillingPayment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnBillingPayment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnBillingCredit.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnBillingCredit.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportTicket.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportTicketAssignment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicketAssignment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportTicketReply":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicketReply"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportTicketAttachment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicketAttachment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportFeedback.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportFeedback.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportFeatureRequest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportFeatureRequest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportFeatureVote.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportFeatureVote.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportTicketCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicketCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnSupportTicketStatus":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicketStatus"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnnouncement.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnnouncement.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnNotificationDelivery.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnNotificationDelivery.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnNotificationChannel.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnNotificationChannel.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnalyticsKpiReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnalyticsKpiReport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnalyticsDashboardExport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnalyticsDashboardExport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnalyticsKpiTraffic.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnalyticsKpiTraffic.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnalyticsDashboardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnalyticsDashboardSetting"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnalyticsBenchmark.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnalyticsBenchmark.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAnalyticsReportLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAnalyticsReportLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIWrtnAiModelPricing.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAiModelPricing.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IWrtnEnterpriseEmployee.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"email":{"type":"string","format":"email","description":"Employee's unique email address within the enterprise. Used for authentication and onboarding. Must comply with enterprise restrictions and uniqueness."},"password":{"type":"string","description":"Plain-text password for new account creation (will be securely hashed on backend). Must meet the enterprise's minimum complexity requirements. This maps to the Prisma column 'password'."},"name":{"type":"string","description":"Full display name of the employee being registered. Used for both display context and legal/audit requirements."},"title":{"oneOf":[{"const":"master","description":"Employee business title (master, manager, member, or null). Title determines onboarding privileges and access. If not provided, defaults to 'member'."},{"const":"manager","description":"Employee business title (master, manager, member, or null). Title determines onboarding privileges and access. If not provided, defaults to 'member'."},{"const":"member","description":"Employee business title (master, manager, member, or null). Title determines onboarding privileges and access. If not provided, defaults to 'member'."},{"type":"null"}],"description":"Employee business title (master, manager, member, or null). Title determines onboarding privileges and access. If not provided, defaults to 'member'."},"ip":{"type":"string","description":"Client IP address for session tracking/audit trail. Captured during join (registration) operations only."},"href":{"type":"string","format":"uri","description":"Absolute URL of the registration event. Used for audit/session linkage."},"referrer":{"type":"string","format":"uri","description":"Referring page URL at account registration, used for analytics/audit trail. Can be empty string if direct access."}},"required":["email","password","name","ip","href","referrer"],"description":"DTO for employee registration ('join') in the WrtnEnterprise platform. Creates a new employee record and initial session, collecting full audit metadata and required onboarding fields. Title is optional and defaults to 'member'."},"IWrtnEnterpriseEmployee.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized enterprise employee."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Summary object of the enterprise this employee belongs to. See wrtn_enterprise_employees.wrtn_enterprise_id. Always mapped as an object according to AutoBE interface rules."},"companions":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee"},"description":"Array of all team companion (membership) records for this employee. Each item provides a summary of the team memberships as per ISummaryFromEmployee DTO. Sourced via wrtn_enterprise_team_companions for current memberships."},"email":{"type":"string","format":"email","description":"The employee's unique email within the enterprise, used for authentication and onboarding. Mapped from wrtn_enterprise_employees.email."},"title":{"oneOf":[{"const":"master","description":"Business title (role) for the employee. Must be one of: master, manager, member."},{"const":"manager","description":"Business title (role) for the employee. Must be one of: master, manager, member."},{"const":"member","description":"Business title (role) for the employee. Must be one of: master, manager, member."},{"type":"null"}],"description":"Current business title (master/manager/member/null) for this employee. Null means unassigned or terminated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the employee record was created. Sourced from wrtn_enterprise_employees.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent employee record update, including title changes. Sourced from wrtn_enterprise_employees.updated_at."},"approved_at":{"oneOf":[{"type":"string","format":"date-time","description":"The ISO 8601 timestamp representing when the employee was first approved."},{"type":"null"}],"description":"Timestamp of employee's first approval. If null, the employee is not yet approved. Sourced from wrtn_enterprise_employees.approved_at."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee","description":"Full employee (actor) information of the authenticated user."}},"required":["id","enterprise","companions","email","created_at","updated_at","token"],"description":"DTO issued after employee join/login/refresh operation, including IDs, issued token, and detailed session context for the authenticated employee."},"IWrtnEnterpriseEmployee":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the enterprise employee. Sourced from wrtn_enterprise_employees.id."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Summary object of the enterprise this employee belongs to. See wrtn_enterprise_employees.wrtn_enterprise_id. Always mapped as an object according to AutoBE interface rules."},"companions":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee"},"description":"Array of all team companion (membership) records for this employee. Each item provides a summary of the team memberships as per ISummaryFromEmployee DTO. Sourced via wrtn_enterprise_team_companions for current memberships."},"email":{"type":"string","format":"email","description":"The employee's unique email within the enterprise, used for authentication and onboarding. Mapped from wrtn_enterprise_employees.email."},"title":{"oneOf":[{"const":"master","description":"Business title (role) for the employee. Must be one of: master, manager, member."},{"const":"manager","description":"Business title (role) for the employee. Must be one of: master, manager, member."},{"const":"member","description":"Business title (role) for the employee. Must be one of: master, manager, member."},{"type":"null"}],"description":"Current business title (master/manager/member/null) for this employee. Null means unassigned or terminated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the employee record was created. Sourced from wrtn_enterprise_employees.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent employee record update, including title changes. Sourced from wrtn_enterprise_employees.updated_at."},"approved_at":{"oneOf":[{"type":"string","format":"date-time","description":"The ISO 8601 timestamp representing when the employee was first approved."},{"type":"null"}],"description":"Timestamp of employee's first approval. If null, the employee is not yet approved. Sourced from wrtn_enterprise_employees.approved_at."}},"required":["id","enterprise","companions","email","created_at","updated_at"],"description":"Full entity type for an enterprise employee. Represents a staff member of a single company (enterprise), including business title, join/approval dates, and all current companion (team membership) relations. All foreign keys (enterprise, team companions) are automatically mapped to summary objects as per the atomic operation and mapping rules of AutoBE. Never includes password. Sourced from Prisma wrtn_enterprise_employees schema."},"IWrtnEnterprise.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprises","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the enterprise entity. Canonical reference for organization context across all business modules. Used as a foreign key and for compliance audit traceability."},"code":{"type":"string","description":"Unique business code serving as the enterprise's primary key for customer login, access control domain matching, regulatory isolation, and B2B client onboarding. Guaranteed unique across all tenant records."},"name":{"type":"string","description":"Legal company name for the enterprise. Used for formal reporting, compliance, and customer identity management workflows. Must be globally unique within this SaaS system."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp (UTC) for record creation. Crucial for compliance reporting, incident forensics, and business milestone monitoring."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion marker: when present, indicates enterprise is deactivated, offboarded, or retention-limited. Null for active tenants. Used for regulatory history and B2B platform lifecycle analytics."}},"required":["id","code","name","created_at"],"description":"Summary schema of an Enterprise (B2B customer organization) entity. Used as canonical business reference throughout the WrtnEnterprise platform. Captures business-unique organization code, legal name, audit timestamps, and deactivation status per regulatory requirements. All organization relationships and onboarding flows depend on this summary entity. Always referenced via object (never raw IDs) in all other DTOs for compliance, security, and audit friendliness."},"IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","properties":{"id":{"type":"string","format":"uuid","description":"Team-employee membership unique identifier. Used for HR compliance, audit, and management workflows."},"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"Reference to the team entity for this companion membership. Always mapped as a summary object under AutoBE relation-mapping rules. Never gives raw team ID at API layer."},"title":{"oneOf":[{"const":"member","description":"Acts as business role indicator: always 'member' or null (no other values allowed) per business invariants. Represents current HR/team assignment state."},{"type":"null","description":"When null, indicates employee is no longer an active member in this team (soft-deleted/revoked)."}],"description":"Current team role for the employee in this membership. Only values permitted are 'member' (active) or null (removed/left); no other values are valid per business rules. Used for downstream access management, onboarding detection, and org analytics."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp of initial team join. Used for organizational tracing, HR onboarding audits, and access compliance review."}},"required":["id","team","title","created_at"],"description":"Summary view of an enterprise employee's membership in a team (companion). Always provides the mapped team reference (never just team_id), the unique membership row ID for audit, strictly validated role/title (must be only 'member' or null), and the employee's join date for HR and compliance workflows. All fields optimized for B2B onboarding, org management, reporting, and legal validation. Used in all places summarizing an employee's team assignments."},"IWrtnEnterpriseTeam.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_teams","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the enterprise team."},"code":{"type":"string","description":"Unique code for the team (within enterprise)."},"name":{"type":"string","description":"Display name for the team."},"created_at":{"type":"string","format":"date-time","description":"Team record creation timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (null if active)."}},"required":["id","code","name","created_at"],"description":"Summary of an enterprise team entity sufficient for reference/context in team companion summaries. Contains key identifiers and timestamps."},"IWrtnEnterpriseEmployee.ILogin":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"email":{"type":"string","format":"email","description":"The employee's email address used for authentication. Must match a unique record in wrtn_enterprise_employees within the enterprise. Required to log in."},"password":{"type":"string","description":"The password (in plain text) that will be validated against the securely hashed password stored in wrtn_enterprise_employees. Must comply with minimum password policy (8+ characters with alphabet, digit, special character)."}},"required":["email","password"],"description":"Employee login credentials for authenticating with WrtnEnterprise. Used to verify the employee and issue JWT tokens. The email must be enterprise-unique. This DTO directly maps to the login operation and is not persisted in the database."},"IWrtnEnterpriseEmployee.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token previously issued to the client for renewing JWT access and refresh token pairs. This token is required to obtain a new access token and is validated and audited. String must be non-empty and should be securely protected on the client side."}},"required":["refresh_token"],"description":"DTO for requesting JWT token refresh for an employee session. Requires a valid refresh_token issued during login. Used to obtain a new access/refresh token pair according to WrtnEnterprise security policy. No database persistence—used only for session token management."},"IWrtnModerator.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","properties":{"mobile":{"type":"string","description":"Unique mobile phone number for SMS authentication and identification. Must be unique across all moderators. Used for account identification and notification purposes."},"nickname":{"type":"string","description":"Platform-unique nickname for display and internal use. Uniqueness is enforced among all moderators for safe lookup and UX."},"name":{"type":"string","description":"Full legal or business name of moderator user. Used for display, audit, and compliance."},"password":{"type":"string","description":"Plain text password for moderator authentication (will be securely hashed on backend before persisting as password_hashed in database). MUST NOT be pre-hashed. Backend is responsible for hashing."},"role":{"oneOf":[{"const":"master","description":"Assigned moderator role. Specify 'master' or 'manager' for initial appointment. Null or missing value means unappointed."},{"const":"manager","description":"Assigned moderator role. Specify 'master' or 'manager' for initial appointment. Null or missing value means unappointed."},{"type":"null"}],"description":"Assigned moderator role. Specify 'master' or 'manager' for initial appointment. Null or missing value means unappointed."}},"required":["mobile","nickname","name","password"],"description":"Create DTO for Moderator (wrtn_moderators). Used when onboarding a new internal administrator or support staff moderator. This DTO collects all required identity and authentication fields, enforces business uniqueness rules, and provides the role to be assigned (if any) to the moderator upon creation. Password must be provided in plain text for secure hashing on the backend. The moderator is essential for platform management, enterprise onboarding, internal support, and audit compliance."},"IWrtnModerator":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Moderator unique identifier. Maps to wrtn_moderators.id."},"mobile":{"type":"string","description":"Unique mobile phone number used for login, identification, and SMS authentication. Maps to wrtn_moderators.mobile."},"nickname":{"type":"string","description":"Unique moderator nickname for platform display and business use. Maps to wrtn_moderators.nickname."},"name":{"type":"string","description":"Full legal or business name of the moderator. Maps to wrtn_moderators.name."},"role":{"oneOf":[{"const":"master","description":"Moderator role assignment: 'master' or 'manager'. Null if not appointed."},{"const":"manager","description":"Moderator role assignment: 'master' or 'manager'. Null if not appointed."},{"type":"null"}],"description":"Moderator role value. One of: 'master', 'manager', or null (not appointed). Maps to wrtn_moderators.role."},"created_at":{"type":"string","format":"date-time","description":"Moderator account creation timestamp (ISO8601). Maps to wrtn_moderators.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Moderator record last modification timestamp (ISO8601). Maps to wrtn_moderators.updated_at."},"approved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when moderator was first approved. Null if not yet approved. Maps to wrtn_moderators.approved_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for deactivated or removed moderators. Null if not deleted. Maps to wrtn_moderators.deleted_at."}},"required":["id","mobile","nickname","name","created_at","updated_at"],"description":"Moderator account entity (wrtn_moderators). Used for internal administrator/support user management. Omits password fields for security. Includes all audit and business-profile attributes except credentials."},"IWrtnModerator.IUpdate":{"type":"object","description":"DTO for updating mutable profile fields or administrative role of an existing moderator in the internal SaaS administration system. Only fields present in the object will be updated. Immutable fields (id, created_at, deleted_at, password_hashed, etc.) must NOT be included. Unique constraints for nickname and mobile apply. All changes are fully audit-logged for compliance.","x-autobe-prisma-schema":"wrtn_moderators","properties":{"mobile":{"type":"string","description":"Unique mobile phone number for SMS authentication and identification, subject to uniqueness constraint. Used by moderators for sign-in and receiving system notifications. Must be in E.164 format where available."},"nickname":{"type":"string","description":"Platform-unique nickname chosen by the moderator for internal display and management. Changing the nickname must not conflict with existing nicknames. Uniqueness is enforced system-wide."},"name":{"type":"string","description":"Full legal or business name of the moderator user. Used for identity and audit. Standard character and length restrictions may apply."},"role":{"oneOf":[{"const":"master"},{"const":"manager"},{"type":"null"}],"description":"Assigned moderator role after update. One of: 'master', 'manager', or null for unappointed state. Controls appointment/approval authority. Setting role to null will remove user privileges for admin lifecycle actions."}},"required":[]},"IWrtnModeratorSession.IRequest":{"type":"object","description":"Request DTO for listing or searching moderator session records for a given moderator. Supports creation time range filtering, matching origin IPs, expired/non-expired session status, sorting, and pagination. Used to retrieve session trace data for audit, compliance, or support purposes.","properties":{"page":{"type":"integer","description":"Pagination: 1-based page index (default 1). Page values less than 1 will be treated as 1."},"limit":{"type":"integer","description":"Pagination: maximum number of records per page (default 20, max 100). Controls result set size for UI and API consumers."},"created_from":{"type":"string","format":"date-time","description":"Optional filter: sessions with creation timestamp on/after this UTC ISO 8601 value."},"created_to":{"type":"string","format":"date-time","description":"Optional filter: sessions with creation timestamp before this UTC ISO 8601 value."},"expired":{"type":"boolean","description":"Optional filter: true for only expired sessions, false for only active (not expired) sessions. Omit for all."},"ip":{"type":"string","description":"Optional substring filter: partial origin IP address search for session connections. Supply prefix or fragment as needed."},"referrer":{"type":"string","description":"Optional substring filter: partial referrer value search. Supply any fragment to match sessions with matching referrer at session creation."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort field, must be one of 'created_at' (default) or 'expired_at'."},{"const":"expired_at","description":"Sort field, must be one of 'created_at' (default) or 'expired_at'."}],"description":"Sort field, must be one of 'created_at' (default) or 'expired_at'."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction, either 'asc' (ascending, default) or 'desc' (descending)."},{"const":"desc","description":"Sort direction, either 'asc' (ascending, default) or 'desc' (descending)."}],"description":"Sort direction, either 'asc' (ascending, default) or 'desc' (descending)."}},"required":[]},"IWrtnModeratorSession":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_sessions","description":"Moderator session audit-trail entity mapping each internal moderator's authenticated session, including connection context (IP, referrer, href), session creation time, expiration, and linkage to the moderator actor. Used in audit and incident investigation views for privileged operations and compliance reviews. Strictly restricted to internal moderator access. Related to wrtn_moderators for actor details. This schema represents a single session row with all metadata, suitable for traceability and compliance dashboards.\n\nThis object is built from the wrtn_moderator_sessions table (columns: id, wrtn_moderator_id, href, referrer, ip, created_at, expired_at) and includes a reference to the moderator via the 'moderator' property. The moderator session object always has a non-null moderator and includes all available session context for exact audit traceability.\n\nSensitive authentication artifacts (e.g., password hashes) are NEVER included. The session token itself is not exposed via this DTO, only the business metadata required for auditview and compliance.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the moderator session, unique for every session event. UUID string."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Reference to the moderator actor that owns this session. All key moderator identity fields except password, always present in this session for audit context."},"href":{"type":"string","description":"Connection URL context on session creation. Captures the exact URL where the moderator logged in or initiated the session. Used for trace, audit, and forensics."},"referrer":{"type":"string","description":"Referrer URL present at login/session creation, often identifies the previous page or navigation source."},"ip":{"type":"string","description":"Origin IP address of the moderator's authentication session. Required for audit, incident analysis, and compliance."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the moderator session was created (session began). ISO 8601, UTC. Tracked for audit compliance."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the session expired. Null if session is still active. ISO 8601 UTC, directly from wrtn_moderator_sessions.expired_at."},{"type":"null"}],"description":"Timestamp when the session expired. Null if session is still active. ISO 8601 UTC, directly from wrtn_moderator_sessions.expired_at."}},"required":["id","moderator","href","referrer","ip","created_at"]},"IWrtnModerator.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the internal moderator. This is the primary key from wrtn_moderators.id, ensuring a globally unique value for each moderator within the platform."},"mobile":{"type":"string","description":"Platform-unique mobile phone number used for SMS authentication and identification. This value is critical for secure sign-in, password recovery and internal moderator contact. Sourced from wrtn_moderators.mobile. Format should follow business-standard phone number conventions."},"nickname":{"type":"string","description":"Moderator's platform-unique nickname for display and internal reference, taken from wrtn_moderators.nickname. This value is enforced unique throughout the entire platform and is used in various administrative audit and user-facing contexts."},"name":{"type":"string","description":"Full legal or business name of the moderator, as stored in wrtn_moderators.name. This field is primarily used for formal records, audit trails, and official communications."},"role":{"oneOf":[{"const":"master","description":"Assigned moderator role, reflecting platform-level privilege. Accepts values: 'master' (highest privilege, e.g., superadmin), 'manager' (operational/limited privileges). This value is defined in wrtn_moderators.role and determines available appointment and approval authorities for the moderator. Only these role values are allowed by business logic."},{"const":"manager","description":"Assigned moderator role, reflecting platform-level privilege. Accepts values: 'master' (highest privilege, e.g., superadmin), 'manager' (operational/limited privileges). This value is defined in wrtn_moderators.role and determines available appointment and approval authorities for the moderator. Only these role values are allowed by business logic."},{"type":"null","description":"If null, the moderator is unappointed, pending, or recovery state (no privileges). This null state is necessary for lifecycle tracking and permissions evaluation."}],"description":"Moderator's assigned platform privilege tier. See enum/null descriptions for allowed values. Taken from wrtn_moderators.role and used in all privilege evaluation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of moderator record creation, sourced from wrtn_moderators.created_at. This marks initial registration and is important for audit/compliance tracking."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp, sourced from wrtn_moderators.updated_at. Changed whenever the moderator's profile or role/privileges are updated in the system."},"approved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp at which the moderator was first approved (platform-appointed as active). This is sourced from wrtn_moderators.approved_at and tracked for appointment/audit lifecycle."},{"type":"null","description":"Approval has not been granted yet; field is null when moderator is pending, inactive, or never appointed."}],"description":"Timestamp for approval appointment status. See descriptions for value meaning. Null means not yet approved."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp indicating when the moderator was soft-deleted or suspended from the platform, sourced from wrtn_moderators.deleted_at. Used for lifecycle tracking and audit, and soft-deleted users are excluded from standard lists."},{"type":"null","description":"Moderator is active; no deletion date set."}],"description":"Soft deletion marker for lifecycle and audit. Null means active."}},"required":["id","mobile","nickname","name","created_at","updated_at"],"description":"Summary profile for an internal moderator (admin/support) including all core identifiers and appointment state for auditing and business display. Excludes confidential attributes, password, session/authentication data. Follows wrtn_moderators schema for API response summary use."},"IWrtnModeratorAppointment.IRequest":{"type":"object","description":"DTO for searching and filtering moderator appointment (role change or privilege assignment) event records for a given moderator. Used in internal administrator dashboards and audit reporting to enable precise query of all appointment and dismissal history, filtering by role, appointer, and time window. Includes pagination controls (page, limit), filter values for role and appointer, and optional time window (from, to). This request schema is designed for advanced filtering and compliance review of moderator role event history.","properties":{"page":{"type":"integer","minimum":1,"default":1,"description":"Result page number (for pagination). Defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of records to return per page (pagination). Defaults to 20, max 100."},"role":{"oneOf":[{"const":"master","description":"Filter for appointment/dismissal events of a specific moderator role. Allowed values: 'master', 'manager'. Null means no role filter."},{"const":"manager","description":"Filter for appointment/dismissal events of a specific moderator role. Allowed values: 'master', 'manager'. Null means no role filter."},{"type":"null"}],"description":"Filter for appointment/dismissal events of a specific moderator role. Allowed values: 'master', 'manager'. Null means no role filter."},"appointer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for events appointed/dismissed by this specific moderator (appointer's moderator id). Null means all appointers."},{"type":"null"}],"description":"Filter for events appointed/dismissed by this specific moderator (appointer's moderator id). Null means all appointers."},"from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of search window (inclusive, ISO 8601 datetime). Null to ignore lower bound."},{"type":"null"}],"description":"Start of search window (inclusive, ISO 8601 datetime). Null to ignore lower bound."},"to":{"oneOf":[{"type":"string","format":"date-time","description":"End of search window (exclusive, ISO 8601 datetime). Null to ignore upper bound."},{"type":"null"}],"description":"End of search window (exclusive, ISO 8601 datetime). Null to ignore upper bound."}},"required":["page","limit"]},"IWrtnModeratorAppointment":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_appointments","description":"Moderator appointment/change tracking entity. Records all appointment and removal actions for internal moderator users, including the target moderator, the appointer (if any), session context, the appointed (or removed) role, and the creation timestamp. Enables strict audit/compliance requirements for system-level privilege change. All references are provided with full context to support governance, lifecycle audit, and compliance investigations.\n\nThis DTO represents a single appointment event: who was appointed, by whom, in which session, to what role, and when. It is used in both detailed read API responses for compliance/traceability, and as a base for summary/consolidation views. Every returned field maps directly to wrtn_moderator_appointments columns (not including internal technical surrogate keys).","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator appointment record, matching the primary key of wrtn_moderator_appointments."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Reference to the moderator who was appointed or dismissed. Mapped from wrtn_moderator_appointments.wrtn_moderator_id. Always present, provides user identity and summary."},"appointer":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},{"type":"null"}],"description":"Reference to the moderator who performed or authorized the appointment or removal action. Nullable for initial account or system-seeded appointments. Mapped from wrtn_moderator_appointments.wrtn_appointer_id."},"appointer_session":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModeratorSession.ISummary"},{"type":"null"}],"description":"Reference to the moderator session context from which the appointment/removal was performed. Needed for audit-trace-level compliance and forensics. Nullable for initial system events; mapped from wrtn_moderator_appointments.wrtn_appointer_session_id."},"role":{"oneOf":[{"const":"master"},{"const":"manager"},{"type":"null"}],"description":"Role appointed to moderator in this event. One of: 'master', 'manager', or null if role has been explicitly removed in this event. Determines system-level privileges following business rules."},"created_at":{"type":"string","format":"date-time","description":"UTC ISO 8601 timestamp when the appointment/removal event was registered. Sourced from wrtn_moderator_appointments.created_at."}},"required":["id","moderator","role","created_at"]},"IWrtnModeratorAppointment.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_appointments","description":"Request body for creating a new moderator appointment (or removal of role) for internal staff. This DTO is submitted by privileged actors (typically authenticated moderators), and records the intended appointment/removal event, linking the moderator to be appointed, the role to assign (or null for removal), and, optionally, the appointer/appointer session for advanced audit context. Directly maps to columns of wrtn_moderator_appointments except for automatically filled audit fields.\n\nSecurity: Moderator identity and session context should be injected by business logic (from JWT/session context) and are not normally supplied by clients. Only internal authenticated actors may use this type. Business rule validation ensures only permitted roles and appointer contexts are set.","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Moderator's unique ID to be appointed or removed (maps to wrtn_moderators.id). Required."},"role":{"oneOf":[{"const":"master"},{"const":"manager"},{"type":"null"}],"description":"Role to be assigned in this appointment. Must be one of: 'master', 'manager' to appoint; or null to remove current appointment. Directly maps to wrtn_moderator_appointments.role. Required."},"appointer_id":{"type":"string","format":"uuid","description":"(Optional) ID of the moderator who is performing the appointment or removal, for advanced audit scenarios. Normally filled from server-side JWT context; client should not supply unless in trusted automation or migration flows."},"appointer_session_id":{"type":"string","format":"uuid","description":"(Optional) ID of the moderator session under which this event is performed, for full audit traceability. Normally filled from server-side session/JWT context."}},"required":["moderator_id","role"]},"IWrtnModeratorSession.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_sessions","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this moderator session (UUID from wrtn_moderator_sessions.id). Used for compliance, audit, and traceability of privileged actions in the system."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Summary object of the moderator user who owns this session. Provides identity, role, and appointment information required for audit and compliance context. Populated per AutoBE relation mapping rule."},"href":{"type":"string","description":"The full connection URL or context at session creation. Used for audit/forensic tracking, indicating exactly where the moderator logged in or acted within the platform. Key for security analysis or incident reconstruction."},"referrer":{"type":"string","description":"Referrer URL at the moment of session creation—identifies from which page or context the login was initiated. Used for context-aware audit and possible fraud pattern discovery."},"ip":{"type":"string","description":"Origin IP address of the moderator session. Critical for compliance, security audit, incident investigation, and geolocation enforcement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which this session was created (ISO8601, UTC). Serves as the baseline for audit investigations, lifecycle management, and session expiry logic."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp at which the session expired or was terminated (ISO8601 UTC). Required for session lifecycle and compliance tracking."},{"type":"null","description":"Session is still active or has not been explicitly expired."}],"description":"Timestamp marking when the session ended, if terminated; null if still active."}},"required":["id","moderator","href","referrer","ip","created_at"],"description":"Summary DTO for a moderator's session, designed for compliance, analytics, and privileged user audit tracing. Captures session context, connection details, and the associated moderator reference. Follows AutoBE interface mapping rules: FKs to moderator and other entities are always replaced with summary objects for rich context in audit/login tracing. All attribute descriptions emphasize audit, compliance, and privileged operations context for security assurance and regulatory needs."},"IWrtnModeratorAppointment.IUpdate":{"type":"object","description":"DTO for updating an existing moderator appointment (wrtn_moderator_appointments table). Only the 'role' property may be updated—system-controlled fields like moderator_id, appointer_id, and audit fields are never exposed. Setting the 'role' to 'master', 'manager', or null (explicitly) alters moderator privileges: null does not delete but unappoints this moderator. All updates are audit-logged and timestamped automatically for regulatory traceability and historical review. This schema is for update operations only; no creation or soft-delete by field omission is supported.","x-autobe-prisma-schema":"wrtn_moderator_appointments","properties":{"role":{"oneOf":[{"const":"master","description":"Set role to 'master' to appoint moderator with highest privilege; only use exact value. Business logic restricts authority and triggers full audit event."},{"const":"manager","description":"Set role to 'manager' to appoint moderator as manager-level admin. Only valid value is exact string 'manager'."},{"type":"null","description":"Set to null to explicitly revoke all appointment/privileges for this moderator. Passing null does not delete the record—audit and lifecycle are preserved for compliance."}],"description":"Appointed moderator's privilege level as part of this update. Acceptable values: 'master', 'manager', or null to explicitly clear all appointment roles (removal). Will never result in record deletion; only unappointing the role."}},"required":[]},"IWrtnModeratorInvitation.IRequest":{"type":"object","description":"DTO for filtering and paginating moderator invitations (wrtn_moderator_invitations). Used for listing invitations created by a particular moderator. All fields are optional filter or pagination parameters. Status is limited to 'active', 'expired', or 'deleted' as defined by business process. Email is partial or exact match depending on implementation. created_from and created_to are ISO 8601 date-time strings used as filter window for created_at timestamps. Pagination is advised for high-volume use. Returned results are controlled by these criteria.","properties":{"page":{"type":"integer","description":"Page number of results (1-based index). Optional; if absent, defaults to 1."},"limit":{"type":"integer","description":"Number of results per page. Optional, with default or max determined by backend policy."},"email":{"type":"string","description":"Partial or exact email to search for in invitation targets. Optional. Business rule may control wildcard/substring matching support."},"status":{"oneOf":[{"const":"active","description":"Status filter for invitation records. Choose one of: 'active' for pending, 'expired' for system-expired, or 'deleted' for soft deleted/canceled invitations."},{"const":"expired","description":"Status filter for invitation records. Choose one of: 'active' for pending, 'expired' for system-expired, or 'deleted' for soft deleted/canceled invitations."},{"const":"deleted","description":"Status filter for invitation records. Choose one of: 'active' for pending, 'expired' for system-expired, or 'deleted' for soft deleted/canceled invitations."}],"description":"Status filter for invitation records. Choose one of: 'active' for pending, 'expired' for system-expired, or 'deleted' for soft deleted/canceled invitations."},"created_from":{"type":"string","format":"date-time","description":"(Optional) Inclusive lower bound for created_at filter, ISO 8601 format."},"created_to":{"type":"string","format":"date-time","description":"(Optional) Inclusive upper bound for created_at filter, ISO 8601 format."}},"required":[]},"IWrtnModeratorInvitation":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_invitations","description":"Moderator invitation entity for platform-level onboarding and audit. Represents an invitation sent by a moderator (internal admin/support) to onboard a new moderator, including metadata and audit trail linkage. This object tracks both the inviting moderator, their session for traceability, the invitee's email address (which must be internal and system-specific), as well as timestamps for creation, expiry, and cancellation. All invitations are subject to strict compliance and audit, support onboarding workflow, and facilitate incident investigation and compliance reporting. This schema directly maps to the wrtn_moderator_invitations table in the database, with all critical fields for status, audit, and business logic.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this invitation record in wrtn_moderator_invitations. Primary key, auto-generated on invitation creation."},"wrtn_moderator_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator (internal admin/support) who issued this invitation. FK to wrtn_moderators.id. Represents the actor responsible for the invitation."},"wrtn_moderator_session_id":{"type":"string","format":"uuid","description":"Session context for this invitation event. FK to wrtn_moderator_sessions.id. Used in audit trail to trace which login/session initiated the invitation."},"email":{"type":"string","format":"email","description":"Destination email address for the invited moderator. Must be a system internal (not customer business) address."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp recording when this invitation was created."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 UTC expiration timestamp for the invitation. Null if pending or never explicitly set. Default is 7 days from creation."},{"type":"null"}],"description":"Timestamp for when the invitation expires. If set, invitation cannot be accepted after this time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp indicating logical deletion or cancellation of the invitation. If present, the invitation has been revoked and cannot be used for registration."},{"type":"null"}],"description":"Timestamp for logical deletion or cancellation of the invitation. Used for audit and compliance. If present, invitation is no longer usable."}},"required":["id","wrtn_moderator_id","wrtn_moderator_session_id","email","created_at"]},"IWrtnModeratorInvitation.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_invitations","description":"Request structure for creating a new internal moderator invitation. Used by platform administrators or support staff to onboard new moderator (admin) users. This structure is submitted to the invitation creation endpoint with all required data for issuance, including the invitee's internal system email address, optionally a specific expiration timestamp, and supports tracking via audit. Upon success, a new invitation record will be created linking to the inviting moderator, their session, and full metadata for compliance and workflow management. This schema strictly enforces system business rules: only internal system email addresses are permitted; expiration is optional but defaults to 7 days from creation if omitted (null).","properties":{"email":{"type":"string","format":"email","description":"Email address for the invited moderator. Must be a unique system-internal email. Only platform addresses—never client/enterprise domains—are permitted."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional explicit expiration timestamp for the invitation. If omitted or null, backend sets default (typically 7 days from creation)."},{"type":"null"}],"description":"Optional ISO 8601 UTC timestamp specifying when this invitation will expire. Invitation becomes invalid after this date. May be null for default expiry logic."}},"required":["email"]},"IWrtnModeratorInvitation.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_invitations","properties":{"expired_at":{"type":"string","format":"date-time","description":"Timestamp to set the invitation expiration. If not provided, the current or existing expiration will be applied. Update to future UTC ISO 8601 date-time to extend expiry. Set to null to remove expiration (NOT recommended for invite security)."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp to mark the invitation as cancelled/voided. When present, the invitation becomes inaccessible for onboarding. Set to current UTC ISO 8601 date-time to cancel the invite."}},"description":"DTO for updating a wrtn_moderator_invitations record (invitation update/cancellation). Used in moderator invitation management flows where expiration extension, cancellation (deletion), or other status changes are performed by authorized moderator actors. Any update is fully audit-logged. Supported fields:\n- expired_at: update to extend or set invitation expiration\n- deleted_at: update to cancel/revoke the invitation. Invitation is no longer valid for onboarding if set.\nAll changes are strictly validated and rejected if invitation is already expired or deleted.\n\nPRISMA SCHEMA: wrtn_moderator_invitations.\n","required":[]},"IWrtnModeratorEmail.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Search query for filtering moderator emails by address or display name. Allows partial matches."},"is_verified":{"type":"boolean","description":"Restrict search to only verified/unverified emails."},"created_after":{"type":"string","format":"date-time","description":"Return only emails created after the specified ISO 8601 UTC date-time."},"created_before":{"type":"string","format":"date-time","description":"Return only emails created before the specified ISO 8601 UTC date-time."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results per page. Defaults to 20, maximum 100."},"order_by":{"oneOf":[{"const":"created_at","description":"Sort results by this field. Allowed: created_at, verified_at, email."},{"const":"verified_at","description":"Sort results by this field. Allowed: created_at, verified_at, email."},{"const":"email","description":"Sort results by this field. Allowed: created_at, verified_at, email."}],"description":"Sort results by this field. Allowed: created_at, verified_at, email."},"order_direction":{"oneOf":[{"const":"asc","description":"Sort direction for ordered results: 'asc' (oldest/email asc) or 'desc' (newest/email desc). Default is 'desc'."},{"const":"desc","description":"Sort direction for ordered results: 'asc' (oldest/email asc) or 'desc' (newest/email desc). Default is 'desc'."}],"description":"Sort direction for ordered results: 'asc' (oldest/email asc) or 'desc' (newest/email desc). Default is 'desc'."}},"description":"DTO for searching and paginating secondary/primary emails of a moderator (used for wrtn_moderator_emails search/index APIs).\n\nSupported optional query parameters:\n- search: generic search term for email or display name\n- is_verified: restrict to only verified or unverified emails\n- created_after / created_before: date filter on creation time\n- page / limit: pagination parameters\n- order_by / order_direction: sorting controls (by creation, verification, or email)\nAny combination of fields can be specified for advanced filtering. Moderators may omit any for default list order.\n","required":[]},"IWrtnModeratorEmail":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_emails","description":"Moderator email record. Includes address, verification status, creation, and soft deletion data. Used for SSO, notifications, and compliance. Fields are mapped directly from wrtn_moderator_emails and all required audit and identity information is present.","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this moderator email record. Corresponds to wrtn_moderator_emails.id in the database."},"wrtn_moderator_id":{"type":"string","format":"uuid","description":"Moderator user to whom this email address belongs. Corresponds to wrtn_moderators.id in the database."},"email":{"type":"string","format":"email","description":"Moderator-owned email address. Must be unique per moderator and globally in the system. Used for SSO/notifications/compliance."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the email address was verified. If present, indicates the email has been successfully verified via required method (e.g., confirmation link, admin approval, etc). Null if verification is pending or email is not verified."},{"type":"null","description":"Indicates the moderator email is unverified, either temporarily or permanently, depending on business logic. A pending or unconfirmed moderator email will have null here."}],"description":"DateTime when the email address was verified as an official moderation address, or null if not yet verified. Used for SSO/notification/compliance workflows. Must be in valid ISO 8601 date-time format if present."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the email address was added to the moderator record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete marker storing the date/time this address was unregistered, removed, or made inactive. Null if active."},{"type":"null","description":"Null for active emails. Set to a date-time when this moderator email becomes inactive or is removed. Supports compliance/audit flows."}],"description":"DateTime of soft-deletion event. Null if still active/usable. Used for audit/compliance flows, helps track lifecycle state for regulatory compliance."}},"required":["id","wrtn_moderator_id","email","created_at"]},"IWrtnModeratorEmail.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_emails","description":"Moderator email creation DTO. Provides email address and associated moderator for creation in wrtn_moderator_emails. Optional fields set system-level metadata such as verification and soft delete state.","properties":{"wrtn_moderator_id":{"type":"string","format":"uuid","description":"Moderator user ID that owns this email address. Required, must refer to an existing moderator."},"email":{"type":"string","format":"email","description":"Moderator email address to associate. Must be unique per moderator and globally. Required."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this email was verified (ISO 8601 format). Typically set during creation if email has been confirmed or migrated from another system. Leave null if not verified at creation."},{"type":"null","description":"Set to null for unverified emails."}],"description":"Verification timestamp for the moderator email, or null if pending/not verified. Follows wrtn_moderator_emails.verified_at convention."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the email address was soft-deleted at creation (rare). Generally null during creation."},{"type":"null","description":"Default null for active moderator emails at creation."}],"description":"Soft-delete timestamp/marker for email, or null if not deleted at the moment of creation. Used to support audit/compliance. Default is null."}},"required":["wrtn_moderator_id","email"]},"IWrtnModeratorEmail.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_emails","description":"DTO for updating moderator email records. This type allows authorized moderator actors to update the address or verification status of a moderator's secondary email, following the wrtn_moderator_emails Prisma model. It is used in internal staff flows for SSO, notification, and compliance workflows. All business and audit requirements (uniqueness, verification) apply. All fields are optional for PATCH-like semantics; the client updates only the required fields.","properties":{"email":{"type":"string","format":"email","description":"A new unique email address for the moderator. Used for SSO, notifications, or compliance routing. Must be unique and not soft-deleted. Changes to this property are strictly audited."},"verified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this email was verified. Can be set to current date-time for marking as verified, or explicitly set to null to mark as unverified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete marker. Set to a valid ISO8601 date string to soft-delete this email record, or null to restore a previously deleted email."}},"required":[]},"IWrtnEnterprise.IRequest":{"type":"object","description":"DTO for searching and filtering WrtnEnterprise organizations/companies. Used as request body for paginated, filterable listing of enterprise tenants by internal moderators. Enables searching by company code, name, creation/updated range, creator moderator, and soft delete status. Designed for PATCH /wrtnEnterprise/moderator/enterprises. All filters are optional; if omitted, unfiltered search is performed.","properties":{"code":{"type":"string","description":"Filter for enterprises by unique enterprise code (partial or full match). Leave blank to ignore."},"name":{"type":"string","description":"Filter for enterprises by company legal name (partial or full match). Case-insensitive."},"moderator_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to enterprises created by this moderator. Provide the unique moderator UUID, or omit for all."},"created_at_gte":{"type":"string","format":"date-time","description":"Begin range (inclusive) for filtering by enterprise creation time. Provide as ISO8601 date-time, or omit for no lower bound."},"created_at_lte":{"type":"string","format":"date-time","description":"End range (inclusive) for filtering by enterprise creation time. Provide as ISO8601 date-time, or omit for no upper bound."},"updated_at_gte":{"type":"string","format":"date-time","description":"Begin range (inclusive) for filtering by last updated time. Provide as ISO8601 date-time, or omit for no lower bound."},"updated_at_lte":{"type":"string","format":"date-time","description":"End range (inclusive) for filtering by last updated time. Provide as ISO8601 date-time, or omit for no upper bound."},"deleted":{"type":"boolean","description":"If true, include only soft-deleted (deactivated) enterprises. If false, only active companies. If omitted, include both states."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Defaults to 1 if not provided."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page. Defaults to 20, system maximum is 100."},"sort_by":{"oneOf":[{"const":"code","description":"Sort the results by the selected field. Options: 'code', 'name', 'created_at', 'updated_at'."},{"const":"name","description":"Sort the results by the selected field. Options: 'code', 'name', 'created_at', 'updated_at'."},{"const":"created_at","description":"Sort the results by the selected field. Options: 'code', 'name', 'created_at', 'updated_at'."},{"const":"updated_at","description":"Sort the results by the selected field. Options: 'code', 'name', 'created_at', 'updated_at'."}],"description":"Sort the results by the selected field. Options: 'code', 'name', 'created_at', 'updated_at'."},"order":{"oneOf":[{"const":"asc","description":"Sort order for results: ascending ('asc') or descending ('desc'). Defaults to descending."},{"const":"desc","description":"Sort order for results: ascending ('asc') or descending ('desc'). Defaults to descending."}],"description":"Sort order for results: ascending ('asc') or descending ('desc'). Defaults to descending."}},"required":[]},"IWrtnEnterprise":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprises","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the enterprise. Corresponds to 'id' column in wrtn_enterprises table."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"The moderator (internal admin) who created this enterprise. Extracted from wrtn_moderator_id; full object, not just FK."},"moderatorSession":{"$ref":"#/components/schemas/IWrtnModeratorSession.ISummary","description":"The moderator session used for registering this enterprise. Derived from wrtn_moderator_session_id."},"code":{"type":"string","description":"Unique enterprise code used for business, login domain matching, and system identification. 'code' column."},"name":{"type":"string","description":"Legal company name for the enterprise. 'name' column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the enterprise record was created. 'created_at' column."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the enterprise record. 'updated_at' column."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp for the enterprise. Null if still active."},{"type":"null"}],"description":"Soft delete timestamp for the enterprise. Null if still active."}},"required":["id","moderator","moderatorSession","code","name","created_at","updated_at"],"description":"WrtnEnterprise company/tenant entity. Created by a moderator as a root scope for all organization data. All key business identity attributes, with moderator and session context resolved to full objects. Based on wrtn_enterprises Prisma table."},"IWrtnEnterprise.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprises","properties":{"code":{"type":"string","description":"Unique enterprise code (required), business-meaningful and must not conflict with existing codes. Will be validated for uniqueness."},"name":{"type":"string","description":"Legal company name (required), must be unique and valid as per business constraints."}},"required":["code","name"],"description":"DTO for creating a new WrtnEnterprise company/tenant. All fields must be provided; moderator/session context is injected from authentication (not supplied here). Corresponds to wrtn_enterprises table."},"IWrtnEnterprise.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprises","description":"DTO for updating WrtnEnterprise entity legal/company information (company name, business code, etc). This is used by moderator actors to update unique code and legal name of an existing enterprise entity. Only modifiable fields are included; foreign key actor IDs/session IDs and timestamps are never user-editable. Required for compliance and audit. All fields must match business/company rules and database constraints (uniqueness, length, allowed characters, etc).","properties":{"code":{"type":"string","description":"Unique enterprise business code. Must be unique across all enterprise records and used for domain-matching and business login. Cannot include whitespace or special characters except as allowed by company registration policy. Change is restricted and requires uniqueness check and audit logging."},"name":{"type":"string","description":"Official/Legal name of the enterprise/company. Used for compliance, display, and regulatory reporting. Must be unique across all enterprise records and pass any business validation for company name changes."}},"required":["code","name"]},"IWrtnEnterpriseEmployee.IRequest":{"type":"object","description":"Search and filter criteria for paginated listing of enterprise employees (wrtn_enterprise_employees) in the context of a specific enterprise. Used for moderator or authorized employee advanced search, audit, and administrative views. Request object supports filtering by name, email, title, approval status, pagination, sorting, etc. All parameters are optional; if none are provided, a default paginated list is returned. This object enables granular enterprise staff audits and compliance investigations.","properties":{"page":{"type":"integer","description":"Zero-based page index for pagination. Optional; default is 0 (first page). Minimum is 0."},"limit":{"type":"integer","description":"Maximum page size for paginated results. Optional; defaults and max are governed by API policy, e.g., default 25, max 200 per API settings."},"email":{"type":"string","description":"Partial or full email address to filter employees by (case-insensitive). Exact or LIKE-match as determined by API/business logic."},"name":{"type":"string","description":"Employee name (partial or full) to filter list. Enables searching for employees by display or legal name."},"title":{"oneOf":[{"const":"master","description":"If provided, filters by assigned employee business title/role. Only allowed values are master, manager, member."},{"const":"manager","description":"If provided, filters by assigned employee business title/role. Only allowed values are master, manager, member."},{"const":"member","description":"If provided, filters by assigned employee business title/role. Only allowed values are master, manager, member."}],"description":"If provided, filters by assigned employee business title/role. Only allowed values are master, manager, member."},"approved":{"type":"boolean","description":"If set to true, filters for only approved/active employees (approved_at not null). If false, returns only pending/unapproved employees."},"sortBy":{"oneOf":[{"const":"name","description":"Sort key for result ordering. Must match one of the allowed employee table columns."},{"const":"email","description":"Sort key for result ordering. Must match one of the allowed employee table columns."},{"const":"title","description":"Sort key for result ordering. Must match one of the allowed employee table columns."},{"const":"created_at","description":"Sort key for result ordering. Must match one of the allowed employee table columns."},{"const":"updated_at","description":"Sort key for result ordering. Must match one of the allowed employee table columns."}],"description":"Sort key for result ordering. Must match one of the allowed employee table columns."},"order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Sort order: 'asc' (ascending) or 'desc' (descending)."}],"description":"Sort order: 'asc' (ascending) or 'desc' (descending)."}},"required":[]},"IWrtnEnterpriseEmployee.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"email":{"type":"string","format":"email","description":"The employee's updated email address. Must remain unique within the enterprise."},"name":{"type":"string","description":"The employee's updated display name."},"password":{"type":"string","description":"The plain text password for the employee, which will be hashed by the backend before storage."},"title":{"oneOf":[{"const":"master","description":"The updated business title for the employee. Must be one of: master, manager, member."},{"const":"manager","description":"The updated business title for the employee. Must be one of: master, manager, member."},{"const":"member","description":"The updated business title for the employee. Must be one of: master, manager, member."}],"description":"The updated business title for the employee. Must be one of: master, manager, member."}},"required":[],"description":"Full update DTO for modifying enterprise employee accounts in wrtn_enterprise_employees. All fields are optional and only the supplied fields will be modified. NEVER allows updating ownership or system-controlled fields."},"IWrtnEnterpriseEmployeePersona.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"The page number for pagination when searching employee persona configurations. Defaults to 1 if not specified."},"limit":{"type":"integer","description":"Limits the number of persona results per page. Defaults to 20; cannot exceed 100."},"search":{"type":"string","description":"Partial text search for persona name or characteristics. Enables advanced lookup or autocomplete in persona selection workflows."},"tone":{"type":"string","description":"Filter by chatbot persona tone (style/mood). Use exact values such as 'friendly', 'formal', 'professional', etc., as set in persona configurations."},"auto_web_search":{"type":"boolean","description":"If specified, filters results to only those with web search enabled/disabled."},"auto_question_suggest":{"type":"boolean","description":"If specified, filters personas by their auto question suggestion feature setting."},"created_from":{"type":"string","format":"date-time","description":"Start of creation date range (inclusive) for persona lookup. ISO 8601 format."},"created_to":{"type":"string","format":"date-time","description":"End of creation date range (inclusive) for persona lookup. ISO 8601 format."},"sort_by":{"type":"string","description":"Sort field for persona search results. Common values: 'created_at', 'name', 'tone'. Defaults to descending creation date."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort order for persona search: 'asc' for ascending, 'desc' for descending. Defaults to 'desc' (latest first)."},{"const":"desc","description":"Sort order for persona search: 'asc' for ascending, 'desc' for descending. Defaults to 'desc' (latest first)."}],"description":"Sort order for persona search: 'asc' for ascending, 'desc' for descending. Defaults to 'desc' (latest first)."}},"required":[],"description":"Request/search DTO for paginated persona listing by enterprise employee. Allows advanced filtering, sorting, and search for persona-management flows. Does not expose any sensitive persona internals (e.g., memory, prompt) at this stage."},"IWrtnEnterpriseEmployeePersona":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_personas","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the persona record. Corresponds to wrtn_enterprise_employee_personas.id in DB."},"wrtn_enterprise_employee_id":{"type":"string","format":"uuid","description":"ID of the employee who owns this persona (wrtn_enterprise_employee_personas.wrtn_enterprise_employee_id). Reference is resolved as 'employee' object in most DTOs."},"avatar_image_url":{"type":"string","description":"URL for the persona's avatar image (usually GIF or PNG)."},"name":{"type":"string","description":"Persona display name for AI chatbot context and selection UI."},"auto_web_search":{"type":"boolean","description":"Whether auto web search is enabled for this persona."},"auto_question_suggest":{"type":"boolean","description":"Whether automatic question suggestion is enabled for this persona."},"tone":{"type":"string","description":"Chatbot persona's tone and style (e.g., 'friendly', 'formal')."},"memory":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Persona memory/context for chatbot. Encrypted; used only on secure internal transfer. May be null."},"prompt":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Custom prompt for AI behaviors (if provided). Used to alter chatbot responses for this persona. May be null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this persona was created (ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for persona. Null if active."}},"required":["id","wrtn_enterprise_employee_id","avatar_image_url","name","auto_web_search","auto_question_suggest","tone","created_at"],"description":"Detailed configuration for an employee-specific chatbot persona as used by wrtn_enterprise_employee_personas. Includes all business logic fields and audit-relevant metadata as per compliance/audit requirements. Sensitive fields like memory and prompt are encrypted in storage; exposed via API only for owner's use or privileged moderator review."},"IWrtnEnterpriseEmployeePersona.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_personas","properties":{"avatar_image_url":{"type":"string","description":"The avatar image URL (usually a GIF) for the persona. Cannot be null or empty. Maps to wrtn_enterprise_employee_personas.avatar_image_url in the database."},"name":{"type":"string","description":"Name of the persona avatar. Used for display and persona selection. Cannot be null or empty. Maps to wrtn_enterprise_employee_personas.name in the database."},"auto_web_search":{"type":"boolean","description":"If true, enables auto web search for this persona. Controls searching behavior for AI chat models. Maps to wrtn_enterprise_employee_personas.auto_web_search."},"auto_question_suggest":{"type":"boolean","description":"If true, enables auto question suggestion feature for the persona. Maps to wrtn_enterprise_employee_personas.auto_question_suggest."},"tone":{"type":"string","description":"Tone and manner (style) string for the persona's chatbot usage. Typically values like 'formal', 'friendly', etc. Maps to wrtn_enterprise_employee_personas.tone."},"memory":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Persona memory, stored as an arbitrary JSON-serialized string (encrypted). Business context for memory payload used by the chatbot model. Optional. Maps to wrtn_enterprise_employee_personas.memory."},"prompt":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Custom prompt configuration for the persona. Used to control initial AI persona context or instructions. Optional. Maps to wrtn_enterprise_employee_personas.prompt."}},"required":["avatar_image_url","name","auto_web_search","auto_question_suggest","tone"],"description":"Payload for creating a new persona for a given enterprise employee (wrtn_enterprise_employee_personas). The persona defines configuration for AI chatbot behavior including avatar, name, web search, question suggestion flags, tone, and optional custom memory or prompt. Session and employee linkage are provided via authentication context, not in this DTO. See business rules for persona append-only versioning."},"IWrtnEnterpriseEmployeePersona.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_personas","properties":{"id":{"type":"string","format":"uuid","description":"Persona unique identifier."},"name":{"type":"string","description":"Name of the persona avatar."},"avatar_image_url":{"type":"string","description":"URL to persona's avatar image."}},"required":["id","name","avatar_image_url"],"description":"Summary object for wrtn_enterprise_employee_personas, used for reference in chat sessions and lists."},"IWrtnEnterpriseEmployee.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the enterprise employee."},"email":{"type":"string","format":"email","description":"Employee email address (unique per enterprise)."},"title":{"oneOf":[{"const":"master"},{"const":"manager"},{"const":"member"},{"type":"null"}],"description":"Current business title (master/manager/member/null)."},"created_at":{"type":"string","format":"date-time","description":"Employee record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Employee record last update timestamp."},"approved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date of employee's approval, null if not yet approved."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference to the parent enterprise for this employee."},"companions":{"type":"array","description":"All current team companion (membership) entries for this employee across teams (summary context, see IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee).","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee"}}},"required":["id","email","title","created_at","updated_at","enterprise","companions"],"description":"Summary of an enterprise employee, sufficient for lists and relations. Includes title, email, key timestamps, parent enterprise object, and all team memberships as summary objects."},"IWrtnEnterpriseEmployeePersona.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_personas","description":"Update structure for Employee Persona in Wrtn Enterprise. This DTO is used when an authenticated employee updates their persona settings. It creates a new persona version (append only) following versioned configuration; does not partially update but fully replaces the previous persona data. Only the owner employee can update their own persona, and every change is audit-logged. All fields exactly match the persona definition.\n\nFields:\n- `avatar_image_url`: Image URL (required)\n- `name`: Persona name (required)\n- `auto_web_search`: Enable auto web search (required)\n- `auto_question_suggest`: Enable auto question suggestion (required)\n- `tone`: Persona style/tone (required)\n- `memory`: Arbitrary JSON (Persona memory snapshot, optional)\n- `prompt`: Custom prompt, optional\n\nSchema fields are derived from the wrtn_enterprise_employee_personas Prisma model. Partial update is not supported—missing fields will result in validation error. All persona changes are considered full replacements and trigger persona versioning and append-only audit trailing.","properties":{"avatar_image_url":{"type":"string","description":"URL of the persona's avatar image. Required. Provided by employee during persona creation/update. Must be an HTTP(s) URL and typically references a GIF or image in the system's attachment/file store."},"name":{"type":"string","description":"Persona display name. Required. Chosen by the employee, must be non-empty but can include arbitrary strings (with reasonable length limits, e.g., 2-24 characters)."},"auto_web_search":{"type":"boolean","description":"Whether the persona is configured to enable automatic web search capability. Enables the chatbot to inject web-search behavior when relevant. Required, explicitly supplied each time."},"auto_question_suggest":{"type":"boolean","description":"Whether the persona should provide automatic question suggestions, such as topic hints or next questions in chat. Required, explicitly supplied each time."},"tone":{"type":"string","description":"Chatbot tone/manner setting (e.g., 'formal', 'friendly') that guides the persona's response style. Freeform string with reasonable business constraints."},"memory":{"oneOf":[{"type":"string","description":"Persona memory as arbitrary serialized (JSON-encoded) string. Optional; null or empty indicates no initial memory. Client is responsible for serialization; contents are application-defined within security controls."},{"type":"null"}],"description":"Persona memory as arbitrary serialized (JSON-encoded) string. Optional; null or empty indicates no initial memory. Client is responsible for serialization; contents are application-defined within security controls."},"prompt":{"oneOf":[{"type":"string","description":"System/user prompt for persona. Optional; null indicates no custom prompt applied (default model prompt used). May be a rich or plain-text string, subject to length/security checks."},{"type":"null"}],"description":"System/user prompt for persona. Optional; null indicates no custom prompt applied (default model prompt used). May be a rich or plain-text string, subject to length/security checks."}},"required":["avatar_image_url","name","auto_web_search","auto_question_suggest","tone"]},"IWrtnEnterpriseTeam.IRequest":{"type":"object","description":"Query/filtering/pagination structure for searching teams within an enterprise. Used as the request body for team search endpoints, enabling multi-attribute searching and business-reasonable pagination. All fields are optional.\n\n- `code`: Exact or partial match for unique team code within the enterprise\n- `name`: Exact or partial match for team display name\n- `parent_id`: Filter by direct parent team UUID\n- `page`: Pagination page index (>=1; default 1)\n- `limit`: Number of items per page (1<=limit<=100; default 20)\n- `sort_by`: Field to sort by (allowed: 'created_at', 'name', 'code')\n- `sort_order`: Sort direction ('asc' or 'desc')\n\nDoes not expose any fields other than those documented here. Filtering on teams is always performed within enterprise scope as passed in the API URL (enterpriseId).","properties":{"code":{"oneOf":[{"type":"string","description":"Optional filter by exact or partial team code. If provided, limits result set to teams where team code matches (partial or wildcard search depending on backend implementation)."},{"type":"null"}],"description":"Optional filter by exact or partial team code. If provided, limits result set to teams where team code matches (partial or wildcard search depending on backend implementation)."},"name":{"oneOf":[{"type":"string","description":"Optional filter by exact or partial team name. If specified, limits to matching team names (case-insensitive, partial/wildcard)."},{"type":"null"}],"description":"Optional filter by exact or partial team name. If specified, limits to matching team names (case-insensitive, partial/wildcard)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Direct parent team's UUID. If provided, restricts results to teams with that parent (supports team tree navigation)."},{"type":"null"}],"description":"Direct parent team's UUID. If provided, restricts results to teams with that parent (supports team tree navigation)."},"page":{"type":"integer","minimum":1,"default":1,"description":"Pagination page index (must be at least 1). Default: 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of items per page. Accepts values between 1 and 100 (inclusive). Default: 20."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Allowed values: 'created_at', 'name', 'code'. Default: 'created_at'."},{"const":"name","description":"Field to sort results by. Allowed values: 'created_at', 'name', 'code'. Default: 'created_at'."},{"const":"code","description":"Field to sort results by. Allowed values: 'created_at', 'name', 'code'. Default: 'created_at'."}],"description":"Field to sort results by. Allowed values: 'created_at', 'name', 'code'. Default: 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for listed teams. Allowed: 'asc' (ascending), 'desc' (descending). Default: 'desc'."},{"const":"desc","description":"Sort direction for listed teams. Allowed: 'asc' (ascending), 'desc' (descending). Default: 'desc'."}],"description":"Sort direction for listed teams. Allowed: 'asc' (ascending), 'desc' (descending). Default: 'desc'."}},"required":[]},"IWrtnEnterpriseTeam":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_teams","description":"Team entity for enterprise (detail/summary type). Includes unique identifiers, business context fields for team browsing, plus audit fields for creation/updates and a reference to the parent team for organizational hierarchy.\n\nThe 'parent' property exposes hierarchical organization context, returned as a summary object (IWrtnEnterpriseTeam.ISummary) or null for root-level teams. Audit fields (created_at, updated_at, deleted_at) enable compliance, reporting, and administrative workflows. The inclusion of 'deleted_at' as a soft delete marker supports retention, traceability, and unambiguous determination of team state.\n\nThis type supports API operations including get/detail, search, and filtered browsing by parent/child hierarchy in compliance with WrtnEnterprise business and audit requirements.\n","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the enterprise team."},"name":{"type":"string","description":"Team's business-visible name (unique within enterprise)."},"code":{"type":"string","description":"Unique business code for team-level operations, invitations, and role scoping (unique within enterprise)."},"parent":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Reference to the parent team for hierarchical structuring. Null if the team is at root level. Enables navigation and filtered search by parent-child relationships."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the team was created; used for audit, compliance, and administrative workflows."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this team entity."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. If present, the team is deleted from active listings but retained for compliance and audit. Null for active teams."}},"required":["id","name","code","parent","created_at","updated_at"],"$comment":"Expanded (child) object; see IWrtnEnterpriseTeam.ISummary for minimal form."},"IWrtnEnterpriseTeam.ICreate":{"type":"object","description":"Request schema for creating a new enterprise team in the context of a given enterprise. Used in POST /wrtnEnterprise/employee/enterprises/{enterpriseId}/teams. Includes team creation attributes: code (business-unique team code), name (business display name), and optional parent team id for hierarchical structuring. Parent_id is used for creating nested teams; if omitted/null, the new team is created at root. Uniqueness checks are enforced on code and name per enterprise. All other attributes (audit, timestamps, membership assignment) are system-managed. This schema maps to wrtn_enterprise_teams for team creation operations only.","x-autobe-prisma-schema":"wrtn_enterprise_teams","properties":{"code":{"type":"string","description":"Unique team code, required and business-unique within the enterprise. Used for invitations, integration, and programmatic team identification."},"name":{"type":"string","description":"Team display name, required and business-unique within the enterprise. Used for UI display, search, and all human-facing logic."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent team ID (UUID) for hierarchical team creation. If null or omitted, team is created at root level. Corresponds to parent_id FK in wrtn_enterprise_teams."}},"required":["code","name"],"examples":{"v0":{"code":"dev","name":"Developer Group","parent_id":"f3e80657-7ed7-457d-b864-79ee879706cb"}}},"IWrtnEnterpriseTeam.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_teams","properties":{"code":{"type":"string","description":"Unique team code within the enterprise. Used to manage routing, invitations, and identification. Enforced to be unique within the target wrtn_enterprises.id scope for data isolation and business workflows. Populated according to business process requirements, strictly validated for uniqueness in update operations. See Prisma schema wrtn_enterprise_teams.code."},"name":{"type":"string","description":"Display name of the team, must be unique within the enterprise (wrtn_enterprises.id). Used in UIs, reporting, audit logs, and all enterprise workflows; renamed with full audit trail. See wrtn_enterprise_teams.name in the Prisma schema."},"parent_id":{"oneOf":[{"type":"string","description":"UUID of the parent team within the enterprise hierarchy. Enables parent-child team structures and organization trees for B2B clients. Nullable for top-level teams. See Prisma schema wrtn_enterprise_teams.parent_id."},{"type":"null","description":"Set null to make this team a top-level team (no parent)."}],"description":"Optional parent team. For root-level teams, use null. This value establishes parent-child hierarchical relationships."}},"description":"Update DTO for an Enterprise Team as defined in wrtn_enterprise_teams. Allows updating the code, name, and hierarchical parent of a team in strict accordance with business rules and audit requirements. Uniqueness and non-null constraints enforced as per the database schema. This schema does not include enterprise/team/employee identity fields, which are resolved from the authentication context. Refer to wrtn_enterprise_teams table in Prisma schema for audit, compliance, and uniqueness handling.","required":[]},"IWrtnEnterpriseTeamCompanion.IRequest":{"type":"object","properties":{"membership_status":{"oneOf":[{"type":"string","description":"Restrict listed companions (members) to a specific membership status. Allowed values include 'active', 'inactive', or null for both. 'active' selects currently assigned members, 'inactive' retrieves former (left or removed) members. Leave null to list all."},{"type":"null","description":"Omit (or set to null) to include all members without filtering by status."}],"description":"Filter for team companion/member status in results. Use null or omit to include both current and former members."},"search":{"oneOf":[{"type":"string","description":"A search string to match employee name, email, or relevant attributes for fuzzy or full-text matching. Enables fast lookup of members in large teams. Null for no search filter."},{"type":"null","description":"No filtering by search string; include all members."}],"description":"Search phrase for finding team companions (members) by employee attributes. Null if not searching/filtering."},"sort_by":{"oneOf":[{"type":"string","description":"Field to sort companions by (e.g., 'created_at', 'updated_at'). Must match a valid sortable field as defined by business, otherwise defaults to 'created_at'."},{"type":"null","description":"No explicit sort; use default sorting order."}],"description":"Sort field for result ordering. Allowed values are implementation-defined string field names. Null equals business default."},"ascending":{"oneOf":[{"type":"boolean","description":"Set true for ascending order or false for descending order. If omitted or null, use business default (typically descending by time/created_at)."},{"type":"null","description":"No explicit sort order provided."}],"description":"Ascending/descending sort flag. True for ASC, false for DESC, null for default."},"page":{"oneOf":[{"type":"integer","description":"The page number for pagination (1=first page, 2=second, ...). Null or omit for default (first page)."},{"type":"null","description":"No explicit page specified; default to first page."}],"description":"Pagination: which page of results to retrieve (1-based). Null or omit for first page."},"limit":{"oneOf":[{"type":"integer","description":"Number of items per page, i.e., page size. Must be within allowed UI/API limits. Null or omit for default system value."},{"type":"null","description":"No explicit limit; use default."}],"description":"Pagination: maximum number of team companions (members) to return per page. Null or omitted for system default."}},"required":[],"description":"Search, filtering, sorting, and pagination parameters for listing companions (members) in an enterprise team. Used in PATCH operations on team companion listing endpoints. Each property enables filtering, tuning, or restricting the result set according to business, UI, and performance needs. No authentication or team ID information is included here (all resolved from path and authentication context)."},"IWrtnEnterpriseTeamCompanion":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the team companion record. Maps to the primary key of wrtn_enterprise_team_companions. Identifies a specific membership instance between an employee and a team for audit, management and compliance purposes."},"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"Summary object for the team to which this companion is assigned. Derived from wrtn_enterprise_teams and includes essential context for the team. Always included in response for business context and auditing."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary object for the employee participating as a companion of the team. Maps to wrtn_enterprise_employees; critical context for management views, role changes, and member audit purposes."},"role":{"oneOf":[{"const":"member","description":"Role of the team companion (must be 'member')"},{"type":"null"}],"description":"Role of the companion within the team. This is either 'member' (active membership) or null (not a current member, e.g. after soft removal). Represents current team participation state."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this companion membership was created (joined the team). Maps to created_at in wrtn_enterprise_team_companions. Important for audit and compliance."},"updated_at":{"type":"string","format":"date-time","description":"Most recent update to this companion record (for example, status or role change). Enables tracking of membership history and audit changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion (removal) from the team, or null if currently active. Soft removal is used for audit trail and historical compliance; hard deletion is never performed."}},"required":["id","team","employee","role","created_at","updated_at"],"description":"Complete detail for a team companion (member) record in a given team. This DTO represents the mapping of an employee to a team within an enterprise, encapsulating role (always 'member'), join date, update and deletion audit fields, and reference context for both the team and employee. Response for detail endpoints, management/audit screens, and companion roster views. Adheres to organizational boundary, onboarding, and compliance business rules as specified in requirements. Derived directly from wrtn_enterprise_team_companions with reference expansions."},"IWrtnEnterpriseTeamCompanion.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","properties":{"wrtn_enterprise_employee_id":{"type":"string","format":"uuid","description":"Unique identifier of the employee to be added as a companion to the team. Must be an existing employee within the target enterprise; maps to wrtn_enterprise_employees.id. Only employees not already assigned to this team may be chosen."}},"required":["wrtn_enterprise_employee_id"],"description":"DTO for creating a new team companion (member) in a team within an enterprise (wrtn_enterprise_team_companions). Only the employee's ID (within the enterprise) needs to be supplied. The companion's role is always set to 'member' and join date is set automatically. Business validation and membership uniqueness are enforced at API/service level. All membership creations are audit-logged."},"IWrtnEnterpriseTeamCompanion.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","description":"Request object for updating a team companion (membership record) in an enterprise team. Only the role field is mutable, which is set to 'member' to grant membership, or to null for removal (soft-delete by setting deleted_at). All updates are validated, authorized, and audit-logged. Must match update operation business logic for companion management.","properties":{"role":{"oneOf":[{"const":"member","description":"Assign 'member' to grant or maintain active membership."},{"type":"null","description":"Set to null to soft-remove (leave) employee from the team; triggers deleted_at update."}],"description":"Team member's role. Only valid value is 'member', or null for soft-remove action. As per business rules, role can only be assigned as 'member'. Setting null constitutes a soft delete (team leave/removal). Must not allow any other string. Changes to role property are audit-logged and must pass permission checks (only masters/managers)."}},"required":["role"]},"IWrtnEnterpriseTeamCompanionAppointment":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_appointments","description":"Appointment (membership set/removal) history record for a team companion in an enterprise team, as per organizational compliance and audit rules. Every time a membership or removal occurs, a new appointment entity is created referencing the companion (teamEmployee), appointer (teamAppointer), session context (teamAppointerSession), role value, and creation time. This entity is returned as the response body for appointment record lookup and modification APIs. All references are mandatory and must be populated.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the appointment history record."},"teamEmployee":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummaryFromAppointment","description":"The team companion (employee-team membership mapping) who received this appointment (i.e., the member being added or removed). Always an object reference (never just an id)."},"teamAppointer":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee who performed this appointment operation (grant/remove). Must be a summary object."},"teamAppointerSession":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeeSession.ISummary","description":"Session through which the appointment was performed. Provides audit context."},"role":{"oneOf":[{"const":"member","description":"Appointed as 'member' (active)"},{"type":"null","description":"Removed (membership revoked, set to null)"}],"description":"'member' if assigned, null if removed/revoked. Only allowed value is 'member' or null by business rule."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which the appointment or revocation event occurred."}},"required":["id","teamEmployee","teamAppointer","teamAppointerSession","role","created_at"]},"IWrtnEnterpriseTeamCompanion.ISummaryFromAppointment":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","description":"Summary DTO for referencing team companion (employee-to-team membership mapping) from appointment audit trail. Used to prevent circular expansion.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (wrtn_enterprise_team_companions.id)"},"role":{"oneOf":[{"const":"member","description":"Active team membership"},{"type":"null","description":"No longer a member (removed/left)"}],"description":"Companion's current team membership role. 'member' for active, null for removed/left."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this companion row (employee-team mapping) was created or updated in context of appointment."}},"required":["id","role","created_at"]},"IWrtnEnterpriseEmployeeSession.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_sessions","description":"Summary object for an employee session entity. Includes id, href, referrer, and IP information for audit trail linkage from assignment logs.","properties":{"id":{"type":"string","format":"uuid","description":"Session ID."},"href":{"type":"string","description":"Session creation href context."},"referrer":{"type":"string","description":"Session referrer (origin)."},"ip":{"type":"string","description":"Originating IP address."}},"required":["id","href","referrer","ip"]},"IWrtnEnterpriseTeamCompanionAppointment.ICreate":{"type":"object","description":"Creation DTO for a team companion appointment entity in an enterprise team. Used exclusively by authorized actors to create an auditable membership or removal event. The only allowed values for the 'role' property are 'member' to add appointment, or null to represent explicit removal from the team. All appointment actions are atomic and result in a compliant audit trail record. The authenticated user's identity (appointer) and session context are derived from JWT and not included in this request DTO.\n\nThis schema tracks appointment creation/change of a team companion (employee-team mapping) via the append-only audit log. Never used for arbitrary editing, and always triggers audit compliance flows. Underlying DB model is 'wrtn_enterprise_team_companion_appointments'.","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_appointments","properties":{"role":{"oneOf":[{"type":"string","const":"member"},{"type":"null"}],"description":"The assigned team role for this appointment action. Only 'member' is allowed to grant membership, null is used to explicitly record removal from the team. Arbitrary roles are not permitted. Setting null creates a removal/audit termination record. This role is always enforced in combination with companion ID and team scope."}},"required":["role"]},"IWrtnEnterpriseTeamCompanionAppointment.IUpdate":{"type":"object","description":"Update DTO for a team companion appointment entity. Allows authorized personnel (e.g., master/manager) to amend existing appointment record details, such as correcting a role to 'member' or toggling the role to null for removal. Only 'member' or null are accepted values.\n\nThis API cannot modify immutable audit fields (created_at, appointer, etc). If role is set to null, this signifies membership removal and is strictly enforced in business logic. The actor and session context are injected from JWT, never accepted from client input.","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_appointments","properties":{"role":{"oneOf":[{"type":"string","const":"member"},{"type":"null"}],"description":"The new value for appointment role. Only 'member' (to grant membership) or null (to remove) are accepted. Null removes the companion from the team and closes active membership. No other string values are allowed. When updating, null triggers explicit removal and business logic will enforce member clearance."}},"required":[]},"IWrtnEnterpriseEmployeeInvitation.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Used to skip to the Nth page of results when querying employee invitations."},"limit":{"type":"integer","description":"Maximum number of items per page to return. Used for controlling pagination window size."},"search":{"type":"string","description":"Text search over invitation attributes (invitee email, team, etc). Full-text search for filtering results."},"status":{"oneOf":[{"const":"pending","description":"Status filter for invitations. One of: pending, expired, accepted, revoked. Filters results to invitations with this status."},{"const":"expired","description":"Status filter for invitations. One of: pending, expired, accepted, revoked. Filters results to invitations with this status."},{"const":"accepted","description":"Status filter for invitations. One of: pending, expired, accepted, revoked. Filters results to invitations with this status."},{"const":"revoked","description":"Status filter for invitations. One of: pending, expired, accepted, revoked. Filters results to invitations with this status."}],"description":"Status filter for invitations. One of: pending, expired, accepted, revoked. Filters results to invitations with this status."},"team_id":{"type":"string","format":"uuid","description":"Filter results to invitations intended for a specific team within the enterprise."},"invitor_id":{"type":"string","format":"uuid","description":"Filter results to invitations sent by a specific inviting employee."},"email":{"type":"string","format":"email","description":"Filter results to invitations sent to a specific email address."},"created_from":{"type":"string","format":"date-time","description":"Return results with invitations created at or after this timestamp (ISO 8601 date-time). For time-based filtering."},"created_to":{"type":"string","format":"date-time","description":"Return results with invitations created at or before this timestamp (ISO 8601 date-time)."},"expired_from":{"type":"string","format":"date-time","description":"Return results for invitations with expiration at or after this timestamp (ISO 8601 date-time)."},"expired_to":{"type":"string","format":"date-time","description":"Return results for invitations with expiration at or before this timestamp (ISO 8601 date-time)."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort results by either invitation creation timestamp or expiration timestamp."},{"const":"expired_at","description":"Sort results by either invitation creation timestamp or expiration timestamp."}],"description":"Sort results by either invitation creation timestamp or expiration timestamp."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending for chosen sort_by field."},{"const":"desc","description":"Sort direction: ascending or descending for chosen sort_by field."}],"description":"Sort direction: ascending or descending for chosen sort_by field."}},"required":[],"description":"Request DTO for searching/filtering/paginating the list of enterprise employee invitations. Used by PATCH /wrtnEnterprise/moderator/enterprises/{enterpriseId}/employee-invitations. Contains advanced filter and pagination criteria. Each filter is optional. Optional sort and search fields closely track real-world HR/search dashboard needs."},"IWrtnEnterpriseEmployeeInvitation":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_invitations","properties":{"id":{"type":"string","format":"uuid","description":"Invitation unique identifier as UUID. Maps to wrtn_enterprise_employee_invitations.id."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary of the inviting employee. Reference object derived from invitation's wrtn_enterprise_employee_id FK."},"email":{"type":"string","format":"email","description":"Invitee email. Maps to wrtn_enterprise_employee_invitations.email. This is the recipient's invitation address."},"title":{"oneOf":[{"const":"master","description":"Title/role to appoint to invitee upon onboarding. Matches business role logic; maps to wrtn_enterprise_employee_invitations.title."},{"const":"manager","description":"Title/role to appoint to invitee upon onboarding. Matches business role logic; maps to wrtn_enterprise_employee_invitations.title."},{"const":"member","description":"Title/role to appoint to invitee upon onboarding. Matches business role logic; maps to wrtn_enterprise_employee_invitations.title."}],"description":"Title/role to appoint to invitee upon onboarding. Matches business role logic; maps to wrtn_enterprise_employee_invitations.title."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Intended team for the invitation, if present. Reference summary object derived from wrtn_enterprise_team_id FK. Nullable if no team assigned."},"created_at":{"type":"string","format":"date-time","description":"Invitation creation timestamp (ISO 8601). Maps to wrtn_enterprise_employee_invitations.created_at."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Invitation expiration timestamp (ISO 8601). Null if not yet expired. Maps to wrtn_enterprise_employee_invitations.expired_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete marker denoting invitation revocation or removal. Null when invitation is active. Maps to wrtn_enterprise_employee_invitations.deleted_at."}},"required":["id","employee","email","title","created_at"],"description":"Detailed employee invitation record aligning with wrtn_enterprise_employee_invitations table. Includes reference summaries for inviting employee and intended team, recipient email, assigned title/role, creation/expiration/removal timestamps. Does NOT expose token or sensitive secrets. Designed for use in business audit, HR, or onboarding dashboards."},"IWrtnEnterpriseEmployeeInvitation.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_invitations","properties":{"email":{"type":"string","format":"email","description":"The target invitee's email address. Must be unique per enterprise and valid for onboarding. This is required by the business rules for creating an invitation in the wrtn_enterprise_employee_invitations table."},"title":{"type":"string","description":"Target onboarding role/title for the invitee. Must be one of: 'master', 'manager', 'member'. This field determines the permissions granted upon employee onboarding. Required by business logic."},"wrtn_enterprise_team_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional initial team assignment for the onboarding invitation. This links the invitation to a team within the enterprise for targeted onboarding. If null, the invitation is for enterprise-level onboarding only."},{"type":"null"}],"description":"Optional initial team assignment for the onboarding invitation. This links the invitation to a team within the enterprise for targeted onboarding. If null, the invitation is for enterprise-level onboarding only."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional explicit expiration date for the invitation. If not specified, the default expiry (7 days from creation) applies. This field is used to enforce time-limited onboarding tokens."},{"type":"null"}],"description":"Optional explicit expiration date for the invitation. If not specified, the default expiry (7 days from creation) applies. This field is used to enforce time-limited onboarding tokens."}},"required":["email","title"],"description":"Payload for creating a new enterprise employee invitation. Includes invitee email, onboarding title/role, optional team for targeted assignment, and optional explicit expiry. All values are validated for format and business constraints. Session actor context is derived from authentication. Based on the wrtn_enterprise_employee_invitations schema."},"IWrtnEnterpriseEmployeeInvitation.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_invitations","properties":{"title":{"type":"string","description":"Target onboarding role/title for the updated invitation. Must be one of: 'master', 'manager', 'member'. This determines the onboarding role the invitee will receive. If omitted, role is unchanged."},"wrtn_enterprise_team_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional updated initial team assignment. If provided, updates the invitation's target team. If null, resets to enterprise-level only. Team must exist within the enterprise."},{"type":"null"}],"description":"Optional updated initial team assignment. If provided, updates the invitation's target team. If null, resets to enterprise-level only. Team must exist within the enterprise."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional updated expiration datetime for the invitation. If provided, changes the invitation's expiry; null resets to default business expiry. Must be a valid ISO8601 timestamp."},{"type":"null"}],"description":"Optional updated expiration datetime for the invitation. If provided, changes the invitation's expiry; null resets to default business expiry. Must be a valid ISO8601 timestamp."}},"required":[],"description":"Payload for updating an enterprise employee invitation. Supports updating onboarding role/title, initial team assignment, and invitation expiry if permitted by business rules. Only fields provided are updated; other values remain unchanged. Based on the wrtn_enterprise_employee_invitations schema."},"IWrtnEnterpriseTeamCompanionInvitation.IRequest":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_invitations","properties":{"employee_id":{"type":"string","format":"uuid","description":"ID of the employee to whom the invitation is to be sent. Must match wrtn_enterprise_employees.id. Used to identify the recipient of the team companion (membership) invitation."},"email":{"type":"string","format":"email","description":"Target email address for the invitation. Optional if employee_id is specified (required for onboarding new users who do not yet exist in the system)."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Invitation expiration timestamp. If not specified, defaults to 7 days from creation. Controls how long the invitation remains valid before auto-expiring."},"page":{"type":"integer","minimum":1,"description":"Result page number for pagination. 1-based index."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page. Controls pagination page size (default and max by business policy)."},"status":{"oneOf":[{"const":"pending","description":"Optional status filter for the invitation query. Used to filter by invitation state in advanced search scenarios."},{"const":"accepted","description":"Optional status filter for the invitation query. Used to filter by invitation state in advanced search scenarios."},{"const":"revoked","description":"Optional status filter for the invitation query. Used to filter by invitation state in advanced search scenarios."},{"const":"expired","description":"Optional status filter for the invitation query. Used to filter by invitation state in advanced search scenarios."}],"description":"Optional status filter for the invitation query. Used to filter by invitation state in advanced search scenarios."},"sort":{"oneOf":[{"const":"created_at_asc","description":"Sorting method for search results. Determines result ordering based on creation or expiration date."},{"const":"created_at_desc","description":"Sorting method for search results. Determines result ordering based on creation or expiration date."},{"const":"expired_at_asc","description":"Sorting method for search results. Determines result ordering based on creation or expiration date."},{"const":"expired_at_desc","description":"Sorting method for search results. Determines result ordering based on creation or expiration date."}],"description":"Sorting method for search results. Determines result ordering based on creation or expiration date."},"created_at_from":{"type":"string","format":"date-time","description":"ISO 8601 date-time for filtering invitations created on or after this timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"ISO 8601 date-time for filtering invitations created on or before this timestamp."}},"required":[],"description":"Search and filter criteria for team companion invitations to a specific team in an enterprise. Supports filtering by employee, email, expiration, status, and creation date with pagination. Used in advanced workflows for onboarding and audit."},"IWrtnEnterpriseTeamCompanionInvitation":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_invitations","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the team companion invitation. This is the primary key for the invitation record."},"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"Summary object for the team to which the invitation is issued."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary object for the invited employee (recipient)."},"invitor":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary object for the employee who sent the invitation (inviting actor)."},"invitor_session_id":{"type":"string","format":"uuid","description":"Session ID under which the invitation was created (audit context)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the invitation was created."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the invitation expires (null if pending or unlimited)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete or cancel timestamp (null if still active)."},"email":{"type":"string","format":"email","description":"Email address of the invitation recipient. Used if the employee does not yet exist (external onboarding)."},"status":{"oneOf":[{"const":"pending","description":"Current status of the invitation. Business workflow may define additional states."},{"const":"accepted","description":"Current status of the invitation. Business workflow may define additional states."},{"const":"revoked","description":"Current status of the invitation. Business workflow may define additional states."},{"const":"expired","description":"Current status of the invitation. Business workflow may define additional states."}],"description":"Current status of the invitation. Business workflow may define additional states."}},"required":["id","team","employee","invitor","created_at","status"],"description":"Team companion invitation object capturing all metadata, relations, and audit trail necessary for team membership onboarding within an enterprise. Includes the recipient, sender, team, audit, and status."},"IWrtnEnterpriseTeamCompanionInvitation.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_invitations","properties":{"wrtn_enterprise_employee_id":{"type":"string","format":"uuid","description":"Unique identifier of the existing employee to be invited to the team. This is a foreign key to wrtn_enterprise_employees.id, and is required if the invitation is targeted to an existing registered employee. If inviting by email only (external or pre-registration), this may be omitted."},"email":{"type":"string","format":"email","description":"Email address of the employee to be invited as companion to the team. Required for invitation delivery and duplication check. May be used for pre-registration invitations when the user does not yet have an employee account. Must be a business email matching enterprise constraints."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional custom expiration datetime for the invitation. If omitted or set to null, the default business expiration policy (e.g. 7 days) is applied. Must be in ISO 8601 'date-time' format."}},"required":["email"],"description":"DTO for creating a new team companion invitation within an enterprise team. This schema defines the properties required to invite an employee by existing employee ID or email, providing audit-compliant and atomic invitation creation. Only permitted employees (master or manager) may issue such invitations. Invitation expiration can be customized or omitted for policy default. This schema is designed to support business onboarding flows and audit requirements as documented in the business requirements and Prisma schema."},"IWrtnEnterpriseTeamCompanionInvitation.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_invitations","properties":{"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Updated expiration datetime for the pending team companion invitation, in ISO 8601 'date-time' format. A null value will revert to the business default or indicate indefinite (pending) if allowed by business policy."},"email":{"type":"string","format":"email","description":"Updated email address for the invited companion, if correction is necessary before acceptance. Must be a valid business email. Changes may be restricted by business logic if invitation is already delivered or partially completed."}},"required":[],"description":"DTO for updating an existing team companion invitation to a team in an enterprise. Fields that may be updated include invitation expiration and email address. Updates are only permissible before the invitation is accepted or expired. All updates are tracked for audit and compliance, and only the original inviter or actors with sufficient privilege may update invitations. Aligned with business requirements as well as the wrtn_enterprise_team_companion_invitations Prisma schema."},"IWrtnChatSession.IRequest":{"type":"object","properties":{"vendor":{"type":"string","description":"AI vendor model identifier, such as 'openai/gpt-4.1-mini'. Used for filtering chat sessions by AI model used during the session. Must match values stored in wrtn_chat_sessions.vendor."},"title":{"oneOf":[{"type":"string","description":"Optional session title or chat display name, for filtering chat sessions by their title."},{"type":"null"}],"description":"Optional session title or chat display name, for filtering chat sessions by their title."},"disclosure":{"oneOf":[{"const":"private","description":"Disclosure setting of the chat session. Must be one of 'private', 'protected', or 'public'. Used to filter sessions according to privacy settings."},{"const":"protected","description":"Disclosure setting of the chat session. Must be one of 'private', 'protected', or 'public'. Used to filter sessions according to privacy settings."},{"const":"public","description":"Disclosure setting of the chat session. Must be one of 'private', 'protected', or 'public'. Used to filter sessions according to privacy settings."}],"description":"Disclosure setting of the chat session. Must be one of 'private', 'protected', or 'public'. Used to filter sessions according to privacy settings."},"wrtn_enterprise_team_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional team ID. If provided, the search will be scoped to sessions associated with this team only."},{"type":"null"}],"description":"Optional team ID. If provided, the search will be scoped to sessions associated with this team only."},"wrtn_enterprise_employee_persona_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional persona ID associated with the chat session. If provided, only sessions created with this persona are matched."},{"type":"null"}],"description":"Optional persona ID associated with the chat session. If provided, only sessions created with this persona are matched."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of the creation timestamp range for sessions to include (inclusive)."},{"type":"null"}],"description":"Start of the creation timestamp range for sessions to include (inclusive)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of the creation timestamp range for sessions to include (exclusive)."},{"type":"null"}],"description":"End of the creation timestamp range for sessions to include (exclusive)."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of the session update timestamp range for filtering (inclusive)."},{"type":"null"}],"description":"Start of the session update timestamp range for filtering (inclusive)."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of the session update timestamp range for filtering (exclusive)."},{"type":"null"}],"description":"End of the session update timestamp range for filtering (exclusive)."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results to return. Default is 20, max is 100."},"sort":{"oneOf":[{"const":"created_at","description":"Optional sort key. Can be one of 'created_at', 'updated_at', or another allowed field."},{"const":"updated_at","description":"Optional sort key. Can be one of 'created_at', 'updated_at', or another allowed field."},{"type":"null"}],"description":"Optional sort key. Can be one of 'created_at', 'updated_at', or another allowed field."},"order":{"oneOf":[{"const":"asc","description":"Sort order. Either 'asc' or 'desc'."},{"const":"desc","description":"Sort order. Either 'asc' or 'desc'."},{"type":"null"}],"description":"Sort order. Either 'asc' or 'desc'."}},"required":["page","limit"],"description":"Request DTO for searching, filtering, and paginating chat sessions for an employee. Supports filtering by vendor, title, disclosure, team, persona, creation/update time, and provides standard pagination and sorting."},"IWrtnChatSession":{"type":"object","x-autobe-prisma-schema":"wrtn_chat_sessions","description":"Chat session full-detail DTO for the WrtnEnterprise AI-powered system. Encapsulates all business and data context for a single AI chat session from the wrtn_chat_sessions schema, including session owner (employee), team (if any), persona, detailed privacy/disclosure logic, model vendor, aggregated token usage stats, all connection history (for analytics/audit), and the complete normalized chat message histories array. Enforces strict organizational boundary compliance: 'private' (creator-only), 'protected' (team), or 'public' (all enterprise). Follows object-mapping conventions for relation fields and nullability for optional/aggregate data. Returned as full entity for detail endpoints, supporting high-fidelity frontend replay, compliance, and internal business analytics.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the chat session, mapped from wrtn_chat_sessions.id."},"vendor":{"type":"string","description":"AI vendor model for this chat session. E.g., 'openai/gpt-4.1-mini'. Sourced from wrtn_chat_sessions.vendor."},"title":{"oneOf":[{"type":"string","description":"Optional display title for the chat session. Nullable. From wrtn_chat_sessions.title."},{"type":"null"}],"description":"Optional display title for the chat session. Nullable. From wrtn_chat_sessions.title."},"disclosure":{"oneOf":[{"const":"private","description":"Disclosure setting of the chat session, one of 'private', 'protected', 'public'. From wrtn_chat_sessions.disclosure."},{"const":"protected","description":"Disclosure setting of the chat session, one of 'private', 'protected', 'public'. From wrtn_chat_sessions.disclosure."},{"const":"public","description":"Disclosure setting of the chat session, one of 'private', 'protected', 'public'. From wrtn_chat_sessions.disclosure."}],"description":"Disclosure setting of the chat session, one of 'private', 'protected', 'public'. See business rules for query/read-time access permission logic and enforcement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the chat session was created. Sourced from wrtn_chat_sessions.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last time the chat session was updated (e.g., title/disclosure change). From wrtn_chat_sessions.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp for compliance/business retention. From wrtn_chat_sessions.deleted_at."},{"type":"null"}],"description":"Soft deletion timestamp for compliance/business retention. From wrtn_chat_sessions.deleted_at."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The employee (session owner) who created this chat session. Always an object, never a raw FK. Transformed from wrtn_chat_sessions.wrtn_enterprise_employee_id."},"persona":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeePersona.ISummary","description":"Persona applied to this session. Strictly non-null, mapped from wrtn_chat_sessions.wrtn_enterprise_employee_persona_id. Object-mapped per response relational conventions."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Associated team for this chat session (if any), or null. From wrtn_chat_sessions.wrtn_enterprise_team_id. Null if session is not team-scoped."},"token_usage":{"oneOf":[{"$ref":"#/components/schemas/IWrtnTokenUsage","description":"Aggregated token usage over this session, sourced from wrtn_chat_session_aggregate_token_usages. May be null if session has no AI message/content. All fields zero if AI usage exists but is not yet fully measured. Used for analytics, billing, or quota GUIs."},{"type":"null"}],"description":"Aggregated token usage over this session; may be null if no token consumption or accounting record exists. Sourced from wrtn_chat_session_aggregate_token_usages or computed live. Carefully handles sessions with non-measured history (e.g., non-AI-only), where all values will be zero rather than null."},"connections":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnChatSessionConnection"},"description":"All connection records for this chat session, representing every participating employee's join/leave event. Used for analytics, presence tracking, or replay. Includes full join, leave, and audit details; always array, even if empty."},"histories":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnChatSessionHistory"},"description":"Complete list of chat message and event histories for this session, including user message, AI message, and function execution. Directly mapped from wrtn_chat_session_histories, normalized per data privacy policy. Each element is a well-typed business event (payload strictly typed by discriminator)."}},"required":["id","vendor","disclosure","created_at","updated_at","employee","persona","connections","histories"]},"IWrtnChatSession.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_chat_sessions","description":"Request DTO for initiating a new AI-powered chat session for a WrtnEnterprise employee. Enables creation of a session with specified vendor (AI model), disclosure privacy level, an optional UI title, an optional team context, and a persona context selected by exact persona ID or (if omitted/null) resolved to most recent persona registered for the authenticated employee. Persona ID is mandatory at the database tier; client may omit to activate 'backend auto-resolve' fallback mechanism. All actor/session context is always injected via JWT authentication; must never be provided by the client. Team context, if supplied, must correspond to the employee's assigned teams within the enterprise. This DTO ensures all session creation business rules, access control, and required persona linkage are enforced atomically at API creation time. See section 6.1 planning documentation for business logic and edge-case error rules.","properties":{"vendor":{"type":"string","description":"AI model vendor code (e.g., 'openai/gpt-4.1-mini'). Required. Must match a valid AI vendor defined in the enterprise context. Maps to wrtn_chat_sessions.vendor."},"title":{"oneOf":[{"type":"string","description":"Optional chat session title for UI display, as chosen by user or system. If null, no title is set. Callable as human-oriented business identifier."},{"type":"null"}],"description":"Optional session display title, set by user or system. Null if not provided. Maps to wrtn_chat_sessions.title."},"disclosure":{"oneOf":[{"const":"private","description":"Session disclosure level. Restricts access to only the session creator/owner (employee)."},{"const":"protected","description":"Session disclosure level. Grants access to all team members in the associated team (see wrtn_enterprise_team_id)."},{"const":"public","description":"Session disclosure level. Shares session across all employees in the enterprise. Subject to organizational data boundary enforcement."}],"description":"Session disclosure level. Must be one of 'private', 'protected', 'public'. Governs privacy and access policy for this chat session. Required; see wrtn_chat_sessions.disclosure."},"wrtn_enterprise_team_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional foreign key referencing the session's associated team. If set, restricts/protects access for 'protected' sessions per business logic."},{"type":"null"}],"description":"Optional team context for chat session creation. Value must be null or a valid, assigned team UUID for current employee. When omitted/null, session is personal or company-wide as per disclosure."},"wrtn_enterprise_employee_persona_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally supplied persona ID to create the chat session with. Must reference a persona object owned by the authenticated employee, active and not deleted."},{"type":"null"}],"description":"Persona ID context for new chat session. If set to a valid UUID, backend will use the given persona directly (with validation). If null/omitted, backend automatically resolves the employee's most recent persona (onboarding required); failure to resolve will return error. Underlying DB field is NOT NULL so a persona must always be present at save. See planning section 6.1 for logic and error edge cases."}},"required":["vendor","disclosure"]},"IWrtnChatSession.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_chat_sessions","properties":{"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated session title. If provided, updates the session's display title. Null to clear."},"disclosure":{"oneOf":[{"const":"private","description":"Update the session disclosure level. Must be 'private', 'protected', or 'public'. Improves or restricts session access scope. See wrtn_chat_sessions.disclosure."},{"const":"protected","description":"Update the session disclosure level. Must be 'private', 'protected', or 'public'. Improves or restricts session access scope. See wrtn_chat_sessions.disclosure."},{"const":"public","description":"Update the session disclosure level. Must be 'private', 'protected', or 'public'. Improves or restricts session access scope. See wrtn_chat_sessions.disclosure."}],"description":"Update the session disclosure level. Must be 'private', 'protected', or 'public'. Improves or restricts session access scope. See wrtn_chat_sessions.disclosure."}},"required":[],"description":"DTO for updating a chat session (wrtn_chat_sessions). Allows changing only the title or disclosure. Other fields are immutable after creation. Employee/session context is enforced from authentication; not supplied directly."},"IWrtnChatSessionHistory.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for paginated chat session histories. Defaults to 1 if not specified."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of chat session histories to fetch per page. Typically between 10 and 100."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Allowed values: created_at, id."},{"const":"id","description":"Field to sort results by. Allowed values: created_at, id."}],"description":"Field to sort results by. Allowed values: created_at, id."},"sort_direction":{"oneOf":[{"const":"asc","description":"Direction for sorting. Allowed values: asc (ascending), desc (descending). Defaults to desc."},{"const":"desc","description":"Direction for sorting. Allowed values: asc (ascending), desc (descending). Defaults to desc."}],"description":"Direction for sorting. Allowed values: asc (ascending), desc (descending). Defaults to desc."},"search":{"type":"string","description":"Optional lexical search filter, allowing full-text search across histories in the given chat session."}},"required":["page","limit"],"description":"Search/filter/pagination DTO for listing chat session histories (user/assistant/execute messages) for a given chat session. Allows filtering, sorting, and cursor-based pagination by creation date, history id, and content, according to the business requirements for chat message navigation and incremental log access."},"IWrtnChatSessionHistory":{"oneOf":[{"$ref":"#/components/schemas/IWrtnChatSessionUserMessageHistory"},{"$ref":"#/components/schemas/IWrtnChatSessionAssistantMessageHistory"},{"$ref":"#/components/schemas/IWrtnChatSessionExecuteHistory"}],"description":"Union type encompassing all possible chat session history message types (user message, assistant message, and execution records). This type does NOT include a session reference field as per business directives. Each message type is distinguished by its 'type' discriminator property."},"IWrtnChatSessionUserMessageHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user message history entry."},"type":{"type":"string","const":"userMessage","description":"Discriminator indicating this is a user message history record."},"contents":{"type":"array","items":{"oneOf":[{"$ref":"#/components/schemas/IWrtnChatSessionUserMessageHistoryAudioContent"},{"$ref":"#/components/schemas/IWrtnChatSessionUserMessageHistoryFileContent"},{"$ref":"#/components/schemas/IWrtnChatSessionUserMessageHistoryImageContent"},{"$ref":"#/components/schemas/IWrtnChatSessionUserMessageHistoryTextContent"}]},"description":"Array of message contents in this user message. Can include audio, image, file, or text content. Each content object is strongly typed with a type discriminator."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which this user message was created (ISO 8601 format, UTC)."}},"required":["id","type","contents","created_at"],"description":"Represents a user-authored chat message history within a chat session. Contains one or more content objects (audio, file, image, or text), the id of this history, and creation timestamp. Strictly uses the 'userMessage' discriminator for clarity and downstream processing."},"IWrtnChatSessionUserMessageHistoryAudioContent":{"type":"object","properties":{"type":{"type":"string","const":"audio","description":"Discriminator for audio content."},"file":{"$ref":"#/components/schemas/IWrtnAttachmentFile","description":"The attached audio file reference for this user message history content. Represents the actual audio file uploaded by the user and attached to the chat message, providing metadata and download/streaming context as defined in IWrtnAttachmentFile. Maintains audit, access, and security policy consistent with file upload and chat history requirements."}},"required":["type","file"],"description":"Represents user message content of type 'audio' within a user message history. Contains a 'file' which must conform to IWrtnAttachmentFile. Used for recording and playback of user-uploaded audio clips in chat conversations, with standard attachment management."},"IWrtnChatSessionUserMessageHistoryFileContent":{"type":"object","properties":{"type":{"type":"string","const":"file","description":"Discriminator for file content."},"file":{"$ref":"#/components/schemas/IWrtnAttachmentFile","description":"Attached file for this user message history content. Represents any user-uploaded file (PDF, spreadsheet, document, zip, etc.) that is included in the chat message. The file is managed using IWrtnAttachmentFile and follows platform metadata and compliance rules for user file attachments in chat history."}},"required":["type","file"],"description":"Represents user message content of type 'file' within a user message history. Contains a 'file' which must conform to IWrtnAttachmentFile. Used for attaching generic files to chat messages in business workflows, supporting download, preview, and compliance requirements."},"IWrtnChatSessionUserMessageHistoryImageContent":{"type":"object","properties":{"type":{"type":"string","const":"image","description":"Discriminator for image content. This value must always be the literal string 'image', as required for message content typing. Used by consumers to distinguish between message content variants in chat histories."},"file":{"$ref":"#/components/schemas/IWrtnAttachmentFile","description":"The attached image file for this user message content.\n\nThis property references a fully-registered file in the central attachment repository (`IWrtnAttachmentFile`). It must be an object providing file metadata such as id (UUID), original filename, extension, signed download URL (S3-compatible, always internal), and creation timestamp.\n\nImage attachments must comply with platform constraints: allowed image types (e.g., 'jpg', 'png', 'gif'), maximum file size, and security/virus scanning policies as described in file management requirements. The file must already exist in the system prior to referencing it in message contents. When processing or presenting image content in UI, use the file metadata to retrieve, display, or audit the attachment according to business logic, permissions, and organizational boundaries. See attachment management business documentation for further file constraints and metadata interpretation.\n"}},"required":["type","file"],"description":"User message content object of type 'image' within a chat session history.\n\nRepresents a single image file (e.g., PNG, JPG, GIF) that was sent as part of a user's chat message. The file property must reference an existing entry in the system's centralized file store (`IWrtnAttachmentFile`). All metadata associated with the image is managed in the file store and subject to organizational security and quota controls. This object is used as a discriminated subdocument in the chat session message composition and auditing flows. See chat and file attachment documentation for business usage, permission boundaries, and security requirements."},"IWrtnChatSessionUserMessageHistoryTextContent":{"type":"object","properties":{"type":{"type":"string","const":"text","description":"Discriminator for text content. This value must always be 'text', and is required to distinguish text from audio, file, or image content in user message histories."},"text":{"type":"string","description":"Textual contents of the user message. This value must be a non-null, UTF-8 encoded string and may contain user-provided message text of any length, within system and business policy limits for chat messaging. Typically plain text, but formatting/escaping is allowed per chat API contract. Used for full audit trail, analytics, and reconstructing chat history; subject to access and privacy enforcement in organizational and session context."}},"required":["type","text"],"description":"Represents user message content of type 'text' in a chat session history.\n\nThis object is a subdocument for the 'contents' array in the user message history interface, and records a single text-based chat message supplied by an authenticated user. All properties are mandatory, fixed, and must comply with the business constraint that text content is always directly attributable to a user and fully auditable within the chat session. See chat business flow documentation for further business rules, privacy, and moderation guidelines."},"IWrtnAttachmentFile":{"type":"object","x-autobe-prisma-schema":"wrtn_attachment_files","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier of the file. Maps to wrtn_attachment_files.id."},"name":{"type":"string","description":"Original file name (may include user-supplied or sanitized filename)."},"extension":{"type":"string","description":"File extension (e.g., 'pdf','jpg') as recorded at upload."},"url":{"type":"string","description":"Signed/tokenized URL for secure download. Always internal S3-compatible endpoint."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for file upload (UTC ISO 8601)."}},"required":["id","name","extension","url","created_at"],"description":"File metadata for an attachment, as tracked in the global attachment file store. Used for display, download, and security context. Maps to wrtn_attachment_files."},"IWrtnChatSessionAssistantMessageHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the assistant message history entry."},"type":{"type":"string","const":"assistantMessage","description":"Discriminator for assistant message type."},"text":{"type":"string","description":"Textual content of the AI assistant's message."},"files":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAttachmentFile"},"description":"Array of files attached to the assistant message (if any), e.g. images or documents generated by the AI assistant."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the AI assistant message was created (ISO 8601, UTC)."},"completed_at":{"type":"string","format":"date-time","description":"Timestamp at which generation of this assistant message completed (ISO 8601, UTC)."}},"required":["id","type","text","files","created_at","completed_at"],"description":"Represents an AI assistant-authored message within a chat session. Contains the text response, any file attachments, and timestamps for creation and completion. Uses 'assistantMessage' discriminator as per strict requirements."},"IWrtnChatSessionExecuteHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the execute history record."},"type":{"type":"string","const":"execute","description":"Discriminator for execution event type."},"arguments":{"type":"object","properties":{},"required":[],"description":"Arbitrary JSON object of named arguments used for this execution event."},"success":{"type":"boolean","description":"Whether the execution was successful (true) or failed (false)."},"value":{"oneOf":[{"type":"object","properties":{},"required":[]},{"type":"null"}],"description":"Result value (arbitrary data, JSON-encoded, may be null or object depending on execution)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for event creation (ISO 8601, UTC)."},"completed_at":{"type":"string","format":"date-time","description":"Timestamp for execution completion (ISO 8601, UTC)."}},"required":["id","type","arguments","success","value","created_at","completed_at"],"description":"Represents an execution (function or API call) event in the chat session. Contains arbitrary arguments object, result value (may be JSON-encoded), and status flags, along with timestamps. Discriminated by 'execute' as type."},"IWrtnChatSessionConnection.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paginated search results. Optional; defaults to 1 if not specified."},"limit":{"type":"integer","description":"Maximum number of connection records to return per page. Optional; defaults to 25, with a reasonable maximum (e.g. 100) for dashboard use."},"connected_at_from":{"type":"string","format":"date-time","description":"Filter: Only include connections that began on or after this UTC time (inclusive). ISO 8601 date-time string. Optional."},"connected_at_to":{"type":"string","format":"date-time","description":"Filter: Only include connections that began before or at this UTC time (inclusive). ISO 8601 date-time string. Optional."},"disconnected_at_from":{"type":"string","format":"date-time","description":"Filter: Only include connections disconnected on or after this UTC time (inclusive). ISO 8601 date-time string. Optional."},"disconnected_at_to":{"type":"string","format":"date-time","description":"Filter: Only include connections disconnected before or at this UTC time (inclusive). ISO 8601 date-time string. Optional."},"employee_id":{"type":"string","format":"uuid","description":"Filter: Only include connections belonging to this enterprise employee (UUID). Optional."},"employee_session_id":{"type":"string","format":"uuid","description":"Filter: Only include connections by session ID (UUID). Optional."}},"required":[],"description":"Advanced search and filter criteria for chat session connections. Supports filtering by connection and disconnection time ranges, participant employee, session metadata, page and limit for dashboard pagination. Designed for IWrtnChatSessionConnection search in audit/compliance and analytics scenarios."},"IWrtnChatSessionConnection":{"type":"object","x-autobe-prisma-schema":"wrtn_chat_session_connections","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the chat session connection (wrtn_chat_session_connections.id), used for audit and entity reference."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee participating in the session connection. Mapped from wrtn_chat_session_connections.wrtn_enterprise_employee_id, always references the corresponding summary object."},"employee_session":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeeSession.ISummary","description":"Employee's session context linked to this connection (wrtn_chat_session_connections.wrtn_enterprise_employee_session_id). Exposes basic session metadata for audit and compliance."},"connected_at":{"type":"string","format":"date-time","description":"UTC timestamp when the employee connected to the chat session, for timeline and analytics. Sourced from wrtn_chat_session_connections.connected_at."},"disconnected_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"UTC time when the employee disconnected from the session, if they have left. Nullable; null if still connected. Sourced from wrtn_chat_session_connections.disconnected_at."}},"required":["id","employee","employee_session","connected_at"],"description":"Representation of a single connection event (join/leave) within a chat session. Contains identifying information, participant and session context, connection and disconnection timestamps, and links to employee/session objects. Used for audit, compliance, and analytic/replay of session events."},"IWrtnTokenUsage":{"type":"object","title":"Wrtn Token Usage DTO","description":"Token usage type represents normalized usage counters for tokens at message/session/procedure granularity. This covers all reporting needs for chat, procedure, and analytics business.\n\nIt is the main contract type for summary of:\n- wrtn_chat_session_history_token_usages (per message)\n- wrtn_chat_session_aggregate_token_usages (per session)\n- wrtn_procedure_session_history_token_usages\n- wrtn_procedure_session_aggregate_token_usages\n\nAll properties MUST be present and accurately represent database rollups, or all be zero if no usage exists. See planning docs for token metering and analytics.\n\nThis type must never be flattened or split: Always return as a nested object as shown here, and only with these properties.\n\nSee also: Analytics KPI reporting.","properties":{"total":{"type":"integer","description":"Total number of tokens for this metric (input + output + all). Zero if no usage exists."},"input":{"$ref":"#/components/schemas/IWrtnTokenUsageInput","description":"Input token usage breakdown"},"output":{"$ref":"#/components/schemas/IWrtnTokenUsageOutput","description":"Output token usage breakdown"}},"required":["total","input","output"]},"IWrtnTokenUsageInput":{"type":"object","title":"Wrtn Token Usage Input Counters","description":"Input-side token usage counters for analytics, cost reporting, and audit of AI resource utilization. Used to track distinctly how many tokens are supplied to the AI model as prompt/context and how many are satisfied by cache/optimizations. Reported per message, session, or aggregate.\n\n- 'total': Full count of input tokens sent in prompts, including all context and system messages.\n- 'cached': Input tokens handled by cache, reused prompts, or server-side deduplication, distinct from newly tokenized inputs.","properties":{"total":{"type":"integer","description":"Total number of input tokens supplied for AI model context (prompts, system/context messages, etc). This matches tokenization in the request payload and is the main input-side metering for analytics and billing."},"cached":{"type":"integer","description":"Input tokens satisfied from pre-existing cache, prompt history reuse, or server optimizations. Indicates tokens not newly processed but counted for analytical or billing breakdowns. Zero if not used or not applicable for this request/model."}},"required":["total","cached"]},"IWrtnTokenUsageOutput":{"type":"object","title":"Wrtn Token Usage Output Counters","description":"Output-side token usage counters for analytics and cost reporting for AI computations. Used to classify tokens generated by the AI model into business-relevant buckets (regular output, reasoning steps, accepted, and rejected predictions).\n\n- 'total': All output tokens generated, including completions and auxiliary responses.\n- 'reasoning': Tokens devoted to agent reasoning/tool-use/chain-of-thought output in advanced models.\n- 'accepted_prediction': Tokens in outputs accepted/confirmed by user (billable/control events).\n- 'rejected_prediction': Tokens in completions that were rejected or discarded by the end user (audit/cost breakdown).\n","properties":{"total":{"type":"integer","description":"Total number of output tokens generated by the AI model for this request or aggregate period. Includes all completions and auxiliary outputs, regardless of user action."},"reasoning":{"type":"integer","description":"Number of output tokens produced for internal reasoning steps such as agent tools, chain-of-thought, or workflow actions. This is a business analytics and fine-billing field for advanced models."},"accepted_prediction":{"type":"integer","description":"Number of output tokens in responses/users confirmed as valid, accepted by the end user, or otherwise billable per business rules. Used for analytics, cost attribution, and completion acceptance reporting."},"rejected_prediction":{"type":"integer","description":"Number of output tokens generated but rejected/discarded by user (not accepted as valid completion). Used for audit, error analytics, and typically unbilled usage—valuable for understanding model output quality and business cost."}},"required":["total","reasoning","accepted_prediction","rejected_prediction"]},"IWrtnProcedure.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Current page number for paginated procedure result queries. Must be a positive integer. Default (if not specified) is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Page size (number of results per page) for paginated queries. Allowed maximum is 100 for performance and system stability. Default is typically 20."},"active":{"type":"boolean","description":"Filter to return only currently active procedures (when true), only inactive (when false), or all (when not provided). Used for filtering catalog entries based on availability."},"q":{"type":"string","description":"Optional search query string for filtering procedures by code, title, or description. Supports full-text match in a flexible, user-driven manner. Optional; if omitted, no search filter is applied."},"order_by":{"oneOf":[{"const":"created_at","description":"Order field for result sorting. Can be created_at, title, code, or sequence. Defaults to display order or created_at if not provided."},{"const":"title","description":"Order field for result sorting. Can be created_at, title, code, or sequence. Defaults to display order or created_at if not provided."},{"const":"code","description":"Order field for result sorting. Can be created_at, title, code, or sequence. Defaults to display order or created_at if not provided."},{"const":"sequence","description":"Order field for result sorting. Can be created_at, title, code, or sequence. Defaults to display order or created_at if not provided."}],"description":"Order field for result sorting. Can be created_at, title, code, or sequence. Defaults to display order or created_at if not provided."},"order_direction":{"oneOf":[{"const":"asc","description":"Sort direction for order_by. Possible values: 'asc' (ascending), 'desc' (descending). System default is 'desc' if not specified."},{"const":"desc","description":"Sort direction for order_by. Possible values: 'asc' (ascending), 'desc' (descending). System default is 'desc' if not specified."}],"description":"Sort direction for order_by. Possible values: 'asc' (ascending), 'desc' (descending). System default is 'desc' if not specified."}},"required":[],"description":"Request parameters for AI procedure catalog querying, supporting advanced filtering, paging, and sorting of wrtn_procedures. This DTO enables highly flexible, user-driven search and navigation across the catalog of available procedures in WrtnEnterprise, and supports UI screens and business analytics that require refined catalog views. All parameters are optional but system defaults are used if omitted. Security and access rules apply at API level, so query only returns procedures visible to the requesting actor's scope."},"IWrtnProcedure":{"type":"object","x-autobe-prisma-schema":"wrtn_procedures","description":"AI Procedure catalog entry, representing a uniquely registered procedure (e.g., image generator, summarizer) for selection and execution by employees and teams. Maps directly to the wrtn_procedures table in the database and provides all metadata required by employees or moderators for viewing, execution, catalog admin, and reporting. This schema contains fields for auditability, catalog management, and lifecycle. Uniqueness for both code and title are enforced. The object must include information both for display in end-user application catalogs and for audit/compliance. All time fields are ISO 8601 date-time. If deleted_at is non-null, the procedure is considered deactivated or removed from the active catalog.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the procedure, as in wrtn_procedures.id. Immutable primary key for catalog entry reference."},"code":{"type":"string","description":"Code identifier used internally for AI procedure logic and policy application. Must be unique globally for all procedures (e.g., 'image-generation'). Used programmatically by API integrations and selection components."},"title":{"type":"string","description":"Human-readable display name for the procedure, such as 'Image Generation'. Must be unique within the procedure catalog. This field is generally localized for end-user display."},"description":{"oneOf":[{"type":"string","description":"Optional markdown or plain text description providing extended detail for catalog, user interfaces, privilege review, and search. Can be used for explanatory text, compliance, or catalog metadata. If null, no extended description is displayed."},{"type":"null"}],"description":"Optional markdown or plain text description providing extended detail for catalog, user interfaces, privilege review, and search. Can be used for explanatory text, compliance, or catalog metadata. If null, no extended description is displayed."},"icon":{"oneOf":[{"type":"string","description":"Optional URL of avatar or icon representing the procedure. Can be SVG, PNG, or JPEG for end-user catalog binding. If null, a generic icon may be displayed."},{"type":"null"}],"description":"Optional URL of avatar or icon representing the procedure. Can be SVG, PNG, or JPEG for end-user catalog binding. If null, a generic icon may be displayed."},"active":{"type":"boolean","description":"Current activation state of the procedure. true if the procedure is visible and selectable in catalogs for employees; false if disabled or blocked (e.g., by admin action or lifecycle policy)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this procedure catalog entry. Indicates when the procedure was registered in the system for audit and compliance use."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the procedure catalog record was last updated for tracking administrative or business changes. Used for audit logs and lifecycle reporting."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for the procedure, or null if active. If set, indicates this procedure should be hidden from listings but retained for audit/compliance."}},"required":["id","code","title","active","created_at","updated_at"]},"IWrtnProcedure.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_procedures","description":"Request body DTO for creating a new AI procedure in the system catalog, as used in moderator (admin) operations. This schema must supply all the metadata needed for initial catalog registration. Fields include unique procedure code, display title, optional markdown description, optional icon URL, and activation state flag. All properties map directly to the columns of the wrtn_procedures table, except for auto-generated values such as id, created_at, updated_at, and deleted_at, which are not client-supplied but system-managed. This DTO is subject to system uniqueness and validation logic for code and title fields.","properties":{"code":{"type":"string","description":"Unique code string for the new AI procedure, such as 'summarization', 'image-generation', etc. Must be unique across all procedures, as in wrtn_procedures.code. Used for API, catalog, and internal logic selection."},"title":{"type":"string","description":"Display title for the procedure, shown to end-users in catalogs, e.g., 'Document Summarization', 'Image Generation'. Must be globally unique in the catalog."},"description":{"oneOf":[{"type":"string","description":"Optional markdown (or plain text) description for the procedure. Used in catalogs or admin review. If null, description will be omitted."},{"type":"null"}],"description":"Optional markdown (or plain text) description for the procedure. Used in catalogs or admin review. If null, description will be omitted."},"icon":{"oneOf":[{"type":"string","description":"Optional icon or logo URL representing the procedure for display in the catalog. Accepts SVG, PNG, or JPEG. If omitted or null, a default icon is used."},{"type":"null"}],"description":"Optional icon or logo URL representing the procedure for display in the catalog. Accepts SVG, PNG, or JPEG. If omitted or null, a default icon is used."},"active":{"type":"boolean","description":"Activation flag indicating whether this procedure should be immediately available to employees (true) or registered as inactive (false)."}},"required":["code","title","active"]},"IWrtnEnterpriseProcedure.IUpdate":{"type":"object","description":"Update DTO for AI procedures in the WrtnEnterprise platform. This type is used to modify an existing procedure catalog entry. All fields are optional to support partial updates. The DTO maps to the 'wrtn_procedures' Prisma model and only includes fields found within that model. Title and code are subject to global uniqueness validation as per catalog governance. Soft-deleted procedures cannot be updated.","x-autobe-prisma-schema":"wrtn_procedures","properties":{"code":{"type":"string","description":"Globally unique short identifier for the procedure, such as 'image-generation'. Used for system integration and catalog management. Maps to wrtn_procedures.code."},"title":{"type":"string","description":"Human-readable title for the AI procedure (e.g., 'Image Generation'). Must be unique within the global catalog. Serves as the main display title for the procedure. Maps to wrtn_procedures.title."},"description":{"type":"string","description":"Optional extended markdown description providing procedure details, configuration, and usage guidelines. Maps to wrtn_procedures.description."},"icon":{"type":"string","description":"Optional icon or avatar image URL to visually represent the procedure in UI catalogs and selection dialogs. Maps to wrtn_procedures.icon."},"active":{"type":"boolean","description":"Indicates whether the procedure is currently enabled for selection/invocation. If set to false, the procedure becomes unavailable for assignment or new sessions. Maps to wrtn_procedures.active."}},"required":[]},"IWrtnEnterpriseProcedure":{"type":"object","description":"AI procedure entry in the WrtnEnterprise global catalog. This DTO represents a single procedure with all business metadata required for catalog presentation, assignment, and invocation management. It fully reflects the wrtn_procedures Prisma table, including global uniqueness, extended description, status, and full audit trail fields. Every field is provided in read responses for dashboards and admin views. It is essential for AI governance, audit, and assignment flow in B2B SaaS enterprise automation.","x-autobe-prisma-schema":"wrtn_procedures","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key for this procedure record. Globally unique ID assigned by the system. Maps to wrtn_procedures.id."},"code":{"type":"string","description":"Globally unique short identifier for the procedure, such as 'image-generation'. Used for system integration and catalog management. Maps to wrtn_procedures.code."},"title":{"type":"string","description":"Human-readable display title for the AI procedure (e.g., 'Image Generation'). Unique within the global catalog. Maps to wrtn_procedures.title."},"description":{"type":"string","description":"Optional extended markdown description providing additional information, configuration details, and documentation for catalog and dashboard display. Maps to wrtn_procedures.description."},"icon":{"type":"string","description":"Optional icon/avatar URL to visually represent the procedure in the catalog. Used in admin and selection UIs. Maps to wrtn_procedures.icon."},"active":{"type":"boolean","description":"Indicates whether this procedure is currently active and available for assignment or invocation. Procedures with 'active=false' are hidden from catalogs and cannot be assigned. Maps to wrtn_procedures.active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when the procedure was created. Used for audit, lifecycle, and reporting. Maps to wrtn_procedures.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) of the most recent update to this procedure record. Used for lifecycle, audit, and change tracking. Maps to wrtn_procedures.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete marker: if set, the procedure is considered deleted/retired and unavailable for catalog assignment or operation. Null if active. Maps to wrtn_procedures.deleted_at."}},"required":["id","code","title","active","created_at","updated_at"]},"IWrtnProcedureSession.IRequest":{"type":"object","x-autobe-prisma-schema":"wrtn_procedure_sessions","properties":{"procedure_id":{"type":"string","format":"uuid","description":"ID of the target procedure (wrtn_procedures.id)."},"employee_id":{"type":"string","format":"uuid","description":"ID of the enterprise employee actor (wrtn_enterprise_employees.id) for searching/filtering session runs. Omit for moderators/global scope."},"team_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the team (wrtn_enterprise_teams.id) to filter sessions scoped to a specific team. Can be null to indicate enterprise-wide or global scope."},{"type":"null"}],"description":"ID of the team (wrtn_enterprise_teams.id) to filter sessions scoped to a specific team. Can be null to indicate enterprise-wide or global scope."},"disclosure":{"type":"string","description":"Filter by disclosure level. One of: 'private', 'protected', 'public'. Optional for all/any."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of the session creation range (inclusive), in ISO 8601 format (UTC). If omitted, no lower bound."},{"type":"null"}],"description":"Start of the session creation range (inclusive), in ISO 8601 format (UTC). If omitted, no lower bound."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of the session creation range (exclusive), in ISO 8601 format (UTC). If omitted, no upper bound."},{"type":"null"}],"description":"End of the session creation range (exclusive), in ISO 8601 format (UTC). If omitted, no upper bound."},"status":{"type":"string","description":"(Future-use) Filter by business status (e.g. 'ongoing','completed','failed') if supported."},"page":{"type":"integer","minimum":1,"description":"Page index (1-based). Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items per page. Default per server, max 100."},"sort_by":{"type":"string","description":"Column to sort results by. E.g., 'created_at', 'updated_at'. Optional."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order; either 'asc' or 'desc'. Optional, defaults per API."},{"const":"desc","description":"Sort order; either 'asc' or 'desc'. Optional, defaults per API."}],"description":"Sort order; either 'asc' or 'desc'. Optional, defaults per API."}},"required":["page","limit"],"description":"Request DTO for searching/filtering procedure sessions from wrtn_procedure_sessions table. Includes advanced filter/sort/pagination parameters, supports team/employee/procedure scoping and role-based access. All values must match business permissions; only authorized actors may use employee/team filters. Properties not specified will use server defaults for broadest scope permitted."},"IWrtnProcedureSession":{"type":"object","x-autobe-prisma-schema":"wrtn_procedure_sessions","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the procedure session (wrtn_procedure_sessions.id)."},"procedure":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary","description":"Reference to the target procedure catalog entry for this session. Provides metadata for the procedure executed."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The enterprise employee who initiated the session execution."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Optional team context under which the procedure session ran. Null if not a team-scoped execution."},"title":{"oneOf":[{"type":"string","description":"Session display title, as assigned by the employee or auto-generated."},{"type":"null"}],"description":"Session display title, as assigned by the employee or auto-generated."},"disclosure":{"oneOf":[{"const":"private","description":"Session access disclosure level: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise)."},{"const":"protected","description":"Session access disclosure level: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise)."},{"const":"public","description":"Session access disclosure level: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise)."}],"description":"Session access disclosure level: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of session creation (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent session modification (ISO 8601, UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp; null if active."},{"type":"null"}],"description":"Soft-deletion timestamp; null if active."},"token_usage":{"oneOf":[{"$ref":"#/components/schemas/IWrtnTokenUsage","description":"Aggregate token usage for this session including all histories, for audit and billing. Null if not available."},{"type":"null"}],"description":"Aggregate token usage for this session including all histories, for audit and billing. Null if not available."},"connections":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnProcedureSessionConnection"},"description":"History of all protocol connection events (HTTP/WebSocket) during this session."},"histories":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnProcedureSessionHistory"},"description":"All execution histories for this session, including input arguments, return values, status, and audit trace. May be multiple for streaming or retried executions."}},"required":["id","procedure","employee","disclosure","created_at","updated_at","connections","histories"],"description":"Full detail for an AI procedure session from wrtn_procedure_sessions, including actor/procedure/team relations, access/disclosure info, execution histories, aggregate token usage, and audit context. Returned from detail endpoints. Follows business rules for enterprise/actor/team exposure and compliance. Nullable properties reflect optional/soft-deleted/null associations according to schema."},"IWrtnProcedure.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_procedures","description":"Summary schema for a catalogued AI procedure. Used to reference procedures in enterprise and team-specific assignments and to display available AI capabilities. Contains presentation and identifier information as well as activation flags.\n\nSee also: wrtn_procedures table.","properties":{"id":{"type":"string","format":"uuid","description":"Procedure unique identifier."},"code":{"type":"string","description":"Unique procedure code for internal reference (wrtn_procedures.code)."},"title":{"type":"string","description":"User-visible name of the procedure (wrtn_procedures.title)."},"icon":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Avatar/icon URL for this procedure, if present."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Markdown-format description of this procedure. Used for catalog display."},"active":{"type":"boolean","description":"Whether this procedure is active and available for selection/execution."}},"required":["id","code","title","active"]},"IWrtnProcedureSessionConnection":{"type":"object","x-autobe-prisma-schema":"wrtn_procedure_session_connections","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this procedure session connection event, as recorded in the wrtn_procedure_session_connections table. Used for audit, linkage to histories, and compliance reporting."},"protocol":{"type":"string","description":"Connection protocol used by the actor to execute the procedure. Typical values are 'http' for synchronous invocations and 'websocket' for streaming, live, or chunked procedure executions. Defines business workflow and compliance implications for traceability."},"connected_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when the connection to the procedure session was established. Used for timeline analytics, SLA measurement, and forensic audit of session workflow."},"disconnected_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when the connection ended. Null if connection is ongoing (not yet closed). Used for business analytics, quota calculations, and audit trail finalization."},{"type":"null"}],"description":"Timestamp when the actor disconnected from the procedure session. Supports both completed and active connections for granular audit granularity."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Reference to the enterprise employee who established this connection and executed the procedure session. Links to IWrtnEnterpriseEmployee.ISummary for context on actor, team, organizational isolation, and compliance or security traceability."}},"required":["id","protocol","connected_at","employee"],"description":"A connection record representing an actor (enterprise employee) joining an AI procedure session execution. Tracks protocol (http/websocket), employee, connection/disconnection time, and serves as the core compliance/audit entity mapping actor protocol context for procedure execution. Fully aligned with wrtn_procedure_session_connections business rules and enterprise audit best practices."},"IWrtnProcedureSessionHistory":{"type":"object","description":"Describes a single execution (history) event for an AI procedure session (wrtn_procedure_sessions) in WrtnEnterprise. Each history entry is created when an employee or actor executes a (possibly streaming, chunked, or retried) run of a procedure. The schema reflects the complete business and security context as required for traceability, compliance, and audit investigations.\n\n- arguments: Encrypted JSON string holding the full set of named arguments used in this execution. Provides full reproducibility and auditability of the execution's input, while securing sensitive business data.\n- value: Encrypted JSON string of the execution outcome (success or failure): includes result, exception, or output file references. Protects sensitive result data in logs.\n- session: Reference to the parent procedure session entity (not just ID). Allows for full relational drill-down for reporting and compliance.\n- connection: Reference to actor's protocol/session connection. Represents the exact context (websocket/join point or HTTP execution) under which the actor performed the operation, per atomic mapping rules.\n- success: Indicates the status/outcome: true if execution completed and returned expected results; false if failed, null if ongoing. Business and compliance audit may depend on this for success/failure metrics and incident forensics.\n- created_at: Timestamp of execution initiation. For detailed workflow, timeline analyses, and SLA audits.\n- completed: Timestamp of execution completion, or null if execution has not finished, is ongoing, or was interrupted (e.g., cancelled or connection failure). Used for performance, analytics, and forensics. Always present and synchronized with related aggregates. Null means not yet finalized at audit time.\n\nComplies with all mapping, variant, context, and DTO documentation requirements as defined in AutoBE platform enterprise B2B SaaS rules.","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this procedure session execution (history) entry. Used for direct referencing, lookup, and audit chain linkage."},"session":{"$ref":"#/components/schemas/IWrtnProcedureSession.ISummary","description":"Reference to the parent procedure session (IWrtnProcedureSession.ISummary). Provides full business, employee, and context isolation required for reporting, monitoring, and forensic investigation."},"connection":{"$ref":"#/components/schemas/IWrtnProcedureSessionConnection.ISummary","description":"Reference to the precise protocol, actor, and connection context (IWrtnProcedureSessionConnection.ISummary) used for this execution. Supports HTTP and websocket protocols, actor tracking, and strict audit traceability."},"arguments":{"type":"string","description":"Serialized and encrypted JSON string representing the input arguments for this procedure execution. Used for reproducibility, security, and audit compliance without exposing sensitive argument content in cleartext OpenAPI schemas."},"success":{"type":"boolean","description":"Boolean indicating overall success of the procedure execution. true if the procedure completed successfully and provided valid output; false if an error, exception, or business logic failure occurred. Null if execution is ongoing or indeterminate at audit cut (not yet finalized)."},"value":{"type":"string","description":"Serialized and encrypted JSON string of the execution result, output, or error state. Contains business or computation result data, or references to file/output objects. Protected for compliance and security, not exposed directly to clients in OpenAPI documentation."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp marking when execution of this procedure history started. Used for timeline views, analytics, and SLA management."},"completed":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when execution of this procedure history was completed. Present only if execution is finalized (succeeded or failed)."},{"type":"null"}],"description":"Timestamp indicating end/completion point for this execution. Null if run is ongoing, interrupted, or not yet finalized at audit/export time."}},"required":["id","session","connection","arguments","success","value","created_at"],"x-autobe-prisma-schema":"wrtn_procedure_session_histories"},"IWrtnProcedureSession.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_procedure_sessions","properties":{"wrtn_procedure_id":{"type":"string","format":"uuid","description":"The unique identifier for the AI procedure to be executed. Mapped from wrtn_procedure_sessions.wrtn_procedure_id in the database."},"title":{"oneOf":[{"type":"string","description":"Optional display name for the procedure execution session. May be used for identification in dashboards or audit trails."},{"type":"null"}],"description":"Optional display name for the procedure execution session. May be used for identification in dashboards or audit trails."},"disclosure":{"oneOf":[{"const":"private","description":"The disclosure level for the session. Must be one of: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise). String-based, not an enum at DB level, and corresponds to the 'disclosure' field in wrtn_procedure_sessions."},{"const":"protected","description":"The disclosure level for the session. Must be one of: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise). String-based, not an enum at DB level, and corresponds to the 'disclosure' field in wrtn_procedure_sessions."},{"const":"public","description":"The disclosure level for the session. Must be one of: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise). String-based, not an enum at DB level, and corresponds to the 'disclosure' field in wrtn_procedure_sessions."}],"description":"The disclosure level for the session. Must be one of: 'private' (owner only), 'protected' (team members), 'public' (all in enterprise). String-based, not an enum at DB level, and corresponds to the 'disclosure' field in wrtn_procedure_sessions."},"wrtn_enterprise_team_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional team context, referencing the team within the enterprise. If null, this execution is not team-scoped."},{"type":"null"}],"description":"Optional team context, referencing the team within the enterprise. If null, this execution is not team-scoped."}},"required":["wrtn_procedure_id","disclosure"],"description":"DTO for creating a new procedure session (wrtn_procedure_sessions) for an enterprise employee. All actor/session context is injected from authentication; team and title are optional. See domain requirements for procedure execution."},"IWrtnProcedureSession.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_procedure_sessions","properties":{"title":{"oneOf":[{"type":"string","description":"New title or display name for the procedure session, if being updated."},{"type":"null"}],"description":"New title or display name for the procedure session, if being updated."},"disclosure":{"oneOf":[{"const":"private","description":"Updated disclosure setting for the procedure session. Must be one of: 'private', 'protected', or 'public'."},{"const":"protected","description":"Updated disclosure setting for the procedure session. Must be one of: 'private', 'protected', or 'public'."},{"const":"public","description":"Updated disclosure setting for the procedure session. Must be one of: 'private', 'protected', or 'public'."}],"description":"Updated disclosure setting for the procedure session. Must be one of: 'private', 'protected', or 'public'."}},"required":[],"description":"DTO for updating a procedure session (wrtn_procedure_sessions). Only title and disclosure may be updated."},"IWrtnProcedureSessionHistory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"The page number to retrieve for the paginated histories result. Defaults to 1. Used for paginated navigation in the list endpoint."},"limit":{"type":"integer","description":"The maximum number of histories to return per page. Used to control result granularity, typically between 10 and 100 per query."},"search":{"type":"string","description":"Optional natural language search query for filtering histories by content or metadata fields. Applied to the set of execution history entries within the session."},"orderBy":{"type":"string","description":"The field name to sort execution histories by. Permitted values may include 'created_at' or other sortable fields as defined by business logic. Defaults to 'created_at'."},"orderDirection":{"oneOf":[{"const":"asc","description":"Sort direction for execution history results — either ascending ('asc') or descending ('desc'). Defaults to 'desc' (most recent first)."},{"const":"desc","description":"Sort direction for execution history results — either ascending ('asc') or descending ('desc'). Defaults to 'desc' (most recent first)."}],"description":"Sort direction for execution history results — either ascending ('asc') or descending ('desc'). Defaults to 'desc' (most recent first)."},"success":{"type":"boolean","description":"Optional filter to restrict histories to only successful executions (true), failed/errored executions (false), or all if omitted."},"protocol":{"type":"string","description":"Optional filter to restrict returned histories to those executed with a specified protocol (e.g., 'http', 'websocket', etc.) as tracked on the connection context."},"created_at_from":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp (inclusive) filtering for histories created at or after this date-time."},"created_at_to":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp (exclusive) filtering for histories created before this date-time."}},"required":["page","limit"],"description":"Request query and filter DTO for listing wrtn_procedure_session_histories for a procedure execution session. Supports pagination, natural language search, success/error filtering, protocol selection, and temporal range filter as per advanced analytics/business requirements."},"IWrtnEnterpriseProcedureUsageAnalyticsReport.IRequest":{"type":"object","properties":{"procedure_code":{"type":"string","description":"Filter by unique procedure code. Optional. Used for analytics filtering."},"team_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Array of team IDs to filter the analytics. Optional. Must be valid UUIDs."},"employee_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Array of employee IDs for user-scoped analytics filtering. Optional. Must be valid UUIDs."},"period_start":{"type":"string","format":"date-time","description":"Inclusive ISO 8601 UTC datetime for the analytic reporting begin window. Optional. Typically used in time-series analytics."},"period_end":{"type":"string","format":"date-time","description":"Exclusive ISO 8601 UTC datetime for the analytic reporting end window. Optional."},"aggregation":{"oneOf":[{"const":"total","description":"Aggregation logic type for analytic result. One of: 'total', 'by_team', 'by_employee', 'by_procedure'. Required."},{"const":"by_team","description":"Aggregation logic type for analytic result. One of: 'total', 'by_team', 'by_employee', 'by_procedure'. Required."},{"const":"by_employee","description":"Aggregation logic type for analytic result. One of: 'total', 'by_team', 'by_employee', 'by_procedure'. Required."},{"const":"by_procedure","description":"Aggregation logic type for analytic result. One of: 'total', 'by_team', 'by_employee', 'by_procedure'. Required."}],"description":"Aggregation logic type for analytic result. One of: 'total', 'by_team', 'by_employee', 'by_procedure'. Required."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated result sets. Must be >= 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Page limit for number of results per page. Must be between 1 and 100."},"order_by":{"oneOf":[{"const":"procedure_code","description":"Sort field for analytic summary results. Optional. Allowed values: 'procedure_code', 'team_name', 'employee_name', 'total_usage', 'total_cost'."},{"const":"team_name","description":"Sort field for analytic summary results. Optional. Allowed values: 'procedure_code', 'team_name', 'employee_name', 'total_usage', 'total_cost'."},{"const":"employee_name","description":"Sort field for analytic summary results. Optional. Allowed values: 'procedure_code', 'team_name', 'employee_name', 'total_usage', 'total_cost'."},{"const":"total_usage","description":"Sort field for analytic summary results. Optional. Allowed values: 'procedure_code', 'team_name', 'employee_name', 'total_usage', 'total_cost'."},{"const":"total_cost","description":"Sort field for analytic summary results. Optional. Allowed values: 'procedure_code', 'team_name', 'employee_name', 'total_usage', 'total_cost'."}],"description":"Sort field for analytic summary results. Optional. Allowed values: 'procedure_code', 'team_name', 'employee_name', 'total_usage', 'total_cost'."},"order":{"oneOf":[{"const":"asc","description":"Sort direction. Either 'asc' or 'desc'. Optional."},{"const":"desc","description":"Sort direction. Either 'asc' or 'desc'. Optional."}],"description":"Sort direction. Either 'asc' or 'desc'. Optional."}},"required":["aggregation"],"description":"Request body schema for analytic search of enterprise procedure usage. Allows filtering by code, teams, employees, and time window. Used for both employee and moderator endpoints. Fields must precisely match analytic reporting context, using strict enum values where applicable."},"IWrtnEnterpriseProcedure.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Filter by the procedure's unique code value. Optional."},"title":{"type":"string","description":"Filter by procedure display title using a case-insensitive search. Optional."},"active":{"type":"boolean","description":"Filter for active/inactive procedures assigned to the enterprise. Optional."},"sequence_min":{"type":"integer","description":"Return only procedures with a display sequence greater than or equal to this value. Optional."},"sequence_max":{"type":"integer","description":"Return only procedures with display sequence less than or equal to this value. Optional."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated catalog listing. Must be >= 1. Optional."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page (pagination). Must be between 1 and 100. Optional."},"order_by":{"oneOf":[{"const":"sequence","description":"Sort procedures by this field. Allowed values: 'sequence', 'title', 'code', 'created_at'. Optional."},{"const":"title","description":"Sort procedures by this field. Allowed values: 'sequence', 'title', 'code', 'created_at'. Optional."},{"const":"code","description":"Sort procedures by this field. Allowed values: 'sequence', 'title', 'code', 'created_at'. Optional."},{"const":"created_at","description":"Sort procedures by this field. Allowed values: 'sequence', 'title', 'code', 'created_at'. Optional."}],"description":"Sort procedures by this field. Allowed values: 'sequence', 'title', 'code', 'created_at'. Optional."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' (ascending) or 'desc' (descending). Optional."},{"const":"desc","description":"Sort direction: 'asc' (ascending) or 'desc' (descending). Optional."}],"description":"Sort direction: 'asc' (ascending) or 'desc' (descending). Optional."}},"required":[],"description":"Request parameters for searching and paginating the enterprise's AI procedure catalog. Supports filtering by code and title, filtering on activation status, display sequence, and paginated/sorted navigation. Used for both moderator and employee catalog/list endpoints."},"IWrtnEnterpriseProcedure.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_procedures","properties":{"code":{"type":"string","description":"Globally unique short identifier for this procedure (e.g., 'image-generation'). Must be unique across the AI procedure catalog. Refers to wrtn_procedures.code in the database."},"title":{"type":"string","description":"Human-readable display title for the AI procedure (e.g., 'Image Generation'). Must be unique across the AI procedure catalog. Refers to wrtn_procedures.title in the database."},"description":{"oneOf":[{"type":"string","description":"Optional markdown description to show in catalogs. Briefly summarizes the purpose of the AI procedure. Refers to wrtn_procedures.description in the database."},{"type":"null"}],"description":"Optional markdown description to show in catalogs. Briefly summarizes the purpose of the AI procedure. Refers to wrtn_procedures.description in the database."},"icon":{"oneOf":[{"type":"string","description":"Optional URL of the avatar or icon representing this procedure. May be an SVG, PNG, or GIF. Refers to wrtn_procedures.icon in the database."},{"type":"null"}],"description":"Optional URL of the avatar or icon representing this procedure. May be an SVG, PNG, or GIF. Refers to wrtn_procedures.icon in the database."},"active":{"type":"boolean","description":"Indicates whether the procedure is enabled and available for selection. True by default. Refers to wrtn_procedures.active in the database."}},"required":["code","title","active"],"description":"Request body for registering a new WrtnEnterprise AI procedure via the global procedure catalog. Fields must correspond to the wrtn_procedures schema. Required: code (unique), title (unique), active. Optionally provide description and icon. Data constraints are enforced on the backend, but input should be validated for uniqueness as well."},"IWrtnEnterpriseTeamProcedure.IRequest":{"type":"object","properties":{"title":{"type":"string","description":"Optional substring search on the AI procedure display title. If specified, returns procedures assigned to the team with match in title."},"active":{"type":"boolean","description":"Optional filter for procedures by activation state. If true, returns only currently active (enabled) procedures. If false, returns only disabled procedures. If not specified, all procedures are considered."},"page":{"type":"integer","description":"Pagination: 1-based page index for results. Defaults to 1 if omitted. Must be >= 1."},"limit":{"type":"integer","description":"Pagination: Number of results per page. Maximum and default controlled by backend service policy (e.g. 10, 20, or 50)."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort order field for the search result. Must be one of: 'created_at' (recently assigned first), 'title' (alphabetical), 'sequence' (assignment order in the team)."},{"const":"title","description":"Sort order field for the search result. Must be one of: 'created_at' (recently assigned first), 'title' (alphabetical), 'sequence' (assignment order in the team)."},{"const":"sequence","description":"Sort order field for the search result. Must be one of: 'created_at' (recently assigned first), 'title' (alphabetical), 'sequence' (assignment order in the team)."}],"description":"Sort order field for the search result. Must be one of: 'created_at' (recently assigned first), 'title' (alphabetical), 'sequence' (assignment order in the team)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction. Either ascending ('asc') or descending ('desc'). Defaults to backend policy or 'asc' if not specified."},{"const":"desc","description":"Sort direction. Either ascending ('asc') or descending ('desc'). Defaults to backend policy or 'asc' if not specified."}],"description":"Sort direction. Either ascending ('asc') or descending ('desc'). Defaults to backend policy or 'asc' if not specified."}},"required":[],"description":"Search, filtering, and pagination parameters for finding enabled AI procedures assigned to a WrtnEnterprise team (wrtn_enterprise_team_procedures). Fields are all optional. Filtering by title (text match), active state, pagination, and sort options are supported. Does not allow arbitrary property expansion; all parameters must be explicitly defined here."},"IWrtnEnterpriseTeamProcedure":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_procedures","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the procedure assignment to the team."},"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"Contextual object representing the assigned team. All properties provided by IWrtnEnterpriseTeam.ISummary."},"procedure":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary","description":"Assigned AI procedure entity object (summary) for this team assignment. All properties provided by IWrtnProcedure.ISummary."},"configurator":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The employee (typically master or manager) who performed this configuration action. Required for compliance and auditing."},"sequence":{"type":"integer","description":"Display order of the assigned procedure relative to other procedures within the team's catalog."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of initial assignment creation (audit trail, ISO 8601 format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion marker—if set, this assignment is logically deleted. Otherwise null."}},"required":["id","team","procedure","configurator","sequence","created_at"],"description":"Assignment record linking an AI procedure (from global catalog) to an enterprise team, including full contextual objects for the team, the procedure, the configurator employee, display order, and assignment metadata. Used for employee-side consumption, admin management, and strict auditability at the Wrtn B2B SaaS level. Matches wrtn_enterprise_team_procedures, transforming all contextual FKs to objects per interface schema relation mapping principles."},"IWrtnEnterpriseTeamProcedure.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_procedures","properties":{"wrtn_procedure_id":{"type":"string","format":"uuid","description":"Unique identifier from the global wrtn_procedures catalog for the AI procedure to assign. Required."},"sequence":{"type":"integer","description":"Display order of the assigned procedure among team-scoped procedures. Lower values are shown first in the team's catalog."}},"required":["wrtn_procedure_id"],"description":"Request DTO for assigning a new AI procedure to a team (wrtn_enterprise_team_procedures). Only the global procedure ID and (optionally) display sequence are required. Actor and session context are inferred from JWT authentication."},"IWrtnAttachmentFile.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination - page number for the paginated list of metadata files to retrieve. Optional, defaults to 1 if not set."},"limit":{"type":"integer","description":"Pagination - number of file records per page; controls page size for the listing operation. Optional, default may be enforced by system policy."},"search":{"type":"string","description":"Full-text search pattern for filename, supporting flexible file retrieval by user-input queries. Looks up against file name or partial match."},"extension":{"type":"string","description":"Filter for one or more file extensions (e.g., 'pdf', 'jpg'). Only files matching this extension will be included in the response."},"created_from":{"type":"string","format":"date-time","description":"Filters results to files created at or after this ISO date-time (inclusive). Useful for date-range file discovery and audit scenarios."},"created_to":{"type":"string","format":"date-time","description":"Filters results to files created at or before this ISO date-time (inclusive). Useful for limiting results to older uploads."}},"required":[],"description":"Filtering, search, sorting, and pagination options for attachment file listing. Enables enterprise/actor-class workflows for file discovery, supporting flexible retrieval across multiple filtering dimensions such as name, extension, and creation window. All filters adhere to organizational boundaries, permission and audit rules. Optional parameters—unspecified fields default to system-level pagination and presentation constraints."},"IWrtnAttachmentFile.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_attachment_files","description":"DTO for registering a new attachment file in the WrtnEnterprise file repository. Includes all required business metadata, and references all compliance, quota, and security validation rules. Quota, virus scan, and storage enforcement are handled server-side. This DTO is only for metadata, not file data upload—the file is expected to be stored in cloud storage (e.g., S3) and referenced by URL. Maps strictly to the wrtn_attachment_files Prisma schema and business requirements.","properties":{"name":{"type":"string","description":"Original filename provided at upload for display, selection, search, and audit trail purposes. This should be the filename as provided by the user during upload, subject to file name sanitization and length validation. It is recorded for reference but not used as the storage key. Must be a valid filename accepted by company policy. Required. Maps to wrtn_attachment_files.name."},"extension":{"type":"string","description":"File extension (e.g., 'pdf', 'jpg', 'docx', 'png') extracted from the uploaded file. Used for file type display, download handling, system filtering, and policy validation. Only admin-approved file types/extensions are accepted; see business system policy for allowed/denied types. Required. Maps to wrtn_attachment_files.extension. Validation occurs server-side per config."},"url":{"type":"string","maxLength":80000,"description":"S3-compatible (cloud object) file URL used for secure fetching and serving the physical file. Always points to a protected internal object storage path that passes backend security review. Should NEVER be exposed as a public, unauthenticated URL. The maximum allowed URL length is 80,000 characters, as set in system configuration/policy. Required. Maps to wrtn_attachment_files.url. Used only for storage and audit purposes."}},"required":["name","extension","url"]},"IWrtnAttachmentFile.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_attachment_files","description":"DTO for updating metadata of an existing attachment file in the WrtnEnterprise repository. Allows permitted modification of the file's display name and extension, according to business and security policy (e.g., for renaming or correcting file type via support). Content/blob cannot be changed via this DTO. All changes are validated against compliance, retention, and audit requirements. Audit trail is enforced for any update. Maps to wrtn_attachment_files Prisma schema—only modifiable fields allowed.","properties":{"name":{"type":"string","description":"New filename for the attachment file, supporting rename/correction flows. Must be a valid filename per company policy and is not used as a storage key. May require audit justification for compliance. Maps to wrtn_attachment_files.name. Optional."},"extension":{"type":"string","description":"Updated file extension; used in case of file type correction or mistake at upload. Only allowed if business policy and file data agree; must match the set of file types permitted by company security policy. Maps to wrtn_attachment_files.extension. Optional and subject to validation."}},"required":[]},"IWrtnEnterpriseDocumentation.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for result pagination. Must be >= 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of documentation entries to return per page. Must be between 1 and 100, default 20."},"search":{"type":"string","description":"Search query string for titles/descriptions. Performs full-text and fuzzy search on documentation titles, slugs, and descriptions."},"enterprise_id":{"type":"string","format":"uuid","description":"If provided, filters documentation to this enterprise. Used for scoping documentation to a specific tenant."},"team_id":{"type":"string","format":"uuid","description":"If provided, filters documentation to a specific team within the enterprise."},"employee_id":{"type":"string","format":"uuid","description":"Optional: Filter documentation by author employee's ID."},"published":{"type":"boolean","description":"If true, only published documentation is included. If false, includes drafts/unpublished docs the user is permitted to access."},"category":{"type":"string","description":"Optional filter by documentation category or type, e.g. help, onboarding, guide. May be a loose match or internal code."},"order_by":{"oneOf":[{"const":"created_at","description":"Field by which results should be ordered."},{"const":"updated_at","description":"Field by which results should be ordered."},{"const":"title","description":"Field by which results should be ordered."},{"const":"slug","description":"Field by which results should be ordered."}],"description":"Field by which results should be ordered."},"order_direction":{"oneOf":[{"const":"asc","description":"Sort direction for order_by field."},{"const":"desc","description":"Sort direction for order_by field."}],"description":"Sort direction for order_by field."}},"required":[],"description":"Parameters for searching, filtering, and paginating documentation articles. Enables advanced search, category filtering, scoping to enterprise/team/author, published-status filtering, and result sorting for knowledgebase/biz doc discovery."},"IWrtnEnterpriseDocumentation":{"type":"object","x-autobe-prisma-schema":"wrtn_documentations","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the documentation article. Maps to wrtn_documentations.id."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise owning this documentation. Resolved from wrtn_enterprise_id foreign key. Provides summary info: id, name, code."},"author":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Author employee who created the documentation. Maps from wrtn_enterprise_employee_id foreign key. Provides summary: id, email, name, title."},"slug":{"type":"string","description":"Unique business slug/identifier for documentation within the enterprise. Used for URLs, deeplinks, and identification."},"title":{"type":"string","description":"Title of the documentation article. User-facing and searchable."},"description":{"type":"string","description":"Optional short description/summary for catalog or search UI."},"published":{"type":"boolean","description":"Whether this documentation is currently published (true) and visible to intended audience, or is in draft/unpublished state (false)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this documentation article. ISO 8601, UTC."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this documentation record. ISO 8601, UTC."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. If not null, indicates documentation is deleted/archived in the system."},"versions":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseDocumentationVersion.ISummary"},"description":"Array of all published or draft versions for this documentation, most recent first. Each version provides id, title, version, etc."}},"required":["id","enterprise","author","slug","title","published","created_at","updated_at"],"description":"Detailed documentation article entity. Maps to wrtn_documentations table. Includes basic info (slug, title, description), published flag, enterprise & author relationships, version listing, and timestamps. Used for onboarding, help center, and business policy documentation."},"IWrtnEnterpriseDocumentationVersion.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_documentation_versions","description":"Summary DTO for a version (revision) of an enterprise documentation article. Suitable for lists, history views, and diffing UIs. Links to parent documentation and author. Excludes full markdown body except for possibly truncated preview. Derived from wrtn_documentation_versions Prisma model.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this documentation version (wrtn_documentation_versions.id)."},"documentation":{"$ref":"#/components/schemas/IWrtnEnterpriseDocumentation.ISummary","description":"Summary of the parent documentation this version belongs to. Maps from wrtn_documentation_id foreign key."},"author":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary of the employee who authored this version (wrtn_enterprise_employee_id)."},"version":{"type":"integer","description":"Sequential version number for this documentation. Monotonically increases per documentation (wrtn_documentation_versions.version)."},"title":{"type":"string","description":"Display title of this revision (wrtn_documentation_versions.title)."},"changelog":{"oneOf":[{"type":"string","description":"Optional summary or note about what changed in this version (wrtn_documentation_versions.changelog)."},{"type":"null"}],"description":"Optional summary or note about what changed in this version (wrtn_documentation_versions.changelog)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this version was written (wrtn_documentation_versions.created_at). ISO8601."}},"required":["id","documentation","author","version","title","created_at"]},"IWrtnEnterpriseDocumentation.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_documentations","properties":{"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"ID of the enterprise this documentation belongs to. This establishes the documentation's tenant scope. The enterprise must exist. See wrtn_documentations.wrtn_enterprise_id."},"slug":{"type":"string","description":"Unique documentation slug within the enterprise. Used for user-friendly URL routing and uniqueness. Must be unique in the given enterprise context. See wrtn_documentations.slug."},"title":{"type":"string","description":"The main human-readable title of the documentation. Required for knowledge base navigation and presentation. See wrtn_documentations.title."},"description":{"oneOf":[{"type":"string","description":"Short summary or description of the documentation content. Optional. Used for catalog views and search. See wrtn_documentations.description."},{"type":"null"}],"description":"Short summary or description of the documentation content. Optional. Used for catalog views and search. See wrtn_documentations.description."},"published":{"type":"boolean","description":"Publish status flag. true if the doc is visible to its intended audience. false for draft/unpublished. See wrtn_documentations.published."},"body":{"type":"string","description":"Main document content. Should be Markdown or rich text. Required for meaningful documentation creation."}},"required":["wrtn_enterprise_id","slug","title","published","body"],"description":"Creation DTO for enterprise documentation. Used to create a new documentation article in an enterprise context. Related to wrtn_documentations table. All fields except description are required. Author/creator employee is injected from authentication context and not present in request body."},"IWrtnDocumentation.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_documentations","properties":{"slug":{"type":"string","description":"Globally unique documentation slug (business identifier) within the enterprise. Used for knowledge base URL routing, deep-linking, search navigation, and global/documentation-wide audit traceability. Must remain unique per enterprise and track all revisions for compliance."},"title":{"type":"string","description":"Human-readable title (main heading) for the documentation article. Must be unique per enterprise and captures the key topic/section for onboarding, compliance documentation, or employee support center. Used in dashboard, navigation, and knowledge base list views."},"description":{"oneOf":[{"type":"string","description":"Optional short description or summary supporting documentation discoverability in global search, onboarding process, and enterprise knowledge base. Used to power FAQ/quick search, onboarding hints, and metadata for compliance/HR audits."},{"type":"null"}],"description":"Optional business-oriented description or summary; supports knowledge base auto-suggestions, onboarding tutorials, and compliance visibility. May be omitted or null for system/internal use articles."},"published":{"type":"boolean","description":"Marks this documentation as published (visible to all intended recipients) or draft/unpublished (internal editors only). Controls onboarding, compliance visibility, and triggers notification/event workflow for organizational communications. When true, documentation is discoverable by all scoped employees."},"body":{"type":"string","description":"Main document content body (supports Markdown or rich text). Forms the complete, auditable knowledge record for onboarding, compliance, or multi-team workflow. Updates here are versioned and subject to compliance-level audit trails."}},"required":[],"description":"Partial-update (PATCH) specification for knowledge base documentation records. Allows optional modification of title, slug, description, published status, or body for an existing organizational documentation artifact. This schema enforces collaborative editing, audit/compliance workflows, and versioning for business/knowledge entries in the enterprise portal. All fields are optional; only specified fields will update. Business and compliance rules are enforced at the operation level. Use this DTO to maintain comprehensive, auditable onboarding, compliance, and policy documentation across teams and knowledge domains."},"IWrtnDocumentation":{"type":"object","x-autobe-prisma-schema":"wrtn_documentations","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier (UUID) for the documentation article in the enterprise knowledge base. Used throughout audit, compliance, editing, and reference workflows."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise context to which the knowledge documentation belongs. Determines data isolation boundaries and compliance policies for knowledge retention, onboarding flows, and global knowledge searches."},"author":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee (staff author) who published or created this documentation. Used for audit traceability, compliance investigation, and collaborative workflow. Enables HR, onboarding, or cross-team record attribution."},"slug":{"type":"string","description":"URL-safe, enterprise-unique business slug for documentation identification and direct navigation. Used in enterprise knowledge base URLs, onboarding checklists, policy wikis, and compliance dashboards."},"title":{"type":"string","description":"Formal human-readable title (main heading) for onboarding, compliance, and knowledge base display. Must be unique per enterprise. Used for document audit trail, team training, and search navigation across portal/DXP interfaces."},"description":{"oneOf":[{"type":"string","description":"Optional search-optimized, onboarding, or knowledge base summary for compliance audit, onboarding process, and knowledge search. Guides automated documentation discovery and FAQ workflows."},{"type":"null"}],"description":"Short summary to facilitate search, onboarding process, and compliance navigation for this documentation record. Null for legacy/system docs or internal artifacts."},"published":{"type":"boolean","description":"True if the documentation is live and visible to employees for onboarding, compliance, audit, and corporate training. False means it's draft/unpublished/under review. Publication status is used by enterprise dashboards, knowledge base UIs, and onboarding task completion logic."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601 UTC) for documentation, used for compliance history, onboarding process tracking, and knowledge base analysis. Auditable and referenced in all HR/Regulatory reporting."},"updated_at":{"type":"string","format":"date-time","description":"Most recent update or revision timestamp for this documentation (ISO 8601 UTC). Used for revision audit trails, employee training recency checks, and compliance evidence in investigations."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp for historical/audit compliance. Retained in knowledge base record for regulatory audit or legal hold."},{"type":"null"}],"description":"Soft deletion timestamp reflecting knowledge base compliance retention and legal hold policies. Null means the document is live/active."}},"required":["id","enterprise","author","slug","title","published","created_at","updated_at"],"description":"Knowledge base documentation record entity for WrtnEnterprise. Represents a business-compliant, onboarding and policy reference article for one or more teams, the whole company, or for regulated process/audit. Part of the cross-organizational knowledge base, with audit, collaborative editing, compliance, and multi-channel onboarding workflow support. Embeds full traceability for HR, onboarding, and compliance."},"IWrtnEnterpriseDocumentationVersion.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination of documentation versions. Must be >= 1 (default: 1)."},"limit":{"type":"integer","description":"Maximum number of version summary items per page. Typical values: 10/20/50. Upper limit may be enforced by backend (default: 20)."},"search":{"type":"string","description":"Optional search string to filter documentation versions by title or changelog. Searches only within the specified documentation's version history."},"order_by":{"oneOf":[{"const":"created_at","description":"Sort field for documentation version retrieval. Must be either 'created_at' (default, descending) or 'version' (ascending/descending as per direction)."},{"const":"version","description":"Sort field for documentation version retrieval. Must be either 'created_at' (default, descending) or 'version' (ascending/descending as per direction)."}],"description":"Sort field for documentation version retrieval. Must be either 'created_at' (default, descending) or 'version' (ascending/descending as per direction)."},"direction":{"oneOf":[{"const":"asc","description":"Sorting direction: 'asc' for ascending, 'desc' for descending. Default: 'desc' for most recent to oldest."},{"const":"desc","description":"Sorting direction: 'asc' for ascending, 'desc' for descending. Default: 'desc' for most recent to oldest."}],"description":"Sorting direction: 'asc' for ascending, 'desc' for descending. Default: 'desc' for most recent to oldest."}},"required":[],"description":"Request DTO for querying a list of versions of a documentation article. Supports pagination, filter, and sort parameters for efficient version history retrieval. Used in endpoints that list or search documentation version summaries. All parameters are optional except where business logic requires a page/limit; defaults are applied server-side if omitted. No x-autobe-prisma-schema, as this DTO represents a filter object and is not persisted as a database table."},"IWrtnEnterpriseDocumentationVersion":{"type":"object","x-autobe-prisma-schema":"wrtn_documentation_versions","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this documentation version. Corresponds to the primary key of the wrtn_documentation_versions table."},"documentation_id":{"type":"string","format":"uuid","description":"The parent documentation article to which this version belongs. References wrtn_documentations.id."},"author":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The employee who created this version of the documentation. Summarizes author identity."},"version":{"type":"integer","description":"Monotonically increasing version number of the documentation. Each new version is incremented from the previous."},"title":{"type":"string","description":"The documentation version's display title as rendered to readers."},"body":{"type":"string","description":"Rich content body of the documentation at this version, typically Markdown or similar."},"changelog":{"oneOf":[{"type":"string","description":"Optional summary of changes or release notes associated with this version."},{"type":"null"}],"description":"Optional summary of changes or release notes associated with this version."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this version was created (immutable)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Deletion timestamp if this version was deleted/voided (soft delete). Null if active."}},"required":["id","documentation_id","author","version","title","body","created_at"],"description":"Detailed representation of a single documentation article version, as stored in wrtn_documentation_versions. Contains versioning metadata, full content body, author, and changelog for traceability and rollback. This schema supports audit and compliance review of organizational documentation history."},"IWrtnDocumentationVersion.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_documentation_versions","description":"Request DTO for creating a new documentation version (wrtn_documentation_versions). Used by employees to append a revision to existing documentation. This schema requires title (string), body (string), and optionally a changelog. It does not accept author or reference IDs in the body since ownership is derived from authenticated context and path parameter. All required fields are mapped directly to the new version row.","properties":{"title":{"type":"string","description":"Title for the new documentation version."},"body":{"type":"string","description":"Full markdown/rich content for this documentation version."},"changelog":{"oneOf":[{"type":"string","description":"Optional change summary for this version."},{"type":"null"}],"description":"Optional change summary for this version."}},"required":["title","body"]},"IWrtnDocumentationVersion":{"type":"object","x-autobe-prisma-schema":"wrtn_documentation_versions","description":"Documentation version entity representing a single snapshot of a documentation article within the wrtn_documentation_versions table. Each version is uniquely identified, references its parent documentation, and records its author, version number, title, body, changelog, and relevant timestamps. This entity enables complete version history for enterprise knowledge base articles and supports audit/compliance requirements for content management. Authors correspond to employees, while the parent documentation provides context in the knowledge management hierarchy. This schema is essential for update/reversion workflows and ensures robust traceability of changes in the documentation lifecycle.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the documentation version entry (corresponds to wrtn_documentation_versions.id)."},"documentation":{"$ref":"#/components/schemas/IWrtnDocumentationVersion.IDocumentationRef","description":"Parent documentation article (wrtn_documentations) to which this version belongs. Provides context for knowledge base hierarchy. Always present."},"author":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee summary of the author who created this documentation version (wrtn_enterprise_employees). Used for audit and display purposes."},"version":{"type":"integer","description":"Monotonically increasing version number for this documentation, unique within the parent documentation. Indicates the revision sequence for change tracking."},"title":{"type":"string","description":"Title of the documentation article at this version. May differ from previous versions if edited."},"body":{"type":"string","description":"Markdown or rich-content body for the documentation version. Represents the full text as displayed in the knowledge base."},"changelog":{"oneOf":[{"type":"string","description":"Optional summary of changes that distinguish this version from the previous one. Can be null if not provided or if initial version."},{"type":"null"}],"description":"Optional summary of changes that distinguish this version from the previous one. Can be null if not provided or if initial version."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when this documentation version was created. Used for audit, display order, and compliance reporting."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp for compliance and lifecycle management. Null if active."},{"type":"null"}],"description":"Soft delete timestamp for compliance and lifecycle management. Null if active."}},"required":["id","documentation","author","version","title","body","created_at"]},"IWrtnDocumentationVersion.IDocumentationRef":{"type":"object","description":"Reference summary object for a documentation article, representing the parent of a documentation version. Contains basic details for context in listings and hierarchical navigation. Used as a lightweight reference to the full documentation entity.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the parent documentation (wrtn_documentations.id)."},"slug":{"type":"string","description":"Business-level unique slug/identifier for documentation within the enterprise. Used for navigation and linking."},"title":{"type":"string","description":"Human-readable title of the documentation article."}},"required":["id","slug","title"]},"IWrtnDocumentationVersion.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_documentation_versions","description":"Request DTO for updating a specific documentation version. Allows modification of title, body, and changelog in the wrtn_documentation_versions table. All fields are optional (partial update pattern) – business logic must prevent updates to deleted (soft-delete) entries. The updated response will reflect all changes, audit-logged for traceability.","properties":{"title":{"type":"string","description":"Optional new title for this documentation version."},"body":{"type":"string","description":"Optional new markdown or rich content body."},"changelog":{"oneOf":[{"type":"string","description":"Optional new change summary for this version."},{"type":"null"}],"description":"Optional new change summary for this version."}},"required":[]},"IWrtnFaqCategory.IRequest":{"type":"object","properties":{"enterprise_id":{"type":"string","format":"uuid","description":"The unique identifier of the enterprise whose FAQ categories should be searched. All category search and retrieval operations are strictly restricted by this enterprise ID, ensuring that only FAQ categories within the specified enterprise context are queried and returned. This field is required for all search/filter requests and must reference a valid, active enterprise. Sourced from wrtn_faq_categories.wrtn_enterprise_id."},"search":{"type":"string","description":"Optional search keyword to filter FAQ category names or descriptions. Supports full-text matching for rapid navigation and discovery within the FAQ category list. If omitted, no keyword filtering is applied. Relevant to the 'name' and 'description' fields of wrtn_faq_categories."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for paginated search results. Must be at least 1. Used to support efficient browsing of potentially large FAQ category sets within an enterprise knowledge base."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of FAQ categories to return per page. System-enforced maximum is 100 for usability and performance. Default is 20 if unspecified. Applies to FAQ category search operations."},"sort_by":{"oneOf":[{"const":"display_order","description":"Field by which to sort the resulting FAQ category list. Supported values: 'display_order' (default ordering for UI navigation) and 'created_at' (order by creation timestamp)."},{"const":"created_at","description":"Field by which to sort the resulting FAQ category list. Supported values: 'display_order' (default ordering for UI navigation) and 'created_at' (order by creation timestamp)."}],"description":"Field by which to sort the resulting FAQ category list. Supported values: 'display_order' (default ordering for UI navigation) and 'created_at' (order by creation timestamp)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction for the FAQ categories. Ascending ('asc') or descending ('desc'). Defaults to ascending order. Used alongside 'sort_by' to order category results."},{"const":"desc","description":"Sort direction for the FAQ categories. Ascending ('asc') or descending ('desc'). Defaults to ascending order. Used alongside 'sort_by' to order category results."}],"description":"Sort direction for the FAQ categories. Ascending ('asc') or descending ('desc'). Defaults to ascending order. Used alongside 'sort_by' to order category results."}},"required":["enterprise_id"],"description":"Search/filter parameters for paginated FAQ category lookup in wrtn_faq_categories. Controls enterprise scope, search keyword, pagination, and sort order. Aligned with security and usability requirements for organizational knowledge base navigation."},"IWrtnFaqCategory.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_faq_categories","description":"Summary DTO for enterprise FAQ categories. Represents a single FAQ category in an enterprise knowledge base, used for organizing FAQ entries and structuring help centers. Draws from the wrtn_faq_categories table, which assigns each FAQ category to a specific enterprise and employee, with a unique category name per enterprise and display ordering. Contains core identity, organizational, and display fields for summarizing categories in list or embeddable contexts. Does not include FAQ lists directly; retrieve via separate endpoint for scalability.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the FAQ category. Maps to wrtn_faq_categories.id."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise context to which this category belongs. Maps from wrtn_faq_categories.wrtn_enterprise_id. See IWrtnEnterprise.ISummary."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee (staff) who created or owns this FAQ category. Maps from wrtn_faq_categories.wrtn_enterprise_employee_id."},"name":{"type":"string","description":"Category name, unique within the enterprise. Used for display and navigation. Maps to wrtn_faq_categories.name."},"description":{"oneOf":[{"type":"string","description":"Optional category description for end-user display. Maps to wrtn_faq_categories.description. Can be null."},{"type":"null"}],"description":"Optional category description for end-user display. Maps to wrtn_faq_categories.description. Can be null."},"display_order":{"type":"integer","description":"Order for sorting and navigation in the help center UI. Maps to wrtn_faq_categories.display_order."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of FAQ category creation (ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for this FAQ category."}},"required":["id","enterprise","employee","name","display_order","created_at","updated_at"]},"IWrtnFaqCategory":{"type":"object","x-autobe-prisma-schema":"wrtn_faq_categories","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the FAQ category (wrtn_faq_categories.id). Primary key."},"enterprise":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprises","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the enterprise (wrtn_enterprises.id)."},"code":{"type":"string","description":"Unique code for the enterprise, used for business and login domain matching (wrtn_enterprises.code)."},"name":{"type":"string","description":"Organization legal/company name (wrtn_enterprises.name)."}},"required":["id","code","name"],"description":"Organization (enterprise) to which the FAQ category belongs. Relation-mapped from wrtn_faq_categories.wrtn_enterprise_id."},"employee":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the employee (wrtn_enterprise_employees.id)."},"email":{"type":"string","format":"email","description":"Unique employee email address within the enterprise (wrtn_enterprise_employees.email)."},"name":{"type":"string","description":"Employee display name (wrtn_enterprise_employees.name)."},"title":{"oneOf":[{"const":"master"},{"const":"manager"},{"const":"member"},{"type":"null"}],"description":"Current business title (master, manager, member, or null)."}},"required":["id","email","name"],"description":"Employee (creator/owner) of the FAQ category. Relation-mapped from wrtn_faq_categories.wrtn_enterprise_employee_id."},"name":{"type":"string","description":"Name of the FAQ category. Must be unique within the enterprise scope (wrtn_faq_categories.name). Required for creation and update."},"description":{"type":"string","description":"Optional longer description or summary of the FAQ category for search/navigation use. Maps to wrtn_faq_categories.description."},"display_order":{"type":"integer","description":"Integer used to control the order of categories for display and UI navigation. Sourced from wrtn_faq_categories.display_order."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this FAQ category was created (wrtn_faq_categories.created_at). Used for audit and UI sorting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to the FAQ category (wrtn_faq_categories.updated_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If soft-deleted, date/time FAQ category was marked deleted; otherwise, null. Sourced from wrtn_faq_categories.deleted_at."}},"required":["id","enterprise","employee","name","display_order","created_at","updated_at"],"description":"Full DTO for single FAQ category entity in wrtn_faq_categories, exposing all key business and audit fields, with relations mapped for enterprise (organization) and employee (creator/owner). Used for detailed FAQ category views and management. All field descriptions sourced from Prisma schema or business requirements."},"IWrtnFaqCategory.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_faq_categories","properties":{"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"The unique identifier of the enterprise to which this FAQ category will belong. Must reference an active enterprise. Derived from wrtn_faq_categories.wrtn_enterprise_id in the Prisma schema."},"wrtn_enterprise_employee_id":{"type":"string","format":"uuid","description":"The unique identifier of the employee creating this FAQ category. Represents content manager, author, or documentation admin. Derived from wrtn_faq_categories.wrtn_enterprise_employee_id."},"name":{"type":"string","description":"Human-readable category name. Must be unique within the associated enterprise. Used for grouping and quick navigation in self-service support or documentation. Maps to wrtn_faq_categories.name."},"description":{"oneOf":[{"type":"string","description":"Optional description of the FAQ category for end user navigation. Used as an extended tip or helper in UI. Maps to wrtn_faq_categories.description. Can be null."},{"type":"null"}],"description":"Optional description of the FAQ category for end user navigation. Used as an extended tip or helper in UI. Maps to wrtn_faq_categories.description. Can be null."},"display_order":{"type":"integer","description":"Integer order/index for navigation and category sorting within the enterprise. Determines display sequence among categories. Maps to wrtn_faq_categories.display_order."}},"required":["wrtn_enterprise_id","wrtn_enterprise_employee_id","name","display_order"],"description":"DTO for creating a new FAQ category associated with an enterprise. Follows business rules for uniqueness (name within enterprise), audit-trail (creator, timestamps), and organizational ownership linking. This schema maps to the wrtn_faq_categories table and specifies all necessary metadata for logical grouping of FAQs. Only authorized actors (content managers, moderators) may invoke."},"IWrtnFaqCategory.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_faq_categories","properties":{"name":{"type":"string","description":"Optional new name for the category (must remain unique within enterprise)."},"description":{"oneOf":[{"type":"string","description":"Optional new descriptive text for navigation or UI."},{"type":"null"}],"description":"Optional new descriptive text for navigation or UI."},"display_order":{"type":"integer","description":"Optional new display sequence index."}},"description":"Update DTO for FAQ category entity. Only modifiable fields (name, description, display_order) are defined. All fields are optional and support PATCH semantics; omitted fields are left unchanged. Used for PUT/PATCH endpoints for robust FAQ catalog management.","required":[]},"IWrtnFaq.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for FAQ list pagination. Must be a positive integer specifying which result page to return when paginating FAQ results."},"limit":{"type":"integer","description":"Maximum number of FAQ entries to return in a single page. Controls per-request result size. Must be a positive integer and adheres to system limits."},"search":{"type":"string","description":"Full-text search query string to match FAQ question or answer fields. Performs a partial or fuzzy match search over FAQ contents to help users find relevant questions and answers. If empty or omitted, acts as a wildcard."},"category_id":{"type":"string","format":"uuid","description":"Search filter restricting FAQs to a specific FAQ category. Supply the category's unique identifier to return only FAQs within that category."},"enterprise_id":{"type":"string","format":"uuid","description":"Optional filter, restricting FAQ search/result to a specific enterprise's knowledge base context. Ensures employees only query their allowed scope."},"author_id":{"type":"string","format":"uuid","description":"Filter to FAQs created/edited by a specific employee author. Useful for moderation, auditing, or user-centric results."},"bulk_imported":{"type":"boolean","description":"Query flag to filter results to only FAQs created by bulk import or only those manually authored. Helps business users distinguish knowledge sources."},"sort_by":{"oneOf":[{"const":"display_order","description":"Sorts the returned FAQ results by the specified field. Valid options are 'display_order', 'created_at', or 'updated_at'."},{"const":"created_at","description":"Sorts the returned FAQ results by the specified field. Valid options are 'display_order', 'created_at', or 'updated_at'."},{"const":"updated_at","description":"Sorts the returned FAQ results by the specified field. Valid options are 'display_order', 'created_at', or 'updated_at'."}],"description":"Sorts the returned FAQ results by the specified field. Valid options are 'display_order', 'created_at', or 'updated_at'."},"order":{"oneOf":[{"const":"asc","description":"Sort order for the queried FAQ results: ascending or descending. 'asc' for ascending, 'desc' for descending. Applied to the 'sort_by' field."},{"const":"desc","description":"Sort order for the queried FAQ results: ascending or descending. 'asc' for ascending, 'desc' for descending. Applied to the 'sort_by' field."}],"description":"Sort order for the queried FAQ results: ascending or descending. 'asc' for ascending, 'desc' for descending. Applied to the 'sort_by' field."}},"required":[],"description":"DTO for paginated FAQ search operations. Allows rich filtering, sorting, and full-text search by question/answer/category, supports scoping to enterprise or category and proper result ordering. Maps directly to query and business requirements for knowledge base browsing. Used by PATCH /wrtnEnterprise/faqs and similar APIs."},"IWrtnFaq":{"type":"object","x-autobe-prisma-schema":"wrtn_faqs","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this FAQ entry."},"question":{"type":"string","description":"FAQ question text. Expressed as a full sentence or query. Must be unique within the enterprise. Required for all FAQ entries."},"answer":{"type":"string","description":"Definitive answer to the FAQ question. May contain rich text or markdown for formatting. Rendered as HTML on the frontend."},"category":{"$ref":"#/components/schemas/IWrtnFaqCategory.ISummary","description":"Reference to the FAQ category entity to which this FAQ belongs. Provides category name, description, and allows question grouping for navigation."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference to the enterprise/company knowledge base this FAQ belongs to. Encapsulates enterprise display name, code, and organizational context."},"author":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary representation of the employee who authored or last edited this FAQ entry. Contains identity and contact metadata for audit and attribution."},"display_order":{"type":"integer","description":"Integer value determining FAQ order within its category for sorted presentation. Lower values are displayed before higher ones."},"bulk_imported":{"type":"boolean","description":"Indicates if this FAQ was bulk-imported (true) or manually created (false). Aids in distinguishing data provenance and management flows."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when this FAQ entry was created in the system."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to the FAQ record. Updated whenever content, answer, or the question changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp. Null if the FAQ is active, set to an ISO 8601 timestamp when removed from active display, for history and audit logging."}},"required":["id","question","answer","category","enterprise","author","display_order","bulk_imported","created_at","updated_at"],"description":"FAQ detail DTO capturing all fields and business relations for a frequently asked question in an enterprise knowledge base context. Includes question, answer, linked category, author employee, enterprise ownership, display order, import status, and audit timestamps. Used for FAQ detail views and API GET /wrtnEnterprise/faqs/{faqId} responses. Maps to wrtn_faqs table and related entities in normalized DB schema."},"IWrtnFaq.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_faqs","description":"DTO for creating a new FAQ entry, mapped to the wrtn_faqs table. This schema collects all required business data to register a frequently asked question with answer, association to enterprise, author, category, display order, and how it was created (manual/bulk). Used for onboarding knowledgebase, compliance documents, and internal support. Required fields are enforced for atomic operation; uniqueness of question within enterprise is validated by backend on creation. Never include actor/employee identity fields directly in this request (must come from authentication context/JWT).","properties":{"wrtn_faq_category_id":{"type":"string","format":"uuid","description":"UUID referring to the FAQ category. Must reference a valid wrtn_faq_categories.id within the enterprise. Required for classification and search."},"question":{"type":"string","description":"Content of the FAQ question. Must be unique within the enterprise. Required."},"answer":{"type":"string","description":"Answer or explanation of the FAQ. Required."},"display_order":{"type":"integer","description":"Display and sort order for presentation in the FAQ list. Required for user-facing catalog order."},"bulk_imported":{"type":"boolean","description":"Indicates whether the FAQ was bulk-imported (true) or created manually (false). Used for audit and UI presentation."}},"required":["wrtn_faq_category_id","question","answer","display_order","bulk_imported"],"examples":{"v0":{"wrtn_faq_category_id":"e471a96e-1b4a-4ba2-9f1b-f51efc5acb6d","question":"What is WrtnEnterprise AI?","answer":"WrtnEnterprise AI is an enterprise AI-powered SaaS platform for organizations to manage onboarding, support, and audit compliance with advanced analytics and configurable AI models.","display_order":1,"bulk_imported":false}}},"IWrtnFaq.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_faqs","description":"DTO for updating an existing FAQ entry based on wrtn_faqs table. All updatable FAQ attributes are present here: category, question, answer, order, and creation method. Never include actor/user/system fields or identifiers not found in the FAQ schema; root identity context is always inferred from authorization/JWT. Used for full overwrite/replace semantics (PUT) in FAQ update flows. All fields are required for atomic overwrites. Uniqueness of 'question' within enterprise must be validated in the backend; do not check at schema level.","properties":{"wrtn_faq_category_id":{"type":"string","format":"uuid","description":"UUID of the FAQ category. Must reference existing wrtn_faq_categories.id within same enterprise."},"question":{"type":"string","description":"The question for this FAQ. Must be unique within the enterprise. Required."},"answer":{"type":"string","description":"The answer or contents of this FAQ. Required."},"display_order":{"type":"integer","description":"Display order integer for catalog/listing presentation. Required."},"bulk_imported":{"type":"boolean","description":"True if created by bulk import, false if user-created. Used for compliance and search logic."}},"required":["wrtn_faq_category_id","question","answer","display_order","bulk_imported"]},"IWrtnAuditLog.IRequest":{"type":"object","properties":{"actor_kind":{"type":"string","description":"Specify actor kind for filtering. One of 'moderator', 'employee', or null to include all."},"actor_id":{"type":"string","format":"uuid","description":"Filter to a specific actor's id. Must be a UUID."},"session_id":{"type":"string","format":"uuid","description":"Filter to logs associated with a particular session ID (moderator or employee session)."},"event_type":{"type":"string","description":"Event type filter. E.g., 'employee_terminated', 'file_downloaded', 'login_failure', etc."},"object_type":{"type":"string","description":"Business object type filter. E.g., 'enterprise', 'employee', 'team', 'file', 'invoice', 'chat_session', etc."},"object_id":{"type":"string","format":"uuid","description":"Business object id to filter audit entries on. Must be UUID."},"search":{"type":"string","description":"Full-text or keyword search (across object, event, error message, or payload fields)."},"created_after":{"type":"string","format":"date-time","description":"Filter audit log entries created at or after this timestamp (inclusive)."},"created_before":{"type":"string","format":"date-time","description":"Filter audit log entries created before this timestamp (exclusive)."},"order_by":{"oneOf":[{"const":"created_at","description":"Which property to order the results by. Accepts 'created_at', 'event_type', or 'actor_kind'. Default is 'created_at'."},{"const":"event_type","description":"Which property to order the results by. Accepts 'created_at', 'event_type', or 'actor_kind'. Default is 'created_at'."},{"const":"actor_kind","description":"Which property to order the results by. Accepts 'created_at', 'event_type', or 'actor_kind'. Default is 'created_at'."}],"description":"Which property to order the results by. Accepts 'created_at', 'event_type', or 'actor_kind'. Default is 'created_at'."},"order_direction":{"oneOf":[{"const":"asc","description":"Order direction. 'asc' for ascending, 'desc' for descending. Default is 'desc'."},{"const":"desc","description":"Order direction. 'asc' for ascending, 'desc' for descending. Default is 'desc'."}],"description":"Order direction. 'asc' for ascending, 'desc' for descending. Default is 'desc'."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number to fetch (1-based)."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of items per page (for pagination)."}},"required":[],"description":"Request schema for searching audit log entries with advanced filtering, sorting, full-text search, and pagination. Used by moderators and employees to retrieve audit data matching complex business criteria for compliance and investigation.","x-autobe-prisma-schema":"wrtn_audit_logs"},"IWrtnAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Audit log record primary key. Unique identifier."},"actor_kind":{"oneOf":[{"const":"moderator","description":"Which actor kind performed this event ('moderator' or 'employee')."},{"const":"employee","description":"Which actor kind performed this event ('moderator' or 'employee')."}],"description":"Which actor kind performed this event ('moderator' or 'employee')."},"actor":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"}],"description":"Moderator or employee actor who performed the event. 'actor_kind' discriminator determines which object is present."},"session_id":{"type":"string","format":"uuid","description":"ID of the session context in which event occurred. Moderator or employee session, depending on actor_kind."},"event_type":{"type":"string","description":"Type or category of the audited event (e.g. 'employee_created','team_deleted')."},"object_type":{"type":"string","description":"Root business object type; affected object category (e.g., 'employee','team','file')."},"object_id":{"type":"string","format":"uuid","description":"Root business object id that this event affected."},"payload":{"type":"string","description":"Opaque JSON string (application/json, usually encrypted at rest), capturing all event context, before/after data, and audit snapshot."},"error_code":{"type":"string","description":"Optional business error code if the audited event was a failure or exception (e.g. 'AUTH_INVALID_CREDENTIALS', 'ACCESS_DENIED', etc.)."},"error_message":{"type":"string","description":"Optional business or user-friendly error message if the event failed. Not a stack trace."},"created_at":{"type":"string","format":"date-time","description":"Exact time of event occurrence and log creation."},"updated_at":{"type":"string","format":"date-time","description":"Time this log entry was last updated. Typically only changed for correction/compliance reasons."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (if the audit record is deleted/anonymized for retention). Null if active."},"detail_events":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnAuditLogEvent"},"description":"List of subsidiary event records (e.g., request steps, approvals, failure causes) associated to this log. Full audit event chain."}},"required":["id","actor_kind","actor","session_id","event_type","object_type","object_id","payload","created_at","updated_at"],"description":"Full audit log record for one business event, including actor/session context, event type, affected business object info, before/after state, error context, and audit chain for compliance and regulatory traceability. Includes primary summary plus full chain of subsidiary events (see detail_events).","x-autobe-prisma-schema":"wrtn_audit_logs"},"IWrtnAuditLogEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for audit log detail event. Unique identifier."},"event_type":{"type":"string","description":"Event detail type/stage for this subsidiary event, e.g., 'request_started', 'approval', 'completed', 'rollback', etc."},"payload":{"type":"string","description":"Opaque JSON string (application/json, usually encrypted at rest), capturing subobject state/context for this stage."},"error_code":{"type":"string","description":"Optional error code if this event step was a failure."},"error_message":{"type":"string","description":"Human-friendly error message (not stack trace) if the event step failed."},"created_at":{"type":"string","format":"date-time","description":"Exact timestamp of event step occurrence."}},"required":["id","event_type","created_at"],"description":"Subsidiary detail record of an audit event, representing a single event stage or outcome in the chain (e.g., an intermediate step of an approval workflow, or a rollback). Captures timestamp, event type, context, and error status (if any). Sibling of other detail events per main audit log record. Used for drilldown in compliance processes.","x-autobe-prisma-schema":"wrtn_audit_log_events"},"IWrtnBillingInvoice.IRequest":{"type":"object","properties":{"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"Optional filter for a specific enterprise's invoices. Only invoices for this enterprise will be included if set."},"status":{"type":"string","description":"Optional filter for invoice status (e.g., draft, issued, due, paid, overdue, disputed, cancelled)."},"period_start":{"type":"string","format":"date-time","description":"Optional minimum start date for the invoice billing period (inclusive). ISO 8601 timestamp."},"period_end":{"type":"string","format":"date-time","description":"Optional maximum end date for the invoice billing period (exclusive). ISO 8601 timestamp."},"min_amount":{"type":"number","description":"Optional lower bound for invoice total amount (inclusive, USD)."},"max_amount":{"type":"number","description":"Optional upper bound for invoice total amount (inclusive, USD)."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort invoices by. Must be one of: created_at, period_start, period_end, status, total_amount."},{"const":"period_start","description":"Field to sort invoices by. Must be one of: created_at, period_start, period_end, status, total_amount."},{"const":"period_end","description":"Field to sort invoices by. Must be one of: created_at, period_start, period_end, status, total_amount."},{"const":"status","description":"Field to sort invoices by. Must be one of: created_at, period_start, period_end, status, total_amount."},{"const":"total_amount","description":"Field to sort invoices by. Must be one of: created_at, period_start, period_end, status, total_amount."}],"description":"Field to sort invoices by. Must be one of: created_at, period_start, period_end, status, total_amount."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction. Either ascending (asc) or descending (desc)."},{"const":"desc","description":"Sort direction. Either ascending (asc) or descending (desc)."}],"description":"Sort direction. Either ascending (asc) or descending (desc)."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for results (1-based; optional, defaults to 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Max number of results per page (optional; default: 20; max: 100)."},"search":{"type":"string","description":"General fuzzy search over invoice description, reference or enterprise name. Optional."}},"required":[],"description":"Search, filtering, and pagination parameters for retrieving billing invoices from the wrtn_billing_invoices table. Allows filtering by enterprise, status, billing period, total amount, and supports sorting and pagination. Only invoices the caller is entitled to view (per role) will be returned. See wrtn_billing_invoices Prisma schema for field details."},"IWrtnBillingInvoice":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_invoices","description":"Billing invoice entity for a post-paid cycle, representing a consolidated record of billable usage for an enterprise. Contains all lifecycle and audit data as per wrtn_billing_invoices Prisma schema. Used for financial reporting, settlement, dispute, and compliance audit.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the billing invoice record. Primary key, assigned on creation. Represents a single post-paid B2B cycle for an enterprise customer. Ref: wrtn_billing_invoices.id"},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference to the associated enterprise. Links invoice to a specific enterprise as a summary object, per AutoBE response mapping rule, replacing scalar wrtn_enterprise_id."},"period_start":{"type":"string","format":"date-time","description":"The start timestamp (inclusive) for the billing cycle covered by the invoice, in ISO 8601 UTC format. Ref: wrtn_billing_invoices.period_start"},"period_end":{"type":"string","format":"date-time","description":"The end timestamp (exclusive) for the billing cycle covered by the invoice, in ISO 8601 UTC format. Ref: wrtn_billing_invoices.period_end"},"total_amount":{"type":"number","description":"Total invoice amount (sum of items minus credits), in USD or configured base currency. Always non-negative. Ref: wrtn_billing_invoices.total_amount"},"status":{"type":"string","description":"Invoice status code (e.g., 'draft', 'issued', 'due', 'paid', 'overdue', 'disputed', 'cancelled'). Only values allowed by business logic. Ref: wrtn_billing_invoices.status"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of invoice creation (UTC, ISO 8601). Ref: wrtn_billing_invoices.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update (UTC, ISO 8601). Ref: wrtn_billing_invoices.updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion marker (UTC). Null if active. Ref: wrtn_billing_invoices.deleted_at"},"due_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When the invoice payment is due. Null if not set. Ref: wrtn_billing_invoices.due_at"},"paid_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when invoice was paid, if completed. Null if outstanding. Ref: wrtn_billing_invoices.paid_at"},"cancelled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If cancelled, the timestamp of invoice cancellation. Null if not cancelled. Ref: wrtn_billing_invoices.cancelled_at"},"disputed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If the invoice was disputed, this shows the timestamp it was marked as disputed. Null if never disputed. Ref: wrtn_billing_invoices.disputed_at"}},"required":["id","enterprise","period_start","period_end","total_amount","status","created_at","updated_at"]},"IWrtnBillingPayment":{"type":"object","description":"Enterprise billing payment record. Represents a single payment attempt or settlement event for an enterprise invoice, used for reconciliation, audit, fraud analysis, and precise payment flow reporting. Maps directly to wrtn_billing_payments. Every payment event is globally auditable and managed exclusively by moderator actors. This type includes all business/audit context and links to invoice and actor when specified.\n\nThis schema directly references the Prisma schema: wrtn_billing_payments. Always check column names, types, and nullability for mapping. This DTO is used in response bodies; sensitive payment fields (e.g., payment_reference) are only included if the actor is authorized.","x-autobe-prisma-schema":"wrtn_billing_payments","properties":{"id":{"type":"string","format":"uuid","description":"Unique payment event ID."},"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"ID of the enterprise for which the payment applies."},"wrtn_billing_invoice_id":{"oneOf":[{"type":"string","format":"uuid","description":"Invoice ID for this payment event, if payment is applied directly to an invoice; null for unallocated or advance payments."},{"type":"null"}],"description":"Invoice ID for this payment event, if payment is applied directly to an invoice; null for unallocated or advance payments."},"wrtn_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor who processed/recorded the payment event. Nullable if customer-portal/self-payment."},{"type":"null"}],"description":"Moderator actor who processed/recorded the payment event. Nullable if customer-portal/self-payment."},"amount":{"type":"number","description":"Payment amount (in invoice currency, USD). Always positive."},"payment_method":{"type":"string","description":"Payment method code (bank, card, wire, refund, credit, or null for auto). Must match one of the allowed method enums in schema."},"payment_reference":{"oneOf":[{"type":"string","description":"External payment reference/descriptor (e.g., transaction id, processor code, or remitter info). Used for reconciliation/settlement. May be null for auto/manual/advance payment."},{"type":"null"}],"description":"External payment reference/descriptor (e.g., transaction id, processor code, or remitter info). Used for reconciliation/settlement. May be null for auto/manual/advance payment."},"status":{"type":"string","description":"Payment status (e.g., pending, completed, failed, refunded, disputed, cancelled). Business rules apply; only valid enum values allowed according to schema and business logic."},"created_at":{"type":"string","format":"date-time","description":"Payment event creation timestamp (UTC)."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Payment settlement completion timestamp (nullable; only set for completed/failed/refunded payments)."},{"type":"null"}],"description":"Payment settlement completion timestamp (nullable; only set for completed/failed/refunded payments)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete marker (null if active)."},{"type":"null"}],"description":"Soft-delete marker (null if active)."}},"required":["id","wrtn_enterprise_id","amount","payment_method","status","created_at"]},"IWrtnBillingCredit":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_credits","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the billing credit. Corresponds to the 'id' field in wrtn_billing_credits Prisma model."},"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"Reference to the enterprise this credit is associated with. Prisma: wrtn_enterprise_id."},"wrtn_billing_invoice_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the invoice this credit is posted to (if any). Prisma: wrtn_billing_invoice_id."},{"type":"null"}],"description":"Reference to the invoice this credit is posted to (if any). Prisma: wrtn_billing_invoice_id."},"wrtn_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator who posted the credit (if manual adjustment). Prisma: wrtn_moderator_id."},{"type":"null"}],"description":"ID of the moderator who posted the credit (if manual adjustment). Prisma: wrtn_moderator_id."},"amount":{"type":"number","description":"Positive value of credit to apply (USD/base currency). Prisma: amount."},"category":{"type":"string","description":"Credit type/category (manual, refund, promo, overpayment, dispute, reversal, etc). Prisma: category."},"reason":{"type":"string","description":"Narrative explaining the reason for this credit. Prisma: reason."},"issued_at":{"type":"string","format":"date-time","description":"UTC timestamp for when the credit was posted. Prisma: issued_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for credit deletion/reversal. Null if active. Prisma: deleted_at."},{"type":"null"}],"description":"Timestamp for credit deletion/reversal. Null if active. Prisma: deleted_at."}},"required":["id","wrtn_enterprise_id","amount","category","reason","issued_at"],"description":"A single posted credit applied to an enterprise's billing account—manual adjustment, refund, promotion, or overpayment return. Fully auditable, supports reporting and compliance. Mirrors the wrtn_billing_credits table and reflects all currently allowed fields including invoice reference, posting moderator, and status. Sensitive to internal SaaS billing policies and must not reveal privileged operational fields."},"IWrtnBillingInvoice.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_invoices","description":"DTO for creating a new enterprise billing invoice. Used by moderator actors to create invoices for enterprise customers in the Wrtn B2B SaaS platform. All required fields correspond to columns in the `wrtn_billing_invoices` table, enforcing atomic postpaid-cycle closing and strict auditability. This schema must be followed for any invoice creation request and does not permit modification of immutable fields such as invoice ID on creation. Optional fields use explicit null. Relations and collections (such as items/payments) are not included here. For the response or detail view schema, see IWrtnBillingInvoice.","properties":{"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"The unique identifier of the target enterprise (must exist in `wrtn_enterprises`). Required."},"period_start":{"type":"string","format":"date-time","description":"ISO 8601 UTC start of billing period (inclusive). Required."},"period_end":{"type":"string","format":"date-time","description":"ISO 8601 UTC end of billing period (exclusive). Required."},"total_amount":{"type":"number","description":"Non-negative invoice amount (USD/base currency). Reflects the sum of billable events minus credits for the billing period. Required."},"status":{"type":"string","description":"Status/state code for the invoice. Typically one of: 'draft', 'issued', or other business-defined status. Required."},"due_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Due date for payment (UTC). Optional, may be null. Used to enforce payment window."}},"required":["wrtn_enterprise_id","period_start","period_end","total_amount","status"]},"IWrtnBillingUsageEvent.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Current page number for paginated search. Used for pagination of usage event history."},"limit":{"type":"integer","minimum":1,"maximum":500,"description":"Number of records per page. Must be within 1~500 for controlled paging."},"enterprise_id":{"type":"string","format":"uuid","description":"Filter by enterprise ID (scopes results to a specific company)."},"team_id":{"type":"string","format":"uuid","description":"Filter by team ID within the enterprise."},"employee_id":{"type":"string","format":"uuid","description":"Filter by employee ID (personal usage only)."},"category":{"type":"string","description":"Filter by cost category, e.g., 'chat','procedure','file','support','notification','analytics', etc. Must be a supported system category."},"period_start":{"type":"string","format":"date-time","description":"Start of date/time window (inclusive) for usage event filtering (ISO 8601 UTC)."},"period_end":{"type":"string","format":"date-time","description":"End of date/time window (exclusive) for usage event filtering (ISO 8601 UTC)."},"min_token_usage":{"type":"integer","minimum":0,"description":"Minimum token usage threshold for filtering results. Only events with token_usage >= this value returned."},"max_token_usage":{"type":"integer","minimum":0,"description":"Maximum token usage threshold for filtering results. Only events with token_usage <= this value returned."},"source_id":{"type":"string","format":"uuid","description":"Filter for source business entity that generated the usage event, e.g., a specific chat session or procedure execution."},"sort_by":{"oneOf":[{"const":"occurred_at","description":"Sort field for results. Must be one of: 'occurred_at', 'token_usage', 'amount'."},{"const":"token_usage","description":"Sort field for results. Must be one of: 'occurred_at', 'token_usage', 'amount'."},{"const":"amount","description":"Sort field for results. Must be one of: 'occurred_at', 'token_usage', 'amount'."}],"description":"Sort field for results. Must be one of: 'occurred_at', 'token_usage', 'amount'."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed values: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction. Allowed values: 'asc' or 'desc'."}],"description":"Sort direction. Allowed values: 'asc' or 'desc'."}},"required":[],"description":"Request DTO for paginated, filterable enterprise billing usage event search. Supports filtering by time, cost category, actor, and usage threshold. Applies to wrtn_billing_usage_events records. Used for billing reports and financial audit."},"IWrtnBillingUsageEvent":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_usage_events","description":"Detailed representation of a single billing usage event, as recorded in the wrtn_billing_usage_events table. This object provides complete context for cost, audit, and compliance traceability, including references to enterprise, optional team and employee associations, the business cost category, source object linkage, token usage accounting, event cost, and precise timestamps. Intended for audit, drilling, billing review, and dispute workflows. All reference relationships (enterprise, team, employee, and source object) are included as named object references for comprehensive analysis. Does not include sensitive payment, credit, or system details. Conforms to Postpaid SaaS B2B financial event reporting, and must always reflect precisely the information at original event creation. Read-only; this object cannot be mutated via API.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the billing usage event. Primary key for tracing and referencing in all downstream financial, audit, and compliance workflows. Always a UUID in canonical lower-case format."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference object for the enterprise that incurred the usage event. Provides minimal business context such as enterprise name, code, and ID."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Reference to the enterprise team associated with this billing event, if applicable. Null when unscoped to team. Enables granular cost attribution and compliance filtering."},"employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Reference to the enterprise employee associated with this billing event, if applicable. Null when unscoped to employee (e.g., system or moderator-generated events). Critical for personal cost tracking and drilldown."},"category":{"type":"string","description":"Cost/billing event category. Indicates the business type of usage, such as 'chat', 'procedure', 'file', etc. Only known enum values are accepted. Used for reporting, rollup, and business policy enforcement."},"source":{"$ref":"#/components/schemas/IWrtnBillingUsageEventSourceReference","description":"Reference object describing the immediate business object that triggered or owns this usage event (e.g., chat session, procedure run, file, etc). Allows complete drill-down traceability in cost lineage and invoice reporting."},"token_usage":{"oneOf":[{"$ref":"#/components/schemas/IWrtnTokenUsage"},{"type":"null"}],"description":"Token usage details for this event, if relevant (e.g., for chat/procedure categories). Null or zero-filled if not applicable. Reflects the state at original event creation."},"amount":{"type":"number","description":"Cost incurred by this event (in USD or base currency). Always a positive value for billable events, negative for credit adjustments/corrections. Displayed in invoices and cost analytics."},"occurred_at":{"type":"string","format":"date-time","description":"DateTime this event was incurred (business event time, UTC, ISO 8601). Used for billing period cutoff and audit. NEVER mutated after original recording."},"created_at":{"type":"string","format":"date-time","description":"DateTime the event was recorded in the system (generally shortly after occurrence). Used for creation/audit tracking. Immutable after creation."}},"required":["id","enterprise","category","source","amount","occurred_at","created_at"]},"IWrtnBillingPayment.IRequest":{"type":"object","description":"Request body schema for advanced billing payment list, search, and filter operation (wrtn_billing_payments). Accepts full range of filter and pagination parameters for payment settlement records. All properties are optional and serve as filters or pagination controls in payment dashboards. Contains only whitelisted, secure properties for business usage. System reference DTO for payment list, management, or reconciliation screens. Does not support creation or mutation of payments.","properties":{"invoice_id":{"type":"string","format":"uuid","description":"Optional filter for payments by linked invoice ID. Restricts results to payments associated with the given invoice."},"enterprise_id":{"type":"string","format":"uuid","description":"Optional filter for enterprise. Returns payments related only to the specified company/tenant."},"moderator_id":{"type":"string","format":"uuid","description":"Optional filter to return only payments processed by a specific moderator/admin (actor for creation/settlement)."},"status":{"type":"string","description":"Optional filter by payment event status (e.g., 'pending','completed','failed','refunded'). Only known business enum values allowed."},"method":{"type":"string","description":"Optional filter for payment method used (bank, card, wire, refund, credit, etc). Only known business enum values allowed."},"period_start":{"type":"string","format":"date-time","description":"Start of date/time interval for filtering results (inclusive, UTC). Used for dashboard and finance report queries."},"period_end":{"type":"string","format":"date-time","description":"End of date/time interval for filtering (exclusive, UTC)."},"sort_by":{"type":"string","description":"Sorting key for payment records (e.g., amount, created_at). Only pre-approved fields accepted. Default: created_at ascending."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting direction for the sort key. Either 'asc' for ascending or 'desc' for descending."},{"const":"desc","description":"Sorting direction for the sort key. Either 'asc' for ascending or 'desc' for descending."}],"description":"Sorting direction for the sort key. Either 'asc' for ascending or 'desc' for descending."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number (starts at 1). Optional, default 1."},"limit":{"type":"integer","minimum":1,"maximum":1000,"description":"Maximum number of results to return per page (default varies by server policy, max 1000)."}},"required":[]},"IWrtnBillingUsageEventSourceReference":{"type":"object","description":"Reference to the source object (such as chat session, procedure run, file, etc) that triggered or owns this billing usage event. Used to trace business cost lineage precisely for reporting, audit, and compliance. Every billing event must be directly attributable to a root business object at runtime. Both values are required for downstream billing analytics, reporting, and invoice drill-down.\n\nValid `domain` values: 'chat', 'procedure', 'file'.\n\nExample: {\"id\":\"9ba67e3f-114e-4ca2-941f-d3679ade814d\",\"domain\":\"chat\"}","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID string) of the root business object (e.g. chat session, procedure session, file) that owns this usage event. This value must match a valid entity's ID in its respective domain. Used for cost attribution, root-cause analytics, and linking invoice events.\n\nExample: 9ba67e3f-114e-4ca2-941f-d3679ade814d"},"domain":{"type":"string","description":"Discriminator specifying the category of the source business object. Only accepts: 'chat', 'procedure', 'file'. Must match a system-defined domain for cost lineage grouping (no arbitrary values allowed).\n\nExample: 'chat' or 'procedure' or 'file'."}},"required":["id","domain"]},"IWrtnBillingCredit.IRequest":{"type":"object","properties":{"enterprise_id":{"type":"string","format":"uuid","description":"Filter for credits belonging to a specific enterprise. Use exact enterprise UUID as defined in wrtn_enterprises.id."},"moderator_id":{"type":"string","format":"uuid","description":"Filter by moderator who issued or managed the credit. Accepts UUID from wrtn_moderators.id."},"invoice_id":{"type":"string","format":"uuid","description":"Filter by credits linked to a particular invoice. Accepts UUID from wrtn_billing_invoices.id."},"category":{"type":"string","description":"Filter for a specific credit category (e.g., 'refund','overpayment','promo','manual','dispute'). Must match one of the allowed credit categories in the system."},"status":{"type":"string","description":"Filter for a business process status or settlement code as supported by financial workflows. Example: 'active','reversed','queued','deleted' (consult business dictionary for exact codes)."},"issued_after":{"type":"string","format":"date-time","description":"Filter for credits issued on or after this UTC timestamp (ISO8601 format)."},"issued_before":{"type":"string","format":"date-time","description":"Filter for credits issued on or before this UTC timestamp (ISO8601 format)."},"search":{"type":"string","description":"Keyword or free-text search against description, reason, moderator name, or enterprise name. Used for quick audit review or investigation."},"order_by":{"oneOf":[{"const":"issued_at","description":"Order results by one of: 'issued_at','amount','category','status'. Default is 'issued_at' descending."},{"const":"amount","description":"Order results by one of: 'issued_at','amount','category','status'. Default is 'issued_at' descending."},{"const":"category","description":"Order results by one of: 'issued_at','amount','category','status'. Default is 'issued_at' descending."},{"const":"status","description":"Order results by one of: 'issued_at','amount','category','status'. Default is 'issued_at' descending."}],"description":"Order results by one of: 'issued_at','amount','category','status'. Default is 'issued_at' descending."},"order_direction":{"oneOf":[{"const":"asc","description":"Choose ascending ('asc') or descending ('desc') order for the 'order_by' field. Default is 'desc'."},{"const":"desc","description":"Choose ascending ('asc') or descending ('desc') order for the 'order_by' field. Default is 'desc'."}],"description":"Choose ascending ('asc') or descending ('desc') order for the 'order_by' field. Default is 'desc'."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for paginated results. Starts at 1."},"limit":{"type":"integer","minimum":1,"maximum":200,"default":50,"description":"Maximum number of records per page. Defaults to 50; maximum is 200."}},"required":["page","limit"],"description":"Request parameters for querying and filtering a list of billing credits (credit events or adjustments) in the enterprise accounting system. Includes support for searching, sorting, pagination, and business-specific filters such as category, status, date range, moderator, and enterprise context. Fields map to columns or contextual business logic in the wrtn_billing_credits table and associated entities."},"IWrtnBillingInvoice.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_invoices","properties":{"id":{"type":"string","format":"uuid","description":"Unique invoice identifier, maps to wrtn_billing_invoices.id (primary key)."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise (company/tenant) associated with this invoice. FK: wrtn_billing_invoices.wrtn_enterprise_id. Links to enterprise summary."},"period_start":{"type":"string","format":"date-time","description":"Billing period start in ISO8601 UTC (inclusive). Corresponds to wrtn_billing_invoices.period_start."},"period_end":{"type":"string","format":"date-time","description":"Billing period end in ISO8601 UTC (exclusive). Corresponds to wrtn_billing_invoices.period_end."},"total_amount":{"type":"number","format":"double","description":"Total billed amount on this invoice, in USD (or base currency). Sourced from wrtn_billing_invoices.total_amount."},"status":{"type":"string","description":"Invoice status code (e.g., draft, issued, due, paid, overdue, disputed, cancelled). See wrtn_billing_invoices.status."},"created_at":{"type":"string","format":"date-time","description":"Invoice creation timestamp (UTC), from wrtn_billing_invoices.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp, wrtn_billing_invoices.updated_at."},"due_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When payment is due (if applicable/issued). wrtn_billing_invoices.due_at. Nullable."},"paid_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When payment was completed (if any). wrtn_billing_invoices.paid_at. Nullable."},"cancelled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When invoice was cancelled (if any)."},"disputed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When invoice was marked as formally disputed (if any)."},"items":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnBillingInvoiceItem.ISummary"},"description":"Invoice line items, each representing a billable event or cost category. Aggregates wrtn_billing_invoice_items, summary only."}},"required":["id","enterprise","period_start","period_end","total_amount","status","created_at","updated_at","items"],"description":"Summary representation of a billing invoice entity. Maps to wrtn_billing_invoices DB row, includes enterprise, period, and aggregate status/state for postpaid B2B SaaS billing. See wrtn_billing_invoice_items for itemization."},"IWrtnBillingCredit.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_credits","properties":{"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the enterprise to which the credit is applied. This field is required to associate the credit with the correct company account. It maps to the wrtn_billing_credits.wrtn_enterprise_id column in the database."},"amount":{"type":"number","minimum":0,"description":"Positive value of the credit being granted in invoice base currency (e.g., USD). This must be a positive number and represents the monetary amount being credited. Corresponds to wrtn_billing_credits.amount."},"category":{"type":"string","description":"Business-level reason for the credit. Allowed values include 'manual', 'refund', 'promo', 'overpayment', 'dispute', or 'reversal'. This categorizes the credit for audit and reporting. Maps to wrtn_billing_credits.category."},"reason":{"type":"string","description":"Human-readable reason for the credit, supporting audit, reporting, and customer transparency. This should provide sufficient detail for compliance. Corresponds to wrtn_billing_credits.reason."},"wrtn_billing_invoice_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional unique identifier (UUID) linking the credit directly to a specific invoice for offset. If the credit is meant to settle or adjust a particular invoice, this should be provided. Maps to wrtn_billing_credits.wrtn_billing_invoice_id."},{"type":"null"}],"description":"Optional unique identifier (UUID) linking the credit directly to a specific invoice for offset. If the credit is meant to settle or adjust a particular invoice, this should be provided. Maps to wrtn_billing_credits.wrtn_billing_invoice_id."}},"required":["wrtn_enterprise_id","amount","category","reason"],"description":"Request body for creating a new billing credit, following the business rules described in the operation and mapped directly to the wrtn_billing_credits schema. Required fields ensure minimum auditability and compliance. All fields are defined precisely following the database schema and operation requirements."},"IWrtnSupportTicket.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination page number (1-based). Limits which subset of results to return, defaults to 1 if omitted."},"limit":{"type":"integer","description":"Maximum number of records per page; recommended limits are 10–100. Used for pagination control, defaults to system setting if unspecified."},"sort_by":{"oneOf":[{"const":"created_at","description":"Specifies which field to order results by (e.g., created_at, updated_at, priority). Only whitelisted fields are allowed, matching business requirements."},{"const":"updated_at","description":"Specifies which field to order results by (e.g., created_at, updated_at, priority). Only whitelisted fields are allowed, matching business requirements."},{"const":"priority","description":"Specifies which field to order results by (e.g., created_at, updated_at, priority). Only whitelisted fields are allowed, matching business requirements."},{"const":"status","description":"Specifies which field to order results by (e.g., created_at, updated_at, priority). Only whitelisted fields are allowed, matching business requirements."}],"description":"Specifies which field to order results by (e.g., created_at, updated_at, priority). Only whitelisted fields are allowed, matching business requirements."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the chosen field: ascending or descending."},{"const":"desc","description":"Sort order for the chosen field: ascending or descending."}],"description":"Sort order for the chosen field: ascending or descending."},"search":{"type":"string","description":"Search term for full-text search on ticket subject or description. Enables case-insensitive keyword queries, partial match supported."},"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"Enterprise-scoped filtering. Only tickets from this enterprise are returned."},"wrtn_enterprise_team_id":{"type":"string","format":"uuid","description":"Restricts tickets to a specified team. If set, only tickets assigned to this team or submitted by its members are included."},"status_id":{"type":"string","format":"uuid","description":"Restricts to tickets with the given status; matches the wrtn_support_ticket_status_id in the ticket table."},"category_id":{"type":"string","format":"uuid","description":"Restricts to a given ticket category; matches the wrtn_support_ticket_category_id in the ticket table."},"submitter_employee_id":{"type":"string","format":"uuid","description":"Restricts to tickets submitted by this employee. Used for personal support dashboards."},"date_from":{"type":"string","format":"date-time","description":"UTC timestamp, filters for tickets created at or after this moment."},"date_to":{"type":"string","format":"date-time","description":"UTC timestamp, filters for tickets created before (not including) this moment."}},"required":["page","limit"],"description":"Query filter object for searching and retrieving support ticket summaries. Encapsulates all common search criteria, pagination, date filtering, and allows advanced field-level restriction suitable for both employee and moderator search scenarios. Matches the wrtn_support_tickets table and all related DTO mapping requirements for dashboard and list presentation."},"IWrtnSupportTicket":{"type":"object","x-autobe-prisma-schema":"wrtn_support_tickets","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the support ticket. Maps to the 'id' column in the wrtn_support_tickets table."},"subject":{"type":"string","description":"Short subject or title of the support ticket, uniquely identifying it within the enterprise. Maps to the 'subject' column in the wrtn_support_tickets table."},"description":{"type":"string","description":"Full description of the support issue, detailed by the submitter. Maps to the 'description' column in the wrtn_support_tickets table."},"priority":{"type":"string","description":"Ticket priority, such as 'low', 'normal', 'high', or 'urgent'. Maps to 'priority' in wrtn_support_tickets."},"locale":{"type":"string","description":"Locale/region code for internationalization/audit. E.g., 'en-US', 'ko-KR'. Maps to 'locale' in wrtn_support_tickets."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the ticket was created. Maps to 'created_at'."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the latest modification of the ticket. Maps to 'updated_at'."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if ticket is active. Corresponds to 'deleted_at'."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee who submitted the ticket. Maps from wrtn_employee_id (nullable if moderator-submitted)."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Moderator who submitted or managed the ticket. Maps from wrtn_moderator_id (nullable if employee-submitted)."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Team within the enterprise to which this ticket is scoped. May be null for company-level tickets."},"category":{"$ref":"#/components/schemas/IWrtnSupportTicketCategory.ISummary","description":"Category for the support ticket (e.g., 'incident', 'request', 'feedback')."},"status":{"$ref":"#/components/schemas/IWrtnSupportTicketStatus.ISummary","description":"Current processing status of the ticket (e.g., 'new', 'assigned', 'resolved')."},"origin_faq":{"oneOf":[{"$ref":"#/components/schemas/IWrtnFaq.ISummary"},{"type":"null"}],"description":"FAQ referenced by the ticket, if any. Can be null."},"attachments":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnSupportTicketAttachment"},"description":"List of files attached to the ticket (not replies), following support file policy."}},"required":["id","subject","description","priority","locale","created_at","updated_at","employee","team","category","status","attachments"],"description":"Detailed support ticket record, fully composed with relations to submitter (employee or moderator), team (if any), category, status, related FAQ, and all attached files. This schema is derived from the wrtn_support_tickets Prisma table with comprehensive relation mapping as per interface requirements."},"IWrtnSupportTicket.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_tickets","properties":{"subject":{"type":"string","description":"Ticket subject, must be unique per enterprise. Required at creation. Maps to 'subject'."},"description":{"type":"string","description":"Detailed description of the support ticket. Required at creation. Maps to 'description'."},"priority":{"type":"string","description":"Priority of the support request. Maps to 'priority' column. (e.g., 'low', 'normal', 'high', 'urgent')."},"locale":{"type":"string","description":"Locale/region code for internationalization/audit. Maps to 'locale' column."},"wrtn_support_ticket_category_id":{"type":"string","format":"uuid","description":"Reference to ticket category (wrtn_support_ticket_categories). Required."},"wrtn_support_ticket_status_id":{"type":"string","format":"uuid","description":"Reference to ticket status at creation (wrtn_support_ticket_statuses). Usually system default, but provided here for flexibility if enabled."},"wrtn_enterprise_team_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional team ID if the ticket is team-scoped. Set to null for company-level tickets."},"origin_faq_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to FAQ for context if provided. Optional and nullable."}},"required":["subject","description","priority","locale","wrtn_support_ticket_category_id","wrtn_support_ticket_status_id"],"description":"Request DTO for creating a new support ticket. Contains subject, description, priority, locale, category and status (as IDs), and optionally team and FAQ references. Actor and session are always determined from authentication context—not by explicit fields in this DTO. Only required for employees. Designed for atomic ticket creation in a single API call, enforcing unique subject per enterprise and linking to category and status."},"IWrtnSupportTicketCategory.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_categories","description":"Summary view of a support ticket category. Used for classification, routing, UI filtering, and analytics/KPI reporting in the support/helpdesk module. Category codes are unique and enable routing, automation, and reporting (e.g. 'incident', 'feature', 'billing'). The name and description provide context for agents and business rules. Typical usage: assigning categories to tickets for workflow, filtering, and dashboard breakdown. All fields are aligned with wrtn_support_ticket_categories schema.\n\nExamples:\n- code: 'incident' (for outage reports)\n- code: 'feature' (for feature requests)\n- code: 'billing' (for invoicing/payment issues)\n- name: 'Incident', 'Feature Request', 'Billing Issue'\n- description: 'Tickets related to platform outages, downtime, or urgent support'; 'Requests for new features'; 'All billing and subscription inquiries'","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the support category (wrtn_support_ticket_categories.id)."},"code":{"type":"string","description":"Short, unique code for the ticket category (e.g., 'incident', 'feature', 'billing'). Used in logic, automation, external integrations, and API routing."},"name":{"type":"string","description":"Display name for the category. User-facing string as shown in UIs, lists, and reports."},"description":{"type":"string","description":"Detailed explanation of the category's intended use, scope, and guidance for support staff/agents. May include examples, business rules, or documentation links."}},"required":["id","code","name","description"]},"IWrtnSupportTicketStatus.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_statuses","description":"Summary DTO for support ticket status. Used as a reference in ticket objects for interpreting current state in workflow automation, routing, SLA reports, and dashboards. The status code is an internal system value (e.g. 'new', 'assigned', 'resolved', 'closed') dictating ticket progress through the workflow. The label provides a human-readable description for UI display. The is_terminal flag (boolean) indicates if this status represents a terminal/closed state (e.g. resolved, closed, deleted) for compliance, auditing, and workflow completion logic. Used for routing, permissions, and reporting in the customer support system. All fields are derived from wrtn_support_ticket_statuses schema. Typical system-used codes: 'new', 'in_progress', 'resolved', 'closed', 'reopened'.","properties":{"id":{"type":"string","format":"uuid","description":"Status unique identifier (wrtn_support_ticket_statuses.id)."},"code":{"type":"string","description":"System/business code for this support ticket status (e.g., 'new', 'resolved', 'closed'). Used in workflow routing and business logic."},"label":{"type":"string","description":"Human-friendly display label for this ticket status (e.g., 'New', 'In Progress', 'Resolved', 'Closed'). Used in user interfaces and reports."},"is_terminal":{"type":"boolean","description":"Indicates if this status is a terminal (final/closed) state for support tickets. True if workflow ends here (e.g. 'resolved', 'closed'), false if further actions/transitions are allowed. Used for compliance, KPI reporting, and permission control."}},"required":["id","code","label","is_terminal"]},"IWrtnFaq.ISummary":{"type":"object","description":"Summary DTO for frequently asked question entity. Used for reference within support ticket, feedback, and feature request summary DTOs. Encapsulates only minimal identity and context info. Maps to wrtn_faqs.","x-autobe-prisma-schema":"wrtn_faqs","properties":{"id":{"type":"string","format":"uuid","description":"FAQ id."},"question":{"type":"string","description":"FAQ question. Expresses the question content as used for FAQ lists, lookups, and support dashboards."}},"required":["id","question"]},"IWrtnSupportTicketAttachment":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_attachments","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this support ticket attachment record. Corresponds to the primary key of the wrtn_support_ticket_attachments table. Used for audit, referencing, and retrieval within the support domain."},"ticket":{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary","description":"Reference to the support ticket with which this attachment is associated. Maps to the wrtn_support_tickets entity. Always present, enabling access control and business context retrieval. Returns summary data for the ticket."},"reply":{"oneOf":[{"$ref":"#/components/schemas/IWrtnSupportTicketReply.ISummary","description":"Reference to the specific reply (if any) with which this attachment is associated. If attached to a reply, provides summary data. Maps to wrtn_support_ticket_replies."},{"type":"null","description":"Null if attachment is associated directly to the ticket (top-level attachment, not linked to any reply)."}],"description":"Reference to the specific reply (if any) with which this attachment is associated. Nullable: if attached to ticket directly, this is null. Maps to wrtn_support_ticket_replies."},"file":{"$ref":"#/components/schemas/IWrtnAttachmentFile","description":"Detailed metadata for the attached file, including name, extension, url (tokenized/signed for security), size, and content type. Maps to wrtn_attachment_files and always populated."},"added_by_employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Enterprise employee who attached the file, if applicable. Maps to wrtn_enterprise_employees."},{"type":"null","description":"Null if file was attached by moderator."}],"description":"Enterprise employee who attached the file, if applicable; null if the file was added by moderator. Nullable as per business logic."},"added_by_moderator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Moderator who attached the file, if applicable. Maps to wrtn_moderators."},{"type":"null","description":"Null if file was attached by employee."}],"description":"Moderator who attached the file, if applicable; null if the file was added by employee. Nullable as per business logic."},"sequence":{"type":"integer","description":"Display ordering for attachments within ticket or reply. Lower numbers indicate earlier attachments. Corresponds to sequence field in wrtn_support_ticket_attachments table."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp for when the attachment association was created. Used for ordering, display, and audit trail. Maps to created_at in wrtn_support_ticket_attachments."}},"required":["id","ticket","file","sequence","created_at"],"description":"Represents a file attachment associated with a support ticket or a specific ticket reply. Provides metadata about the attached file, the context of the attachment (ticket/reply), who attached it, and sequencing/order for multiple attachments. Ensures strict auditability and data isolation as per support and compliance business rules. Synthesized from wrtn_support_ticket_attachments, wrtn_support_tickets, wrtn_attachment_files, and actor tables."},"IWrtnSupportTicket.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_tickets","properties":{"subject":{"type":"string","description":"Brief subject or title of the support ticket. Must be unique within the enterprise. If changed, business logic enforces uniqueness enforcement for the enterprise context. See wrtn_support_tickets.subject."},"description":{"type":"string","description":"Full description of the support ticket including all relevant details, context, and step to reproduce. Allows multiline text. See wrtn_support_tickets.description."},"priority":{"type":"string","description":"Priority assigned to the ticket for support operations. Typically 'low', 'normal', 'high', 'urgent'. Must conform to allowed values configured by the system. See wrtn_support_tickets.priority."},"wrtn_support_ticket_category_id":{"type":"string","format":"uuid","description":"Category ID to which this support ticket is being assigned. See wrtn_support_ticket_categories.id."},"wrtn_support_ticket_status_id":{"type":"string","format":"uuid","description":"Status ID reflecting the current/pending state for support workflow. Only valid transitions per business rule. See wrtn_support_ticket_statuses.id."},"locale":{"type":"string","description":"Locale or region code for this ticket (e.g., 'en-US'). Used for localization, reporting, and context. See wrtn_support_tickets.locale."},"wrtn_enterprise_team_id":{"type":"string","format":"uuid","description":"(Optional) Team ID within the enterprise to associate this ticket for context or routing. Null or omitted for company-wide tickets. See wrtn_support_tickets.wrtn_enterprise_team_id."},"origin_faq_id":{"type":"string","format":"uuid","description":"(Optional) If created from a FAQ suggestion, the referenced FAQ's id. Null or omitted otherwise. See wrtn_support_tickets.origin_faq_id."}},"required":[],"description":"Request body object for updating a support ticket. Contains only those fields which are mutable by employees or authorized moderators. Each property corresponds to a column in the wrtn_support_tickets table with descriptions reflecting validation rules and business usage. Note that subject must remain unique within the enterprise. The update operation supports modifications to subject, description, priority, category, status, locale, and optionally the associated team and FAQ reference. Immutable fields such as id, created_at, wrtn_employee_id, etc. must never be included here. Required fields are subject to business logic validation. All changes are audit-logged."},"IWrtnSupportTicketAssignment.IRequest":{"type":"object","properties":{"assigned_employee_id":{"type":"string","format":"uuid","description":"(Optional) Filter assignment results by this assigned employee's unique identifier. Used for advanced support operations and reporting. Maps to wrtn_support_ticket_assignments.assigned_employee_id."},"assigned_moderator_id":{"type":"string","format":"uuid","description":"(Optional) Filter assignment results by assigned moderator's unique identifier. Used for moderator assignment queries. Maps to wrtn_support_ticket_assignments.assigned_moderator_id."},"assigner_employee_id":{"type":"string","format":"uuid","description":"(Optional) Filter assignment records by employee who performed the reassignment. Maps to wrtn_support_ticket_assignments.assigner_employee_id."},"assigner_moderator_id":{"type":"string","format":"uuid","description":"(Optional) Filter assignment records by moderator who performed the assignment/reassignment. Maps to wrtn_support_ticket_assignments.assigner_moderator_id."},"assigned_after":{"type":"string","format":"date-time","description":"(Optional) Filter assignment history to only include records assigned after the specified UTC datetime. Used for pagination, time-scoped queries, and audit purposes."},"assigned_before":{"type":"string","format":"date-time","description":"(Optional) Filter assignment history to only include records assigned before the specified UTC datetime. Used for pagination, time-scoped queries, and audit purposes."},"sort_by":{"const":"assigned_at","description":"Sort order for assignment records. Currently only 'assigned_at' is supported."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction. One of 'asc' or 'desc'. Determines chronological order for assignment events."},{"const":"desc","description":"Sort direction. One of 'asc' or 'desc'. Determines chronological order for assignment events."}],"description":"Sort direction. One of 'asc' or 'desc'. Determines chronological order for assignment events."},"page":{"type":"integer","minimum":1,"description":"Page number for assignment history pagination. Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of assignment records to return per page. Maximum 100."}},"required":[],"description":"Search/filter/pagination parameters for retrieving support ticket assignment history. Supports advanced audit and troubleshooting scenarios for ticket assignment flows. All properties are optional, but at least one filter (or a page/limit) is recommended for large datasets. Properties correspond to indexed columns on wrtn_support_ticket_assignments and allow filtering by assigned actors, assigners, assignment window, and pagination."},"IWrtnSupportTicketAssignment.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_assignments","description":"Data transfer object for creating a new support ticket assignment record. This is used when a moderator or authorized enterprise employee assigns or reassigns a ticket to a moderator or employee. The assigner is always derived from the authenticated JWT session—never client-supplied, ensuring audit-trace security and correct business logic enforcement. The DTO enforces that exactly one of either assigned_employee_id or assigned_moderator_id must be provided. The assigner and session information is filled automatically by the backend context. Optional comment may be supplied to clarify or justify the reason for the assignment for compliance and SLA record keeping. Derived from API business requirement for internal/external ticket assignment operations. All field references are mapped directly to wrtn_support_ticket_assignments in the schema, except those that are contextually inferred.","properties":{"assigned_employee_id":{"type":"string","format":"uuid","description":"Identifier of the employee to whom the ticket is being assigned or reassigned. Supply this field for assigning to an enterprise employee. Mutually exclusive with assigned_moderator_id. Must correspond to an employee linked to the parent ticket's enterprise."},"assigned_moderator_id":{"type":"string","format":"uuid","description":"Identifier of the moderator (internal support staff) to whom the ticket is being assigned or reassigned. Supply this field for assigning to a moderator. Mutually exclusive with assigned_employee_id. Must correspond to an active moderator actor."},"comment":{"type":"string","description":"Optional explanatory comment or rationale for this assignment action. Used for audit trail, compliance, or communication with other agents. Not required."}},"required":["comment"]},"IWrtnSupportTicketAssignment":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_assignments","description":"Detailed record of a support ticket assignment event, including all business context and reference relations. Used for returning the result of assignment queries or after assignment creation. Contains references to the assigned actor (employee or moderator), assigner (employee or moderator, always determined from JWT context and audit), session context, assignment timestamp, comment, and full reference to the support ticket. Relationship objects are always included per business requirement for transparency and audit traceability. All mapping is derived from wrtn_support_ticket_assignments table, with relations mapped to summary forms of the referenced entities. Used in audit/compliance, SLA tracking, and for end-to-end support workflow visibility.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this assignment record; maps to wrtn_support_ticket_assignments.id."},"ticket":{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary","description":"Reference to support ticket summary for which this assignment was made."},"assignee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"$ref":"#/components/schemas/IWrtnModerator.ISummary"}],"description":"Actor (employee or moderator) that was assigned to handle the ticket. If the field is an employee object, it corresponds to the assigned_employee_id; if a moderator object, it corresponds to assigned_moderator_id."},"assigner":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"$ref":"#/components/schemas/IWrtnModerator.ISummary"}],"description":"Actor (employee or moderator) who performed this assignment action. Always filled from authenticated session context, not client-supplied."},"assigner_session":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeeSession.ISummary"},{"$ref":"#/components/schemas/IWrtnModeratorSession.ISummary"}],"description":"Session context of the assigner at the time of re/assignment; either an employee or moderator session, always provided for audit trail."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the assignment was performed; corresponds to assigned_at in DB."},"comment":{"type":"string","description":"Explanatory comment or rationale for assignment/reassignment, copied from the original creation request or mutation."}},"required":["id","ticket","assignee","assigner","assigner_session","assigned_at"]},"IWrtnSupportTicket.ISummary":{"type":"object","description":"Summary DTO for a customer support ticket. Covers minimal ticket identity, subject, actor/submitter, status, and timestamps, suitable for summary lists and reference in feedback or feature request flows; conforms to atomic operation principle and ISummary conventions. All fields have detailed business context explanations. For tickets submitted by a moderator rather than an employee, the 'employee' property will be null as signified in its description and type.","x-autobe-prisma-schema":"wrtn_support_tickets","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier (UUIDv4) for this support ticket. Maps to wrtn_support_tickets.id. Required for API and support operations; immutable once created."},"subject":{"type":"string","description":"Short subject or title for the support ticket. Provides human-readable context for ticket lists and search. Source: wrtn_support_tickets.subject. Required for all support tickets."},"status":{"$ref":"#/components/schemas/IWrtnSupportTicketStatus.ISummary","description":"Summary reference to the current ticket status object, such as 'new', 'assigned', 'resolved', etc. Embeds essential state and display info for clients and dashboards. Always present; maps to wrtn_support_ticket_statuses per business context and ticket workflow."},"employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Summary reference to the employee actor who submitted the ticket, or null if submitted by a moderator (rare). This field is null ONLY in cases where the ticket was created by a privileged moderator and no employee is associated. Consumers must check for null before dereferencing. Business context: employee-originated tickets always provide actor reference, moderator-originated tickets will leave this as null. Maps to wrtn_support_tickets.wrtn_employee_id foreign key."},"created_at":{"type":"string","format":"date-time","description":"UTC ISO 8601 timestamp indicating ticket creation time. Provided for audit, SLA, and chronological sorting. Maps to wrtn_support_tickets.created_at. Always present for all tickets."}},"required":["id","subject","status","employee","created_at"]},"IWrtnSupportTicketAssignment.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_assignments","properties":{"assigned_moderator_id":{"type":"string","format":"uuid","description":"Moderator user ID that will be assigned to this support ticket. Mutually exclusive with assigned_employee_id. Must reference an existing, active internal moderator. Only one of this or assigned_employee_id may be non-null in any valid update. Providing both or neither will trigger a validation/business logic error."},"assigned_employee_id":{"type":"string","format":"uuid","description":"Enterprise employee user ID that will be assigned to this support ticket. Mutually exclusive with assigned_moderator_id. Must reference an existing, active enterprise employee. Only one of this or assigned_moderator_id may be non-null in any valid update. Providing both or neither will trigger a validation/business logic error."},"comment":{"type":"string","description":"Optional human-readable comment or rationale for this assignment or reassignment of the ticket. Useful for compliance, audit-trail, support workflow context, or escalation tracking. May include free-form business or SLA reasoning. Not required but recommended for traceability."}},"description":"Mutation data for updating an assignment on a support ticket. Only one of assigned_moderator_id or assigned_employee_id may be non-null in a valid update; supplying both or neither is not permitted by business logic and will be rejected at runtime. The comment may supply additional audit or escalation context. All updates are strictly audit-logged and only permitted for moderator actors on open (non-terminal) tickets. All references must be valid user IDs. Schema structure is aligned with wrtn_support_ticket_assignments; see business logic for details. Partial update/PATCH semantics: only supplied fields will be updated; omitted fields remain unchanged.","required":[]},"IWrtnSupportTicketReply.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Current page number for pagination. Defaults to 1 if not specified."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of replies to return per page. Defaults to standard system value (e.g., 30). Maximum 100."},"sort_by":{"oneOf":[{"const":"created_at","description":"Optional sort field. Allowed: created_at, updated_at. Default is created_at descending."},{"const":"updated_at","description":"Optional sort field. Allowed: created_at, updated_at. Default is created_at descending."}],"description":"Optional sort field. Allowed: created_at, updated_at. Default is created_at descending."},"sort_direction":{"oneOf":[{"const":"asc","description":"Direction for sorting. Allowed: asc, desc. Default is desc."},{"const":"desc","description":"Direction for sorting. Allowed: asc, desc. Default is desc."}],"description":"Direction for sorting. Allowed: asc, desc. Default is desc."},"is_internal":{"type":"boolean","description":"When set true, restrict to internal notes only. When false, only public replies are included. If undefined, both types are returned."},"parent_reply_id":{"type":"string","format":"uuid","description":"Optional filter to only returns replies under a particular parent in thread, for navigating threaded discussions."}},"description":"Request parameters for searching, filtering, or paginating support ticket replies. This DTO is used for request bodies to list support ticket replies, supporting filters for internal/public, reply threading, pagination, and sorting. No direct access to ticket reference itself (provided by operation path param). Returns all replies matching the query filters, joined to author/attachment info as needed.","required":[]},"IWrtnSupportTicketReply":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_replies","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the reply. Matches wrtn_support_ticket_replies.id in the database."},"ticket":{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary","description":"Support ticket summary object to which this reply belongs. Represents FK wrtn_support_tickets, always present."},"author_employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee author of the reply, if present. Null if written by a moderator."},"author_moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Moderator author of the reply, if present. Null if written by an employee."},"parent_reply":{"$ref":"#/components/schemas/IWrtnSupportTicketReply.ISummary","description":"Parent reply (for threading), if this reply is a direct reply to another. May be null."},"is_internal":{"type":"boolean","description":"Whether this is an internal note (only visible to moderators/support staff). Employees create only public replies (false)."},"body":{"type":"string","description":"Reply message body. Supports markdown or rich text."},"attachments":{"type":"array","description":"File attachments linked to this reply. Files are centrally stored. Each attachment is referenced by file summary object.","items":{"$ref":"#/components/schemas/IWrtnAttachmentFile.ISummary"}},"created_at":{"type":"string","format":"date-time","description":"Timestamp when reply was created. Always in ISO 8601 (UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When (if) this reply was soft deleted; null if still active."}},"required":["id","ticket","body","is_internal","created_at"],"description":"A reply to a support ticket, including threading, authorship, message body, attachments, and internal/public visibility. Fully normalized to reference ticket and author objects. Used for both moderator and employee replies; only moderators may set is_internal=true. Attachments are returned as summary objects. Soft deletes are indicated by a non-null deleted_at timestamp. Maps directly to wrtn_support_ticket_replies table; see schema for full audit trail and FK/PK definitions."},"IWrtnSupportTicketReply.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_replies","properties":{"body":{"type":"string","description":"Body/content for the reply. Markdown or rich text accepted; cannot be empty."},"is_internal":{"type":"boolean","description":"If true, reply is marked as internal (visible only to moderators/support). **Only moderators may submit internal notes.** When submitted by an employee actor, this field is ignored or must be false; moderator context is enforced in backend business logic."},"parent_reply_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Parent reply ID if this is a threaded/nested reply. Null for top-level replies."},"attachment_file_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Array of file IDs to attach as files to this reply. Must reference existing wrtn_attachment_files.id."}},"required":["body","is_internal"],"description":"Request body for creating a support ticket reply. Contains reply body, internal/public flag, optional parent reply for threading/nesting, and set of file IDs for attachments. **Only moderators may submit internal notes (is_internal=true); employees must submit public (is_internal=false) replies.** The author and session identifiers are populated automatically from authentication context; never provided by client. Parent reply must be a reply within the same ticket. Attachments are added as references to current reply."},"IWrtnSupportTicketReply.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_replies","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the ticket reply."},"author_employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Reference to employee author of this reply, if applicable. **Exactly one of author_employee or author_moderator will be present and non-null for each reply** (never both). If set, reply was written by an employee and is always public (is_internal=false)."},"author_moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Reference to moderator author of this reply, if applicable. **Exactly one of author_employee or author_moderator will be present and non-null for each reply** (never both). If set, reply was written by a moderator and may be internal or public."},"created_at":{"type":"string","format":"date-time","description":"Reply creation timestamp."},"is_internal":{"type":"boolean","description":"True if the reply is internal (not visible to customer), false for public. **Internal replies are permitted ONLY for moderator-authored replies**; employee-authored replies are always public (is_internal=false)."}},"required":["id","created_at","is_internal"],"description":"Summary of a support ticket reply for context in attachment association. **Author is represented as either author_employee or author_moderator (never both or neither); exactly one is non-null for each reply.** Internal replies (is_internal=true) can only be authored by moderators, per business rule. Use this summary for embedding reply context in attachment, ticket, or thread listings."},"IWrtnAttachmentFile.ISummary":{"type":"object","description":"Summary DTO for a file in the attachment store. Contains identifier, name, extension, URL, and storage metadata. Used throughout the system anywhere file references are needed in API response summaries (e.g. support ticket attachment, chat session file, etc).","x-autobe-prisma-schema":"wrtn_attachment_files","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUIDv4) of the file"},"name":{"type":"string","description":"Original file name"},"extension":{"type":"string","description":"File extension (e.g., 'pdf', 'jpg')"},"url":{"type":"string","description":"Storage (protected S3) URL"},"created_at":{"type":"string","format":"date-time","description":"File creation/upload timestamp (ISO 8601)"}},"required":["id","name","extension","url","created_at"]},"IWrtnSupportTicketReply.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_replies","properties":{"body":{"type":"string","description":"The body content of the support ticket reply. This property represents the reply message itself, which can be edited if the actor has appropriate permissions. The body must comply with formatting and length requirements set by the business context. It is required for updates."},"is_internal":{"type":"boolean","description":"Indicates whether the reply is an internal-only note (true) or a public reply (false). Internal notes are only visible to moderators and never to customers. This property can only be modified by authorized moderators. Changing this property affects visibility of the reply within the support workflow."},"attachments":{"type":"array","description":"An array of attachment file IDs associated with this reply. This property allows users to add or update file attachments for the reply during the update operation. The array should contain only the identifiers of files that are already uploaded and pass access control. The actual file metadata is managed separately and not part of this update schema.","items":{"type":"string","format":"uuid","description":"Attachment file ID referencing a file in the attachment repository."}}},"required":["body"],"description":"Request to update the body and possibly internal/public status of a support ticket reply. Only body, is_internal, and attachments may be changed. Author and parent relationships are immutable. Field editability is enforced by permissions."},"IWrtnSupportTicketAttachment.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"The requested page number for paginated results. Defaults to 1 if not provided. Used to control which slice of the attachment list is returned."},"limit":{"type":"integer","description":"The maximum number of results to return per page for paginated queries. Enforced maximum by backend policy; typically between 10 and 100."},"file_type":{"type":"string","description":"If provided, restrict results to only attachments of the indicated file type (e.g., 'image', 'audio', 'pdf'). Accepted values and enforcement are governed by file management business rules."},"uploader_kind":{"oneOf":[{"const":"employee","description":"If specified, restricts results to attachments uploaded by the given actor kind. Must be one of: 'employee', 'moderator'. Used for filtering attachments based on the entity that performed the upload."},{"const":"moderator","description":"If specified, restricts results to attachments uploaded by the given actor kind. Must be one of: 'employee', 'moderator'. Used for filtering attachments based on the entity that performed the upload."}],"description":"If specified, restricts results to attachments uploaded by the given actor kind. Must be one of: 'employee', 'moderator'. Used for filtering attachments based on the entity that performed the upload."},"uploaded_after":{"type":"string","format":"date-time","description":"Optional filter to return only attachments uploaded after this ISO 8601 date-time (inclusive). Enables paging and time window queries for attachments audit."},"uploaded_before":{"type":"string","format":"date-time","description":"Optional filter to return only attachments uploaded before this ISO 8601 date-time (exclusive). Used to bound time range for audits or dashboard filtering."},"search":{"type":"string","description":"Optional term for free-text search on attachment metadata such as filename, extension, or uploader. Business logic defines supported search targets and normalizes input."},"sort":{"oneOf":[{"const":"created_at","description":"Sort ordering for attachment list. Must be one of: 'created_at' (by upload time) or 'sequence' (by explicit order on ticket/reply). Defaults based on view context if not provided."},{"const":"sequence","description":"Sort ordering for attachment list. Must be one of: 'created_at' (by upload time) or 'sequence' (by explicit order on ticket/reply). Defaults based on view context if not provided."}],"description":"Sort ordering for attachment list. Must be one of: 'created_at' (by upload time) or 'sequence' (by explicit order on ticket/reply). Defaults based on view context if not provided."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction for the order-by field. Must be 'asc' for ascending or 'desc' for descending. Defaults to 'asc' or 'desc' as per business logic or UI default."},{"const":"desc","description":"Sort direction for the order-by field. Must be 'asc' for ascending or 'desc' for descending. Defaults to 'asc' or 'desc' as per business logic or UI default."}],"description":"Sort direction for the order-by field. Must be 'asc' for ascending or 'desc' for descending. Defaults to 'asc' or 'desc' as per business logic or UI default."}},"required":[],"description":"Request parameters for searching, filtering, and paginating file attachments for a support ticket. Allows for complex queries including file type, uploader, time range, search term, sort key, and direction. No data is modified—this schema is strictly for query input."},"IWrtnSupportTicketAttachment.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_attachments","properties":{"file_id":{"type":"string","format":"uuid","description":"Unique identifier of the already-uploaded attachment file to associate with the support ticket. Must reference a record in wrtn_attachment_files. Required."},"reply_id":{"type":"string","format":"uuid","description":"If attaching to a specific reply, provide the reply's ID. Nullable if attaching directly to the ticket. References wrtn_support_ticket_replies."},"sequence":{"type":"integer","description":"Optional ordering for the attachment within the ticket or reply. Lower numbers indicate earlier attachments. If omitted, system assigns next available sequence."}},"required":["file_id"],"description":"Request schema for attaching an already-uploaded file to a support ticket or ticket reply. Requires the file_id of a valid, existing wrtn_attachment_file. Optionally may specify the related reply within the ticket and the sequencing of the attachment. Security and audit rules are enforced at the API and business logic levels. Synthesized for POST operations referencing wrtn_support_ticket_attachments."},"IWrtnSupportFeedback.IRequest":{"type":"object","properties":{"category":{"type":"string","description":"Feedback category or type. Used for classifying the kind of feedback reported by the employee, e.g., 'incident', 'request', 'feedback', or other business-defined categories as configured. Filters feedback by business type for targeted analysis and support reviews."},"search":{"type":"string","description":"Text content keyword or phrase to search within feedback, such as free-form text in employee submissions. May use full-text search or simple substring matching depending on implementation."},"created_from":{"type":"string","format":"date-time","description":"Start date of the creation date range filter (inclusive). Filters feedback created after or on this date (ISO 8601 date-time)."},"created_to":{"type":"string","format":"date-time","description":"End date of the creation date range filter (inclusive). Filters feedback created before or on this date (ISO 8601 date-time)."},"faq_id":{"type":"string","format":"uuid","description":"Feedback is associated to the specific FAQ ID (wrtn_faqs.id). When provided, filters to feedback referencing this FAQ. Use for targeted issue analysis or FAQ improvement."},"documentation_id":{"type":"string","format":"uuid","description":"Feedback is associated to the specific documentation ID (wrtn_documentations.id). Filters to those that reference this documentation for contextual reviews/tuning."},"ticket_id":{"type":"string","format":"uuid","description":"Feedback is associated to a support ticket (wrtn_support_tickets.id). Enables focused filtering of feedback connected to known support issues."},"employee_id":{"type":"string","format":"uuid","description":"Filters feedback submitted by a specific employee (wrtn_enterprise_employees.id). Employee-level filter is available only for authorized actors such as moderators."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination, 1-based indexing. Defaults to 1 if not provided."},"page_size":{"type":"integer","minimum":1,"maximum":100,"description":"Number of items per page for pagination. Implementation may enforce upper bound such as 100."}},"required":[],"description":"Query parameters for searching support feedback records. Allows filtering by category, keyword, creation date range, associated FAQ, documentation, ticket, and employee identity. Includes pagination parameters. Only employees with proper authorization may use employee_id or view cross-employee records."},"IWrtnSupportFeedback":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feedbacks","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the support feedback record, mapped directly from wrtn_support_feedbacks.id. Required for all feedback records."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee who submitted this feedback entry. Object reference; must not be null. Mapped from wrtn_support_feedbacks.wrtn_enterprise_employee_id."},"category":{"type":"string","description":"Business category for the feedback, e.g., 'incident', 'request', 'feedback', or another business-defined value. Must comply with system-defined feedback categories. Example: incident, request, suggestion, bug, praise, complaint."},"detail":{"type":"string","description":"The full feedback text provided by the user. May include detailed description, suggestion, praise, or complaint. Typical max length: 2000. Should avoid sensitive or non-business language."},"faq":{"oneOf":[{"$ref":"#/components/schemas/IWrtnFaq.ISummary"},{"type":"null"}],"description":"Reference to FAQ (object) if feedback is about/linked to an FAQ. Nullable if not linked or if not relevant."},"documentation":{"oneOf":[{"$ref":"#/components/schemas/IWrtnDocumentation.ISummary"},{"type":"null"}],"description":"Reference to documentation (object) if feedback concerns documentation. Nullable if not linked or not relevant."},"ticket":{"oneOf":[{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary"},{"type":"null"}],"description":"Reference to support ticket (object) if feedback is tied to a specific ticket. Nullable if there is no relevant support ticket."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 date-time when this feedback was submitted. Used for audit and reporting."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp (ISO 8601, or null if not deleted yet); date-time when this feedback was deleted. Used for audit, compliance, and business retention. Always null unless feedback is deleted."}},"required":["id","employee","category","detail","created_at"],"description":"Detailed support feedback record capturing all key properties from wrtn_support_feedbacks, including references to employee, FAQ, documentation, and support ticket. This object enforces object-or-null for sub-entity references, and nullable soft-delete field for full business lifecycle support. Used for endpoints requiring full feedback detail or drill-down."},"IWrtnDocumentation.ISummary":{"type":"object","description":"Summary DTO for an internal documentation or help article, used for lightweight references in feedback, support feature requests, and other audit/compliance workflows. This summary must enable unique identification and title-based lookup of documentation in external records (such as employee feedback, support tickets, or analytics). It is designed for embedding as a reference within other DTOs and is not the main documentation content view. Acceptable use cases include feedback DTO references, cross-entity documentation linkage for analytics, and compliance linking. Maps to wrtn_documentations, using id, slug, and title fields for summary navigation.","x-autobe-prisma-schema":"wrtn_documentations","properties":{"id":{"type":"string","format":"uuid","description":"Documentation id."},"slug":{"type":"string","description":"Documentation human-friendly business slug (URL/unique per enterprise). Enables quick navigation/linking in the API domain."},"title":{"type":"string","description":"Documentation article title for lookup, cross-referencing in feedback, and lightweight embedding in related entities."}},"required":["id","slug","title"]},"IWrtnSupportFeedback.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feedbacks","properties":{"category":{"type":"string","description":"Feedback category selected by the employee, such as UX, reliability, pricing, onboarding, or other categories defined in business requirements. Value must conform to allowed feedback categories in the business context and database schema."},"detail":{"type":"string","description":"Detailed feedback text provided by the employee. This should contain suggestions, compliments, criticisms, or other feedback. Must meet length, format, and content policies as defined by business requirements and system validation rules."},"wrtn_faq_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional FAQ ID related to this feedback. References wrtn_faqs.id. Null if not related to any FAQ."},{"type":"null"}],"description":"Optional FAQ ID related to this feedback. References wrtn_faqs.id. Null if not related to any FAQ."},"wrtn_documentation_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional documentation ID for context/reference. References wrtn_documentations.id. Null if no documentation is referenced."},{"type":"null"}],"description":"Optional documentation ID for context/reference. References wrtn_documentations.id. Null if no documentation is referenced."},"wrtn_support_ticket_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional support ticket ID if this feedback refers to a specific ticket/experience. References wrtn_support_tickets.id. Null if not related to any ticket."},{"type":"null"}],"description":"Optional support ticket ID if this feedback refers to a specific ticket/experience. References wrtn_support_tickets.id. Null if not related to any ticket."}},"required":["category","detail"],"description":"Information required to create a new support feedback entry, including mandatory feedback category and detail, with optional references to FAQ, documentation, or support ticket. The authenticated employee context is automatically handled by the business backend and not included in the DTO. All fields are validated according to Prisma schema, business, and compliance rules."},"IWrtnSupportFeedback.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feedbacks","properties":{"category":{"type":"string","description":"Feedback category that may be updated by the feedback author. Must conform to allowable feedback categories as defined by business and compliance rules."},"detail":{"type":"string","description":"Detailed feedback text that can be modified by the author. Subject to content, formatting, and length validations."},"wrtn_faq_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional FAQ ID reference. If updated, must correspond to a valid FAQ. Null to clear the existing reference."},{"type":"null"}],"description":"Optional FAQ ID reference. If updated, must correspond to a valid FAQ. Null to clear the existing reference."},"wrtn_documentation_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional documentation ID reference. If updated, must correspond to a valid documentation entry. Null to clear."},{"type":"null"}],"description":"Optional documentation ID reference. If updated, must correspond to a valid documentation entry. Null to clear."},"wrtn_support_ticket_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional support ticket ID reference. If updated, must correspond to a valid support ticket. Null to clear."},{"type":"null"}],"description":"Optional support ticket ID reference. If updated, must correspond to a valid support ticket. Null to clear."}},"required":[],"description":"Fields permitted for update in an existing support feedback record. Only the author can update their own feedback entry. Any field that is not set will remain unchanged. All updates are validated for business, compliance, and audit requirements. The employee and original ownership information is immutable and not included here."},"IWrtnSupportFeatureRequest.IRequest":{"type":"object","description":"DTO for advanced filtering and search parameters when retrieving paginated/filtered lists of feature requests (wrtn_support_feature_requests). Used in PATCH operations for moderators and employees searching feature requests. Enables search by title, status, creator, period, and supports pagination, sorting, and business constraints. Includes only query and filter parameters; does not represent the entity itself.","properties":{"page":{"type":"integer","description":"Which page of paginated results to return. Optional; default depends on system defaults or client preference. Used for paginated browsing of feature request results."},"limit":{"type":"integer","description":"Maximum number of items to include per page of results, for pagination. Optional; server may enforce an absolute maximum. Used to control response size during feature request searches."},"title":{"type":"string","description":"(Optional) Filter: substring or token search for feature request titles. Case-insensitive and supports partial matches for employee or moderator search operations."},"status":{"type":"string","description":"(Optional) Filter: feature request status to restrict the search to a particular state (e.g., 'open', 'under_review', 'planned', 'rejected', 'released'). Only valid status values as defined in business logic are allowed."},"creator_employee_id":{"type":"string","format":"uuid","description":"(Optional) Filter: restrict results to feature requests created by this enterprise employee. Only feature requests belonging to this creator will be included. UUID string matching wrtn_enterprise_employees.id."},"created_since":{"type":"string","format":"date-time","description":"(Optional) Filter: ISO 8601 UTC start timestamp to include only feature requests created at or after this date/time."},"created_until":{"type":"string","format":"date-time","description":"(Optional) Filter: ISO 8601 UTC end timestamp to include only feature requests created at or before this date/time."},"sort_by":{"type":"string","description":"(Optional) Field to sort results by, such as 'created_at', 'title', or 'status'. Only allow whitelisted fields approved for business/UX; must match field names in feature request summary DTO."},"sort_direction":{"oneOf":[{"const":"asc","description":"(Optional) Sorting direction: 'asc' for ascending or 'desc' for descending. Default is 'desc' for most use cases (recent first)."},{"const":"desc","description":"(Optional) Sorting direction: 'asc' for ascending or 'desc' for descending. Default is 'desc' for most use cases (recent first)."}],"description":"(Optional) Sorting direction: 'asc' for ascending or 'desc' for descending. Default is 'desc' for most use cases (recent first)."}},"required":[]},"IWrtnSupportFeatureRequest":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feature_requests","description":"Represents the complete feature request entity for the Wrtn Enterprise customer support system. This object models an employee-submitted suggestion or request for a new feature or product improvement. It is mapped to the wrtn_support_feature_requests table, capturing key metadata, submission rationale, business context, and references to related documentation, tickets, and votes. Response DTO in detail view / after create or update. All properties are documented with business context and audit support.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUIDv4) of the feature request. Maps to wrtn_support_feature_requests.id in Prisma schema. Used to address and reference specific feature requests in all business contexts."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Authoring employee (submitter), mapped as object reference. This replaces the raw FK employee_id and provides summary context about the submitting enterprise staff member."},"title":{"type":"string","description":"Short, unique summary title for the feature request. Required and validated for uniqueness within the enterprise. Describes the main goal or topic of the request."},"summary":{"type":"string","description":"Extended summary or business rationale stating the motivation, benefit, and target of the requested feature/improvement. Required on submission. Used for roadmap, product impact, and auditability."},"status":{"type":"string","description":"Current workflow state for this feature request (e.g., 'open', 'under_review', 'planned', 'rejected', 'released'). May only take business-enumerable values. Indicates the current position in the product management process."},"vote_count":{"type":"integer","description":"Total count of employees or stakeholders who have voted for/expressed interest in this feature request. Used for aggregation, analytics, and prioritization. Derived from feature votes table; not directly modifiable."},"related_ticket":{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary","description":"Summary information for the related customer support ticket, if present. Nullable. Allows cross-linking context between feedback, feature requests and support flow. Represents wrtn_support_tickets.id reference."},"related_faq":{"$ref":"#/components/schemas/IWrtnFaq.ISummary","description":"Summary information for a related FAQ entry if this feature request is associated with/derived from an FAQ. Nullable. Maps to wrtn_faqs.id."},"related_documentation":{"$ref":"#/components/schemas/IWrtnDocumentation.ISummary","description":"Summary information for related documentation entry if present. Nullable. Provides product and business context for the request."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601 UTC) of feature request creation for audit, compliance, and business reporting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601 UTC) of last update to this entry. Changes when title/summary/status or references are modified."}},"required":["id","employee","title","summary","status","vote_count","created_at","updated_at"]},"IWrtnSupportFeatureRequest.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feature_requests","properties":{"title":{"type":"string","description":"Unique, business reasoned, employee-submitted title for this feature request. This must be unique among all feature requests in the enterprise, and duplicates are rejected at the business rule layer. Mapped to the 'title' column in wrtn_support_feature_requests. Required."},"summary":{"type":"string","description":"Detailed business summary/rationale for the feature, explaining its benefit, business need, or use case. Used for product roadmap aggregation, customer success analysis, and business communication. Required."},"status":{"type":"string","description":"Initial status for the feature request (typically 'open'). Mapped to 'status' in wrtn_support_feature_requests table. Required. Allowed values and state machine are enforced in business logic."},"wrtn_support_ticket_id":{"type":"string","format":"uuid","description":"Optional FK to a related support ticket ID – refers to wrtn_support_tickets.id when this feature is related to, or originated from, a support ticket. Must be a valid UUID string. Optional."},"wrtn_faq_id":{"type":"string","format":"uuid","description":"Optional FK to a related FAQ ID – refers to wrtn_faqs.id if the feature request is based on or related to prior knowledge center content. Must be a valid UUID string. Optional."},"wrtn_documentation_id":{"type":"string","format":"uuid","description":"Optional FK to a related documentation ID. Used when the feature request provides context referencing enterprise product documentation or onboarding content. Must be a valid UUID string. Optional."}},"required":["title","summary","status"],"description":"Request DTO to create a new feature request (wrtn_support_feature_requests) for submission by enterprise employees. All author, enterprise, and creation audit fields are filled automatically from authentication context and are never accepted from the client. Title must be unique, summary must provide business rationale. Initial status is typically 'open'. Optional references are accepted for context (support ticket, FAQ, documentation)."},"IWrtnSupportFeatureRequest.IUpdate":{"type":"object","description":"Update DTO for modifying existing feature requests (wrtn_support_feature_requests). Used in PUT operations for employees to update their own requests. Allows changing title, summary, status, and optionally related ticket/FAQ/documentation references. Partial update: only provided fields are changed. All updates must comply with business validation and type safety.","x-autobe-prisma-schema":"wrtn_support_feature_requests","properties":{"title":{"type":"string","description":"Update the short, unique title of the feature request. Must remain unique within the enterprise. Omitted if no change."},"summary":{"type":"string","description":"Updates the business summary/rationale for the feature request. Omitted if no change."},"status":{"type":"string","description":"Updates the workflow/business status of the feature request (e.g., open, under_review, planned, released, rejected). Omitted if no change. Allowed values and transitions enforced by business logic."},"wrtn_support_ticket_id":{"type":"string","format":"uuid","description":"Optionally updates the related support ticket ID if new ticket association is added, or replaces prior reference. Omitted if no change."},"wrtn_faq_id":{"type":"string","format":"uuid","description":"Optionally updates the related FAQ ID. Omitted if no change."},"wrtn_documentation_id":{"type":"string","format":"uuid","description":"Optionally updates the related documentation ID. Omitted if no change."}},"required":[]},"IWrtnSupportFeatureVote.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination when listing feature request votes. Required for paginating through large sets of votes efficiently."},"limit":{"type":"integer","description":"Maximum number of records to return per page for vote listings. Used for pagination size control and performance."},"search":{"type":"string","description":"A keyword or search term for filtering votes by contextual details, such as employee name or other textual metadata, if applicable for feature request vote queries."},"order_by":{"oneOf":[{"const":"created_at","description":"Field by which to sort the votes result set. Typically by creation time or employee. Only the allowed enum values are supported."},{"const":"employee","description":"Field by which to sort the votes result set. Typically by creation time or employee. Only the allowed enum values are supported."}],"description":"Field by which to sort the votes result set. Typically by creation time or employee. Only the allowed enum values are supported."},"order_dir":{"oneOf":[{"const":"asc","description":"Sort direction for the order_by field; either ascending or descending."},{"const":"desc","description":"Sort direction for the order_by field; either ascending or descending."}],"description":"Sort direction for the order_by field; either ascending or descending."}},"required":["page","limit"],"description":"DTO for querying and paginating feature request votes. Contains fields for page number, page size limit, optional text search/filter, and explicit sorting fields according to enterprise voting analytics needs. Used by both moderators and employees to retrieve lists of votes for further audit, feedback aggregation, and feature roadmap management."},"IWrtnSupportFeatureVote":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feature_votes","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the feature request vote record. Directly maps to the wrtn_support_feature_votes.id column. Required for uniquely referencing each vote."},"feature_request":{"$ref":"#/components/schemas/IWrtnSupportFeatureRequest.ISummary","description":"Summary object for the feature request that this vote is associated with. Provides high-level information about the feature for traceability, context, and UI rendering. Follows ISummary relation mapping convention."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary object for the employee actor who cast this vote. Enables audit and feedback aggregation at the employee level. Provides essential context for analytics, compliance, and governance."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) of when the vote was cast. Maps to wrtn_support_feature_votes.created_at in the database."}},"required":["id","feature_request","employee","created_at"],"description":"Represents a single vote on a feature request in WrtnEnterprise. Used for both moderator and employee voting history, analytics, transparency, and compliance. Contains summary references for both the voted feature request and the employee/voter, with voting timestamp for full audit trail."},"IWrtnSupportFeatureRequest.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feature_requests","description":"Summary view of a support feature request. Represents a user-submitted request for new functionality or platform improvement. Contains title, status, relationship to the author, and aggregation stats for voting/roadmap display.\n\nThis schema is used for feature request lists, statistics, and voting UIs. Each feature request is linked to its author and submits essential properties for roadmap planning and communication.","properties":{"id":{"type":"string","format":"uuid","description":"Identifier of the feature request (wrtn_support_feature_requests.id)."},"title":{"type":"string","description":"Title of the feature request."},"status":{"type":"string","description":"Current state in the feature workflow (open, under_review, planned, rejected, released, etc)."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee who submitted the feature request."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 creation time."}},"required":["id","title","status","employee","created_at"]},"IWrtnSupportFeatureVote.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feature_votes","properties":{"wrtn_support_feature_request_id":{"type":"string","format":"uuid","description":"Unique identifier of the feature request to be voted on. This references the wrtn_support_feature_requests.id field in the database. The value must be provided as a UUID string and must refer to an existing feature request. Records the context of the voting action."}},"required":["wrtn_support_feature_request_id"],"description":"DTO used to create a new vote for a feature request. Used by an employee or moderator to register support/interest in a specific enterprise feature request. The actor (employee or moderator) is determined from the authentication context (JWT), not by any field in this DTO. This enforces that only authenticated actors can create votes for feature requests. Uniqueness for (feature_request_id, actor_id) is enforced at the business logic and DB layer. This type aligns with regulatory and audit requirements for traceability. Maps to the wrtn_support_feature_votes table."},"IWrtnSupportTicketCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination when searching/filtering ticket categories. Must be >= 1. Optional; if omitted, defaults to the first page. Used by moderators and admins for list navigation."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of category records per page (pagination). Must be between 1 and 200, inclusive. Optional; default is system-configured (typically 50). Used to control result set size in list operations."},"search":{"type":"string","maxLength":100,"description":"Query string for filtering categories by code, name, or description. Case-insensitive and supports partial matches via backend full-text search. Optional text input used by moderators to quickly find relevant support ticket categories."},"order_by":{"oneOf":[{"const":"code","description":"Field by which to sort the result list. Supported values are 'code', 'name', and 'description'. Used for custom sort order in admin list/search displays. If omitted, default sort is by 'name' ascending."},{"const":"name","description":"Field by which to sort the result list. Supported values are 'code', 'name', and 'description'. Used for custom sort order in admin list/search displays. If omitted, default sort is by 'name' ascending."},{"const":"description","description":"Field by which to sort the result list. Supported values are 'code', 'name', and 'description'. Used for custom sort order in admin list/search displays. If omitted, default sort is by 'name' ascending."}],"description":"Field by which to sort the result list. Supported values are 'code', 'name', and 'description'. Used for custom sort order in admin list/search displays. If omitted, default sort is by 'name' ascending."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction. Must be either 'asc' for ascending or 'desc' for descending. Used in conjunction with 'order_by' to determine category list order. Optional, defaults to 'asc'."},{"const":"desc","description":"Sort order direction. Must be either 'asc' for ascending or 'desc' for descending. Used in conjunction with 'order_by' to determine category list order. Optional, defaults to 'asc'."}],"description":"Sort order direction. Must be either 'asc' for ascending or 'desc' for descending. Used in conjunction with 'order_by' to determine category list order. Optional, defaults to 'asc'."}},"required":[],"description":"DTO for querying, filtering, and paginating support ticket categories in the help desk module. Supports search (by code, name, description), sorting (order_by & order), and result pagination. Used by moderators for efficient category administration and compliance review. Validation is applied on page/limit ranges and searchable text length. No direct database table mapping; parameters are used to construct flexible list queries."},"IWrtnSupportTicketCategory":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_categories","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the support ticket category. This corresponds to the primary key 'id' in wrtn_support_ticket_categories and is used to reference a specific category throughout the support and ticketing system."},"code":{"type":"string","description":"Short internal code for the support ticket category (e.g., 'incident', 'feature', 'billing'). Must be unique and is intended for use in API payloads, workflow routing, and system logic. Corresponds to 'code' column in wrtn_support_ticket_categories."},"name":{"type":"string","description":"Human-readable name for this support ticket category. Used for displaying category options in UIs, analytics reports, and support dashboards. Must be unique among all categories. Maps to 'name' column in wrtn_support_ticket_categories."},"description":{"type":"string","description":"Detailed explanation of the category's intended use, scope, and guidance for support staff. Useful for documentation, detailed reporting, and clarity for administrators. Maps to the 'description' field in wrtn_support_ticket_categories."}},"required":["id","code","name","description"],"description":"Represents a master support ticket category as defined in wrtn_support_ticket_categories. Used for ticket classification, workflow routing, SLA logic, and analytics. This is core administrative data and should be referenced throughout the support module for reporting, ticket creation/editing, and dashboard configuration. All properties correspond directly to the columns in wrtn_support_ticket_categories. Unauthorized changes to this object are strictly prohibited for compliance and consistency."},"IWrtnSupportTicketCategory.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_categories","properties":{"code":{"type":"string","description":"Short internal code for the support ticket category. Must be unique system-wide (see 'code' in wrtn_support_ticket_categories). Used in API, system routing, and business logic. Example: 'incident', 'feature', 'billing'."},"name":{"type":"string","description":"Display name for the support ticket category. Must also be unique. Used in all user interfaces and reports. Example: 'Incident', 'Feature Request', 'Billing Inquiry'."},"description":{"type":"string","description":"Extended explanation of the category's intended use and scope. Provides guidance for routing, documentation, and analytics. Example: 'Used for all platform downtime or system-critical support requests.'"}},"required":["code","name","description"],"description":"Request structure for creating a new support ticket category in wrtn_support_ticket_categories. All properties must be provided and must pass uniqueness validation for code and name. Upon creation, this record will be used for ticket classification, routing, and reporting throughout the system. This DTO should be used only by actors with moderator privileges."},"IWrtnSupportTicketCategory.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_categories","description":"Update Data Transfer Object for the support ticket category entity in the CustomerSupport domain. This DTO is used for updating the name and description of an existing ticket category via PATCH/PUT operations. Maps directly to the wrtn_support_ticket_categories table for authorized moderator updates. Audit logs should be tracked for all changes.","properties":{"name":{"type":"string","description":"The new or updated name for the support ticket category. This value must be unique across all categories. It represents the display name shown in support tools and UI lists. Changing the name clarifies the business meaning of a category for tickets. Sourced from and maps to wrtn_support_ticket_categories.name."},"description":{"type":"string","description":"The updated description providing additional context for this category. It is typically shown in administrative configuration UIs to guide support admin or moderator assignment, and can be shown in help/documentation. Maps to wrtn_support_ticket_categories.description."}},"required":["name","description"]},"IWrtnSupportTicketStatus.IRequest":{"type":"object","description":"DTO for searching, filtering, and listing support ticket statuses as defined in wrtn_support_ticket_statuses. Used by moderator/admin UI for catalogue and reporting configuration. Allows pagination, code/label filtering, and text search. Does NOT expose transactional ticket or user data, only metadata. No x-autobe-prisma-schema as this is a query/filter parameter object, not a DB row record.","properties":{"code":{"type":"string","description":"Exact code value of the ticket status for filtering. If specified, only the status with this code is returned. This is an optional filter."},"label":{"type":"string","description":"Free-text or exact label to filter ticket statuses by display name. Allows searching for statuses by human-readable label. Optional."},"is_terminal":{"type":"boolean","description":"Optional filter for status terminalness. If specified as true, only statuses which are terminal (end states) are returned; false for non-terminal. Useful for reporting or status workflow configuration."},"search":{"type":"string","description":"Global free-text search over code and label fields. If specified, performs a case-insensitive search. Useful for UI autocomplete or search boxes.","minLength":1},"page":{"type":"integer","description":"Pagination control: which page of results to return. Pages are 1-indexed. Defaults to 1 if not specified.","minimum":1},"limit":{"type":"integer","description":"Number of ticket status records to return per page. Defaults to a system configured value if not specified. Must be positive and within allowed maximum.","minimum":1},"order_by":{"oneOf":[{"const":"code","description":"Field to sort results by. Allows either 'code' or 'label'. Optional. Default order is system-defined."},{"const":"label","description":"Field to sort results by. Allows either 'code' or 'label'. Optional. Default order is system-defined."}],"description":"Field to sort results by. Allows either 'code' or 'label'. Optional. Default order is system-defined."},"order":{"oneOf":[{"const":"asc","description":"Sort direction for results, either 'asc' or 'desc'. Optional. Default is ascending."},{"const":"desc","description":"Sort direction for results, either 'asc' or 'desc'. Optional. Default is ascending."}],"description":"Sort direction for results, either 'asc' or 'desc'. Optional. Default is ascending."}},"required":[]},"IWrtnSupportTicketStatus":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_statuses","description":"Support ticket status entity for tracking individual workflow steps within the customer support system. Each record is uniquely identified by its UUID and provides the system code (used for referencing the status in APIs/business rules), the display label (human-friendly name), and a terminal flag (boolean) indicating whether this status marks a ticket as terminal (final/closed) or is part of an ongoing workflow. This object is central to moderator-facing administrative UI, workflow automation, and configuration reporting, but never directly exposed to end users or employees. All updates and retrievals are strictly authenticated for moderator actors only. Data returned is statically scoped to the status definition and never reveals user/ticket operational data. Fields and constraints mirror the wrtn_support_ticket_statuses table as defined in the database with full audit and compliance traceability.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the support ticket status. Mirrors the 'id' column in the wrtn_support_ticket_statuses table and is used for primary reference in status-related API operations, workflow logic, and moderator UI. Required and immutable."},"code":{"type":"string","description":"System code for the support ticket status. This is a unique string used by workflow automation, API requests, and integrations to refer to this particular status (e.g., 'new', 'assigned', 'closed', etc). Mirrors the 'code' column in wrtn_support_ticket_statuses and must be unique."},"label":{"type":"string","description":"Display label for the support ticket status. This value is shown to moderators, agents, and in administrative dashboards as a human-readable representation of the workflow status. Must be unique across all statuses. Mirrors the 'label' column in wrtn_support_ticket_statuses."},"is_terminal":{"type":"boolean","description":"Indicates whether this status is a terminal/final/closed state for a support ticket. If true, tickets with this status cannot transition further without reopening. Mirrors the 'is_terminal' boolean column in wrtn_support_ticket_statuses."}},"required":["id","code","label","is_terminal"]},"IWrtnSupportTicketStatus.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_statuses","description":"API request body schema for creating a new support ticket status in the support system. This DTO defines the properties required to initialize a new status step in the ticket workflow. Requires a unique system code, a unique display label, and the terminal state flag. All fields are business-critical, and uniqueness is enforced for 'code' and 'label' to prevent collisions. Field values and business purpose mirror the wrtn_support_ticket_statuses table schema. This schema is used only by moderators (internal support/admin) for workflow configuration and is an essential element in extensible customer support management.","properties":{"code":{"type":"string","description":"Unique system code for this support ticket status. Used by workflow automation and API clients to reference this status (e.g., 'new','assigned','closed'). Must be unique among all statuses, as enforced by the database and API validation."},"label":{"type":"string","description":"Display label for the support ticket status. Shown to human users and administrators in configuration screens/reports. Must be unique. Should be concise but descriptive (e.g., 'Assigned', 'Resolved')."},"is_terminal":{"type":"boolean","description":"Controls whether this status is terminal (final/closed) or part of an ongoing workflow. If true, new tickets set to this status are considered closed or completed and cannot proceed to other statuses without reopening."}},"required":["code","label","is_terminal"]},"IWrtnSupportTicketStatus.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_support_ticket_statuses","properties":{"label":{"type":"string","description":"The new display label for this ticket status. Labels must be unique across all support ticket statuses to avoid confusion in workflows and reporting interfaces. Changing the label affects user interface display and communication, but does not influence the underlying workflow status code or business logic. Example: 'In Progress', 'Closed', 'Resolved'."},"is_terminal":{"type":"boolean","description":"Indicates whether this status represents a terminal state (such as 'closed' or 'deleted'). Terminal statuses are treated as workflow endpoints and signal that no further updates or transitions are expected for tickets with this status. Set to true for statuses that finalize or close tickets."}},"required":["label","is_terminal"],"description":"Schema used to update a support ticket status in the system. Allows changing only the display label and terminal-state designation; does not permit changing the status code. All updates must comply with status code immutability and unique label constraints defined in the support workflow business logic. This schema maps directly to the wrtn_support_ticket_statuses table update operations."},"IWrtnNotification.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Filter notifications by the event type/category, such as 'system', 'personal', 'compliance', 'security'. Optional; if omitted, notifications of all types are considered."},"importance":{"type":"string","description":"Filter notifications by importance, e.g., 'info', 'action_required', 'critical'. Optional parameter; if omitted, notifications of all importance levels are included."},"target_scope":{"type":"string","description":"Filter notifications by targeting level: 'individual', 'team', 'enterprise', 'role', etc. Determines recipient targeting. Optional; when omitted, scopes are unrestricted."},"target_id":{"type":"string","format":"uuid","description":"Filter notifications destined for a specific target entity (user ID, team ID, enterprise ID, etc.) as per targeting logic. Optional; if not provided, notifications across all targets are included."},"recipient_kind":{"type":"string","description":"Filter by recipient kind/actor ('employee', 'moderator'); determines scope of notifications relevant to user role. Optional."},"recipient_id":{"type":"string","format":"uuid","description":"Filter notifications delivered to a specific recipient. Applies to personal notifications and direct messages. Optional."},"delivery_status":{"type":"string","description":"Filter by delivery outcome/status (e.g., 'pending', 'delivered', 'failed', 'escalated', 'expired'). Useful for retrieving only unread, successfully delivered, or failed notifications. Optional."},"channel_code":{"type":"string","description":"Filter notifications by delivery channel (e.g., 'email', 'in_app', 'push', 'sms'). Optional; not required for most in-app queries."},"read":{"type":"boolean","description":"Optional filter to return only read or unread notifications (true for read, false for unread)."},"sort_by":{"type":"string","description":"Specifies sorting property such as 'created_at', 'sent_at', 'delivered_at', etc. Optional; default typically sorts by newest notifications."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for results; 'asc' for ascending, 'desc' for descending. Optional; default is 'desc' (newest first)."},{"const":"desc","description":"Sort order for results; 'asc' for ascending, 'desc' for descending. Optional; default is 'desc' (newest first)."}],"description":"Sort order for results; 'asc' for ascending, 'desc' for descending. Optional; default is 'desc' (newest first)."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated result sets. Optional; default is 1; must be >= 1."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Number of notifications per page. Optional. Default is 20. System maximum of 200 notifications per request."},"created_before":{"type":"string","format":"date-time","description":"Retrieve notifications created before this date/time (ISO 8601). Enables time window queries for dashboards/history views. Optional."},"created_after":{"type":"string","format":"date-time","description":"Retrieve notifications created after this date/time (ISO 8601). Enables time window queries for dashboards/history views. Optional."}},"required":[],"description":"Filtering and pagination schema for querying available notifications for a user (moderator or employee). Supports complex filtering by notification type, importance, targeting, recipient, delivery channel, status, time window, read state, and sorting preferences. Used for building notification centers, dashboards, or personalized messaging histories accessible by authenticated actors. All filtering fields are optional; system defaults to most recent notifications visible to the authorized user."},"IWrtnNotification":{"type":"object","x-autobe-prisma-schema":"wrtn_notifications","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification event. Matches the wrtn_notifications.id field (UUID primary key)."},"event_type":{"type":"string","description":"Notification business type or kind (e.g., 'system', 'personal', 'compliance', 'security', etc.). Determines context and how notification is treated, as per the wrtn_notifications.event_type column."},"subject":{"type":"string","description":"Notification subject/title as shown to the user. Maps to wrtn_notifications.subject. Required, concise."},"body":{"type":"string","description":"Full notification message body or description (wrtn_notifications.body). Markdown or plain text. May be null for title-only notifications."},"importance":{"type":"string","description":"Importance level such as 'info', 'action_required', or 'critical'. See wrtn_notifications.importance."},"target_scope":{"type":"string","description":"Scope determining which recipient group should receive (e.g., 'individual', 'team', 'enterprise', 'role'). Matches wrtn_notifications.target_scope."},"target":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary"},{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Reference to the target entity (enterprise, team, employee) for the notification, mapped from scope/id according to business logic. Null for system-wide notifications."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional future scheduling datetime for delivery (wrtn_notifications.scheduled_at). Null for immediate delivery."},"sent_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date/time sent to recipients (wrtn_notifications.sent_at). Null if not yet sent."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date/time delivered to at least one recipient (wrtn_notifications.delivered_at). Null if never delivered."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If the notification is set to expire at a specific moment, this is the deadline (wrtn_notifications.expired_at). Null disables automatic expiry/removal."},"escalation_policy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional escalation policy name/code as per wrtn_notifications.escalation_policy. Null if no escalation for this notification."},"escalated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date/time the notification was escalated, if applicable (wrtn_notifications.escalated_at). Null if not escalated."},"created_at":{"type":"string","format":"date-time","description":"When this notification was first created in the database (wrtn_notifications.created_at)."},"updated_at":{"type":"string","format":"date-time","description":"Last time the notification was updated (wrtn_notifications.updated_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete marker (wrtn_notifications.deleted_at). Null if active."},"deliveries":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnNotificationDelivery"},"description":"Delivery attempt history for this notification (see wrtn_notification_deliveries). Each item maps to a detailed delivery record, including recipient, channel, delivery status, error, and read/acknowledge tracking."}},"required":["id","event_type","subject","importance","target_scope","created_at","updated_at","deliveries"],"description":"Notification event entity for the WrtnEnterprise platform, mapped 1:1 to wrtn_notifications. All relation fields are mapped as summary objects per AutoBE interface rules (target, deliveries). Includes audit metadata, cross-entity business tracing to enterprise/team/employee/recipient, and full delivery tracking. Used in compliance, escalation workflows, and end-user notification audit."},"IWrtnNotificationDelivery":{"type":"object","x-autobe-prisma-schema":"wrtn_notification_deliveries","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the delivery record (wrtn_notification_deliveries.id)."},"channel":{"$ref":"#/components/schemas/IWrtnNotificationChannel.ISummary","description":"Reference to the notification channel used for this delivery, mapped from wrtn_notification_channel_id."},"recipient":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"$ref":"#/components/schemas/IWrtnModerator.ISummary"}],"description":"Summary object of the recipient actor (employee or moderator), mapped from recipient_kind and recipient_id fields."},"delivery_status":{"type":"string","description":"Final status of the delivery attempt (e.g., 'pending', 'delivered', 'failed', 'escalated', 'expired', etc.). wrtn_notification_deliveries.delivery_status."},"failure_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional. Text description of the failure, if delivery failed (wrtn_notification_deliveries.failure_reason)."},"attempt_sequence":{"type":"integer","description":"Delivery attempt sequence number, for audit/traceability."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Scheduled delivery timestamp, if not immediately attempted (wrtn_notification_deliveries.scheduled_at)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Actual delivery datetime if successful (wrtn_notification_deliveries.delivered_at)."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Time recipient read or acknowledged the notification (wrtn_notification_deliveries.read_at). Null if not yet read/acknowledged."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if attempt expired or delivery no longer relevant (wrtn_notification_deliveries.expired_at)."},"escalation_policy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Escalation code/policy used if applicable (wrtn_notification_deliveries.escalation_policy)."},"escalated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of escalation if occurred (wrtn_notification_deliveries.escalated_at)."},"channel_metadata":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque channel/attempt metadata (JSON/text) per delivery, for detailed troubleshooting and compliance (wrtn_notification_deliveries.channel_metadata)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (wrtn_notification_deliveries.created_at)."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp (wrtn_notification_deliveries.updated_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for compliance/audit; null if active (wrtn_notification_deliveries.deleted_at)."}},"required":["id","channel","recipient","delivery_status","attempt_sequence","created_at","updated_at"],"description":"Delivery attempt/tracking record for a notification event. Represents one per-channel, per-recipient delivery instance, including resolved channel, recipient summary, status, metadata, and all audit fields. Mapped to wrtn_notification_deliveries. Fully expanded relation fields as summary objects, for analytics, troubleshooting, and compliance use."},"IWrtnNotification.ICreate":{"type":"object","properties":{"event_type":{"type":"string","description":"Notification business type or kind (e.g., 'system', 'personal', etc.). Required. Mapped to wrtn_notifications.event_type."},"subject":{"type":"string","description":"Short subject or headline for the notification. Must not be empty. Mapped to wrtn_notifications.subject."},"body":{"type":"string","description":"Notification body (markdown or plain text). Optional."},"importance":{"type":"string","description":"Importance level ('info', 'action_required', 'critical', etc.). Required. Mapped to wrtn_notifications.importance."},"target_scope":{"type":"string","description":"Target recipient scope ('individual', 'team', 'enterprise', 'role', etc.). Required. Mapped to wrtn_notifications.target_scope."},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional. Specific recipient target as UUID (employee, team, enterprise). Use null for system/global announcements or if targeting all actors matching the scope."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional: UTC ISO 8601 datetime for scheduled/delayed send. Null or omitted for immediate notification."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional: UTC ISO 8601 datetime after which notification is considered expired/irrelevant (platform may auto-delete after this time). Null if persistent notification."},"escalation_policy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional escalation code/policy (if relevant; business logic defines handling)."}},"required":["event_type","subject","importance","target_scope"],"x-autobe-prisma-schema":"wrtn_notifications","description":"Notification creation input DTO for WrtnEnterprise. Used as the request body when creating a new notification (POST operation). Fields closely match mutable properties on wrtn_notifications creation. All required fields must be provided. Mutually exclusive or optional fields as per business and platform rules."},"IWrtnNotification.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_notifications","description":"DTO for updating a notification entity in the wrtn_notifications table. Used in PUT /wrtnEnterprise/moderator/notifications/{notificationId} and /wrtnEnterprise/employee/notifications/{notificationId}. Properties correspond to the mutable fields of wrtn_notifications such as subject, body, importance, delivery scheduling, and scope update. All fields are optional; unset fields will not be changed. Only properties found in the Prisma schema for wrtn_notifications may be included.","properties":{"subject":{"type":"string","description":"Notification subject/title. Updates the notification's short display label visible to recipients."},"body":{"type":"string","description":"Full or partial body content for the notification. May include markdown or rich text."},"event_type":{"type":"string","description":"Business-purpose code for notification grouping (e.g., system, personal, compliance, security, action_required, etc.)"},"importance":{"type":"string","description":"Importance level for this notification. Controls delivery urgency, alerting, and UX display. Acceptable values per business logic: e.g., 'info', 'action_required', 'critical'."},"target_scope":{"type":"string","description":"Defines the scope of the notification like 'individual', 'team', 'enterprise', or 'role'. Must match backend logic for delivery/targeting policies. Mutating this may change notified recipient group."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target entity UUID if scope is team/enterprise/individual. Null if global/system. Set to change who will see this notification after update."},{"type":"null"}],"description":"Target entity UUID if scope is team/enterprise/individual. Null if global/system. Set to change who will see this notification after update."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time","description":"When to deliver the notification (scheduled for delivery). Must be future time or null for immediate delivery."},{"type":"null"}],"description":"When to deliver the notification (scheduled for delivery). Must be future time or null for immediate delivery."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration time for notification validity. After this, notification is considered expired and possibly hidden from future dashboard/UI lists."},{"type":"null"}],"description":"Expiration time for notification validity. After this, notification is considered expired and possibly hidden from future dashboard/UI lists."},"escalation_policy":{"oneOf":[{"type":"string","description":"Name/code of escalation policy to apply for this notification (e.g., escalate to moderator if failed after N retries). Null for default behavior."},{"type":"null"}],"description":"Name/code of escalation policy to apply for this notification (e.g., escalate to moderator if failed after N retries). Null for default behavior."}},"required":[]},"IWrtnAnnouncement.IRequest":{"type":"object","description":"Filter and pagination DTO for searching announcements in wrtn_announcements. Used as request body for PATCH /wrtnEnterprise/announcements. All property names, including acknowledgment requirement, strictly follow naming and enum contract set by IWrtnAnnouncement main entity and business requirements documentation. Strictly reference the business requirement enums for scope_kind ('system', 'enterprise', 'team', 'role'), importance ('info', 'action_required', 'critical'), and 'requires_acknowledgment'. Only announcements the requesting actor is authorized to view will be returned as search results. Descriptions expanded for developer business context.\n\n**Key contracts:**\n- 'scope_kind' must match business requirement enum ('system', 'enterprise', 'team', 'role')\n- 'importance' must match ('info', 'action_required', 'critical') per business logic\n- 'requires_acknowledgment' is the canonical acknowledgment field (uses American spelling and matches entity type)\n- All query/search and range parameters reference backend filter capabilities. Enum/string values should link to documentation requirements.\n- Audit-compliance and data-isolation rules apply for all filtering/scoping fields.\n\nCross-DOMAIN alignment: Always keep property names/values in sync with IWrtnAnnouncement and business contract.","properties":{"scope_kind":{"type":"string","description":"Scope filter for announcements. One of 'system', 'enterprise', 'team', 'role'. This matches business requirement enums and determines which domain/scope of announcements are included in the query. Must match values allowed for wrtn_announcements.scope_kind. Reference requirements documentation for authoritative enum contract."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity UUID (enterprise/team/role) for scoping announcements by target organization or group. Null means global/system announcement. Only announcements in the user's authorized organization/team context will be returned. Exact match required."},{"type":"null"}],"description":"Entity UUID (enterprise/team/role) for scoping announcements by target organization or group. Null means global/system announcement."},"importance":{"type":"string","description":"Importance/urgency filter for announcements. One of 'info', 'action_required', 'critical' (per strict enum contract). Only values enforced by business requirement logic are allowed. Reference requirements documentation for permitted values."},"requires_acknowledgment":{"type":"boolean","description":"If set, filters for announcements that require user acknowledgment (compliance/legal notices, critical security incidents). Always use this American-spelling property (never 'acknowledgement_required'). Match with IWrtnAnnouncement main entity and business documentation."},"subject_search":{"type":"string","description":"Case-insensitive full-text or substring search on announcement subject/title. Use to match announcements by display headline."},"body_search":{"type":"string","description":"Case-insensitive full-text search of announcement body. For keyword/content search across entire announcement text."},"published_since":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound filter (ISO 8601) for sent_at/published_at property. Only announcements published/sent after this time are included."},{"type":"null"}],"description":"Lower bound filter (ISO 8601) for sent_at/published_at. Null disables lower bound. Used for filtering by recent announcements or audit trace slicing."},"published_until":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound filter (ISO 8601) for sent_at/published_at property. Only announcements published/sent before this time are included."},{"type":"null"}],"description":"Upper bound filter (ISO 8601) for sent_at/published_at. Null disables upper bound filter."},"page":{"type":"integer","minimum":1,"description":"Pagination page index (min 1). Used for efficient result navigation. Required."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Page size. Maximum 100 announcements per request."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort by created_at timestamp"},{"const":"sent_at","description":"Sort by sent_at (publish) timestamp"},{"const":"expired_at","description":"Sort by expired_at timestamp"}],"description":"Sort key for page: 'created_at', 'sent_at', or 'expired_at', per business contract and results list focus. Defaults to created_at or sent_at as appropriate."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"}],"description":"Sort order for list; 'desc' means newest first."}},"required":["page","limit"]},"IWrtnAnnouncement":{"type":"object","x-autobe-prisma-schema":"wrtn_announcements","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the announcement. This ID uniquely identifies each announcement record in the wrtn_announcements table."},"scope_kind":{"type":"string","description":"Scope of announcement delivery (e.g., 'system', 'enterprise', 'team', 'role'). Determines the type of business entity this announcement targets."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the target entity (e.g., enterprise ID, team ID, or role-specific target) depending on scope_kind."},{"type":"null"}],"description":"Targeted entity's ID (null means announcement is system/global broadcast) for context-aware announcement delivery."},"subject":{"type":"string","description":"Announcement subject/title, shown in notification dialogs and dashboard listings."},"body":{"type":"string","description":"Full content of the announcement (Markdown format supported) for rich text display on client. May contain business instructions or policy message."},"importance":{"type":"string","description":"Importance/urgency level such as 'info', 'action_required', or 'critical'. Business workflows and UI use this for visibility and escalation rules."},"requires_acknowledgment":{"type":"boolean","description":"Specifies if user acknowledgment is required (such as for legal or compliance events). If true, user interface/policies may require an explicit read or acknowledge action before proceeding."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time","description":"Scheduled time for dispatching delivery of the announcement, supporting planned roll-outs or delayed notifications."},{"type":"null"}],"description":"ISO8601 send time if set, else immediate."},"sent_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for actual announcement send/broadcast (business event time)."},{"type":"null"}],"description":"ISO8601 send/broadcast timestamp."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration time of the announcement, after which it is no longer visible or actionable, unless policy requires history retention."},{"type":"null"}],"description":"ISO8601 expiration timestamp, or null for non-expiring announcements."},"escalation_policy":{"oneOf":[{"type":"string","description":"Escalation rule or policy identifier for business logic (e.g., mandatory SMS resend, moderator escalation)."},{"type":"null"}],"description":"Business escalation or notification re-send strategy, if defined."},"escalated_at":{"oneOf":[{"type":"string","format":"date-time","description":"If escalation was triggered (e.g., not read by required recipients), the time of escalation event."},{"type":"null"}],"description":"ISO8601 escalation timestamp, if any."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the announcement record was created in the system (for audit logging and reporting)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the announcement record was last modified (for audit trail and compliance)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of soft (logical) deletion. If present, this record is no longer visible except for compliance/audit purposes."},{"type":"null"}],"description":"Soft deletion marker. Null if the announcement is active."}},"required":["id","scope_kind","subject","body","importance","requires_acknowledgment","created_at","updated_at"],"description":"Announcement entity representing a system, enterprise, or team-wide broadcast message. Used for business/process communication, compliance/legal notifications, and policy alerts. Directly implements the wrtn_announcements table. Includes all metadata for delivery, targeting, audit, and policy control. Only moderators can create system/global announcements. Employees may read (and possibly create/manage) organization- or team-level announcements, as controlled by business permissions. All accesses/changes are audit-logged for compliance."},"IWrtnAnnouncement.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_announcements","properties":{"scope_kind":{"type":"string","description":"Scope for announcement delivery. Must be one of 'system', 'enterprise', 'team', 'role'. Determines the kind of entity this announcement targets."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the entity to target (e.g. enterprise/team ID, role-specific entity)."},{"type":"null"}],"description":"Announcement target. Null for system- or global-broadcast announcements."},"subject":{"type":"string","description":"Title or short subject of the announcement. Required for overview/listing in user dashboard."},"body":{"type":"string","description":"Markdown-supported body content for the announcement. May include rich formatting and detailed instructions, visible in full-announcement view."},"importance":{"type":"string","description":"Importance/urgency grade: typically one of 'info', 'action_required', 'critical'. Drives UI visibility, notification frequency, and escalation rules."},"requires_acknowledgment":{"type":"boolean","description":"Whether recipient users must explicitly acknowledge (read/accept) the announcement for compliance or critical communications. If true, UI will require acknowledge before certain actions."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, specifies date/time for announcement broadcast; otherwise, announcement is delivered immediately."},{"type":"null"}],"description":"Scheduled time for announcement delivery or broadcast."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time when the announcement expires (null means not expiring automatically)."},{"type":"null"}],"description":"Announcement expiration date/time (ISO8601), after which the announcement is no longer actively shown."},"escalation_policy":{"oneOf":[{"type":"string","description":"Escalation strategy or rule (code/ID); governs how reminders/resends/escalations occur for unread/action-required announcements."},{"type":"null"}],"description":"Business escalation or re-notification strategy (optional, for critical/system-wide alerts)."}},"required":["scope_kind","subject","body","importance","requires_acknowledgment"],"description":"Request body for creating a new announcement in the system (wrtn_announcements table). Supports target scope selection, importance/urgency, broadcast scheduling, expiration and compliance-related features. Used exclusively by moderators (admin) to issue system- or tenant-wide communications, or by authorized employees for enterprise/team notification. The announcement record is created with all fields required for later delivery, audit, and compliance workflows."},"IWrtnAnnouncement.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_announcements","properties":{"subject":{"type":"string","description":"Subject or title of the announcement. Serves as the main headline and short summary for audience attention, audit, and cataloging. Must be non-empty string."},"body":{"type":"string","description":"Full detailed content of the announcement. Markdown or rich text. Delivered as the main message to all recipients in target scope."},"scope_kind":{"type":"string","description":"Scope kind: e.g., 'system', 'enterprise', 'team', 'role'. Determines the announcement's target domain. Must match the intended distribution context per business rules."},"scope_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted entity's ID—nullable for system/global announcements. When present, must reference an existing enterprise, team, or role as supported by business logic."},"importance":{"oneOf":[{"const":"info","description":"Importance/urgency of the announcement. Must be one of: 'info', 'action_required', 'critical'. Used for channel escalation, opt-out enforcement, audit, and visual cues."},{"const":"action_required","description":"Importance/urgency of the announcement. Must be one of: 'info', 'action_required', 'critical'. Used for channel escalation, opt-out enforcement, audit, and visual cues."},{"const":"critical","description":"Importance/urgency of the announcement. Must be one of: 'info', 'action_required', 'critical'. Used for channel escalation, opt-out enforcement, audit, and visual cues."}],"description":"Importance/urgency of the announcement. Must be one of: 'info', 'action_required', 'critical'. Used for channel escalation, opt-out enforcement, audit, and visual cues."},"requires_acknowledgment":{"type":"boolean","description":"If true, the announcement requires explicit user acknowledgment for compliance, blocking or repeated reminders until confirmation. Used for mandatory policy, security, and legal notices."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Scheduled send time (if delayed/repeating/batch). Null for immediate or as soon as possible broadcast. Controls delivery timing."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp—after which announcement is no longer visible (null means persist indefinitely per retention policy)."}},"required":["subject","body","scope_kind","importance","requires_acknowledgment"],"description":"Announcement update DTO. Used to update mutable properties (title, body, scope, schedule, and importance) of wrtn_announcements. Audit and immutable fields (id, created_at, deleted_at, broadcast trail, escalation state) must not be included here."},"IWrtnNotificationDelivery.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Pagination parameter: page number for paginated search results. Must be positive integer (default: 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Pagination limit: maximum number of records per page (default: 50, max: 200)."},"delivery_status":{"oneOf":[{"const":"pending","description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."},{"const":"delivered","description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."},{"const":"failed","description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."},{"const":"expired","description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."},{"const":"read","description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."},{"const":"escalated","description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."}],"description":"Filter: delivery status of the notification attempt. Must be one of available status enums (pending, delivered, failed, expired, read, escalated) to filter search results."},"recipient_kind":{"oneOf":[{"const":"employee","description":"Filter: the actor type for delivery recipient. Must be either 'employee' or 'moderator'. Restricts search to only one recipient class."},{"const":"moderator","description":"Filter: the actor type for delivery recipient. Must be either 'employee' or 'moderator'. Restricts search to only one recipient class."}],"description":"Filter: the actor type for delivery recipient. Must be either 'employee' or 'moderator'. Restricts search to only one recipient class."},"recipient_id":{"type":"string","format":"uuid","description":"Filter: specific recipient's unique identifier (UUID). Filters results for one actor (employee or moderator, per recipient_kind)."},"channel_code":{"type":"string","description":"Filter: code of the delivery channel (e.g., 'email', 'in_app', 'push', 'sms'). Returns only deliveries via the specified channel."},"delivered_from":{"type":"string","format":"date-time","description":"Filter: only deliveries with delivered_at >= this ISO date-time (UTC). Used for datetime window filtering."},"delivered_to":{"type":"string","format":"date-time","description":"Filter: only deliveries with delivered_at <= this ISO date-time (UTC). Used for datetime window filtering."},"sort":{"oneOf":[{"const":"delivered_at","description":"Sort field: which field to order results by. Allowed: delivered_at (default), created_at."},{"const":"created_at","description":"Sort field: which field to order results by. Allowed: delivered_at (default), created_at."}],"description":"Sort field: which field to order results by. Allowed: delivered_at (default), created_at."},"order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' for ascending or 'desc' for descending sort."},{"const":"desc","description":"Sort order: 'asc' for ascending or 'desc' for descending sort."}],"description":"Sort order: 'asc' for ascending or 'desc' for descending sort."}},"required":[],"description":"Notification delivery search/filter DTO for wrtn_notification_deliveries. Allows advanced filtering on delivery status, recipient, channel, delivered_at window, and supports pagination and sort controls for large result sets."},"IWrtnNotificationAnnouncementRead":{"type":"object","x-autobe-prisma-schema":"wrtn_notification_announcement_reads","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this read/acknowledgment record. Generated by the system. Maps to wrtn_notification_announcement_reads.id."},"announcement":{"$ref":"#/components/schemas/IWrtnAnnouncement.ISummary","description":"Announcement this read acknowledgment refers to. Object transformed from wrtn_notification_announcement_reads.wrtn_announcement_id."},"recipient_kind":{"oneOf":[{"const":"employee","description":"The kind of actor who acknowledged (either 'employee' or 'moderator'). Sourced from the wrtn_notification_announcement_reads.recipient_kind. Used for audit and compliance separation."},{"const":"moderator","description":"The kind of actor who acknowledged (either 'employee' or 'moderator'). Sourced from the wrtn_notification_announcement_reads.recipient_kind. Used for audit and compliance separation."}],"description":"The kind of actor who acknowledged (either 'employee' or 'moderator'). Sourced from the wrtn_notification_announcement_reads.recipient_kind. Used for audit and compliance separation."},"recipient_id":{"type":"string","format":"uuid","description":"ID of the actor (employee/moderator) who marked this announcement as read. Maps to wrtn_notification_announcement_reads.recipient_id and always the current authenticated actor."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp recipient acknowledged/read this announcement. Null if never acknowledged. Sourced from wrtn_notification_announcement_reads.read_at."},"created_at":{"type":"string","format":"date-time","description":"Record creation time for this read receipt. Used for business reporting and compliance. Maps to wrtn_notification_announcement_reads.created_at."}},"required":["id","announcement","recipient_kind","recipient_id","created_at"],"description":"Announcement read-acknowledgment receipt for audit and compliance logging. Each record links an announcement to an employee or moderator recipient. Includes recipient context, read status, and relevant timestamps. Maps to wrtn_notification_announcement_reads, enforcing enterprise privacy and audit trail. Used in PATCH /announcements/{announcementId}/reads and related endpoints."},"IWrtnAnnouncement.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_announcements","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the announcement, mapped to wrtn_announcements.id. Used for stable reference in all query, update, and audit operations."},"scope_kind":{"type":"string","description":"Scope kind indicating who receives the announcement. Must be one of: 'system' (all users globally), 'enterprise' (all members of a specific company), 'team' (for a team in an enterprise), or 'role' (targeted by business role type). This controls the business target and determines notification recipient sets."},"scope_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the entity being notified, depending on scope_kind. If null, the announcement is system-wide (all actors in the platform). If set, refers to the specific team, enterprise, or role target."},"subject":{"type":"string","description":"Title or high-level summary for the announcement. Shown at the top of user notification cards, dashboards, or emails. Should clearly convey the intent of the announcement."},"body":{"type":"string","description":"Full detailed announcement content, supporting markdown for formatting. Used in notification dialogs, rich dashboards, or broadcast emails. Contains actionable instructions, detailed policy change, or event information."},"importance":{"type":"string","description":"Importance/urgency tag, must be one of: 'info', 'action_required', or 'critical'. \n- 'info': general notification, does not require immediate action\n- 'action_required': requires recipient review or action (e.g. policy acceptance)\n- 'critical': urgent, can trigger escalations or compliance-level alerts if unacknowledged."},"requires_acknowledgment":{"type":"boolean","description":"If true, clients must force recipients to acknowledge (accept/read) this announcement before allowing certain flows to continue (used for legal, compliance, billing, and security alerts). False means passive read is sufficient (info-only)."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional future time to deliver/broadcast this announcement (ISO 8601 UTC). Null or omitted for immediate send. Used for pre-scheduled events, major launches, or maintenance windows."},"sent_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when the announcement was actually delivered (broadcasted) (ISO 8601 UTC). Null if not sent yet. Used for audit, dashboard display, and notification analytics."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when the announcement expires and is no longer shown to users. Null if no expiration is set (announcement will persist until manually deleted or disabled). Enforces business retention and hides old or irrelevant announcements."},"escalation_policy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business escalation code or rule applied if recipients do not acknowledge within a required period (e.g., re-notification, escalate to moderator, require SMS/email resend). Null or omitted means no escalation."},"escalated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when escalation policy was triggered, if escalation occurred after missed acknowledgment or delivery failure. Null if escalation never happened."},"created_at":{"type":"string","format":"date-time","description":"When the announcement was first created (audit and record control; ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Latest update time for this announcement record (audit and workflow tracking)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If set, this is the soft-deletion timestamp for the announcement. Null if active."}},"required":["id","scope_kind","subject","body","importance","requires_acknowledgment","created_at","updated_at"],"description":"Summary representation of an announcement record in WrtnEnterprise. Encapsulates broadcasting scope, display, escalation, and acknowledgment tags for organizational, compliance, or global notifications. Used for listing, navigation, or context embedding. Contains all necessary detail for notification routing and recipient display. See wrtn_announcements for full record structure; this summary form omits message delivery event details and recipient reads."},"IWrtnNotificationPreference.IRequest":{"type":"object","properties":{"wrtn_notification_channel_id":{"type":"string","format":"uuid","description":"Identifier for the notification delivery channel to apply updates to. Must be a valid UUID from the wrtn_notification_channels table (e.g., for email, in-app, sms, push, etc). Required for both enable/disable and mute/unmute operations."},"is_enabled":{"type":"boolean","description":"Enable (true) or disable (false) notification delivery through this channel. True means the user will receive notifications, false disables (subject to business constraints; cannot disable critical or required channels)."},"muted_until":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"UTC ISO8601 datetime until which notifications are muted/paused on this channel (for quiet hours/Do-Not-Disturb). Null to denote unmuted state or if no specific mute is set. Used to pause alerts during user-defined quiet periods."},"frequency_limit_per_hour":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of notifications per hour for this channel (integer cap, e.g., 3/hour). Null to use system or enterprise default cap. Used for rate-limiting alerts to reduce spam or notification fatigue."},"preference_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional JSON-encoded advanced configuration for this channel/user combination (e.g., custom labels, alert routing, vendor-specific options). Null or omitted if not needed by the current actor or channel."}},"required":["wrtn_notification_channel_id"],"description":"Request object to search for or update notification delivery channel preferences for the authenticated user. Used for setting channel enable/disable status, quiet hours (muted_until), per-hour delivery caps, and storing advanced channel config. Maps 1:1 to wrtn_notification_preferences table for PATCH operations on /notificationPreferences endpoints. Not all combinations may be allowed per business logic (critical/mandatory channels may reject disable/mute)."},"IWrtnNotificationPreference":{"type":"object","x-autobe-prisma-schema":"wrtn_notification_preferences","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification preference record. Corresponds to the primary key in the wrtn_notification_preferences table."},"wrtn_notification_channel_id":{"type":"string","format":"uuid","description":"Foreign key referencing wrtn_notification_channels.id. Identifies the notification delivery channel (e.g., email, in-app, push, sms) to which this preference applies."},"recipient_kind":{"type":"string","description":"Type of recipient for this preference, such as 'employee' or 'moderator'. Indicates the actor category for this preference record."},"recipient_id":{"type":"string","format":"uuid","description":"Unique identifier of the actor (employee or moderator) to whom this notification preference applies."},"is_enabled":{"type":"boolean","description":"Whether this notification channel is enabled for the recipient. If true, the recipient will receive notifications through this channel."},"muted_until":{"oneOf":[{"type":"string","format":"date-time","description":"If set, indicates the UTC datetime until which notifications on this channel are muted (quiet hours); after which, notifications resume. Null if not muted."},{"type":"null"}],"description":"If set, indicates the UTC datetime until which notifications on this channel are muted (quiet hours); after which, notifications resume. Null if not muted."},"frequency_limit_per_hour":{"oneOf":[{"type":"integer","description":"Maximum number of notifications delivered through this channel per hour. Used to cap notification frequency for the recipient."},{"type":"null"}],"description":"Maximum number of notifications delivered through this channel per hour. Used to cap notification frequency for the recipient. Null value indicates system default applies."},"preference_json":{"oneOf":[{"type":"string","description":"Arbitrary JSON string (serialized) storing channel-specific or user-specific settings such as advanced options, custom preferences, etc."},{"type":"null"}],"description":"Arbitrary JSON string (serialized) storing channel-specific or user-specific settings such as advanced options, custom preferences, etc. Null if no additional preferences are configured."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when this preference record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) for the most recent update to this notification preference."}},"required":["id","wrtn_notification_channel_id","recipient_kind","recipient_id","is_enabled","created_at","updated_at"],"description":"Notification preference object representing a single channel's configuration for an employee or moderator. Includes mute settings, opt-in/out status, per-hour delivery limit, arbitrary JSON config, and channel association. Used for managing notification delivery preferences as stored in wrtn_notification_preferences. All fields correspond to columns in the underlying table. See business rules for allowed edits and error cases."},"IWrtnNotificationPreference.IUpdate":{"type":"object","properties":{"is_enabled":{"type":"boolean","description":"Set to true to enable notification delivery through the channel, false to disable. According to business rules, some channels (e.g., required alerts) may block disabling even if false is set."},"muted_until":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: Set to an ISO 8601 UTC datetime string to mute notifications through this channel until the given time. Null to unmute immediately."},{"type":"null"}],"description":"Optional: Set to an ISO 8601 UTC datetime string to mute notifications through this channel until the given time. Null to unmute immediately."},"frequency_limit_per_hour":{"oneOf":[{"type":"integer","description":"Maximum number of notifications per hour to deliver on this channel for this user. Null means use the system/company default."},{"type":"null"}],"description":"Maximum number of notifications per hour to deliver on this channel for this user. Null means use the system/company default."},"preference_json":{"oneOf":[{"type":"string","description":"Channel-specific or user-specific additional preference settings, encoded as a JSON string. May include custom delivery options, alert policies, or vendor metadata."},{"type":"null"}],"description":"Channel-specific or user-specific additional preference settings, encoded as a JSON string. May include custom delivery options, alert policies, or vendor metadata. Null to remove/reset advanced options."}},"required":[],"description":"Payload for updating a notification preference record via the wrtn_notification_preferences table. Supports altering enable/disable status for the channel, setting or lifting muted/unmuted (quiet hours), controlling max notifications per hour, and passing advanced channel/user preference data as JSON. Partial updates: only provided fields will be changed. Business rules may block disabling mandatory system alert channels. See detailed error handling and audit requirements."},"IWrtnNotificationChannel.IRequest":{"type":"object","x-autobe-prisma-schema":"wrtn_notification_channels","properties":{"code":{"type":"string","description":"Filter the channel search by exact or partial channel code (e.g., 'email', 'sms', 'in_app', 'push'). If empty or omitted, does not restrict by code."},"display_name":{"type":"string","description":"Filter typed search by notification channel display name. Partial match is supported for human-friendly label filtering. If omitted/empty, match is disabled."},"enabled":{"type":"boolean","description":"Restricts results to enabled (true) or disabled (false) channels. If omitted, does not filter by enabled state."},"priority":{"type":"integer","description":"Restrict channel results by display/delivery priority. Lower values appear before higher priority values. If omitted, no priority filtering is applied."},"search":{"type":"string","description":"Full-text search keyword for code, display_name, or description fields. Supplies case-insensitive substring filtering. Leave empty or omit to match all."},"sort_by":{"oneOf":[{"const":"display_name","description":"Sort by channel display name (default if not specified)."},{"const":"priority","description":"Sort by channel priority (lowest=highest priority)."},{"const":"code","description":"Sort by notification channel code."}],"description":"Sort returned channel list by this property. Defaults to 'display_name' if not specified."},"order":{"oneOf":[{"const":"asc","description":"Ascending sort order (default for display_name/priority)."},{"const":"desc","description":"Descending sort order."}],"description":"Sort order for result set. Default is 'asc' (ascending) on display_name or priority."},"page":{"type":"integer","description":"Results page index for paginated search (starting from 1). Defaults to 1 if omitted."},"limit":{"type":"integer","description":"Number of results per page (for pagination window). Typical values: 10, 20, 50. Defaults to 20 if omitted."}},"required":[],"description":"Search/filter/pagination DTO for notification channel listing in admin configuration flows. Used to filter, search, sort, and page through records in the wrtn_notification_channels table. Only for platform-level system configuration; end-user channel preference management uses different API and schema. This DTO is never persisted and only used for retrieval queries."},"IWrtnNotificationChannel":{"type":"object","x-autobe-prisma-schema":"wrtn_notification_channels","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification channel (wrtn_notification_channels.id, UUIDv4)."},"code":{"type":"string","description":"Unique business code for the channel (e.g., 'email', 'push', 'in_app'). Used for integration and delivery routing. Never null or empty."},"display_name":{"type":"string","description":"Human-readable display label for the notification channel in admin/configuration UI. Must not be empty but can repeat display values if code differs."},"description":{"type":"string","description":"Long-form explanation of the channel's role, intended usage, platform requirements, or integration notes. May be left empty if not configured."},"enabled":{"type":"boolean","description":"True if the channel is currently active and available for delivery, false if channel is disabled or hidden from user/channel selection."},"priority":{"type":"integer","description":"Integer controlling sort order for channel selection and delivery routing (lower numbers have higher priority). Required, never null."},"integration_metadata":{"type":"string","description":"Optional JSON string or URI containing external integration config (e.g., ESP keys, provider URIs). Can be null or empty if no integration is needed for this channel."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601 UTC) when this channel was created in the configuration."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601 UTC) when this channel record was last updated. Aids audit/history for system integration changes."}},"required":["id","code","display_name","enabled","priority","created_at","updated_at"],"description":"Detailed notification channel entity for system-wide admin configuration and delivery provider integration. Every record describes a unique configured notification channel in the wrtn_notification_channels table, including code, display label, priority, optional description, integration metadata, and audit fields for compliance/configuration dashboard usage. Not suitable for end-user notification delivery editing or preference management."},"IWrtnAnalyticsKpiReport.IRequest":{"type":"object","description":"DTO for searching and filtering KPI (Key Performance Indicator) reports in the WrtnEnterprise analytics/dashboard module. This schema defines the parameters available to analytics users (moderator, master, manager, and member) when querying KPI reports, such as period, category, team, and sort options. Pagination and sorting parameters are included for large result sets. This DTO is used in PATCH /analytics/kpiReports endpoints as the request body. Fields are mapped directly from business rules and analytics requirements, supporting real-time dashboard filtering, drilldowns, and flexible data retrieval scenarios. Each field is thoroughly described based on WrtnEnterprise analytics use cases and database schema constraints.","properties":{"enterprise_id":{"type":"string","format":"uuid","description":"Enterprise/company UUID scope to restrict KPI search results. If omitted, search is based on requesting actor's permission scope. When specified, only KPI reports belonging to this enterprise will be returned."},"team_id":{"type":"string","format":"uuid","description":"Filters KPI reports to only those for the specified team (within the selected enterprise). If omitted, results may include company-wide or other team KPI reports as allowed by permission tier."},"category":{"type":"string","description":"KPI category to filter reports (e.g., 'chat_session', 'procedure_execution', 'cost', etc.), mapped to KPI report 'category' field. Leave blank for all categories or specify for single KPI view.","examples":{"v0":"chat_session","v1":"procedure_execution","v2":"cost"}},"kpi_period_start":{"type":"string","format":"date-time","description":"Filters for KPI reports whose analyzed period starts on or after this ISO 8601 UTC datetime (inclusive). Null for no lower time bound."},"kpi_period_end":{"type":"string","format":"date-time","description":"Filters for KPI reports whose analyzed period ends before this ISO 8601 UTC datetime (exclusive). Null for no upper time bound."},"sort_by":{"type":"string","description":"Sort field name (e.g., 'kpi_period_start', 'created_at', 'category'). Determines the sorting order of returned KPI reports.","default":"kpi_period_start","examples":{"v0":"kpi_period_start","v1":"created_at","v2":"category"}},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting order: ascending ('asc') or descending ('desc'). If omitted, defaults to descending order of the sort field."},{"const":"desc","description":"Sorting order: ascending ('asc') or descending ('desc'). If omitted, defaults to descending order of the sort field."}],"description":"Sorting order: ascending ('asc') or descending ('desc'). If omitted, defaults to descending order of the sort field."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Must be >= 1. Default: 1"},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of records per page. Useful for UI performance on large result sets. Range: 1-200. Default: 50.","default":50},"search":{"type":"string","description":"Free-text search string (optional) to match category, team, or metadata in the KPI report. Applies as a broad filter or quick-find tool for dashboards.","examples":{"v0":"procedure"}}},"required":["page","limit"],"x-autobe-prisma-schema":"wrtn_analytics_kpi_reports"},"IWrtnAnalyticsKpiReport":{"type":"object","description":"Full detail DTO for a single KPI (Key Performance Indicator) report in the WrtnEnterprise analytics system, mapped to the wrtn_analytics_kpi_reports table. This schema contains all reporting fields, aggregation metadata, and referenced objects necessary to support drilldown analytics dashboard display and filterable reporting. DTO is used in GET /analytics/kpiReports/{reportId} for actors with appropriate permissions. Relationships to enterprise and (optionally) team are included as summary objects. Aggregated metrics are provided as a JSON-encoded object (business-driven structure). Field descriptions are drawn from the underlying database schema and analytics requirements. Each property, its business use, and constraints are documented for analytics reporting, filtering, and auditing. Timestamps use ISO 8601 format.","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key of the KPI report, mapped to wrtn_analytics_kpi_reports.id. Unique within the system."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise/company that owns this KPI report, represented as a summary object for reference in analytics dashboard (maps to wrtn_analytics_kpi_reports.wrtn_enterprise_id)."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"(Optional) Team for which the KPI report is specific. Null when the report is company-wide rather than team-scoped. Maps to wrtn_analytics_kpi_reports.wrtn_enterprise_team_id."},"kpi_period_start":{"type":"string","format":"date-time","description":"Inclusive ISO 8601 UTC start of the KPI reporting window (corresponds to wrtn_analytics_kpi_reports.kpi_period_start)."},"kpi_period_end":{"type":"string","format":"date-time","description":"Exclusive ISO 8601 UTC end of the KPI reporting window (corresponds to wrtn_analytics_kpi_reports.kpi_period_end)."},"category":{"type":"string","description":"Business type/category of KPI. Typical values include 'chat_session', 'procedure_execution', 'cost', etc. Used as a reporting and filtering dimension."},"aggregation_json":{"type":"string","description":"JSON-encoded string of all metrics and dimensions aggregated in this KPI report. Structure is business-configured to support analytics dashboards and downstream reporting. (To be deserialized client-side.)"},"created_at":{"type":"string","format":"date-time","description":"Timestamp the KPI report was generated (wrtn_analytics_kpi_reports.created_at). ISO 8601 UTC."}},"required":["id","enterprise","kpi_period_start","kpi_period_end","category","aggregation_json","created_at"],"x-autobe-prisma-schema":"wrtn_analytics_kpi_reports"},"IWrtnAnalyticsDashboardExport.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Status code filter for dashboard export jobs. Only records with matching status will be returned. Acceptable values depend on the implementation (e.g.: 'pending', 'processing', 'success', 'failed')."},"report_template":{"type":"string","description":"Filter for report exports belonging to a specific report template. If provided, only exports with this template name will be returned."},"requested_at_from":{"type":"string","format":"date-time","description":"Start date/time (inclusive, ISO 8601) for filtering dashboard exports by request time."},"requested_at_to":{"type":"string","format":"date-time","description":"End date/time (exclusive, ISO 8601) for filtering dashboard exports by request time."},"completed_at_from":{"type":"string","format":"date-time","description":"Start date/time (inclusive, ISO 8601) for filtering dashboard exports by export completion time."},"completed_at_to":{"type":"string","format":"date-time","description":"End date/time (exclusive, ISO 8601) for filtering dashboard exports by export completion time."},"scope_kind":{"type":"string","description":"Data scope filter (e.g.: 'enterprise', 'team', 'person'). Only exports in this scope will be returned."},"scope_id":{"type":"string","format":"uuid","description":"UUID identifier for desired data scope (such as a specific enterprise or team)."},"initiated_by_kind":{"type":"string","description":"Initiating actor kind filter; can be one of: 'employee' or 'moderator'"},"initiated_by_id":{"type":"string","format":"uuid","description":"UUID of the actor (employee/moderator) who initiated the dashboard export job."},"page":{"type":"integer","minimum":1,"description":"Pagination - 1-based index of the page to retrieve. Default: 1."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Pagination - Number of records per page. Default: 20."},"sort_by":{"type":"string","description":"Sort order of the search results. Should be a valid sortable column ('created_at', 'status', etc.)"},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction for the results: 'asc' for ascending, 'desc' for descending order. Optional; default is 'desc'."},{"const":"desc","description":"Sort direction for the results: 'asc' for ascending, 'desc' for descending order. Optional; default is 'desc'."}],"description":"Sort direction for the results: 'asc' for ascending, 'desc' for descending order. Optional; default is 'desc'."}},"required":[],"description":"Filtering, search, and pagination parameters for dashboard export jobs listing. This schema is used as the request body for searching analytics dashboard export jobs. All fields are optional; any combination can be provided to refine the query."},"IWrtnAnalyticsDashboardExport":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_dashboard_exports","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the dashboard export job, corresponding to the wrtn_analytics_dashboard_exports.id PK."},"status":{"type":"string","description":"Export job status code (e.g.: 'pending', 'processing', 'success', 'failed') from wrtn_analytics_dashboard_exports.status."},"report_template":{"type":"string","description":"Template or analytics view being exported (from wrtn_analytics_dashboard_exports.report_template)."},"export_config":{"type":"string","description":"Export configuration and mapping details in JSON format (from wrtn_analytics_dashboard_exports.export_config)."},"download_url":{"type":"string","description":"If export processing succeeded, this is the URL to download the exported file (wrtn_analytics_dashboard_exports.download_url), else null."},"error_message":{"type":"string","description":"Error message details if export failed (wrtn_analytics_dashboard_exports.error_message), or null."},"scope_kind":{"type":"string","description":"Data scope kind for the export job: either 'enterprise', 'team', or 'person'. Derived from enterprise/team/person association."},"scope_id":{"type":"string","format":"uuid","description":"UUID of the related enterprise/team/person for which export data is being generated. Null if not applicable."},"initiated_by_kind":{"oneOf":[{"const":"employee","description":"Type of actor who initiated the export (either 'employee' or 'moderator')."},{"const":"moderator","description":"Type of actor who initiated the export (either 'employee' or 'moderator')."}],"description":"Type of actor who initiated the export (either 'employee' or 'moderator')."},"initiated_by_id":{"type":"string","format":"uuid","description":"UUID of the employee or moderator who requested the export (wrtn_analytics_dashboard_exports.initiated_by_employee_id or .initiated_by_moderator_id)."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when export was requested (wrtn_analytics_dashboard_exports.requested_at, ISO 8601)."},"completed_at":{"type":"string","format":"date-time","description":"Timestamp when export processing completed (wrtn_analytics_dashboard_exports.completed_at, ISO 8601), or null if pending."},"deleted_at":{"type":"string","format":"date-time","description":"Soft delete timestamp (wrtn_analytics_dashboard_exports.deleted_at, ISO 8601), or null if export is active."}},"required":["id","status","report_template","export_config","scope_kind","scope_id","initiated_by_kind","initiated_by_id","requested_at"],"description":"Detailed metadata and tracking information about an analytics dashboard export job. All database columns are exposed for audit, compliance, and monitoring uses."},"IWrtnAnalyticsDashboardExport.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_dashboard_exports","description":"Summary DTO for dashboard analytics export batch jobs. Used to represent export batch job progress/result for CSV/Excel downloads, KPI report exports, or analytics jobs in WrtnEnterprise. Includes business context, scope, and result pointers for frontend/Dashboard UIs and audit reporting. Provides denormalized references to exporting actor (employee or moderator), data scope (enterprise/team), and batch status.\n\nAll properties are required for audit, dashboard display, and export management workflows. Reference pattern matches other ISummary DTOs (payment, billing, analytics).","properties":{"id":{"type":"string","format":"uuid","description":"Export batch job unique identifier. Primary key from wrtn_analytics_dashboard_exports."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Summary reference to the enterprise entity whose data is exported. Denormalized to provide context for dashboards, permissions, and scoping. Corresponds to wrtn_analytics_dashboard_exports.wrtn_enterprise_id. Required for audit traceability."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Summary reference to the team in export job scope, if subset export. Null if enterprise-wide or user export. Corresponds to wrtn_analytics_dashboard_exports.wrtn_enterprise_team_id."},"initiated_by_employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Summary reference to the employee who initiated the export job, if applicable (null otherwise). Corresponds to wrtn_analytics_dashboard_exports.initiated_by_employee_id."},"initiated_by_moderator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},{"type":"null"}],"description":"Summary reference to the moderator who initiated the export job, if applicable (null otherwise). Corresponds to wrtn_analytics_dashboard_exports.initiated_by_moderator_id."},"status":{"type":"string","description":"Export job status, e.g., 'pending', 'processing', 'success', or 'failed'. Indicates current state in backend batch processing, for dashboard progress tracking."},"report_template":{"type":"string","description":"The report template code, dashboard type, or analytics view being exported (e.g., 'team-usage-csv', 'enterprise-cost-kpi', etc). Used for Dashboard list rendering and user selection."},"export_config":{"type":"string","description":"The JSON-encoded configuration used for export, specifying filtering, formatting, and selection details for this particular export batch. Allows downstream dashboard logic to understand how export was configured."},"download_url":{"oneOf":[{"type":"string","description":"A secure export result file download URL, if available (export is complete and file can now be downloaded)."},{"type":"null"}],"description":"Download URL for exported file—for completed batches only. Null if export is pending or failed. Provided to frontend Dashboard UIs as a direct download/activation link."},"error_message":{"oneOf":[{"type":"string","description":"Failure explanation if export job failed (null otherwise)."},{"type":"null"}],"description":"Admin/user-facing error message if export failed/exceeded quota or permission. Null otherwise."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the export was requested in UTC ISO8601 format. Used in dashboard/database audit logs."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when export completed (null if still pending). Indicates when result file was made available, for client-side refresh/UX."}},"required":["id","status","report_template","export_config","download_url","error_message","requested_at","completed_at","enterprise","team","initiated_by_employee","initiated_by_moderator"]},"IWrtnAnalyticsKpiTraffic.IRequest":{"type":"object","properties":{"enterprise_id":{"type":"string","format":"uuid","description":"Unique identifier for the enterprise. Used to filter KPI traffic aggregates by specific organization."},"team_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional unique identifier for the team, if filtering within a specific team scope of the enterprise."},{"type":"null"}],"description":"Optional unique identifier for the team, if filtering within a specific team scope of the enterprise."},"traffic_category":{"type":"string","description":"Analytics traffic category for the query, such as 'chat_message', 'procedure_execution', 'connection', or 'file_attachment'. Restricts results to matching analytics event group."},"period_start":{"type":"string","format":"date-time","description":"Start ISO8601 timestamp (inclusive) for the KPI reporting window. The query will only return data for time buckets >= this time."},"period_end":{"type":"string","format":"date-time","description":"End ISO8601 timestamp (exclusive) for the KPI reporting window. The query will only return data for time buckets < this time."},"bucket_granularity":{"type":"string","description":"Granularity of the time buckets to aggregate (e.g., 'hour', 'day', 'week', 'month'). May restrict reporting to relevant time windows."},"page":{"type":"integer","minimum":1,"default":1,"description":"Pagination: 1-based page number for result pagination."},"limit":{"type":"integer","minimum":1,"maximum":200,"default":50,"description":"Pagination: Number of items to return per page. API may restrict maximum value for performance reasons."},"sort":{"type":"string","description":"Sorting preference for returned buckets (e.g., 'asc', 'desc' by time). Default is descending by period."}},"required":["enterprise_id","period_start","period_end"],"description":"Search and filter criteria for KPI traffic analytics queries. Determines which enterprise, optional team, event category, period, and time-bucket granularity to query, supporting pagination and sorting. All fields collectively define the analytics aggregation scope."},"IWrtnAnalyticsKpiTraffic":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_kpi_traffic","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the analytic traffic KPI report item. Maps to the primary key in wrtn_analytics_kpi_traffic."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise context for this KPI analytics report. Complete context object for the owning organization."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Optional team object for which the KPI is reported. Null if global to enterprise."},"kpi_period_start":{"type":"string","format":"date-time","description":"Inclusive ISO8601 UTC timestamp representing the start of the KPI analytics window or time bucket. Determines lower bound of aggregation period."},"kpi_period_end":{"type":"string","format":"date-time","description":"Exclusive ISO8601 UTC timestamp representing the end of the KPI analytics window or time bucket. Determines upper bound of aggregation period."},"traffic_category":{"type":"string","description":"Kind of analytic traffic event aggregated in this report: e.g., 'chat_message', 'procedure_execution', 'connection', 'file_attachment'."},"aggregation_json":{"type":"string","description":"Encrypted, structured JSON blob containing the materialized analytics for this window/bucket and category. May include metrics like message count, token sums, cost, or engagement KPIs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this analytic traffic item was created, for audit and performance analytics."}},"required":["id","enterprise","kpi_period_start","kpi_period_end","traffic_category","aggregation_json","created_at"],"description":"Analytic reporting entity for KPI traffic aggregates over a reporting window (time bucket) and event category. Contains direct organizational context, aggregation period, analytic metrics, and references to parent entities. Enables dashboard drilldown and detailed usage/cost/traffic reporting."},"IWrtnAnalyticsDashboardSetting.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination; must be >= 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page; limits results. Default range: 1-100."},"search":{"type":"string","description":"Search string for dashboard kind, enterprise name, or settings JSON. Supports fuzzy/full-text search."},"order_by":{"type":"string","description":"Field to sort results by. Typically 'created_at', 'updated_at', 'dashboard_kind', or 'id'. Must match an allowed sortable field."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending."},"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"Filter by owning enterprise ID (UUID); restricts to organization scope."},"wrtn_enterprise_employee_id":{"type":"string","format":"uuid","description":"Filter by employee ID (UUID) (dashboard owner); restricts to personal/self or target account settings."},"dashboard_kind":{"type":"string","description":"Filter by dashboard kind (e.g. 'personal', 'team', 'enterprise', 'executive')."},"created_from":{"type":"string","format":"date-time","description":"Filter by creations after this timestamp (ISO 8601 UTC); inclusive."},"created_to":{"type":"string","format":"date-time","description":"Filter by creations before this timestamp (ISO 8601 UTC); inclusive."},"updated_from":{"type":"string","format":"date-time","description":"Filter by updates after this timestamp (ISO 8601 UTC); inclusive."},"updated_to":{"type":"string","format":"date-time","description":"Filter by updates before this timestamp (ISO 8601 UTC); inclusive."},"has_employee":{"type":"boolean","description":"If true, filters to only records with associated employee. If false, only enterprise/company-wide dashboard settings."}},"required":[],"description":"Request parameters for paginated, filtered dashboard settings query in analytics service. Provides search, pagination, sort and advanced filter options suitable for both moderator and employee endpoints. Each property matches a filterable field in wrtn_analytics_dashboard_settings or its relations. The schema supports robust admin and self-service queries for analytics dashboard configuration records. All filters are optional; leaving empty will return the default page 1 result. When filtering by user, the employee's own settings are matched; when by enterprise, all company settings are included."},"IWrtnAnalyticsDashboardSetting":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_dashboard_settings","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this dashboard settings record (UUID; corresponds to wrtn_analytics_dashboard_settings.id)."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Owning enterprise for this dashboard settings record. Map from wrtn_enterprise_id; includes key info for contextual navigation."},"employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Employee associated with this dashboard settings record, or null for enterprise-wide/default settings. Maps from wrtn_enterprise_employee_id."},"dashboard_kind":{"type":"string","description":"Dashboard kind (e.g. 'personal', 'team', 'enterprise', 'executive'). Dictates analytics dashboard context and scope."},"settings_json":{"type":"string","description":"Serialized JSON configuration of dashboard layout, widget/group prefs, and filter sets. Set by user/admin per dashboard preferences."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for dashboard settings creation (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last modification to these settings (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp if the record has been removed, or null if active."}},"required":["id","enterprise","dashboard_kind","settings_json","created_at","updated_at"],"description":"Analytics dashboard settings record defining layout, widget, and grouping configuration for an employee or enterprise dashboard. Maps to wrtn_analytics_dashboard_settings. Returns all config fields and relations (enterprise summary required; employee summary if set). Each object uniquely represents a dashboard configuration instance at a point in time. Used to render analytics dashboards, track user/admin preferences, and provide context for both personal and organizational analytics views."},"IWrtnAnalyticsBenchmark.IRequest":{"type":"object","properties":{"kpi_category":{"type":"string","description":"The analytics KPI category by which to filter benchmarks. Optional. Limits search to KPI benchmarks for this kind, e.g., 'chat_volume', 'procedure_cost', etc."},"reference_segment":{"type":"string","description":"Business or industry reference segment for filtering. Optional. Typical values: 'enterprise', 'mid_market', 'finance', 'technology', etc. Returns only benchmarks for this segment if specified."},"effective_start":{"type":"string","format":"date-time","description":"ISO 8601 timestamp (inclusive, UTC) for window lower bound. Optional. Only benchmarks effective from this date/time or later are returned."},"effective_end":{"type":"string","format":"date-time","description":"ISO 8601 timestamp (exclusive, UTC) for window upper bound. Optional. Only benchmarks effective before this date/time are returned."},"sort_by":{"oneOf":[{"const":"kpi_category","description":"Sort key to order results. Optional. Valid values: 'kpi_category', 'reference_segment', 'effective_date'."},{"const":"reference_segment","description":"Sort key to order results. Optional. Valid values: 'kpi_category', 'reference_segment', 'effective_date'."},{"const":"effective_date","description":"Sort key to order results. Optional. Valid values: 'kpi_category', 'reference_segment', 'effective_date'."}],"description":"Sort key to order results. Optional. Valid values: 'kpi_category', 'reference_segment', 'effective_date'."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort order for paged results. Optional. Either 'asc' or 'desc'."},{"const":"desc","description":"Sort order for paged results. Optional. Either 'asc' or 'desc'."}],"description":"Sort order for paged results. Optional. Either 'asc' or 'desc'."},"page":{"type":"integer","minimum":1,"description":"Page number for paged results. Defaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of entries to return per page (default 20, max 200)."}},"required":[],"description":"Request body for searching analytic KPI benchmarks. Allows filtering by KPI category, reference segment, effective date window, sorting, and pagination."},"IWrtnAnalyticsBenchmark":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_benchmarks","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this analytics benchmark record, as from wrtn_analytics_benchmarks.id."},"kpi_category":{"type":"string","description":"The business KPI category this benchmark represents, such as 'chat_volume_per_user', 'procedure_cost', etc. Direct mapping to wrtn_analytics_benchmarks.kpi_category."},"reference_segment":{"type":"string","description":"Business or industry segment for benchmark calibration, e.g., 'enterprise', 'mid_market', 'healthcare'. Matches wrtn_analytics_benchmarks.reference_segment."},"benchmark_value":{"type":"number","description":"The actual reference benchmark value for the category and segment, e.g., average chats/session, costs, etc. Matches wrtn_analytics_benchmarks.benchmark_value."},"effective_date":{"type":"string","format":"date-time","description":"ISO 8601 UTC start date the benchmark applies from (wrtn_analytics_benchmarks.effective_date)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp, ISO 8601 UTC (wrtn_analytics_benchmarks.created_at)."}},"required":["id","kpi_category","reference_segment","benchmark_value","effective_date","created_at"],"description":"Analytics KPI Benchmark reference record for dashboard reporting, platform calibration, and system analytics. Reflects complete reference business KPIs for comparison. Maps 1:1 to wrtn_analytics_benchmarks."},"IWrtnAnalyticsBenchmark.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_benchmarks","description":"Summary representation of a Key Performance Indicator (KPI) benchmark reference value for use in analytics dashboards and business intelligence reporting. This DTO captures the essential business context for industry, cohort, or internal reference values that organizations compare themselves against for goal tracking, leaderboard/rankings, and progress visualization in B2B SaaS settings. Each instance of this schema summarizes a single KPI benchmark, including category, segment, effective date, and benchmark value, and is surfaced in analytic UIs for normalized comparison across companies, teams, or verticals.","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this benchmark record (wrtn_analytics_benchmarks.id). Used as the canonical reference for the benchmark in analytics APIs and dashboards."},"kpi_category":{"type":"string","description":"KPI category or analytic context, such as 'chat_volume_per_user', 'avg_procedure_cost', 'active_sessions_daily'. Defines the key metric this benchmark applies to for comparison in dashboards and analytics. Example values: 'chat_volume_per_user', 'avg_token_cost_per_team', 'kpi_engagement_score'."},"reference_segment":{"type":"string","description":"Reference group, segment, or industry vertical for which this benchmark value is calculated. Typical values include business vertical ('legal', 'finance', 'technology'), organization size ('enterprise_smb', 'enterprise_large'), or internal adoption cohort. Enables segmented comparison in leaderboard views, filtering, and target setting. Example: 'legal', 'finance', 'mid_enterprise'."},"benchmark_value":{"type":"number","description":"The quantitative value of the reference KPI for this category and segment. Used as the baseline or goal for analytics dashboard comparisons. Units are specified by business context (e.g., average monthly chat sessions per user, USD per 1,000 tokens, or engagement index). Example: 120.5 (for 'chat_volume_per_user')."},"effective_date":{"type":"string","format":"date-time","description":"The effective date/time (ISO 8601, UTC) from which this benchmark is valid or was calculated; often indicates when the reference value was last updated in the reporting system. Used to determine the relevant period for comparison. Example: '2025-01-01T00:00:00Z'."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this benchmark record (wrtn_analytics_benchmarks.created_at, ISO 8601 UTC). Used for audit and dashboard synchronization."}},"required":["id","kpi_category","reference_segment","benchmark_value","effective_date","created_at"]},"IWrtnEnterpriseISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprises","description":"Summary DTO for a WrtnEnterprise organization, providing context anchor for audit, analytics, billing, and compliance. Used as the minimal cross-reference for any business analytic log, support ticket, account, transaction, or reporting object to indicate organizational context. The 'id' serves as the globally unique business/tenant identifier for compliance and access control. The 'name' is the legal company name as registered in organizational onboarding, displayed in all analytic, support, and billing reporting workflows.","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique business/tenant identifier for audit, billing, and analytics compliance. Corresponds to wrtn_enterprises.id. Used as the primary foreign key in all multi-tenant trace and analytic linking."},"name":{"type":"string","description":"Legal company/organization name as recorded in onboarding and contracts. Used for compliance reporting, billing, analytics dashboards, and cross-tenant UI rendering."}},"required":["id","name"]},"IWrtnEnterpriseEmployeeISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employees","properties":{"id":{"type":"string","format":"uuid","description":"UUID for the enterprise employee. Identifies the actor responsible for analytic/report log events as staff of the organization."},"email":{"type":"string","format":"email","description":"Employee's enterprise-unique email address, serving as the login and identity principal for analytics and audit purposes."},"name":{"type":"string","description":"Employee's display name as registered in the enterprise directory."},"title":{"oneOf":[{"const":"master"},{"const":"manager"},{"const":"member"},{"type":"null"}],"description":"Employee's current business title: one of 'master', 'manager', 'member', or null if not assigned. Title impacts the employee's permissions and analytics scope."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference to the parent enterprise for this employee. Always mapped as an object in summaries per atomic relation mapping business rule."},"companions":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee"},"description":"All current team companion (membership) entries for this employee across teams. Summary context, see IWrtnEnterpriseTeamCompanion.ISummaryFromEmployee for details."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO8601). Indicates when this employee was first onboarded, providing audit and analytic time scope."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp (ISO8601). Tracks the most recent update to employee record, for compliance, reporting, and analytics."},"approved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Approval timestamp (ISO8601) of the employee's onboarding or last approval/reapproval event. Null if never approved or currently terminated. Used for onboarding analytics and compliance reporting."}},"required":["id","email","name","enterprise","companions","created_at","updated_at"],"description":"Summary DTO for an enterprise employee actor in analytics, audit, and reporting modules. Contains all main identifiers, enterprise/team context, and full audit fields for time-based reporting. Ensures consistency with global ISummary variants for traceability and business logic applications."},"IWrtnModeratorISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Moderator's unique identifier (UUID) used for internal access, analytics, and audit tracing."},"mobile":{"type":"string","description":"Moderator's unique mobile phone number provided at registration, primarily used for authentication and identity verification."},"nickname":{"type":"string","description":"Moderator's platform-unique nickname for system access and internal support reference."},"name":{"type":"string","description":"Full display name of the moderator for audit, assignment, and analytics."},"role":{"oneOf":[{"const":"master"},{"const":"manager"},{"type":"null"}],"description":"Current appointment role for the moderator: one of 'master', 'manager', or null (if no current appointment). Defines privilege boundaries for analytics access and support."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO8601 UTC) when moderator account was first created. Used for audit scope and compliance reporting."},"approved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Approval timestamp for initial/most recent appointment as privileged moderator. Null if never approved or currently removed. Used for audit, onboarding tracking and compliance dashboards."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion (suspension, removal or offboarding) for this moderator record. Null if moderator is active. Used for full lifecycle analytics and audit scope."}},"required":["id","mobile","nickname","name","role","created_at"],"description":"Summary DTO for a moderator (internal admin/support) actor in audit, analytics, dashboard, and reporting modules. Contains primary identifiers plus standard lifecycle fields (created, approved, deleted) to supply business time-scope and compliance context for all internal audit, support, and analytics flows."},"IWrtnAnalyticsReportLog":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_report_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the analytics report log record. Uniquely identifies each log entry in the system."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterpriseISummary","description":"Summary object for the referenced enterprise organization. Provides enterprise context for the analytic record."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeeISummary","description":"Summary for the enterprise employee actor who triggered this analytic log event. May be null for logs created by a moderator."},"moderator":{"$ref":"#/components/schemas/IWrtnModeratorISummary","description":"Summary for the internal moderator actor who performed this analytic log event. May be null if created by an enterprise employee."},"report_template":{"type":"string","description":"Name or type of the report/dashboard template used in this analytic event. Example: 'team-kpi-summary', 'cost-trend', 'export-csv', etc."},"event_kind":{"type":"string","description":"The analytic event type represented by this log record. Example values: 'render', 'schedule', 'export', 'error', 'batch', etc."},"event_json":{"type":"string","description":"Event metadata/context as a JSON-encoded string. Full details of the analytic/reporting action, suitable for display or audit review."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when the analytic log event was recorded/created. Represents the occurrence time of the event."}},"required":["id","enterprise","report_template","event_kind","event_json","created_at"],"description":"Full detail DTO for a single analytics report log record (wrtn_analytics_report_logs). Contains all relevant identifying, context, metadata, and timestamp information needed for compliance, audit review, or dashboard rendering. Sensitive internal fields are omitted for permission reasons."},"IWrtnAiModelPricing.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Filter: Unique AI vendor/model code (e.g., 'openai/gpt-4o', 'anthropic/claude-3'). Matches wrtn_ai_model_pricings.code in database. Optional. If provided, filters for partial or exact code."},"name":{"type":"string","description":"Filter: AI model display name. Matches wrtn_ai_model_pricings.name for partial or exact search. Optional."},"active":{"type":"boolean","description":"Filter: If true, only active (current) pricing policies are returned. If false, inactive/expired/soft-deleted records are included per business requirements."},"opened_at_from":{"type":"string","format":"date-time","description":"Filter: Restricts results to records opened after or at this datetime (inclusive). ISO 8601 UTC format."},"opened_at_to":{"type":"string","format":"date-time","description":"Filter: Restricts results to records opened before or at this datetime (inclusive). ISO 8601 UTC format."},"closed_at_from":{"type":"string","format":"date-time","description":"Filter: Only includes records with closed_at after or at this datetime (inclusive). ISO 8601 UTC."},"closed_at_to":{"type":"string","format":"date-time","description":"Filter: Only includes records with closed_at before or at this datetime (inclusive). ISO 8601 UTC."},"sort_by":{"oneOf":[{"const":"opened_at","description":"Sort key for the returned results. Must be one of: 'opened_at', 'closed_at', 'code', 'name'. Defaults to 'opened_at'."},{"const":"closed_at","description":"Sort key for the returned results. Must be one of: 'opened_at', 'closed_at', 'code', 'name'. Defaults to 'opened_at'."},{"const":"code","description":"Sort key for the returned results. Must be one of: 'opened_at', 'closed_at', 'code', 'name'. Defaults to 'opened_at'."},{"const":"name","description":"Sort key for the returned results. Must be one of: 'opened_at', 'closed_at', 'code', 'name'. Defaults to 'opened_at'."}],"description":"Sort key for the returned results. Must be one of: 'opened_at', 'closed_at', 'code', 'name'. Defaults to 'opened_at'."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction for ordering results. Ascending ('asc') or descending ('desc'). Defaults to 'desc'."},{"const":"desc","description":"Sort direction for ordering results. Ascending ('asc') or descending ('desc'). Defaults to 'desc'."}],"description":"Sort direction for ordering results. Ascending ('asc') or descending ('desc'). Defaults to 'desc'."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination (1-based: first page is 1)."},"page_size":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of results to return per page (max 100). Defaults to 20."}},"required":["page","page_size"],"description":"Search/filter DTO for wrtn_ai_model_pricings. Enables advanced moderator search by model code, name, status, open/close dates, with pagination and sort options. Used for PATCH /wrtnEnterprise/moderator/aiModelPricings."},"IWrtnAiModelPricing":{"type":"object","x-autobe-prisma-schema":"wrtn_ai_model_pricings","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the AI model pricing record as defined in wrtn_ai_model_pricings.id. Primary key."},"code":{"type":"string","description":"Unique vendor/model code (e.g., 'openai/gpt-4o'). Used to join with usage and billing tables. Must be unique in the price catalog. Sourced from wrtn_ai_model_pricings.code."},"name":{"type":"string","description":"Human-readable, display name for the AI model pricing policy (for admin dashboards and audit). Maps to wrtn_ai_model_pricings.name."},"input_token_price":{"type":"number","description":"Per-token input price (USD per 1,000,000 tokens) for model input. Always non-negative decimal. Sourced from wrtn_ai_model_pricings.input_token_price."},"output_token_price":{"type":"number","description":"Per-token output price (USD per 1,000,000 tokens) for model output/completions. Always non-negative decimal. Sourced from wrtn_ai_model_pricings.output_token_price."},"cache_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional: per-token price (USD per 1,000,000 tokens) for cache tokens (if the model/vendor supports cache billing). Nullable if not supported. Derived from wrtn_ai_model_pricings.cache_token_price."},"reasoning_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional: per-token price (USD per 1,000,000 tokens) for reasoning-type tokens, if model supports specific pricing. Nullable. Maps to wrtn_ai_model_pricings.reasoning_token_price."},"active":{"type":"boolean","description":"Whether this pricing policy is currently in effect/active (true) or retired (false). Computed from 'opened_at' and 'closed_at'. True if 'closed_at' is null and deleted_at is null."},"opened_at":{"type":"string","format":"date-time","description":"UTC datetime when this policy was (or becomes) effective. ISO 8601 format. Maps to wrtn_ai_model_pricings.opened_at."},"closed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"UTC datetime when this policy ceases to be effective (null if current). ISO 8601. Maps to wrtn_ai_model_pricings.closed_at."},"created_at":{"type":"string","format":"date-time","description":"Database creation timestamp for this price policy (audit). ISO 8601 UTC. wrtn_ai_model_pricings.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Database record update timestamp. ISO 8601 UTC. wrtn_ai_model_pricings.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; policy is inactive if set. ISO 8601 UTC. wrtn_ai_model_pricings.deleted_at."}},"required":["id","code","name","input_token_price","output_token_price","active","opened_at","created_at","updated_at"],"description":"WrtnEnterprise AI model pricing entity, as mapped from wrtn_ai_model_pricings. Used by cost calculation, billing, moderator management, and audit."},"IWrtnAiModelPricing.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_ai_model_pricings","properties":{"code":{"type":"string","description":"Unique code (model identifier) of the AI model/vendor (e.g., 'openai/gpt-4.1-mini'). Required for downstream cost computation."},"name":{"type":"string","description":"Display name for the AI model (for dashboards and reporting). Must be unique per model/pricing."},"input_token_price":{"type":"number","description":"Per-token input price (USD, per 1,000,000 tokens). Must be non-negative. Used for cost calculation of input tokens."},"output_token_price":{"type":"number","description":"Per-token output price (USD, per 1,000,000 tokens). Must be non-negative. Used for cost calculation of output tokens."},"cache_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional: Price for cached tokens (USD, per 1,000,000 tokens) where applicable. Set to null to omit (if not supported for this vendor/model)."},"reasoning_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional: Price for reasoning tokens (USD, per 1,000,000 tokens) where applicable. Set to null to omit (if not supported for this vendor/model)."},"opened_at":{"type":"string","format":"date-time","description":"UTC timestamp when this pricing takes effect (effective-from). Must be set on creation."}},"required":["code","name","input_token_price","output_token_price","opened_at"],"description":"Create DTO for AI model pricing config (`wrtn_ai_model_pricings`). Used by moderators to register a new pricing policy for a vendor/model, including input/output (and optionally, cache/reasoning) token costs. cache_token_price and reasoning_token_price accept number or null; null disables that pricing category for this vendor/model."},"IWrtnAiModelPricing.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_ai_model_pricings","properties":{"name":{"type":"string","description":"(Optional) Display name for the AI model. If present, will update the display name."},"input_token_price":{"type":"number","description":"(Optional) New input token price (USD, per 1,000,000 tokens). Must be non-negative."},"output_token_price":{"type":"number","description":"(Optional) New output token price (USD, per 1,000,000 tokens). Must be non-negative."},"cache_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"(Optional) New cache token price (USD, per 1,000,000 tokens). Set to null to unset (not supported for this vendor/model)."},"reasoning_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"(Optional) New reasoning token price (USD, per 1,000,000 tokens). Set to null to unset (not supported for this vendor/model)."},"closed_at":{"type":"string","format":"date-time","description":"(Optional) UTC timestamp when this pricing policy is closed/expired. Used for pricing timeline management. Null to leave as open."}},"description":"Update DTO for AI model pricing (`wrtn_ai_model_pricings`). Allows moderator to update display name, token price fields, and set pricing closure/expiry time. cache_token_price and reasoning_token_price accept number or null; null disables category for this vendor/model. All properties are optional; only supplied fields will be updated.","required":[]},"IWrtnModeratorAppointment.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_appointments","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator appointment event. This value directly maps to the 'id' column of the wrtn_moderator_appointments table and uniquely distinguishes each appointment or dismissal record for an internal moderator within the platform."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"The moderator (internal admin/support) who was appointed or had their role changed in this event. Maps to the 'wrtn_moderator_id' foreign key in wrtn_moderator_appointments. This object contains the summary profile of the affected moderator. NOT to be confused with enterprise employees."},"appointer":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"The moderator (internal admin/support) who performed the appointment or dismissal action. Maps to the 'wrtn_appointer_id' of the appointment entry. This field is null for initial system seeding without a specific appointer."},"role":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The role to which the moderator was appointed (e.g., 'master', 'manager', or null for dismissal/removal/seed state). This value comes from the 'role' column and controls downstream platform-level appointment and approval authority for this moderator actor."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this appointment/dismissal took place. This maps to the 'created_at' column and is stored in UTC ISO8601 format with millisecond precision."}},"required":["id","moderator","appointer","created_at"],"description":"A summary DTO representing the appointment or dismissal of a moderator (internal admin/support) for traceability and audit. This object summarizes who was appointed, by whom, to what role, and when. The structure fully aligns with the business requirement for storing and retrieving all appointment/audit events for Wrtn moderator users. See also the full moderator and audit documentation."},"IWrtnModeratorInvitation.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_invitations","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the invitation record, directly from wrtn_moderator_invitations.id. This field ensures global traceability of each moderator invitation across the platform for compliance and audit purposes."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"The moderator (internal admin/support) who sent this invitation. Maps to 'wrtn_moderator_id' in wrtn_moderator_invitations. This object summarizes the inviting moderator actor. NOT an enterprise employee."},"email":{"type":"string","format":"email","description":"The email address to which the moderator invitation was sent. Taken directly from the 'email' column in wrtn_moderator_invitations. Must be a valid, system-approved email address for internal moderator onboarding only."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the invitation was created (audit log). Extracted from 'created_at' and stored in ISO 8601 UTC format with millisecond precision."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"The timestamp when the invitation expires. Null if not yet expired or pending. Maps to 'expired_at' column in wrtn_moderator_invitations. Used to enforce invitation validity windows as defined by company policy."}},"required":["id","moderator","email","created_at"],"description":"A summary of a moderator invitation issued to onboard a new internal admin or support user. This DTO expresses the key business fields needed by the audit-log and invitation lifecycle for Wrtn operator onboarding: unique ID, inviting moderator, recipient email, creation time, and expiration."},"IWrtnModeratorEmail.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_moderator_emails","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator email record. Corresponds to wrtn_moderator_emails.id in the database."},"email":{"type":"string","format":"email","description":"Moderator-owned email address. This is used for SSO/notifications and must be unique per moderator. Sourced from wrtn_moderator_emails.email."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of email verification. If null, email is still pending verification. Sourced from wrtn_moderator_emails.verified_at."},{"type":"null"}],"description":"Timestamp of email verification. If null, email is still pending verification. Sourced from wrtn_moderator_emails.verified_at."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the email record was created. Corresponds to wrtn_moderator_emails.created_at."}},"required":["id","email","verified_at","created_at"],"description":"Summary DTO for moderator's secondary/verified emails. Represents unique and verifiable email addresses for SSO/notifications. All fields mapped directly from wrtn_moderator_emails."},"IWrtnEnterpriseTeamCompanion.ISummary":{"type":"object","description":"Summary DTO for enterprise team companions (memberships) in Wrtn platform. Represents an employee's membership in a specific team, showing which team, their title (role), and membership metadata. Follows the atomic operation and relation mapping rules: when summarized from the employee's perspective, the companion always includes a reference to the team as a summary, but never reverses the direction to include the employee summary (see requirements). Used for listing which teams an employee belongs to across queries and embedding in employee summary responses. See wrtn_enterprise_team_companions table and requirements for field source.\n\n- Follows naming completeness: 'IWrtnEnterpriseTeamCompanion' reflects the exact table and all components.\n- Follows response DTO relational mapping: 'team' is provided as an embedded summary object, not just an ID.\n- Follows field security and business context: no sensitive or actor IDs are exposed.","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","properties":{"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"Summary of the team this companion (membership) references. Always present. Follows relation mapping: only the 'team' is referenced (not the employee)."},"id":{"type":"string","format":"uuid","description":"Unique identifier for this membership (team companion) record. Directly corresponds to the team-employee composite row in wrtn_enterprise_team_companions."},"title":{"oneOf":[{"const":"member","description":"Role of this companion. Only possible values: 'member' or null. Business rule allows only member, never other roles."},{"type":"null"}],"description":"Team role for this membership. Only 'member' or null allowed by business rule (no subtypes, 'member' is the sole value)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the companion joined the team. Reflects team membership start date."}},"required":["team","id","title","created_at"]},"IWrtnEnterpriseEmployeeInvitation.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_employee_invitations","properties":{"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary of the employee who sent this invitation. Follows relation mapping: 'employee' (the inviter) is included as summary object."},"email":{"type":"string","format":"email","description":"Target email address for the invitation (invitee)."},"title":{"oneOf":[{"const":"master","description":"The title/role to appoint if invitation is accepted. One of: master, manager, member."},{"const":"manager","description":"The title/role to appoint if invitation is accepted. One of: master, manager, member."},{"const":"member","description":"The title/role to appoint if invitation is accepted. One of: master, manager, member."}],"description":"The title/role to appoint if invitation is accepted. One of: master, manager, member."},"id":{"type":"string","format":"uuid","description":"Unique identifier of this invitation record."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the invitation was issued/sent."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for the invitation. Null if invitation is still active/unexpired."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"Team to which the invitation applies, as summary object. Nullable; null if invitation is enterprise-scoped or no team associated."},{"type":"null"}],"description":"Team to which the invitation applies, as summary object. Nullable; null if invitation is enterprise-scoped or no team associated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp if invitation is revoked, cancelled or logically removed. Null if invitation is still active."},{"type":"null"}],"description":"Soft-deletion timestamp if invitation is revoked, cancelled or logically removed. Null if invitation is still active."}},"required":["employee","email","title","id","created_at","expired_at","team","deleted_at"],"description":"Summary DTO for enterprise employee invitation, now explicitly including\nnullable team reference and soft-deletion field for compliance and UI filtering.\nSee planning docs for invitation lifecycles and audit requirements."},"IWrtnEnterpriseTeamCompanionInvitation.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companion_invitations","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the team companion invitation. Corresponds to wrtn_enterprise_team_companion_invitations.id in the database."},"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"The team to which the invitation applies. Summary object representing the team. Derived from wrtn_enterprise_team_id foreign key."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The employee being invited. Summary object of the employee. Derived from wrtn_enterprise_employee_id foreign key."},"invitor":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The employee who performed the invitation action. Summary object for the inviting employee. Derived from wrtn_enterprise_invitor_id foreign key."},"invitor_session_id":{"type":"string","format":"uuid","description":"Session context for invitation. Links to wrtn_enterprise_employee_sessions.id for traceability."},"created_at":{"type":"string","format":"date-time","description":"The UTC timestamp for when the invitation was created."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional UTC expiration timestamp for when the invitation becomes invalid."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete marker for the invitation. When set, the invitation cannot be used."},"status":{"oneOf":[{"const":"pending","description":"Invitation has been issued and is awaiting acceptance/expiration."},{"const":"accepted","description":"Invitation has been accepted by the recipient; membership established."},{"const":"revoked","description":"Invitation has been revoked/cancelled and cannot be used."},{"const":"expired","description":"Invitation expired without being accepted and cannot be used."}],"description":"Current lifecycle status of the invitation: pending, accepted, revoked, or expired. Used for UI filtering and audit/reporting purposes."}},"required":["id","team","employee","invitor","invitor_session_id","created_at","expired_at","deleted_at","status"],"description":"Summary DTO for a Team Companion Invitation, now including an explicit invitation status\nfield for audit and dashboard context. Status reflects invitation lifecycle: pending, accepted, revoked, expired."},"IWrtnChatSession.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_chat_sessions","properties":{"id":{"type":"string","format":"uuid","description":"Chat session unique identifier."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary reference to the employee who owns/created this chat session."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Summary reference to the team context of the chat session (null if non-team session)."},"persona":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployeePersona.ISummary","description":"Summary reference to the persona used in this chat session."},"vendor":{"type":"string","description":"AI model vendor code, e.g., openai/gpt-4.1-mini."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display title for the chat session."},"disclosure":{"oneOf":[{"const":"private","description":"Disclosure level for session access: private (owner only), protected (team), or public (all in enterprise)."},{"const":"protected","description":"Disclosure level for session access: private (owner only), protected (team), or public (all in enterprise)."},{"const":"public","description":"Disclosure level for session access: private (owner only), protected (team), or public (all in enterprise)."}],"description":"Disclosure level for session access: private (owner only), protected (team), or public (all in enterprise)."},"created_at":{"type":"string","format":"date-time","description":"Session creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"histories_count":{"type":"integer","description":"Count of message histories/events in the chat session."}},"required":["id","employee","persona","vendor","disclosure","created_at","updated_at"],"description":"Summary DTO for overview and listing endpoints representing a chat session in WrtnEnterprise.\n\n- Provides high-level snapshot of a single session entity for efficient list renderings in dashboards or search screens.\n- Includes summary references mapping full foreign key (FK) relationships for session owner (employee), selected persona configuration, and optionally, team context. This enables immediate UI display of actor, persona, and team without extra queries, in line with AutoBE relation mapping principles.\n- Contains session metadata including AI model vendor, disclosure setting ('private', 'protected', 'public'), business display title, and temporal boundaries (creation and last update times).\n- `histories_count` offers a quick way to display activity/length indicators in listing contexts.\n- This summary variant is purpose-built for endpoints where full histories or token details are not required, optimizing bandwidth and frontend performance for high-volume session overviews or analytics rollup views."},"IWrtnChatSessionConnection.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_chat_session_connections","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the chat session connection. Corresponds to the primary key of wrtn_chat_session_connections."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"The enterprise employee who is the participant in this connection. FK: wrtn_enterprise_employee_id. Always resolved as an embedded object summary, not just an ID."},"connected_at":{"type":"string","format":"date-time","description":"The timestamp when this employee established a connection to the chat session. Corresponds to wrtn_chat_session_connections.connected_at."},"disconnected_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"The timestamp when this employee disconnected from the chat session, or null if still connected. Corresponds to wrtn_chat_session_connections.disconnected_at."}},"required":["id","employee","connected_at"],"description":"Summary DTO for an individual chat session connection event.\n\n- Represents a single join/leave event in a chat session's lifecycle for a given employee.\n- Provides audit, presence, and analytics context for session participation, enabling tracking of attendance and duration.\n- Always includes summary object mapping of the employee (FK expansion via AutoBE mapping), so dashboards and analytics can display actor information directly in context.\n- Includes precise connection/disconnection timestamps for timeline analytics, audit trail, and visualizing session availability/disappearance in timeline views.\n- Used in endpoints and analytics pipelines for reconstructing participation graphs, presence heatmaps, or audit investigation flows.\n- This summary variant ensures minimal, consistent output for high-volume analytics with full relationship mapping."},"IWrtnProcedureSession.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_procedure_sessions","title":"Wrtn Procedure Session Summary","description":"A summary DTO for an AI procedure session (procedure run) in the WrtnEnterprise system. Represents a single execution of a business-defined procedure by an employee. Includes key metadata and context objects. This schema maps directly to the 'wrtn_procedure_sessions' table for business reporting and analytics APIs.\n\n*References:*\n- Prisma schema: wrtn_procedure_sessions\n- Business context: See business requirements section 'AI Procedure Session Execution' for details.\n","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the procedure session. Maps to Prisma 'id' column."},"procedure":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary","description":"Procedure metadata for the run. Summarises the catalog entry associated to this session."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee (actor) who initiated the procedure session. Provides minimal context for summary views."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Team context associated with the procedure session, if any. Nullable."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display title for the procedure session"},"disclosure":{"oneOf":[{"const":"private","description":"Disclosure/access level for the session. Must be one of 'private', 'protected', or 'public'.\n- 'private' => Only owner can access.\n- 'protected' => Team can access.\n- 'public' => All employees in the enterprise may access."},{"const":"protected","description":"Disclosure/access level for the session. Must be one of 'private', 'protected', or 'public'.\n- 'private' => Only owner can access.\n- 'protected' => Team can access.\n- 'public' => All employees in the enterprise may access."},{"const":"public","description":"Disclosure/access level for the session. Must be one of 'private', 'protected', or 'public'.\n- 'private' => Only owner can access.\n- 'protected' => Team can access.\n- 'public' => All employees in the enterprise may access."}],"description":"Disclosure/access level for the session. Must be one of 'private', 'protected', or 'public'.\n- 'private' => Only owner can access.\n- 'protected' => Team can access.\n- 'public' => All employees in the enterprise may access."},"created_at":{"type":"string","format":"date-time","description":"Procedure session creation timestamp (@see wrtn_procedure_sessions.created_at)"},"updated_at":{"type":"string","format":"date-time","description":"Last update time for this session."}},"required":["id","procedure","employee","disclosure","created_at","updated_at"]},"IWrtnEnterpriseProcedureUsageAnalyticsReport":{"type":"object","description":"Aggregate analytics report data for a specific AI procedure, combining execution and usage metrics.\nThis DTO is used for analytic endpoints and dashboards to expose procedure adoption, usage, and cost data in a business-friendly view.\n\nIntended for use by company, team, or moderator actors to view statistics for business and reporting KPIs.\n\nReferences:\n- wrtn_procedures (catalog, master data)\n- wrtn_procedure_sessions (session count/metrics)\n- wrtn_billing_usage_events (token/cost metrics)\n- See also 'Analytics' planning document.","properties":{"procedure":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary","description":"The procedure (catalog entry) for which analytics are reported."},"session_count":{"type":"integer","description":"Total count of unique session executions for the given procedure in the reporting period."},"actor_count":{"type":"integer","description":"Number of unique employees who executed this procedure in the period."},"total_token_usage":{"$ref":"#/components/schemas/IWrtnTokenUsage","description":"Total aggregate token usage for all executions of this procedure during the reporting period."},"total_cost_usd":{"type":"number","description":"Total cost (USD, or main currency) for all executions of the procedure in the period."},"period_start":{"type":"string","format":"date-time","description":"Start timestamp (ISO8601) for reporting/aggregation window (inclusive)."},"period_end":{"type":"string","format":"date-time","description":"End timestamp (ISO8601, exclusive) for reporting window."}},"required":["procedure","session_count","actor_count","total_token_usage","total_cost_usd","period_start","period_end"]},"IWrtnEnterpriseProcedure.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_procedures","description":"Summary schema for enterprise-level AI procedure assignment. Represents which procedures are assigned to each enterprise, with configuration context. Used for listing or referencing allowed procedures in enterprise/team scope assignments. Includes essential identifiers and assignment metadata. All properties reflect the underlying 'wrtn_enterprise_procedures' Prisma table definition.\n\nThis schema is critical for rendering procedure catalogs, access configuration review at the enterprise level, analytics, and compliance reviews. It omits update or auditing history fields but includes core linkage attributes required for permission and allowance determination. The 'procedure' reference transforms the 'wrtn_procedure_id' scalar FK to an object.\n\nSee also: wrtn_procedures, wrtn_enterprises, wrtn_enterprise_employees.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the procedure assignment (wrtn_enterprise_procedures.id)."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"The enterprise to which this procedure assignment belongs. Maps wrtn_enterprise_id to reference object."},"procedure":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary","description":"The catalogued AI procedure allowed for this enterprise. Maps wrtn_procedure_id scalar FK to reference object."},"configurator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"The employee who last configured this assignment (nullable for moderator setup or defaults)."},"sequence":{"type":"integer","description":"Order/priority of this procedure within the enterprise's assigned procedure list (wrtn_enterprise_procedures.sequence). Lower values appear earlier."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the assigned procedure was created (wrtn_enterprise_procedures.created_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp this assignment was deleted/removed (if applicable) (wrtn_enterprise_procedures.deleted_at). Null if active."}},"required":["id","enterprise","procedure","sequence","created_at"]},"IWrtnEnterpriseTeamProcedure.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_procedures","description":"Summary schema for team-scoped AI procedure assignment. Represents a procedure ('wrtn_procedure_id') assigned to a specific team within an enterprise, potentially overriding enterprise-level assignments. Used for listing/managing procedures at the team level and for access control analytics.\n\nAll properties reflect the underlying 'wrtn_enterprise_team_procedures' Prisma model, transforming relevant FKs to object references. This schema is needed for permission display, team configuration screens, and procedure analytics/reporting. Includes assignment linkage, configuration context, and order.\n\nSee also: wrtn_enterprise_teams, wrtn_procedures, wrtn_enterprise_team_companions.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the team-procedure assignment (wrtn_enterprise_team_procedures.id)."},"team":{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary","description":"The team which this procedure assignment is scoped to. Transforms wrtn_enterprise_team_id FK to reference object."},"procedure":{"$ref":"#/components/schemas/IWrtnProcedure.ISummary","description":"The catalogued AI procedure assigned to this team. Transforms wrtn_procedure_id scalar FK to object reference."},"configurator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeamCompanion.ISummaryFromTeam"},{"type":"null"}],"description":"The companion (employee-in-team) who assigned/configured this procedure for the team (nullable for default setup)."},"sequence":{"type":"integer","description":"Ordering of this procedure for display or selection in the team's assigned procedures (wrtn_enterprise_team_procedures.sequence). Lower numbers are higher priority."},"created_at":{"type":"string","format":"date-time","description":"Timestamp this team-procedure assignment was created (wrtn_enterprise_team_procedures.created_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp this assignment was deleted/removed (if applicable) (wrtn_enterprise_team_procedures.deleted_at). Null if active."}},"required":["id","team","procedure","sequence","created_at"]},"IWrtnEnterpriseTeamCompanion.ISummaryFromTeam":{"type":"object","x-autobe-prisma-schema":"wrtn_enterprise_team_companions","description":"Summary schema for a team companion (employee-in-team) rendered from the team context. Used for embeddeding configurator references in team procedure assignments. Does NOT include 'team' property itself (use ISummaryFromEmployee for the other perspective).\n\nSee also: wrtn_enterprise_team_companions table.","properties":{"id":{"type":"string","format":"uuid","description":"Team companion unique identifier."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee assigned as a member in this team."},"role":{"oneOf":[{"const":"member"},{"type":"null"}],"description":"This indicates the user's membership role in the team: always 'member' when active, or null if not currently active in the team."}},"required":["id","employee"]},"IWrtnEnterpriseDocumentation.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_documentations","description":"Summary DTO for enterprise documentation articles. This type is optimized for list and embedding views, offering essential information for UI display and quick navigation. Every documentation entry is uniquely associated with an enterprise and the employee author. Summary excludes full body content and version arrays, focusing on identifiers, title, and basic context. Derived from the wrtn_documentations Prisma model.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this documentation entry (wrtn_documentations.id). Primary key."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Summary of the parent enterprise context. Transformed from wrtn_enterprise_id foreign key. Always included."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary of the documentation creator/owner. Maps from wrtn_enterprise_employee_id foreign key."},"slug":{"type":"string","description":"URL- and business-unique slug for identifying the documentation within an enterprise (wrtn_documentations.slug)."},"title":{"type":"string","description":"Display title for this documentation (wrtn_documentations.title)."},"description":{"oneOf":[{"type":"string","description":"A short summary for search and catalog display of this documentation article."},{"type":"null"}],"description":"A short summary for search and catalog display of this documentation article."},"published":{"type":"boolean","description":"Indicates if this documentation is currently visible to its intended audience. Maps from wrtn_documentations.published."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of original documentation creation (wrtn_documentations.created_at). ISO8601."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update or modification. Maps from wrtn_documentations.updated_at. ISO8601."}},"required":["id","enterprise","employee","slug","title","published","created_at","updated_at"]},"IWrtnBillingInvoiceItem.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_invoice_items","properties":{"id":{"type":"string","format":"uuid","description":"Item unique identifier; wrtn_billing_invoice_items.id."},"category":{"type":"string","description":"Cost category code, such as chat, procedure, file, etc. wrtn_billing_invoice_items.category."},"description":{"type":"string","description":"Human-readable description of the line item, for display/reporting purposes."},"amount":{"type":"number","format":"double","description":"Charge amount for this item (positive for billable, negative for credit)."},"sequence":{"type":"integer","description":"Sequence number of invoice items; for display ordering."},"created_at":{"type":"string","format":"date-time","description":"Item creation timestamp."},"usage_event":{"$ref":"#/components/schemas/IWrtnBillingUsageEvent.ISummary","description":"Reference to the associated usage event entity. Sourced from wrtn_billing_usage_events."}},"required":["id","category","description","amount","sequence","created_at","usage_event"],"description":"Summary of a single invoice line item, including category, description, amount, and linkage to underlying usage event. Used in invoice detail/summary views."},"IWrtnBillingUsageEvent.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_usage_events","properties":{"id":{"type":"string","format":"uuid","description":"Usage event unique identifier, from wrtn_billing_usage_events.id."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Enterprise where the usage event was incurred."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Team within the enterprise associated with usage event, if any."},"employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Employee tied to usage (if any)."},"category":{"type":"string","description":"Usage event category (chat, procedure, file, notification, support, etc)."},"source_id":{"type":"string","format":"uuid","description":"ID of the upstream entity (e.g., session, message, procedure run) that generated this usage event."},"token_usage":{"type":"integer","description":"Consumed tokens for billing/analytics. Zero for non-token events."},"amount":{"type":"number","format":"double","description":"Cost incurred for this event in USD/base currency. Positive for billable, negative for credit."},"occurred_at":{"type":"string","format":"date-time","description":"Business event occurrence timestamp (UTC), for billing cycle."},"created_at":{"type":"string","format":"date-time","description":"Record logging (entry) timestamp."}},"required":["id","enterprise","category","source_id","token_usage","amount","occurred_at","created_at"],"description":"Summary view of a usage event record underpinning billing. Maps to wrtn_billing_usage_events. Includes context for drill-down/invoice decomposition."},"IWrtnBillingPayment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the billing payment (wrtn_billing_payments.id, UUIDv4 primary key). Used for reconciliation, business audit, and compliance reporting."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Summary object for the enterprise (company/tenant) that this payment belongs to. Always required and never null. Used for financial, business, and data isolation context."},"invoice":{"oneOf":[{"$ref":"#/components/schemas/IWrtnBillingInvoice.ISummary"},{"type":"null"}],"description":"Associated invoice for this payment, or null if the payment is an advance, unallocated, or not linked directly to a specific invoice. Used for financial trace, dispute resolution, and downstream invoice detail reporting. May be null (unallocated payment/credit)."},"moderator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},{"type":"null"}],"description":"Moderator (internal admin) who processed the payment, if applicable; may be null when payment was auto-credited or was customer-initiated. Used for compliance and audit trails in internal financial management."},"amount":{"type":"number","description":"Payment amount in USD (or the system's base accounting currency). Always positive. Used for roll-up, reconciliation, and display in invoices/billing. Never negative."},"payment_method":{"type":"string","description":"Payment method used: allowed values include 'bank', 'card', 'wire', 'refund', 'credit', etc. See business enum reference for the complete list of supported payment methods."},"payment_reference":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"External payment reference or descriptor (such as payment processor reference, transaction id, or remitter info). Used for reconciliation, customer support, or compliance resolution. Nullable if not available for the payment method used."},"status":{"type":"string","description":"Current status of the payment. Allowed values include: 'pending', 'completed', 'failed', 'refunded', 'disputed', 'cancelled', as per billing business logic. See policy for lifecycle management of payment records."},"created_at":{"type":"string","format":"date-time","description":"UTC ISO8601 timestamp for payment record creation. Used for business processing, invoice/accounting period, and compliance investigation."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when payment was settled or posted (if completed). Null for pending or non-completed payments. UTC ISO8601 format. Used for reconciliation and billing cycle analysis."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete marker timestamp for record reversals, cancellations, or account cleanup. If present, payment is considered logically removed for reporting but preserved for business audit/compliance. Null when active."}},"required":["id","enterprise","amount","payment_method","status","created_at"],"description":"Summary DTO for wrtn_billing_payments (payment records). Used in dashboards, billing analytics, and reporting. Provides all relevant payment context, audit-compliant reference linkage, and complete field descriptions for business clarity, compliance, and developer usability. All downstream references are formatted as summary objects (never raw FKs). Currency is always in the system base (USD)."},"IWrtnBillingCredit.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the billing credit event (wrtn_billing_credits.id, UUIDv4 primary key). Used for tracking credits, financial reporting, and audit logs."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"The enterprise (company/tenant) for which this credit applies. Always required and not nullable. Used for financial attribution, reporting, and business analysis."},"invoice":{"oneOf":[{"$ref":"#/components/schemas/IWrtnBillingInvoice.ISummary"},{"type":"null"}],"description":"Associated invoice for this credit if allocated; nullable for unallocated credits or when the credit is advance/posting. Used for postpaid settlement rollup, dispute linking, and exact cost offsetting. May be null."},"moderator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},{"type":"null"}],"description":"Moderator (administrator/internal actor) who posted or adjusted the credit, or null if credit was generated automatically, customer-initiated, or not applicable under current workflow. Used for compliance and business traceability."},"amount":{"type":"number","description":"Amount of the credit in USD (or the system’s base currency). Must always be positive for standard credits. Used for offsetting invoice balances, tracking promotions/refunds, and reporting closing balance on invoices and statements."},"category":{"type":"string","description":"Credit category code: allowed values include 'manual', 'refund', 'promo', 'overpayment', 'dispute', 'reversal', etc., as defined by billing and audit policy. Used for financial categorization, compliance, and analytics."},"reason":{"type":"string","description":"Narrative, human-readable justification or rationale for this credit. Required for compliance review, business documentation, and customer support visibility. Should clearly explain why the credit was posted."},"issued_at":{"type":"string","format":"date-time","description":"ISO8601 UTC timestamp when the credit was posted to the system. This timestamp drives reporting, audit timeline, and pipeline reconciliation for finance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete marker timestamp for reversed credits, account removal, or historic credit cleanup. Used to manage non-disruptive record lifecycle for audit/compliance. If not null, credit is logically inactive."}},"required":["id","enterprise","amount","category","reason","issued_at"],"description":"Summary DTO for wrtn_billing_credits (credit/posting records). Used for billing, accounting, dashboard analytics, and audit/compliance trails. All key business attributes, system attribution, and reference objects are clearly described, and currency is always in system base (USD) unless otherwise documented. Provides maximum field clarity for developer consumption and ensures dashboard and statement integrations are correct and complete."},"IWrtnSupportTicketAttachment.ISummary":{"type":"object","description":"Summary DTO for a support ticket attachment. Represents a single file attachment, either on the ticket itself or a reply. Now explicitly includes ticket and reply summary objects (or null) as parent context references, for audit and embedding clarity.","x-autobe-prisma-schema":"wrtn_support_ticket_attachments","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (PK) of the support ticket attachment."},"file":{"$ref":"#/components/schemas/IWrtnAttachmentFile.ISummary","description":"Reference to the underlying file in the central file repository."},"sequence":{"type":"integer","description":"Display order of this attachment within the ticket or reply."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of attachment creation."},"ticket":{"oneOf":[{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary"},{"type":"null"}],"description":"Reference to the parent support ticket for this attachment, or null if attached to a reply only."},"reply":{"oneOf":[{"$ref":"#/components/schemas/IWrtnSupportTicketReply.ISummary"},{"type":"null"}],"description":"Reference to the parent support ticket reply for this attachment, or null if attached directly to the ticket."}},"required":["id","file","sequence","created_at","ticket","reply"]},"IWrtnSupportFeedback.ISummary":{"type":"object","description":"Summary type representing enterprise user's direct feedback submission regarding service, support, or platform functionality. Now explicitly includes documentation_id, ticket_id, faq_id (all string | null) for list context navigation, along with possible summary objects for each context for UI embedding.","x-autobe-prisma-schema":"wrtn_support_feedbacks","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this feedback entry, directly matching the primary key (wrtn_support_feedbacks.id)."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Summary of the employee who submitted this feedback. FK reference (wrtn_support_feedbacks.wrtn_enterprise_employee_id) transformed to summary object for context. Contains essential actor info."},"category":{"type":"string","description":"Main topic or category chosen by user (e.g., 'UX', 'reliability', 'pricing', 'onboarding', etc). Pure string typed, with values chosen by business logic, not an enum."},"detail":{"type":"string","description":"Detailed feedback text submitted by user. May include suggestions, compliments, or criticisms. Required."},"documentation_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the documentation referenced by this feedback, if any. Used for navigation in summary views."},"ticket_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the ticket referenced by this feedback, if any. Used for navigation in summary context."},"faq_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the FAQ referenced by this feedback, if any. Used for navigation in summary context."},"documentation":{"oneOf":[{"$ref":"#/components/schemas/IWrtnDocumentation.ISummary"},{"type":"null"}],"description":"If feedback references particular documentation object summary, provides context. Null if none."},"ticket":{"oneOf":[{"$ref":"#/components/schemas/IWrtnSupportTicket.ISummary"},{"type":"null"}],"description":"If feedback is about/supports a particular ticket/experience, summary context. Null if none."},"faq":{"oneOf":[{"$ref":"#/components/schemas/IWrtnFaq.ISummary"},{"type":"null"}],"description":"If this feedback is linked to a FAQ item, provides summary context. Null if none."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp for when feedback was submitted. (wrtn_support_feedbacks.created_at)"}},"required":["id","employee","category","detail","created_at","documentation_id","ticket_id","faq_id","documentation","ticket","faq"]},"IWrtnSupportFeatureVote.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_support_feature_votes","description":"Summary view of a support feature vote. Each vote is cast by an enterprise employee for a feature request, and tracks its audit trail, voter, and creation time. This schema corresponds to wrtn_support_feature_votes and is used to present compact vote context for UI lists, statistics, and aggregation endpoints.\n\nEach vote is attributed to its feature request and the employee who cast it. Voters can only vote once per feature (enforced by DB unique constraint). The creation timestamp enables trend and demand analysis for roadmap prioritization.\n\nNo sensitive fields are present. Used in feature voting flows, roadmap stats, and upvoting features.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the support feature vote (wrtn_support_feature_votes.id)."},"featureRequest":{"$ref":"#/components/schemas/IWrtnSupportFeatureRequest.ISummary","description":"Reference to the support feature request being voted for."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Voting employee reference (the actor who cast this vote)."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 creation timestamp of the vote record."}},"required":["id","featureRequest","employee","created_at"]},"IWrtnNotification.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_notifications","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification, mapped to wrtn_notifications.id."},"event_type":{"type":"string","description":"Notification business type or kind (e.g., 'system', 'personal', 'compliance', 'security')."},"subject":{"type":"string","description":"Notification subject/title (short, for display)."},"body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional full body or description of the notification."},"importance":{"type":"string","description":"Importance level (e.g., 'info', 'action_required', 'critical')."},"target_scope":{"type":"string","description":"Target scope: e.g., 'individual', 'team', 'enterprise', 'role'. Specifies recipient kind."},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target entity ID if scope is individual/team/enterprise. Nullable for global announcements."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Scheduled delivery time (for delayed or scheduled notifications). Nullable if immediate."},"sent_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Notification sent/delivered timestamp."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Notification delivery successful timestamp (nullable if not yet delivered)."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for notification validity (nullable if not auto-expiring)."},"escalation_policy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Escalation policy or rule code for business logic."},"escalated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when notification escalated, if escalated."},"created_at":{"type":"string","format":"date-time","description":"Notification creation timestamp, in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Deleted (soft delete) timestamp, if applicable."}},"required":["id","event_type","subject","importance","target_scope","created_at","updated_at"],"description":"Summary representation of a Notification in the Wrtn system. Contains business type, subject, display, importance, scheduling, and audit fields. Maps to the wrtn_notifications table. Used for list views, brief displays, or reference embedding."},"IWrtnNotificationDelivery.ISummary":{"type":"object","description":"Summary DTO representing a single notification delivery instance to a user or system actor. Used for notification delivery history, audit, analytics, and compliance reporting in WrtnEnterprise. Each record corresponds to a delivery attempt for a single recipient and channel, and captures all delivery state, timing, actor, and status fields necessary for operational dashboards, troubleshooting, delivery analytics, or audit trail viewing.\n\nAll properties are drawn directly from the wrtn_notification_deliveries table or related notification/channel tables. The schema is suitable for notification detail endpoints, delivery history tabs in user dashboards, and compliance traceability modules. It does not expose full channel configuration or notification templates, referencing only the summary objects for context.\n\nKey business rules and enum values are summarized per property description below. The combination of status and timing fields (delivered_at, read_at, expired_at, etc.) enables precise determination of notification lifecycle, SLA, and escalation/alert conditions.","x-autobe-prisma-schema":"wrtn_notification_deliveries","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for the notification delivery record. Maps to wrtn_notification_deliveries.id. Used for audit trace, correlation, and debugging notification failures."},"notification_id":{"type":"string","format":"uuid","description":"Reference to the root notification (wrtn_notifications.id) to which this delivery belongs. Used to join delivery attempts to their originating notification event for audit and troubleshooting."},"channel":{"$ref":"#/components/schemas/IWrtnNotificationChannel.ISummary","description":"Channel object detailing delivery medium for this attempt (e.g., email, in_app, push, sms). See code property for common values and full enum in channel schema."},"recipient_kind":{"type":"string","description":"Kind of actor for the recipient of this delivery attempt. Typical values: 'employee', 'moderator'. Used for targeting and audit filtering."},"recipient_id":{"type":"string","format":"uuid","description":"Actor's (employee or moderator) UUID who received the delivery attempt. For recipient_kind='employee' matches wrtn_enterprise_employees.id; for 'moderator', wrtn_moderators.id."},"delivery_status":{"type":"string","description":"Current or final status of this delivery attempt, representing state machine of notification delivery. Enum values include: 'pending', 'delivered', 'failed', 'expired', 'read', 'escalated' (business logic may define more). See business documentation for escalation/compliance workflows. Used for tracking SLAs and error handling."},"failure_reason":{"oneOf":[{"type":"string","description":"If status is 'failed', this is the business-visible/textual cause (e.g., 'smtp_bounce', 'user_blocked', 'invalid_recipient', etc). Otherwise null."},{"type":"null"}],"description":"If status is 'failed', this is the business-visible/textual cause (e.g., 'smtp_bounce', 'user_blocked', 'invalid_recipient', etc). Null for non-failure statuses."},"attempt_sequence":{"type":"integer","description":"Which attempt number this represents for a given (notification, recipient, channel) tuple. 1 means first attempt, increments for retries after failure. Used for escalation and policy enforcement."},"scheduled_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime notification was scheduled to be delivered (ISO8601 UTC)."},{"type":"null"}],"description":"When delivery was scheduled to occur, if applicable. Null if sent immediately. Used for delayed/batch channels."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the notification was delivered to recipient (ISO8601 UTC)."},{"type":"null"}],"description":"Datetime when delivery reached the final channel (e.g., SMTP handoff, push sent, in-app queued). Null if not delivered."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"When user read/acknowledged the notification (ISO8601 UTC)."},{"type":"null"}],"description":"Datetime when recipient read or acknowledged the delivery (e.g., in-app opened, email link clicked). Null if never acknowledged."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the delivery attempt expired (ISO8601 UTC)."},{"type":"null"}],"description":"Datetime when this delivery is no longer actionable (e.g., notification expired or session closed). Null if still eligible/active."},"escalation_policy":{"oneOf":[{"type":"string","description":"Business code/policy identifier for escalation logic in delivery flows (e.g., 'auto_resend', 'sms_backup', etc)."},{"type":"null"}],"description":"If escalated after repeated failures or non-acknowledgment, policy identifier triggered for alerting/backup channel per business rules. Null if no escalation occurred."},"escalated_at":{"oneOf":[{"type":"string","format":"date-time","description":"When escalation action was triggered (ISO8601 UTC)."},{"type":"null"}],"description":"Datetime escalation policy took effect, if any. Null if never escalated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp record was created (when attempt was first scheduled). Used for audit and reporting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this delivery record (e.g., due to retry, status change, read, or explicit cancellation)."}},"required":["id","notification_id","channel","recipient_kind","recipient_id","delivery_status","attempt_sequence","created_at","updated_at"]},"IWrtnNotificationChannel.ISummary":{"type":"object","description":"Summary DTO for a notification delivery channel configuration, as registered in wrtn_notification_channels. Used for analytics, user/channel preference displays, and system notification routing. Provides essential configuration and identification fields for each supported channel.\n\nCommon channel codes include: 'email' (email delivery), 'in_app' (web in-app messages), 'push' (mobile device push), 'sms' (SMS/text message), plus potentially vendor/system-specific types. This summary is referenced by notification delivery logs (e.g., IWrtnNotificationDelivery.ISummary) and notification preference management.\n\nAll properties are mapped from wrtn_notification_channels table and are needed for rendering configuration and audit screens, as well as for informing notification dispatch and reporting layers.","x-autobe-prisma-schema":"wrtn_notification_channels","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for notification channel (wrtn_notification_channels.id). Used for all downstream reference."},"code":{"type":"string","description":"System-defined code for the delivery channel. Enum values include (non-exhaustive): 'email', 'in_app', 'push', 'sms', plus integration/vendor codes as configured in wrtn_notification_channels.code. Used for both API and business logic targeting."},"display_name":{"type":"string","description":"User-facing display label for channel, used in dashboards, settings screens, and delivery reports (e.g., 'E-Mail', 'Push', 'Mobile App Notification')."},"description":{"oneOf":[{"type":"string","description":"Rich text or help/long-form description of the channel's intended business use, applicable vendor/integration notes, and best-practice delivery guidance. For example, 'Delivers alert to user’s registered email address via trusted SMTP provider with retry and escalation policies.'"},{"type":"null"}],"description":"Optional long-form description of this channel’s purpose, integration strategy, and business caveats. Used for admin/configuration UIs and internal audit notes; null if not provided."},"enabled":{"type":"boolean","description":"Whether the channel is currently enabled/available for delivery according to system configuration. Only enabled channels should be used for new delivery attempts except during maintenance/recovery."},"priority":{"type":"integer","description":"Internal delivery/display priority. Lower integer means higher display/attempt priority for delivery policy (default: 1=highest). Used for default channel selection, failover, and user dashboard/list sorting."}},"required":["id","code","display_name","enabled","priority"]},"IWrtnAnalyticsKpiReport.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_kpi_reports","description":"Summary DTO for the KPI Report aggregate entity. Used to expose aggregate KPI analytics for dashboards and reporting, scoped to enterprise/team, period, and metric category. This schema summarizes a business KPI snapshot, including the enterprise/team context, KPI range, category, and a structured JSON blob of computed metrics for analytics dashboards and reporting. The aggregation_json field contains serialized JSON representing metrics such as session counts, user counts, token usage, and costs—see that field's description for more details.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the KPI report aggregate. Primary key from wrtn_analytics_kpi_reports. Always present."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"The referenced enterprise for this analytic KPI report. This object replaces the wrtn_enterprise_id field from the DB, providing context about the company this KPI summary covers."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"The referenced team for this KPI report, or null if the report covers the whole enterprise. This replaces wrtn_enterprise_team_id from the DB."},"kpi_period_start":{"type":"string","format":"date-time","description":"ISO 8601 format. Start timestamp (inclusive) for KPI reporting window. Corresponds to kpi_period_start in the DB."},"kpi_period_end":{"type":"string","format":"date-time","description":"ISO 8601 format. End timestamp (exclusive) for KPI reporting window. Corresponds to kpi_period_end in the DB."},"category":{"type":"string","description":"KPI reporting category, such as 'chat_session', 'procedure_execution', 'cost', etc. Used for segmenting metric types within the report. See business documentation for allowed values."},"aggregation_json":{"type":"string","description":"JSON-serialized structure containing all business metrics and KPI aggregates for this report window and category.\n\nTypical keys include metrics like session counts, message counts, unique users, operation duration averages, token usage (input/output/total), cost analytics, or adoption rate breakdowns. The structure will depend on the dashboard/reporting context specified by `category`.\n\nFor example:\n{\n  \"total_sessions\": 1204,\n  \"unique_users\": 143,\n  \"total_tokens\": 903850,\n  \"cost_usd\": 52.63,\n  \"avg_session_duration\": 87.7,\n  \"top_team\": \"Sales\"\n}\nWill often be encrypted or escaped as a JSON string for compatibility, but consumers should expect well-structured business KPI summaries inside this field."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this KPI report record (ISO 8601 UTC)."}},"required":["id","enterprise","team","kpi_period_start","kpi_period_end","category","aggregation_json","created_at"]},"IWrtnAnalyticsKpiTraffic.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_kpi_traffic","description":"Summary DTO for aggregated KPI traffic records. Represents a sampled interval of traffic activity/events, capturing organizational context, interval, analytic category, and a JSON blob of traffic breakdowns. Used by dashboards and analytics modules for trend visualization, anomaly detection, and usage analytics. The aggregate_json property contains serialized JSON with analytic breakdowns—see that property for details and typical structure.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the KPI traffic record, corresponding to the primary key in wrtn_analytics_kpi_traffic."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference to the associated enterprise. Provides essential organization-level context for the KPI report and enforces enterprise-level data isolation."},"team":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseTeam.ISummary"},{"type":"null"}],"description":"Reference to the associated team within the enterprise. Null if the record is for the entire enterprise rather than a specific team. Embedding this summary enables team-based drill-down in analytics."},"time_bucket_start":{"type":"string","format":"date-time","description":"ISO 8601 timestamp for the start of the traffic sampling window (inclusive)."},"time_bucket_end":{"type":"string","format":"date-time","description":"ISO 8601 timestamp for the end of the sampled interval (exclusive)."},"traffic_category":{"type":"string","description":"Business analytics category for the traffic sample (e.g., 'chat_message', 'procedure_execution', 'connection', 'file_attachment'). See business documentation for allowed values."},"aggregate_json":{"type":"string","description":"JSON-serialized metrics structure containing analytic event breakdowns for this time bucket and category.\n\nExpected keys typically include event counts, time-series metric buckets, user activity counts, volume breakdowns, and performance stats, structured as per the corresponding traffic category.\n\nExample:\n{\n  \"event_count\": 523,\n  \"unique_actors\": 44,\n  \"avg_duration_sec\": 6.2,\n  \"bucket\": \"2025-10-25T00:00:00Z\"\n}\nConsumers should parse this JSON to extract detailed traffic analytics for dashboarding and alerting."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this KPI record was created (ISO 8601 UTC), used for audit and dashboard synchronization."}},"required":["id","enterprise","time_bucket_start","time_bucket_end","traffic_category","aggregate_json","created_at"]},"IWrtnAnalyticsReportLog.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_analytics_report_logs","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the analytics report log summary. Directly maps to `wrtn_analytics_report_logs.id`."},"report_template":{"type":"string","description":"Template or dashboard/view rendered or exported. Maps to `wrtn_analytics_report_logs.report_template`. Indicates what report this event pertains to."},"event_kind":{"type":"string","description":"The type of reporting event that this summary log entry describes (e.g., 'render', 'schedule', 'export', 'error', etc). Maps to `wrtn_analytics_report_logs.event_kind`."},"event_json":{"type":"string","description":"Supplemental audit data or event payload as a JSON string. Stores detailed business/audit context and is mapped to `wrtn_analytics_report_logs.event_json`."},"created_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format (with timezone). When this event was created. Maps to `wrtn_analytics_report_logs.created_at`."},"employee":{"oneOf":[{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary"},{"type":"null"}],"description":"Reference to the employee (actor) performing or viewing the analytics report. Always null if log actor is a moderator. Only one of employee or moderator will be non-null for each log entry."},"moderator":{"oneOf":[{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},{"type":"null"}],"description":"Reference to the moderator (internal admin/support) who performed this analytics log event. Always null if log actor is an enterprise employee. Only one of employee or moderator will be non-null for each log entry."},"enterprise":{"$ref":"#/components/schemas/IWrtnEnterprise.ISummary","description":"Reference to the target enterprise for the analytics report event. Maps to `wrtn_analytics_report_logs.wrtn_enterprise_id` as an object. Provided for traceability and data isolation context."}},"required":["id","report_template","event_kind","created_at","employee","moderator","enterprise"],"description":"Summary of an analytics report log entry, reflecting a single event or export of a dashboard or analytics report for audit and compliance. Each log entry's actor is exactly one of employee or moderator; the other will be null. This nullable structure is critical for OpenAPI codegen and contract validation."},"IWrtnAiModelPricing.ISummary":{"type":"object","x-autobe-prisma-schema":"wrtn_ai_model_pricings","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for model pricing summary. Maps to `wrtn_ai_model_pricings.id`."},"code":{"type":"string","description":"Unique AI vendor/model code (e.g., 'openai/gpt-4o', 'anthropic/claude-3-opus'). Maps to `wrtn_ai_model_pricings.code`."},"name":{"type":"string","description":"Display name for the AI model (for use in dashboards and cost exports). Maps to `wrtn_ai_model_pricings.name`."},"input_token_price":{"type":"number","description":"Per-token input price (USD, per 1,000,000 tokens) for this model/version. For cost computation and reporting. Maps to `wrtn_ai_model_pricings.input_token_price`."},"output_token_price":{"type":"number","description":"Per-token output price (USD, per 1,000,000 tokens) for this model. Maps to `wrtn_ai_model_pricings.output_token_price`."},"cache_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional: Per-token price for cache tokens (USD, per 1,000,000) if supported. Can be null. Maps to `wrtn_ai_model_pricings.cache_token_price`."},"reasoning_token_price":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional: Per-token price for reasoning tokens (USD, per 1,000,000) if applicable for model/vendor. Can be null. Maps to `wrtn_ai_model_pricings.reasoning_token_price`."},"opened_at":{"type":"string","format":"date-time","description":"When this price policy becomes effective for this model. Maps to `wrtn_ai_model_pricings.opened_at` (ISO 8601, UTC)."},"closed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When this price policy ends. Null if currently effective. Maps to `wrtn_ai_model_pricings.closed_at`."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation for audit/compliance. Maps to `wrtn_ai_model_pricings.created_at`."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this pricing record. Maps to `wrtn_ai_model_pricings.updated_at`."},"moderator":{"$ref":"#/components/schemas/IWrtnModerator.ISummary","description":"Reference to the moderator (admin) who configured this pricing entry. Maps to `wrtn_ai_model_pricings.wrtn_moderator_id` as a summary object."}},"required":["id","code","name","input_token_price","output_token_price","opened_at","created_at","updated_at","moderator"],"description":"Summary schema for an AI model/token pricing entry, directly reflecting the price configuration for a single AI vendor/model. All monetary fields reported per 1M tokens in USD. Includes period of validity, reference to the configuring moderator, and audit timestamps. Direct mapping for cost computation and analytics."},"IWrtnAnalyticsReportLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Must be a positive integer, starting from 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of report log entries per page. Typical defaults and upper bounds are enforced at the API layer; must be a positive integer usually within 1-100."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field by which to sort the result set. Allowed fields: 'created_at', 'report_template', or 'event_kind'."},{"const":"report_template","description":"Field by which to sort the result set. Allowed fields: 'created_at', 'report_template', or 'event_kind'."},{"const":"event_kind","description":"Field by which to sort the result set. Allowed fields: 'created_at', 'report_template', or 'event_kind'."}],"description":"Field by which to sort the result set. Allowed fields: 'created_at', 'report_template', or 'event_kind'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction/order for the result set. Allowed values: 'asc' (ascending), 'desc' (descending)."},{"const":"desc","description":"Sort direction/order for the result set. Allowed values: 'asc' (ascending), 'desc' (descending)."}],"description":"Sort direction/order for the result set. Allowed values: 'asc' (ascending), 'desc' (descending)."},"actor_id":{"type":"string","format":"uuid","description":"Optional filter: UUID of the actor who performed the report log event (employee or moderator). Use for narrowing search to a specific user."},"enterprise_id":{"type":"string","format":"uuid","description":"Optional filter: UUID of the enterprise (organization) associated with the report log entries."},"team_id":{"type":"string","format":"uuid","description":"Optional filter: UUID of the enterprise team (department/division) associated with the report log events."},"report_template":{"type":"string","description":"Optional filter: Report or dashboard template name, as stored in analytics report logs."},"event_kind":{"type":"string","description":"Optional filter: The kind of event (e.g., 'render', 'schedule', 'export', 'error') recorded in analytics report logs."},"start_date":{"type":"string","format":"date-time","description":"ISO 8601 timestamp to filter report logs occurring at or after this time."},"end_date":{"type":"string","format":"date-time","description":"ISO 8601 timestamp to filter report logs occurring before this time."},"search":{"type":"string","description":"Optional keyword search to match in report template, actor, or event kind fields. Supports fuzzy match/full-text search."}},"required":["page","limit"],"description":"Request DTO for searching and paginating analytics report log records (/analytics/reportLogs). Enables complex filtering, sorting, and pagination for dashboard/audit analytics scenarios. All parameters are opt-in except page and limit; filters can be left empty to retrieve all records allowed by the current actor's permission scope."},"IWrtnProcedureSessionConnection.ISummary":{"type":"object","description":"Summary DTO for wrtn_procedure_session_connections, providing quick reference to connection events on procedure sessions for reporting, audit, and dashboard UI. Summarizes connection id, participating employee, protocol, connection and disconnection time. Employee is mapped to ISummary form by relation mapping rules.","x-autobe-prisma-schema":"wrtn_procedure_session_connections","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the procedure session connection. Maps to wrtn_procedure_session_connections.id."},"employee":{"$ref":"#/components/schemas/IWrtnEnterpriseEmployee.ISummary","description":"Employee who established the connection, mapped as a summary object from wrtn_enterprise_employee_id. Included for all relation-mapping DTOs in summary context."},"protocol":{"type":"string","description":"Connection protocol (e.g., 'http', 'websocket'). Indicates the mechanism used for participating in the execution session."},"connected_at":{"type":"string","format":"date-time","description":"Timestamp for when the user connected to the procedure session. Sourced from wrtn_procedure_session_connections.connected_at."},"disconnected_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for when the user left/disconnected from the procedure session. Null if still active. Maps to wrtn_procedure_session_connections.disconnected_at."}},"required":["id","employee","protocol","connected_at"],"examples":{"v0":{"id":"54d31e73-6b5b-4805-972f-bd3cbc706043","employee":{"id":"e871f465-0be1-437f-8396-8a231a019e64","email":"mary.jane@acme.com","title":"manager","created_at":"2025-01-01T15:00:00Z","updated_at":"2025-01-01T15:05:47Z","enterprise":{"id":"e5405d82-f47a-47b9-b850-226ecdfd623d","code":"acme","name":"Acme, Inc.","created_at":"2025-01-01T15:00:00Z"},"companions":[]},"protocol":"websocket","connected_at":"2025-01-01T16:00:00Z"}}},"IPageIWrtnModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IWrtnModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IWrtnModerator.ILogin":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","description":"Moderator login request DTO for Wrtn Enterprise platform. Used for system administrator (moderator) authentication via mobile and password. This DTO is the request body for moderator login endpoint (`/auth/moderator/login`).\n\nIncludes the moderator's unique mobile number and password. This schema aligns with the login flow requirements and references the wrtn_moderators table:\n- `mobile` is a unique mobile number identifying the moderator (phone number string).\n- `password` is the plain-text password submitted for login; this will be checked against the `password_hashed` column in the database.\n\nNo other fields are accepted in this DTO. Do not include `password_hashed`, as hashing happens in backend logic.\n\nThis DTO is security sensitive:\n  - Never include password in any response DTO\n  - Only used for login, not for account creation/registration\n  - Fields come strictly from user input, not authentication context.\n","properties":{"mobile":{"type":"string","description":"Unique mobile phone number for moderator login.\n- Must match the `mobile` field in wrtn_moderators table.\n- Should be in E.164 or local phone number format.\n- Used for identifying moderator accounts on login."},"password":{"type":"string","description":"Moderator's plain-text password.\n- Will be validated by securely checking against the stored `password_hashed` in wrtn_moderators\n- MUST NEVER return this field in any response DTO (security-critical).\n- Only used for login, NOT for registration or password update flows."}},"required":["mobile","password"]},"IWrtnModerator.IAuthorized":{"type":"object","description":"Authorized login/registration response for moderator after JWT-based authentication.\n\nThis DTO is used for both login (`ILogin` response) and registration (`IJoin` response) flows for Wrtn moderator actors. It contains:\n- `id`: Unique moderator identifier (wrtn_moderators.id).\n- `token`: JWT access & refresh token in `{ access, refresh, expired_at, refreshable_until }` form. This is the only way tokens are returned and contains zero credential information. For authenticated API access, this field is critical and must not leak any password or hash.\n- `mobile`, `nickname`, `name`, `role`: Summary moderator profile. `role` is 'master', 'manager', or null, mapping the business privilege context and appointment state; null means the moderator has no currently assigned appointment.\n- `created_at`, `updated_at`, `approved_at`, `deleted_at`: Audit fields for compliance and lifecycle tracking.\n- `session_id`: UUID of the moderator's current session; critical for compliance, audit logging and incident traceability. Links directly to a row in wrtn_moderator_sessions.\n\nAll response fields are strictly non-sensitive and never include password data or credential hashes.\n\nSecurity-critical: This DTO is only returned after successful privileged authentication and session creation. Never include credentials or sensitive password fields here.\n\nEnhanced descriptions:\n- `role`: Specifies current privilege/appointment tier. Accepts 'master', 'manager', or null. Dictates what the moderator may perform in platform administration. Null means no appointment/pending/revoked.\n- `token`: JWT authorization object for authenticated requests. Holds access/refresh token and their expiration info. Never includes password, hash, or credential details. For security workflows only.\n- `session_id`: Unique ID of the current moderator session (wrtn_moderator_sessions.id). Used for compliance, audit trace, and traceability. Required for investigation and regulatory reporting.\n","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderator identifier (`id` in wrtn_moderators table). Used in JWT token and audit trails."},"mobile":{"type":"string","description":"Moderator's unique registered mobile number. Used for admin identification and notification flows.\n- Will always match `mobile` column in wrtn_moderators."},"nickname":{"type":"string","description":"Moderator's registered nickname for display/profile. Always unique platform-wide."},"name":{"type":"string","description":"Full legal or business name of the moderator. Maps to wrtn_moderators.name."},"role":{"type":"string","description":"Assigned role/appointment for this moderator: 'master', 'manager', or null. Controls admin/super admin privilege scope; null means unappointed, pending, or revoked according to business lifecycle."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for moderator account creation (`created_at`). Used for compliance and audit, not authentication itself."},"updated_at":{"type":"string","format":"date-time","description":"Moderator record last modification timestamp (ISO8601). Maps to wrtn_moderators.updated_at."},"approved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when moderator was first approved. Null if not yet approved. Maps to wrtn_moderators.approved_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for deactivated or removed moderators. Null if not deleted. Maps to wrtn_moderators.deleted_at."},"session_id":{"type":"string","format":"uuid","description":"Moderator's session ID (wrtn_moderator_sessions.id). Used for compliance, traceability, and security audit. Required for every privileged authentication."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","mobile","nickname","name","created_at","updated_at","token"]},"IWrtnModerator.IJoin":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","properties":{"mobile":{"type":"string","description":"Mobile phone number of the moderator (E.164 or national format). Must be unique per moderator, used for SMS authentication/identification. Maps to wrtn_moderators.mobile."},"nickname":{"type":"string","description":"Unique moderator nickname, for display/login/reference. Must be unique system-wide. Maps to wrtn_moderators.nickname."},"name":{"type":"string","description":"Legal/business name for moderator. Used for formal display/audit. Maps to wrtn_moderators.name."},"password":{"type":"string","description":"Plain-text password for moderator registration. Password is securely hashed (never stored as plain-text) and must meet business password policy: minimum 8 characters, at least one digit, one alphabet, one special character. This field is strictly for registration—never returned in response DTOs and never persisted in cleartext."}},"required":["mobile","nickname","name","password"],"description":"Registration input DTO for a new moderator (Wrtn internal operator) onboarding. Mobile, nickname, and name must be unique and comply with business validation; password must meet system-defined complexity policy and is securely hashed on storage. Session/audit fields and privilege assignment handled elsewhere. No credential details are ever included in any response that uses this DTO."},"IWrtnModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Moderator's refresh token, as issued previously (JWT). Used for rotating/renewing JWT tokens. Must be a valid, unexpired token associated with a live session."}},"required":["refresh_token"],"description":"Request to rotate/refresh moderator JWT access token using a previously issued long-lived refresh token. The refresh token is validated for existence, expiry, and linkage to a valid moderator session. Upon validation, new access tokens are provided. No privilege escalation or re-login is performed."},"IWrtnModerator.IRequest":{"type":"object","x-autobe-prisma-schema":"wrtn_moderators","properties":{"page":{"type":"integer","description":"Page number for pagination; starts at 1. Used for paginated queries of moderator records."},"limit":{"type":"integer","description":"Maximum number of moderator records to return per page. Used for query result size control."},"search":{"type":"string","description":"Free-text search keyword to filter moderators by name, nickname, or mobile. Used for flexible admin search flows."},"role":{"type":"string","description":"Role filter for moderator search. Must be one of: 'master', 'manager', or null (for unappointed). Used for filtering by role in management UIs."},"name":{"type":"string","description":"Exact match or partial search for moderator's legal or business name."},"created_from":{"type":"string","format":"date-time","description":"Optional lower bound filter for moderator creation timestamp. ISO8601 date-time string."},"created_to":{"type":"string","format":"date-time","description":"Optional upper bound filter for moderator creation timestamp. ISO8601 date-time string."}},"description":"Query DTO for searching and filtering moderators (wrtn_moderators). Follows pagination, sort, and filter conventions for internal admin/support screens.","required":["page","limit"]},"IWrtnBillingInvoice.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_invoices","description":"DTO for updating scalar invoice fields in wrtn_billing_invoices. Used by moderator actors to adjust attributes of invoices (except immutable fields such as invoice ID and enterprise link). All fields are optional for PATCH-style usage, and null is permitted where allowed in the schema. Response view schemas (such as IWrtnEnterpriseBillingInvoice) incorporate additional relations and computed data. For modifiable status/period/amount only. This DTO is not for marking deletion (deletes are soft, tracked via deleted_at).","properties":{"period_start":{"type":"string","format":"date-time","description":"New billing period start (UTC, ISO 8601). Optional. Only valid before certain statuses."},"period_end":{"type":"string","format":"date-time","description":"New billing period end (UTC, ISO 8601). Optional."},"total_amount":{"type":"number","description":"Updated invoice total (USD/base currency). Non-negative. Optional."},"status":{"type":"string","description":"Invoice status to set. Optional. Must be a valid business code and respect allowed transitions (e.g. 'issued', 'due', 'paid', etc.)."},"due_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Due date/time for payment. Optional, null permitted."},"paid_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for full/partial payment. Optional, null permitted."},"cancelled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for invoice cancellation/void. Optional, null permitted."},"disputed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for marking invoice as disputed. Optional, null permitted."}},"required":[]},"IWrtnBillingPayment.ICreate":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_payments","description":"Create DTO for a new billing payment event in the wrtn_billing_payments table. Used by moderator actors to record an enterprise billing payment or settlement against an invoice or as advance payment. Includes payment method, amount, external reference, and status. Invoice linkage is optional. Moderator and session linkage are provided via JWT context and are omitted from request body as per security rules.","properties":{"wrtn_enterprise_id":{"type":"string","format":"uuid","description":"Enterprise receiving the payment. Maps to wrtn_billing_payments.wrtn_enterprise_id and must be provided."},"wrtn_billing_invoice_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a specific invoice. Null if payment is not tied to an invoice."},"amount":{"type":"number","description":"Payment amount in USD/base currency."},"payment_method":{"type":"string","description":"Method of payment, e.g., 'bank', 'card', 'wire', 'refund', etc."},"payment_reference":{"oneOf":[{"type":"string","description":"External payment reference, if present (eg, transaction id/payment processor code). May be null."},{"type":"null"}],"description":"External payment reference, if present (eg, transaction id/payment processor code). May be null."},"status":{"type":"string","description":"Initial or current status for the payment. Eg, 'pending', 'completed', 'failed', 'refunded', etc."}},"required":["wrtn_enterprise_id","amount","payment_method","status"]},"IWrtnBillingPayment.IUpdate":{"type":"object","description":"Fields to update for an enterprise billing payment. This type is used for HTTP PUT/PATCH update payloads for payment records. Only certain fields may be updated: payment_method, status, payment_reference, wrtn_billing_invoice_id. The amount CANNOT be changed using this operation (must create correction events). Only moderators may perform this operation. All changes are subject to audit trail creation.\n\nThis schema directly references the Prisma schema: wrtn_billing_payments. Only updatable fields are included. Updates to payment_reference must respect uniqueness constraints; payment_method and status are validated against allowed enum values.","x-autobe-prisma-schema":"wrtn_billing_payments","properties":{"payment_method":{"oneOf":[{"type":"string","description":"Payment method code (bank, card, wire, refund, credit, or null for auto). Must match allowed method enums in schema. Nullable for PATCH."},{"type":"null"}],"description":"Payment method code (bank, card, wire, refund, credit, or null for auto). Must match allowed method enums in schema. Nullable for PATCH."},"status":{"oneOf":[{"type":"string","description":"Payment status (e.g., pending, completed, failed, refunded, disputed, cancelled). Must match allowed status enums in schema."},{"type":"null"}],"description":"Payment status (e.g., pending, completed, failed, refunded, disputed, cancelled). Must match allowed status enums in schema."},"payment_reference":{"oneOf":[{"type":"string","description":"External payment reference/descriptor (e.g., transaction id, processor code, remitter info). Nullable for PATCH."},{"type":"null"}],"description":"External payment reference/descriptor (e.g., transaction id, processor code, remitter info). Nullable for PATCH."},"wrtn_billing_invoice_id":{"oneOf":[{"type":"string","format":"uuid","description":"Invoice ID to associate this payment (nullable)."},{"type":"null"}],"description":"Invoice ID to associate this payment (nullable)."}},"required":[]},"IWrtnBillingCredit.IUpdate":{"type":"object","x-autobe-prisma-schema":"wrtn_billing_credits","properties":{"amount":{"type":"number","minimum":0,"description":"Updated credit amount in invoice base currency (positive number). Only mutable by authorized moderator actors. Field maps to wrtn_billing_credits.amount."},"category":{"type":"string","description":"Updated business reason for the credit (must conform to allowed values such as 'manual', 'refund', 'promo', 'overpayment', 'dispute', 'reversal'). Only mutable by authorized moderator actors. Field maps to wrtn_billing_credits.category."},"reason":{"type":"string","description":"Updated human-readable explanation for the credit adjustment, correction, or reclassification. For audit transparency and compliance reporting. Maps to wrtn_billing_credits.reason."},"issued_at":{"type":"string","format":"date-time","description":"(Optional) New issued-at timestamp for the billing credit, used to adjust accounting reference period if a correction requires it. Maps to wrtn_billing_credits.issued_at if present."},"wrtn_billing_invoice_id":{"type":"string","format":"uuid","description":"Updates or sets the reference invoice ID to which this credit is tied (if applicable). Used to move or associate the credit with a specific invoice for reconciliation. Maps to wrtn_billing_credits.wrtn_billing_invoice_id."},"wrtn_moderator_id":{"type":"string","format":"uuid","description":"Updates the moderator actor reference (when changing auditor for correction scenarios). Used for compliance, business reporting, and traceability. Maps to wrtn_billing_credits.wrtn_moderator_id."}},"required":[],"description":"Request body for updating attributes of a billing credit. All fields are optional and only the provided values will be updated in the record. Only mutable by authorized moderator actors. Field and type definitions are strictly aligned with the wrtn_billing_credits database schema and business operation requirements for billing credit corrections."}}}}