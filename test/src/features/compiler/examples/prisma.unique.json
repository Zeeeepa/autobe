{"files":[{"filename":"schema-01-core.prisma","namespace":"Core","models":[{"name":"users","description":"[User Account] - This implements user account management and core identity for the whole platform, addressing requirements such as registration, member/non-member tracking, security, and account lifecycle (see 2.1 Customer System and 2.2 Seller/Admin System in requirements analysis).\n\nUsers are the primary actors in the system, referencing all other personas (customers, sellers, admins). Fully normalized (3NF): separates public identity, addresses, and external auth to other tables. Example: core record for John Doe, who can have multiple connections, addresses, and roles.\n\nKey relationships: user_profiles, user_addresses, user_connections, user_emails, external_auth_accounts, roles, seller/admin records.\nSpecial behaviors: Ensures unique identifier, no duplicate emails, and tracks registration and withdrawal dates for auditability.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Implements unique identity for user accounts. Ensures referential integrity across core, profile, address, and role-related tables."},"foreignFields":[],"plainFields":[{"name":"registered_at","type":"datetime","description":"[Registration Timestamp] - Implements audit trail and history requirements. Records when the user first registered. Maintains normalization by separating lifecycle events from user data. For example, '2023-10-10 11:11:01'.","nullable":false},{"name":"withdrawn_at","type":"datetime","description":"[Withdrawal Timestamp] - Implements audit trail for deleted/deactivated accounts. Always null unless user withdrew. Maintains normalization by marking rather than deleting data. For example, null (active), '2024-03-01 12:03:02' (withdrawn).","nullable":true},{"name":"status","type":"string","description":"[Account Status] - Implements requirements for status tracking (active, pending, withdrawn, suspended, etc). Allows flexible status workflows. Maintains atomicity. For example, 'active', 'pending'.","nullable":false},{"name":"password_hash","type":"string","description":"[Hashed Password] - Implements password security requirement: stores hashed (not raw) password. Ensures normalization by not duplicating sensitive info elsewhere. For example, bcrypt or scrypt hash string.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["registered_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"user_profiles","description":"[User Profile] - Implements user information and personal profile (reqs 2.1). \n\nDecouples core account from profile data (name, birthday, phone, etc). Ensures 3NF by keeping personal data separate, indexed by user_id. Example: Profile 'Jane Lee' for user_id X. Can be updated independently.\n\nKey relationships: users.\nSpecial behaviors: Allows updating profile info without touching primary user record, tracks creation/update times for audit.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Uniquely identifies a profile record for audit/history."},"foreignFields":[{"name":"user_id","type":"uuid","description":"[Belonged user's {@link users.id}] - Foreign key for associating profile with a user, fulfilling requirement for separate management.","relation":{"name":"user","targetModel":"users"},"unique":true,"nullable":false}],"plainFields":[{"name":"name","type":"string","description":"[Display Name] - User's name for display and communication; enables localization/customization; strictly user profile data (not auth).","nullable":false},{"name":"birthday","type":"datetime","description":"[Birthday] - User's birthdate for personalization, age verification, and analytics; maintains atomicity. Example: '1991-09-11'.","nullable":true},{"name":"phone","type":"string","description":"[Phone Number] - Contact number, essential for identity verification, communication, and platform notifications; no duplication elsewhere.","nullable":true},{"name":"created_at","type":"datetime","description":"[Profile Creation Timestamp] - Tracks when the profile was created for audit, evidentiary, and analytics requirements.","nullable":false},{"name":"updated_at","type":"datetime","description":"[Profile Modification Timestamp] - When profile was last updated; enables history and compliance checking.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"user_addresses","description":"[User Address] - Implements structured, normalized shipping address management (2.1.5, 7.1.3, 7.3 in requirements). \n\nStores international, multi-format addresses tied to users. Example: home, office, primary address records for user X.\n\nKey relationships: users. One-to-many: users may have many addresses, each record always atomic (no arrays). Enables selection, edit, validation, and favorite marking. 3NF: all address attributes atomic and not derived.\n\nSpecial behaviors: may include label (home/office), supports null for non-required fields, and tracks created/updated times.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Unique address record ID (global uniqueness for deduplication, evidentiary)."},"foreignFields":[{"name":"user_id","type":"uuid","description":"[Belonged user's {@link users.id}] - References the user this address belongs to.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"label","type":"string","description":"[Address Label] - Display label, customizable for user purposes (e.g., 'Home', 'Office') for usability.","nullable":true},{"name":"country","type":"string","description":"[Country] - ISO country code or full name, for postal/international shipping. Required for proper normalization and shipping compliance.","nullable":false},{"name":"region","type":"string","description":"[Region] - State/province/city or equivalent, supports international addresses. Maintains address atomicity.","nullable":false},{"name":"city","type":"string","description":"[City] - City, town, or urban name. Required for granularity and internationalization support.","nullable":false},{"name":"postal_code","type":"string","description":"[Postal Code] - Zip or postal code, part of full address normalization.","nullable":false},{"name":"address_detail","type":"string","description":"[Address Detail] - Street address and further detail. Normalization: no mixing JSON, array, or denormalized content.","nullable":false},{"name":"is_primary","type":"boolean","description":"[Primary Address Flag] - Whether this is the user's main address. Enables favorite/selection rule (only one primary per user via uniqueness constraints).","nullable":false},{"name":"created_at","type":"datetime","description":"[Record Creation Time] - For audit trail, evidence, and analytics.","nullable":false},{"name":"updated_at","type":"datetime","description":"[Record Modification Time] - Last change to address. Supports evidence and analytics.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id","is_primary"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id"]}],"ginIndexes":[{"fieldName":"label"}],"stance":"primary"},{"name":"user_connections","description":"[User Connection] - Implements connection log and analytics tracking (requirements 2.1.1 and cross-channel analytics in 8, 10).\n\nEach record tracks a single connection session per user, including IP, referrer, and channel. Fully normalized: no duplicate analytics data elsewhere. Example: John logs in from mobile app (channel A), another connection from web (channel B).\n\nKey relationships: users, channels (cross-file reference, tracked for connection source). Enables security reviews, session management, fraud analytics.\n\nSpecial behaviors: allows anonymous (nullable user_id), indexes for fast reporting, no calculated fields.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Unique connection session/event."},"foreignFields":[{"name":"user_id","type":"uuid","description":"[Belonged user's {@link users.id}] - Reference to user, may be null for non-member sessions.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":true}],"plainFields":[{"name":"channel_code","type":"string","description":"[Channel Identifier] - Channel for this connection. Enables per-channel analytics. Atomic and normalized.","nullable":false},{"name":"ip","type":"string","description":"[IP Address] - Source IP for security, analytics, anti-fraud. Not stored elsewhere, atomic.","nullable":false},{"name":"accessed_at","type":"datetime","description":"[Access Time] - When connection/session started.","nullable":false},{"name":"referrer_url","type":"uri","description":"[Referrer URL] - Which site/page referred the user; analytics/marketing use. Optional, atomic.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id","accessed_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"organizations","description":"[Organization] - Implements requirements for organization management and scalable RBAC (related to 2.2 extended business requirements, 10.1 for extensibility).\n\nAn organization record groups users/roles for scalable access control and business structure. Normalization: atomic data, no duplication.\n\nKey relationships: users, roles, permissions. For example, organization 'MainMallOperator Corp.', supporting multiple admins, sellers, or employee records, with distinct role assignments.\n\nSpecial behaviors: enables future B2B/B2C multi-organization, cross-tenant scenarios; tracks created/updated times.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Unique org record."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"[Organization Name] - Public name for display, business, audit. Supports normalization (GIN index for search).","nullable":false},{"name":"code","type":"string","description":"[Organization Code] - Unique code for referencing in business logic, API, or cross-channel.\nMaintains normalization, unique across table.","nullable":false},{"name":"status","type":"string","description":"[Organization Status] - e.g., 'active', 'pending', 'disabled'. Atomic, no calculation or duplication.","nullable":false},{"name":"created_at","type":"datetime","description":"[Record Creation Date] - For audit trail, compliance, analytics.","nullable":false},{"name":"updated_at","type":"datetime","description":"[Record Modification Date] - When org info was last edited. Atomic.","nullable":false}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"roles","description":"[Role] - Implements system-wide RBAC/ABAC role management, following requirements (2.2, 9.2, extensibility in 10).\n\nEach record defines business (or admin/seller) roles, fully normalized. For example: 'admin', 'customer', 'seller', or custom business roles.\n\nKey relationships: organizations (optional), users (via assignment tables), permissions (via role_permissions table, not in this file). No duplication of permission/role logic. 3NF: no calculated fields.\n\nSpecial behaviors: unique name/code, supports cross-org role assignment, tracks created/updated.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Unique role record."},"foreignFields":[{"name":"organization_id","type":"uuid","description":"[Parent organization's {@link organizations.id}] - Support for org-level RBAC. Optional if role is global.","relation":{"name":"organization","targetModel":"organizations"},"unique":false,"nullable":true}],"plainFields":[{"name":"name","type":"string","description":"[Role Name] - Human-readable display name. Atomic (e.g., 'Admin', 'Seller', 'Customer').","nullable":false},{"name":"code","type":"string","description":"[Role Code] - Unique code for API/business logic. No duplication.","nullable":false},{"name":"description","type":"string","description":"[Role Description] - Business explanation/context for this role, e.g., 'Grants product management permissions'.","nullable":true},{"name":"created_at","type":"datetime","description":"[Creation Time] - Audit and evidence.","nullable":false},{"name":"updated_at","type":"datetime","description":"[Modification Time] - Last edit of role info. Atomic.","nullable":false}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"permissions","description":"[Permission] - System-wide permission record, supporting fine-grained RBAC/ABAC (see 2.2, 10).\n\nDefines each atomic permission within the platform—e.g., 'can_create_product', 'can_edit_user'. Normalized for 3NF, no duplication across roles or entities.\n\nKey relationships: roles (via role_permissions, not in this file).\n\nSpecial behaviors: always unique code, supports future expansion, and enables permission assignment at role/org/user level.","material":false,"primaryField":{"name":"id","type":"uuid","description":"[Primary Key] - Permission record's unique identity."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"[Permission Name] - Display label for permission. Maintains atomicity and searchability (GIN).","nullable":false},{"name":"code","type":"string","description":"[Permission Code] - API/business logic identifier. Ensures normalization, uniqueness, flexibility for granular management.","nullable":false},{"name":"description","type":"string","description":"[Business Description] - Free text for what this permission allows. Atomic.","nullable":true},{"name":"created_at","type":"datetime","description":"[Creation Time] - For audit/evidence.","nullable":false},{"name":"updated_at","type":"datetime","description":"[Modification Time] - For compliance/audit.","nullable":false}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"}]},{"filename":"schema-02-identity.prisma","namespace":"Identity","models":[{"name":"identity_verifications","description":"Identity Verifications - This implements the requirement for secure, audit-trailed identity verification (Requirement 2.1.2, 9.1.1, 9.2.1 from analysis). \n\nManages verified identity information for connections/members, supporting mobile number and real name-based verification, encrypted storage, internationalization, and evidence traceability. Maintains 3NF compliance by separating verification data, linking to user_connections (not person/account). For example, used in registration, order verification, or KYC processes.\n\nKey relationships: references user_connections and channels.\nSpecial behaviors: never deleted, always audit logged, sensitive data encrypted, distinct identity per channel/connection.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identity verification record."},"foreignFields":[{"name":"user_connection_id","type":"uuid","description":"Belonged connection's {@link user_connections.id}.\nLinks verification to a specific connection (not user).","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"channel_id","type":"uuid","description":"Channel for which this identity was verified ({@link channels.id}). Supports per-channel or global verifications.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"verified_name","type":"string","description":"Verified legal name - Implements requirement for real name verification and audit trace (2.1.2/9.2.1). Contains individual's legal name as provided by verification provider. Ensures normalization by atomic storage. For example, shown on order receipt or compliance requests. Encrypted at rest.","nullable":false},{"name":"verified_mobile","type":"string","description":"Verified mobile number - Implements support for phone-based KYC verification (2.1.2). Stores identified mobile phone number in internationalized format. Ensures normalization by storing number only (no redundant user data). Encrypted and individually accessible.","nullable":false},{"name":"verification_provider","type":"string","description":"Provider/code for the verification performed (e.g. Korean PASS, US credit bureau). Implements requirement for multi-country support and evidence trace (2.1.2). Used in analytics of identity provenance. Normalized value (no inline provider records).","nullable":false},{"name":"verified_at","type":"datetime","description":"Time when this verification was completed (requirement 9.1.1). for audit trails. Ensures normalization by separating event trace. Used in compliance reports. Not nullable.","nullable":false},{"name":"expires_at","type":"datetime","description":"Expiry time for this verification (if temporal/one-time). Implements support for temporary verifications. Used for KYC re-verification. Null if perpetual. Maintains 3NF by not coupling to profile expiry.","nullable":true},{"name":"status","type":"string","description":"Status code for this verification (active, expired, revoked, failed) - Requirements for traceable status. Enables temporal analysis and user support. Normalized as atomic value. Used in status analytics and workflow.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_connection_id","channel_id"],"unique":true}],"plainIndexes":[{"fieldNames":["verified_mobile"]},{"fieldNames":["verified_at"]}],"ginIndexes":[{"fieldName":"verified_name"}],"stance":"primary"},{"name":"external_auth_providers","description":"External Auth Providers - Implements external authentication provider registration (requirements 2.1.4, 10.3.3). \n\nStores information about each third-party authentication source (e.g., Google, Facebook, Kakao). Maintains 3NF by not embedding any per-user auth. Used in OAuth/callback setup, analytics, and admin registration of new auth integrations.\n\nKey relationships: referenced by external_auth_accounts.\nSpecial behaviors: never deleted, allows obsolete/inactive flag.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique provider registration key."},"foreignFields":[],"plainFields":[{"name":"provider_code","type":"string","description":"Provider code (e.g. 'google', 'kakao', 'naver') - requirement for extensibility (2.1.4, 10.3.3). Atomic/unique. Used in code config and callback routing. Always normalized (not descriptive).","nullable":false},{"name":"provider_name","type":"string","description":"Display label for the provider, such as 'Google'. Implements human-friendly analytics and admin UIs (10.3.3). Normalized, atomic; used for admin consoles.","nullable":false},{"name":"auth_type","type":"string","description":"Type of authentication (OAuth2, SAML, proprietary) - requirement for integration with diverse providers (10.3.3). Normalized/atomic, supports compatibility logic.","nullable":false},{"name":"active","type":"boolean","description":"Whether this provider is active for new logins (10.3.3). Enables admin to disable obsolete/broken providers without deleting.","nullable":false},{"name":"created_at","type":"datetime","description":"Time when the provider integration was registered. Implements audit trace requirement (9.1.1). Used in tracking provider onboarding. 3NF clean, not duplicated.","nullable":false},{"name":"updated_at","type":"datetime","description":"Time of the last provider data change. For auditing (9.1.1), notifies admins of config updates. Not duplicated elsewhere.","nullable":false}],"uniqueIndexes":[{"fieldNames":["provider_code"],"unique":true}],"plainIndexes":[{"fieldNames":["active"]}],"ginIndexes":[{"fieldName":"provider_name"}],"stance":"primary"},{"name":"external_auth_accounts","description":"External Auth Accounts - Implements external service account linkage per user (requirements 2.1.4, 10.3.3).\n\nRecords each user's connected external auth service(s). Maintains 3NF by separating provider (external_auth_providers) from account linkage. Used for sign-on, analytics, and one-user-multi-provider linkage.\n\nKey relationships: links users and external_auth_providers.\nSpecial behaviors: cannot have duplicate user-provider pair; supports unlinking/cycling tokens.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique external linkage record."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Linked user's {@link users.id}.\nImplements user-to-external account connection (2.1.4). Required for sign-on logic.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false},{"name":"external_auth_provider_id","type":"uuid","description":"Provider {@link external_auth_providers.id} for this account linkage. Supports connecting the same user to multiple providers.","relation":{"name":"externalAuthProvider","targetModel":"external_auth_providers"},"unique":false,"nullable":false}],"plainFields":[{"name":"external_account_id","type":"string","description":"User's account ID at the provider (e.g., sub field for OAuth2) - requirement 2.1.4. Not duplicated elsewhere. Used for user re-link, support, and analytics.","nullable":false},{"name":"linked_at","type":"datetime","description":"Time when this linkage was established. For audit/analytics (9.1.1). Not duplicated, atomic. Used in security monitoring, support.","nullable":false},{"name":"unlinked_at","type":"datetime","description":"Time when this linkage was severed/canceled (if any). Requirements for auditing and 3NF. Null if still linked.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_id","external_auth_provider_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[],"stance":"primary"},{"name":"user_emails","description":"User Emails - Implements the requirement for multiple email addresses per user account (2.1.3/2.1.1)\n\nSupports registration of several emails per user, with unique and primary flags. Maintains 3NF by storing only pointer, not actual user data, per email. Used in verification, password reset, notification logic.\n\nKey relationships: connected to users.\nSpecial behaviors: can update, add, or remove emails; can migrate primary designation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique email record identifier."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Owning user's {@link users.id}.\nImplements multiple-emails-per-user (2.1.3).","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"email","type":"string","description":"The email address itself. Unique per record; implements login, notification, reset contact (2.1.3). Atomic, not duplicated. Used in registration and login workflows.","nullable":false},{"name":"is_primary","type":"boolean","description":"True if currently user's primary login email (2.1.3). Maintains 3NF by storing pointer/flag not redundant. Used in sign-in, notifications, UIs.","nullable":false},{"name":"verified","type":"boolean","description":"Whether the email has been verified (2.1.3/2.1.1). Implements login and fraud prevention. 3NF-sound (atomic). Used in verification workflows, notifications.","nullable":false},{"name":"created_at","type":"datetime","description":"Time when email was added (requirement 9.1.1). For audit/history. Never duplicated elsewhere.","nullable":false},{"name":"updated_at","type":"datetime","description":"Time of last modification. Requirement for audit/support workflow. Not duplicated elsewhere.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id","is_primary"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"email"}],"stance":"primary"}]},{"filename":"schema-03-sellers_admins.prisma","namespace":"SellersAdmins","models":[{"name":"sellers","description":"Seller information management - This implements the 'Seller Management' requirement from the requirements document. \n\nSolves the business problem of giving system users the ability to be granted selling permissions, tracking their status, and maintaining seller identity. Maintains 3NF normalization by only including referential and ownership data, separating historical and metric data. For example, a member becomes a seller and is recorded here with their seller status and reference to user identity.\n\nKey relationships: References the main user/member entity. Connects to seller_histories and seller_metrics for audit and KPI data.\nSpecial behaviors: Seller approval process, ability to suspend or reactivate seller status, only one active record per user at a time.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each seller. Used to reference seller in all related tables."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Linked user/member's {@link users.id}. Represents the actual system user who is acting as a seller. Supports extension of regular users into sellers.","relation":{"name":"user","targetModel":"users"},"unique":true,"nullable":false}],"plainFields":[{"name":"status","type":"string","description":"Seller account status - Implements approval, suspension, active/inactive state per seller as required. Ensures normalized representation of seller's current system status. Example: 'pending', 'approved', 'suspended'. System enforces valid states only.","nullable":false},{"name":"approved_at","type":"datetime","description":"Seller account approval time - Implements the requirement to audit grant of seller permissions. Meaning: When this user was officially approved as a seller. Null if still pending/cancelled. Ensures normalization by recording exact state transition event as atomic timestamp. Example: Seller is approved and timestamp is filled.","nullable":true},{"name":"created_at","type":"datetime","description":"Record creation time - Standard auditing. When seller account record was created. Example: A member is promoted to seller, this timestamp is recorded. Normalizes audit info for traceability.","nullable":false},{"name":"suspended_at","type":"datetime","description":"Time seller account was suspended - Implements business requirement for tracking suspension events. Null if never suspended. Helps maintain compliance and support audit trails. Example: Seller violates terms, record filled.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["status"]}],"ginIndexes":[],"stance":"primary"},{"name":"seller_histories","description":"Seller history and audit trail - This implements the 'Seller Management' and 'audit trail' requirements from the requirements document. \n\nSolves the need to track every status and key property change for sellers, preserving evidence. Maintains 3NF by only referencing atomic change events, with snapshot-like structure. For example, when a seller is suspended or re-approved, a history record is created with precise status and timestamp info. \n\nKey relationships: Linked to sellers for which this event occurred; supports chronological queries. \nSpecial behaviors: Immutable; records never deleted; every significant seller state transition triggers a new row.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the seller history record."},"foreignFields":[{"name":"seller_id","type":"uuid","description":"Belonged seller's {@link sellers.id}. References the seller whose status/event this row represents. Maintains referential integrity and links all audit states.","relation":{"name":"seller","targetModel":"sellers"},"unique":false,"nullable":false}],"plainFields":[{"name":"event_type","type":"string","description":"Change event type - Implements audit and change tracing. The specific event this record documents. Examples: 'created', 'approved', 'suspended', 'reactivated'. Ensures normalization by never duplicating event semantics; always atomic representation of one event per row.","nullable":false},{"name":"event_by","type":"uuid","description":"System user/admin who performed the event - Implements the requirement to track who made a change. Nullable in case of system-automated state. Ensures traceability per audit requirements. For example, admin suspends seller, their id stored here.","nullable":true},{"name":"event_at","type":"datetime","description":"Timestamp of event - Implements audit granularity as defined in the requirements. When exactly the event was performed. Example: Seller is suspended by admin, timestamp logged.","nullable":false},{"name":"comment","type":"string","description":"Optional comment on status event - Implements support for additional context as detailed in requirements. Example: Admin writes the reason for suspension. Ensures normalization by being nullable, not always present.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["seller_id","event_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"seller_metrics","description":"Seller performance metrics - This implements the 'Seller metrics and analytics' requirement. \n\nSolves requirement for tracking seller performance characteristics - KPIs, transactional data etc. Maintains normalization by recording each metric as a distinct, atomic record by date and subject. For example: number of sales on a specific day. \n\nKey relationships: Linked to sellers. Intended for analytic queries and reporting. \nSpecial behaviors: Should not store denormalized summaries here; all analytics are atomic and must be further aggregated for reports.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the seller metric record."},"foreignFields":[{"name":"seller_id","type":"uuid","description":"Target seller's {@link sellers.id}. Which seller does this metric belong to. Ensures proper attribution of performance data. Used for joins and rollups.","relation":{"name":"seller","targetModel":"sellers"},"unique":false,"nullable":false}],"plainFields":[{"name":"metric_type","type":"string","description":"Type of metric - Implements extensibility in metric collection as outlined in analytics requirements. For example: 'sales_volume', 'positive_reviews'. Atomic per record to ensure normalization.","nullable":false},{"name":"value","type":"double","description":"Metric value - Implements the quantifiable outcome for the metric type/date/record. Example: 12 sales in a day. Normalized by not duplicating aggregates, atomic per fact.","nullable":false},{"name":"metric_time","type":"datetime","description":"Timestamp metric collected - Implements requirement for temporal analysis by collecting each metric value for a specific time. Example: Seller's sales at a particular time. Ensures normalization by storing atomic metric per timestamp.","nullable":false}],"uniqueIndexes":[{"fieldNames":["seller_id","metric_type","metric_time"],"unique":true}],"plainIndexes":[{"fieldNames":["metric_type"]}],"ginIndexes":[],"stance":"primary"},{"name":"administrators","description":"Administrator account management - Implements the 'Administrator Management' requirements, facilitating registration and role management of administrators with distinction from regular users/members. \n\nSolves need to grant expanded permissions, enable system-wide management, and role hierarchy. Maintains 3NF normalization by separating admin role, linking to user/member, and using relation to admin_roles for privileges. Example: When a member is made administrator, new row created with foreign key link to users and admin role.\n\nKey relationships: References users (members), links to admin_roles and admin_audit_logs. \nSpecial behaviors: Only assigned users can act as administrators; activity is fully tracked for auditing.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the administrator record."},"foreignFields":[{"name":"user_id","type":"uuid","description":"User/member reference as {@link users.id}. The person who is acting as admin. Ensures role extension, only members can be administrators.","relation":{"name":"user","targetModel":"users"},"unique":true,"nullable":false},{"name":"admin_role_id","type":"uuid","description":"Administrator role as {@link admin_roles.id}. Determines their admin level and permissions as required by requirements. Ensures normalized privilege control, decouples users and privilege definitions.","relation":{"name":"adminRole","targetModel":"admin_roles"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Administrator assign/create time - Implements auditing requirements. When this member was assigned admin privilege. Ensures traceability and normalization. Example: Member receives admin role, timestamp is recorded.","nullable":false},{"name":"retired_at","type":"datetime","description":"Retirement/removal timestamp - Implements the need for deactivation of admin accounts. Nullable for active admins. Supports audit and compliance.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["admin_role_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"admin_roles","description":"Admin role and privilege definitions - Implements 'Role-based Access Control' requirement for admins, providing a normalized catalog of possible admin levels and responsibility categories. \n\nSolves the need for flexible permission assignment, hierarchy, and future extensibility. Maintains 3NF by defining each role atomically, never duplicating privilege lists. Example: 'superadmin', 'content_manager'. Link to administrators table for mapping roles to accounts.\n\nKey relationships: Linked to administrators, determines admin's effective permissions. May be used by admin_audit_logs to classify events. \nSpecial behaviors: Role definitions may be expanded over time. Deletion restricted if role is still in use.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for admin role record."},"foreignFields":[],"plainFields":[{"name":"role_code","type":"string","description":"Role code/identifier - Implements the requirement for atomic, unique codes for each admin role. Ensures clear, normalized reference (e.g. 'superadmin','ops'). Used for permission checks and analytics. Never duplicated.","nullable":false},{"name":"name","type":"string","description":"Display name for admin role - Implements usability and clarity for admin privilege system. Human-friendly. Example: 'System Administrator'. Normalized per code. Used for UI, reports.","nullable":false},{"name":"description","type":"string","description":"Role description - Implements the clarity and documentation requirements for admin roles. Explain what this role is responsible for. Normalized, nullable for optional details.","nullable":true},{"name":"created_at","type":"datetime","description":"Role creation timestamp - Implements auditing, and role management trace. Atomic per role. For example: Role is added for a new admin type, timestamp is filled.","nullable":false}],"uniqueIndexes":[{"fieldNames":["role_code"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"admin_audit_logs","description":"Administrator audit log - Implements 'Audit logging for administrator actions' and supports compliance and traceability. Every significant action by admin is recorded atomically. \n\nSolves need for detailed business and security auditing. Maintains normalization by making each log an atomic event, linked to both the admin and optionally the affected entities. For example: Admin changes seller status - record written here with all context fields. \n\nKey relationships: References administrators (who did it), the admin role, and optionally to target entities (event_target_id, event_target_type).\nSpecial behaviors: Rows are immutable; must not be deleted. Used for dispute, audit, and forensic investigation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for administrator log record."},"foreignFields":[{"name":"administrator_id","type":"uuid","description":"Acting administrator's {@link administrators.id}. Who performed the action. Ensures all actions are traceable to the specific admin.","relation":{"name":"administrator","targetModel":"administrators"},"unique":false,"nullable":false}],"plainFields":[{"name":"event_type","type":"string","description":"Audit event type - Implements the need to catalogue all admin actions and categorize by event. Examples: 'login', 'role_change', 'seller_approval'. Atomic per row for normalization.","nullable":false},{"name":"event_target_id","type":"uuid","description":"ID of affected entity - Implements the need to connect events to targets, e.g., when admin acts on seller/user/order. Nullable when not applicable. Ensures normalization by keeping atomic event context.","nullable":true},{"name":"event_target_type","type":"string","description":"Type of the affected entity - Implements clarity in event auditing for entity context: 'seller', 'order', 'coupon'. Used in analytics/reports. Normalized, nullable for optional context.","nullable":true},{"name":"event_time","type":"datetime","description":"Timestamp of event - Implements full audit granularity and traceability. When exactly the event was performed.","nullable":false},{"name":"event_metadata","type":"string","description":"Optional structured metadata - Implements requirement for further context in event audit. Stores serialized key-value or JSON data, nullable if not present. Normalized to single record per event.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["administrator_id","event_time"]}],"ginIndexes":[{"fieldName":"event_type"}],"stance":"primary"}]},{"filename":"schema-04-channel_section.prisma","namespace":"ChannelSection","models":[{"name":"channels","description":"Channels - This implements the channel management, multi-channel expansion, and cross-channel user experience requirements from the requirements document.\n\nRepresents a sales/distribution route—a website or application through which products can be sold and managed. Maintains 3NF by storing core channel information without repeating or derived fields. For example, Amazon, a brand's online site, or a partner distributor would each be a channel stored here.\n\nKey relationships: Connects to channel_categories (defines the category system for this channel) and sections. Special behaviors: Channel configuration and analytics are applied per-channel.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"code","type":"string","description":"Unique channel code - Implements channel registration and lookup. Used by business logic and APIs to uniquely identify a sales channel. Ensures normalization by enforcing uniqueness and using codes, not names or URLs, as the business reference. For example, 'AMZN', 'KOR_SHOP', etc.","nullable":false},{"name":"name","type":"string","description":"Human-readable channel name - Implements convenient UI display and channel management. Used in all admin panels and customer-facing menus. Normalized: actual configs per channel are referenced elsewhere, not duplicated here.","nullable":false},{"name":"active","type":"boolean","description":"Channel status - Implements activation/deactivation controls per the requirements. Indicates if the channel is operational or suspended. For example, to hide a channel if temporarily shut down.","nullable":false},{"name":"created_at","type":"datetime","description":"Channel creation timestamp - General traceability and audit compliance requirement. Shows when this channel was created in the system. Maintains normalized structure as an atomic value.","nullable":false},{"name":"updated_at","type":"datetime","description":"Channel last updated timestamp - Change tracking required by audit and compliance. Clarifies when the channel's definition was last changed. Example: for tracking configuration changes.","nullable":false}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["active"]}],"ginIndexes":[],"stance":"primary"},{"name":"channel_categories","description":"Channel Categories - This implements the channel category composition, structured classification, and independent management by channel from the requirements document.\n\nRepresents the mapping of individual channels to a logical category hierarchy for that channel, distinct from the global categories table. Complies with 3NF by only storing atomic relationships between channel and category slug, with all display and configuration in referenced models.\n\nKey relationships: Each belongs to a channel (channels.id) and to a concrete category definition (categories.id). Special behaviors: Deletion or remapping can update category trees for a channel without impacting others.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"channel_id","type":"uuid","description":"Owning channel {@link channels.id} - Links category grouping to a specific channel configuration for true multi-channel support.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false},{"name":"category_id","type":"uuid","description":"Category definition {@link categories.id} - The referenced category entity which can be mapped in different structures per channel.","relation":{"name":"category","targetModel":"categories"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent channel_categories {@link channel_categories.id} - Used for hierarchical (tree) structures of categories within a single channel. Root category's parent_id will be NULL.","relation":{"name":"parent","targetModel":"channel_categories","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"sequence","type":"int","description":"Manual ordering of categories - Implements ordered display of categories in the channel's UI per business requirements. Allows reordering without changing category relations. Null means default ordering.","nullable":true},{"name":"visible","type":"boolean","description":"Visibility flag for category in channel - Required for channel-specific category hiding and merchandising strategies. Ensures normalization; flag is only for visibility, not category detail which remains in the referenced category.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp - For audit/history purposes (per system requirement traceability). Not pre-calculated, atomic timestamp only.","nullable":false}],"uniqueIndexes":[{"fieldNames":["channel_id","category_id"],"unique":true}],"plainIndexes":[{"fieldNames":["channel_id"]},{"fieldNames":["category_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"categories","description":"Categories - This implements the independent category definition, hierarchical category structure, and performance analytics requirements.\n\nStores core, global category definitions not coupled to any channel. Categories are flexibly mapped into different channel_category trees for each sales platform. Enforces 3NF and avoids denormalization—contains only core data. For example, 'Shoes', 'Electronics', 'Kids'.\n\nKey relationships: Referenced by channel_categories and category_mappings. Special behaviors: Universal category changes propagate to all channels using the definition.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"parent_id","type":"uuid","description":"Parent Category {@link categories.id} (Hierarchical categories) - Allows building of category trees at the global level. Null means root category.","relation":{"name":"parent","targetModel":"categories","mappingName":"recursive"},"unique":false,"nullable":true}],"plainFields":[{"name":"code","type":"string","description":"Unique category code - Implements code-based lookup and integrity for performance and cross-channel analytics. For example, 'ELEC_PHONES'.","nullable":false},{"name":"name","type":"string","description":"Display name for the category - Implements UI and admin display as required. Ensures normalization by separation from channel-specific display concerns.","nullable":false},{"name":"description","type":"string","description":"Detailed description of the category - Implements SEO, merchandising, and content use. Purely atomic business info only.","nullable":true},{"name":"created_at","type":"datetime","description":"Creation timestamp - For business/audit traceability (per document requirements). Only atomic event data.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last updated timestamp - Tracks when category details change as required by audit and analytics sections. Not derived or aggregated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["parent_id"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"category_mappings","description":"Category Mappings - This implements cross-channel category mapping, performance metrics, and reorganization capabilities per requirements doc.\n\nJunction table for mapping relationships between channel_categories in different channels or between a channel_category and a global category. Maintains strict normalization by only referencing IDs—mapping logic and business rules exist at the application layer.\n\nFor example, used to relate 'Sneakers' in Channel A's channel_category tree to 'Trainers' in Channel B, or to a global category.\n\nKey relationships: Connects channel_categories (for both source and target sides) and categories.\nSpecial behaviors: Used to power cross-channel category analytics, lookup, and migration tools.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"source_channel_category_id","type":"uuid","description":"Source channel category {@link channel_categories.id} - The category in one channel needing mapping.","relation":{"name":"source","targetModel":"channel_categories","mappingName":"category_mappings_of_source_channel_category_id"},"unique":false,"nullable":false},{"name":"target_channel_category_id","type":"uuid","description":"Target channel category {@link channel_categories.id} - The related category (either in another channel, or same channel, or mapped to another taxonomy).","relation":{"name":"target","targetModel":"channel_categories","mappingName":"category_mappings_of_target_channel_category_id"},"unique":false,"nullable":false},{"name":"global_category_id","type":"uuid","description":"Optional reference to global category {@link categories.id} (when mapping to global taxonomy).","relation":{"name":"globalCategory","targetModel":"categories"},"unique":false,"nullable":true}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp for mapping creation - For audit trail and category performance analytics per requirements. Not precomputed, atomic event info.","nullable":false}],"uniqueIndexes":[{"fieldNames":["source_channel_category_id","target_channel_category_id"],"unique":true}],"plainIndexes":[{"fieldNames":["global_category_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"sections","description":"Sections - This implements the spatial/specialty categorization, section registration/management, and merchandising requirements from the requirement document.\n\nRepresents special spatial groupings in a channel (like 'corners' of a department store). Sections allow for product display, grouping, and business logic independent of regular category trees. Maintains 3NF by atomic identifier and relationships only—no denormalized or derived fields. For example, 'Sports Corner', 'Kids Shoes', 'Daily Deals'.\n\nKey relationships: Linked to channels by channel_id. Special behaviors: Can be managed and displayed per channel, providing unique merchandising layouts.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"channel_id","type":"uuid","description":"Owning channel {@link channels.id} - Assigns section to a particular channel per requirements.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"code","type":"string","description":"Unique code for section in channel - For quick lookup and merchandising rule application. Enforces unique constraint within a channel (using uniqueIndexes).","nullable":false},{"name":"name","type":"string","description":"Display name for this section - Used in admin panels, customer site navigation, etc.","nullable":false},{"name":"visible","type":"boolean","description":"Visibility status for the section - Enforces dynamic merchandising logic or temporary hiding/display of section per requirements document.","nullable":false},{"name":"sequence","type":"int","description":"Order of appearance for sections - Allows manual reordering for prominence in UI. Strictly atomic for 3NF compliance.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp for section record creation - Implements audit and analytics tracing required by requirements. Not a derived or calculated value.","nullable":false}],"uniqueIndexes":[{"fieldNames":["channel_id","code"],"unique":true}],"plainIndexes":[{"fieldNames":["channel_id"]},{"fieldNames":["visible"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-05-products.prisma","namespace":"Products","models":[{"name":"products","description":"Product main entity - This implements the 'Product registration, opening, closing, temporary pause, and suspension' and 'Section-based and Seller-based product management' and 'Product lifecycle with status tracking' requirements. \n\nEach product registered in the system is represented here. This table stores only atomic, non-snapshot data such as reference to the owning seller, channel, section, and category, and manages its status, but does not include any product content or calculated values. 3NF is maintained by separating owned variants, options, inventory, tags, and history entities. For example, product lifecycle transitions are audited elsewhere, not here. \n\nKey relationships: belongs to seller/user/channel/section/category. Special behaviors: deletion is soft-marked via deleted_at.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique product identifier."},"foreignFields":[{"name":"seller_id","type":"uuid","description":"Owning seller's {@link sellers.id} - associates this product record with its owner. Used for product access permissions and seller analytics.","relation":{"name":"seller","targetModel":"sellers"},"unique":false,"nullable":false},{"name":"channel_id","type":"uuid","description":"Sales channel's {@link channels.id}. Products can be listed in multiple channels for omnichannel management.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false},{"name":"section_id","type":"uuid","description":"Product's section {@link sections.id}. Used for merchandising and product grouping.","relation":{"name":"section","targetModel":"sections"},"unique":false,"nullable":true}],"plainFields":[{"name":"status","type":"string","description":"Product status - open/closed/paused/suspended. Implements product lifecycle requirement. Example: 'open', 'closed'. Maintains normalization: only atomic value, full status history is in audit entity.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation time - evidence for auditing. Implements history and evidence requirements. Maintains normalization: atomic timestamp, not calculated.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update time. For tracking updates. Maintains normalization: atomic.","nullable":false},{"name":"opened_at","type":"datetime","description":"Time product was made publicly sellable. Implements 'product status transition' requirement. Maintains normalization: one atomic value per row.","nullable":true},{"name":"closed_at","type":"datetime","description":"Time product was closed from sale (not deleted). For status management/evidence. Maintains normalization: atomic timestamp only. E.g., used to calculate inactive period in reports.","nullable":true},{"name":"deleted_at","type":"datetime","description":"Soft deletion timestamp. Implements 'do not delete, but mark as deleted' for legal/evidence purposes. Normalized: only one field, avoids cascading real deletes. Example: product is removed from search but preserved for audit.","nullable":true}],"uniqueIndexes":[{"fieldNames":["channel_id","seller_id","id"],"unique":true}],"plainIndexes":[{"fieldNames":["seller_id","created_at"]},{"fieldNames":["channel_id","status"]}],"ginIndexes":[],"stance":"primary"},{"name":"product_snapshots","description":"Product snapshot entity - Implements the 'Automatic snapshot creation on product changes', 'Preservation of previous product info versions', and 'Legal evidence preservation' requirement. \n\nEach snapshot records the product's descriptive metadata and content at a point in time, enabling full audit trails. 3NF is maintained by separating this entity, so the main product remains atomic and current. For example, reverting to a past snapshot or comparing differences across time.\n\nKey relationships: belongs to product, references creator user, has attachments/content/tags by relation. Special: Created whenever product changed. No denormalization.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary key."},"foreignFields":[{"name":"product_id","type":"uuid","description":"Belonged product's {@link products.id}. For historical record linkage.","relation":{"name":"product","targetModel":"products"},"unique":false,"nullable":false},{"name":"created_by","type":"uuid","description":"User's {@link users.id} who performed this snapshot edit. For auditing.","relation":{"name":"creator","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"format","type":"string","description":"Content format, e.g. 'html', 'md', 'txt'. Enables multiple presentation layers. Maintains normalization by storing atomic descriptor.","nullable":false},{"name":"title","type":"string","description":"Product title at snapshot time. Ensures auditability, supports changes over time. Example: title A before price change.","nullable":false},{"name":"description","type":"string","description":"Product description/content at that time. Maintains evidence/history. Example: description before/after changes.","nullable":false},{"name":"return_policy","type":"string","description":"Return/refund policy text at that time. Supports history/legal requirements. 3NF: not duplicated elsewhere, always atomic at snapshot.","nullable":true},{"name":"thumbnail_url","type":"uri","description":"Main thumbnail image for the product at that snapshot. Maintains history and search optimization. Not pre-calculated.","nullable":true},{"name":"created_at","type":"datetime","description":"Snapshot creation time. For audit trail/legal compliance. Always atomic.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["product_id","created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"description"}],"stance":"snapshot"},{"name":"product_options","description":"Product options entity - Implements the 'Option management' including selection, boolean, numeric, and string type. \n\nEach row defines a single option available for a specific product snapshot and supports price/inventory/logic branching. Maintains 3NF: option values are separate and combinatorial logic is handled in variants/model elsewhere. For example, 'color', 'size', or 'material'.\n\nKey relationships: belongs to option_groups and product_snapshots. Special: cannot exist without a product snapshot, grouping enables flexible option structure.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"product_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link product_snapshots.id}. For versioned option tracking.","relation":{"name":"snapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"option_group_id","type":"uuid","description":"Option group's {@link option_groups.id}. For grouping related options (e.g., all colors, all sizes).","relation":{"name":"group","targetModel":"option_groups"},"unique":false,"nullable":false}],"plainFields":[{"name":"option_code","type":"string","description":"Option code - unique within group. Implements distinction and mapping rules. Examples: 'red', 'xl'. Always atomic.","nullable":false},{"name":"name","type":"string","description":"Option display name. User-facing, supports localization. Example: 'Red', 'Extra Large'. 3NF, atomic.","nullable":false},{"name":"type","type":"string","description":"Option type (selection, boolean, numeric, string). Fulfills option management requirement. Value must match permitted set. 3NF: always atomic.","nullable":false},{"name":"is_variable","type":"boolean","description":"Is this option variable (affecting price/inventory)? Implements pricing/inventory rules. E.g., 'true' for impact, 'false' for cosmetic. Atomic field.","nullable":false},{"name":"sequence","type":"int","description":"Sequence order within group, for display and configuration. Fulfills option dependency/ordering requirement. Integer, atomic.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_snapshot_id","option_code"],"unique":true}],"plainIndexes":[{"fieldNames":["product_snapshot_id","option_group_id"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"option_groups","description":"Option group entity - Implements 'Option group management' by organizing related product options into groups for UI logic and variant generation. \n\nSupports requirements for grouping, dependency, and display order for complex products. Maintains normalization: only atomic data, options stored elsewhere. For example, 'Color', 'Size' are separate groups for variant combinations.\n\nKey relationships: belongs to product_snapshots, options reference this. Special: cannot exist without parent snapshot.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary key."},"foreignFields":[{"name":"product_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link product_snapshots.id}. Specifies which product version these options groups belong to.","relation":{"name":"snapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"name","type":"string","description":"Option group name. Example: 'Color', 'Size'. Used for grouping and display. Maintains normalization: atomic, not duplicated.","nullable":false},{"name":"sequence","type":"int","description":"Display/order index. Used for ordering option groups in UI. 3NF: atomic per group.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_snapshot_id","name"],"unique":true}],"plainIndexes":[{"fieldNames":["product_snapshot_id","sequence"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"product_variants","description":"Product variant entity - Implements the 'Final product configuration based on option combinations' and 'Inventory management for each variant' requirements.\n\nA variant represents a unique, sellable configuration (SKU) of a product based on its option combination at a given snapshot. Maintains normalization: each variant points to option combinations via M:N or 1:N from product snapshot, price/inventory managed elsewhere. Example: Red/XL, Red/L, Blue/S, etc.\n\nKey relationships: belongs to product_snapshot, correlated to inventory. Special: supports complex option permutations.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary key."},"foreignFields":[{"name":"product_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link product_snapshots.id}. Indicates which version of the product this variant belongs to.","relation":{"name":"snapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"sku_code","type":"string","description":"Unique SKU per variant. Enables search, fulfillment and external integration. Unique per snapshot. Atomic value, maintains 3NF.","nullable":false},{"name":"option_codes","type":"string","description":"Comma-delimited codes of options composing this variant. Example: 'red,xl'. For fast look-up, normalized as a string. Full option/variant mapping is managed in junction table or join. 3NF: atomic, not denormalized calculated field.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_snapshot_id","sku_code"],"unique":true}],"plainIndexes":[{"fieldNames":["product_snapshot_id","option_codes"]}],"ginIndexes":[{"fieldName":"sku_code"}],"stance":"primary"},{"name":"bundled_products","description":"Bundled products entity - Implements the 'Support for bundled/composite products', 'Management of required/optional unit products', and 'Unit product sequence' requirements. \n\nEach record expresses that a product includes or bundles other products, specifying required/optional status and composition sequence. Maintains normalization: only pure relationships, not calculated. Example: Gym set = (1 dumbbell required, 1 yoga mat optional).\n\nKey relationships: composed of parent and unit product (both products). Special: expressed with 'is_required' and 'sequence' for order. M:N resolved by this table.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary key."},"foreignFields":[{"name":"parent_product_id","type":"uuid","description":"Bundled (composite) product's {@link products.id} - parent/owner.","relation":{"name":"parentProduct","targetModel":"products","mappingName":"bundled_products_of_parent_product_id"},"unique":false,"nullable":false},{"name":"unit_product_id","type":"uuid","description":"Bundled component's (unit) {@link products.id}. The product included in parent.","relation":{"name":"unitProduct","targetModel":"products","mappingName":"bundled_products_of_unit_product_id"},"unique":false,"nullable":false}],"plainFields":[{"name":"is_required","type":"boolean","description":"If this unit product is required ('true') or optional ('false'). Enables enforcement in bundle configuration. Maintains normalization: one fact per field. E.g., 'dumbbells required'","nullable":false},{"name":"sequence","type":"int","description":"Order of unit product in bundle. Used for UI/config. Integer, maintains normalization.","nullable":false}],"uniqueIndexes":[{"fieldNames":["parent_product_id","unit_product_id"],"unique":true}],"plainIndexes":[{"fieldNames":["parent_product_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"product_tags","description":"Product tag entity - Implements 'Management of product search tags'. Supports tagging for search optimization and trend highlighting. \n\nMaintains normalization: all tags atomic and per snapshot, never duplicated. Example: Tags: 'eco-friendly', 'bestseller'.\n\nKey relationships: belongs to product snapshot. Special: Tags versioned by snapshot for history. No pre-calculated search data.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"product_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link product_snapshots.id}. For tag versioning.","relation":{"name":"snapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"tag","type":"string","description":"Atomic tag value. Used for fuzzy text search, trend analysis. 3NF: never lists/arrays here, always atomic.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_snapshot_id","tag"],"unique":true}],"plainIndexes":[{"fieldNames":["product_snapshot_id"]}],"ginIndexes":[{"fieldName":"tag"}],"stance":"primary"},{"name":"product_attachments","description":"Product attachments entity - Implements 'Rich media support', 'Attachment management', and 'File metadata linkage' requirements. \n\nManages the M:N relationship between product snapshots and attached files, specifying sequence. Maintains normalization by not duplicating file info; only linkage and ordering. For example, product photos, manuals, videos.\n\nKey relationships: product_snapshot and attachments (files). Special: atomic records only, ordering supported.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"product_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link product_snapshots.id}.","relation":{"name":"snapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"attachment_id","type":"uuid","description":"Linked attachment's {@link attachments.id}. For supported media/file types.","relation":{"name":"attachment","targetModel":"attachments"},"unique":false,"nullable":false}],"plainFields":[{"name":"sequence","type":"int","description":"Attachment display order for UI. Maintains normalization, enables customizable layouts.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_snapshot_id","attachment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["attachment_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"product_inventories","description":"Product inventory entity - Implements 'Inventory management for each option combination', 'Initial/additional inventory', 'Out-of-stock handling', and 'Inventory history tracking'.\n\nRepresents inventory/capacity for each product_variant at snapshot time. Maintains normalization by keeping atomic inventory values, with history tracked outside. Example: 100 units for 'red-xl', updated on sale.\n\nKey relationships: belongs to product_variant, product_snapshot. Special: only atomic values, adjustment logs elsewhere.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"product_variant_id","type":"uuid","description":"Belonged variant's {@link product_variants.id}. For option combination inventory.","relation":{"name":"variant","targetModel":"product_variants"},"unique":true,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link product_snapshots.id}. For inventory version tracking.","relation":{"name":"snapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"initial_quantity","type":"int","description":"Initial stock at the creation of this record. Maintains snapshot tracking. Example: 50 units when new variant created.","nullable":false},{"name":"additional_quantity","type":"int","description":"Additional inventory since creation. Each adjustment is atomic; no running total is stored here. History in external table. For example, +10 units restocked.","nullable":true},{"name":"out_of_stock","type":"boolean","description":"Is item currently out of stock? Maintains current snapshot status. 3NF: one atomic flag.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_variant_id"],"unique":true}],"plainIndexes":[{"fieldNames":["product_snapshot_id"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-06-cart.prisma","namespace":"Carts","models":[{"name":"carts","description":"[Shopping Cart] - This implements 'Cart Management' and 'Cart Item Management' requirements. \n\nHandles customer-specific carts, supporting guest/member carts and temporary storage of products before order. Maintains 3NF by storing only cart identity, ownership, and high-level status. For example, a member starts a cart, adds items, and later checks out. \n\nKey relationships: Belongs to a customer or session, contains cart_items, references optional templates. \nSpecial behaviors: Soft-deletion, each cart is unique per session/customer and channel.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"cart_template_id","type":"uuid","description":"Template basis - Belonged cart template's {@link cart_templates.id}. Implements admin/seller-defined template cart structures. Optional for user-created carts.","relation":{"name":"template","targetModel":"cart_templates"},"unique":false,"nullable":true},{"name":"cart_session_id","type":"uuid","description":"Session binding - Belonged cart session's {@link cart_sessions.id}. Implements binding carts to session for guests, ensuring continuity between guest/member carts.","relation":{"name":"session","targetModel":"cart_sessions"},"unique":true,"nullable":true}],"plainFields":[{"name":"channel_id","type":"uuid","description":"Belonged channel - Current sales channel. Implements requirement for multi-channel support. Ensures normalization, e.g., channel-specific carts even for a single user. For example, distinguishes the same user shopping in different channel contexts.","nullable":false},{"name":"status","type":"string","description":"Cart status - Implements workflow state (e.g., active, checked_out, expired). Maintains normalization by only storing atomic status; business logic interprets allowed transitions. For example, status changes when cart is checked out to order.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp - Implements audit/log requirement. Business meaning: When the cart was created. Essential for cart lifecycle analysis.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp - Implements change tracking/audit. When the cart was last updated (e.g., items added/removed).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Deletion timestamp - Implements soft-deletion for audit trails. For example, null if active; set if deleted for evidence.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["status","created_at"]},{"fieldNames":["cart_session_id","status"]}],"ginIndexes":[],"stance":"primary"},{"name":"cart_items","description":"[Cart Item] - Implements 'Cart Item Management', 'Product Option Management' requirements. \n\nStores individual product items (by snapshot) in a cart. Maintains 3NF by using references to snapshots/product options, never caching calculated prices or totals. For example, when a user adds 3 of a red shirt with size L, each option selection is stored. \n\nKey relationships: References carts, product_snapshots, inventories, and tracks per-item option. \nSpecial behaviors: Soft-deletion, quantity may be split or adjusted during order conversion.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"cart_id","type":"uuid","description":"Belonged cart - Parent cart's {@link carts.id}. Implements grouping of items in the correct cart. Not nullable; every cart item is attached to one cart.","relation":{"name":"cart","targetModel":"carts"},"unique":false,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Cart's item product - Product snapshot at add time {@link product_snapshots.id}. Ensures evidence/timeline consistency for correct pricing/optioning; never references live product directly. Required for legal traceability.","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"product_inventory_id","type":"uuid","description":"Selected inventory - Option combination/inventory {@link product_inventories.id}. For precise stock deduction and fulfillment based on specific options (e.g., color/size). Required for inventory tracking. Nullable for composed/bundled items (handled via composition).","relation":{"name":"inventory","targetModel":"product_inventories"},"unique":false,"nullable":true}],"plainFields":[{"name":"quantity","type":"int","description":"Quantity - Implements amount/volume to add. Business meaning: How many units of the product user wishes to purchase. Maintains normalization—no total price or calculation stored.","nullable":false},{"name":"status","type":"string","description":"Current cart item status - Implements per-item status in cart (e.g., active, ordered, removed). Business logic will reference this during checkout/conversion.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp - Implements audit logging and item aging monitoring.","nullable":false},{"name":"updated_at","type":"datetime","description":"Update timestamp - When this item was last changed.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp - For evidence/audit, not actual deletion.","nullable":true}],"uniqueIndexes":[{"fieldNames":["cart_id","product_snapshot_id","product_inventory_id"],"unique":true}],"plainIndexes":[{"fieldNames":["cart_id","status"]},{"fieldNames":["product_snapshot_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"cart_templates","description":"[Cart Template] - Implements the 'Cart Template Management' functional requirement. \n\nAllows sellers/admins to define cart templates that users can copy or base their carts on. Maintains 3NF by not storing computed contents, only template metadata/identity. For example, seller \"B\" creates a preset holiday bundle cart, which users can duplicate. \n\nKey relationships: Related to sellers/administrators and referenced by carts. \nSpecial behaviors: Templates must be unique per seller/channel, and can be updated or retired, but always preserve identity for audit.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"seller_id","type":"uuid","description":"Belonged seller - Owner's {@link sellers.id}. Links template to specific seller. Supports multi-tenant setup and exclusive template management per seller. Nullable for admin/global templates.","relation":{"name":"seller","targetModel":"sellers"},"unique":false,"nullable":true},{"name":"channel_id","type":"uuid","description":"Belonged channel - Which channel this template is for. Implements channel-targeted merchandising requirements.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"name","type":"string","description":"Display name - Implements template labeling for UI/business use. For example, 'Holiday Gift Set'.","nullable":false},{"name":"description","type":"string","description":"Template description - Explains contents/rules for managers/customers. Ensures explanation kept separate, maintains normalization; no actual items data here.","nullable":true},{"name":"is_active","type":"boolean","description":"Active flag - Indicates if template is selectable. For example, false if template is obsolete.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp - For auditing/becoming available to users.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp.","nullable":false}],"uniqueIndexes":[{"fieldNames":["seller_id","channel_id","name"],"unique":true}],"plainIndexes":[{"fieldNames":["is_active","channel_id"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"cart_sessions","description":"[Cart Session] - Implements 'Cart Session Management', 'Cart Expiration Policies'. \n\nBinds temporary anonymous cart sessions, enabling guests to build carts before login or sign-up. Maintains 3NF: only manages session identity, link, and state—no calculated or cached cart details. For example, a guest shops, is assigned a session; after login, session can link to member. \n\nKey relationships: Linked to multiple carts (one-to-many), references shopping_customers for eventual upgrade. \nSpecial behaviors: Expiry timestamp, session can be invalidated on logout/purchase.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"session_token","type":"string","description":"Session token - Implements binding between client/browser and server-side cart data. For example, cookie value or persisted browser storage key.","nullable":false},{"name":"expires_at","type":"datetime","description":"Expiry timestamp - When session will automatically invalidate. Enforces cart expiration policies for regulatory/business reasons.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp.","nullable":false},{"name":"updated_at","type":"datetime","description":"Update timestamp.","nullable":false},{"name":"is_active","type":"boolean","description":"Is session valid/active. Implements session invalidation (expire, merged, converted to member cart).","nullable":false}],"uniqueIndexes":[{"fieldNames":["session_token"],"unique":true}],"plainIndexes":[{"fieldNames":["expires_at","is_active"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-07-orders.prisma","namespace":"Orders","models":[{"name":"orders","description":"Order entity - This implements the 'Order Management' section from the requirements analysis. \n\nHandles the core process of capturing and tracking customer purchase requests, supporting separation of application/payment as outlined. Maintains 3NF by storing only atomic and current order data (no aggregates/calculated fields). For example, when a customer submits an order, a record is created here linked to associated items, delivery, and payments.\n\nKey relationships: Links to customers, delivery, payments, order items, and order histories.\nSpecial behaviors: Soft deletes by marking with deleted_at for evidence preservation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each order."},"foreignFields":[{"name":"order_delivery_id","type":"uuid","description":"Belonged delivery's {@link order_delivery.id}. Associates the order to its shipment information entity.","relation":{"name":"delivery","targetModel":"order_delivery"},"unique":true,"nullable":false}],"plainFields":[{"name":"code","type":"string","description":"Unique display code for the order - Implements 'Order Management / Tracking' (requirement: Displayable order reference). Ensures normalization by representing only the code, not tracking logic or aggregate properties. For example, 'ORD-20240601-00123'.","nullable":false},{"name":"order_representative_name","type":"string","description":"Order representative name - Implements 'Order Management'. This is the main display name for the order (e.g., the receiver's or customer's name for order summary).","nullable":true},{"name":"opened_at","type":"datetime","description":"Timestamp when the order application was initiated - Implements 'Order Submission Timestamp' from requirements. For example, when a customer clicks 'Buy now' or completes checkout, this value records the start time.","nullable":false},{"name":"confirmed_at","type":"datetime","description":"Timestamp when the payment/confirmation for the order completed - Implements 'Order Confirmation' and 'Order State Transition' from the requirements. Only set after successful payment; otherwise, null.","nullable":true},{"name":"status","type":"string","description":"Current status of the order - Implements 'Order Status Management'. Examples: 'applied', 'confirmed', 'shipped', 'completed', 'cancelled'. Simple string, not calculated. For details see order_status_logs history.","nullable":false},{"name":"created_at","type":"datetime","description":"Order creation timestamp - Implements audit and evidence requirements; marks DB insertion time. Not calculated, atomic value.","nullable":false},{"name":"updated_at","type":"datetime","description":"Order update timestamp - Tracks last modification of the order data (3NF).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Order deletion timestamp - Implements 'Evidence Preservation' (soft delete). Instead of true removal, mark as deleted for audit/history.","nullable":true}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["order_delivery_id"]},{"fieldNames":["status"]}],"ginIndexes":[],"stance":"primary"},{"name":"order_items","description":"Order item entity - This implements the 'Order Item Management' requirement. \n\nStores granular item-by-item purchase records for each order, maintaining strict normalization (no aggregated, calculated, or derived fields). Fulfills use cases like splitting orders, managing per-item fulfillment, and return/exchange tracking. Example: If one order contains two products, two records here.\n\nKey relationships: Belongs to one order, references confirmed product configuration snapshot.\nSpecial behaviors: Links to order_histories for item state auditing.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for order item."},"foreignFields":[{"name":"order_id","type":"uuid","description":"Order's {@link orders.id}. Associates item to parent order.","relation":{"name":"order","targetModel":"orders"},"unique":false,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Confirmed product snapshot's {@link product_snapshots.id}. Ensures item reflects specific product version at the time of order (implements 'Snapshot-based History Management').","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"quantity","type":"int","description":"Item quantity purchased - Implements 'Order Item Quantities'. Fully normalized; one row per product variant per order.","nullable":false},{"name":"unit_price","type":"double","description":"Unit price at the time of order - Implements price snapshot requirement. Pure atomic price per one item, not multiplied by quantity. For example, if 2 units @ $25 each, unit_price = 25, quantity = 2.","nullable":false},{"name":"currency","type":"string","description":"Order currency (e.g., KRW, USD, EUR) - Implements multi-currency requirement. Stored as atomic code per order item. Example value: 'KRW'.","nullable":false},{"name":"created_at","type":"datetime","description":"Order item creation timestamp. For evidence tracking and normalization.","nullable":false},{"name":"updated_at","type":"datetime","description":"Order item update timestamp. For 3NF, not calculated.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp (evidence/audit). Implements 'Evidence Preservation': never hard delete, only mark as deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["order_id","product_snapshot_id"],"unique":true}],"plainIndexes":[{"fieldNames":["order_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"order_histories","description":"Order history entity - Implements 'Order History and Analytics' plus snapshot-based audit trail (requirement: evidence for all order changes). \n\nEach record captures status transitions, modifications, and meaningful events for the parent order/item. Fully normalized: no aggregate or denormalized info. E.g., whenever status != previous, a new record is created for auditing.\n\nKey relationships: Linked to order (and possibly order_item for per-item events).\nSpecial behaviors: Read-only after creation (immutable audit trail).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for order history record."},"foreignFields":[{"name":"order_id","type":"uuid","description":"Belonged order's {@link orders.id}. Links history record to main order.","relation":{"name":"order","targetModel":"orders"},"unique":false,"nullable":false},{"name":"order_item_id","type":"uuid","description":"(Optional) Belonged order item's {@link order_items.id}. Provides fine-grained history if applicable; nullable for order-level events.","relation":{"name":"orderItem","targetModel":"order_items"},"unique":false,"nullable":true}],"plainFields":[{"name":"status","type":"string","description":"Status at this audit point. E.g., 'confirmed', 'shipped', 'cancelled'. Normalized, string value only.","nullable":false},{"name":"changed_at","type":"datetime","description":"History record timestamp (when the transition/event happened). Never calculated, true event time.","nullable":false},{"name":"changer_role","type":"string","description":"Role responsible for change (e.g., 'customer','admin','system'). Implements audit/traceability requirements. For example, used in analytics/reporting/audits.","nullable":false},{"name":"comment","type":"string","description":"Optional comment or reason for status change. Purely descriptive, not calculated.","nullable":true}],"uniqueIndexes":[{"fieldNames":["order_id","changed_at"],"unique":true}],"plainIndexes":[{"fieldNames":["order_item_id"]}],"ginIndexes":[{"fieldName":"comment"}],"stance":"primary"},{"name":"order_payments","description":"Order payment entity - Implements the 'Order Publishing Management / Payment Processing' requirements.\n\nRepresents each payment transaction made for an order. Fulfills snapshot-based record of all payments (atomic, no calculated fields in main). For example, if a payment is initiated then cancelled, both payment event records kept separately.\n\nKey relationships: Belongs to an order. Optionally references payment method, coupon, deposit/mileage entities. Payment cancellation is managed via separate record/state (do not delete).\nSpecial behaviors: Both cash and async methods supported.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for payment."},"foreignFields":[{"name":"order_id","type":"uuid","description":"Belonged order's {@link orders.id}. Connects payment to parent order.","relation":{"name":"order","targetModel":"orders"},"unique":false,"nullable":false}],"plainFields":[{"name":"payment_method","type":"string","description":"Payment method (e.g., 'card', 'deposit', 'mileage', 'virtual_account', 'bank_transfer'). Store only atomic method string.","nullable":false},{"name":"amount","type":"double","description":"Payment amount. Atomic amount for this payment record. Multicurrency handled per order.","nullable":false},{"name":"payment_status","type":"string","description":"Status of payment (e.g., 'pending', 'completed', 'cancelled'). String is normalized value, no logic.","nullable":false},{"name":"requested_at","type":"datetime","description":"Timestamp payment was requested. For audit/compliance.","nullable":false},{"name":"completed_at","type":"datetime","description":"Timestamp payment completed. Null if not completed/cancelled.","nullable":true},{"name":"cancelled_at","type":"datetime","description":"Timestamp payment cancelled. Null unless cancelled; implements evidence preservation. Record is not deleted when cancelled.","nullable":true},{"name":"transaction_reference","type":"string","description":"External transaction reference or code. Implements payment tracking requirements for reconciliation/audit. Null if not issued.","nullable":true}],"uniqueIndexes":[{"fieldNames":["order_id","transaction_reference"],"unique":true}],"plainIndexes":[{"fieldNames":["order_id"]},{"fieldNames":["payment_status"]}],"ginIndexes":[],"stance":"primary"},{"name":"order_delivery","description":"Order delivery entity - Implements 'Delivery Management'.\n\nHolds the delivery/shipping information for each order. Strictly normalized: customer address, method, cost, status are tracked atomically; stage progress is in order_delivery_stages. Example: one row per order, can be split to stages (stages in child table).\n\nKey relationships: One-to-one with orders, one-to-many with delivery stages.\nSpecial behaviors: Soft deletes only, evidence of delivery progression via log/history.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique delivery information record."},"foreignFields":[{"name":"shipping_address_id","type":"uuid","description":"Belonged address's {@link user_addresses.id}. Mechanism to trace which customer address used for delivery.","relation":{"name":"shippingAddress","targetModel":"user_addresses"},"unique":false,"nullable":false}],"plainFields":[{"name":"delivery_method","type":"string","description":"Selected method (e.g. 'courier', 'pickup', 'in-store'). Only atomic value, no extra details.","nullable":false},{"name":"delivery_cost","type":"double","description":"Total cost for shipment. No calculated value; result of logic elsewhere.","nullable":false},{"name":"delivery_status","type":"string","description":"Current status (e.g. 'preparing', 'shipped', 'completed', etc). Summary only, not aggregated. All detailed transitions tracked in order_delivery_stages.","nullable":false},{"name":"tracking_number","type":"string","description":"External carrier tracking number (if provided). Null if not issued yet.","nullable":true},{"name":"created_at","type":"datetime","description":"Record creation time.","nullable":false},{"name":"updated_at","type":"datetime","description":"Record last updated time.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp (instead of removal for evidence).","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["delivery_status"]}],"ginIndexes":[],"stance":"primary"},{"name":"order_delivery_stages","description":"Order delivery stage entity - Implements 'Delivery Stage Management'.\n\nEach record represents a delivery state change event (e.g. preparing, shipped, delivered). Maintains normalized, atomic transitions (1 row per stage per order). Fulfills requirement for fine-grained delivery monitoring, alerts, histories.\n\nKey relationships: Belongs to delivery (order_delivery).\nSpecial behaviors: Immutable once created; provides audit trail for delivery process.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for delivery stage."},"foreignFields":[{"name":"order_delivery_id","type":"uuid","description":"Belonged delivery's {@link order_delivery.id}. Points to a specific delivery entity.","relation":{"name":"delivery","targetModel":"order_delivery"},"unique":false,"nullable":false}],"plainFields":[{"name":"stage","type":"string","description":"Delivery stage (e.g. 'preparing', 'manufacturing', 'shipping', 'delivered'). Only atomic value by event.","nullable":false},{"name":"started_at","type":"datetime","description":"Stage start timestamp. Marks when this stage began.","nullable":false},{"name":"completed_at","type":"datetime","description":"(Optional) When this stage completed. Null if in-progress or n/a.","nullable":true}],"uniqueIndexes":[{"fieldNames":["order_delivery_id","stage","started_at"],"unique":true}],"plainIndexes":[{"fieldNames":["order_delivery_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"order_status_logs","description":"Order status log entity - Implements 'Order Status Management' and behavioral audit requirement.\n\nEach change event in order status creates an atomic record here, providing full evidence history per order. No denormalized values; link to orders for reporting and compliance. E.g., if order status moves from 'applied' → 'paid' → 'shipped', each event is a new log entry.\n\nKey relationships: Linked to parent order.\nSpecial behaviors: Immutable log, used for analytics/auditing; supports audit across all order status change events.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for status log."},"foreignFields":[{"name":"order_id","type":"uuid","description":"Belonged order's {@link orders.id}. Provides context for the status change event.","relation":{"name":"order","targetModel":"orders"},"unique":false,"nullable":false}],"plainFields":[{"name":"previous_status","type":"string","description":"Status before the event. Simple atomic value, no transitions.","nullable":false},{"name":"new_status","type":"string","description":"Status after the event. No logic here, just the state post-event.","nullable":false},{"name":"changed_at","type":"datetime","description":"Timestamp for the status transition event.","nullable":false},{"name":"changer_role","type":"string","description":"Role who made the change (e.g. 'customer', 'admin', 'system'). Implements permission tracking requirement.","nullable":false}],"uniqueIndexes":[{"fieldNames":["order_id","changed_at"],"unique":true}],"plainIndexes":[{"fieldNames":["order_id"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-08-discount_payments.prisma","namespace":"DiscountPayments","models":[{"name":"coupons","description":"Coupon entity - Implements the Coupon Management and Discount Coupon Application Rules requirements. \n\nRepresents discount or benefit coupons issuable to customers. Designed for managing issuance, configuration (amount/percentage, validity, min/max conditions, exclusivity), status, and usage analytics. Maintains full 3NF normalization by storing only atomic coupon configuration data. Example: used to issue a 10% off or $5 off coupon, with unique per-coupon settings.\n\nKey relationships: coupon_application_conditions (restrictions), coupon_tickets (issued instances), coupon_codes (private codes). \nSpecial behaviors: Enforces unique coupon code within channel; allows exclusive/stackable options; does not store calculated or summary data.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for coupon."},"foreignFields":[{"name":"channel_id","type":"uuid","description":"Belonged channel's {@link channels.id}. Which sales channel issued or applies this coupon. Supports channel-specific coupon rules and analytics.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"code","type":"string","description":"Unique code for coupon management - Implements unique coupon identification requirement. Used for business management and analytics, not redemption by customers.","nullable":false},{"name":"title","type":"string","description":"Coupon title/name - Voucher name for customer and admin. Business purpose for searching/listing coupon types.","nullable":false},{"name":"description","type":"string","description":"Description of the coupon (optional). For admin details or customer info. Does not duplicate data elsewhere, normalization compliant.","nullable":true},{"name":"discount_type","type":"string","description":"Type of discount provided - Implements Discount kind requirement. E.g. 'amount', 'percentage'. Drives how discount_value is interpreted.","nullable":false},{"name":"discount_value","type":"double","description":"Discount value - amount/percentage depending on discount_type. Normalized, not duplicated elsewhere. For example, discount_value = 10, discount_type = 'percentage'.","nullable":false},{"name":"exclusive","type":"boolean","description":"Whether coupon is exclusive (cannot be stacked). Implements exclusivity rule from business logic.","nullable":false},{"name":"stackable","type":"boolean","description":"Whether coupon can be combined with other coupons; dual with exclusive for future extensibility.","nullable":false},{"name":"min_order_amount","type":"double","description":"Minimum order amount required for coupon usage (optional). Enforces business restriction at usage time, not calculated here.","nullable":true},{"name":"max_discount_amount","type":"double","description":"Maximum discount value allowed for this coupon (optional). Applies to percentage-type mainly.","nullable":true},{"name":"issue_quantity","type":"int","description":"Total issuance quantity (if limited). Implements 'issuance quantity limitation'.","nullable":true},{"name":"per_user_limit","type":"int","description":"Maximum times a single user can redeem this coupon (null=unlimited). Enforces per-user usage rules.","nullable":true},{"name":"issued_count","type":"int","description":"Issued coupon tickets counter (denormalized in materialized view, not updated here). Optional for analytic reference only, not updated in business logic here.","nullable":true},{"name":"public","type":"boolean","description":"Whether the coupon is publicly claimable or private/targeted.","nullable":false},{"name":"valid_from","type":"datetime","description":"Coupon validity start datetime.","nullable":false},{"name":"valid_until","type":"datetime","description":"Coupon validity end datetime.","nullable":false},{"name":"created_at","type":"datetime","description":"Coupon record created time.","nullable":false},{"name":"updated_at","type":"datetime","description":"Coupon record last updated time. For auditing.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Coupon record deletion time (soft delete).","nullable":true}],"uniqueIndexes":[{"fieldNames":["channel_id","code"],"unique":true}],"plainIndexes":[{"fieldNames":["valid_from","valid_until"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"title"}],"stance":"primary"},{"name":"coupon_application_conditions","description":"Coupon application condition entity - Implements 'Coupon Application Condition Management' requirement.\n\nRepresents usage restrictions and eligibility criteria for coupons. Enforces include/exclude by section, seller, product; supports complex targeting, segmentation, and funnel rules. 3NF compliant by separating each include/exclude condition row. Example: restrict a coupon only to certain sections/products/sellers or to exclude customer segments.\n\nKey relationships: coupon referencing (coupons), possible referencing to sections, sellers, or products as foreign keys elsewhere.\nSpecial behaviors: Each row defines one condition; exclude or include type.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"coupon_id","type":"uuid","description":"Related coupon's {@link coupons.id}. Parent coupon this condition applies to.","relation":{"name":"coupon","targetModel":"coupons"},"unique":false,"nullable":false}],"plainFields":[{"name":"condition_type","type":"string","description":"Type of application condition (e.g., 'include_section', 'exclude_product', 'target_segment'). Enables business flexibility, normalized for extensibility.","nullable":false},{"name":"condition_value","type":"string","description":"Value or reference of the condition (e.g., section id, product id, customer segment code as string).","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["coupon_id","condition_type","condition_value"]}],"ginIndexes":[],"stance":"primary"},{"name":"coupon_tickets","description":"Issued coupon instance for specific customer - Implements 'Coupon Ticket Management' requirement.\n\nCreated when a coupon is issued/claimed by a customer (e.g., via UI or via a public/private code). Tracks usage, user, usage history, and validity. Enforces per-user limit and status. Maintains 3NF as all details are based on raw coupon and not duplicated.\n\nKey relationships: references coupons (coupon), the customer (user), and possibly the ticket code (coupon_code_id for private coupons). \nSpecial behaviors: Status can be tracked (active, used, expired); supports auditing and redemption workflow.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"coupon_id","type":"uuid","description":"Issued coupon's {@link coupons.id}. The parent coupon definition.","relation":{"name":"coupon","targetModel":"coupons"},"unique":false,"nullable":false},{"name":"user_id","type":"uuid","description":"Issued customer's {@link users.id}. The customer for whom this coupon is ticketed.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false},{"name":"coupon_code_id","type":"uuid","description":"One-time/private coupon code's {@link coupon_codes.id} if issued via private code. Optional field for supporting personal codes.","relation":{"name":"couponCode","targetModel":"coupon_codes"},"unique":false,"nullable":true}],"plainFields":[{"name":"status","type":"string","description":"Coupon status (e.g., 'active','used','expired','canceled') - Implements business rule tracking. Managed by business logic, not derived/calculated.","nullable":false},{"name":"used_at","type":"datetime","description":"Datetime coupon was redeemed (or null if not used). Enables confident auditing and analytics.","nullable":true},{"name":"issued_at","type":"datetime","description":"Issued/claimed datetime for auditing.","nullable":false},{"name":"expired_at","type":"datetime","description":"Coupon expiration at instance level; allows per-ticket override from coupon validity.","nullable":true},{"name":"created_at","type":"datetime","description":"Record created time.","nullable":false},{"name":"updated_at","type":"datetime","description":"Record update time.","nullable":false}],"uniqueIndexes":[{"fieldNames":["coupon_id","user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id","status"]}],"ginIndexes":[],"stance":"primary"},{"name":"coupon_codes","description":"One-time or private coupon codes entity - Implements 'One-time Coupon Management'.\n\nEncapsulates private one-time code logic. Generated in advance and redeemed by code entry. Each row is a unique unrepeated code. 3NF compliant: only code and metadata per row. Example: Used for influencer campaigns, referrals, or private events.\n\nKey relationships: coupon (coupon_id).\nSpecial behaviors: Uniqueness of code enforced system-wide. Each code can be mapped to a specific issued ticket instance or redeemed status.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"coupon_id","type":"uuid","description":"Related coupon's {@link coupons.id}.","relation":{"name":"coupon","targetModel":"coupons"},"unique":false,"nullable":false}],"plainFields":[{"name":"code","type":"string","description":"One-time code text - Implements secure one-time code provision. Not duplicated, unique across all active codes.","nullable":false},{"name":"issued_at","type":"datetime","description":"Time of code generation/issuance for auditing purposes.","nullable":false},{"name":"used_at","type":"datetime","description":"Time of code redemption, null if unused. Enables evidence tracing.","nullable":true}],"uniqueIndexes":[{"fieldNames":["code"],"unique":true}],"plainIndexes":[{"fieldNames":["coupon_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"deposits","description":"Deposit entity - Implements Deposit Management requirement.\n\nStores aggregate deposit balance and metadata for each user/customer. Holds only atomic, normalized data. For example, user balance is updated only via deposit_histories, never stored redundantly. \n\nKey relationships: user reference (user_id), joined to deposit_histories for transactional changes.\nSpecial behaviors: Single deposit account per user enforced; balance is updated from underlying histories only.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Deposit owner's {@link users.id}.","relation":{"name":"user","targetModel":"users"},"unique":true,"nullable":false}],"plainFields":[{"name":"balance","type":"double","description":"Current deposit balance - always computed from deposit_histories, not precalculated or denormalized here, normalization ensured.","nullable":false},{"name":"created_at","type":"datetime","description":"Time deposit record was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update time for record, e.g., new transaction entry.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"deposit_histories","description":"Deposit transaction record - Implements Deposit Management and Transaction History requirements.\n\nHistory of all deposits/withdrawals performed by the user. Serves as the ledger for deposit balance calculations. 3NF maintained by separating each change/event.\n\nKey relationships: deposit reference (deposit_id), user reference (user_id), and possibly deposit_charge reference.\nSpecial behaviors: Detailed income/outcome metadata, type, and timestamp for auditing.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"deposit_id","type":"uuid","description":"Belonged deposit's {@link deposits.id}. Owner deposit account.","relation":{"name":"deposit","targetModel":"deposits"},"unique":false,"nullable":false},{"name":"user_id","type":"uuid","description":"Belonged user's {@link users.id}. For cross-checking at transactional level.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false},{"name":"deposit_charge_id","type":"uuid","description":"Related charge's {@link deposit_charges.id} (if related to a charging event). Optional nullable FK.","relation":{"name":"depositCharge","targetModel":"deposit_charges"},"unique":false,"nullable":true}],"plainFields":[{"name":"transaction_type","type":"string","description":"Type of deposit transaction (income/outcome/adjustment/etc). Enables rich analytics and normalization.","nullable":false},{"name":"amount","type":"double","description":"Transaction amount, positive or negative as required.","nullable":false},{"name":"description","type":"string","description":"Business note or purpose of the transaction (optional). Not repeated elsewhere, normalization preserved.","nullable":true},{"name":"created_at","type":"datetime","description":"Transaction creation time.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["deposit_id","transaction_type","created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"deposit_charges","description":"Deposit charge application record - Implements 'Deposit Charging Management' requirement.\n\nTracks user requests to charge (replenish) deposits. Each record stores the charge attempt and its outcome. 3NF: only one event per attempt, details stored here, not repeated. Supports business analytics and transaction tracing.\n\nKey relationships: user reference (user_id), may be referenced by deposit_histories for transaction details.\nSpecial behaviors: Payment reference, support for status ('pending','completed','canceled').","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Requesting user's {@link users.id}.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"amount","type":"double","description":"Amount to be charged to deposit.","nullable":false},{"name":"status","type":"string","description":"Current status of charge ('pending','completed','canceled'). Implements process tracking for business logic.","nullable":false},{"name":"requested_at","type":"datetime","description":"Datetime the charge was requested by user.","nullable":false},{"name":"completed_at","type":"datetime","description":"Datetime charge was completed, if successful. Null if pending/canceled.","nullable":true},{"name":"canceled_at","type":"datetime","description":"Datetime charge was canceled, if so. Null otherwise.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id","status"]}],"ginIndexes":[],"stance":"primary"},{"name":"mileage","description":"Mileage root entity - Implements 'Mileage Management' requirement.\n\nStores user's current mileage point balance. Only atomic balance and core metadata. All accrual/spending history tracked in mileage_histories. Example use: Tracks 1000 mileage point balance for a particular user.\n\nKey relationships: user reference (user_id), all history in mileage_histories.\nSpecial behaviors: Single mileage account per user enforced.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Mileage owner's {@link users.id}.","relation":{"name":"user","targetModel":"users"},"unique":true,"nullable":false}],"plainFields":[{"name":"balance","type":"double","description":"Current point balance - always derived from mileage_histories. No denormalized or calculated history kept here.","nullable":false},{"name":"created_at","type":"datetime","description":"Mileage account creation time.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last modification time.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"mileage_histories","description":"Mileage point transaction history - Implements 'Mileage Management' and Transaction History requirements.\n\nEvery income/outcome/change in a user's mileage is recorded here. Used for accurate point calculation and auditing. Does not duplicate any summary or total data. 3NF enforced.\n\nKey relationships: parent mileage account (mileage_id), user reference (user_id), possibly donation reference.\nSpecial behaviors: Each row = single point earning/spending event, not aggregated elsewhere.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"mileage_id","type":"uuid","description":"Belonged mileage account's {@link mileage.id}.","relation":{"name":"mileage","targetModel":"mileage"},"unique":false,"nullable":false},{"name":"user_id","type":"uuid","description":"Belonged user's {@link users.id}.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false},{"name":"mileage_donation_id","type":"uuid","description":"Related donation's {@link mileage_donations.id} (if point transfer/donation). Optional.","relation":{"name":"mileageDonation","targetModel":"mileage_donations"},"unique":false,"nullable":true}],"plainFields":[{"name":"transaction_type","type":"string","description":"Type of event: earned, spent, donated, adjusted etc. For business process tracing and compliance.","nullable":false},{"name":"amount","type":"double","description":"Number of mileage points +/- in this event.","nullable":false},{"name":"description","type":"string","description":"Free-text about this event. Not duplicated elsewhere.","nullable":true},{"name":"created_at","type":"datetime","description":"Time the transaction occurred.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["mileage_id","transaction_type","created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"mileage_donations","description":"Mileage donation record - Implements 'Mileage Donation Management'.\n\nTracks donation of mileage points from the system/administrators to users. Records purpose, recipient, and amount for evidence and audit. No summary or aggregated values, each row is a single donation event. 3NF maintained.\n\nKey relationships: user reference (user_id), referenced by mileage_histories for traceability.\nSpecial behaviors: Could be admins only for compliance and audit.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Recipient user's {@link users.id}.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"amount","type":"double","description":"Points donated. Only atomic value for this transfer, normalization upheld.","nullable":false},{"name":"reason","type":"string","description":"Documentation reason/purpose for donation.","nullable":false},{"name":"donated_at","type":"datetime","description":"Donation time. Auditing support.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["user_id","donated_at"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-09-bulletin_board.prisma","namespace":"BulletinBoard","models":[{"name":"posts","description":"Posts - This implements the requirement for 'post creation and deletion management' from the requirements document. \n\nFacilitates storage of all bulletin board posts, including articles, product inquiries, and reviews. Maintains 3NF compliance by separating snapshot content and attachments into related tables, enabling flexible post management, audit trails, and evidence preservation. For example, a user posting a question about a product will have a row here, with post content in related post_snapshots records.\n\nKey relationships: Linked to post_snapshots (1:N), comments (1:N), and post_attachments. May also relate to users/authors for traceability. \nSpecial behaviors: Soft delete (deleted_at), lifecycle tracking, strictly no denormalized fields .","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for a post."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Author user's {@link users.id}. Stores the author of the post or null for guest. Tracks author for permission and notification. Optional to support guest posts.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":true},{"name":"channel_id","type":"uuid","description":"Channel's {@link channels.id}. Indicates the channel in which the post was created. Required for proper channel grouping.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"type","type":"string","description":"Type of post - Implements the multi-purpose usage as per requirements (e.g., 'article', 'inquiry', 'review'). Allows systemic post differentiation. Ensures normalization by separating type from post content. For example, using 'inquiry' for product questions. Only accepts controlled set of values.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation time - Implements tracking/audit requirements. Records when the post was created. Ensures 3NF (atomic). Used for querying post histories.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Deleted time (nullable) - Implements soft delete. Retains row for audit purposes instead of hard delete to meet evidence preservation requirements. Null when post is active. For example, when a moderator marks a post as deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["channel_id","created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"post_snapshots","description":"Post Snapshots - This addresses 'edit history management through snapshots' from the requirements document.\n\nRecords every snapshot of a post's content for historical tracking and evidence preservation. Maintains 3NF compliance by storing only the snapshot content here (title/body), linked to the top-level post by foreign key. For example, an edit action on a post creates a new snapshot.\n\nKey relationships: Belongs to posts (N:1), may have multiple post_attachments per snapshot.\nSpecial behaviors: Each snapshot immutable after creation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique snapshot identifier."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Belonged post's {@link posts.id}. Indicates which post this snapshot records content for. Enables N:1 history pattern.","relation":{"name":"post","targetModel":"posts"},"unique":false,"nullable":false}],"plainFields":[{"name":"format","type":"string","description":"Format of snapshot body (e.g., 'md', 'html', 'txt'). Implements format/to support multiple content types as required. Ensures atomic separation of metadata from content. For example, storing 'md' for markdown posts.","nullable":false},{"name":"title","type":"string","description":"Title of post at time of snapshot. Implements historical evidence of title changes. Ensures normalization by storing with content, not main post. For example, when a post's title is modified, a new snapshot is created.","nullable":false},{"name":"body","type":"string","description":"Body content of post at time of snapshot. Implements need for audit/history of actual post content. Ensures 3NF and immutability of historical content.","nullable":false},{"name":"ip","type":"string","description":"IP address of editor. Used for dispute resolution and evidence. Ensures atomic field. Example: '192.168.1.23'.","nullable":false},{"name":"created_at","type":"datetime","description":"Snapshot creation time - Implements tracking of when this content was written. Used in version ordering and audits. For example, indicates exact edit time.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id","created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}],"stance":"snapshot"},{"name":"post_attachments","description":"Post Attachments - Implements 'file attachment support' requirement. \n\nModels many-to-many mapping between post_snapshots and attachments. Maintains full normalization by separating attachment details into attachments table, allowing reuse and versioning. For example, an image attached to a post edit will be one record here. \n\nKey relationships: FK to post_snapshots and attachments (M:N). Stores ordinal sequence. \nSpecial behaviors: Order of files preserved via sequence.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_snapshot_id","type":"uuid","description":"Belonged snapshot's {@link post_snapshots.id}. Indicates the snapshot this attachment belongs to.","relation":{"name":"snapshot","targetModel":"post_snapshots"},"unique":false,"nullable":false},{"name":"attachment_id","type":"uuid","description":"Belonged file's {@link attachments.id}. Refers to stored file metadata in attachments table.","relation":{"name":"attachment","targetModel":"attachments"},"unique":false,"nullable":false}],"plainFields":[{"name":"sequence","type":"int","description":"Attachment sequence order. Implements 'ordered attachments per snapshot' requirement. Ensures exact file order is always reconstructable. Example: 1 for main image, 2 for instruction file.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_snapshot_id"]},{"fieldNames":["attachment_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"comments","description":"Comments - Implements 'comment creation and reply management' from requirements. \n\nStores all comments for posts, supporting hierarchical structure. Maintains 3NF by keeping comment content/history in comment_snapshots. For example, user replies to a post or another comment—nested support via parent_id. \n\nKey relationships: FK to posts (N:1), parent_id (hierarchical), and comment_snapshots. \nSpecial behaviors: Soft-deletable, supports unlimited nesting. ","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key, each comment entity."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Belonged post's {@link posts.id}. The parent post this comment belongs to, ensuring 1:N from posts to comments.","relation":{"name":"post","targetModel":"posts"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent comment's {@link comments.id}. Optional for root-level comments. Enables hierarchical reply structure.","relation":{"name":"parent","targetModel":"comments","mappingName":"recursive"},"unique":false,"nullable":true},{"name":"user_id","type":"uuid","description":"Comment author's {@link users.id}. May be null for guest comments. For author tracking, notification, moderation.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":true}],"plainFields":[{"name":"created_at","type":"datetime","description":"Comment creation timestamp. Implements audit tracking requirement. Used for ordering and querying.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deleted timestamp. Compliance with evidence preservation—never hard delete. Null if active.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id","parent_id","created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"comment_snapshots","description":"Comment Snapshots - Implements 'comment edit history/audit' requirement. \n\nRecords full content of each version of a comment for evidence preservation. Complies with 3NF by linking all historical content to a specific comment and snapshot creation event. For example, when user edits a comment, a new snapshot is created. \n\nKey relationships: Belongs to one comment; may have attachments.\nSpecial behaviors: Immutability, separate row per edit.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique snapshot id of the comment."},"foreignFields":[{"name":"comment_id","type":"uuid","description":"Belonged comment's {@link comments.id}. Indicates which comment this snapshot is for.","relation":{"name":"comment","targetModel":"comments"},"unique":false,"nullable":false}],"plainFields":[{"name":"format","type":"string","description":"Format of comment content (md, html, txt). Implements need for various content types. Example: 'md' for markdown.","nullable":false},{"name":"body","type":"string","description":"Content body at the time of snapshot. 3NF compliance. Stores only current edit's body, not derived values.","nullable":false},{"name":"ip","type":"string","description":"IP address of comment editor. Implements evidence/dispute requirements. Example: '203.0.113.10'.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation time for this snapshot (edit or initial). Fulfills audit trail requirement.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["comment_id","created_at"]}],"ginIndexes":[{"fieldName":"body"}],"stance":"snapshot"},{"name":"comment_notifications","description":"Comment Notifications - Implements 'notification system for new comments' requirement.\n\nStores notifications triggered by comment activity, linking actor, receiver, and target comment. Complies with 3NF as all data atomic, no denormalization. Enables notification delivery engines to process and display notifications related to comments.\n\nKey relationships: FK to actor (user), receiver (user), and comment.\nSpecial behaviors: Supports \"read\" status, notification types, and post-event tracking.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique notification id."},"foreignFields":[{"name":"comment_id","type":"uuid","description":"Target comment's {@link comments.id}. The comment event that generated this notification.","relation":{"name":"comment","targetModel":"comments"},"unique":false,"nullable":false},{"name":"actor_id","type":"uuid","description":"Actor user's {@link users.id}. User who performed the action (e.g., wrote, replied).","relation":{"name":"actor","targetModel":"users","mappingName":"comment_notifications_of_actor_id"},"unique":false,"nullable":false},{"name":"receiver_id","type":"uuid","description":"Receiver user's {@link users.id}. User who receives the notification. Required for delivery.","relation":{"name":"receiver","targetModel":"users","mappingName":"comment_notifications_of_receiver_id"},"unique":false,"nullable":false}],"plainFields":[{"name":"type","type":"string","description":"Type of notification (e.g., 'comment', 'reply', 'mention'). Implements support for various notification contexts. Used by notification renderer.","nullable":false},{"name":"created_at","type":"datetime","description":"Notification creation time. For time-based filtering/sorting.","nullable":false},{"name":"read_at","type":"datetime","description":"Notification read timestamp (nullable). For read/unread tracking. Null if not yet read.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["receiver_id","created_at"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-10-inquiry_review.prisma","namespace":"InquiriesReviews","models":[{"name":"product_inquiries","description":"Product Inquiry - This implements the 'Product Inquiry Management' requirement from the requirement analysis report. \n\nThis model stores inquiries/questions registered by customers regarding products for the purpose of communication with sellers. Each record represents a single inquiry submission tied to the product snapshot at the question time, which is essential for preserving evidence in line with dispute resolution and evidentialism requirements. Maintains 3NF by referring only to atomic fields and linking related entities via foreign keys. For example, a customer asks about a product; the inquiry is tied to the product's version at inquiry time. \n\nKey relationships: references the customer, the product snapshot, and the channel. \nSpecial behaviors: does not contain content history (handled by snapshots), soft-delete pattern for evidence preservation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each inquiry."},"foreignFields":[{"name":"user_connection_id","type":"uuid","description":"Belonged connection's {@link user_connections.id}.\nRepresents the customer connection at inquiry submission time.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Belonged product snapshot's {@link product_snapshots.id}.\nBinds inquiry context to a specific product version for evidence.","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"channel_id","type":"uuid","description":"Belonged channel's {@link channels.id}.\nIndicates which channel the inquiry was made in.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"is_private","type":"boolean","description":"Private Post Flag - Implements the privacy requirement of inquiries.\nDetermines if the inquiry is public or only visible to select users. Maintains normalization by having a single privacy flag per inquiry. For example, set true for private inquiries.","nullable":false},{"name":"category","type":"string","description":"Inquiry Category - Categorizes the inquiry for prioritization, analytics, and escalation. Fulfills the requirement for inquiry classification. 3NF maintained, as all category logic externalized.","nullable":true},{"name":"status","type":"string","description":"Inquiry Status - Implements requirement for tracking inquiry processing workflow.\nReflects processing state (e.g., waiting, answered, closed). Separate status ensures no transitive dependency. For example, 'waiting_for_response', 'closed'.","nullable":false},{"name":"seller_viewed_at","type":"datetime","description":"Seller View Timestamp - Implements seller view tracking as required for response SLAs. Indicates when the seller first viewed the inquiry. Null if not yet viewed.","nullable":true},{"name":"created_at","type":"datetime","description":"Creation Timestamp - Implements audit and evidence requirements. When the inquiry was created. Always required for audit trail. Ex: 2024-01-23T05:23Z.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Deleted At (Soft Delete) - Evidence preservation requirement: do not physically delete records. Null if not deleted; set when deleted for audit/evidence.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_connection_id","product_snapshot_id","created_at"],"unique":true}],"plainIndexes":[{"fieldNames":["channel_id","created_at"]},{"fieldNames":["status"]}],"ginIndexes":[{"fieldName":"category"}],"stance":"primary"},{"name":"inquiry_snapshots","description":"Inquiry Snapshot - This model fulfills the requirement for 'Snapshot-based History Management' for inquiries, preserving the content and changes for legal/audit evidence. \n\nEach time an inquiry is created or edited, a snapshot record is created. Keeps all question revisions, which supports dispute resolution and provides defense against fraud. Fully normalized: only atomic data per snapshot, all references via foreign keys. For example, a customer edits their inquiry: old content is preserved in previous snapshot, new in a new snapshot.\n\nKey relationships: references its inquiry, channel, and product snapshot context.\nSpecial behaviors: Never deleted (evidence).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each snapshot."},"foreignFields":[{"name":"product_inquiry_id","type":"uuid","description":"Belonged inquiry's {@link product_inquiries.id}.\nConnects the snapshot to a specific inquiry entity.","relation":{"name":"productInquiry","targetModel":"product_inquiries"},"unique":false,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Product Snapshot for Context - References {@link product_snapshots.id}. Records product's current version for snapshot context and evidentialism.","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"user_connection_id","type":"uuid","description":"User Connection - References the inquirer's connection state when the snapshot was made ({@link user_connections.id}). Ensures full traceability (who, where, when).","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"channel_id","type":"uuid","description":"Channel Context ({@link channels.id}) - Stores which channel the inquiry snapshot was done under.","relation":{"name":"channel","targetModel":"channels"},"unique":false,"nullable":false}],"plainFields":[{"name":"format","type":"string","description":"Body Format - Stores format of content (e.g., html, md, txt). Implements rich content support per requirement. Maintains atomicity: one format per snapshot.","nullable":false},{"name":"body","type":"string","description":"Content Body - Actual question or content in the inquiry. This is atomic per snapshot. Each change/version in a new record, as required for audit/legal evidence.","nullable":false},{"name":"ip","type":"string","description":"Author's IP Address - Requirement for audit and legal traceability. Stores author IP on snapshot creation. 3NF: no transitive or derived information.","nullable":false},{"name":"created_at","type":"datetime","description":"Snapshot Creation Timestamp - Implements evidence preservation and audit trail. Records exactly when the snapshot was created. Required field; no nulls allowed.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_inquiry_id","created_at"],"unique":true}],"plainIndexes":[{"fieldNames":["user_connection_id","created_at"]}],"ginIndexes":[{"fieldName":"body"}],"stance":"snapshot"},{"name":"inquiry_responses","description":"Inquiry Response - Implements 'Inquiry Response Management' requirement. This model records seller/administrator responses to product inquiries. Each response is related to a specific inquiry and its snapshot.\n\n3NF maintained by separating each response from other entity data; allows for unlimited responses, response revisions (by linking to a snapshot), auditability, and moderation. For example, a seller can reply multiple times to the same inquiry; every version is preserved if edited (via snapshot-ing). \n\nKey relationships: to inquiry, to responder user_connection, to snapshot.\nSpecial behaviors: soft-deletion, auditing, status for evaluation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each response."},"foreignFields":[{"name":"product_inquiry_id","type":"uuid","description":"Belonged inquiry's {@link product_inquiries.id}. The inquiry this response addresses.","relation":{"name":"productInquiry","targetModel":"product_inquiries"},"unique":false,"nullable":false},{"name":"user_connection_id","type":"uuid","description":"Responder's connection ({@link user_connections.id}). Records user's session at reply time for audit traceability.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"inquiry_snapshot_id","type":"uuid","description":"Snapshot Context ({@link inquiry_snapshots.id}) - Optionally references which version of the inquiry this response answers. Nullable for bulk/tool responses.","relation":{"name":"inquirySnapshot","targetModel":"inquiry_snapshots"},"unique":false,"nullable":true}],"plainFields":[{"name":"status","type":"string","description":"Response Status - Used for evaluation, acceptance, or moderation. Maintains separation from actual content or inquiry status for normalization.","nullable":false},{"name":"created_at","type":"datetime","description":"Response Creation Timestamp - Audit/traceability per requirements. E.g., when the response was written.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft Delete Timestamp - Implements evidence preservation (retention instead of deletion).","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["product_inquiry_id","user_connection_id"]}],"ginIndexes":[],"stance":"primary"},{"name":"inquiry_comments","description":"Inquiry Comment - Implements 'Inquiry Comment Management' requirement. Records customer or seller comments on a given inquiry, supporting hierarchical replies. Each comment's content is managed via a separate snapshots table for evidence and history. 3NF maintained with only atomic, normalized fields per comment.\n\nKey relationships: to inquiry, to parent comment (for hierarchy), to author connection. All edit history in comment_snapshots. For example: seller replies to a comment, new snapshot issued. Comments are not deleted, only flagged deleted for evidence.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique for every comment."},"foreignFields":[{"name":"product_inquiry_id","type":"uuid","description":"Parent inquiry's {@link product_inquiries.id}. Connects comment to the relevant inquiry.","relation":{"name":"productInquiry","targetModel":"product_inquiries"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent comment's {@link inquiry_comments.id}. Null for top-level comments, present for replies in hierarchy.","relation":{"name":"parent","targetModel":"inquiry_comments","mappingName":"recursive"},"unique":false,"nullable":true},{"name":"user_connection_id","type":"uuid","description":"Author's user connection ({@link user_connections.id}). Maintains traceability per evidence/audit.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Creation Timestamp - Implements audit/evidence. When comment was authored.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft Delete Timestamp - Only flagged, not removed, per evidence rules. Null if not deleted.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["product_inquiry_id","parent_id","created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"inquiry_favorites","description":"Inquiry Favorite - This implements 'Inquiry Favorites' functional specification, enabling customers to favorite (bookmark) product inquiries. Stores which inquiry and its version (snapshot) was favorited at the time, in line with evidence and accurate personalization needs. 3NF compliance by separating favorite action (atomic data per event) from inquiry data, no duplication.\n\nKey relationships: references user, inquiry, and snapshot at the time. For example, a customer favorites an inquiry and is notified about future updates.\nSpecial behaviors: unique per (user, inquiry, snapshot) tuple. Deletion is soft for audit.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique for every inquiry favorite."},"foreignFields":[{"name":"user_connection_id","type":"uuid","description":"Customer's session connection ({@link user_connections.id}). For personalization and notification.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"product_inquiry_id","type":"uuid","description":"Favored inquiry ({@link product_inquiries.id}). Which inquiry is being favorited.","relation":{"name":"productInquiry","targetModel":"product_inquiries"},"unique":false,"nullable":false},{"name":"inquiry_snapshot_id","type":"uuid","description":"Favored inquiry's snapshot ({@link inquiry_snapshots.id}). Preserves contextual versioning info at time of favorite for correct updates.","relation":{"name":"inquirySnapshot","targetModel":"inquiry_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Favoriting Timestamp - Implements notification/analytics. When this favorite was made.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft Delete Timestamp - Fulfills evidence and audit requirement. Marks as removed without deletion.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_connection_id","product_inquiry_id","inquiry_snapshot_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[],"stance":"primary"},{"name":"product_reviews","description":"Product Review - Implements the 'Product Review Management' functional spec for reviews and ratings. Records customer reviews for products, linked strictly to product snapshots and order history for authenticity. Fully normalized: each review only contains atomic scalar info. All content/changes managed in review_snapshots. For example, a buyer can review a product only if purchased; their review is linked to the product version purchased. \n\nKey relationships: to product snapshot, to order item (if required), to author connection. Soft-delete for retention/evidence.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique review identifier."},"foreignFields":[{"name":"product_snapshot_id","type":"uuid","description":"Reviewed product's snapshot ({@link product_snapshots.id}) - Links review to the purchased version for evidentialism.","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"order_item_id","type":"uuid","description":"Order item ({@link order_items.id}) - Optionally records the sale the review is about. Null for non-purchase reviews, enforced externally.","relation":{"name":"orderItem","targetModel":"order_items"},"unique":false,"nullable":true},{"name":"user_connection_id","type":"uuid","description":"Author's connection ({@link user_connections.id}) - Tracks review traceability and supports badge system (e.g. verified review).","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false}],"plainFields":[{"name":"is_verified_purchase","type":"boolean","description":"Verified Purchase Flag - Implements badge and moderation requirement: was this review from an actual customer? Separation of badge logic from content for normalization. For example: true if tied to real order_item_id.","nullable":false},{"name":"created_at","type":"datetime","description":"Review Creation Timestamp - For audit, notification, legal defense.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft Delete Timestamp - For evidence, instead of hard delete.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_connection_id","product_snapshot_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"review_snapshots","description":"Review Snapshot - Implements the 'Snapshot-based History Management' requirement for product reviews. Stores every change to a review as a new snapshot, keeping all versions for audit trails, fraud defense, and legal evidence. Maintains strict 3NF by only including atomic fields, all changes as new records, and relational only via foreign keys.\n\nKey relationships: references review (required), product snapshot context (required), and author's connection (required). Example: a user edits review contents; a new record is appended, old record remains.\nSpecial behaviors: never deleted, every revision is saved.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique snapshot for each edit in a review."},"foreignFields":[{"name":"product_review_id","type":"uuid","description":"Belonged review's {@link product_reviews.id}. The core subject of this snapshot.","relation":{"name":"productReview","targetModel":"product_reviews"},"unique":false,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Product snapshot at review time ({@link product_snapshots.id}). For context and evidence.","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false},{"name":"user_connection_id","type":"uuid","description":"Author's user_connection ({@link user_connections.id}). Not null; never anonymous.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false}],"plainFields":[{"name":"rating","type":"int","description":"Rating Score - Implements star or point rating as required. Atomic per snapshot: each editorial change results in a new row. Range and rule validation handled externally.","nullable":false},{"name":"format","type":"string","description":"Body Format - E.g., html, md, txt. Each snapshot is one format; ensures atomic columns.","nullable":false},{"name":"body","type":"string","description":"Review Body - Customer's review content (free text). Atomic and non-derived to conform to 3NF.","nullable":false},{"name":"created_at","type":"datetime","description":"Snapshot Creation Timestamp - Audit and evidence. When this was written.","nullable":false}],"uniqueIndexes":[{"fieldNames":["product_review_id","created_at"],"unique":true}],"plainIndexes":[{"fieldNames":["user_connection_id","created_at"]}],"ginIndexes":[{"fieldName":"body"}],"stance":"snapshot"},{"name":"review_moderation_logs","description":"Review Moderation Log - Implements 'Review moderation' and audit trail for actions taken on product reviews. Records each event involving moderation (approval, rejection, edits, status changes), by whom and when. 3NF: atomic, event-driven, no duplication; all change history as unique event records. For example: admin hides an abusive review, a new log is appended.\n\nKey relationships: Refers to target review, moderator, and provides timestamp. Supports evidence/audit defense and analytics. Not deleted; every action is permanent record.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique log identifier for each moderation event."},"foreignFields":[{"name":"product_review_id","type":"uuid","description":"Moderated review's {@link product_reviews.id}. The subject of the log entry.","relation":{"name":"productReview","targetModel":"product_reviews"},"unique":false,"nullable":false},{"name":"moderator_user_connection_id","type":"uuid","description":"Moderator/Administrator connection ({@link user_connections.id}).\nRecords who took the action for audit/traceability.","relation":{"name":"moderatorUserConnection","targetModel":"user_connections"},"unique":false,"nullable":false}],"plainFields":[{"name":"action","type":"string","description":"Moderation Action - Describes the action taken (e.g. approve, reject, flag, edit_content).\nAtomic action type (no derived or precomputed).","nullable":false},{"name":"reason","type":"string","description":"Moderation Reason - Why the action was taken. Required for audit/appeal support.\nAtomic: describes only the reason for this event.","nullable":false},{"name":"created_at","type":"datetime","description":"Event Timestamp - When the action event occurred. For evidence/audit.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["product_review_id","created_at"]}],"ginIndexes":[{"fieldName":"reason"}],"stance":"primary"}]},{"filename":"schema-11-favorites.prisma","namespace":"Favorites","models":[{"name":"product_favorites","description":"Product Favorites Record - This implements the favorites system requirement from the requirements document, specifically '7.1 Product Favorites'.\n\nTracks which customers have favorited which products, preserving a snapshot of the product at the time of favoriting for audit and personalization. Maintains full 3NF normalization by storing only normalized references—customer, product, and the snapshot of the product—with no denormalized or calculated fields. For example, when a customer favorites a product, this model records the favorite event along with a reference to the snapshot representing the product's state at that time.\n\nKey relationships: Related to customers, products, and product_snapshots. Special behaviors: Each favorite is linked to a unique user and product pair; a favorite can only exist once per (user, product); preserves reference to historical product state.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Globally unique favorite record identifier."},"foreignFields":[{"name":"user_connection_id","type":"uuid","description":"Belonged customer's {@link user_connections.id}. Identifies the customer connection who favorited the product. Implements user tracking per session as per 2.1.1.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"product_id","type":"uuid","description":"Favorited product's {@link products.id}. The product which was favorited.","relation":{"name":"product","targetModel":"products"},"unique":false,"nullable":false},{"name":"product_snapshot_id","type":"uuid","description":"Favorited snapshot's {@link product_snapshots.id}. The snapshot of the product at the time of favoriting for audit purposes.","relation":{"name":"productSnapshot","targetModel":"product_snapshots"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Favorite Creation Timestamp - Implements the record time. Used to analyze favoriting trends and for audit trail. Ensures normalization by storing atomic favorite creation event. For example, analyzing when a favorite action occurred.","nullable":false},{"name":"notified_price_drop","type":"boolean","description":"Price Drop Notification Flag - Indicates whether the user has been notified of a price drop for this favorite. Fulfills notification functional requirements. Maintains normalization by storing user-specific notification state without duplication.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_connection_id","product_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["product_id","created_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"address_favorites","description":"Address Favorites Record - This implements the favorites system requirement from the requirements document, specifically '7.3 Address Favorites'.\n\nTracks which addresses are marked as favorite by which customer, with the ability to set a primary address. Maintains full 3NF normalization by referencing user connections and addresses only, without storing calculated or duplicate values. For example, every time a user marks a shipping address as favorite, this table contains the link with related metadata.\n\nKey relationships: Related to user_connections and user_addresses. Special behaviors: Only one primary address per user per channel is enforceable by unique index.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Globally unique favorite record identifier."},"foreignFields":[{"name":"user_connection_id","type":"uuid","description":"Belonged customer's {@link user_connections.id}. Identifies the customer who favorited the address. Fulfills customer-specific favorites requirement.","relation":{"name":"userConnection","targetModel":"user_connections"},"unique":false,"nullable":false},{"name":"user_address_id","type":"uuid","description":"Favorited address' {@link user_addresses.id}. Which address was marked as favorite.","relation":{"name":"userAddress","targetModel":"user_addresses"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Favorite Creation Timestamp - Implements timestamp of when the address was favorited. Supports favorites analytics and maintains normalized atomic event representation.","nullable":false},{"name":"primary","type":"boolean","description":"Primary Favorite Address Flag - Whether this address is the user's primary favorite for their current channel. Ensures 3NF by storing individual selection per favorite record. Enforced for uniqueness via index, not through redundant storage.","nullable":false},{"name":"label","type":"string","description":"Custom Label for Favorite - Gives users the ability to add a personalized label to their favorited address. Supports user experience requirements as per '7.3', provides a normalized one-to-one value per favorite event. E.g., 'Home', 'Office'.","nullable":true}],"uniqueIndexes":[{"fieldNames":["user_connection_id","user_address_id"],"unique":true},{"fieldNames":["user_connection_id","primary"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"label"}],"stance":"primary"}]},{"filename":"schema-12-attachments.prisma","namespace":"Attachments","models":[{"name":"attachments","description":"Attachment File management - This implements the requirement for secure file storage and metadata management (Requirement 8.2, File Management) from the requirements document.\n\nIt stores metadata for every file attachment uploaded and managed by the shopping mall, supporting features such as product information attachments, post/comment attachments, and general file uploads. Maintains 3NF compliance by storing only atomic, non-derived file attributes. For example, used to link product images, post documents, review attachments, etc.\n\nKey relationships: Referenced by product_attachments, post_attachments, review_snapshots, inquiry_snapshots, etc.\nSpecial behaviors: No file duplication (by unique index on url), only logical deletions if required later.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Uniquely identifies each attachment file record."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"File name (excluding extension) - Implements attachment metadata storage. This records the original name (without extension) of the uploaded file for user-friendly display. Ensures normalization by only storing atomic value; no duplicated info. For example, in \"photo.jpg\", name='photo'.","nullable":false},{"name":"extension","type":"string","description":"File extension (nullable) - Part of atomic file metadata storage. Stores just the extension (e.g., 'jpg', 'png', 'docx'), nullable to support files like LICENSE. Ensures no redundancy with full filename.","nullable":true},{"name":"url","type":"string","description":"URL path to the actual file in storage - Implements file access requirement. Stores the location of the file (e.g., S3 path, CDN) as an atomic field. For example, '/uploads/2025/06/abc123.jpg'.","nullable":false},{"name":"created_at","type":"datetime","description":"File creation timestamp - Implements audit trail requirement. Stores when the file was uploaded to the system. This is an atomic, non-derived value; helps evidence preservation. For example, used in file versioning and access logs.","nullable":false}],"uniqueIndexes":[{"fieldNames":["url"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"attachment_histories","description":"Attachment File Snapshot History - This implements audit trail and evidence preservation for file metadata changes (Requirement 9.1 Snapshot-based History Management, and 8.2 File Management).\n\nRecords all modifications to attachment metadata—such as changes in filenames, extensions, or URLs—preserving a historical trail for forensics and dispute resolution. Fully normalized: stores only atomic metadata values, and each record is attached to a specific file. For example, when a product image is replaced or updated, each change is archived here.\n\nKey relationships: Foreign key to attachments.id. Preserves history for compliance and legal audits. Snapshot-based, no derived/calculated fields.\nSpecial behaviors: Immutable history (no updates allowed to old history records).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Uniquely identifies each attachment history record."},"foreignFields":[{"name":"attachment_id","type":"uuid","description":"References the original attachment's {@link attachments.id}. Establishes the link to the file whose metadata history is being tracked.","relation":{"name":"attachment","targetModel":"attachments"},"unique":false,"nullable":false}],"plainFields":[{"name":"name","type":"string","description":"Snapshot of file name (excluding extension). Copies the name from attachments at change time for immutable history.","nullable":false},{"name":"extension","type":"string","description":"Snapshot of file extension. Captures the file extension at change time. Nullable to match attachments.","nullable":true},{"name":"url","type":"string","description":"Snapshot of file storage location URL. Immutable, keeps old file path if file replaced.","nullable":false},{"name":"changed_at","type":"datetime","description":"Timestamp when the metadata change occurred. For example, file renamed, replaced, or relocated. Implements precise audit trail requirement for legal evidence.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["attachment_id","changed_at"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"}]}]}