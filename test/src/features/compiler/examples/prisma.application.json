{"files":[{"filename":"schema-01-core.prisma","namespace":"Core","models":[{"name":"users","description":"[User management and authentication] - This implements the 'User' entity requirement from the requirements document (see 11_data_model_and_erd_high_level.md, 5_functional_requirements.md, 8_security_and_authentication.md).\n\nThis model stores all registered employee information for authentication and profile management. It enforces unique company email logins, password reset policies, and role-based access. For example, on first login with a company email, a user is prompted to change their default password (see acceptance criteria #1).\n\nKey relationships: users may author posts, comments, and give likes. Admins have system-wide privileges. Special behaviors: uniqueness constraint on email, forced password change on first login, and role/status fields to drive access permissions.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the user."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"[Employee display name] - Implements the basic user profile requirement.\n\nThis value is visible to other users. For example, shown as author on post/comment. Required, never null.","nullable":false},{"name":"email","type":"string","description":"[Unique login/email] - Implements authentication and access control requirements.\n\nOnly company emails allowed. For example, used for login and user invitation. Unique, required, never null. Enforced by unique index.","nullable":false},{"name":"password_hash","type":"string","description":"[Password storage] - Implements authentication and secure password handling.\n\nStores salted & hashed password for login authentication. Not exposed in UI. Required, never null.","nullable":false},{"name":"role","type":"string","description":"[User role] - Implements role-based permission requirement.\n\nDetermines if user is 'employee' or 'admin'. Used for access control and UI options. For example, only admins can post to Announcements. Required, never null.","nullable":false},{"name":"status","type":"string","description":"[User account status] - Implements secure login and policy enforcement.\n\nAllowed values: 'active', 'inactive', 'locked'. Used for access control; e.g., locked after 5 failed attempts. Required.","nullable":false},{"name":"password_changed","type":"boolean","description":"[Password policy enforcement] - Ensures users reset initial password on first login.\n\nForces password reset on first login (default: false). UI blocks access until set to true. Required.","nullable":false},{"name":"created_at","type":"datetime","description":"[User creation timestamp] - Time when user account was created.\n\nRequired. Used for audit and analytics.","nullable":false},{"name":"updated_at","type":"datetime","description":"[User update timestamp] - Time when user account was last modified.\n\nUpdated on password change or profile edit. Required.","nullable":false}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[],"ginIndexes":[]},{"name":"boards","description":"[Board management] - This implements the 'Board' entity requirement (see 7_board_structure_and_content_management.md, 11_data_model_and_erd_high_level.md).\n\nRepresents the logical discussion spaces: Announcements, Free Board, Popular Board. Determines which posts belong to which board and board-specific rules. For example, only admins may post to Announcements.\n\nKey relationships: boards contain multiple posts. Special behaviors: name uniqueness enforced, description optional, timestamps for admin tracking.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the board."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"[Board display name] - Implements board navigation and filtering.\n\nEx: 'Announcements', 'Free Board', 'Popular Board'. Displayed in navigation and post filter UI. Unique, required, never null. Enforced by unique index.","nullable":false},{"name":"description","type":"string","description":"[Board description] - Implements board metadata requirement.\n\nOptional multi-line text describing the board's intended purpose. For example: 'Official notices and updates.' Optional field.","nullable":true},{"name":"created_at","type":"datetime","description":"[Board creation timestamp] - Implements board audit/logging requirements.\n\nWhen this board was created. Required.","nullable":false},{"name":"updated_at","type":"datetime","description":"[Board update timestamp] - When this board was last updated.\n\nUsed for admin tracking and UI listings. Required.","nullable":false}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[],"ginIndexes":[]}]},{"filename":"schema-02-posts.prisma","namespace":"Posts","models":[{"name":"posts","description":"Post entity - This implements the requirement from '5. Functional Requirements' and '11. High-Level Data Model & ERD'.\n\nRepresents an individual post authored by a user and belonging to a board (Announcements, Free, or Popular). It supports content creation, editing, likes tracking, and permanent deletion (no archiving). Used for both company-wide announcements and general discussions. Example: A user creates a new post in the Free Board, which is later auto-promoted to the Popular Board if it gathers 10 or more likes.\n\nKey relationships: belongs to a board, has an author (user), and is linked to comments and likes. Special behaviors: hard-deletion (no recovery), auto-promotion/demotion for Popular Board is handled by application logic.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each post."},"foreignFields":[{"name":"board_id","type":"uuid","description":"Board association - Implements requirement: every post must belong to a valid board. References the board this post belongs to. For example, posts under the Announcements, Free, or Popular boards.\nBusiness constraint: Required, not nullable.","relation":{"name":"board","targetModel":"boards"},"unique":false,"nullable":false},{"name":"author_id","type":"uuid","description":"Author association - Implements requirement: each post is authored by a user. References the user who created the post.\nBusiness rule: Required, not nullable. Used for attribution and moderation. Example: Post author displays as name/email in the UI.","relation":{"name":"author","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Post title - Implements 'create a post with title'.\nThe main headline or subject of the post as shown in lists and detail views. Example: 'Q2 Policy Update'. Mandatory.","nullable":false},{"name":"content","type":"string","description":"Post content - Implements 'create a post with content'.\nThe main body area for user-authored post content. Example: 'All staff must...', supports long-form text but not rich media for MVP.","nullable":false},{"name":"is_deleted","type":"boolean","description":"Deletion flag - Implements 'hard delete' policy. Marks if this post has been deleted and should not appear in any listings. Actual deletion will cascade/remove related comments/likes as required. Not nullable.","nullable":false},{"name":"likes_count","type":"int","description":"Likes count - Implements 'high-level data model' and 'popular board' auto-promotion logic.\nTracks the number of unique users who liked the post. Used for efficient query and Popular Board display. Example: Reaches 10+ for promotion. Always up-to-date with actual likes, maintained by triggers or application code.\nBusiness rule: Cannot be negative. Not nullable.","nullable":false},{"name":"created_at","type":"datetime","description":"Created timestamp - When the post was originally created. Shows in post lists and detail for sorting. Not nullable.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last updated timestamp - When the post was most recently modified. Enables display of 'edited' status and display ordering. Not nullable.","nullable":false}],"uniqueIndexes":[{"fieldNames":["board_id","id"],"unique":true},{"fieldNames":["title","board_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["board_id","likes_count"]}],"ginIndexes":[{"fieldName":"title"}]}]},{"filename":"schema-03-comments.prisma","namespace":"Comments","models":[{"name":"comments","description":"Comments - This implements the commenting and threaded-reply requirements for posts and employee collaboration (see Requirements 5.3, 5.4, 7.4, 10.2 in the requirements document). \n\nAllows users to discuss and respond to posts or other comments (single-level). \n\nBusiness explanation: Enables company users to comment on posts, reply to comments (single-level only), and drive engagement. For example, employees can add questions or feedback to an announcement or interact on a Free Board post. \n\nKey relationships: Links to posts, parent comments (for single-level replies), and authors (users). \nSpecial behaviors: Only one-level nesting (no deep threads); comments/replies are hard-deleted, which cascades to their likes. Enforces parent-child relationship with self-reference on parent_id. Related likes track engagement. Only the author or admin may edit/delete. Enforces post and user existence. Replies can only exist for comments on the same post.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each comment. Implements entity integrity per all related requirements."},"foreignFields":[{"name":"post_id","type":"uuid","description":"The post to which this comment belongs - relates to Posts model. Implements requirement for associating comments to posts (see requirements 5.3, 7.4, 11).","relation":{"name":"post","targetModel":"posts"},"unique":false,"nullable":false},{"name":"author_id","type":"uuid","description":"The user who authored this comment. Relates to Users model. Enforces traceability for moderation/auditing (5.3, 8.4).","relation":{"name":"author","targetModel":"users"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent comment's id (self-relation, nullable). Used for supporting one-level threaded replies (see requirements 5.3, 7.4, 11 ERD), or null if top-level. Prevents more than one level deep.","relation":{"name":"parent","targetModel":"comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"content","type":"string","description":"Content of the comment. Implements comment and reply content (5.3, 7.4). For example: 'Nice post!' or 'Can you clarify?' May be empty for deleted items, but row is removed on hard delete per policy.","nullable":false},{"name":"is_deleted","type":"boolean","description":"Deletion state of comment. Implements hard delete (see requirements 5.7, 7.5, 11). When true, the comment is permanently removed (not soft-deleted). For example: set true only for immediate deletion logic.","nullable":false},{"name":"likes_count","type":"int","description":"Live count of likes for this comment. Implements real-time like tracking and Popular Board logic (5.4, 7.3). For example: 0 (new), 5, 17. Used for UI and Popular board logic if needed for comments.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp the comment was created. Ensures auditability (8.4). For example: '2024-04-24T14:17:00Z'.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last comment update. For audit trails and history (8.4).","nullable":false}],"uniqueIndexes":[{"fieldNames":["author_id","post_id","content","created_at"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","parent_id","created_at"]},{"fieldNames":["author_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"content"}]},{"name":"comment_likes","description":"Comment Likes - Implements the requirement to allow users to like each comment (functional 5.4, 7.4, acceptance 10.2). Tracks individual user like actions per comment, enforcing one like per user per comment.\n\nBusiness explanation: Ensures employees can express appreciation/endorsement for any comment or reply, driving engagement and popularity calculations. For example, Alice likes Bob's question on an announcement post -- this is tracked here.\n\nKey relationships: Associates a like event with the user and the target comment. \nSpecial behaviors: Unique constraint ensures a user may only like each comment once (even in concurrency). Hard-deleted with comment (cascade delete).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the like on a comment (implements entity integrity and concurrency protection)."},"foreignFields":[{"name":"comment_id","type":"uuid","description":"Reference to comment being liked. Implements relation from Like to Comment (7.4, 5.4).","relation":{"name":"comment","targetModel":"comments"},"unique":false,"nullable":false},{"name":"user_id","type":"uuid","description":"Reference to the user who liked the comment. Implements auditability and unique-likeness (5.4, acceptance 10.2).","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp of like creation for auditing and popularity calculation. Implements audit and count requirements (8.4, 7.3).","nullable":false}],"uniqueIndexes":[{"fieldNames":["comment_id","user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["comment_id"]},{"fieldNames":["user_id"]}],"ginIndexes":[]}]},{"filename":"schema-04-likes.prisma","namespace":"Likes","models":[{"name":"likes","description":"Like records - This implements the 'Like interaction, unique-per-user and content, including posts and comments' requirement from the requirements document.\n\nRecords when a user likes a post or comment. Ensures a user can only like a given post or comment once, supporting the functional requirement for interaction, popularity tracking, and duplicate prevention. For example, when a user clicks the like button on a post or on a comment, a record is created here. Key relationships: belongs to user and either a post or a comment (mutually exclusive). Special behaviors: one-row-per (user,target) enforced, system must ensure users can't like their own content, likes on either post or comment, and hard deleted with the associated post/comment.\n","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique like record for tracking user interactions."},"foreignFields":[{"name":"user_id","type":"uuid","description":"The user who gave the like - Target user's {@link users.id}\nImplements per-user like tracking and linking to user activity.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Target post's {@link posts.id} (optional, mutually exclusive with comment_id). Only set when liking a post. Implements the requirements for per-post liking.","relation":{"name":"post","targetModel":"posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Target comment's {@link comments.id} (optional, mutually exclusive with post_id). Only set when liking a comment. Implements the requirements for per-comment liking.","relation":{"name":"comment","targetModel":"comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp the like was created - Implements the requirement for tracking when a like happens. Used for audit and potential popularity analytics.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id","post_id"],"unique":true},{"fieldNames":["user_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["comment_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[]}]}]}