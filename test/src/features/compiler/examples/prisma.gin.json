{
  "files": [
    {
      "filename": "schema-01-core.prisma",
      "namespace": "Core",
      "models": [
        {
          "name": "ai_mall_channel",
          "description": "Channel Management - This implements requirements from 'Core Concepts & Architecture: 3.1 Channel' and shapes independently configurable sales endpoints for the platform. \n\nChannels are logical groupings for web, app, or partner commerce, supporting independent configuration, analytics, tax, and localization. Maintains 3NF normalization by extracting shared channel data and isolating channel properties in this model. For example, a web channel and a mobile app channel are each represented here, with product/section/category linking referencing the correct channel.\n\nKey relationships: sections, categories, users, configurations, analytics per channel. Special behaviors: Channels may be enabled/disabled dynamically and have per-channel branding, tax, and localization options.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. - Implements the system-wide unique identifier for each channel."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Channel code - Implements unique channel identification requirement. Business meaning: used for API routing, admin, or analytics distinction. Ensures normalization as atomic, non-calculated identifier value. For example, 'web-store' or 'partner-b2b'. Unique constraint enforced.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Channel display name - For user-facing naming or internal admin clarity. Ensures normalization by not repeating label values elsewhere. For example, 'Website US', 'Mobile KR'.",
              "nullable": false
            },
            {
              "name": "branding",
              "type": "string",
              "description": "JSON or string blob holding channel-specific branding configuration. Normalized as standalone structured value, not calculated. Allows dynamic theming. For example, {'color':'#fff','logo':'/cdn/logo.svg'}.",
              "nullable": true
            },
            {
              "name": "tax_config",
              "type": "string",
              "description": "Serialized config for per-channel tax settings. Atomic config (not calculated), fully normalized. Used for channel-specific VAT/GST or sales tax settings. Can be null for default/global config.",
              "nullable": true
            },
            {
              "name": "localization_config",
              "type": "string",
              "description": "Serialized per-channel localization settings. Normalized as atomic config blob. For example, language, currency, and date/time formatting rules. Multi-region stores benefit from this structure.",
              "nullable": true
            },
            {
              "name": "enabled",
              "type": "boolean",
              "description": "Is channel enabled. Implements dynamic channel control. Ensures normalized storage for per-channel status; for example, disabling a partner channel for maintenance.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp. Implements audit and tracking needs. For example, when a channel was added. 3NF compliant.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update timestamp for the channel data, audit compliance. For automation and admin review. 3NF compliant.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Timestamp for logical deactivation only. Implements business and legal requirement to never physically delete. For example, if channel is retired, this marks the deactivation. Optional.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "enabled"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_section",
          "description": "Section Management - Implements \"Section\" from 'Core Concepts & Architecture: 3.2 Section', representing hierarchical groupings (e.g., 'Corners', 'Departments') within a channel. \n\nBusiness purpose: Organizes products for merchandising and flexible navigation in each channel. Maintains normalization by separating section logic and metadata. For example, 'Electronics' or 'Seasonal Offers' under a specific channel.\n\nKey relationships: Belongs to channel, supports parent/child structure for nested sections. Used for display logic and merchandising analytics.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. - System-unique identifier for section instance."
          },
          "foreignFields": [
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Belonged channel's {@link ai_mall_channel.id} - Ensures channel-level separation, supports multi-channel scalability.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "Parent section's {@link ai_mall_section.id} - For expressing nested section hierarchy (optional).",
              "relation": {
                "name": "parent",
                "targetModel": "ai_mall_section"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Section code - Business meaning: atomic identifier unique within the channel, used for navigation/routing. 3NF compliance: avoids repeating properties in products. For example, 'electronics-corner'.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Section display name. For merchandising UI organization. 3NF normalized as no derived/calculated data here. For example: 'Wearables Season Sale'.",
              "nullable": false
            },
            {
              "name": "display_order",
              "type": "int",
              "description": "Section display order (sequence within channel). Normalized as atomic sort order determinant. For example, 1=first in navigation.",
              "nullable": false
            },
            {
              "name": "metadata",
              "type": "string",
              "description": "Section-specific metadata (JSON/config/etc). For example, special promotions or themes. 3NF: not recalculated, atomic data.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp. For audit/evidence. 3NF: not duplicated elsewhere.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update timestamp for the section data. Audit compliance. 3NF.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp for deactivation (never physically delete). Used in legal/rollback flows. 3NF compliant.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "channel_id",
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "channel_id"
              ]
            },
            {
              "fieldNames": [
                "parent_id"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_category",
          "description": "Category Management - Implements \"Category\" from 'Core Concepts & Architecture: 3.3 Category'.\n\nBusiness purpose: Facilitates flexible, hierarchical, channel-specific product classification. Categories can nest and products can be in many categories. Maintains normalization by capturing just core category identity and hierarchy, not derived values.\n\nKey relationships: Belongs to channel, optional parent for nest structure. Assignment to products handled in assignment model elsewhere.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Category instance unique identifier."
          },
          "foreignFields": [
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Belonged channel's {@link ai_mall_channel.id} - Enables per-channel category trees for global/partner/region separation.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "Parent category's {@link ai_mall_category.id} (optional). For deep structure trees within the channel.",
              "relation": {
                "name": "parent",
                "targetModel": "ai_mall_category"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Atomic category code. Implements unique classification logic per category tree. 3NF: Avoids duplication or calculation.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Category display name. For navigation and analytics. 3NF compliant: standalone label only.",
              "nullable": false
            },
            {
              "name": "metadata",
              "type": "string",
              "description": "Category metadata (config or SEO as string/blob). 3NF as atomic config.",
              "nullable": true
            },
            {
              "name": "display_order",
              "type": "int",
              "description": "Order in category navigation tree. 3NF: atomic sequence only.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Created time (audit/compliance). 3NF.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Updated time (audit/compliance). 3NF.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Deactivation timestamp for legal/business evidence. Used for logical deletions, not physical removal.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "channel_id",
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "channel_id"
              ]
            },
            {
              "fieldNames": [
                "parent_id"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_snapshot",
          "description": "Snapshot - Implements system-wide evidence preservation per '2.4 Snapshot' and compliance/audit requirements. \n\nBusiness purpose: Immutable records of data state at key events. Maintains 3NF by not storing computed/aggregated values, only capturing static state as JSON/BLOB. For example, product, order, or user at the moment of a key transition.\n\nKey relationships: Linked to users, products, orders, etc., depending on event_type and entity_id fields.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique snapshot identifier for system-wide audit trace."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Actor user's {@link ai_mall_user.id}. Who triggered this snapshot? Optional for system automated cases.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "entity_type",
              "type": "string",
              "description": "Entity type of this snapshot (e.g., 'product', 'order', etc). 3NF: no redundant or calculated meaning. Used for query/index/analysis.",
              "nullable": false
            },
            {
              "name": "entity_id",
              "type": "uuid",
              "description": "Snapshot target's unique id (e.g., product/order/user/section id). Ensures referential integrity at data level, but not constrained (polymorphic).",
              "nullable": false
            },
            {
              "name": "event_type",
              "type": "string",
              "description": "Event triggering this snapshot ('create','modify','status_change','delete','rollback', etc.). 3NF: role is to explain why this snapshot was made.",
              "nullable": false
            },
            {
              "name": "payload",
              "type": "string",
              "description": "Full entity state at the time, as serialized JSON/blob (immutable). 3NF: not recalculated, atomic evidence.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of snapshot creation. 3NF compliant.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "entity_type",
                "entity_id",
                "created_at"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id"
              ]
            },
            {
              "fieldNames": [
                "entity_type",
                "entity_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_user",
          "description": "User Account - Implements requirements from 'User & Identity Management 2,3' for representing an individual system user (customer, seller, admin, external).\n\nBusiness purpose: Authoritative user record, normalized for atomic identity management. All personalized records (profile, session, email, address, role, etc.) reference this as parent. No pre-computed or derived data. For example, every individual that logs in or interacts with the platform has a row here. Ensures distinctness and immutability for system integrity.\n\nKey relationships: Profiles, sessions, roles, emails, address, external auth, etc.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. System-wide unique user identifier."
          },
          "foreignFields": [
            {
              "name": "organization_id",
              "type": "uuid",
              "description": "Organization the user belongs to (ai_mall_organization.id, optional). Enterprise and admin flows.",
              "relation": {
                "name": "organization",
                "targetModel": "ai_mall_organization"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "username",
              "type": "string",
              "description": "System username. 3NF atomic login/display ID. For example, 'johnsmith', 'chan_user_23'.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Created time for the user account. 3NF auditing. For forensics and legal traceability.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Updated time for the user account. 3NF audit evidence.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Deactivation/disable timestamp. Never physical delete. Legal/rollback flow.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "username"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "organization_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_user_profile",
          "description": "User Profile - Implements 3.6 Data Management/Globalization and '3.2 User Types & Roles' via extension of core user.\n\nBusiness purpose: Per-user demographic and personalization info—atomic distinct fields (e.g., language, display name). No duplication of ai_mall_user fields; normalization enforced. For example, localized display name or marketing opt-ins.\n\nKey relationships: User (1:1), additional references not present for clarity. Profile info is accessed for personalization, localization.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for user profile row. Always equals user_id in enforced 1:1 relationship."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Target user’s {@link ai_mall_user.id} (1:1 enforced at unique index).",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": true,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "display_name",
              "type": "string",
              "description": "User-facing name for display. Not a duplicate of username. For example, 'J. Smith', localized string. 3NF atomic value.",
              "nullable": false
            },
            {
              "name": "language",
              "type": "string",
              "description": "User preferred language (IETF language-tag). 3NF: atomic preference field. For example, 'en-US'.",
              "nullable": false
            },
            {
              "name": "currency",
              "type": "string",
              "description": "Preferred currency (ISO code). Atomic field. For example, 'KRW'.",
              "nullable": false
            },
            {
              "name": "marketing_opt_in",
              "type": "boolean",
              "description": "Marketing consent. For compliance and personalization. Atomic, 3NF. For example, 'true' = allowed to send promotions.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Profile created timestamp (audit/compliance, not derived).",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Profile updated timestamp (audit/evidence). 3NF.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "user_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "display_name"
            }
          ]
        },
        {
          "name": "ai_mall_organization",
          "description": "Organization - Implements requirement for multi-tenant/admin flows; groups users for B2B, enterprise, or franchise models.\n\nBusiness purpose: Standalone entity for representing a merchant, partner business, or internal division admin domain. Normalized as system-unique. Enables cross-user queries and scope. For example, partner brand onboarding, or seller team with multiple users.\n\nKey relationships: Users (members), roles, permissions, etc.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for org row."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Organization code - system unique. Used for API partition, invoicing, etc. 3NF value.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Organization display name (company/partner/business). For example, 'Acme Group'. 3NF.",
              "nullable": false
            },
            {
              "name": "branding",
              "type": "string",
              "description": "Org branding JSON/blob. For tenant theming, custom logic. 3NF field.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp for org row (audit-compliance).",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Update timestamp for org data. 3NF.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deactivation time (never physical delete).",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_role",
          "description": "Role - Implements RBAC backbone ('3.2 User Types & Roles', '9.4 Access Control').\n\nBusiness purpose: Defines role types (e.g., customer, seller, admin, external) and supports granular access logic per user or organization. Maintains 3NF; all role-user and org-role assignments referenced separately. For example, role='seller_admin', used in both permission audits and admin dashboards. \n\nKey relationships: Organizations, users (via assignment tables elsewhere), permissions.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for role row."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Atomic role code (used in API, logic). For example, 'admin', 'seller', 'member', 'guest'. 3NF single value.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Human-readable role name for admin dashboards (e.g., 'Seller - Level 2'). 3NF.",
              "nullable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Role description (long). Used in admin UI/help. 3NF field, not computed.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp for role. For audit/evidence. 3NF field.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Latest update time for this role's metadata. 3NF field.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deactivation (never physical delete). For compliance.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_permission",
          "description": "Permission - Implements permission control (fine-grained RBAC, audits, access control). See requirement '9.4 Access Control'.\n\nBusiness purpose: Programmatic permission codes (API identifiers, e.g., 'product.edit', 'admin.view'). Not calculated; system-unique, atomic code. Used by roles/assignments elsewhere for access enforcement. For example, roles are assigned permission sets by linking to this model.\n\nKey relationships: Roles (via assignment), audit logs, etc.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for permission row."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Permission code (system-unique). For example, 'product.edit', 'admin.login', 'cart.checkout'. 3NF atomic.",
              "nullable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Permission human description (for admin, analytics). 3NF field.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp for access control tracking (compliance/audit).",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Update time for permission metadata (audit/compliance).",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deactivation time, never physical delete (audit/legal).",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_email",
          "description": "User Email - Implements requirements for multi-email/contact support (from '3.3 Auth & Onboarding').\n\nBusiness purpose: Stores and tracks all emails for a user; allows for verification and login logic. Maintains 3NF by storing only atomic, static values. For example, a user with multiple contact or login emails.\n\nKey relationships: User, verification audits, notification templates.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for email row."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Which user's {@link ai_mall_user.id} - Ensures all emails are parented to a specific user.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "email",
              "type": "string",
              "description": "Atomic email address (login/notification). 3NF: no computed/derivative. For example, 'x@example.com'.",
              "nullable": false
            },
            {
              "name": "is_verified",
              "type": "boolean",
              "description": "Is current email verified for identity/auth? 3NF field, no duplication. For 2FA flows.",
              "nullable": false
            },
            {
              "name": "is_primary",
              "type": "boolean",
              "description": "Is main login/notification target? Only one per user. Enforced by unique index. 3NF atomic field.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "When was this email added to user? Audit/log. 3NF.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "user_id",
                "email"
              ],
              "unique": true
            },
            {
              "fieldNames": [
                "user_id",
                "is_primary"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "email"
            }
          ]
        },
        {
          "name": "ai_mall_address",
          "description": "User Address - Models per-user multi-address, global-fulfillment aware per '3.6 Data Management & Globalization'.\n\nBusiness purpose: Stores worldwide address structures with potential variation per country. Each entry is atomic, non-computed. Examples: home and work addresses, with region and special instructions for delivery.\n\nKey relationships: User, per-address events/logs, usage in ship-to flows.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for address row."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User’s {@link ai_mall_user.id} - Each address references the parent user.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "label",
              "type": "string",
              "description": "Short label ('Home', 'Work'), for user clarity. 3NF atomic.",
              "nullable": false
            },
            {
              "name": "full_address",
              "type": "string",
              "description": "Full address text (may be multi-line/country-variant). 3NF, atomic string.",
              "nullable": false
            },
            {
              "name": "postal_code",
              "type": "string",
              "description": "Country-specific postal code (atomic, 3NF). For example, '12345'.",
              "nullable": true
            },
            {
              "name": "country",
              "type": "string",
              "description": "ISO country code (e.g., 'KR', 'US'). For region-aware logistics/globalization. 3NF, atomic.",
              "nullable": false
            },
            {
              "name": "city",
              "type": "string",
              "description": "City/locality (atomic field). For example, 'Seoul'. 3NF.",
              "nullable": true
            },
            {
              "name": "region",
              "type": "string",
              "description": "State/province/region (atomic, 3NF, optional). For example, 'Gyeonggi-do'.",
              "nullable": true
            },
            {
              "name": "phone",
              "type": "string",
              "description": "Contact phone for deliveries. Normalized as atomic, not derived.",
              "nullable": true
            },
            {
              "name": "instructions",
              "type": "string",
              "description": "Delivery instructions (optional). For example, 'Leave at security desk'. Atomic 3NF value.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Created time for address row (audit/compliance).",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "full_address"
            }
          ]
        },
        {
          "name": "ai_mall_external_identity",
          "description": "External Identity - Implements federated/external SSO flows from '3.3 Auth & Onboarding'.\n\nBusiness purpose: Connects users to OAuth/social account IDs for login. Each login method stored as atomic assignment row. For example, Google, Facebook, SAML, etc. Maintains 3NF: no calculated fields.\n\nKey relationships: User, event/audit logs, login flows.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for external identity row."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Which user's {@link ai_mall_user.id} - Parent user for the SSO record.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "provider",
              "type": "string",
              "description": "External login provider identifier ('google', 'saml', etc). For OIDC logic. 3NF atomic field.",
              "nullable": false
            },
            {
              "name": "external_id",
              "type": "string",
              "description": "Provider-external user unique key (opaque string). For example, OAuth sub or SAML nameID. 3NF, atomic.",
              "nullable": false
            },
            {
              "name": "email_hint",
              "type": "string",
              "description": "Optional email provided by provider for login hint. 3NF, not duplicated with ai_mall_email.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "First linkage time (audit, compliance). 3NF.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "provider",
                "external_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "provider"
            }
          ]
        },
        {
          "name": "ai_mall_session",
          "description": "Session - Implements per-login/session tracking from '3.4 Session & Metrics Tracking'.\n\nBusiness purpose: Session record per login for security/analytics; captures access data (IP, device, channel, referrer, etc.). Maintains 3NF by never calculating aggregates, only atomic snapshot state. Forensics require this persisted for evidence. For example, tracks every login from a device/IP with time, channel, and actor.\n\nKey relationships: User, channel, for traceability and analytics.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key for session row."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Actor user's {@link ai_mall_user.id} - Ensures session is always bound to a user (guest or member).",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Session's channel {@link ai_mall_channel.id}. Analytics and forensics, and role/audit logic.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "device_info",
              "type": "string",
              "description": "Device metadata (user-agent, type, etc.), not derived or recalculated. 3NF atomic value.",
              "nullable": true
            },
            {
              "name": "ip_address",
              "type": "string",
              "description": "Session device IP address for security/analytics. 3NF compliant. Forensics uses. For example, '192.168.0.1'.",
              "nullable": false
            },
            {
              "name": "referrer",
              "type": "string",
              "description": "Referrer string/context (may be URL or code). 3NF atomic field for analytics, not derived. For example, 'homepage-banner'.",
              "nullable": true
            },
            {
              "name": "opened_at",
              "type": "datetime",
              "description": "Session open timestamp. For analytics/audit trace. 3NF.",
              "nullable": false
            },
            {
              "name": "closed_at",
              "type": "datetime",
              "description": "Session close timestamp or null if active. Used for monitoring, analytics, and legal evidence.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id"
              ]
            },
            {
              "fieldNames": [
                "channel_id"
              ]
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-02-product.prisma",
      "namespace": "Product",
      "models": [
        {
          "name": "ai_mall_product",
          "description": "[Product Entity] - This implements the detailed product record requirement (Product Lifecycle, Versioned Snapshots) from the requirements analysis. \n\nEach product created by a seller is represented as a record here, maintaining strict 3NF normalization: all descriptive content, media, options, and category links exist in separate related tables. For example, a T-shirt added by a seller spawns a single ai_mall_product instance. Product snapshots are managed externally for auditability. \n\nKey relationships: links to seller, status, and logical deletion (never hard-deletes). Special behaviors: every meaningful change to a product triggers a snapshot, and all deletion is logical ('deactivated_at' only).",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier per product record."
          },
          "foreignFields": [
            {
              "name": "seller_id",
              "type": "uuid",
              "description": "Creator's {@link ai_mall_user.id}. Links the product to its primary seller for management and analytics.",
              "relation": {
                "name": "seller",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "status",
              "type": "string",
              "description": "[Product status] - Implements lifecycle state tracking. \n\nIndicates status: draft, active, temporarily_disabled, or discontinued. Ensures normalization by decoupling state from content or inventory data. For example, a product that's discontinued will reflect here and not be shown in listings.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Product creation timestamp] - Implements system-level event tracking. \n\nTime when product was created. Normalized as atomic timestamp. For example, needed for analytics, legal evidence.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Last update timestamp] - Implements auditability. \n\nTracks last major edit for operational transparency. Reflects product update history in normalized form.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Logical deletion timestamp] - Fulfills legal, audit, and resilience requirements. \n\nWhen present, product is no longer active (not deleted). No hard-deletion ever occurs (compliance). For example, when removing a product from catalog.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "seller_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "status"
            }
          ]
        },
        {
          "name": "ai_mall_product_variant",
          "description": "[Product Variant Entity] - This implements the variant management requirement (option-based inventory/SKU control). \n\nRepresents a product option-combination. Maintains strict normalization by keeping specific variant info (SKU, barcode, price delta) separate from general product. For example, 'T-shirt, red, XL' is a variant of T-shirt product. \n\nKey relationships: links to parent product and inventory; behaviors: immutable link to the snapshot which produced this variant, no denormalized calculated values.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for each variant/SKU record."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Parent product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "sku",
              "type": "string",
              "description": "[SKU code] - Implements inventory management linkage. Atomic, unique to each variant. For example, 'TSHIRT-XL-RED'.",
              "nullable": false
            },
            {
              "name": "barcode",
              "type": "string",
              "description": "[Barcode/UPC] - Implements external system interoperability. Atomic, can be null if not applicable.",
              "nullable": true
            },
            {
              "name": "price_delta",
              "type": "double",
              "description": "[Price delta] - Implements configurable pricing. The difference added to base product price for this variant. Ensures no pre-calculated values in base model.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Creation timestamp] - When this variant was created. Required for audit; maintains 3NF.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "sku"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "product_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_product_bundle",
          "description": "[Product Bundle Entity] - Implements bundle/package sales requirements, supporting complex product composition. \n\nDenotes a product composed of multiple SKUs, with normalization: links out to all included product_variants (via separate assignment/junction, not included here). No pricing/aggregation denormalized in this table. For example, a holiday gift set containing multiple items listed as a bundle.\n\nKey relationships: connects multiple product_variants with parent product.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each bundle is uniquely identified."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Bundle wrapper's {@link ai_mall_product.id}. Identifies the bundle product.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": true,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "bundle_type",
              "type": "string",
              "description": "[Bundle type] - For example: fixed, dynamic. Enables feature extension without schema change.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Creation timestamp] - Timestamp for audit and compliance.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_option_group",
          "description": "[Option Group Entity] - Implements product option logic grouping (sizes, colors, etc). \n\nNormalizes logical group for options (e.g., color choices), separated from product itself for reusability, 3NF. For example, 'Color' is an option group for a T-shirt product.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each group is unique."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Owner product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[Group name] - Like 'Color', 'Size' (atomic, descriptive).",
              "nullable": false
            },
            {
              "name": "type",
              "type": "string",
              "description": "[Option logic type] - E.g., select, boolean, numeric, text. Controls how options in group behave.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id",
                "name"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_option",
          "description": "[Option Entity] - Implements atomic product option values (choices) requirements. \n\nEach option entry is a normalized possible value within an option group. For example, 'XL' in the Size option group.\n\nKey relationships: belongs to option group. No denormalized data.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each option value is unique."
          },
          "foreignFields": [
            {
              "name": "option_group_id",
              "type": "uuid",
              "description": "Owning group's {@link ai_mall_option_group.id}.",
              "relation": {
                "name": "option_group",
                "targetModel": "ai_mall_option_group"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "value",
              "type": "string",
              "description": "[Option value] - Implements atomic choice, e.g., 'Red', 'XL'. 3NF: No repeated group fields.",
              "nullable": false
            },
            {
              "name": "sequence",
              "type": "int",
              "description": "[Sequence] - For UI/display ordering. Pure integer, normalized.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "option_group_id",
                "value"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "value"
            }
          ]
        },
        {
          "name": "ai_mall_option_dependency",
          "description": "[Option Dependency Entity] - Fulfills advanced option logic as per requirements. \n\nModels cross-option validation/enabling dependencies (e.g., 'Red' disables size 'S'). Strictly normalized: Only references to options, rules not denormalized in product. \n\nUsage: Set logic for dynamic/conditional option availability.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each dependency rule unique."
          },
          "foreignFields": [
            {
              "name": "option_id",
              "type": "uuid",
              "description": "Controlling option's {@link ai_mall_option.id}.",
              "relation": {
                "name": "option",
                "targetModel": "ai_mall_option"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "dependency_option_id",
              "type": "uuid",
              "description": "Dependent option's {@link ai_mall_option.id}.",
              "relation": {
                "name": "dependency_option",
                "targetModel": "ai_mall_option"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "logic_type",
              "type": "string",
              "description": "[Dependency logic type] - E.g., disables, requires, show-if, hide-if. No denormalized scripts here.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "option_id",
                "dependency_option_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_inventory",
          "description": "[Product Inventory Entity] - Implements atomic per-variant inventory tracking (real-time, 3NF). \n\nEach entry tracks quantity for a product variant, normalized: no aggregate or calculated fields. For example, each SKU has separate inventory row.\n\nKey relationships: belongs to variant. No summary fields.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each inventory slot is unique."
          },
          "foreignFields": [
            {
              "name": "product_variant_id",
              "type": "uuid",
              "description": "Owning variant's {@link ai_mall_product_variant.id}.",
              "relation": {
                "name": "product_variant",
                "targetModel": "ai_mall_product_variant"
              },
              "unique": true,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "quantity",
              "type": "int",
              "description": "[Available quantity] - Implements current stock for this variant. Atomic/normalized.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_variant_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_inventory_history",
          "description": "[Inventory History Entity] - Implements requirement for configurable, auditable inventory change tracking. \n\nEvery inventory mutation (deduction, restock, correction) inserts a new row. Strict 3NF: all aggregate history by query, not field. Traceability for compliance and analytics.\n\nKey relationships: references product variant and user (actor).",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each inventory event unique."
          },
          "foreignFields": [
            {
              "name": "product_variant_id",
              "type": "uuid",
              "description": "Affected variant's {@link ai_mall_product_variant.id}.",
              "relation": {
                "name": "product_variant",
                "targetModel": "ai_mall_product_variant"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "actor_id",
              "type": "uuid",
              "description": "Responsible actor's {@link ai_mall_user.id}. For audit/compliance on who adjusted inventory.",
              "relation": {
                "name": "actor",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "quantity_change",
              "type": "int",
              "description": "[Quantity change] - Positive for restock, negative for deductions. Maintains normalization: always atomic.",
              "nullable": false
            },
            {
              "name": "event_type",
              "type": "string",
              "description": "[Event type] - E.g., sale, restock, correction. Opaque to future-proof schema.",
              "nullable": false
            },
            {
              "name": "event_time",
              "type": "datetime",
              "description": "[Event time] - Precise datetime for event auditability.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "product_variant_id",
                "event_time"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "event_type"
            }
          ]
        },
        {
          "name": "ai_mall_category_assignment",
          "description": "[Category Assignment Entity] - Implements product-to-category mapping (multi-category, channel-specific).\n\nJunction table enabling each product to belong to multiple categories (and per channel). Full 3NF: No repeat fields in product/category. For example, a hat can be in 'Seasonal' and 'Sale' at once. \n\nKey relationships: links out to product, category, and channel.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each assignment is unique."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "category_id",
              "type": "uuid",
              "description": "Category's {@link ai_mall_category.id}.",
              "relation": {
                "name": "category",
                "targetModel": "ai_mall_category"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel's {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id",
                "category_id",
                "channel_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_product_tag",
          "description": "[Product Tag Entity] - Implements freeform tagging for rich search, AI, and recommendations as required. \n\nNormalized separate tag table (many-to-many product association possible). No tag denormalized on product.\n\nFor example, #gift, #eco, #bestseller.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Each tag instance is unique."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "value",
              "type": "string",
              "description": "[Tag value] - E.g., 'eco', 'new'. Maintains normalized structure—no list in product.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id",
                "value"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "value"
            }
          ]
        },
        {
          "name": "ai_mall_product_thumbnail",
          "description": "[Product Thumbnail Entity] - Implements image association with product (media handled externally for audit/cdn/versioning). \n\nStores pointer to thumbnail image URI for product as a normalized element. All meta/versions managed elsewhere. \n\nKey relationships: links to product. No duplicate or denormalized URIs in main tables.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique ID per product thumbnail record."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "thumbnail_uri",
              "type": "uri",
              "description": "[Thumbnail URI] - Implements image pointer reference, no binary data.",
              "nullable": false
            },
            {
              "name": "sequence",
              "type": "int",
              "description": "[Sequence] - Used for display order of thumbnails.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id",
                "sequence"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-03-content.prisma",
      "namespace": "Content",
      "models": [
        {
          "name": "ai_mall_product_description",
          "description": "Product Description - This implements product content management and rich text from requirement 4.3 in the requirements analysis. \n\nAllows multi-format, localized, richly structured content for each product, supporting audit trails, SEO, and omnichannel use. Fully 3NF: all text and localized content are kept atomic, and never pre-computed or joined with media or category info here. For example, when a seller adds or edits a product description, a new row is created. \n\nKey relationships: Links directly to ai_mall_product (for the product), and to ai_mall_snapshot (for point-in-time state). \nSpecial behaviors: All description updates are snapshot-driven, no deletions allowed except for logical (deactivated_at) marks.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier of the product description."
          },
          "foreignFields": [
            {
              "name": "ai_mall_product_id",
              "type": "uuid",
              "description": "Target product's {@link ai_mall_product.id} - Links the description to the specific product.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_snapshot_id",
              "type": "uuid",
              "description": "Current description's snapshot {@link ai_mall_snapshot.id} - Records point-in-time versioning.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "locale",
              "type": "string",
              "description": "Locale - Implements localization per requirement 4.3 and 11.6. E.g. 'en-US', 'ko-KR'. Maintains normalization by separating locale as atomic data. For example, each language version is a distinct row.",
              "nullable": false
            },
            {
              "name": "format",
              "type": "string",
              "description": "Content Format - Implements the ability to support HTML, Markdown, plain, etc. (requirement 4.3, 4.4). Ensures normalized representation by storing the format atomically.",
              "nullable": false
            },
            {
              "name": "content",
              "type": "string",
              "description": "Main Content - The full descriptive text, rich/structured. Implements content flexibility (requirement 4.3). Fully normalized and not joined with media or SEO data. For example, this is the HTML/Markdown content for the product page.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp - Implements full audit (requirement 8.4, 9.2). Used for historic and compliance tracking. Ensures timestamp fields are atomic.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update time - For audit history and rollback per snapshot-based design (requirement 8.4, 9.2).",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp - Never deletes records physically but marks them as deactivated for audit/legal trace (requirement 9.2, 8.4). Null if active.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_product_id",
                "locale",
                "ai_mall_snapshot_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "content"
            }
          ]
        },
        {
          "name": "ai_mall_product_media",
          "description": "Product Media - This implements multimedia asset management from 4.3, 8.3, and 8.4. \n\nStores references to images, videos, etc. for each product description and ensures attachment versioning and CDN links, per requirements 8.3 and 4.3. Maintains 3NF: Only links to atomic product, description, and media file entities—never stores pre-calculated URLs or joins. For example, a new image/media can be attached to a specific product version, but not duplicated in-place.\n\nKey relationships: References ai_mall_product, ai_mall_attachment (for file), and ai_mall_snapshot (for versioning). \nSpecial behaviors: All attachments are versioned, and deactivation is logical only.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for the product media entry."
          },
          "foreignFields": [
            {
              "name": "ai_mall_product_id",
              "type": "uuid",
              "description": "Product's {@link ai_mall_product.id} - Associates this media with a particular product.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_attachment_id",
              "type": "uuid",
              "description": "Attachment's {@link ai_mall_attachment.id} - Links to the managed file asset (e.g., image, video).",
              "relation": {
                "name": "attachment",
                "targetModel": "ai_mall_attachment"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_snapshot_id",
              "type": "uuid",
              "description": "Snapshot's {@link ai_mall_snapshot.id} - Captures the state of the media assignment when it changes.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "description",
              "type": "string",
              "description": "Short Description - Caption or alt-text for accessibility and SEO, per requirement 8.3, 4.3. Each stored atomically, fully normalized.",
              "nullable": true
            },
            {
              "name": "media_type",
              "type": "string",
              "description": "Type - Image, video, etc. Implements file typing (requirement 8.3). Each stored atomically, never joined with metadata or file data itself.",
              "nullable": false
            },
            {
              "name": "order_index",
              "type": "int",
              "description": "Order Index - Implements sort sequence (per requirement 4.3, 8.2). Ensures sort-order persistence atomically—for example, first image in gallery.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp for the media entry.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Update timestamp for the media entry (auditing, snapshots).",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp - Marks media as inactive without physical deletion per 8.4, 9.2.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_product_id",
                "ai_mall_attachment_id",
                "ai_mall_snapshot_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "media_type"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "description"
            }
          ]
        },
        {
          "name": "ai_mall_product_seo",
          "description": "Product SEO Metadata - Implements SEO configuration from requirement 4.3, 11.6, and 4.3. \n\nCaptures metadata for search optimization such as page title, meta description, schema tags, and more. Maintains 3NF by linking only to product, snapshot, and locale for atomic, normalized SEO fields. Enables omnichannel and localized SEO, never storing summary or calculated ranking fields here. For example, products in two languages each have their own SEO row.\n\nKey relationships: Linked to product, ai_mall_snapshot, and per-language variant. \nSpecial behaviors: Only one entry per (product, locale, snapshot) for traceable, fully normalized SEO history.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for the SEO metadata row."
          },
          "foreignFields": [
            {
              "name": "ai_mall_product_id",
              "type": "uuid",
              "description": "Product's {@link ai_mall_product.id} - Product the SEO info refers to.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_snapshot_id",
              "type": "uuid",
              "description": "SEO entry snapshot's {@link ai_mall_snapshot.id} - Represents SEO field state at a given version.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "locale",
              "type": "string",
              "description": "Locale - Implements requirement for localized SEO per 11.6. Ensures each SEO entry is atomic per (product, language).",
              "nullable": false
            },
            {
              "name": "page_title",
              "type": "string",
              "description": "Page Title - The product's search engine title. 3NF: only atomic, not derived from other tables.",
              "nullable": false
            },
            {
              "name": "meta_description",
              "type": "string",
              "description": "Meta Description - SEO description for the product page, stored atomically per 3NF (never computed or duplicated).",
              "nullable": true
            },
            {
              "name": "structured_data",
              "type": "string",
              "description": "Structured Data - JSON-LD or other structured tags for enhanced SEO, per requirement 4.3. Normalized by keeping as atomic text field. For example, as provided by admins for Google Rich Snippets.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation date - Used for SEO history tracking and audit, per compliance requirements 8.4, 9.2.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update date, for SEO change audit.",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Timestamp for logical deletion, enabling compliance traceability (9.2, 8.4).",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_product_id",
                "locale",
                "ai_mall_snapshot_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "page_title"
            },
            {
              "fieldName": "meta_description"
            }
          ]
        },
        {
          "name": "ai_mall_content_block",
          "description": "Reusable Content Block - Implements modular content management and retail storytelling (requirement 4.3, 4.4, 8.2). \n\nModels an atomic piece of visual/text content independently from the product description. Supports banners, highlights, admin-announced content, etc. 3NF maintained by keeping content block atomic, with flexible placement by relation in application layer, not schema. For example, a promotional HTML snippet or highlight block. \n\nKey relationships: none enforced at DB—links to products/pages/sections implemented by mapping tables elsewhere. \nSpecial behaviors: Snapshots allow for historic and multilingual content management; no content summaries are pre-computed in this table.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for the content block."
          },
          "foreignFields": [
            {
              "name": "ai_mall_snapshot_id",
              "type": "uuid",
              "description": "Content block version's {@link ai_mall_snapshot.id} - Tracks changes to the reusable block.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "block_type",
              "type": "string",
              "description": "Type - e.g. banner, highlight, info, rich-html. Implements requirement 4.3, 8.2. Stored atomically for distinction and audit.",
              "nullable": false
            },
            {
              "name": "locale",
              "type": "string",
              "description": "Locale of the content block, for i18n support (11.6). Each translation is a separate row, 3NF preserved.",
              "nullable": false
            },
            {
              "name": "title",
              "type": "string",
              "description": "Block Title - Label for UI, accessibility, or analytics. Not duplicated across blocks; atomic per row.",
              "nullable": true
            },
            {
              "name": "body",
              "type": "string",
              "description": "Main Content Body - Actual content to be rendered. Atomic and fully normalized. For example, HTML content for a banner.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Created/issued at. Enables audit and rollback (requirement 8.4, 9.2).",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Updated timestamp. For undo/history/audit purposes (8.4, 9.2).",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion, per legal and audit requirements 9.2, 8.4. Not physically deleted.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "block_type",
                "locale",
                "ai_mall_snapshot_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "block_type"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "title"
            },
            {
              "fieldName": "body"
            }
          ]
        }
      ]
    },
    {
      "filename": "schema-04-bulletin.prisma",
      "namespace": "Bulletin",
      "models": [
        {
          "name": "ai_mall_bulletin_question",
          "description": "Product Q&A post - This implements the requirement for versioned, snapshot-linked Q&A entries as specified in AI Mall Product & Content Management (section 4) and Feedback & Favorites (section 7). \n\nAllows registered/authenticated users to post questions about products; supports immutable history via snapshot linkage. Maintains 3NF by only referencing external data via foreign keys, with no calculated or aggregated fields. For example, a customer questions a seller about a specific product option; each edit creates a new snapshot for legal evidence.\n\nKey relationships: links to user (author), product (subject), and snapshot (version history); referenced in the answer and comment chains.\nSpecial behaviors: cannot be physically deleted (logical deactivation only); rights/visibility managed via status and privacy flags.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for each Q&A question as required by compliance and traceability needs."
          },
          "foreignFields": [
            {
              "name": "author_id",
              "type": "uuid",
              "description": "Author user's {@link ai_mall_user.id} - Links the question to its posting user (requirement: traceable authorship, section 3 & 7).\n\nEvery question must have an author for audit and dispute support.",
              "relation": {
                "name": "author",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Referenced product's {@link ai_mall_product.id} - Connects Q&A with the intended product (section 4.4, traceability).\n\nEnforces normalization by not embedding product data; always references current or historical product as context.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "subject",
              "type": "string",
              "description": "Q&A subject line - Implements requirement for structured, searchable question titles (section 4).\n\nBusiness meaning: concise summary of inquiry. Keeps 3NF compliance by not mixing description/body content here.\nFor example: 'Is the medium size true to fit?'",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Question workflow status (open, answered, resolved, closed, hidden) - Implements business logic & moderation workflow from feedback requirements.\n\nUsed for analytics, search, and system process flows.",
              "nullable": false
            },
            {
              "name": "is_private",
              "type": "boolean",
              "description": "Privacy flag - Indicates if question is visible only to poster and seller/admin (requirement for privacy control, section 7.4.2 and compliance section).\n\nEnsures no transitive leakage by access control logic, not schema denormalization.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp - Canonical soft-delete pattern, supporting audit & reversible deletes (compliance and system policies).\n\nNull if active.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp - Implements audit trail and event chronology as required in all snapshot/table requirements.\n\nBusiness use: query for new or trending questions.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update timestamp - Trace edit history for legal and operational purposes (section 4, 7).\n\nNever overrides snapshot data; only reflects operational record timeline.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id",
                "subject"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "author_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "product_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "subject"
            }
          ]
        },
        {
          "name": "ai_mall_bulletin_answer",
          "description": "Product Q&A answer entity - Implements requirements for snapshot-linked answers to Q&A (section 4.4 and feedback section 7), ensuring all seller/admin responses are auditable and legally compliant.\n\nEach answer is tied to one question, from a user (typically seller or admin), and each update creates a new snapshot for evidence.\n\nMaintains 3NF by storing only atomic answer data and using only foreign keys for references. No pre-calculated fields; denormalized caches go to separate mv_ tables.\n\nExample: A seller answers a buyer's question; a new version is recorded each edit.\n\nKey relationships: belongs to question, has author; referenced in moderation and audit workflows.\nSpecial behaviors: cannot be physically deleted; logical deactivation enforced for compliance.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique for each Q&A answer, as required by audit and traceability policies."
          },
          "foreignFields": [
            {
              "name": "question_id",
              "type": "uuid",
              "description": "Target question's {@link ai_mall_bulletin_question.id} - Associates each answer to its corresponding Q&A question.\n\nMaintains normalization and evidence traceability.",
              "relation": {
                "name": "question",
                "targetModel": "ai_mall_bulletin_question"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "author_id",
              "type": "uuid",
              "description": "Answer author's {@link ai_mall_user.id} - Maintains required linkage for authorship, traceability, and RBAC compliance.",
              "relation": {
                "name": "author",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "content",
              "type": "string",
              "description": "Rich answer text (HTML/Markdown allowed) - Implements requirement for structured, expressive responses (section 4.4, 7.4.2).\n\nNo denormalized or derived data here.",
              "nullable": false
            },
            {
              "name": "is_private",
              "type": "boolean",
              "description": "Privacy flag for answer - Maps to business rule for private Q&A exchanges (compliance, section 7).\n\nEnforced by application logic for privacy; never duplicates data.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp - Auditability requirement; preserves evidence and enables content restoration if needed.\n\nNull if active.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of answer creation for audit history & event flows.\n\nRequired by compliance/audit trails. No overlap with update or snapshot times.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Timestamp of latest edit; reflects answer table record history but never replaces snapshot time (see snapshot linkage).\n\nFor operational change log only.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "question_id",
                "author_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "author_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "question_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "content"
            }
          ]
        },
        {
          "name": "ai_mall_bulletin_review",
          "description": "Product review entity - Implements the feedback capture mechanism as specified in Feedback & Favorites section 7, Product & Content Management section 4 (review, snapshot, and versioned legal evidence).\n\nAllows only verified purchases to review (system-side constraint). Full snapshot audit trail, all content is versioned at every update for dispute support.\n\n3NF compliance: No ratings or aggregates in table; links only to product, author, and snapshot. Example: Customer posts a review on a purchased item; updates are tracked as new versioned audit entries.\n\nKey relationships: links to author, product, and (via separate relation) ratings/comments.\nSpecial behaviors: logical deletion (deactivated_at); moderation via status field (visible, hidden, reported).",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Uniquely identifies review record for compliance, legal traceability, and normalization enforcement."
          },
          "foreignFields": [
            {
              "name": "author_id",
              "type": "uuid",
              "description": "Review author's {@link ai_mall_user.id} - For compliance, attribution, and privacy enforcement (user or anonymized).",
              "relation": {
                "name": "author",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Reviewed product's {@link ai_mall_product.id} - Ensures normalization and supports multi-product analytics.\n\nCritical for evidence-based queries.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "content",
              "type": "string",
              "description": "Review body text (HTML/Markdown allowed) - Enables rich, expressive reviews for feedback analytics (section 7.4.1).\n\nKeeps atomic data only; aggregates in reporting/analytics downstream.",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Review workflow status (e.g. visible, hidden, reported) - Used for moderation process as detailed in section 7.4.3 and audit logic.\n\nNever encodes aggregate analytics here.",
              "nullable": false
            },
            {
              "name": "verified_purchase",
              "type": "boolean",
              "description": "Indicates whether the review was made by a verified purchase - Supports compliance for trust badges and analytics (section 7.4.1).\n\nNo derived calculations.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Soft-delete timestamp. No data is physically deleted (compliance: audit trail, section 9.2).\n\nNull if active.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp for legal and operational evidence chains.\n\nRequired part of all core tables for audit consistency.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Timestamp when review last edited; must not override audit or snapshot times.\n\nOperational tracking only.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "product_id",
                "author_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "product_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "content"
            }
          ]
        },
        {
          "name": "ai_mall_bulletin_review_rating",
          "description": "Review rating entity - Implements requirement to capture granular, analyzable ratings for each review independent of review text (Feedback & Favorites section 7.4.1).\n\nDecouples rating from review body for analytics and normalization. No aggregation or derived fields; all analytics/averages are in mv_ reporting tables.\n\nKey relationships: links to review and author.\nExample: User rates a purchase 5 stars (with or without text review). Each rating update creates new record for audit/legal.\nSpecial behaviors: 1 review per author per product enforced by unique index. Logical deletion only; auditability at all times.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Uniquely identifies each distinct rating for audit, compliance, and analytics linkage."
          },
          "foreignFields": [
            {
              "name": "review_id",
              "type": "uuid",
              "description": "Target review's {@link ai_mall_bulletin_review.id} - Essential for analytic join/aggregation downstream.\n\nMaintains normalization of atomic rating values.",
              "relation": {
                "name": "review",
                "targetModel": "ai_mall_bulletin_review"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "author_id",
              "type": "uuid",
              "description": "Rating author's {@link ai_mall_user.id} - Enforced for evidence record linkage and uniqueness constraint.",
              "relation": {
                "name": "author",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "rating",
              "type": "int",
              "description": "Rating value (e.g., 1–5) - Implements requirement for explicit, atomic rating input.\n\nRequired for analytics and compliance. No aggregates or derived fields exist here.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Soft-delete timestamp. Supports regulatory compliance, full audit trail, and evidence restoration.\n\nNull if active.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp for creation. Used in analytics, reporting, and dispute chains.\n\nNo other timeline data present.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "review_id",
                "author_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "author_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "review_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_bulletin_comment",
          "description": "Hierarchical comment entity for Q&A and reviews - Implements requirement for multi-level commenting on feedback entities (Feedback & Favorites section 7.4.1/7.4.2), ensuring full snapshot/audit-trail linkage.\n\nSupports threaded replies under Q&A, reviews, and answers. Maintains 3NF by holding atomic content only, referencing parent/post/user by foreign keys.\n\nExample: A customer replies to another customer’s review, seller answers under a Q&A answer, etc. No physical deletion; only logical.\n\nKey relationships: parent/child (self-reference), related feedback entity (question, review, or answer, only one set at a time), and author.\nSpecial behaviors: hierarchical nesting by parent_id; no cyclic dependencies allowed.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique for each comment as per audit/legal/compliance requirements."
          },
          "foreignFields": [
            {
              "name": "author_id",
              "type": "uuid",
              "description": "Comment author's {@link ai_mall_user.id} - For traceability, compliance, and audit chains across roles.\n\nRequired at all times.",
              "relation": {
                "name": "author",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "question_id",
              "type": "uuid",
              "description": "Optional reference to a Q&A entry's {@link ai_mall_bulletin_question.id} - Enables polymorphic linkage (feedback section 7).\n\nExactly one of question_id, review_id, or answer_id must be set.",
              "relation": {
                "name": "question",
                "targetModel": "ai_mall_bulletin_question"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "review_id",
              "type": "uuid",
              "description": "Optional reference to a review's {@link ai_mall_bulletin_review.id} - Polymorphic for comment bridges.\n\nOnly one feedback target allowed per comment.",
              "relation": {
                "name": "review",
                "targetModel": "ai_mall_bulletin_review"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "answer_id",
              "type": "uuid",
              "description": "Optional reference to a Q&A answer's {@link ai_mall_bulletin_answer.id} - For reply-threaded answer comments.\n\nSet only if replying to answer, not question or review.",
              "relation": {
                "name": "answer",
                "targetModel": "ai_mall_bulletin_answer"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "Optional self-reference to parent comment's {@link ai_mall_bulletin_comment.id} - Hierarchy supports multi-level threading (feedback section 7).\n\nNull for root comments. Ensures no duplication or cycles.",
              "relation": {
                "name": "parent",
                "targetModel": "ai_mall_bulletin_comment"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "content",
              "type": "string",
              "description": "Atomic comment body (HTML/Markdown allowed) - Business: enables full expressivity, NLP analytics, and moderation workflows (feedback section 7).\n\nNever stores aggregates/summaries here.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Soft-delete timestamp (permanent record audit). Ensures only logical deletion per compliance section.\n\nNull if active.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Comment creation time - ensures legal, operational, and moderation auditing.\n\nNever used for calculation/aggregation within comment table.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "author_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "question_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "review_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "answer_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "content"
            }
          ]
        },
        {
          "name": "ai_mall_bulletin_attachment",
          "description": "Bulletin attachment entity for Q&A, reviews, comments - Implements requirement for versioned, secure attachment storage (section 8, feedback section 7).\n\nLinks uploaded files to feedback entities without duplication; stores only references, never the file itself. Direct file data/versions handled by separate attachment/CDN modules, never here (see section 8).\n\nExample: User attaches a product photo to a review or Q&A post. Maintains 3NF by not embedding file metadata; only links to snapshot/attachment and feedback entity.\n\nKey relationships: belongs to comment, review, question, or answer; file version linked via attachment_version_id.\nSpecial behaviors: nullability allows polymorphic targeting; RBAC and legal compliance via access logs, not redundant columns.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique for each attachment mapping as per evidence/audit law."
          },
          "foreignFields": [
            {
              "name": "attachment_version_id",
              "type": "uuid",
              "description": "Linked file's {@link ai_mall_attachment_version.id} - Points to the versioned file in the system-wide attachment subsystem (see 8.3).\n\nNo physical file data duplicated here, ensures normalization.",
              "relation": {
                "name": "file_version",
                "targetModel": "ai_mall_attachment_version"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "question_id",
              "type": "uuid",
              "description": "Optional link to Q&A entry's {@link ai_mall_bulletin_question.id} - Allows attaching files to questions.\n\nOther target fields must be null in this case.",
              "relation": {
                "name": "question",
                "targetModel": "ai_mall_bulletin_question"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "review_id",
              "type": "uuid",
              "description": "Optional link to review's {@link ai_mall_bulletin_review.id}.\n\nPolymorphic targeting of attachment based on post type.",
              "relation": {
                "name": "review",
                "targetModel": "ai_mall_bulletin_review"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "answer_id",
              "type": "uuid",
              "description": "Optional link to answer's {@link ai_mall_bulletin_answer.id}.\n\nAllows file attachments to answers specifically.",
              "relation": {
                "name": "answer",
                "targetModel": "ai_mall_bulletin_answer"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "comment_id",
              "type": "uuid",
              "description": "Optional link to comment's {@link ai_mall_bulletin_comment.id}.\n\nEnables file attachments to comments on any feedback entity.",
              "relation": {
                "name": "comment",
                "targetModel": "ai_mall_bulletin_comment"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Attachment creation time for full audit trail and operational event sequencing (section 8.3).\n\nNever used for calculation in this table.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "attachment_version_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_bulletin_moderation_log",
          "description": "Moderation and audit log entity for bulletin content - Implements requirements from Feedback & Favorites section 7 (moderation, hidden/reported tracking), Security/Compliance section 9.\n\nEvery moderation action (hide, flag, restore, escalate, respond) is recorded. Maintains 3NF: atomic event log (no aggregates, no duplication), links only.\n\nExample: An admin hides a review, seller responds and action is logged for analytics and audit later.\n\nKey relationships: moderator (user), feedback target (question/review/answer/comment), event type, event time.\nSpecial behaviors: no soft/hard delete; permanent record as audit law requires; one row per action.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique for each moderation event to enable audit evidence and compliance."
          },
          "foreignFields": [
            {
              "name": "moderator_id",
              "type": "uuid",
              "description": "Moderator user's {@link ai_mall_user.id} - The actor performing the moderation event (RBAC validation, compliance auditing).\n\nAlways required.",
              "relation": {
                "name": "moderator",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "question_id",
              "type": "uuid",
              "description": "Optional link to moderated Q&A entry's {@link ai_mall_bulletin_question.id}.\n\nPolymorphic linkage per event; only one target set per row.",
              "relation": {
                "name": "question",
                "targetModel": "ai_mall_bulletin_question"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "review_id",
              "type": "uuid",
              "description": "Optional link to moderated review's {@link ai_mall_bulletin_review.id}.",
              "relation": {
                "name": "review",
                "targetModel": "ai_mall_bulletin_review"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "answer_id",
              "type": "uuid",
              "description": "Optional link to moderated answer's {@link ai_mall_bulletin_answer.id}.",
              "relation": {
                "name": "answer",
                "targetModel": "ai_mall_bulletin_answer"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "comment_id",
              "type": "uuid",
              "description": "Optional link to moderated comment's {@link ai_mall_bulletin_comment.id}.",
              "relation": {
                "name": "comment",
                "targetModel": "ai_mall_bulletin_comment"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "action",
              "type": "string",
              "description": "Moderation action type (e.g. hide, flag, restore, escalate, respond) - Implements business process and compliance analytics (feedback/moderation sections).\n\nImmutable. No aggregation allowed at record level.",
              "nullable": false
            },
            {
              "name": "reason",
              "type": "string",
              "description": "Moderator's reason/comment for event - Fulfills compliance, audit, and business policy documentation.\n\nHelps with training future AI moderation and audit flows.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of moderation event - Required for full legal evidence, audit trail, and business analytics.\n\nImmutable; never used for calculation at model level.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "moderator_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "reason"
            }
          ]
        }
      ]
    },
    {
      "filename": "schema-05-cart_order.prisma",
      "namespace": "CartOrder",
      "models": [
        {
          "name": "ai_mall_cart",
          "description": "Shopping Cart - Implements the requirement for persistent and session-based carts from the requirements document (section 5.1). \n\nThis model represents a user's cart, capturing its configuration, state, and association with channel and customer if available. Maintains 3NF by strictly referencing all possible foreign models (user/session/channel) and separating cart items and cart snapshots into normalized child tables. For example, a persistent member cart will have a customer_id and session_id reference, with items and snapshots kept in separate tables for auditability. \n\nKey relationships: ai_mall_user (customer), ai_mall_session (guest/session cart), ai_mall_channel (cart context), ai_mall_cart_item (owned items), ai_mall_cart_snapshot (for persistent cart state). \nSpecial behaviors: Only logical delete (deactivated_at), supports both guest and member carts, no calculated fields stored here.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique ID for the cart."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Belonged user's {@link ai_mall_user.id}. Provides linkage between persistent cart and the corresponding user. Enforces user-based cart assignment for auditability and future analytics. Nullable to support guest carts.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "session_id",
              "type": "uuid",
              "description": "Belonged session's {@link ai_mall_session.id}. Maps this cart to an anonymous or guest session. Nullable for member carts.",
              "relation": {
                "name": "session",
                "targetModel": "ai_mall_session"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel context's {@link ai_mall_channel.id}. Indicates which sales channel this cart belongs to, enabling omnichannel support and analytics.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion marker - Records when this cart was deactivated (soft-deleted), implements auditability requirement. Maintains normalization by not physically deleting records. For example, a cart abandoned can be marked as deactivated here.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp - Implements timing aspect for compliance, analytics, and audit trails. Maintains atomicity: strictly represents the created time only. For example, this is logged when cart is created.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update timestamp for the cart. For auditing and concurrency controls. Normalized, never precomputed.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "session_id",
                "channel_id"
              ],
              "unique": true
            },
            {
              "fieldNames": [
                "user_id",
                "channel_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_cart_item",
          "description": "Cart Item - Implements tracking line items in the cart, fulfilling the option-aware, snapshot-based cart design of requirement section 5.1. \n\nEach entry represents a single product+option in the cart, normalized to be atomic, with no derived values. Mentions the associated snapshot of product-variant state for audit trail replayability. Maintains 3NF by avoiding any redundant or compounded data—no pre-calculation. For example, a cart with three SKUs will produce three rows here. \n\nKey relationships: ai_mall_cart (parent), ai_mall_product_variant (current option/SKU), ai_mall_cart_snapshot (state capture). \nSpecial behaviors: Each cart item strictly references a product variant and snapshot, supports quantity, and is independently updatable/deletable.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier per cart item."
          },
          "foreignFields": [
            {
              "name": "cart_id",
              "type": "uuid",
              "description": "Parent cart's {@link ai_mall_cart.id}. Connects item to its current cart. Required for cart item ownership and normalization.",
              "relation": {
                "name": "cart",
                "targetModel": "ai_mall_cart"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "product_variant_id",
              "type": "uuid",
              "description": "Current product variant's {@link ai_mall_product_variant.id}. Points to the specific SKU/option in the cart for correct pricing/inventory at selection moment.",
              "relation": {
                "name": "product_variant",
                "targetModel": "ai_mall_product_variant"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "cart_snapshot_id",
              "type": "uuid",
              "description": "Snapshot record of this item at the point of addition, from {@link ai_mall_cart_snapshot.id}, enabling full audit/history. Nullable until a snapshot is made.",
              "relation": {
                "name": "cart_snapshot",
                "targetModel": "ai_mall_cart_snapshot"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "quantity",
              "type": "int",
              "description": "Quantity of the item in this cart line - atomic count. Fully normalized, not pre-aggregated. For example: 2 units of the same variant.",
              "nullable": false
            },
            {
              "name": "added_at",
              "type": "datetime",
              "description": "Timestamp when product was first added to the cart line. Maintains accurate audit log for inventory logic and user behavior analytics.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update time for this cart item (e.g., if quantity changed). For concurrency and event tracking, not a computed value.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "cart_id",
                "product_variant_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_cart_snapshot",
          "description": "Cart Snapshot - Implements the audit and replayable cart state requirement (section 5.1, snapshot system-wide). \n\nCaptures the immutable state of the cart (and possibly its items) at the time of key events (checkout, expiration, etc.). Follows strict 3NF: Only contains direct properties and references, never computed or joined summaries. Usage example: Restoring a historical cart for dispute/audit, or for customer convenience (e.g., 'restore abandoned cart'). \n\nKey relationships: ai_mall_cart (whose state is being snapshotted), ai_mall_user (optional, for full audit), ai_mall_session (optional, for guest cart snapshot).\nSpecial behaviors: Every update to cart state generates a new snapshot record; no pre-aggregated totals.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique snapshot ID."
          },
          "foreignFields": [
            {
              "name": "cart_id",
              "type": "uuid",
              "description": "Parent cart's {@link ai_mall_cart.id}. Indicates the cart whose state is snapshotted.",
              "relation": {
                "name": "cart",
                "targetModel": "ai_mall_cart"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User owning the cart at snapshot time — {@link ai_mall_user.id}. Nullable for guest carts.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "session_id",
              "type": "uuid",
              "description": "Session of the cart owner (guest snapshot) — {@link ai_mall_session.id}. Nullable for member carts.",
              "relation": {
                "name": "session",
                "targetModel": "ai_mall_session"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "cart_state_json",
              "type": "string",
              "description": "JSON snapshot of cart structure/items at this point — atomic per snapshot. Provides flexible, normalized archival without denormalized summaries. For example: All line items and coupons at the moment of checkout.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Snapshot creation timestamp. For legal compliance and audit/replayability.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "cart_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_order",
          "description": "Order - Implements the core persistent order entity as required by sections 5.2 and 5.3. \n\nRepresents a purchase across all workflows—initiation, payment, fulfillment, exceptions—and separates every aggregate property into normalized/atomic fields only. No calculated values, but ref to snapshot at order time maintained. For example, represents all fields necessary to reconstruct, audit, or dispute an order event. \n\nKey relationships: ai_mall_user (purchaser), ai_mall_cart_snapshot (linked cart state), ai_mall_order_snapshot (Order state at creation), ai_mall_channel (sales context). \nSpecial behaviors: Logical delete (deactivated_at); no calculated totals; full audit maintained via snapshots.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Order ID."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Order's purchaser user {@link ai_mall_user.id}. Tracks persistent ownership throughout the order lifecycle. Required for member orders, nullable for guest.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel sales context {@link ai_mall_channel.id}. Enables channel-specific behavior/audit.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "cart_snapshot_id",
              "type": "uuid",
              "description": "Snapshot of cart state at order creation {@link ai_mall_cart_snapshot.id}. Ensures product and price evidence at time of purchase. Required for legal traceability.",
              "relation": {
                "name": "cart_snapshot",
                "targetModel": "ai_mall_cart_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "status",
              "type": "string",
              "description": "Current order status (e.g. initiated, paid, fulfilled, cancelled, completed, exception). Atomic, not inferred. Used for workflow validation and transitions.",
              "nullable": false
            },
            {
              "name": "external_order_ref",
              "type": "string",
              "description": "External partner or marketplace reference. For cross-system auditing. Optional, atomic, only for reference.",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion marker — compliance with non-hard-delete policy.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Order creation time — fully atomic. Not recalculated.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Order last updated — for concurrency and audit.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "external_order_ref"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_order_item",
          "description": "Order Item - Implements requirement for option-aware, itemized orders (section 5.2, split fulfillment), and full history via snapshots. \n\nEach record represents a single SKU in an order, with references to the specific order, product-variant (SKU), and order snapshot. Follows strict 3NF, ensures no denormalized totals at order item level. For example: If an order includes 2 shirts and 1 hat (different SKUs), these are different rows.\n\nKey relationships: ai_mall_order (parent), ai_mall_product_variant (ordered SKU), ai_mall_order_snapshot (item state). \nSpecial behaviors: Quantity changes are tracked as events, snapshots used for audit. No computed fields here.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Order item ID."
          },
          "foreignFields": [
            {
              "name": "order_id",
              "type": "uuid",
              "description": "Parent order's {@link ai_mall_order.id}.",
              "relation": {
                "name": "order",
                "targetModel": "ai_mall_order"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "product_variant_id",
              "type": "uuid",
              "description": "Ordered product variant {@link ai_mall_product_variant.id}.",
              "relation": {
                "name": "product_variant",
                "targetModel": "ai_mall_product_variant"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "order_snapshot_id",
              "type": "uuid",
              "description": "Associated order snapshot's {@link ai_mall_order_snapshot.id}. Nullable if not snapshotted yet.",
              "relation": {
                "name": "order_snapshot",
                "targetModel": "ai_mall_order_snapshot"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "quantity",
              "type": "int",
              "description": "Quantity of this SKU in the order - atomic, not aggregated more than 1 per row.",
              "nullable": false
            },
            {
              "name": "added_at",
              "type": "datetime",
              "description": "Time when the item was added to order. For audit trail. Maintains normalization by strictly storing only occurrence time.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update timestamp for this order item (e.g., quantity update).",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "order_id",
                "product_variant_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_order_snapshot",
          "description": "Order Snapshot - Implements the versioned, replayable order state for traceability (requirement 5.2 & compliance/audit). \n\nEvery change/state in an order produces a snapshot, allowing full rollback and historical evidence. Only atomic data, no denormalized totals. Key use: reconstruct an order at a historical point or during dispute. \n\nKey relationships: ai_mall_order (main), ai_mall_user (optional: snapshot initiator), ai_mall_channel (sales outlet). \nSpecial behaviors: Generated on each significant order event (create, pay, ship, refund, return, exchange).",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Order snapshot ID."
          },
          "foreignFields": [
            {
              "name": "order_id",
              "type": "uuid",
              "description": "Order whose state is captured — {@link ai_mall_order.id}.",
              "relation": {
                "name": "order",
                "targetModel": "ai_mall_order"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User/customer at the time of snapshot — {@link ai_mall_user.id}. Nullable for guest/anonymous cases.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel of the order at snapshot time — {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "order_state_json",
              "type": "string",
              "description": "Full snapshot of order state as JSON — atomic, per snapshot. Enables legal-grade audit trail.",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Order status at this snapshot (e.g. paid, fulfilled, refunded). Never computed — always historic atomic value.",
              "nullable": false
            },
            {
              "name": "event",
              "type": "string",
              "description": "Order lifecycle event that triggered the snapshot (e.g. payment_confirmed, shipped, returned). Full timeline support. For example: 'created', 'paid', 'exception', etc.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of when the snapshot was created for audit/compliance use. Not recalculated.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "order_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_fulfillment",
          "description": "Order Fulfillment - Implements section 5.3's need for split/multi-item shipment handling and status tracking. \n\nRepresents the fulfillment of an (order, item), not just an order, allowing for split/partial logistics. Maintains 3NF by not duplicating order or address info, only referencing atomic relationships. Usage: Each record is an atomic shipment process for a given order item and (optionally) an individual shipment.\n\nKey relationships: ai_mall_order_item (which item is being shipped), ai_mall_user (who is shipping), ai_mall_channel (fulfillment context). \nSpecial behaviors: No derived values, only pointers and timestamps. Soft delete via deactivated_at.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique fulfillment ID."
          },
          "foreignFields": [
            {
              "name": "order_item_id",
              "type": "uuid",
              "description": "Order item being fulfilled — {@link ai_mall_order_item.id}.",
              "relation": {
                "name": "order_item",
                "targetModel": "ai_mall_order_item"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel where the fulfillment is processed — {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "shipper_user_id",
              "type": "uuid",
              "description": "Fulfilling user — {@link ai_mall_user.id}. Nullable (e.g. automated).",
              "relation": {
                "name": "shipper_user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "status",
              "type": "string",
              "description": "Shipment/fulfillment status (e.g. pending, in_transit, delivered, hold, exception). Atomic value for trace and audit consistency.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Soft-delete timestamp. Maintains compliance, never hard deleted.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Record creation time for sequencing and audit.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Record last update. For concurrency/audit.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "order_item_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_fulfillment_event",
          "description": "Fulfillment Event - Implements the full event logging/audit trail for each fulfillment, as described in 5.3. \n\nCaptures every status or exception change for a specific fulfillment, with atomic records per event for later legal reconstruction or dispute handling. Maintains strict normalization via references. Example: lost, delivered, hold, returned.\n\nKey relationships: ai_mall_fulfillment (parent), ai_mall_user (actor triggering event), ai_mall_channel (context). \nSpecial behaviors: All fulfillment status transitions are tracked here. Only actual events, not summaries.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Event record ID."
          },
          "foreignFields": [
            {
              "name": "fulfillment_id",
              "type": "uuid",
              "description": "Fulfillment this event is for — {@link ai_mall_fulfillment.id}.",
              "relation": {
                "name": "fulfillment",
                "targetModel": "ai_mall_fulfillment"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Actor user who triggered this event — {@link ai_mall_user.id}. Nullable for system-trig.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Context channel at event time — {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "event",
              "type": "string",
              "description": "Event description (e.g. delivered, hold, exception, updated). Atomic, not computed. Used for full lifecycle event stream.",
              "nullable": false
            },
            {
              "name": "event_details_json",
              "type": "string",
              "description": "Details of the event encoded as JSON — atomic per event. For audit, compliance, evidence.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Event timestamp. Audit/compliance support. Atomic, historical.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "fulfillment_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_return",
          "description": "Return - Implements requirement section 5.3 workflow for organized product returns, inventory restoration, and notification. \n\nEach return record references the original order item, maintaining full 3NF (never denormalized, no summaries). Key for audit/tracing/exceptions.\n\nKey relationships: ai_mall_order_item (returned item), ai_mall_user (customer), ai_mall_channel (where return processed). \nSpecial behaviors: Return states stored atomically, deactivated_at as soft delete, event sequencing via created/updated.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique return ID."
          },
          "foreignFields": [
            {
              "name": "order_item_id",
              "type": "uuid",
              "description": "Returned order item — {@link ai_mall_order_item.id}.",
              "relation": {
                "name": "order_item",
                "targetModel": "ai_mall_order_item"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Customer requesting return — {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel for the return process — {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "status",
              "type": "string",
              "description": "Current return status (e.g. pending, approved, rejected, completed). Atomic value. For state workflow, never computed.",
              "nullable": false
            },
            {
              "name": "reason",
              "type": "string",
              "description": "Customer-provided or system return reason. Atomic. Used for analytics/compliance.",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Soft delete timestamp. Follows platform-wide no-hard-delete requirement.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Record creation datetime. Used for sequencing/audit.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update datetime. For concurrency handling.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "order_item_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_exchange",
          "description": "Exchange - Implements workflow for exchanges, tied to specific order items, as specified in order fulfillment/returns (section 5.3). \n\nEach record represents an atomic exchange request. Maintains 3NF by referencing original order_item only, avoids all summary fields. Used for audit trail and analytics (e.g. exchange rates, patterns). \n\nKey relationships: ai_mall_order_item, ai_mall_user, ai_mall_channel. \nSpecial behaviors: Uses deactivated_at as soft delete, with event and state timelines.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique exchange ID."
          },
          "foreignFields": [
            {
              "name": "order_item_id",
              "type": "uuid",
              "description": "Order item being exchanged — {@link ai_mall_order_item.id}.",
              "relation": {
                "name": "order_item",
                "targetModel": "ai_mall_order_item"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Customer who requested exchange — {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel where exchange processed — {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "status",
              "type": "string",
              "description": "Exchange status (e.g. pending, approved, rejected, completed). Atomic per event.",
              "nullable": false
            },
            {
              "name": "reason",
              "type": "string",
              "description": "Explanation or reason for exchange provided by customer or system. Not duplicated or summarized, fully atomic.",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Soft delete timestamp for compliance. No hard deletion allowed.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation datetime, for sequencing. Never recalculated.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "Last update datetime, used for audit/concurrency.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "order_item_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_customer_notification",
          "description": "Customer Notification - Implements section 5.3 milestone/configurable notification logic for order/cart/return/fulfillment status. \n\nEach record logs a notification/delivery sent to a customer, supporting audit trails, compliance, and user experience analytics. 3NF preserved by not storing computed summaries, strictly referencing atomic foreign keys. Used for reconstructing notification event history per user/order.\n\nKey relationships: ai_mall_user (customer), ai_mall_order (optional, target order), ai_mall_channel (notification channel). \nSpecial behaviors: Every notification is an independent record, denormalized summaries are only allowed in reporting MVs.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique notification event ID."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User who received the notification — {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "order_id",
              "type": "uuid",
              "description": "Target order for which notification sent — {@link ai_mall_order.id}. Nullable if not order specific.",
              "relation": {
                "name": "order",
                "targetModel": "ai_mall_order"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel for notification context — {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "type",
              "type": "string",
              "description": "Notification type (e.g. order_update, cart_abandonment, shipment, return, etc.). Fully atomic, enables filtering, never computed.",
              "nullable": false
            },
            {
              "name": "payload_json",
              "type": "string",
              "description": "Notification details (e.g. custom message, metadata, notification event content or parameters) as JSON. Atomic per event, never joined or aggregated.",
              "nullable": false
            },
            {
              "name": "delivered_at",
              "type": "datetime",
              "description": "Timestamp when notification delivered. Audit trace for compliance. Never recalculated.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Record creation time for event sequencing.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-06-payment_discount_loyalty.prisma",
      "namespace": "PaymentsDiscountsLoyalty",
      "models": [
        {
          "name": "ai_mall_coupon",
          "description": "Coupon entity - This implements the requirements for flexible, stackable, targeted, and fully auditable coupons in 'Discounts, Payments, and Loyalty Systems'.\n\nHandles business logic for defining discount rules, usage limitations, target segmentation, and analytics metrics. Maintains 3NF compliance by storing each coupon as an atomic record, referencing other entities via foreign keys. For example, a bulk email campaign will create many coupon records with individualized conditions and tracking.\n\nKey relationships: Channels (scope), Campaigns (promotional linkage), CouponIssuance (distribution), CouponRedemption (usage events).\nSpecial behaviors: Public/private scope, dynamic rule evaluation, stackability and exclusivity constraints.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for each coupon."
          },
          "foreignFields": [
            {
              "name": "ai_mall_channel_id",
              "type": "uuid",
              "description": "Belonged channel's {@link ai_mall_channel.id}.\nDefines channel-specific coupon targeting and independent configuration separation.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_campaign_id",
              "type": "uuid",
              "description": "Linked campaign's {@link ai_mall_campaign.id} for tracking promotional efficacy.",
              "relation": {
                "name": "campaign",
                "targetModel": "ai_mall_campaign"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "Coupon code value - Implements code assignment and redemption logic. Business meaning: Unique string for user input or distribution. Ensures normalization by not allowing duplicates. For example, 'SUMMER2025'. Unique constraint applies.",
              "nullable": false
            },
            {
              "name": "public",
              "type": "boolean",
              "description": "Whether coupon is publicly advertised - Implements exclusivity/stackability requirements. Allows for open or segmented campaigns. Normalization-compliant as it only flags business logic. Example: A public sitewide coupon.",
              "nullable": false
            },
            {
              "name": "stackable",
              "type": "boolean",
              "description": "Allows coupon stacking logic - Implements business constraint on combinable discounts. Example: Black Friday coupon stackable with loyalty points; exclusive coupons will set this 'false'.",
              "nullable": false
            },
            {
              "name": "exclusive",
              "type": "boolean",
              "description": "Coupon exclusivity flag - Implements stack restriction. If true, coupon cannot be combined with any other. Maintains normalized flag, no derived data. Example: 'WELCOME20' is exclusive with no other discounts.",
              "nullable": false
            },
            {
              "name": "starts_at",
              "type": "datetime",
              "description": "Start datetime for coupon validity - Implements scheduled campaign launches or limited-time offers. Example: Only apply after midnight 2025-06-01.",
              "nullable": false
            },
            {
              "name": "expires_at",
              "type": "datetime",
              "description": "Expiration datetime for coupon - Implements coupon expiration rules. Supports legal/operational requirements. Example: Set to 2025-07-01 for a 30-day campaign.",
              "nullable": false
            },
            {
              "name": "min_purchase_amount",
              "type": "double",
              "description": "Minimum order amount eligibility - Implements discount logic (e.g., 'Spend $100+'). Maintains 3NF by not caching order totals. Example: 'min 100.0' for coupon eligibility.",
              "nullable": true
            },
            {
              "name": "max_redemptions",
              "type": "int",
              "description": "Maximum allowed redemptions (overall) - Implements constraint for total usage per coupon, normalized as a pure property. Example: 1000 for a limited campaign.",
              "nullable": true
            },
            {
              "name": "discount_type",
              "type": "string",
              "description": "Type of discount ('fixed', 'percent', 'free_shipping') - Implements discount engine branching. 3NF upheld because calculation is not cached here.",
              "nullable": false
            },
            {
              "name": "discount_value",
              "type": "double",
              "description": "Discount value (e.g., $10 or 10%) - Implements atomic parameter for actual benefit. Calculation logic handled outside the table.",
              "nullable": false
            },
            {
              "name": "conditions_json",
              "type": "string",
              "description": "JSON-encoded dynamic conditions - Implements extensibility for advanced rules (segments, eligible products, user targeting). Used for rule evaluation engines. Stores only atomic information, never aggregates.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Datetime when this coupon was created - Used for auditing. For example, '2025-06-01T18:00:00'.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp - Implements compliance and audit requirements. Never physically deletes coupon, only marks as deactivated. 3NF-compliant.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "starts_at",
                "expires_at"
              ]
            },
            {
              "fieldNames": [
                "ai_mall_channel_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_coupon_issuance",
          "description": "Coupon Issuance entity - Implements audit-trail of distributions based on requirement for tracking all bulk/personalized coupon grants.\n\nTracks which user (or anonymous segment) a coupon is issued to and at what time, supporting analysis and eligibility enforcement. Maintains full normalization; every issuance is an atomic event, with no summarization or derived fields.\n\nKey relationships: Links Coupon and User (may include anonymous tokens). Used in marketing (e.g. targeted emails) and campaign reporting.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_coupon_id",
              "type": "uuid",
              "description": "Belonged coupon's {@link ai_mall_coupon.id}. Connects to the base coupon definition.",
              "relation": {
                "name": "coupon",
                "targetModel": "ai_mall_coupon"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Recipient user's {@link ai_mall_user.id}. Can be null if issued to segment/anonymous user. Supports targeted or bulk distribution.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "issued_at",
              "type": "datetime",
              "description": "Datetime of coupon issuance. Required for analytics and eligibility checks on coupon usage. Example: 2025-06-15T10:00:00Z.",
              "nullable": false
            },
            {
              "name": "expires_at",
              "type": "datetime",
              "description": "Expiration datetime override for this issuance (optional) - supports per-user expiry logic. Example: individual code with 7-day duration.",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp. Implements GDPR/logical delete requirements. Never physically removes - marks as inactive.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_coupon_id",
                "ai_mall_user_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_coupon_redemption",
          "description": "Coupon Redemption entity - Implements full audit-trail of coupon usage, supporting business/legal requirements to demonstrate eligibility, analytics, and fraud detection.\n\nLinks coupon, user, and order, and records exact redemption time for complete, reversible history. Ensures normalization by not caching discounts in regular tables; all calculations handled at the application/service level.\n\nKey relationships: Coupon, User, Order (if order-level context is required).\nSpecial behaviors: Only reflects historical fact; never pre-calculates or summarizes.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_coupon_id",
              "type": "uuid",
              "description": "Belonged coupon's {@link ai_mall_coupon.id}.",
              "relation": {
                "name": "coupon",
                "targetModel": "ai_mall_coupon"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User who redeemed the coupon {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_order_id",
              "type": "uuid",
              "description": "Associated order's {@link ai_mall_order.id} where coupon was applied. Links redemption to transactional evidence.",
              "relation": {
                "name": "order",
                "targetModel": "ai_mall_order"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "redeemed_at",
              "type": "datetime",
              "description": "Exact timestamp of coupon redemption. Implements audit-compliance; ensures event is point-in-time atomic. E.g., '2025-06-17T12:00:00'.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_coupon_id",
                "ai_mall_user_id",
                "ai_mall_order_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_payment_transaction",
          "description": "Payment Transaction entity - Implements requirement for atomic, auditable, and PCI-compliant payment processing ledger.\n\nRecords all attempts at payment, payment method, channel, amount, and current status. Maintains legal/operational compliance and enables complete disaster recovery or reconciliation. Never caches any calculated summary fields; uses only atomic, factual data.\n\nKey relationships: User, Order, Channel, Refund (linked only to successful transactions).\nSpecial behaviors: Payment status transitions, token/raw data only as required for compliance.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Payment initiator's {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_order_id",
              "type": "uuid",
              "description": "Order context's {@link ai_mall_order.id}.",
              "relation": {
                "name": "order",
                "targetModel": "ai_mall_order"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_channel_id",
              "type": "uuid",
              "description": "Transaction channel's {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "payment_method",
              "type": "string",
              "description": "Payment method used (e.g., 'card','deposit','mileage'). Implements payment gateway logic. Example: credit card, points, split.",
              "nullable": false
            },
            {
              "name": "payment_token",
              "type": "string",
              "description": "Tokenized payment key (when required for compliance or replay). Only present when mandated by PCI/PSP.",
              "nullable": true
            },
            {
              "name": "amount",
              "type": "double",
              "description": "Transaction amount. Core data for all revenue/accounting. Never cached total - atomic to transaction.",
              "nullable": false
            },
            {
              "name": "currency",
              "type": "string",
              "description": "Transaction currency. Supports international, multi-currency settlement. Example: 'USD', 'KRW'.",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Payment status (e.g., 'initiated', 'confirmed', 'failed'). Implements state machine; application logic ensures valid transitions.",
              "nullable": false
            },
            {
              "name": "confirmed_at",
              "type": "datetime",
              "description": "Confirmation datetime (if successfully completed). Null until confirmation event logged. Used for audit/legal recordkeeping.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of creation. Core for sequencing, law/audit tracking.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp - never actual removal. Auditing compliance. Null by default.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "payment_token"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id",
                "ai_mall_order_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_payment_refund",
          "description": "Payment Refund entity - Implements the requirement for atomic, versioned, and legally auditable reversals and adjustments of payment transactions.\n\nEach refund is atomic, references the original payment, and includes full status and amount. Retains 3NF by storing only event-level data, not summarizing totals. Supports complex workflows: partial refunds, retries, etc.\n\nKey relationships: PaymentTransaction, User (who triggered), potentially Order if distinct from payment reference.\nBehavioral notes: No redundancy; all reconciliation/reporting derived in materialized views or at the application layer.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_payment_transaction_id",
              "type": "uuid",
              "description": "Refunded transaction's {@link ai_mall_payment_transaction.id}. Links event to payment attempt.",
              "relation": {
                "name": "payment_transaction",
                "targetModel": "ai_mall_payment_transaction"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User who initiated refund's {@link ai_mall_user.id}. For auditing and legal review.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "amount",
              "type": "double",
              "description": "Refunded amount. Required for exact accounting; atomic per refund event.",
              "nullable": false
            },
            {
              "name": "currency",
              "type": "string",
              "description": "Refund currency, mirrors payment's currency. 3NF: never aggregates. Example: 'USD'.",
              "nullable": false
            },
            {
              "name": "reason",
              "type": "string",
              "description": "Reason for refund/event - documents business/audit context. Example: 'partial return', 'shipping error'.",
              "nullable": true
            },
            {
              "name": "status",
              "type": "string",
              "description": "Refund status (e.g., 'pending', 'completed', 'failed'). Core for workflow/audit tracking. Application enforces transitions.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Event timestamp for legal/auditing. E.g., '2025-06-17T12:05:00'.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deletion timestamp for compliance. Null by default.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_payment_transaction_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_deposit_ledger",
          "description": "Deposit Ledger entity - Implements the requirement for an immutable, fully auditable record of deposit inflows/outflows and admin adjustments for each customer account.\n\nSupports accrual, redemption, expiration, donation credit, and audit/rollback of all deposit transactions. Each row is a single financial event, never a summary, maintaining strict normalization and legal traceability.\n\nKey relationships: User, Admin (if donation/adjustment), Campaign (if linked to promotional action).\nSpecial behaviors: No aggregate/cached/balances fields. Reporting and live balances are always derived externally.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Depositor/beneficiary's {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_campaign_id",
              "type": "uuid",
              "description": "Campaign reference {@link ai_mall_campaign.id}. May link to donation, admin campaign grants, etc.",
              "relation": {
                "name": "campaign",
                "targetModel": "ai_mall_campaign"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "amount",
              "type": "double",
              "description": "Negative/positive value for in/outflow. Maintains atomic event. Example: -10.0 for spend, +50.0 for credit/donation.",
              "nullable": false
            },
            {
              "name": "currency",
              "type": "string",
              "description": "Currency of deposit. Normalized to allow global reporting. Example: 'USD'.",
              "nullable": false
            },
            {
              "name": "type",
              "type": "string",
              "description": "Event type ('credit','redeem','adjustment','expiration') - documents business process for review/tracing.",
              "nullable": false
            },
            {
              "name": "reference",
              "type": "string",
              "description": "External/internal reference (order/payment id) that originated event. For traceability. Example: 'ORD-2025-111', 'PMT-2025-111'.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of the event. Must be atomic, never allows large time spans per row.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_mileage_ledger",
          "description": "Mileage Ledger entity - Implements immutable audit logs for loyalty point accrual, redemptions, adjustments, and expirations.\n\nEach record is a distinct financial event, atomic for compliance. Fulfills promo campaign tracking, legal, and rollback requirements. No aggregate/cached/derived fields—in compliance with all normalization and financial integrity principles.\n\nKey relationships: User, Campaign (for promo events), Admin (for donation/override events).\nSpecial behaviors: Calculation for current balance handled by view/external service only.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Point recipient's {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_campaign_id",
              "type": "uuid",
              "description": "Associated campaign's {@link ai_mall_campaign.id} (if earned/redeemed via promotion).",
              "relation": {
                "name": "campaign",
                "targetModel": "ai_mall_campaign"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "amount",
              "type": "double",
              "description": "Value of transaction (+/- points). Negative for redemptions, positive for earnings/adjustments.",
              "nullable": false
            },
            {
              "name": "type",
              "type": "string",
              "description": "Transaction type ('accrual','redeem','expiration','donation','adjustment'). Fulfills business compliance and rollback requirements.",
              "nullable": false
            },
            {
              "name": "reference",
              "type": "string",
              "description": "External/internal reference for audit tracing. Examples: order or event id.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Event timestamp. Required for accrual/expiration windows.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_donation",
          "description": "Donation entity - Implements business and compliance requirements for gift/donation programs; links admin, campaign, user, and event traces for reporting and legal defensibility.\n\nStrictly maintains normalization—every donation event is atomic. Reporting/analytics handled via materialized views or analytic pipelines only.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Donation recipient/user's {@link ai_mall_user.id} (can be any customer account).",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_campaign_id",
              "type": "uuid",
              "description": "Campaign reference {@link ai_mall_campaign.id}. Allows linkage to campaigns/programs.",
              "relation": {
                "name": "campaign",
                "targetModel": "ai_mall_campaign"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "amount",
              "type": "double",
              "description": "Value of donation (currency in reference field or fixed for given campaign).",
              "nullable": false
            },
            {
              "name": "reference",
              "type": "string",
              "description": "Internal/external reference for event—a campaign, batch, or admin log link.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Donation timestamp. Atomic for compliance traceability.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_campaign",
          "description": "Campaign entity - Implements requirement for business-driven promotional, coupon, or loyalty programs with clear linkage to discounts, donations, or deposits for analytics and auditability.\n\nNo summary/calculated data allowed; fully normalized to allow modular/cascading program logic and expansion.\n\nKey relationships: Coupons, DepositLedger, MileageLedger, Donation, Analytics. Enables advanced scenario reporting via external analytic views.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "Program/campaign name. Atomic identifier for business analytics, external reporting, and multi-channel traceability.",
              "nullable": false
            },
            {
              "name": "type",
              "type": "string",
              "description": "Campaign type identifier (e.g., 'coupon','deposit','mileage','donation'). Enables program logic/module branching. Compliant with normalization as pure property.",
              "nullable": false
            },
            {
              "name": "starts_at",
              "type": "datetime",
              "description": "Campaign start datetime. Ensures time-boxed offers or scheduled promos comply with requirements.",
              "nullable": false
            },
            {
              "name": "expires_at",
              "type": "datetime",
              "description": "Campaign expiry datetime. Maintains traceability of active/inactive programs and supports program compliance/audit.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Program creation timestamp. Immovable for audit/trace. Example: '2025-06-01T00:00:00Z'.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "name",
                "type"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        }
      ]
    },
    {
      "filename": "schema-07-feedback_favorite.prisma",
      "namespace": "FeedbackFavorite",
      "models": [
        {
          "name": "ai_mall_review",
          "description": "[Review entity] - This implements the requirements from Section 7.4.1 of the requirements documentation. \n\nIt represents user-generated product reviews, supporting text/media, edit history (via snapshots), verified purchase badges, and seller responses. Maintains 3NF normalization by separating review content, user info, and product linkage. For example, the review record is linked to snapshots for history and legal evidence.\n\nKey relationships: Linked to ai_mall_product, ai_mall_user, ai_mall_review_rating, and ai_mall_snapshot. Special behaviors: Only verified buyers can flag reviews as such, and logical deletion is supported; moderation and audit trail required.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for each review."
          },
          "foreignFields": [
            {
              "name": "ai_mall_product_id",
              "type": "uuid",
              "description": "Reviewed product's {@link ai_mall_product.id} - References the product which this review is about.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Authoring user's {@link ai_mall_user.id} - References the customer who wrote the review.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "snapshot_id",
              "type": "uuid",
              "description": "Current snapshot's {@link ai_mall_snapshot.id} - Represents latest review state content.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "verified_purchase",
              "type": "boolean",
              "description": "[Verified purchase status] - Implements buyer verification aspect. \n\nIndicates if the review is from a user who purchased the product. Ensures normalization by not duplicating purchase/fulfillment data. Example: Flag true for verified buyers only. Only updatable via backend logic.",
              "nullable": false
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "[Moderation flag] - Implements moderation/compliance requirements. \n\nMarks if the review is currently visible to others; used by admins/sellers to hide reviews per policy. Ensures normalization—actual moderation events are logged elsewhere. Example: Set true if hidden by moderator.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Creation timestamp] - Implements audit/logging aspect. \n\nReview creation time. Normalized, atomic field. Used for sorting and auditing.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Update timestamp] - Supports edit history. \n\nTimestamp of last update to the review record; for audit and history views. Maintains normalized field tracking changes.",
              "nullable": false
            },
            {
              "name": "deleted_at",
              "type": "datetime",
              "description": "[Logical delete time] - For compliance and audit trail needs. \n\nTimestamp if review is logically deleted (never physically removed). Null if active. Normalized—no flag duplication. Used to support legal compliance for data retention.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id",
                "ai_mall_product_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_product_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "snapshot_id"
            }
          ]
        },
        {
          "name": "ai_mall_review_rating",
          "description": "[Review rating entity] - Implements structured separate ratings from Section 7.4.1.\n\nStores scoring information for each review (e.g., 1-5 stars). Fully normalized: rating is atomic and separated from review text, enabling granular analytics. Example: Analytics on star distributions. Related to ai_mall_review and allowing for one-to-one enforcement.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_review_id",
              "type": "uuid",
              "description": "Linked review's {@link ai_mall_review.id} - Associates rating to a specific review.",
              "relation": {
                "name": "review",
                "targetModel": "ai_mall_review"
              },
              "unique": true,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "score",
              "type": "int",
              "description": "[Score value] - Fulfills quantitative feedback. \n\nRepresents the rating score (e.g., 1-5). Atomic, normalized, supports analytics. Example: Reporting average rating at product or channel level. Constraint 1-5 enforced at app/service layer.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created timestamp] - When rating was given. \n\nSupports auditing and analytics timeline. Normalized field only.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "score",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_qna",
          "description": "[Inquiry (Q&A) entity] - Implements 7.4.2. \n\nRepresents product or general inquiries (questions/answers) with snapshot-linking for point-in-time history and audit trails. Maintains 3NF by separating inquiry, user, snapshot, and product info. Example: Customer submits inquiry, seller replies, all edits snapshotted.\n\nKey relationships: ai_mall_user, ai_mall_product, ai_mall_snapshot, ai_mall_qna_comment. Special behaviors: Private/public flag affects visibility; SLA notifications. No computed fields.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_product_id",
              "type": "uuid",
              "description": "Targeted product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Submitting user's {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "snapshot_id",
              "type": "uuid",
              "description": "Current snapshot's {@link ai_mall_snapshot.id}.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "private",
              "type": "boolean",
              "description": "[Privacy flag] - Allows marking inquiry as private. \n\nControls audience per requirements; normalized—no duplicate access fields. E.g., SLA notifications for private inquiries may differ.",
              "nullable": false
            },
            {
              "name": "resolved",
              "type": "boolean",
              "description": "[Resolution flag] - Indicates if inquiry has been resolved.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Creation time] - Timestamp record for audit and SLA.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Update time] - Most recent change to inquiry; history in snapshots.",
              "nullable": false
            },
            {
              "name": "deleted_at",
              "type": "datetime",
              "description": "[Logical deletion timestamp for compliance tracking].",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_product_id",
                "private",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "snapshot_id"
            }
          ]
        },
        {
          "name": "ai_mall_qna_comment",
          "description": "[Inquiry comment entity] - Implements 7.4.2, hierarchical comments/threads.\n\nRepresents comments or replies attached to an inquiry (Q&A), with support for threading via parent_id. Maintains 3NF by separating comment, user, parent, and snapshot info. Example: Threaded discussion under inquiry, each with edit snapshots and moderation support.\n\nKey relationships: ai_mall_qna, ai_mall_user, parent/child relations, ai_mall_snapshot. Special behaviors: Only author or moderator can edit/delete; audit logs are elsewhere.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_qna_id",
              "type": "uuid",
              "description": "Belonged inquiry's {@link ai_mall_qna.id}.",
              "relation": {
                "name": "qna",
                "targetModel": "ai_mall_qna"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "Parent comment's {@link ai_mall_qna_comment.id} (self-reference).",
              "relation": {
                "name": "parent",
                "targetModel": "ai_mall_qna_comment"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Comment author's {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "snapshot_id",
              "type": "uuid",
              "description": "Current state snapshot's {@link ai_mall_snapshot.id}.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Comment creation timestamp].",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Latest update's timestamp].",
              "nullable": false
            },
            {
              "name": "deleted_at",
              "type": "datetime",
              "description": "[If set, comment is logically deleted].",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_qna_id",
                "parent_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "snapshot_id"
            }
          ]
        },
        {
          "name": "ai_mall_favorite_product",
          "description": "[Product favorite entity] - Implements requirements from 7.5.\n\nLinks a user's favorite action to a specific product and snapshot for historical integrity. Normalized structure—no repetitive user/product data. Example: User favorites a product; notification triggers reference this. No denormalized or computed fields. Key relations: user, product, snapshot.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User's {@link ai_mall_user.id} marking favorite.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_product_id",
              "type": "uuid",
              "description": "Favorited product's {@link ai_mall_product.id}.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "snapshot_id",
              "type": "uuid",
              "description": "Snapshot at time of favorite {@link ai_mall_snapshot.id}.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "category",
              "type": "string",
              "description": "[Favorite category] - Categorization (e.g., wishlist, quick buy).\n\nNormalized field for user categorization. Used for filtering notifications and organization, not redundant with other data. Example: 'wishlist'.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Marked timestamp] - When favorite was created. Normalized field only.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id",
                "ai_mall_product_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "category",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_favorite_inquiry",
          "description": "[Inquiry favorite entity] - Implements requirements from 7.5 regarding favoriting inquiries (Q&A).\n\nTracks a user's favorite action for a Q&A entity, storing point-in-time association. Maintains normalization—only atomic values; inquiry, user, snapshot all separated. Used for notifications and user productivity. Key relations: ai_mall_user, ai_mall_qna, ai_mall_snapshot.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User's {@link ai_mall_user.id} marking inquiry as favorite.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_qna_id",
              "type": "uuid",
              "description": "Favorited inquiry's {@link ai_mall_qna.id}.",
              "relation": {
                "name": "qna",
                "targetModel": "ai_mall_qna"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "snapshot_id",
              "type": "uuid",
              "description": "Snapshot at favorite time {@link ai_mall_snapshot.id}.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "category",
              "type": "string",
              "description": "[Favorite category] - e.g., saved, watchlist.\n\nAtomic categorization for query/filter. No derived/redundant info.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Timestamp for favoriting].",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id",
                "ai_mall_qna_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "category",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_favorite_address",
          "description": "[Address favorite entity] - Fulfills requirements from Section 7.5 regarding user address bookmarks.\n\nRecords a user's action to favorite/bookmark a shipping address, including snapshot state for point-in-time recall. Maintains 3NF structure. Example: Used for quick ordering or address book management. Key relations: ai_mall_user, ai_mall_address, ai_mall_snapshot.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User's {@link ai_mall_user.id} marking address as favorite.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_address_id",
              "type": "uuid",
              "description": "Favorited address's {@link ai_mall_address.id}.",
              "relation": {
                "name": "address",
                "targetModel": "ai_mall_address"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "snapshot_id",
              "type": "uuid",
              "description": "Snapshot state {@link ai_mall_snapshot.id} at the point of favoriting.",
              "relation": {
                "name": "snapshot",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "category",
              "type": "string",
              "description": "[Favorite address category] - e.g., home, work, recent.\n\nUser categorization for organization. Normalized atomic value.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Timestamp for favoriting].",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id",
                "ai_mall_address_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "category",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-08-attachment_structure.prisma",
      "namespace": "AttachmentStructure",
      "models": [
        {
          "name": "ai_mall_attachment",
          "description": "Attachment File Entity - This implements requirements from section 8 of the requirements document (Scalability, Attachments, and Structure). \n\nBusiness Purpose: Manages versioned files (images, documents, multimedia) uploaded by users, sellers, or admins, ensuring secure, CDN-integrated, and auditable attachment storage. Supports fast global delivery and secure media access for product images, operational docs, and feedback content. \n\nTechnical Context: Linked by reference from entities needing file attachments, e.g., products, Q&A, reviews, etc. Maintains only atomic, normalized file metadata—versioning handled in a separate table. Complies with 3NF: fields depend only on the primary key.\n\nUsage Example: Upload product images, attach docs to Q&A, or reviews.\nSpecial behaviors: Never physically deleted; logical deletion only via separate log or soft-delete mechanism.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique identifier for each attachment."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "file_name",
              "type": "string",
              "description": "Original file name, except extension. Implements source metadata requirement. Fully normalized, atomic value. E.g., 'receipt', 'photo1'.",
              "nullable": false
            },
            {
              "name": "extension",
              "type": "string",
              "description": "File extension (type indicator). Implements format handling requirements. E.g., 'jpg', 'pdf'. Null if unknown. Ensures atomicity and normalization.",
              "nullable": true
            },
            {
              "name": "uploader_actor_id",
              "type": "uuid",
              "description": "Uploader's (user, seller, admin) reference, fulfilling audit requirement and traceability. Normalized, atomic identity value. Used for legal evidence and actor trace.",
              "nullable": false
            },
            {
              "name": "url",
              "type": "uri",
              "description": "Secure CDN URL for the file. Satisfies requirement for scalable global delivery and CDN integration. Atomic, 3NF compliant; never derived data.",
              "nullable": false
            },
            {
              "name": "filesize",
              "type": "int",
              "description": "File size in bytes. Implements validation and restriction logic, as per requirements. Used for enforcing attachment policy. Fully normalized value.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Attachment creation time. Implements auditability and snapshot requirement. Never null. 3NF-compliant atomic timestamp.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "uploader_actor_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "file_name"
            }
          ]
        },
        {
          "name": "ai_mall_attachment_version",
          "description": "Attachment Versioning - Implements the secure, versioned file storage requirement from section 8, providing immutable file history for audit, rollback, and traceability.\n\nBusiness Purpose: Preserves every version of an uploaded file, supporting legal integrity and operational rollback. Maintains separation from main metadata: normalization is ensured—versions are not stored in the main attachment table.\n\nTechnical Context: Linked to ai_mall_attachment via foreign key. Used for evidence-grade restoration or inspection, e.g., in disputes or configuration rollbacks.\n\nUsage: Retrieving older or specific file versions, validating upload history for compliance.\nSpecial behaviors: No hard deletion, full historical audit required.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique version identifier."
          },
          "foreignFields": [
            {
              "name": "ai_mall_attachment_id",
              "type": "uuid",
              "description": "Referenced attachment's {@link ai_mall_attachment.id}. Implements the relationship to current versioned file metadata.",
              "relation": {
                "name": "attachment",
                "targetModel": "ai_mall_attachment"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "url",
              "type": "uri",
              "description": "CDN URL for this specific file version. Implements requirement for secure, point-in-time restoration. Atomic and uniquely tied to this version record.",
              "nullable": false
            },
            {
              "name": "filesize",
              "type": "int",
              "description": "File size for this version. Required for validation, operations, compliance tracing. E.g., to track file history and detect anomalies; fully normalized.",
              "nullable": false
            },
            {
              "name": "hash",
              "type": "string",
              "description": "Hash of file contents. Implements file integrity verification per security and compliance requirements. Atomic and unique to this version.",
              "nullable": false
            },
            {
              "name": "version_index",
              "type": "int",
              "description": "Monotonic version number (starting from 1 for each attachment). 3NF: depends only on PK and referenced attachment. Ensures version ordering and is used in restoration logic. E.g., version_index=1 is the earliest version.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation time of this version. Required for event audit, rollback, and timeline evidence. Never derived.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_attachment_id",
                "version_index"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_attachment_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_snapshot_log",
          "description": "System-wide Snapshot Change Log - Implements the audit, evidence, and rollback requirements from section 8 and 9.\n\nBusiness Purpose: Logs all significant data mutations (create, update, delete) as immutable records for auditability and legal trace. Stores who, what, when, and why for each change in a fully normalized table, supporting 3NF.\n\nTechnical Context: Used to reconstruct entity histories, analyze change events, and support compliance inquiries. No calculated or denormalized data; records reference only atomic/log data.\n\nExample Usage: Regulatory inquiry reconstructs a product's change history.\nSpecial behaviors: No hard deletion; logical only. Serves as legal evidence with integrity guarantees.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique log entry identifier."
          },
          "foreignFields": [
            {
              "name": "actor_id",
              "type": "uuid",
              "description": "Actor's responsible user's {@link ai_mall_user.id} or operator's identity. Ensures accountability. Fully normalized; never null.",
              "relation": {
                "name": "actor",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "target_entity_id",
              "type": "uuid",
              "description": "Reference to the changed record's id—the entity snapshot/logged. Used for traceability. Normalized; never null.",
              "relation": {
                "name": "target_entity",
                "targetModel": "ai_mall_snapshot"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "entity_type",
              "type": "string",
              "description": "Type (table/model name) of mutated entity. Implements requirement for entity-agnostic auditing. E.g., 'ai_mall_product', 'ai_mall_attachment'. Normalized; atomic.",
              "nullable": false
            },
            {
              "name": "operation",
              "type": "string",
              "description": "Operation type: 'create', 'update', 'delete', etc. Implements the legal evidence logic for detail granularity. 3NF: atomic mutation type.",
              "nullable": false
            },
            {
              "name": "change_description",
              "type": "string",
              "description": "Human-readable summary of change. Implements the compliance requirement for audit clarity. E.g., 'price changed from 10 to 15'. Atomic, single fact, not denormalized.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Change log timestamp. Provides event ordering and audit integrity.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "actor_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "target_entity_id",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "change_description"
            }
          ]
        },
        {
          "name": "ai_mall_structure_file_cdn",
          "description": "CDN File Metadata - Implements section 8 (Attachment System) requirements: providing reference and storage information for files managed across the mall, directly mapping to CDN policies and global delivery settings.\n\nBusiness Purpose: Stores atomic, 3NF-compliant data on CDN provider, physical storage key, security/access logic, and file life cycle status. Used by attachment and other entities referencing files held in CDN. Enables fast lookup, rotation, and CDN eviction logic.\n\nTechnical Context: Consumed by the main attachment and attachment_version tables. Not a denormalized cache—never stores derived, calculated, or aggregated data.\n\nExample Usage: Rotating CDN providers, managing file purge/restore, and policy tuning.\nSpecial behaviors: Logical deletion only. Each row is atomic per CDN resource.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique CDN file reference."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "cdn_provider",
              "type": "string",
              "description": "Name of CDN provider (e.g., 'Cloudflare', 'Akamai'). Implements auditable external dependency info. Ensures normalization and atomic info per file.",
              "nullable": false
            },
            {
              "name": "cdn_key",
              "type": "string",
              "description": "Physical CDN object key. Implements the attachment system's direct referencing logic. Atomic, non-derived, and unique per CDN object.",
              "nullable": false
            },
            {
              "name": "access_control",
              "type": "string",
              "description": "CDN/file access policy (public, private, signed-url, etc). Auditable config. Normalized config, atomic value.",
              "nullable": false
            },
            {
              "name": "active",
              "type": "boolean",
              "description": "Is this CDN file currently in use (not evicted or archived)? Implements the policy logic for availability control. Atomic and auditable.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Record creation time, used for auditing. Ensures time-series evidence continuity.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "cdn_provider",
                "cdn_key"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "cdn_provider"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_section_config",
          "description": "Section Configuration Entity - Implements section and merchandising structure configuration per requirements in section 8 (Section Management for Merchandising).\n\nBusiness Purpose: Stores atomic display/config settings (sort order, rotation, priority, campaign, etc) for sections within channels. Used for data-driven merchandising, featured displays, or merchandising A/B tests. Fully 3NF: each config is atomic to the section.\n\nTechnical Context: References ai_mall_section and ai_mall_channel for structure, never storing aggregate/reporting data. Used by the front-end for logic on merchandising visibility and scheduling.\n\nUsage: Prioritizing sections, campaign scheduling, or toggling seasonal displays.\nSpecial behaviors: No denormalized data; supports dynamic management only in this normalized form.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique config row."
          },
          "foreignFields": [
            {
              "name": "ai_mall_section_id",
              "type": "uuid",
              "description": "Belongs to section's {@link ai_mall_section.id}. Core to mapping per-section config. Atomic FK reference.",
              "relation": {
                "name": "section",
                "targetModel": "ai_mall_section"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_channel_id",
              "type": "uuid",
              "description": "References channel {@link ai_mall_channel.id}. Enables per-channel config logic. Ensures normalization and atomicity.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "sort_priority",
              "type": "int",
              "description": "Ordering logic in display. Implements merchandising logic as required; atomic and non-derived value.",
              "nullable": false
            },
            {
              "name": "display_rotation_policy",
              "type": "string",
              "description": "Policy determinant for display rotation (e.g., daily, on-visit, campaign). Implements flexible visibility per requirements. 3NF: atomic config value, no logic embedded.",
              "nullable": false
            },
            {
              "name": "campaign_code",
              "type": "string",
              "description": "Optional campaign reference or code for analytics/scheduling use. Maintains normalization (nullable field example).",
              "nullable": true
            },
            {
              "name": "active",
              "type": "boolean",
              "description": "Whether this configuration is active for the section in the given channel. Merchandising control requirement. Atomic flag.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Config record creation time. Implements auditing and event tracing. 3NF-compliant atomic timestamp.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_section_id",
                "ai_mall_channel_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "ai_mall_channel_id"
              ]
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-09-security_compliance.prisma",
      "namespace": "SecurityCompliance",
      "models": [
        {
          "name": "ai_mall_audit_log",
          "description": "System audit log - This implements requirement 9.2/9.5 from the Security & Compliance requirements documentation.\n\nCaptures all critical system activities for traceability, forensic evidence, and regulatory audit. Maintains 3NF normalization by storing event details, actor, and source data separately and referencing core entities only by foreign keys. For example, logging an admin privilege escalation or user data view.\n\nKey relationships: links to user, session, and organization entities by their IDs (foreign keys). Special behaviors: never hard-deleted, supports legal evidence retention policies.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Actor user's {@link ai_mall_user.id}.\nRecords the user/entity responsible for the change for accountability.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_session_id",
              "type": "uuid",
              "description": "Session identifier {@link ai_mall_session.id}.\nLinks this log to the session context for forensics or breach analysis.",
              "relation": {
                "name": "session",
                "targetModel": "ai_mall_session"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "event_type",
              "type": "string",
              "description": "Type of event (e.g., CREATE, UPDATE, DELETE, ACCESS, ERROR) - Implements event traceability.\nAtomic, non-derived value representing the core business action. For example, access log for GDPR compliance.\nConstraint: Enum style enforced at application/service level.",
              "nullable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Audit event description - Implements detailed context per compliance requirements.\nFree text description; unstructured data is 3NF compliant as long as not derived from other tables.\nFor example: 'User promoted to admin.'",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp event was recorded - Implements audit log retention policy.\nAtomic timestamp per log. Ensures normalization and regulatory traceability. For example, breach event at time X.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "description"
            }
          ]
        },
        {
          "name": "ai_mall_event_log",
          "description": "Event log for security and business processes - Implements 9.2, 9.6 from requirements.\n\nRecords all key business/system events (not just changes) for a legally sound, atomic audit trail—separates event data from the business entity state (3NF compliant). For example, password reset, new device login.\n\nKey relationships: may relate to organization, user, or session.\nSpecial behaviors: immutable, strictly append-only.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "Linked user's {@link ai_mall_user.id}.\nThe trigger actor for this event, if applicable.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "ai_mall_organization_id",
              "type": "uuid",
              "description": "Related organization {@link ai_mall_organization.id}.\nScope for multi-tenant situations.",
              "relation": {
                "name": "organization",
                "targetModel": "ai_mall_organization"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "event_code",
              "type": "string",
              "description": "Atomic event code (e.g., PASSWORD_RESET, LOGIN_ATTEMPT) - Business process mapping.\nCritical for reporting and evidence generation, 3NF; not calculated.\nExample: PASSWORD_RESET for a security operation.",
              "nullable": false
            },
            {
              "name": "event_detail",
              "type": "string",
              "description": "Structured event data in JSON or text - contextualizes the event for compliance or forensics.\nFor example, IP or metadata for an advanced login event; attribute-level granularity, not a calculated summary.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Exact event time - Implements requirements re: retention and temporal recordkeeping.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "event_code",
                "created_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "event_detail"
            }
          ]
        },
        {
          "name": "ai_mall_data_deactivation",
          "description": "Logical deactivation state - Implements requirement 9.2 and 9.5.\n\nTracks logics-only (never physical) deletion and the deactivated_at record for audit/compliance. Maintains 3NF by referencing only involved entity/link, without duplicating core data.\n\nExample: When a user, product, or content is deactivated rather than deleted.\nKey relationships: links to any entity by external reference pattern.\nSpecial behaviors: Only one row per entity row subject to deactivation.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "deactivated_by_user_id",
              "type": "uuid",
              "description": "User's {@link ai_mall_user.id} marking the row as deactivated.",
              "relation": {
                "name": "deactivated_by",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "entity_name",
              "type": "string",
              "description": "Name of the entity (e.g., ai_mall_product, ai_mall_user) - entity-level normalization.\nNot derived; atomic representation. For example: ai_mall_bulletin_review for review deactivation.",
              "nullable": false
            },
            {
              "name": "entity_id",
              "type": "uuid",
              "description": "ID of the deactivated row in the target entity table - Implements external reference normalization.\nLinks only by type/id; does not denormalize entity data.\nExample: id of logically deleted user.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Timestamp of deactivation - 3NF normalized event point.",
              "nullable": false
            },
            {
              "name": "deactivation_reason",
              "type": "string",
              "description": "Free-text or enum reason log - atomic (not derived). For example, fraud-suspected or GDPR-request.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "entity_name",
                "entity_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "deactivated_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "deactivation_reason"
            }
          ]
        },
        {
          "name": "ai_mall_permission_audit",
          "description": "RBAC and permission change audit - Implements strict audit of access rights and escalation trails per 9.4, 9.5, 9.6.\n\nCaptures each granted/revoked permission for traceability, following strict normalization and referencing only affected entities.\n\nExample: Admin grants product-edit to a seller role.\nKey relationships: links to user, role, and permission entities.\nSpecial behaviors: append-only, permanent record.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User being granted or revoked permission {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_role_id",
              "type": "uuid",
              "description": "Linked role {@link ai_mall_role.id} for which permission change occurs.",
              "relation": {
                "name": "role",
                "targetModel": "ai_mall_role"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_permission_id",
              "type": "uuid",
              "description": "Linked permission {@link ai_mall_permission.id} affected.",
              "relation": {
                "name": "permission",
                "targetModel": "ai_mall_permission"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "action",
              "type": "string",
              "description": "Atomic action ('GRANT', 'REVOKE') - Not derived, enum enforced at application/domain service.\nExample: 'GRANT' when role gains new permission.",
              "nullable": false
            },
            {
              "name": "granted_by_user_id",
              "type": "uuid",
              "description": "Admin/user {@link ai_mall_user.id} who performed the grant or revoke - reference to separate actor (not derived).\n3NF—never encoded in 'action'.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp of grant or revoke event - standalone, not calculated.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_privacy_consent",
          "description": "GDPR/CCPA Privacy Consent Tracking - Implements 9.3, 11, global privacy law traceability.\n\nTracks explicit user opt-in, withdrawal, and versioning per requirement. Maintains 3NF by referencing only user, channel, and versioned consent form records.\n\nExample: User opt-in to marketing consent v2.0 for web channel.\nKey relationships: links to user, channel, and consent_version.\nSpecial behaviors: append-only, legally critical for export.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User's {@link ai_mall_user.id} giving or withdrawing consent.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "ai_mall_channel_id",
              "type": "uuid",
              "description": "Channel/context of consent {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "consent_type",
              "type": "string",
              "description": "Atomic (e.g., MARKETING, TERMS) - not derived. For legal lookup.\nExample: MARKETING for promotional consent.",
              "nullable": false
            },
            {
              "name": "consent_version",
              "type": "string",
              "description": "Version string of consent document - immutable atomic log.\n3NF: Separate doc versions, not derived. Example: 'v2.0'",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Explicit 'GRANTED' or 'WITHDRAWN' (not derived) - 3NF compliant.\nExample: 'WITHDRAWN' for privacy opt-out.",
              "nullable": false
            },
            {
              "name": "recorded_at",
              "type": "datetime",
              "description": "Timestamp consent recorded - single atomic value; no derivation.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "ai_mall_user_id",
                "consent_type",
                "consent_version"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_security_alert",
          "description": "Security alert/event log - Implements 9.7/9.8 for Security Operations.\n\nCaptures security events, incidents, and escalations for review and automated or manual intervention. Maintains 3NF by splitting alert type, context, and trace.\n\nExample: Repeated failed login, suspicious session, large export operation.\nKey relationships: may link to user, session, or organization.\nSpecial behaviors: feeds into automated alerting dashboard.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "ai_mall_user_id",
              "type": "uuid",
              "description": "User associated with alert {@link ai_mall_user.id}.\n3NF separation from base event.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "ai_mall_organization_id",
              "type": "uuid",
              "description": "Organization scope {@link ai_mall_organization.id} for alert visibility.",
              "relation": {
                "name": "organization",
                "targetModel": "ai_mall_organization"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "alert_type",
              "type": "string",
              "description": "Critical type (e.g., ANOMALY, BREACH, EXPORT) - atomic field, not derived.\nEnforced via enum at the service layer.",
              "nullable": false
            },
            {
              "name": "alert_context",
              "type": "string",
              "description": "Alert details, e.g. IP address, entity reference, reason - atomic.\nFor SIEM/log analytics. Not derived from other tables.",
              "nullable": false
            },
            {
              "name": "detected_at",
              "type": "datetime",
              "description": "Timestamp when alert detected - atomic point in time; 3NF compliant.",
              "nullable": false
            },
            {
              "name": "resolved_at",
              "type": "datetime",
              "description": "Timestamp of alert resolution, if applicable.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "alert_type",
                "detected_at"
              ]
            }
          ],
          "ginIndexes": [
            {
              "fieldName": "alert_context"
            }
          ]
        },
        {
          "name": "ai_mall_role_hierarchy",
          "description": "Role hierarchy/rule definition - Implements 9.4, 9.5 for RBAC, permission boundary control.\n\nRepresents parent-child relations between roles for access inheritance and policy enforcement. Maintains 3NF by linking only the involved roles.\n\nExample: 'admin' role inherits from 'seller'.\nKey relationships: parent/child roles (recursive self-reference).\nSpecial behaviors: prevents circular dependency via validation.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "parent_role_id",
              "type": "uuid",
              "description": "Parent role's {@link ai_mall_role.id}.\nRole from which permissions are inherited.",
              "relation": {
                "name": "parent_role",
                "targetModel": "ai_mall_role"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "child_role_id",
              "type": "uuid",
              "description": "Child role's {@link ai_mall_role.id}.\nRole inheriting permissions from parent.",
              "relation": {
                "name": "child_role",
                "targetModel": "ai_mall_role"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "parent_role_id",
                "child_role_id"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-10-extensibility_ai.prisma",
      "namespace": "ExtensibilityAI",
      "models": [
        {
          "name": "ai_mall_api_integration",
          "description": "API Integration - This implements integration and orchestration requirements from '10. Extensibility, Optimization, and AI Integration'.\n\nServes as the central registry and control table for all external and internal API connections (payment gateways, logistics APIs, AI services, etc.), storing credentials, configuration, status, and linkage to versioning. Maintains 3NF compliance by referencing external service and API version by foreign keys, decoupling integration-specific metadata. For example, new integrations or credential rotations are auditable here.\n\nKey relationships: Relates to ai_mall_external_service and ai_mall_api_version. Used by orchestration and monitoring systems.\nSpecial behaviors: All credentials/token fields are encrypted and updated only via secure admin flows. Logical deletion via deactivated_at timestamp.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Unique integration identifier."
          },
          "foreignFields": [
            {
              "name": "external_service_id",
              "type": "uuid",
              "description": "Belonged external service's {@link ai_mall_external_service.id}. Specifies which external system (API, SaaS, etc.) this integration targets.",
              "relation": {
                "name": "external_service",
                "targetModel": "ai_mall_external_service"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "api_version_id",
              "type": "uuid",
              "description": "Used API version's {@link ai_mall_api_version.id}. Links this integration instance to a specific version for compatibility and auditing.",
              "relation": {
                "name": "api_version",
                "targetModel": "ai_mall_api_version"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "Integration name - Human readable identifier assigned by admin.",
              "nullable": false
            },
            {
              "name": "configuration",
              "type": "string",
              "description": "Integration specific configuration (JSON string, encrypted). Contains credentials, endpoints, and settings.",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Current integration status. e.g., active, error, deactivated, pending review.",
              "nullable": false
            },
            {
              "name": "last_sync_at",
              "type": "datetime",
              "description": "Timestamp of the last successful sync or operation via the API integration.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation timestamp for audit traceability.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Timestamp for logical deactivation to comply with evidence/legal requirements. Data remains for compliance.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "name"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "external_service_id",
                "api_version_id"
              ]
            },
            {
              "fieldNames": [
                "status"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_external_service",
          "description": "External Service - Implements 'Integration/Orchestration' requirements from section 10.2 and 10.4.\n\nDefines each distinct external system (SaaS, payment services, logistics, AI modules, etc.) with type, endpoint, and connectivity configuration at the service boundary. Maintains unique service registration and descriptive metadata in strict 3NF. For example, a Stripe instance, SendGrid, or a custom AI module. Used for monitoring, orchestration, credential rotation, and auditing.\n\nKey relationships: Many integrations (ai_mall_api_integration) reference this; version management and logs relate via other tables.\nSpecial behaviors: Renaming/disabling a service affects related integrations only through reference update, not by duplicating data.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "type",
              "type": "string",
              "description": "Type of external service. e.g., payment, logistics, AI, email, analytics.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Display name for the external service.",
              "nullable": false
            },
            {
              "name": "endpoint",
              "type": "uri",
              "description": "Base URI for external API endpoint.",
              "nullable": true
            },
            {
              "name": "metadata",
              "type": "string",
              "description": "Optional JSON metadata providing additional service details or configuration.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Creation time for compliance/audit.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "Logical deactivation. Used for audit/compliance — never hard deleted.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "type",
                "name"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_api_version",
          "description": "API Version - Implements the API versioning strategy in 'Extensibility Architecture' (section 10.2).\n\nDefines explicit versions for API contracts or integration points, enabling backward compatibility, migration, and deprecation/retirement tracking. Normalizes versioning by separating it structurally from integrations/services. For example, v1, v1.2, v2-beta deployments for a payment gateway or partner connection.\n\nKey relationships: Referenced by ai_mall_api_integration. Historical integration logs and change management depend on version history.\nSpecial behaviors: Version transitions are tracked and referenced but not duplicated in integration records.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "service_type",
              "type": "string",
              "description": "Service type to which this version applies. e.g., payment, ai, logistics.",
              "nullable": false
            },
            {
              "name": "version",
              "type": "string",
              "description": "Version identifier (e.g., v1, v2.1, main, beta).",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Status of the API version (active, deprecated, in testing, etc.).",
              "nullable": false
            },
            {
              "name": "release_notes",
              "type": "string",
              "description": "Release notes or changelog (optional).",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "Timestamp for when version was registered.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "service_type",
                "version"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "status"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_integration_log",
          "description": "Integration Log - Implements compliance, traceability, and analytics requirements from 10.2, 10.3, and 10.4.\n\nStores event/audit logs for each API integration interaction — when an API is invoked, data exchanged, or errors occurred. Implements immutable logs for troubleshooting, auditing, and regulatory evidence. Strict normalization: no derived status fields, all snapshots go here. For example, tracking errors, synchronization events, credential access, etc.\n\nKey relationships: Each log line references a specific ai_mall_api_integration and its triggering user.\nSpecial behaviors: Event data is immutable after insertion and timestamped at creation.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "api_integration_id",
              "type": "uuid",
              "description": "Associated integration's {@link ai_mall_api_integration.id} for this log event.",
              "relation": {
                "name": "api_integration",
                "targetModel": "ai_mall_api_integration"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "triggered_by_user_id",
              "type": "uuid",
              "description": "Triggering user’s {@link ai_mall_user.id} – which user (admin, seller, system) performed or initiated this integration event.",
              "relation": {
                "name": "triggered_by_user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "event_type",
              "type": "string",
              "description": "Type of event. e.g., sync, error, auth, credential_update, deprecation, etc.",
              "nullable": false
            },
            {
              "name": "event_data",
              "type": "string",
              "description": "Event payload (JSON string with event context, sanitized for PII if required).",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "When the log was created (audit/compliance).",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "api_integration_id",
                "created_at"
              ]
            },
            {
              "fieldNames": [
                "event_type"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_ai_personalization",
          "description": "AI Personalization - Implements requirements for embedded AI modules, specifically personal recommendations from section 10.4 and analytics from others.\n\nRecords executions and model state for the system’s AI personalization engine (recommendation system, personalization context for user and channel). Maintains strict normalization by storing only referenceable facts: user, channel, personalization context, timestamp, not recommendations themselves (which are generated on demand or materialized separately). e.g., when an AI recommendation is generated for a user’s homepage based on recent activity.\n\nKey relationships: References ai_mall_user and ai_mall_channel. Other modules (like mv_recommendation) may materialize computed data for fast UI.\nSpecial behaviors: Used as audit proof for what context was seen by each recommendation engine at each time.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Target user’s {@link ai_mall_user.id} for personalization execution.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel’s {@link ai_mall_channel.id} — which channel context applied.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "context",
              "type": "string",
              "description": "Personalization context (e.g., current session behavior, analytics features input to AI, snapshot at execution time, JSON string).",
              "nullable": false
            },
            {
              "name": "execution_time",
              "type": "datetime",
              "description": "Timestamp when this personalization inference/execution occurred.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "channel_id",
                "execution_time"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_ai_fraud_score",
          "description": "AI Fraud Score - Implements fraud detection, risk scoring, and compliance requirements from section 10.4 and 10.6.\n\nTracks each AI-powered risk analysis event: user, transaction, fraud score, and context snapshot. Strict 3NF: Stores atomic facts (entities, score, logic input, and metadata), not calculated aggregates. For example, each transaction flagged or scored by the AI model with context and result.\n\nKey relationships: References user (ai_mall_user), transaction (ai_mall_payment_transaction), and channel.\nSpecial behaviors: Used for compliance reviews and model evolution analysis, not for immediate UI. Scores are not overwritten; new scoring events are inserted for history.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User’s {@link ai_mall_user.id} under risk analysis.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "transaction_id",
              "type": "uuid",
              "description": "Related payment transaction’s {@link ai_mall_payment_transaction.id}.",
              "relation": {
                "name": "transaction",
                "targetModel": "ai_mall_payment_transaction"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel’s {@link ai_mall_channel.id} in fraud analysis context.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "score",
              "type": "double",
              "description": "Risk score output by the AI model at event time.",
              "nullable": false
            },
            {
              "name": "score_context",
              "type": "string",
              "description": "JSON-encoded AI model input/context for transparency/audit (no PII).",
              "nullable": false
            },
            {
              "name": "model_version",
              "type": "string",
              "description": "Which fraud model/version performed the scoring.",
              "nullable": false
            },
            {
              "name": "analyzed_at",
              "type": "datetime",
              "description": "Time fraud scoring executed for compliance timeline.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "transaction_id",
                "analyzed_at"
              ]
            },
            {
              "fieldNames": [
                "score"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_dynamic_pricing",
          "description": "Dynamic Pricing - Implements dynamic AI pricing event requirements from section 10.4.\n\nStores each AI-generated pricing event execution. Strict normalization: links to product, channel, logic context, proposed price, and event timestamp. Used for audit, monitoring, and review – actual price changes are stored in related product snapshot/history tables, not here. e.g., when the AI engine proposes a new dynamic price for a SKU in a channel at a given time.\n\nKey relationships: References product, channel, and the AI engine version. Other modules consume this for pricing analytics or compliance.\nSpecial behaviors: Does not overwrite – each event is a distinct immutable record. Subject to review before price is published.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "product_id",
              "type": "uuid",
              "description": "Product’s {@link ai_mall_product.id} for which price is calculated.",
              "relation": {
                "name": "product",
                "targetModel": "ai_mall_product"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel’s {@link ai_mall_channel.id} where price is effective.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "proposed_price",
              "type": "double",
              "description": "The dynamically computed price for this event (audit only; not enforced).",
              "nullable": false
            },
            {
              "name": "context",
              "type": "string",
              "description": "JSON describing model input/context (stock, competitor, timing, etc.).",
              "nullable": false
            },
            {
              "name": "ai_engine_version",
              "type": "string",
              "description": "AI pricing model version invoked for the computation.",
              "nullable": false
            },
            {
              "name": "executed_at",
              "type": "datetime",
              "description": "Time when the price was computed.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "product_id",
                "channel_id",
                "executed_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_ai_sentiment",
          "description": "AI Sentiment - Implements requirement for sentiment analysis (section 10.4 and 7.4.3 moderation analytics).\n\nStores each AI-powered sentiment analysis event and result with reference to the analyzed content (review, inquiry, feedback) and the snapshot context. Follows 3NF: atomic record of event, level, context, and metadata, not aggregates. For example, when the AI analysis flags a review as negative or requests moderation.\n\nKey relationships: Stores content_type/id for decoupled linking; may reference bulletin_review, bulletin_comment, etc.\nSpecial behaviors: All events logged, analysis is immutable. Useful for compliance, moderation, and model effectiveness tuning.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "content_type",
              "type": "string",
              "description": "Type of content analyzed, e.g., review, comment, inquiry. Polymorphic linking.",
              "nullable": false
            },
            {
              "name": "content_id",
              "type": "uuid",
              "description": "Referenced content object (review, comment, etc.) unique ID.",
              "nullable": false
            },
            {
              "name": "sentiment_level",
              "type": "string",
              "description": "AI-determined result (e.g., positive, negative, neutral, flagged-for-review).",
              "nullable": false
            },
            {
              "name": "confidence",
              "type": "double",
              "description": "Model confidence score for sentiment prediction.",
              "nullable": false
            },
            {
              "name": "model_version",
              "type": "string",
              "description": "Reference to AI model version used.",
              "nullable": false
            },
            {
              "name": "analyzed_at",
              "type": "datetime",
              "description": "Timestamp of analysis.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "content_type",
                "content_id",
                "analyzed_at"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_mv_recommendation",
          "description": "@hidden Materialized View: AI Mall Recommendations - Implements performance and reporting needs for real-time personalized recommendations as required in 10.4, 10.5, etc.\n\nCaches precomputed AI recommendations for users/channels for fast UI and analytics. Strict denormalization: aggregates latest personalization model output for each (user, channel, date) combination. For example, this allows homepages to load tailored recommendations quickly without re-running models at each request.\n\nKey relationships: References user (ai_mall_user), channel (ai_mall_channel). Populated on schedule by AI batch jobs.\nSpecial behaviors: Read-only. All computed/aggregate fields are only here, never in ai_mall_ai_personalization. Populated by AI batch jobs or ETL.",
          "material": true,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User for whom these recommendations are valid. {@link ai_mall_user.id}",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel context {@link ai_mall_channel.id} for recommendations.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "recommendations",
              "type": "string",
              "description": "JSON-encoded list of recommended product IDs or bundle data. Denormalized for realtime use.",
              "nullable": false
            },
            {
              "name": "generated_at",
              "type": "datetime",
              "description": "When recommendations were generated/batched.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "user_id",
                "channel_id",
                "generated_at"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "recommendations"
            }
          ]
        }
      ]
    },
    {
      "filename": "schema-11-legal_global.prisma",
      "namespace": "LegalGlobal",
      "models": [
        {
          "name": "ai_mall_compliance_audits",
          "description": "[Compliance audit event logging] - This implements logging of all business and system operations, supporting GDPR, CCPA, PCI DSS, and regional compliance standards, per section 9 of the requirement analysis (Security, Compliance, and Legal Readiness). \n\nRecords all actions as immutable events for full traceability. Maintains 3NF compliance by separating audit events from business data and avoiding any derived attributes. For example, when a user requests data export or when a legal investigation is triggered, an audit log event is created.\n\nKey relationships: references users and snapshots (by their UUID, if present).\nSpecial behaviors: No physical deletion, only logical deactivation; supports evidence-based audits.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key. Used as the unique identifier for each audit event record."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User's {@link ai_mall_user.id} responsible for or affected by this audit event. Implements compliance traceability requirement.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "event_type",
              "type": "string",
              "description": "[Event type] - Implements the event/action identification per compliance framework requirements (e.g., GDPR data export, access, erasure, etc.). Atomic string value, fully normalized. Example: 'gdpr_access_request', 'deactivation'.",
              "nullable": false
            },
            {
              "name": "context",
              "type": "string",
              "description": "[Contextual details] - Describes the event context, such as affected records, parameters, or legal justification. Used in audits or dispute reviews. Ensures atomicity by storing as a string, not embedded objects.",
              "nullable": true
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Audit event timestamp] - Time of event capture. Required for legal evidence (compliance timestamp). Normalized to a single event occurrence.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Logical deactivation] - Timestamp when the audit log is logically removed (not physically deleted). Enables permanent audit log with selective visibility.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "event_type",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_legal_export_requests",
          "description": "[Legal data export requests] - Implements logs and requests for the system's self-service legal export features (e.g., GDPR/CCPA export rights), as described in Legal & Global Readiness.\n\nAllows compliance admins and users to request data exports, tracked with full event status. Maintains full normalization by recording only request state, not aggregating user data into this table. For example, a user clicking 'download my data'.\n\nKey relationships: links to user table.\nSpecial behaviors: Status tracking for export lifecycle, permanent recordation for audits.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Requesting user's {@link ai_mall_user.id}. Fulfills compliance traceability for export events.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "requested_at",
              "type": "datetime",
              "description": "[Request creation timestamp] - When the data export was requested. Normalized atomic timestamp.",
              "nullable": false
            },
            {
              "name": "processed_at",
              "type": "datetime",
              "description": "[Processing completion timestamp] - When the data export was fulfilled, if applicable. Retains normalization by separating states.",
              "nullable": true
            },
            {
              "name": "status",
              "type": "string",
              "description": "[Request status] - Current status (e.g., 'pending', 'processing', 'completed', 'failed'). Atomic value enforcing normalization. For example, status transitions within export flows.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Logical deactivation timestamp] - When the export request was logically deleted (never physically removed).",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "status"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_gdpr_logs",
          "description": "[GDPR log tracking] - Implements GDPR-specific logging of data access, erasure, consent, and export events as needed by international and regional compliance regulations (Legal & Global Readiness).\n\nTracks each GDPR-related user event as a stand-alone record. Maintains 3NF compliance by not duplicating personal data, but only referencing by foreign key and event string. For example, tracking a right-to-be-forgotten invocation.\n\nKey relationships: references user.\nSpecial behaviors: Permanent audit log, no physical deletion; logical deactivation only.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "User concerned by GDPR event. Maps to {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "gdpr_event_type",
              "type": "string",
              "description": "[Type of GDPR event] - E.g., 'consent_withdrawal', 'access_export', 'erasure_request'. Atomic for normalization.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Event timestamp] - When GDPR-related action occurred.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Logical deactivation timestamp]. Marks logical deletion, not physical.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "gdpr_event_type",
                "created_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_tax_documents",
          "description": "[Tax documentation & export] - Implements international and cross-border tax reporting support as per Legal Readiness requirements. Records all documents generated for tax, compliance, or regulatory filing. \n\nMaintains normalized record of tax docs with foreign keys for region/currency. For example, creating a VAT receipt for an EU purchase. 3NF enforced—does not duplicate transactional records.\n\nKey relationships: references region, currency, and user.\nSpecial behaviors: File attachment linking (if needed), logical deletion only.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Associated user, if endpoint is user-triggered; nullable for automatic batch files. References {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "region_id",
              "type": "uuid",
              "description": "Region for which the tax document applies. References {@link ai_mall_regions.id}.",
              "relation": {
                "name": "region",
                "targetModel": "ai_mall_regions"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "currency_id",
              "type": "uuid",
              "description": "Currency for the receipt or report. References {@link ai_mall_currencies.id}.",
              "relation": {
                "name": "currency",
                "targetModel": "ai_mall_currencies"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "type",
              "type": "string",
              "description": "[Tax document type] - Invoice, VAT receipt, customs declaration. Atomic string for legal reporting. For example: 'vat_invoice', 'us_sales_tax', 'customs_form'.",
              "nullable": false
            },
            {
              "name": "doc_number",
              "type": "string",
              "description": "[Document number] - Official reference identifier, unique for filing. Atomic; normalization preserved.",
              "nullable": false
            },
            {
              "name": "issued_at",
              "type": "datetime",
              "description": "[Issue timestamp] - When the document was generated.",
              "nullable": false
            },
            {
              "name": "file_url",
              "type": "uri",
              "description": "[File location] - Secure URL, if file-based record exists. Atomic URI value, not embedded content.",
              "nullable": true
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Logical deletion mark] - Retains record after effective data removal. Not physically deleted.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "doc_number"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "region_id",
                "issued_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_digital_contracts",
          "description": "[Digital contracts/e-signatures] - Implements full audit and record of digital agreements (eg, terms acceptance, order acknowledgment), as required in Legal Readiness doc (section 8-11). \n\nEvery contract agreement—timestamped, versioned, and traceable—facilitates dispute resolution and guarantees legal enforceability. Maintains normalization with foreign keys (user, region, contract_type), no duplication of user or contract details.\n\nKey relationships: references user and region.\nSpecial behaviors: Record is never physically deleted; only logically deactivated.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "user_id",
              "type": "uuid",
              "description": "Party (user) accepting/agreement. References {@link ai_mall_user.id}.",
              "relation": {
                "name": "user",
                "targetModel": "ai_mall_user"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "region_id",
              "type": "uuid",
              "description": "Region in which contract is effective. References {@link ai_mall_regions.id}.",
              "relation": {
                "name": "region",
                "targetModel": "ai_mall_regions"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "contract_type",
              "type": "string",
              "description": "[Type of digital contract] - 'terms_acceptance', 'order_acceptance', 'privacy_policy'. Only atomic type string, normalized against contract text library.",
              "nullable": false
            },
            {
              "name": "contract_version",
              "type": "string",
              "description": "[Version tag of the contract text] - e.g., 'v2.1-2024-06'. Allows granular tracking of agreement against evolving legal documents.",
              "nullable": false
            },
            {
              "name": "accepted_at",
              "type": "datetime",
              "description": "[Agreement timestamp] - When user accepted/agreed to contract.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Logical deletion timestamp].",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "user_id",
                "contract_type",
                "accepted_at"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_localizations",
          "description": "[Localization config per region/channel] - Implements content localization and internationalization for channel, currency, and legal compliance, from section 6 of Legal Readiness. \n\nAllows specification of language, content locale, and legal settings for each region/channel pair. Fully normalized with foreign keys; does not copy language data. For example: French-Canada config for a web channel.\n\nKey relationships: region, channel, currency.\nSpecial behaviors: Used for runtime content selectors, and for ensuring site/legal notices and prices are rendered correctly.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [
            {
              "name": "region_id",
              "type": "uuid",
              "description": "Region being localized. References {@link ai_mall_regions.id}.",
              "relation": {
                "name": "region",
                "targetModel": "ai_mall_regions"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "Channel for this localization. References {@link ai_mall_channel.id}.",
              "relation": {
                "name": "channel",
                "targetModel": "ai_mall_channel"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "currency_id",
              "type": "uuid",
              "description": "Default currency for this localization. References {@link ai_mall_currencies.id}.",
              "relation": {
                "name": "currency",
                "targetModel": "ai_mall_currencies"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "language_tag",
              "type": "string",
              "description": "[IETF BCP 47 language tag] - Implements language/culture config (e.g., 'en-US', 'fr-CA'). Normalized string. Used at runtime for UI rendering and data selection.",
              "nullable": false
            },
            {
              "name": "rtl",
              "type": "boolean",
              "description": "[Right-to-left support flag] - Whether localization dictates RTL rendering (Arabic, Hebrew). Maintains atomicity.",
              "nullable": false
            },
            {
              "name": "content_locale",
              "type": "string",
              "description": "[Content locale string] - Local currency symbol, legal title, customary components. Atomic and normalized.",
              "nullable": false
            },
            {
              "name": "active",
              "type": "boolean",
              "description": "[Active flag] - Whether this localization is currently enabled. Normalized atomic flag.",
              "nullable": false
            },
            {
              "name": "deactivated_at",
              "type": "datetime",
              "description": "[Deactivation timestamp] - Logical deletion time.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "region_id",
                "channel_id",
                "language_tag"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "active"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "ai_mall_currencies",
          "description": "[Currency catalog & config] - Implements a normalized, reference catalog of supported currencies for global retail, per section 6 of Legal & Global Readiness. Used throughout prices, tax, and localization tables. Fully normalized (atomic code/name). For example, adding 'EUR' or 'KRW' for use in a channel/region.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "[ISO4217 code] - Three-letter currency code like 'USD'. Unique, atomic (not duplicated anywhere else). Required for 3NF compliance.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "[Official currency name] - e.g., 'US Dollar', 'Euro'. Fully atomic and normalized.",
              "nullable": false
            },
            {
              "name": "symbol",
              "type": "string",
              "description": "[Currency symbol] - '$', '€', '₩'. Atomic string, never concatenated or derived.",
              "nullable": false
            },
            {
              "name": "active",
              "type": "boolean",
              "description": "[Active flag] - Whether this currency is enabled for use.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        },
        {
          "name": "ai_mall_regions",
          "description": "[Region definitions] - Implements a master table for region/geography readiness (countries, states, etc.), as per Legal & Global Readiness. Enables ORM-level regionalization for tax, currency, localization, and legal flows. 3NF enforced through unique codes/ids. For example: 'KR', 'CA', 'US-CA'.\n\nKey relationships: referenced by tax, contract, and localization tables.\nSpecial behaviors: Uniqueness enforced for region code.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary Key."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "code",
              "type": "string",
              "description": "[Region ISO code] - Unique code (ISO3166 or custom) for each supported region. Atomic value, 3NF compliant. Examples: 'KR', 'CA', 'US-CA'.",
              "nullable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "[Region name] - Full name of the region. For example: 'Korea', 'Canada', 'California-USA'. Atomic, not derived.",
              "nullable": false
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "[Parent region ID] - If this region is a subdivision, references its parent region. Supports arbitrarily deep nesting. Null if top level. Self-reference, no duplication.",
              "nullable": true
            },
            {
              "name": "active",
              "type": "boolean",
              "description": "[Active flag] - Whether region is used for pricing/catalog/legal.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "code"
              ],
              "unique": true
            }
          ],
          "plainIndexes": [],
          "ginIndexes": [
            {
              "fieldName": "name"
            }
          ]
        }
      ]
    }
  ]
}