{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"pickleballcommunityapp_api_auth_tokens","description":"API authentication token management for the Pickleball Community App – This implements the security and session management requirements outlined in every requirements and access control section.\nMaintains a normalized, centralized registry of issued, active, and revoked API tokens for all actors (admins, players, service processes). 3NF compliance. Example: a token issued on login and tracked here. Key relationships: references to actor tables are polymorphic (resolved using actor_type and actor_id). Special: events for revocation, expiry, and audit logging.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Universally unique identifier for the API token record, allowing precise token tracking within security processes."},"foreignFields":[],"plainFields":[{"name":"token","type":"string","description":"API token string, typically a JWT or secure random. Used for all secure API requests, unique per row. E.g.: 'eyJhbGciOiJIUzI1NiIs...'.","nullable":false},{"name":"actor_type","type":"string","description":"Indicates the actor type ('admin', 'player', or 'service') the token is for. Used for polymorphic resolution to actual user or admin. E.g.: 'admin'.","nullable":false},{"name":"actor_id","type":"uuid","description":"UUID of the actor who owns this token. Used together with actor_type to resolve. E.g.: admin or player UUID.","nullable":false},{"name":"issued_at","type":"datetime","description":"UTC timestamp when token was generated. Used for expiry and audit. E.g.: '2025-07-27T20:10:05Z'.","nullable":false},{"name":"expires_at","type":"datetime","description":"UTC timestamp when token becomes invalid. E.g.: '2025-07-28T20:10:05Z'.","nullable":false},{"name":"revoked","type":"boolean","description":"Whether token has been explicitly revoked (logout, admin, etc). Used for session termination. False if token still valid.","nullable":false}],"uniqueIndexes":[{"fieldNames":["token"],"unique":true}],"plainIndexes":[{"fieldNames":["actor_type","actor_id"]},{"fieldNames":["expires_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"pickleballcommunityapp_roles","description":"System role registry: Implements role-based access control and permission matrix requirements. Tracks all valid roles ('admin', 'player', 'service', etc), referenced from other tables (e.g., tokens, permissions). 3NF compliance. Key: referenced by permission assignments and users. Special: Unique name constraint.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Universally unique identifier for the role entry."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"Unique role name. Implements canonical set of system roles, e.g. 'admin', 'player'. 3NF: exactly one per row.","nullable":false},{"name":"description","type":"string","description":"Long form description for documentation/UI use. E.g.: 'Event and payment management role.'","nullable":true}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[],"ginIndexes":[],"stance":"primary"},{"name":"pickleballcommunityapp_role_permissions","description":"Grants permissions for each role to act on resources/actions. Implements access matrix and fine-grained control.\nEach record links a role to an allowed resource/action. 3NF: mapping table depends solely on its own key. Key: foreign key to roles. Special: (role_id, resource, action) unique; supports quick permission checks; supports joining back to role details.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Universally unique identifier for this permission-map row."},"foreignFields":[{"name":"role_id","type":"uuid","description":"Belonged role's {@link pickleballcommunityapp_roles.id}. Foreign key to pickleballcommunityapp_roles. Ensures integrity for permission mapping.","relation":{"name":"role","targetModel":"pickleballcommunityapp_roles","fields":["role_id"],"references":["id"]},"unique":false,"nullable":false}],"plainFields":[{"name":"resource","type":"string","description":"Resource being controlled (e.g., 'event', 'enrollment', 'payment', etc). 3NF: One resource per row.","nullable":false},{"name":"action","type":"string","description":"Permitted action for this resource ('create', 'edit', 'view', etc.). One action per row.","nullable":false}],"uniqueIndexes":[{"fieldNames":["role_id","resource","action"],"unique":true}],"plainIndexes":[{"fieldNames":["resource","action"]}],"ginIndexes":[{"fieldName":"resource"}],"stance":"primary"}]},{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"pickleballcommunityapp_admins","description":"Admin actors entity – This implements the administrator identity and management requirement for controlling open play events, as referenced in multiple sections of the requirements (esp. Business Requirements, Roles & Permissions, Event Lifecycle Rules). \n\nBusiness explanation: This table records entities representing administrative users (facility, club, or group leaders) who can log in, create, modify, and manage pickleball events, set capacities, prices, and monitor enrollments/payments. Maintains 3NF compliance by storing admin-specific identity details separately from event definitions, keeping the actor-event association normalized. For example, Rachel, a club manager, would have her admin account stored here and linked to all events she manages.\n\nKey relationships: Typically referenced by pickleballcommunityapp_events.admin_id (in Events domain). No direct relationships in this file due to domain boundaries.\nSpecial behaviors: Only authenticated admins are allowed to create or edit events; one admin entry per unique account (enforced by unique index on email).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the admin actor."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"Admin’s contact email address – Implements unique identifier requirement and serves as login credential. Ensures normalization by providing a single point of truth for admin emails used for API or OAuth authentication. Example: 'admin@pickleballclub.com'. Must be unique for each admin.","nullable":false},{"name":"name","type":"string","description":"Admin’s full name – Implements the admin identification requirement. Stores cleartext human-readable identity for display in dashboards and communication. Example: 'Rachel Green'.","nullable":false},{"name":"phone","type":"string","description":"Admin’s contact phone – Supports admin contact and verification requirements. Ensures normalization by storing only actor-related data. Example: '+1-212-555-1234'.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp of admin account creation – Enables audit trail and supports temporal reporting. Ensures normalization as atomic timestamp. Example: '2025-07-28T12:00:00Z'.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last information update – Implements requirement for tracking last profile update. 3NF-compliant atomic field. Example: '2025-07-28T12:30:00Z'.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deletion timestamp – Allows marking account as deleted without physically removing data. Fulfills auditability and recovery business rules. Nullable as only set when account is deleted.","nullable":true}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"pickleballcommunityapp_players","description":"Player actors entity – Implements the requirement for tracking each pickleball enthusiast who may join or pay for open play events, as outlined throughout the requirements (Business Requirements, User Journeys, Event and Payment Rules). \n\nBusiness explanation: Keeps per-player identity for authentication, enrollment, and payment attribution. Maintains 3NF compliance by separating player identities from their enrollments/payments: each player record links via foreign keys (from other domains) for audit and reporting. For example, 'Jon' with his email and preferred contact info would have a row here, which is then referenced in enrollments and payments.\n\nKey relationships: Typically referenced by pickleballcommunityapp_event_enrollments.player_id, pickleballcommunityapp_enrollment_payments.player_id, and similar (all in other domains).\nSpecial behaviors: Each email is unique (enforces rule: one player per email). Players use these credentials for secure API authentication. Soft deletes with timestamp for GDPR/data retention compliance. ","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the player actor."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"Player's login and contact email – Implements unique identity and secure authentication requirement. Ensures normalization with one unique email per player; used for login and notifications. Example: 'jon@email.com'.","nullable":false},{"name":"name","type":"string","description":"Player's full name – Used for display, identification in event lists, and admin dashboards. 3NF atomic field. Example: 'Jon Baker'.","nullable":false},{"name":"phone","type":"string","description":"Player’s contact phone number – Fulfills additional contact, verification, and notification requirements. Normalized atomic field. Example: '+44 7901 234567'.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp the player account was created – Implements audit trail and reporting requirements for tracking new signups. Example: '2025-07-27T18:01:00Z'.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last update to player information – Used for audit trail, profile recency, and conflict resolution. Example: '2025-07-27T21:19:00Z'.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft-deletion timestamp – Used for GDPR compliance, soft deletion, and account recovery without loss of historical data. Only set when a player is actually deleted (nullable).","nullable":true}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"}]},{"filename":"schema-03-events.prisma","namespace":"Events","models":[{"name":"pickleballcommunityapp_events","description":"Event entity - This implements the event management requirement from the specification. \n\nRepresents a single pickleball open play event as created and managed by an admin. Stores all core details: title, schedule, venue, participation cap, pricing, and enrollment window. Maintains full 3NF normalization by not storing any participant or calculated data—event details only. For example, Rachel (an admin) creates a record here for \"Saturday Open Play.\"\n\nKey relationships: Enrollments, payments, and waitlists in other domain tables will reference this entity via foreign keys. It is referenced by enrollments and waitlist models in their domains.\nSpecial behaviors: Only admins can create/edit/delete; capacity and price are editable by admins only. No denormalized or pre-calculated fields. No participant records here.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique event identifier. Implements normalized entity identity."},"foreignFields":[],"plainFields":[{"name":"title","type":"string","description":"Event title - Implements required event attribute from specification. \n\nHolds the advertised name, such as 'Saturday Morning Open Play'. Maintains normalization by avoiding duplicate labels; referenced in UI and listings. For example, 'Saturday Open Play'.","nullable":false},{"name":"description","type":"string","description":"Event description - Implements business requirement for context. \n\nFull description of event rules or notes, e.g. 'Bring your own paddle'. Ensures normalization by storing only the text relevant for this event.","nullable":true},{"name":"venue","type":"string","description":"Venue name - Implements location tracking requirement. \n\nRepresents the name or common description of where the event is held. Maintains normalization by avoiding physical address duplication across events. UI example: 'Downtown Rec Center'.","nullable":false},{"name":"scheduled_at","type":"datetime","description":"Scheduled datetime - Implements event timing requirement. \n\nExact start (and implied) end time for the event. Ensures normalization by only recording atomic timestamp. Used for event filtering and display.","nullable":false},{"name":"enrollment_open_at","type":"datetime","description":"Enrollment window open - Implements the enrollment period rule. \n\nDatetime when players can begin enrolling. Maintains normalization by not duplicating enrollment logic. E.g., 2025-08-01T09:00:00.000Z.","nullable":false},{"name":"enrollment_close_at","type":"datetime","description":"Enrollment window close - Implements event closing logic. \n\nDatetime after which no new enrollments are accepted (unless capacity is raised). Maintains normalization by handling only the per-event cutoff, not per-participant state.","nullable":false},{"name":"max_participants","type":"int","description":"Maximum participants - Implements event capacity enforcement. \n\nInteger count of enrollment cap for this event, e.g., 16. Ensures normalization by recording cap per event and leaving enforcement to enrollment logic.","nullable":false},{"name":"price","type":"double","description":"Event price per participant - Implements payment requirement from business rules. \n\nStores the player fee to enroll, as set by the admin. Ensures normalization by not recapping or repeating pricing elsewhere. E.g., 10.0 for $10 entry.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp - Implements auditability and temporal modeling requirement. \n\nDatetime this event was created. Maintains normalization, facilitates change tracking in audit logs.","nullable":false},{"name":"updated_at","type":"datetime","description":"Last update timestamp - Implements audit and change-tracking requirements. \n\nDatetime of last modification. Ensures only atomic latest update is recorded, no audit trail here. Used for detecting stale records or triggering notifications.","nullable":false}],"uniqueIndexes":[{"fieldNames":["title","scheduled_at"],"unique":true}],"plainIndexes":[{"fieldNames":["scheduled_at"]},{"fieldNames":["venue"]}],"ginIndexes":[{"fieldName":"title"}],"stance":"primary"},{"name":"pickleballcommunityapp_event_waitlists","description":"Event waitlist entity - Implements the event waitlisting and overflow management requirement. \n\nStores records of players who join the waitlist when an event fills. Each record represents a waitlist entry for a specific event and player. Maintains 3NF—does not duplicate participant or event details; only references. For example, when an event is full, Jon registers his desire and appears here until a spot opens.\n\nKey relationships: Will contain foreign keys to event and player (implemented in Enrollments domain). Each waitlist entry joins a specific player to a specific event.\nSpecial behaviors: Players are ordered by join time; only the first-in-line is promoted if a spot opens. No denormalized or summary data kept.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique waitlist entry identifier."},"foreignFields":[{"name":"event_id","type":"uuid","description":"Associated event's {@link pickleballcommunityapp_events.id}. References the specific event this waitlist entry is for. Ensures normalization by not duplicating event info. Enables enforcement of per-event logic.","relation":{"name":"event","fields":["event_id"],"references":["id"],"targetModel":"pickleballcommunityapp_events"},"unique":false,"nullable":false}],"plainFields":[{"name":"joined_at","type":"datetime","description":"Join timestamp - Implements waitlist FIFO logic. \n\nDatetime the player joined the waitlist. Maintains normalization by capturing only atomic join instant. Used to order the waitlist for promotion on vacancy.","nullable":false}],"uniqueIndexes":[{"fieldNames":["event_id","id"],"unique":true}],"plainIndexes":[{"fieldNames":["event_id"]},{"fieldNames":["joined_at"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-04-enrollments.prisma","namespace":"Enrollments","models":[{"name":"pickleballcommunityapp_event_enrollments","description":"Event Enrollment - Implements business rules for player sign-ups, capacity enforcement, and auditability per 'Player Enrollment Rules' and API access matrices.\n\nThis model represents individual player enrollments for open play events. Tracks which player signed up for which event, their status, and links to payment and cancellation records. Maintains full normalization (3NF): each enrollment is atomic with references to admin-created events and authenticated players. Example: Jon signs up for Rachel's event.\n\nKey relationships: references pickleballcommunityapp_players (who enrolled), pickleballcommunityapp_events (event info), linked to payment and cancellation tables.\nSpecial behaviors: enforces uniqueness of (player_id, event_id), handles capacity logic at application layer, and maintains enrollment status transitions.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the enrollment record."},"foreignFields":[{"name":"pickleballcommunityapp_event_id","type":"uuid","description":"Event's {@link pickleballcommunityapp_events.id} - Links this enrollment to its parent event.","relation":{"name":"toEvent","fields":["pickleballcommunityapp_event_id"],"references":["id"],"targetModel":"pickleballcommunityapp_events"},"unique":false,"nullable":false},{"name":"pickleballcommunityapp_player_id","type":"uuid","description":"Enrolled player's {@link pickleballcommunityapp_players.id} - The player who is enrolling for the event.","relation":{"name":"toPlayer","fields":["pickleballcommunityapp_player_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":false}],"plainFields":[{"name":"enrolled_at","type":"datetime","description":"Timestamp when player enrollment occurred. Implements auditability and event timeline tracking. Example: '2025-08-01T09:00:00Z'.","nullable":false},{"name":"status","type":"string","description":"Enrollment status (e.g., 'pending_payment', 'confirmed', 'cancelled', 'waitlisted'). Implements event capacity enforcement and payment linkage. Example: 'confirmed'.","nullable":false}],"uniqueIndexes":[{"fieldNames":["pickleballcommunityapp_event_id","pickleballcommunityapp_player_id"],"unique":true}],"plainIndexes":[{"fieldNames":["enrolled_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"pickleballcommunityapp_enrollment_payments","description":"Enrollment Payment - Implements business requirement for recording and tracking player payments specific to their event enrollment. Maps to 'Payment Handling' and auditability requirements.\n\nThis model links event enrollments to payment transactions, recording exact payment provider details, transaction IDs, status, and timestamps. Maintains 3NF: all monetary info and provider details are referenced, not duplicated. Example: Jon's $20 Stripe charge for Rachel's event.\n\nKey relationships: references the enrollment record and external payment provider transactions in payment tables.\nSpecial behaviors: enforces 1:1 relationship with enrollment except for exceptional multi-payment scenarios (rare, can be expanded).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the enrollment payment record."},"foreignFields":[{"name":"pickleballcommunityapp_enrollment_id","type":"uuid","description":"Enrollment's {@link pickleballcommunityapp_event_enrollments.id} - The enrollment this payment is for.","relation":{"name":"toEnrollment","fields":["pickleballcommunityapp_enrollment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_enrollments"},"unique":false,"nullable":false},{"name":"pickleballcommunityapp_event_payment_id","type":"uuid","description":"Payment transaction record's {@link pickleballcommunityapp_event_payments.id} - Actual payment in payment provider mapping table.","relation":{"name":"toEventPayment","fields":["pickleballcommunityapp_event_payment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_payments"},"unique":false,"nullable":false}],"plainFields":[{"name":"paid_at","type":"datetime","description":"Timestamp when payment was recorded for this enrollment. For traceability and business reporting (audit). Example: '2025-08-01T09:01:00Z'.","nullable":false},{"name":"payment_status","type":"string","description":"Enumerated payment status value (e.g., 'pending', 'succeeded', 'refunded', 'failed'). Implements business requirement for payment lifecycle traceability. Example: 'succeeded'.","nullable":false}],"uniqueIndexes":[{"fieldNames":["pickleballcommunityapp_enrollment_id","pickleballcommunityapp_event_payment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["paid_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"pickleballcommunityapp_enrollment_cancellations","description":"Enrollment Cancellation - Implements the business rule requiring recording of enrollment cancellations (player or admin-initiated), for audit trails and refund logic per 'Refunds & Cancellations' requirement.\n\nEach record represents a cancellation event for a specific enrollment, indicating initiator, timestamp, and relevant refund eligibility. Maintains 3NF by separating cancellation from the main enrollment table. Example: Jon cancels before refund cutoff, auto-logs who canceled and when.\n\nKey relationships: links to the original enrollment and initiator (player or admin).\nSpecial behaviors: supports both admin and player cancellation logging, feeds refund automation.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the cancellation record."},"foreignFields":[{"name":"pickleballcommunityapp_enrollment_id","type":"uuid","description":"Enrollment's {@link pickleballcommunityapp_event_enrollments.id} - Links to the enrollment record being cancelled.","relation":{"name":"toEnrollment","fields":["pickleballcommunityapp_enrollment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_enrollments"},"unique":false,"nullable":false},{"name":"cancelled_by_admin_id","type":"uuid","description":"{@link pickleballcommunityapp_admins.id} - The admin who cancelled the enrollment, if admin-initiated. Optional: null if player-initiated.","relation":{"name":"toAdmin","fields":["cancelled_by_admin_id"],"references":["id"],"targetModel":"pickleballcommunityapp_admins"},"unique":false,"nullable":true},{"name":"cancelled_by_player_id","type":"uuid","description":"{@link pickleballcommunityapp_players.id} - The player who cancelled, if self-cancelling. Optional: null if admin-initiated.","relation":{"name":"toPlayer","fields":["cancelled_by_player_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":true}],"plainFields":[{"name":"cancelled_at","type":"datetime","description":"Timestamp for the cancellation event, for auditability and refund rule enforcement. Example: '2025-08-01T12:00:00Z'.","nullable":false},{"name":"refund_status","type":"string","description":"Refund status at the time of cancellation (e.g., 'requested', 'completed', 'denied', 'not_applicable'). For cancellation rule enforcement. Example: 'requested'.","nullable":false},{"name":"cancellation_reason","type":"string","description":"Text description of why the cancellation was made. For recording admin/player intent and communication in auditability. Example: 'Unable to attend'.","nullable":true}],"uniqueIndexes":[{"fieldNames":["pickleballcommunityapp_enrollment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["cancelled_at"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-05-payments.prisma","namespace":"Payments","models":[{"name":"pickleballcommunityapp_event_payments","description":"Event Payment Record - Implements atomic, normalized storage of each transaction when a player pays for an event, as required by the payment and audit rules in the requirements. Maintains 3NF, only raw transaction details, with clear relations to player and event and complete audit traceability. Used each time a player successfully completes an in-app payment to join an event.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the event payment transaction record."},"foreignFields":[{"name":"pickleballcommunityapp_player_id","type":"uuid","description":"Relates the payment to the paying participant ({@link pickleballcommunityapp_players.id}). Ensures every payment is traceable to a real player.","relation":{"name":"player","fields":["pickleballcommunityapp_player_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":false},{"name":"pickleballcommunityapp_event_id","type":"uuid","description":"Links the payment to the specific event that was purchased ({@link pickleballcommunityapp_events.id}).","relation":{"name":"event","fields":["pickleballcommunityapp_event_id"],"references":["id"],"targetModel":"pickleballcommunityapp_events"},"unique":false,"nullable":false}],"plainFields":[{"name":"amount_paid","type":"double","description":"Amount paid for event enrollment – Implements the requirement that each transaction records the actual money collected (no calculations or aggregations).","nullable":false},{"name":"payment_provider","type":"string","description":"Indicates the payment provider used (e.g., 'Stripe', 'Lynk'), as needed for reconciliation and tracing issues.","nullable":false},{"name":"payment_provider_transaction_id","type":"string","description":"The reference or transaction ID assigned by the provider (e.g. Stripe payment intent ID). Required for traceability/audit of all payments and provider reconciliation.","nullable":false},{"name":"paid_at","type":"datetime","description":"Timestamp of successful payment. Enforces atomic operation and enables audit logs/traceability for payment/dispute resolution.","nullable":false}],"uniqueIndexes":[{"fieldNames":["payment_provider_transaction_id"],"unique":true}],"plainIndexes":[{"fieldNames":["pickleballcommunityapp_player_id","paid_at"]},{"fieldNames":["pickleballcommunityapp_event_id","paid_at"]}],"ginIndexes":[],"stance":"primary"},{"name":"pickleballcommunityapp_payment_refunds","description":"Payment Refund Record - Implements event and payment rule requirements for audit, trace, and normalization of all refund events, with strict linkage to original payment and player. Remains fully normalized (3NF); each refund is atomic and mapped to one payment and one player only. Used when a player receives an in-app or admin-triggered refund following cancellation or event closure.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for the refund transaction."},"foreignFields":[{"name":"event_payment_id","type":"uuid","description":"Relates this refund to the original event payment being refunded ({@link pickleballcommunityapp_event_payments.id}). Maintains precise audit and business integrity.","relation":{"name":"eventPayment","fields":["event_payment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_payments"},"unique":false,"nullable":false},{"name":"pickleballcommunityapp_player_id","type":"uuid","description":"Indicates the recipient of the refund ({@link pickleballcommunityapp_players.id}). Ensures refunds are auditably linked to a player.","relation":{"name":"player","fields":["pickleballcommunityapp_player_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":false}],"plainFields":[{"name":"refund_amount","type":"double","description":"Atomic value for the refund provided (single refund per record; no aggregates). Enables clear, complete audit for compliance.","nullable":false},{"name":"refund_reason","type":"string","description":"Human-readable code or note explaining the business trigger for the refund (e.g., 'Admin-canceled', 'Player withdrew before cutoff'). Complies with event/payment rules for trace/explanation.","nullable":false},{"name":"refunded_at","type":"datetime","description":"Timestamp identifying when the actual refund was processed. Required for full event-based auditability.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["event_payment_id"]},{"fieldNames":["pickleballcommunityapp_player_id","refunded_at"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-06-notifications.prisma","namespace":"Notifications","models":[{"name":"pickleballcommunityapp_in_app_notifications","description":"In-app notification records - This implements the need for real-time and historical in-app notification delivery for key state changes as defined in the requirements (see: Event and Payment Rules, Notifications section; Role Permission Matrix). \n\nThis model provides a normalized storage structure for all visual notifications displayed to users (admins or players) in the app's UI, such as confirmation of enrollment, payment status changes, refunds, waitlist promotions, or event updates. Designed to support 3NF by separating notification delivery from the event/business logic and enabling auditability without duplicating message content. For example, when a player enrolls or an admin cancels an event, an in-app notification is generated for that actor referencing the triggering business entity (via foreign keys).\n\nKey relationships: references target user (by actor foreign key) and may include reference to event/enrollment via UUID fields.\nSpecial behaviors: Each notification includes type, delivery/read status, linkage to a specific business entity, and timestamping for delivery/read tracking.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Serves as the unique identifier for this in-app notification record."},"foreignFields":[{"name":"target_user_id","type":"uuid","description":"Target user's {@link pickleballcommunityapp_admins.id} or {@link pickleballcommunityapp_players.id}.\n\nReferences the intended recipient of this in-app notification. This maintains strict normalization and supports both player and admin recipients. Usage examples: a player receives a confirmation after enrolling; an admin receives a summary when an event reaches full capacity.","relation":{"name":"targetUser","fields":["target_user_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":false},{"name":"related_event_id","type":"uuid","description":"Related event's {@link pickleballcommunityapp_events.id}, if this notification is related to a specific event.\n\nAllows linking the notification to the triggering event entity for context and normalization. Null if notification is not about any one event. For example, an event update or capacity status notifications.","relation":{"name":"relatedEvent","fields":["related_event_id"],"references":["id"],"targetModel":"pickleballcommunityapp_events"},"unique":false,"nullable":true},{"name":"related_enrollment_id","type":"uuid","description":"Related enrollment's {@link pickleballcommunityapp_event_enrollments.id}, if this notification is directly tied to a user's enrollment action.\n\nProvides fine-grained tracking back to enrollment for status changes, refunds, or cancellations. Maintains normalization (3NF) by referencing only the UUID. Example: a player receives a notification their waitlist status has changed for a specific enrollment.","relation":{"name":"relatedEnrollment","fields":["related_enrollment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_enrollments"},"unique":false,"nullable":true}],"plainFields":[{"name":"notification_type","type":"string","description":"Type of notification delivered (e.g., 'enrollment_confirmed', 'payment_received', 'refund_issued', 'event_update', 'waitlist_promotion'). Implements the notification domain requirement for clear and actionable user messages. Maintains normalization by storing type/trigger information as a single field.\nFor example, a notification_type of 'enrollment_confirmed' indicates the player enrolled successfully.","nullable":false},{"name":"message_body","type":"string","description":"Human-readable body of the notification shown in-app. Fulfills user experience requirements for actionable, descriptive messages (see: UX, User Journey). This maintains normalization by storing the unique message copy for each individual notification. For example, 'Your enrollment is confirmed for Open Play on July 3.'","nullable":false},{"name":"delivered_at","type":"datetime","description":"Timestamp when the notification was delivered/displayed to the in-app user. Fulfills audit trail and notification tracking requirement (see: Auditability, Non-Functional Requirements). Always filled; supports notification ordering and user timeline views.","nullable":false},{"name":"read_at","type":"datetime","description":"Timestamp when the notification was marked as read by the user, if applicable. Null if never read. Implements notification tracking and UX requirements for differentiating new/read notifications.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["target_user_id","delivered_at"]},{"fieldNames":["notification_type"]},{"fieldNames":["delivered_at"]}],"ginIndexes":[{"fieldName":"message_body"}],"stance":"primary"},{"name":"pickleballcommunityapp_email_notifications","description":"Email notification queue and delivery records - This implements email delivery/audit requirements for state changes, confirmations, or alerts (see: Event and Payment Rules, Notifications, Non-Functional Requirements sections).\n\nProvides a normalized record of all outbound email messages sent to users (admin or player), used for non-in-app channels such as confirmations, cancellations, or reminders. Distinct from in-app for denormalization avoidance and transactional tracking. For example, when a player enrolls, an email confirmation may be sent; if an admin issues a refund, an email receipt is generated.\n\nKey relationships: links to recipient user and optionally to event/enrollment. Maintains 3NF by never storing pre-calculated or duplicated data; only references business entities by UUID.\nSpecial behaviors: maintains email status (queued/sent/failed), provider message ID for traceability, and all critical timestamps.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique record per email notification delivered or attempted."},"foreignFields":[{"name":"target_user_id","type":"uuid","description":"Target recipient user's {@link pickleballcommunityapp_admins.id} or {@link pickleballcommunityapp_players.id}. Implements business requirement for targeted email delivery to both roles, normalized to avoid attribute duplication.","relation":{"name":"targetUser","fields":["target_user_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":false},{"name":"related_event_id","type":"uuid","description":"Related event's {@link pickleballcommunityapp_events.id}, if this notification pertains to a specific event. Used for audit linking, reporting, and detailed tracking. Null if not event-specific. Maintains normalized structure by reference only.","relation":{"name":"relatedEvent","fields":["related_event_id"],"references":["id"],"targetModel":"pickleballcommunityapp_events"},"unique":false,"nullable":true},{"name":"related_enrollment_id","type":"uuid","description":"Related enrollment's {@link pickleballcommunityapp_event_enrollments.id}, if this notification relates to enrollment activity. Supports traceability and compliance/audit needs.","relation":{"name":"relatedEnrollment","fields":["related_enrollment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_enrollments"},"unique":false,"nullable":true}],"plainFields":[{"name":"email_subject","type":"string","description":"Email subject line. Required for user experience and deliverability. This supports clear communication and searchability in notification records. Example: 'Your enrollment is complete for Saturday Open Play'.","nullable":false},{"name":"email_body","type":"string","description":"The body/content of the sent email message. Fulfills the requirement for descriptive, role-appropriate, and (if necessary) transactional communication. Maintains data normalization by decoupling message copy from application logic. Example: 'You have been successfully enrolled for Open Play on July 3.'","nullable":false},{"name":"delivery_status","type":"string","description":"Current delivery status: e.g., 'queued', 'sent', 'delivered', 'failed'. Provides transactional audit and retry support as per Non-Functional Requirements. Maintains status atomicity and prevents ambiguous notification state.","nullable":false},{"name":"provider_message_id","type":"string","description":"Provider's unique message ID (e.g., Stripe, Lynk, or SMTP transaction ID). Enables traceability for outbound notification delivery and compliance/audit logs. Example: 'smtp==xyz123'. May be null if not yet received.","nullable":true},{"name":"queued_at","type":"datetime","description":"Timestamp when email entered the sending queue. Fulfills traceability and auditability for notification timing and order.","nullable":false},{"name":"sent_at","type":"datetime","description":"Timestamp when email was sent to outbound email service. Enables service-level monitoring and SLA compliance checking. Null if not yet sent.","nullable":true},{"name":"delivered_at","type":"datetime","description":"Timestamp when email confirmed delivered by provider. Required for feedback loop and alert handling. Null if not yet delivered/confirmed.","nullable":true},{"name":"failed_at","type":"datetime","description":"Timestamp if/when the delivery failed (bounce, rejection, etc.). Null unless a delivery failure is confirmed. Used for monitoring and troubleshooting as per requirements.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["target_user_id","queued_at"]},{"fieldNames":["delivery_status","queued_at"]},{"fieldNames":["related_event_id"]}],"ginIndexes":[{"fieldName":"email_body"}],"stance":"primary"},{"name":"pickleballcommunityapp_notification_logs","description":"Notification audit logs - This implements auditability, compliance, and non-repudiation requirements from the Non-Functional Requirements and Auditability rules (see requirements). \n\nCaptures a normalized, append-only history of all notifications generated, delivered, and user interactions (in-app and email), including changes of state. This model decouples event/business logic from user-facing notifications and supports platform-wide search, traceability, and reporting. For example, every notification delivery attempt, opening/read, or failure is logged, referencing both the notification and (if present) the user, event, and enrollment.\n\nKey relationships: references the in-app and/or email notification, user, and related business entity by UUID only. No denormalization; models only atomic audit actions for full 3NF adherence.\nSpecial behaviors: retains immutable log of notification events for security/audit purposes; includes log event type, timestamp, and optional details.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Globally unique identifier for each notification log entry."},"foreignFields":[{"name":"notification_id","type":"uuid","description":"Related in-app or email notification ID. Enables normalized linkage across notification types for full audit tracking. REQUIRED: each log record must be associated with a notification for traceability.\nReferences either {@link pickleballcommunityapp_in_app_notifications.id} or {@link pickleballcommunityapp_email_notifications.id}.","relation":{"name":"notification","fields":["notification_id"],"references":["id"],"targetModel":"pickleballcommunityapp_in_app_notifications"},"unique":false,"nullable":false},{"name":"target_user_id","type":"uuid","description":"User's {@link pickleballcommunityapp_admins.id} or {@link pickleballcommunityapp_players.id} related to this log event. Null if event not tied to a specific user (for example, failed broadcast or system errors).\nEnsures 3NF by linking to user only as needed.","relation":{"name":"targetUser","fields":["target_user_id"],"references":["id"],"targetModel":"pickleballcommunityapp_players"},"unique":false,"nullable":true},{"name":"related_event_id","type":"uuid","description":"Event's {@link pickleballcommunityapp_events.id}, if this log entry is contextually tied to an event. Maintains normalized linkage for event-driven notifications without denormalization. Null if unrelated.","relation":{"name":"relatedEvent","fields":["related_event_id"],"references":["id"],"targetModel":"pickleballcommunityapp_events"},"unique":false,"nullable":true},{"name":"related_enrollment_id","type":"uuid","description":"Enrollment's {@link pickleballcommunityapp_event_enrollments.id}, if log event is about a user's enrollment notification. Null if not applicable. 3NF by UUID reference only.","relation":{"name":"relatedEnrollment","fields":["related_enrollment_id"],"references":["id"],"targetModel":"pickleballcommunityapp_event_enrollments"},"unique":false,"nullable":true}],"plainFields":[{"name":"log_event_type","type":"string","description":"Type of log event (e.g., 'notification_created', 'delivered', 'read', 'failed', 'email_queued', 'email_sent', 'email_bounced', etc.). Implements the requirement for full traceability, state changes, and troubleshooting. Each log entry captures an atomic state change or event related to a notification.","nullable":false},{"name":"occurred_at","type":"datetime","description":"Timestamp when the log event occurred. Implements requirement for precise ordering and auditability of notification-related events. For example, the exact time a notification delivery is attempted or a user reads an in-app message.","nullable":false},{"name":"details","type":"string","description":"Optional details or metadata regarding the log event (for example, provider response, error codes, or custom JSON blob). Enables further troubleshooting and compliance needs; null if not required. Implements non-redundant, atomic extension of the log event.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["notification_id","occurred_at"]},{"fieldNames":["target_user_id","occurred_at"]}],"ginIndexes":[{"fieldName":"details"}],"stance":"primary"}]},{"filename":"schema-07-audit.prisma","namespace":"Audit","models":[{"name":"pickleballcommunityapp_audit_logs","description":"Audit Log Entry – This implements the audit and traceability requirement from the requirements document, providing an immutable record of key actions and changes in the Pickleball Community App. \n\nThis table serves as a detailed business log for all critical system and user activities—such as event creation, enrollment, payment, cancellations, and permission changes. It supports traceability, compliance, and incident investigation, ensuring admins can reconstruct a full history of significant state transitions or API actions. Normalization (3NF) is maintained by storing only atomic event data and referencing related entities via UUIDs, never duplicating unrelated entity data within the log. \n\nFor example, whenever a user (admin or player) performs an action (like enrolling in an event or processing a refund), a corresponding log entry is created. \n\nKey relationships: Can reference users, events, enrollments, or payment IDs from their respective tables (by uuid) as nullable foreign keys to capture context. \nSpecial behaviors: Immutable—rows must never be updated or deleted to preserve audit integrity. Supports filtering by timestamp, action type, and actor.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Uniquely identifies each audit log entry."},"foreignFields":[{"name":"actor_admin_id","type":"uuid","description":"Related admin's {@link pickleballcommunityapp_admins.id} – The admin who triggered the action, if applicable. Enables filtering/admin accountability.","relation":{"name":"fkActorAdminId","targetModel":"pickleballcommunityapp_admins","field":"id"},"unique":false,"nullable":true},{"name":"actor_player_id","type":"uuid","description":"Related player's {@link pickleballcommunityapp_players.id} – The player who triggered the action, if applicable. Enables user-level tracking.","relation":{"name":"fkActorPlayerId","targetModel":"pickleballcommunityapp_players","field":"id"},"unique":false,"nullable":true},{"name":"event_id","type":"uuid","description":"Event's {@link pickleballcommunityapp_events.id} – The event related to the logged action, if any. Supports contextual filtering (e.g. which event was edited, enrolled, or cancelled).","relation":{"name":"fkEventId","targetModel":"pickleballcommunityapp_events","field":"id"},"unique":false,"nullable":true},{"name":"enrollment_id","type":"uuid","description":"Enrollment's {@link pickleballcommunityapp_event_enrollments.id} – The enrollment record affected by the action (if applicable). Enables event enrollment history tracing.","relation":{"name":"fkEnrollmentId","targetModel":"pickleballcommunityapp_event_enrollments","field":"id"},"unique":false,"nullable":true},{"name":"payment_id","type":"uuid","description":"Payment's {@link pickleballcommunityapp_event_payments.id} – Links to the payment associated with the action for financial traceability.","relation":{"name":"fkPaymentId","targetModel":"pickleballcommunityapp_event_payments","field":"id"},"unique":false,"nullable":true}],"plainFields":[{"name":"action","type":"string","description":"Action type – Implements the requirement to specify the nature of each business or API event for traceability. Example: 'event_create', 'enrollment_confirm', 'payment_refund'. Maintains normalization by recording atomic action types (no grouping). Required.","nullable":false},{"name":"acted_at","type":"datetime","description":"Timestamp when action occurred – Records the precise date and time of the auditable event. For example, when a user enrolls or makes a payment. Ensures normalization (no derived fields); supports time-window audits. Required.","nullable":false},{"name":"details","type":"string","description":"Description/details – Captures additional free-text details about the event (such as API request parameters or human notes). Optional, provides additional clarity for compliance/audit trails; normalized as a single atomic value.","nullable":true},{"name":"ip_address","type":"string","description":"IP address related to the action – Implements the logging requirement for security and compliance audits. Ensures traceability of request origin. Optional; may be null for system actions.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["acted_at"]}],"ginIndexes":[{"fieldName":"details"}],"stance":"primary"}]}]}