{"files":[{"filename":"schema-01-core.prisma","namespace":"Core","models":[{"name":"users","description":"User accounts and profiles - This implements the User entity from the requirements document (see Data Model & ERD, security/authentication, and acceptance criteria). \n\nHandles all employee account data, authentication states, profile information, and role management. For example, employees named Alex Kim, Jamie Lee, or any employee with a company email will have an associated record here.\n\nKey relationships: Each user can author many posts, comments, and likes.\nSpecial behaviors: Enforces unique email, password policy, and access control. Admin status is recorded with the role field. Password-required onboarding and force-change tracking.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each user."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"User's display name - Implements the requirement for employee identity and personalization.\n\nRepresents the user's full name as shown in the UI (\"Welcome, Alex\"). For example: \"Alex Kim\", \"Jamie Lee\".\nCannot be null. Used for greetings, attribution, and auditing.","nullable":false},{"name":"email","type":"string","description":"Unique company email address - Implements the unique employee login and SSO requirement.\n\nBusiness meaning: Company-issued, required for login. Example: alex@company.com. Enforced as unique and must match company domain in the app.\nMust not be null. Used for authentication, notifications, and identity.","nullable":false},{"name":"password_hash","type":"string","description":"Hashed user password - Implements secure authentication (see security requirements).\n\nStores the user's hashed and salted password. Application logic enforces strength (min length, complexity).\nFor example, a hashed string value (never plaintext). Cannot be null.","nullable":false},{"name":"role","type":"string","description":"Role/permission group - Implements requirement for role-based access (employee/admin).\n\nBusiness meaning: defines access controls; values: 'employee' or 'admin'. For example, 'employee' for general, 'admin' for moderators.\nNot null. Drives authorization checks across the system.","nullable":false},{"name":"status","type":"string","description":"Account status - Implements status/lockout/active requirements.\n\nBusiness meaning: reflects account state ('active','inactive','locked'). Used for login control, can be updated by admin, or system triggers after lockout attempts. Not null.\nFor example: 'active' for permitted, 'locked' after failed logins.","nullable":false},{"name":"password_changed","type":"boolean","description":"Tracks if password has been changed from default - Implements password-onboarding compliance requirement.\n\nFor example, set to false for new users, true after password change. Used to force reset on first login (see acceptance criteria).","nullable":false},{"name":"created_at","type":"datetime","description":"User creation timestamp - Implements all audit and registration tracking requirements.\n\nSet when the user record is created. For example: user signs up, this is set to now. Used for monitoring new hires and access logs.\nCannot be null.","nullable":false},{"name":"updated_at","type":"datetime","description":"Latest profile or credential update - Implements traceability and auditing requirement.\n\nSet to now when any user data (profile, password, role) is changed.\nFor example, user changes password, display name, or status--this updates. Cannot be null.","nullable":false}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["role"]},{"fieldNames":["status"]}],"ginIndexes":[{"fieldName":"name"}],"stance":"primary"},{"name":"boards","description":"Discussion boards available for posts - This implements the Board entity from the requirements document (Data Model & ERD, content management, navigation requirements).\n\nRepresents a logical forum such as Announcements, Free Board, or Popular Board. For example, all posts in 'Announcements' are restricted to admins. Boards are referenced by posts.\n\nKey relationships: Boards contain many posts. Locked-in board types.\nSpecial behaviors: Board type/name is used in navigation, board config, and filtering. Application logic enforces allowed types and permissions for Announcements.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each board."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"Board name (Announcements, Free Board, Popular Board) - Implements board identification and navigation requirements.\n\nBusiness meaning: Defines which board the record represents. For example: 'Announcements', 'Free Board', 'Popular Board'. Used for grouping and filtering posts. Not null and referenced by UI navigation.\nCannot be empty.","nullable":false},{"name":"description","type":"string","description":"Description of board - Implements board help-text/content management requirement.\n\nBusiness meaning: Optional admin-supplied text describing board use/purpose. Example: 'For official company announcements.'\nHelps users pick correct board for posts.\nCan be null: not all boards require extended description.","nullable":true},{"name":"created_at","type":"datetime","description":"Creation timestamp of board - Implements audit and configuration tracking requirement.\n\nSet when board is created by admin. Mostly static after deployment, as boards are not frequently changed. Not null.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of last board update - Implements configuration tracking requirement.\n\nUpdated when board settings, description, or visibility changes.\nFor example, if admin updates Free Board description.","nullable":false}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[],"ginIndexes":[{"fieldName":"name"},{"fieldName":"description"}],"stance":"primary"}]},{"filename":"schema-02-content.prisma","namespace":"Content","models":[{"name":"posts","description":"Posts - This implements main bulletin board content entity requirements from the functional requirements and high-level ERD. \n\nProvides core functionality for posting messages/announcements to boards, authored by users. Supports likes, comments, and auto-promotion to the Popular Board (handled in business logic). For example, employees post announcements or messages; admins post official notices.\n\nKey relationships: Belongs to one board; authored by one user; has many comments; has many likes; referenced by popular board logic.\nSpecial behaviors: Only authors or admins can edit/delete; deleted posts are hard deleted; likes_count is updated transactionally.","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key - Unique identifier for each post. Implements the entity identity requirement from the ERD and ensures record uniqueness."},"foreignFields":[{"name":"board_id","type":"uuid","description":"Board Reference - Links post to its board. Implements the board containment and navigation structure requirement (see Board Structure requirements).","relation":{"name":"board","targetModel":"boards"},"unique":false,"nullable":false},{"name":"author_id","type":"uuid","description":"Author - References the user who created the post. Implements post ownership according to user persona and access control requirements.","relation":{"name":"author","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","description":"Title - Implements post titling requirement for display and navigation. \n\nBusiness meaning: Post heading as visible in lists and details. For example, 'Q3 Results Announced'.\nRequired field for submitting posts.","nullable":false},{"name":"content","type":"string","description":"Content Body - Implements post content requirement. \n\nBusiness meaning: The main text of the post. For example, announcement details, discussion points, etc. Cannot be empty.","nullable":false},{"name":"is_deleted","type":"boolean","description":"Deletion Flag - Implements hard delete policy (see Deletion & Data Handling Policies). \n\nIndicates whether the post is deleted (true) or not (false).\nBusiness logic ensures 'deleted' posts are inaccessible in UI/API. For example, deleting a post immediately removes it from listings.","nullable":false},{"name":"likes_count","type":"int","description":"Like Count - Tracks number of likes for the post (for Popular Board promotion logic). Implements content interaction features from likes requirements. \n\nAutomatically incremented/decremented as users like/unlike posts (app logic ensures accuracy and threshold checks for Popular Board).\nFor example, a post with 11 likes appears in Popular Board.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation Timestamp - Implements audit/traceability and ordering requirement. \n\nUsed for display ordering and retention policy enforcement.","nullable":false},{"name":"updated_at","type":"datetime","description":"Update Timestamp - Implements audit/traceability and ordering requirement for tracking edits. Updated whenever the post changes.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["board_id","created_at"]},{"fieldNames":["author_id","created_at"]},{"fieldNames":["likes_count"]}],"ginIndexes":[{"fieldName":"title"}],"stance":"primary"},{"name":"comments","description":"Comments - This implements the commenting system requirements from the functional requirements and high-level ERD. \n\nAllows users to add comments to posts and one-level nested replies. For example, users commenting with feedback or follow-ups.\n\nKey relationships: Belongs to one post; can belong to a parent comment (for one-level nesting); authored by one user; can have many likes.\nSpecial behaviors: Only authors/admins can edit/delete; deleted comments are hard deleted; only one-level nesting allowed (parent_id nullable; no deeper replies).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key - Unique identifier for each comment. Implements the entity identity requirement for comments."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Post Reference - Links comment to its post. Implements comment-post relationship from the ERD.","relation":{"name":"post","targetModel":"posts"},"unique":false,"nullable":false},{"name":"parent_id","type":"uuid","description":"Parent Comment - Enables one-level nested replies. Nullable to indicate top-level comment. Implements parent-child comment relationship for one-level nesting only (see Commenting System requirements).","relation":{"name":"parent","targetModel":"comments"},"unique":false,"nullable":true},{"name":"author_id","type":"uuid","description":"Author - References the user who wrote the comment. Implements comment ownership per user management and security policies.","relation":{"name":"author","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"content","type":"string","description":"Content Body - Implements comment content. Business meaning: Main text of the comment or reply. Cannot be empty.","nullable":false},{"name":"is_deleted","type":"boolean","description":"Deletion Flag - Implements hard delete and visibility policy. Indicates if the comment is deleted (true) or not (false). For example, deleted comments are hidden in UI/API.","nullable":false},{"name":"likes_count","type":"int","description":"Like Count - For comment interaction features. Tracks number of likes (for UI and potential future popular comments logic).","nullable":false},{"name":"created_at","type":"datetime","description":"Creation Timestamp - For audit, traceability, and ordering. Used in sorting and retention checks.","nullable":false},{"name":"updated_at","type":"datetime","description":"Update Timestamp - Tracks last edit time. Allows audit of comment modifications.","nullable":false}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id","created_at"]},{"fieldNames":["author_id","created_at"]}],"ginIndexes":[],"stance":"primary"}]},{"filename":"schema-03-interaction.prisma","namespace":"Interaction","models":[{"name":"likes","description":"Like entity - This implements the 'Unique like per user per target (post or comment), targeting either post or comment' requirement as outlined in '11_data_model_and_erd_high_level.md' and '5_functional_requirements.md'. \n\nAllows a user to 'like' a post or a comment, but never both simultaneously for a single like record. Enforces uniqueness per (user_id, target_type, target_id). For example, when a user clicks the like button on a post, a like record is created for that post; the same for comments. The schema ensures users cannot like the same content multiple times even with concurrent requests.\n\nKey relationships: links to users, posts, and comments depending on the context. Uses 'target_type' to differentiate between post and comment likes. On deletion of the target, referential integrity is preserved by cascading deletes.\nSpecial behaviors: uniqueness is enforced, and likes are hard deleted with the associated target post or comment (no recovery).","material":false,"primaryField":{"name":"id","type":"uuid","description":"Primary Key. Unique identifier for each like record."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Liked user's {@link users.id}.\n\nReferences the user (employee) who performed the like action. Each like must always have a valid user. Required for auditing and constraint enforcement.","relation":{"name":"user","targetModel":"users"},"unique":false,"nullable":false}],"plainFields":[{"name":"target_type","type":"string","description":"Target content type - Implements the requirement: like must apply to either posts or comments, not both in one record.\n\nIndicates whether the like is attached to a post or a comment. Value must be 'post' or 'comment'. For example, target_type='post' means this like belongs to a post; 'comment' means it is attached to a comment.","nullable":false},{"name":"target_id","type":"uuid","description":"Target entity ID - Implements: target of the like (post or comment).\n\nStores the ID of the entity being liked. If target_type='post', points to posts.id; if 'comment', points to comments.id. Enforces referential integrity in application logic. For example, if liking a comment, target_id will store the comment's ID.","nullable":false},{"name":"created_at","type":"datetime","description":"Creation timestamp - Implements traceability and audit requirement.\n\nRecords when the like occurred. For example, if a user likes a post at 9:01am, this field records the exact time. Not nullable.","nullable":false}],"uniqueIndexes":[{"fieldNames":["user_id","target_type","target_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[],"stance":"primary"}]}]}